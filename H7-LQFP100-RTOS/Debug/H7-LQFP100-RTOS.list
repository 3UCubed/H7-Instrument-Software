
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ae0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016d80  08016d80  00026d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171c8  080171c8  000271c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080171d0  080171d0  000271d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080171d4  080171d4  000271d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080171d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000058ec  24000120  080172e0  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a0c  080172e0  00035a0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032d05  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005511  00000000  00000000  00062e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002660  00000000  00000000  00068350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002468  00000000  00000000  0006a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007aa8  00000000  00000000  0006ce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030833  00000000  00000000  000748c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001947c9  00000000  00000000  000a50f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002398bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000acd4  00000000  00000000  0023990c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d68 	.word	0x08016d68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016d68 	.word	0x08016d68

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fb98 	bl	8012d30 <osEventFlagsSet>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_ID);

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e01e      	b.n	8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 fb8d 	bl	8012d30 <osEventFlagsSet>
}
 8000616:	e013      	b.n	8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d10c      	bne.n	800063a <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 fb82 	bl	8012d30 <osEventFlagsSet>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_ID);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2108      	movs	r1, #8
 8000632:	4618      	mov	r0, r3
 8000634:	f012 fb7c 	bl	8012d30 <osEventFlagsSet>
}
 8000638:	e002      	b.n	8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063c:	f015 ffe4 	bl	8016608 <puts>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000508 	.word	0x24000508
 800064c:	24000bec 	.word	0x24000bec
 8000650:	24000554 	.word	0x24000554
 8000654:	240005a0 	.word	0x240005a0
 8000658:	08016df0 	.word	0x08016df0

0800065c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	49f2      	ldr	r1, [pc, #968]	; (8000a30 <HAL_UART_RxCpltCallback+0x3d4>)
 8000668:	48f2      	ldr	r0, [pc, #968]	; (8000a34 <HAL_UART_RxCpltCallback+0x3d8>)
 800066a:	f00f fcfb 	bl	8010064 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800066e:	4bf0      	ldr	r3, [pc, #960]	; (8000a30 <HAL_UART_RxCpltCallback+0x3d4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2be0      	cmp	r3, #224	; 0xe0
 8000678:	f200 83e8 	bhi.w	8000e4c <HAL_UART_RxCpltCallback+0x7f0>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <HAL_UART_RxCpltCallback+0x28>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	08000a1d 	.word	0x08000a1d
 8000688:	08000a59 	.word	0x08000a59
 800068c:	08000adf 	.word	0x08000adf
 8000690:	08000b09 	.word	0x08000b09
 8000694:	08000b31 	.word	0x08000b31
 8000698:	08000b5b 	.word	0x08000b5b
 800069c:	08000b87 	.word	0x08000b87
 80006a0:	08000bb3 	.word	0x08000bb3
 80006a4:	08000bdd 	.word	0x08000bdd
 80006a8:	08000c09 	.word	0x08000c09
 80006ac:	08000c35 	.word	0x08000c35
 80006b0:	08000c67 	.word	0x08000c67
 80006b4:	08000c99 	.word	0x08000c99
 80006b8:	08000ceb 	.word	0x08000ceb
 80006bc:	08000df1 	.word	0x08000df1
 80006c0:	08000e21 	.word	0x08000e21
 80006c4:	08000a09 	.word	0x08000a09
 80006c8:	08000a45 	.word	0x08000a45
 80006cc:	08000ac9 	.word	0x08000ac9
 80006d0:	08000af5 	.word	0x08000af5
 80006d4:	08000b1d 	.word	0x08000b1d
 80006d8:	08000b45 	.word	0x08000b45
 80006dc:	08000b71 	.word	0x08000b71
 80006e0:	08000b9d 	.word	0x08000b9d
 80006e4:	08000bc9 	.word	0x08000bc9
 80006e8:	08000bf1 	.word	0x08000bf1
 80006ec:	08000c19 	.word	0x08000c19
 80006f0:	08000c4b 	.word	0x08000c4b
 80006f4:	08000c7d 	.word	0x08000c7d
 80006f8:	08000caf 	.word	0x08000caf
 80006fc:	08000dc9 	.word	0x08000dc9
 8000700:	08000e19 	.word	0x08000e19
 8000704:	08000e4d 	.word	0x08000e4d
 8000708:	08000e4d 	.word	0x08000e4d
 800070c:	08000e4d 	.word	0x08000e4d
 8000710:	08000e4d 	.word	0x08000e4d
 8000714:	08000e4d 	.word	0x08000e4d
 8000718:	08000e4d 	.word	0x08000e4d
 800071c:	08000e4d 	.word	0x08000e4d
 8000720:	08000e4d 	.word	0x08000e4d
 8000724:	08000e4d 	.word	0x08000e4d
 8000728:	08000e4d 	.word	0x08000e4d
 800072c:	08000e4d 	.word	0x08000e4d
 8000730:	08000e4d 	.word	0x08000e4d
 8000734:	08000e4d 	.word	0x08000e4d
 8000738:	08000e4d 	.word	0x08000e4d
 800073c:	08000e4d 	.word	0x08000e4d
 8000740:	08000e4d 	.word	0x08000e4d
 8000744:	08000e4d 	.word	0x08000e4d
 8000748:	08000e4d 	.word	0x08000e4d
 800074c:	08000e4d 	.word	0x08000e4d
 8000750:	08000e4d 	.word	0x08000e4d
 8000754:	08000e4d 	.word	0x08000e4d
 8000758:	08000e4d 	.word	0x08000e4d
 800075c:	08000e4d 	.word	0x08000e4d
 8000760:	08000e4d 	.word	0x08000e4d
 8000764:	08000e4d 	.word	0x08000e4d
 8000768:	08000e4d 	.word	0x08000e4d
 800076c:	08000e4d 	.word	0x08000e4d
 8000770:	08000e4d 	.word	0x08000e4d
 8000774:	08000e4d 	.word	0x08000e4d
 8000778:	08000e4d 	.word	0x08000e4d
 800077c:	08000e4d 	.word	0x08000e4d
 8000780:	08000e4d 	.word	0x08000e4d
 8000784:	08000e4d 	.word	0x08000e4d
 8000788:	08000e4d 	.word	0x08000e4d
 800078c:	08000e4d 	.word	0x08000e4d
 8000790:	08000e4d 	.word	0x08000e4d
 8000794:	08000e4d 	.word	0x08000e4d
 8000798:	08000e4d 	.word	0x08000e4d
 800079c:	08000e4d 	.word	0x08000e4d
 80007a0:	08000e4d 	.word	0x08000e4d
 80007a4:	08000e4d 	.word	0x08000e4d
 80007a8:	08000e4d 	.word	0x08000e4d
 80007ac:	08000e4d 	.word	0x08000e4d
 80007b0:	08000e4d 	.word	0x08000e4d
 80007b4:	08000e4d 	.word	0x08000e4d
 80007b8:	08000e4d 	.word	0x08000e4d
 80007bc:	08000e4d 	.word	0x08000e4d
 80007c0:	08000e4d 	.word	0x08000e4d
 80007c4:	08000e4d 	.word	0x08000e4d
 80007c8:	08000e4d 	.word	0x08000e4d
 80007cc:	08000e4d 	.word	0x08000e4d
 80007d0:	08000e4d 	.word	0x08000e4d
 80007d4:	08000e4d 	.word	0x08000e4d
 80007d8:	08000e4d 	.word	0x08000e4d
 80007dc:	08000e4d 	.word	0x08000e4d
 80007e0:	08000e4d 	.word	0x08000e4d
 80007e4:	08000e4d 	.word	0x08000e4d
 80007e8:	08000e4d 	.word	0x08000e4d
 80007ec:	08000e4d 	.word	0x08000e4d
 80007f0:	08000e4d 	.word	0x08000e4d
 80007f4:	08000e4d 	.word	0x08000e4d
 80007f8:	08000e4d 	.word	0x08000e4d
 80007fc:	08000e4d 	.word	0x08000e4d
 8000800:	08000e4d 	.word	0x08000e4d
 8000804:	08000e4d 	.word	0x08000e4d
 8000808:	08000e4d 	.word	0x08000e4d
 800080c:	08000e4d 	.word	0x08000e4d
 8000810:	08000e4d 	.word	0x08000e4d
 8000814:	08000e4d 	.word	0x08000e4d
 8000818:	08000e4d 	.word	0x08000e4d
 800081c:	08000e4d 	.word	0x08000e4d
 8000820:	08000e4d 	.word	0x08000e4d
 8000824:	08000e4d 	.word	0x08000e4d
 8000828:	08000e4d 	.word	0x08000e4d
 800082c:	08000e4d 	.word	0x08000e4d
 8000830:	08000e4d 	.word	0x08000e4d
 8000834:	08000e4d 	.word	0x08000e4d
 8000838:	08000e4d 	.word	0x08000e4d
 800083c:	08000e4d 	.word	0x08000e4d
 8000840:	08000e4d 	.word	0x08000e4d
 8000844:	08000e4d 	.word	0x08000e4d
 8000848:	08000e4d 	.word	0x08000e4d
 800084c:	08000e4d 	.word	0x08000e4d
 8000850:	08000e4d 	.word	0x08000e4d
 8000854:	08000e4d 	.word	0x08000e4d
 8000858:	08000e4d 	.word	0x08000e4d
 800085c:	08000e4d 	.word	0x08000e4d
 8000860:	08000e4d 	.word	0x08000e4d
 8000864:	08000e4d 	.word	0x08000e4d
 8000868:	08000e4d 	.word	0x08000e4d
 800086c:	08000e4d 	.word	0x08000e4d
 8000870:	08000e4d 	.word	0x08000e4d
 8000874:	08000e4d 	.word	0x08000e4d
 8000878:	08000e4d 	.word	0x08000e4d
 800087c:	08000e4d 	.word	0x08000e4d
 8000880:	08000e4d 	.word	0x08000e4d
 8000884:	08000e4d 	.word	0x08000e4d
 8000888:	08000e4d 	.word	0x08000e4d
 800088c:	08000e4d 	.word	0x08000e4d
 8000890:	08000e4d 	.word	0x08000e4d
 8000894:	08000e4d 	.word	0x08000e4d
 8000898:	08000e4d 	.word	0x08000e4d
 800089c:	08000e4d 	.word	0x08000e4d
 80008a0:	08000e4d 	.word	0x08000e4d
 80008a4:	08000e4d 	.word	0x08000e4d
 80008a8:	08000e4d 	.word	0x08000e4d
 80008ac:	08000e4d 	.word	0x08000e4d
 80008b0:	08000e4d 	.word	0x08000e4d
 80008b4:	08000e4d 	.word	0x08000e4d
 80008b8:	08000e4d 	.word	0x08000e4d
 80008bc:	08000e4d 	.word	0x08000e4d
 80008c0:	08000e4d 	.word	0x08000e4d
 80008c4:	08000e4d 	.word	0x08000e4d
 80008c8:	08000e4d 	.word	0x08000e4d
 80008cc:	08000e4d 	.word	0x08000e4d
 80008d0:	08000e4d 	.word	0x08000e4d
 80008d4:	08000e4d 	.word	0x08000e4d
 80008d8:	08000e4d 	.word	0x08000e4d
 80008dc:	08000e4d 	.word	0x08000e4d
 80008e0:	08000e4d 	.word	0x08000e4d
 80008e4:	08000e4d 	.word	0x08000e4d
 80008e8:	08000e4d 	.word	0x08000e4d
 80008ec:	08000e4d 	.word	0x08000e4d
 80008f0:	08000e4d 	.word	0x08000e4d
 80008f4:	08000e4d 	.word	0x08000e4d
 80008f8:	08000e4d 	.word	0x08000e4d
 80008fc:	08000e4d 	.word	0x08000e4d
 8000900:	08000e4d 	.word	0x08000e4d
 8000904:	08000e4d 	.word	0x08000e4d
 8000908:	08000e4d 	.word	0x08000e4d
 800090c:	08000e4d 	.word	0x08000e4d
 8000910:	08000e4d 	.word	0x08000e4d
 8000914:	08000e4d 	.word	0x08000e4d
 8000918:	08000e4d 	.word	0x08000e4d
 800091c:	08000e4d 	.word	0x08000e4d
 8000920:	08000e4d 	.word	0x08000e4d
 8000924:	08000e4d 	.word	0x08000e4d
 8000928:	08000e4d 	.word	0x08000e4d
 800092c:	08000e4d 	.word	0x08000e4d
 8000930:	08000e4d 	.word	0x08000e4d
 8000934:	08000e4d 	.word	0x08000e4d
 8000938:	08000e4d 	.word	0x08000e4d
 800093c:	08000e4d 	.word	0x08000e4d
 8000940:	08000e4d 	.word	0x08000e4d
 8000944:	08000e4d 	.word	0x08000e4d
 8000948:	08000e4d 	.word	0x08000e4d
 800094c:	08000e4d 	.word	0x08000e4d
 8000950:	08000e4d 	.word	0x08000e4d
 8000954:	08000e4d 	.word	0x08000e4d
 8000958:	08000e4d 	.word	0x08000e4d
 800095c:	08000e4d 	.word	0x08000e4d
 8000960:	08000e4d 	.word	0x08000e4d
 8000964:	08000e4d 	.word	0x08000e4d
 8000968:	08000e4d 	.word	0x08000e4d
 800096c:	08000e4d 	.word	0x08000e4d
 8000970:	08000e4d 	.word	0x08000e4d
 8000974:	08000e4d 	.word	0x08000e4d
 8000978:	08000e4d 	.word	0x08000e4d
 800097c:	08000e4d 	.word	0x08000e4d
 8000980:	08000e4d 	.word	0x08000e4d
 8000984:	08000e4d 	.word	0x08000e4d
 8000988:	08000e4d 	.word	0x08000e4d
 800098c:	08000e4d 	.word	0x08000e4d
 8000990:	08000e4d 	.word	0x08000e4d
 8000994:	08000e4d 	.word	0x08000e4d
 8000998:	08000e4d 	.word	0x08000e4d
 800099c:	08000e4d 	.word	0x08000e4d
 80009a0:	08000e4d 	.word	0x08000e4d
 80009a4:	08000e4d 	.word	0x08000e4d
 80009a8:	08000e4d 	.word	0x08000e4d
 80009ac:	08000e4d 	.word	0x08000e4d
 80009b0:	08000e4d 	.word	0x08000e4d
 80009b4:	08000e4d 	.word	0x08000e4d
 80009b8:	08000e4d 	.word	0x08000e4d
 80009bc:	08000e4d 	.word	0x08000e4d
 80009c0:	08000e4d 	.word	0x08000e4d
 80009c4:	08000e3b 	.word	0x08000e3b
 80009c8:	08000e4d 	.word	0x08000e4d
 80009cc:	08000e4d 	.word	0x08000e4d
 80009d0:	08000e4d 	.word	0x08000e4d
 80009d4:	08000e4d 	.word	0x08000e4d
 80009d8:	08000e4d 	.word	0x08000e4d
 80009dc:	08000e4d 	.word	0x08000e4d
 80009e0:	08000e4d 	.word	0x08000e4d
 80009e4:	08000e4d 	.word	0x08000e4d
 80009e8:	08000e4d 	.word	0x08000e4d
 80009ec:	08000e4d 	.word	0x08000e4d
 80009f0:	08000e4d 	.word	0x08000e4d
 80009f4:	08000e4d 	.word	0x08000e4d
 80009f8:	08000e4d 	.word	0x08000e4d
 80009fc:	08000e4d 	.word	0x08000e4d
 8000a00:	08000e4d 	.word	0x08000e4d
 8000a04:	08000e29 	.word	0x08000e29
	case 0x10: {
		printf("SDN1 ON\n");
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a0a:	f015 fdfd 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a10:	2104      	movs	r1, #4
 8000a12:	2201      	movs	r2, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f008 fa7d 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000a1a:	e222      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a1e:	f015 fdf3 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a24:	2104      	movs	r1, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f008 fa73 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000a2e:	e218      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
 8000a30:	24000bf0 	.word	0x24000bf0
 8000a34:	240005ec 	.word	0x240005ec
 8000a38:	08016e08 	.word	0x08016e08
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	08016e10 	.word	0x08016e10
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a44:	48b8      	ldr	r0, [pc, #736]	; (8000d28 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a46:	f015 fddf 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a4a:	4bb8      	ldr	r3, [pc, #736]	; (8000d2c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fa5f 	bl	8008f14 <HAL_GPIO_WritePin>

		break;
 8000a56:	e204      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a58:	48b5      	ldr	r0, [pc, #724]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a5a:	f015 fdd5 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a5e:	4bb3      	ldr	r3, [pc, #716]	; (8000d2c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a60:	2120      	movs	r1, #32
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 fa55 	bl	8008f14 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a6a:	4bb0      	ldr	r3, [pc, #704]	; (8000d2c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 fa4f 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a76:	4baf      	ldr	r3, [pc, #700]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f008 fa48 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a84:	4bab      	ldr	r3, [pc, #684]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f008 fa41 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a92:	4ba8      	ldr	r3, [pc, #672]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 fa3a 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4ba4      	ldr	r3, [pc, #656]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 fa34 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aac:	4ba1      	ldr	r3, [pc, #644]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f008 fa2e 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f008 fa27 	bl	8008f14 <HAL_GPIO_WritePin>

		break;
 8000ac6:	e1cc      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ac8:	489b      	ldr	r0, [pc, #620]	; (8000d38 <HAL_UART_RxCpltCallback+0x6dc>)
 8000aca:	f015 fd9d 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ace:	4b99      	ldr	r3, [pc, #612]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 fa1c 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000adc:	e1c1      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ade:	4897      	ldr	r0, [pc, #604]	; (8000d3c <HAL_UART_RxCpltCallback+0x6e0>)
 8000ae0:	f015 fd92 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b93      	ldr	r3, [pc, #588]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fa11 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000af2:	e1b6      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000af4:	4892      	ldr	r0, [pc, #584]	; (8000d40 <HAL_UART_RxCpltCallback+0x6e4>)
 8000af6:	f015 fd87 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000afa:	4b8e      	ldr	r3, [pc, #568]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	2201      	movs	r2, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f008 fa07 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b06:	e1ac      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b08:	488e      	ldr	r0, [pc, #568]	; (8000d44 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b0a:	f015 fd7d 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b0e:	4b89      	ldr	r3, [pc, #548]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	2200      	movs	r2, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f008 f9fd 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b1a:	e1a2      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b1c:	488a      	ldr	r0, [pc, #552]	; (8000d48 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b1e:	f015 fd73 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b22:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	2201      	movs	r2, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f008 f9f3 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b2e:	e198      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b30:	4886      	ldr	r0, [pc, #536]	; (8000d4c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b32:	f015 fd69 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b36:	4b7f      	ldr	r3, [pc, #508]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 f9e9 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b42:	e18e      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b44:	4882      	ldr	r0, [pc, #520]	; (8000d50 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b46:	f015 fd5f 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b4a:	4b7a      	ldr	r3, [pc, #488]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b50:	2201      	movs	r2, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f008 f9de 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b58:	e183      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b5a:	487e      	ldr	r0, [pc, #504]	; (8000d54 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b5c:	f015 fd54 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b60:	4b74      	ldr	r3, [pc, #464]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f9d3 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b6e:	e178      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b70:	4879      	ldr	r0, [pc, #484]	; (8000d58 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b72:	f015 fd49 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b76:	4b6f      	ldr	r3, [pc, #444]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f9c8 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b84:	e16d      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b86:	4875      	ldr	r0, [pc, #468]	; (8000d5c <HAL_UART_RxCpltCallback+0x700>)
 8000b88:	f015 fd3e 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b8c:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f9bd 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e162      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b9c:	4870      	ldr	r0, [pc, #448]	; (8000d60 <HAL_UART_RxCpltCallback+0x704>)
 8000b9e:	f015 fd33 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f9b2 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e157      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bb2:	486c      	ldr	r0, [pc, #432]	; (8000d64 <HAL_UART_RxCpltCallback+0x708>)
 8000bb4:	f015 fd28 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9a7 	bl	8008f14 <HAL_GPIO_WritePin>

		break;
 8000bc6:	e14c      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bc8:	4867      	ldr	r0, [pc, #412]	; (8000d68 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	f015 fd1d 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bce:	4b57      	ldr	r3, [pc, #348]	; (8000d2c <HAL_UART_RxCpltCallback+0x6d0>)
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 f99d 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000bda:	e142      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bdc:	4863      	ldr	r0, [pc, #396]	; (8000d6c <HAL_UART_RxCpltCallback+0x710>)
 8000bde:	f015 fd13 	bl	8016608 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000be2:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <HAL_UART_RxCpltCallback+0x6d0>)
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	2200      	movs	r2, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f008 f993 	bl	8008f14 <HAL_GPIO_WritePin>
		break;
 8000bee:	e138      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000bf0:	485f      	ldr	r0, [pc, #380]	; (8000d70 <HAL_UART_RxCpltCallback+0x714>)
 8000bf2:	f015 fd09 	bl	8016608 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	4a5d      	ldr	r2, [pc, #372]	; (8000d74 <HAL_UART_RxCpltCallback+0x718>)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	485d      	ldr	r0, [pc, #372]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000c02:	f004 fdf7 	bl	80057f4 <HAL_DAC_Start_DMA>
		break;
 8000c06:	e12c      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c08:	485c      	ldr	r0, [pc, #368]	; (8000d7c <HAL_UART_RxCpltCallback+0x720>)
 8000c0a:	f015 fcfd 	bl	8016608 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4859      	ldr	r0, [pc, #356]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000c12:	f004 feaf 	bl	8005974 <HAL_DAC_Stop_DMA>
		break;
 8000c16:	e124      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c18:	4859      	ldr	r0, [pc, #356]	; (8000d80 <HAL_UART_RxCpltCallback+0x724>)
 8000c1a:	f015 fcf5 	bl	8016608 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c1e:	210c      	movs	r1, #12
 8000c20:	4858      	ldr	r0, [pc, #352]	; (8000d84 <HAL_UART_RxCpltCallback+0x728>)
 8000c22:	f00d fd3f 	bl	800e6a4 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_UART_RxCpltCallback+0x72c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c2c:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <HAL_UART_RxCpltCallback+0x730>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	801a      	strh	r2, [r3, #0]
		break;
 8000c32:	e116      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c34:	4856      	ldr	r0, [pc, #344]	; (8000d90 <HAL_UART_RxCpltCallback+0x734>)
 8000c36:	f015 fce7 	bl	8016608 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c3a:	210c      	movs	r1, #12
 8000c3c:	4851      	ldr	r0, [pc, #324]	; (8000d84 <HAL_UART_RxCpltCallback+0x728>)
 8000c3e:	f00d fe8b 	bl	800e958 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_UART_RxCpltCallback+0x72c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		break;
 8000c48:	e10b      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c4a:	4852      	ldr	r0, [pc, #328]	; (8000d94 <HAL_UART_RxCpltCallback+0x738>)
 8000c4c:	f015 fcdc 	bl	8016608 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4851      	ldr	r0, [pc, #324]	; (8000d98 <HAL_UART_RxCpltCallback+0x73c>)
 8000c54:	f00d fd26 	bl	800e6a4 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c58:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <HAL_UART_RxCpltCallback+0x740>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c5e:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <HAL_UART_RxCpltCallback+0x744>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
		break;
 8000c64:	e0fd      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c66:	484f      	ldr	r0, [pc, #316]	; (8000da4 <HAL_UART_RxCpltCallback+0x748>)
 8000c68:	f015 fcce 	bl	8016608 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	484a      	ldr	r0, [pc, #296]	; (8000d98 <HAL_UART_RxCpltCallback+0x73c>)
 8000c70:	f00d fe72 	bl	800e958 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <HAL_UART_RxCpltCallback+0x740>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
		break;
 8000c7a:	e0f2      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c7c:	484a      	ldr	r0, [pc, #296]	; (8000da8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c7e:	f015 fcc3 	bl	8016608 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c82:	2100      	movs	r1, #0
 8000c84:	4849      	ldr	r0, [pc, #292]	; (8000dac <HAL_UART_RxCpltCallback+0x750>)
 8000c86:	f00d fd0d 	bl	800e6a4 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <HAL_UART_RxCpltCallback+0x754>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000c90:	4b48      	ldr	r3, [pc, #288]	; (8000db4 <HAL_UART_RxCpltCallback+0x758>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	801a      	strh	r2, [r3, #0]
		break;
 8000c96:	e0e4      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c98:	4847      	ldr	r0, [pc, #284]	; (8000db8 <HAL_UART_RxCpltCallback+0x75c>)
 8000c9a:	f015 fcb5 	bl	8016608 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4842      	ldr	r0, [pc, #264]	; (8000dac <HAL_UART_RxCpltCallback+0x750>)
 8000ca2:	f00d fe59 	bl	800e958 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <HAL_UART_RxCpltCallback+0x754>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
		break;
 8000cac:	e0d9      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cae:	4843      	ldr	r0, [pc, #268]	; (8000dbc <HAL_UART_RxCpltCallback+0x760>)
 8000cb0:	f015 fcaa 	bl	8016608 <puts>
		if (step < 17) {
 8000cb4:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	f200 80cb 	bhi.w	8000e54 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_UART_RxCpltCallback+0x718>)
 8000cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4827      	ldr	r0, [pc, #156]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000cdc:	f004 feed 	bl	8005aba <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4825      	ldr	r0, [pc, #148]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000ce4:	f004 fd2e 	bl	8005744 <HAL_DAC_Start>
		}
		break;
 8000ce8:	e0b4      	b.n	8000e54 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <HAL_UART_RxCpltCallback+0x768>)
 8000cec:	f015 fc8c 	bl	8016608 <puts>
		if (step > 3) {
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	f240 80af 	bls.w	8000e58 <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000d04:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_UART_RxCpltCallback+0x764>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_UART_RxCpltCallback+0x718>)
 8000d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000d18:	f004 fecf 	bl	8005aba <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4816      	ldr	r0, [pc, #88]	; (8000d78 <HAL_UART_RxCpltCallback+0x71c>)
 8000d20:	f004 fd10 	bl	8005744 <HAL_DAC_Start>
		}
		break;
 8000d24:	e098      	b.n	8000e58 <HAL_UART_RxCpltCallback+0x7fc>
 8000d26:	bf00      	nop
 8000d28:	08016e1c 	.word	0x08016e1c
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	08016e28 	.word	0x08016e28
 8000d34:	58020800 	.word	0x58020800
 8000d38:	08016e34 	.word	0x08016e34
 8000d3c:	08016e40 	.word	0x08016e40
 8000d40:	08016e50 	.word	0x08016e50
 8000d44:	08016e5c 	.word	0x08016e5c
 8000d48:	08016e68 	.word	0x08016e68
 8000d4c:	08016e74 	.word	0x08016e74
 8000d50:	08016e84 	.word	0x08016e84
 8000d54:	08016e90 	.word	0x08016e90
 8000d58:	08016e9c 	.word	0x08016e9c
 8000d5c:	08016ea8 	.word	0x08016ea8
 8000d60:	08016eb4 	.word	0x08016eb4
 8000d64:	08016ec4 	.word	0x08016ec4
 8000d68:	08016ed4 	.word	0x08016ed4
 8000d6c:	08016ee0 	.word	0x08016ee0
 8000d70:	08016ef0 	.word	0x08016ef0
 8000d74:	24000010 	.word	0x24000010
 8000d78:	240002f4 	.word	0x240002f4
 8000d7c:	08016f00 	.word	0x08016f00
 8000d80:	08016f10 	.word	0x08016f10
 8000d84:	24000554 	.word	0x24000554
 8000d88:	24000be7 	.word	0x24000be7
 8000d8c:	24000be2 	.word	0x24000be2
 8000d90:	08016f18 	.word	0x08016f18
 8000d94:	08016f24 	.word	0x08016f24
 8000d98:	24000508 	.word	0x24000508
 8000d9c:	24000be6 	.word	0x24000be6
 8000da0:	24000be0 	.word	0x24000be0
 8000da4:	08016f2c 	.word	0x08016f2c
 8000da8:	08016f34 	.word	0x08016f34
 8000dac:	240005a0 	.word	0x240005a0
 8000db0:	24000be8 	.word	0x24000be8
 8000db4:	24000be4 	.word	0x24000be4
 8000db8:	08016f3c 	.word	0x08016f3c
 8000dbc:	08016f44 	.word	0x08016f44
 8000dc0:	2400000c 	.word	0x2400000c
 8000dc4:	08016f4c 	.word	0x08016f4c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dc8:	4828      	ldr	r0, [pc, #160]	; (8000e6c <HAL_UART_RxCpltCallback+0x810>)
 8000dca:	f015 fc1d 	bl	8016608 <puts>
		if (cadence <= 50000) {
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d840      	bhi.n	8000e5c <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000de2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dee:	e035      	b.n	8000e5c <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <HAL_UART_RxCpltCallback+0x818>)
 8000df2:	f015 fc09 	bl	8016608 <puts>
		if (cadence >= 6250) {
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f641 0269 	movw	r2, #6249	; 0x1869
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d92e      	bls.n	8000e60 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000e0a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_UART_RxCpltCallback+0x814>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e16:	e023      	b.n	8000e60 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e18:	4817      	ldr	r0, [pc, #92]	; (8000e78 <HAL_UART_RxCpltCallback+0x81c>)
 8000e1a:	f015 fbf5 	bl	8016608 <puts>
		// TODO: Exit stop mode
		break;
 8000e1e:	e020      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <HAL_UART_RxCpltCallback+0x820>)
 8000e22:	f015 fbf1 	bl	8016608 <puts>
		// TODO: Enter stop mode
		break;
 8000e26:	e01c      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_UART_RxCpltCallback+0x824>)
 8000e2a:	f015 fbed 	bl	8016608 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_RxCpltCallback+0x828>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f013 fc52 	bl	80146dc <xTaskResumeFromISR>
		break;
 8000e38:	e013      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e3a:	4813      	ldr	r0, [pc, #76]	; (8000e88 <HAL_UART_RxCpltCallback+0x82c>)
 8000e3c:	f015 fbe4 	bl	8016608 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_UART_RxCpltCallback+0x830>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f013 fc49 	bl	80146dc <xTaskResumeFromISR>
		break;
 8000e4a:	e00a      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <HAL_UART_RxCpltCallback+0x834>)
 8000e4e:	f015 fbdb 	bl	8016608 <puts>
		break;
 8000e52:	e006      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e54:	bf00      	nop
 8000e56:	e004      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e58:	bf00      	nop
 8000e5a:	e002      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e000      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e60:	bf00      	nop
	}
	}
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08016f58 	.word	0x08016f58
 8000e70:	24000008 	.word	0x24000008
 8000e74:	08016f64 	.word	0x08016f64
 8000e78:	08016f70 	.word	0x08016f70
 8000e7c:	08016f80 	.word	0x08016f80
 8000e80:	08016f90 	.word	0x08016f90
 8000e84:	24000708 	.word	0x24000708
 8000e88:	08016f9c 	.word	0x08016f9c
 8000e8c:	24000968 	.word	0x24000968
 8000e90:	08016fa8 	.word	0x08016fa8

08000e94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e98:	f002 fec0 	bl	8003c1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e9c:	f000 f8b2 	bl	8001004 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000ea0:	f000 f92c 	bl	80010fc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ea4:	f000 fe86 	bl	8001bb4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ea8:	f000 fe4c 	bl	8001b44 <MX_DMA_Init>
	MX_TIM3_Init();
 8000eac:	f000 fdb0 	bl	8001a10 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000eb0:	f000 fdfc 	bl	8001aac <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000eb4:	f000 fb38 	bl	8001528 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000eb8:	f000 fc2e 	bl	8001718 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000ebc:	f000 fd32 	bl	8001924 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000ec0:	f000 fc82 	bl	80017c8 <MX_TIM1_Init>
	MX_ADC3_Init();
 8000ec4:	f000 fa6c 	bl	80013a0 <MX_ADC3_Init>
	MX_ADC1_Init();
 8000ec8:	f000 f948 	bl	800115c <MX_ADC1_Init>
	MX_DAC1_Init();
 8000ecc:	f000 fafa 	bl	80014c4 <MX_DAC1_Init>
	MX_SPI1_Init();
 8000ed0:	f000 fbca 	bl	8001668 <MX_SPI1_Init>
	MX_RTC_Init();
 8000ed4:	f000 fb6a 	bl	80015ac <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	if (!handshake()) {
 8000ed8:	f001 f8ae 	bl	8002038 <handshake>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <main+0x52>
		Error_Handler();
 8000ee2:	f001 ff83 	bl	8002dec <Error_Handler>
	}
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ee6:	f011 fdab 	bl	8012a40 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	2080      	movs	r0, #128	; 0x80
 8000ef0:	f011 ffc8 	bl	8012e84 <osMessageQueueNew>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <main+0x104>)
 8000ef8:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <main+0x108>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <main+0x10c>)
 8000f00:	f011 fde8 	bl	8012ad4 <osThreadNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <main+0x110>)
 8000f08:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <main+0x114>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4827      	ldr	r0, [pc, #156]	; (8000fac <main+0x118>)
 8000f10:	f011 fde0 	bl	8012ad4 <osThreadNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <main+0x11c>)
 8000f18:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <main+0x120>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <main+0x124>)
 8000f20:	f011 fdd8 	bl	8012ad4 <osThreadNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <main+0x128>)
 8000f28:	6013      	str	r3, [r2, #0]

	/* creation of UART_RX_task */
	UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL,
 8000f2a:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <main+0x12c>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <main+0x130>)
 8000f30:	f011 fdd0 	bl	8012ad4 <osThreadNew>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <main+0x134>)
 8000f38:	6013      	str	r3, [r2, #0]
			&UART_RX_task_attributes);

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 8000f3a:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <main+0x138>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <main+0x13c>)
 8000f40:	f011 fdc8 	bl	8012ad4 <osThreadNew>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <main+0x140>)
 8000f48:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <main+0x144>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4823      	ldr	r0, [pc, #140]	; (8000fdc <main+0x148>)
 8000f50:	f011 fdc0 	bl	8012ad4 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <main+0x14c>)
 8000f58:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <main+0x150>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4822      	ldr	r0, [pc, #136]	; (8000fe8 <main+0x154>)
 8000f60:	f011 fdb8 	bl	8012ad4 <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <main+0x158>)
 8000f68:	6013      	str	r3, [r2, #0]
			&UART_TX_task_attributes);

	/* creation of Voltage_Monitor */
	Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL,
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <main+0x15c>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <main+0x160>)
 8000f70:	f011 fdb0 	bl	8012ad4 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <main+0x164>)
 8000f78:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f011 fe98 	bl	8012cb0 <osEventFlagsNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <main+0x168>)
 8000f84:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f86:	f001 f8e5 	bl	8002154 <system_setup>
	printf("Starting kernal...\n");
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <main+0x16c>)
 8000f8c:	f015 fb3c 	bl	8016608 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f90:	f011 fd7a 	bl	8012a88 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f94:	e7fe      	b.n	8000f94 <main+0x100>
 8000f96:	bf00      	nop
 8000f98:	24000bd0 	.word	0x24000bd0
 8000f9c:	08017004 	.word	0x08017004
 8000fa0:	08002919 	.word	0x08002919
 8000fa4:	240006f8 	.word	0x240006f8
 8000fa8:	08017028 	.word	0x08017028
 8000fac:	0800295d 	.word	0x0800295d
 8000fb0:	240006fc 	.word	0x240006fc
 8000fb4:	0801704c 	.word	0x0801704c
 8000fb8:	080029a1 	.word	0x080029a1
 8000fbc:	24000700 	.word	0x24000700
 8000fc0:	08017070 	.word	0x08017070
 8000fc4:	080029e5 	.word	0x080029e5
 8000fc8:	24000704 	.word	0x24000704
 8000fcc:	08017094 	.word	0x08017094
 8000fd0:	08002a09 	.word	0x08002a09
 8000fd4:	24000708 	.word	0x24000708
 8000fd8:	080170b8 	.word	0x080170b8
 8000fdc:	08002ab1 	.word	0x08002ab1
 8000fe0:	24000968 	.word	0x24000968
 8000fe4:	080170dc 	.word	0x080170dc
 8000fe8:	08002b59 	.word	0x08002b59
 8000fec:	24000bc8 	.word	0x24000bc8
 8000ff0:	08017100 	.word	0x08017100
 8000ff4:	08002c09 	.word	0x08002c09
 8000ff8:	24000bcc 	.word	0x24000bcc
 8000ffc:	24000bec 	.word	0x24000bec
 8001000:	08016fb8 	.word	0x08016fb8

08001004 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b09c      	sub	sp, #112	; 0x70
 8001008:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	224c      	movs	r2, #76	; 0x4c
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f015 f9a2 	bl	801635c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f015 f99c 	bl	801635c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001024:	2002      	movs	r0, #2
 8001026:	f008 fd9b 	bl	8009b60 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <SystemClock_Config+0xf0>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <SystemClock_Config+0xf0>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <SystemClock_Config+0xf0>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <SystemClock_Config+0xf4>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <SystemClock_Config+0xf4>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <SystemClock_Config+0xf4>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001060:	bf00      	nop
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <SystemClock_Config+0xf4>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800106e:	d1f8      	bne.n	8001062 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	2302      	movs	r3, #2
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001082:	2304      	movs	r3, #4
 8001084:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 8001086:	2320      	movs	r3, #32
 8001088:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800108e:	2304      	movs	r3, #4
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001096:	2308      	movs	r3, #8
 8001098:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800109a:	2300      	movs	r3, #0
 800109c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fd94 	bl	8009bd4 <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xb2>
		Error_Handler();
 80010b2:	f001 fe9b 	bl	8002dec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010b6:	233f      	movs	r3, #63	; 0x3f
 80010b8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2303      	movs	r3, #3
 80010bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2101      	movs	r1, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 f9d4 	bl	800a488 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xe6>
		Error_Handler();
 80010e6:	f001 fe81 	bl	8002dec <Error_Handler>
	}
}
 80010ea:	bf00      	nop
 80010ec:	3770      	adds	r7, #112	; 0x70
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	58000400 	.word	0x58000400
 80010f8:	58024800 	.word	0x58024800

080010fc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b0      	sub	sp, #192	; 0xc0
 8001100:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001102:	463b      	mov	r3, r7
 8001104:	22c0      	movs	r2, #192	; 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f015 f927 	bl	801635c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 800111e:	2320      	movs	r3, #32
 8001120:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001122:	2308      	movs	r3, #8
 8001124:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001126:	2304      	movs	r3, #4
 8001128:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f009 fd6e 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 800114e:	f001 fe4d 	bl	8002dec <Error_Handler>
	}
}
 8001152:	bf00      	nop
 8001154:	37c0      	adds	r7, #192	; 0xc0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <MX_ADC1_Init+0x210>)
 8001182:	4a7b      	ldr	r2, [pc, #492]	; (8001370 <MX_ADC1_Init+0x214>)
 8001184:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001186:	4b79      	ldr	r3, [pc, #484]	; (800136c <MX_ADC1_Init+0x210>)
 8001188:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800118c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b77      	ldr	r3, [pc, #476]	; (800136c <MX_ADC1_Init+0x210>)
 8001190:	2208      	movs	r2, #8
 8001192:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <MX_ADC1_Init+0x210>)
 8001196:	2201      	movs	r2, #1
 8001198:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <MX_ADC1_Init+0x210>)
 800119c:	2204      	movs	r2, #4
 800119e:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <MX_ADC1_Init+0x210>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80011a6:	4b71      	ldr	r3, [pc, #452]	; (800136c <MX_ADC1_Init+0x210>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <MX_ADC1_Init+0x210>)
 80011ae:	220b      	movs	r2, #11
 80011b0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <MX_ADC1_Init+0x210>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b6c      	ldr	r3, [pc, #432]	; (800136c <MX_ADC1_Init+0x210>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011be:	4b6b      	ldr	r3, [pc, #428]	; (800136c <MX_ADC1_Init+0x210>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011c4:	4b69      	ldr	r3, [pc, #420]	; (800136c <MX_ADC1_Init+0x210>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ca:	4b68      	ldr	r3, [pc, #416]	; (800136c <MX_ADC1_Init+0x210>)
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <MX_ADC1_Init+0x210>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <MX_ADC1_Init+0x210>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011e0:	4862      	ldr	r0, [pc, #392]	; (800136c <MX_ADC1_Init+0x210>)
 80011e2:	f002 ffa7 	bl	8004134 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x94>
		Error_Handler();
 80011ec:	f001 fdfe 	bl	8002dec <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	485c      	ldr	r0, [pc, #368]	; (800136c <MX_ADC1_Init+0x210>)
 80011fc:	f004 f8c2 	bl	8005384 <HAL_ADCEx_MultiModeConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0xae>
		Error_Handler();
 8001206:	f001 fdf1 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800120a:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <MX_ADC1_Init+0x218>)
 800120c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800120e:	2306      	movs	r3, #6
 8001210:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001212:	2307      	movs	r3, #7
 8001214:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001216:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800121a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121c:	2304      	movs	r3, #4
 800121e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	484f      	ldr	r0, [pc, #316]	; (800136c <MX_ADC1_Init+0x210>)
 800122e:	f003 fa05 	bl	800463c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001238:	f001 fdd8 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <MX_ADC1_Init+0x21c>)
 800123e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001240:	230c      	movs	r3, #12
 8001242:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4848      	ldr	r0, [pc, #288]	; (800136c <MX_ADC1_Init+0x210>)
 800124a:	f003 f9f7 	bl	800463c <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xfc>
		Error_Handler();
 8001254:	f001 fdca 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001258:	4b48      	ldr	r3, [pc, #288]	; (800137c <MX_ADC1_Init+0x220>)
 800125a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800125c:	2312      	movs	r3, #18
 800125e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4841      	ldr	r0, [pc, #260]	; (800136c <MX_ADC1_Init+0x210>)
 8001266:	f003 f9e9 	bl	800463c <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x118>
		Error_Handler();
 8001270:	f001 fdbc 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <MX_ADC1_Init+0x224>)
 8001276:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001278:	2318      	movs	r3, #24
 800127a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	483a      	ldr	r0, [pc, #232]	; (800136c <MX_ADC1_Init+0x210>)
 8001282:	f003 f9db 	bl	800463c <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x134>
		Error_Handler();
 800128c:	f001 fdae 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_ADC1_Init+0x228>)
 8001292:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8001294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001298:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4833      	ldr	r0, [pc, #204]	; (800136c <MX_ADC1_Init+0x210>)
 80012a0:	f003 f9cc 	bl	800463c <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x152>
		Error_Handler();
 80012aa:	f001 fd9f 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_ADC1_Init+0x22c>)
 80012b0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80012b2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012b6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <MX_ADC1_Init+0x210>)
 80012be:	f003 f9bd 	bl	800463c <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x170>
		Error_Handler();
 80012c8:	f001 fd90 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <MX_ADC1_Init+0x230>)
 80012ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80012d0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012d4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <MX_ADC1_Init+0x210>)
 80012dc:	f003 f9ae 	bl	800463c <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x18e>
		Error_Handler();
 80012e6:	f001 fd81 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_ADC1_Init+0x234>)
 80012ec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 80012ee:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012f2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_ADC1_Init+0x210>)
 80012fa:	f003 f99f 	bl	800463c <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 8001304:	f001 fd72 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_ADC1_Init+0x238>)
 800130a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800130c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001310:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <MX_ADC1_Init+0x210>)
 8001318:	f003 f990 	bl	800463c <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x1ca>
		Error_Handler();
 8001322:	f001 fd63 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_ADC1_Init+0x23c>)
 8001328:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_ADC1_Init+0x210>)
 8001336:	f003 f981 	bl	800463c <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1e8>
		Error_Handler();
 8001340:	f001 fd54 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_ADC1_Init+0x240>)
 8001346:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8001348:	f240 2306 	movw	r3, #518	; 0x206
 800134c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_ADC1_Init+0x210>)
 8001354:	f003 f972 	bl	800463c <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC1_Init+0x206>
		Error_Handler();
 800135e:	f001 fd45 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2400013c 	.word	0x2400013c
 8001370:	40022000 	.word	0x40022000
 8001374:	0c900008 	.word	0x0c900008
 8001378:	10c00010 	.word	0x10c00010
 800137c:	14f00020 	.word	0x14f00020
 8001380:	1d500080 	.word	0x1d500080
 8001384:	21800100 	.word	0x21800100
 8001388:	25b00200 	.word	0x25b00200
 800138c:	2a000400 	.word	0x2a000400
 8001390:	2e300800 	.word	0x2e300800
 8001394:	3ac04000 	.word	0x3ac04000
 8001398:	3ef08000 	.word	0x3ef08000
 800139c:	47520000 	.word	0x47520000

080013a0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013ba:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <MX_ADC3_Init+0x114>)
 80013bc:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013d8:	2201      	movs	r2, #1
 80013da:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013de:	2204      	movs	r2, #4
 80013e0:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013f6:	2203      	movs	r2, #3
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC3_Init+0x110>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001410:	4827      	ldr	r0, [pc, #156]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001412:	f002 fe8f 	bl	8004134 <HAL_ADC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC3_Init+0x80>
		Error_Handler();
 800141c:	f001 fce6 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_ADC3_Init+0x118>)
 8001422:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	2306      	movs	r3, #6
 8001426:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001428:	2307      	movs	r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001430:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001432:	2304      	movs	r3, #4
 8001434:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001444:	f003 f8fa 	bl	800463c <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC3_Init+0xb2>
		Error_Handler();
 800144e:	f001 fccd 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_ADC3_Init+0x11c>)
 8001454:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001456:	230c      	movs	r3, #12
 8001458:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001460:	f003 f8ec 	bl	800463c <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC3_Init+0xce>
		Error_Handler();
 800146a:	f001 fcbf 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001472:	2312      	movs	r3, #18
 8001474:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_ADC3_Init+0x110>)
 800147c:	f003 f8de 	bl	800463c <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC3_Init+0xea>
		Error_Handler();
 8001486:	f001 fcb1 	bl	8002dec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_ADC3_Init+0x120>)
 800148c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800148e:	2318      	movs	r3, #24
 8001490:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001498:	f003 f8d0 	bl	800463c <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC3_Init+0x106>
		Error_Handler();
 80014a2:	f001 fca3 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	240001a0 	.word	0x240001a0
 80014b4:	58026000 	.word	0x58026000
 80014b8:	cb840000 	.word	0xcb840000
 80014bc:	cfb80000 	.word	0xcfb80000
 80014c0:	04300002 	.word	0x04300002

080014c4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2224      	movs	r2, #36	; 0x24
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f014 ff43 	bl	801635c <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_DAC1_Init+0x5c>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_DAC1_Init+0x60>)
 80014da:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MX_DAC1_Init+0x5c>)
 80014de:	f004 f90f 	bl	8005700 <HAL_DAC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_DAC1_Init+0x28>
		Error_Handler();
 80014e8:	f001 fc80 	bl	8002dec <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014f0:	230a      	movs	r3, #10
 80014f2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_DAC1_Init+0x5c>)
 8001508:	f004 fb2a 	bl	8005b60 <HAL_DAC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001512:	f001 fc6b 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240002f4 	.word	0x240002f4
 8001524:	40007400 	.word	0x40007400

08001528 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_I2C1_Init+0x78>)
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <MX_I2C1_Init+0x7c>)
 8001530:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_I2C1_Init+0x80>)
 8001536:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_I2C1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C1_Init+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_I2C1_Init+0x78>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001564:	f007 fcf0 	bl	8008f48 <HAL_I2C_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800156e:	f001 fc3d 	bl	8002dec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001572:	2100      	movs	r1, #0
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001576:	f008 fa37 	bl	80099e8 <HAL_I2CEx_ConfigAnalogFilter>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001580:	f001 fc34 	bl	8002dec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001584:	2100      	movs	r1, #0
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001588:	f008 fa79 	bl	8009a7e <HAL_I2CEx_ConfigDigitalFilter>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001592:	f001 fc2b 	bl	8002dec <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001596:	2001      	movs	r0, #1
 8001598:	f008 fabe 	bl	8009b18 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24000380 	.word	0x24000380
 80015a4:	40005400 	.word	0x40005400
 80015a8:	0020081f 	.word	0x0020081f

080015ac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_RTC_Init+0xb4>)
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <MX_RTC_Init+0xb8>)
 80015c8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_RTC_Init+0xb4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100;
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_RTC_Init+0xb4>)
 80015d2:	2264      	movs	r2, #100	; 0x64
 80015d4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000;
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_RTC_Init+0xb4>)
 80015d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80015dc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_RTC_Init+0xb4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_RTC_Init+0xb4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_RTC_Init+0xb4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <MX_RTC_Init+0xb4>)
 80015f8:	f00c f812 	bl	800d620 <HAL_RTC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001602:	f001 fbf3 	bl	8002dec <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001606:	2300      	movs	r3, #0
 8001608:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800160a:	2300      	movs	r3, #0
 800160c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800160e:	2300      	movs	r3, #0
 8001610:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <MX_RTC_Init+0xb4>)
 8001622:	f00c f87f 	bl	800d724 <HAL_RTC_SetTime>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_RTC_Init+0x84>
		Error_Handler();
 800162c:	f001 fbde 	bl	8002dec <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001630:	2301      	movs	r3, #1
 8001632:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001634:	2301      	movs	r3, #1
 8001636:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001638:	2301      	movs	r3, #1
 800163a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800163c:	2300      	movs	r3, #0
 800163e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001640:	463b      	mov	r3, r7
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_RTC_Init+0xb4>)
 8001648:	f00c f966 	bl	800d918 <HAL_RTC_SetDate>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_RTC_Init+0xaa>
		Error_Handler();
 8001652:	f001 fbcb 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	240003d4 	.word	0x240003d4
 8001664:	58004000 	.word	0x58004000

08001668 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_SPI1_Init+0xa8>)
 800166e:	4a29      	ldr	r2, [pc, #164]	; (8001714 <MX_SPI1_Init+0xac>)
 8001670:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_SPI1_Init+0xa8>)
 8001674:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001678:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_SPI1_Init+0xa8>)
 800167c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001680:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <MX_SPI1_Init+0xa8>)
 8001684:	220f      	movs	r2, #15
 8001686:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_SPI1_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_SPI1_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_SPI1_Init+0xa8>)
 8001696:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800169a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_SPI1_Init+0xa8>)
 800169e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_SPI1_Init+0xa8>)
 80016fc:	f00c fab2 	bl	800dc64 <HAL_SPI_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_SPI1_Init+0xa2>
		Error_Handler();
 8001706:	f001 fb71 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240003f8 	.word	0x240003f8
 8001714:	40013000 	.word	0x40013000

08001718 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800171e:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <MX_SPI2_Init+0xac>)
 8001720:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001724:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001728:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800172c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001730:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001734:	220f      	movs	r2, #15
 8001736:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001746:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800174a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800174e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001752:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800176e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001772:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_SPI2_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_SPI2_Init+0xa8>)
 80017ac:	f00c fa5a 	bl	800dc64 <HAL_SPI_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_SPI2_Init+0xa2>
		Error_Handler();
 80017b6:	f001 fb19 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24000480 	.word	0x24000480
 80017c4:	40003800 	.word	0x40003800

080017c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09a      	sub	sp, #104	; 0x68
 80017cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	222c      	movs	r2, #44	; 0x2c
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f014 fdaa 	bl	801635c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <MX_TIM1_Init+0x154>)
 800180a:	4a45      	ldr	r2, [pc, #276]	; (8001920 <MX_TIM1_Init+0x158>)
 800180c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <MX_TIM1_Init+0x154>)
 8001810:	2231      	movs	r2, #49	; 0x31
 8001812:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <MX_TIM1_Init+0x154>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <MX_TIM1_Init+0x154>)
 800181c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001820:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <MX_TIM1_Init+0x154>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <MX_TIM1_Init+0x154>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <MX_TIM1_Init+0x154>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001834:	4839      	ldr	r0, [pc, #228]	; (800191c <MX_TIM1_Init+0x154>)
 8001836:	f00c fe66 	bl	800e506 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001840:	f001 fad4 	bl	8002dec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800184a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184e:	4619      	mov	r1, r3
 8001850:	4832      	ldr	r0, [pc, #200]	; (800191c <MX_TIM1_Init+0x154>)
 8001852:	f00d fbe1 	bl	800f018 <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x98>
		Error_Handler();
 800185c:	f001 fac6 	bl	8002dec <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001860:	482e      	ldr	r0, [pc, #184]	; (800191c <MX_TIM1_Init+0x154>)
 8001862:	f00d f95d 	bl	800eb20 <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800186c:	f001 fabe 	bl	8002dec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800187c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001880:	4619      	mov	r1, r3
 8001882:	4826      	ldr	r0, [pc, #152]	; (800191c <MX_TIM1_Init+0x154>)
 8001884:	f00e f91e 	bl	800fac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800188e:	f001 faad 	bl	8002dec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 480 - 1;
 8001896:	f240 13df 	movw	r3, #479	; 0x1df
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80018b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4818      	ldr	r0, [pc, #96]	; (800191c <MX_TIM1_Init+0x154>)
 80018ba:	f00d fa99 	bl	800edf0 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 80018c4:	f001 fa92 	bl	8002dec <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <MX_TIM1_Init+0x154>)
 80018fe:	f00e f96f 	bl	800fbe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 8001908:	f001 fa70 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MX_TIM1_Init+0x154>)
 800190e:	f001 fdfd 	bl	800350c <HAL_TIM_MspPostInit>

}
 8001912:	bf00      	nop
 8001914:	3768      	adds	r7, #104	; 0x68
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24000508 	.word	0x24000508
 8001920:	40010000 	.word	0x40010000

08001924 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800192a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001960:	2231      	movs	r2, #49	; 0x31
 8001962:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <MX_TIM2_Init+0xe8>)
 800196c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001970:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <MX_TIM2_Init+0xe8>)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800197e:	4823      	ldr	r0, [pc, #140]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001980:	f00c fdc1 	bl	800e506 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x6a>
		Error_Handler();
 800198a:	f001 fa2f 	bl	8002dec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001998:	4619      	mov	r1, r3
 800199a:	481c      	ldr	r0, [pc, #112]	; (8001a0c <MX_TIM2_Init+0xe8>)
 800199c:	f00d fb3c 	bl	800f018 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x86>
		Error_Handler();
 80019a6:	f001 fa21 	bl	8002dec <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80019aa:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_TIM2_Init+0xe8>)
 80019ac:	f00d f8b8 	bl	800eb20 <HAL_TIM_PWM_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x96>
		Error_Handler();
 80019b6:	f001 fa19 	bl	8002dec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ba:	2320      	movs	r3, #32
 80019bc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <MX_TIM2_Init+0xe8>)
 80019ca:	f00e f87b 	bl	800fac4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80019d4:	f001 fa0a 	bl	8002dec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80019e8:	463b      	mov	r3, r7
 80019ea:	220c      	movs	r2, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM2_Init+0xe8>)
 80019f0:	f00d f9fe 	bl	800edf0 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80019fa:	f001 f9f7 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM2_Init+0xe8>)
 8001a00:	f001 fd84 	bl	800350c <HAL_TIM_MspPostInit>

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24000554 	.word	0x24000554

08001a10 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a30:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <MX_TIM3_Init+0x98>)
 8001a32:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a36:	2263      	movs	r2, #99	; 0x63
 8001a38:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a42:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a46:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a56:	f00c fd56 	bl	800e506 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001a60:	f001 f9c4 	bl	8002dec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a72:	f00d fad1 	bl	800f018 <HAL_TIM_ConfigClockSource>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001a7c:	f001 f9b6 	bl	8002dec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a8e:	f00e f819 	bl	800fac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001a98:	f001 f9a8 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	240005a0 	.word	0x240005a0
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ab2:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <MX_USART1_UART_Init+0x94>)
 8001ab4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ab8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001abc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001af4:	4811      	ldr	r0, [pc, #68]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001af6:	f00e f90f 	bl	800fd18 <HAL_UART_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001b00:	f001 f974 	bl	8002dec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001b04:	2100      	movs	r1, #0
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001b08:	f010 fe8b 	bl	8012822 <HAL_UARTEx_SetTxFifoThreshold>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001b12:	f001 f96b 	bl	8002dec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4808      	ldr	r0, [pc, #32]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001b1a:	f010 fec0 	bl	801289e <HAL_UARTEx_SetRxFifoThreshold>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001b24:	f001 f962 	bl	8002dec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <MX_USART1_UART_Init+0x90>)
 8001b2a:	f010 fe41 	bl	80127b0 <HAL_UARTEx_DisableFifoMode>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001b34:	f001 f95a 	bl	8002dec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	240005ec 	.word	0x240005ec
 8001b40:	40011000 	.word	0x40011000

08001b44 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_DMA_Init+0x6c>)
 8001b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <MX_DMA_Init+0x6c>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_DMA_Init+0x6c>)
 8001b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	200b      	movs	r0, #11
 8001b6e:	f003 fd9f 	bl	80056b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b72:	200b      	movs	r0, #11
 8001b74:	f003 fdb6 	bl	80056e4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2105      	movs	r1, #5
 8001b7c:	200c      	movs	r0, #12
 8001b7e:	f003 fd97 	bl	80056b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b82:	200c      	movs	r0, #12
 8001b84:	f003 fdae 	bl	80056e4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2105      	movs	r1, #5
 8001b8c:	200d      	movs	r0, #13
 8001b8e:	f003 fd8f 	bl	80056b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b92:	200d      	movs	r0, #13
 8001b94:	f003 fda6 	bl	80056e4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	2010      	movs	r0, #16
 8001b9e:	f003 fd87 	bl	80056b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ba2:	2010      	movs	r0, #16
 8001ba4:	f003 fd9e 	bl	80056e4 <HAL_NVIC_EnableIRQ>

}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	58024400 	.word	0x58024400

08001bb4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bda:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_GPIO_Init+0xe8>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001c4a:	f007 f963 	bl	8008f14 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2164      	movs	r1, #100	; 0x64
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_GPIO_Init+0xf0>)
 8001c54:	f007 f95e 	bl	8008f14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001c58:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c5c:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001c72:	f006 ff87 	bl	8008b84 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_GPIO_Init+0xf0>)
 8001c8e:	f006 ff79 	bl	8008b84 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020800 	.word	0x58020800
 8001ca4:	58020400 	.word	0x58020400

08001ca8 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	f107 0208 	add.w	r2, r7, #8
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	4817      	ldr	r0, [pc, #92]	; (8001d24 <poll_i2c_sensor+0x7c>)
 8001cc8:	f007 f9da 	bl	8009080 <HAL_I2C_Master_Transmit>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <poll_i2c_sensor+0x80>)
 8001cd8:	f014 fc96 	bl	8016608 <puts>
 8001cdc:	e01c      	b.n	8001d18 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	f107 0208 	add.w	r2, r7, #8
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2302      	movs	r3, #2
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <poll_i2c_sensor+0x7c>)
 8001cf0:	f007 fade 	bl	80092b0 <HAL_I2C_Master_Receive>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <poll_i2c_sensor+0x84>)
 8001d00:	f014 fc82 	bl	8016608 <puts>
 8001d04:	e008      	b.n	8001d18 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001d06:	7a3b      	ldrb	r3, [r7, #8]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d10:	7a7a      	ldrb	r2, [r7, #9]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	10db      	asrs	r3, r3, #3
 8001d16:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	24000380 	.word	0x24000380
 8001d28:	08016fcc 	.word	0x08016fcc
 8001d2c:	08016fdc 	.word	0x08016fdc

08001d30 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d38:	f107 010c 	add.w	r1, r7, #12
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2201      	movs	r2, #1
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <receive_pmt_spi+0x44>)
 8001d42:	f00c f8b3 	bl	800deac <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <receive_pmt_spi+0x44>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <receive_pmt_spi+0x44>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7bba      	ldrb	r2, [r7, #14]
 8001d62:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240003f8 	.word	0x240003f8

08001d78 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d80:	f107 010c 	add.w	r1, r7, #12
 8001d84:	2364      	movs	r3, #100	; 0x64
 8001d86:	2201      	movs	r2, #1
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <receive_erpa_spi+0x44>)
 8001d8a:	f00c f88f 	bl	800deac <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d92:	7b7b      	ldrb	r3, [r7, #13]
 8001d94:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <receive_erpa_spi+0x44>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <receive_erpa_spi+0x44>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001da4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7bba      	ldrb	r2, [r7, #14]
 8001daa:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24000480 	.word	0x24000480

08001dc0 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <receive_erpa_adc+0x30>)
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <receive_erpa_adc+0x30>)
 8001dd0:	895b      	ldrh	r3, [r3, #10]
 8001dd2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	89fa      	ldrh	r2, [r7, #14]
 8001dd8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	89ba      	ldrh	r2, [r7, #12]
 8001de0:	801a      	strh	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	24000c40 	.word	0x24000c40

08001df4 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001dfc:	2390      	movs	r3, #144	; 0x90
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff52 	bl	8001ca8 <poll_i2c_sensor>
 8001e04:	4603      	mov	r3, r0
 8001e06:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001e08:	2394      	movs	r3, #148	; 0x94
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff4c 	bl	8001ca8 <poll_i2c_sensor>
 8001e10:	4603      	mov	r3, r0
 8001e12:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001e14:	2392      	movs	r3, #146	; 0x92
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff46 	bl	8001ca8 <poll_i2c_sensor>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e20:	2396      	movs	r3, #150	; 0x96
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff40 	bl	8001ca8 <poll_i2c_sensor>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	89fa      	ldrh	r2, [r7, #14]
 8001e30:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3302      	adds	r3, #2
 8001e36:	89ba      	ldrh	r2, [r7, #12]
 8001e38:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	897a      	ldrh	r2, [r7, #10]
 8001e40:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3306      	adds	r3, #6
 8001e46:	893a      	ldrh	r2, [r7, #8]
 8001e48:	801a      	strh	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e5e:	8a9b      	ldrh	r3, [r3, #20]
 8001e60:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e64:	8a1b      	ldrh	r3, [r3, #16]
 8001e66:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e6a:	899b      	ldrh	r3, [r3, #12]
 8001e6c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e70:	8a5b      	ldrh	r3, [r3, #18]
 8001e72:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e7c:	88db      	ldrh	r3, [r3, #6]
 8001e7e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e82:	89db      	ldrh	r3, [r3, #14]
 8001e84:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e88:	891b      	ldrh	r3, [r3, #8]
 8001e8a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <receive_hk_adc1+0x90>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8bfa      	ldrh	r2, [r7, #30]
 8001e96:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	8bba      	ldrh	r2, [r7, #28]
 8001e9e:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	8b7a      	ldrh	r2, [r7, #26]
 8001ea6:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3306      	adds	r3, #6
 8001eac:	8b3a      	ldrh	r2, [r7, #24]
 8001eae:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	8afa      	ldrh	r2, [r7, #22]
 8001eb6:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	330a      	adds	r3, #10
 8001ebc:	8aba      	ldrh	r2, [r7, #20]
 8001ebe:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	8a7a      	ldrh	r2, [r7, #18]
 8001ec6:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	330e      	adds	r3, #14
 8001ecc:	8a3a      	ldrh	r2, [r7, #16]
 8001ece:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	89fa      	ldrh	r2, [r7, #14]
 8001ed6:	801a      	strh	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3724      	adds	r7, #36	; 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	24000c40 	.word	0x24000c40

08001ee8 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <receive_hk_adc3+0x4c>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <receive_hk_adc3+0x4c>)
 8001ef8:	885b      	ldrh	r3, [r3, #2]
 8001efa:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <receive_hk_adc3+0x4c>)
 8001efe:	889b      	ldrh	r3, [r3, #4]
 8001f00:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <receive_hk_adc3+0x4c>)
 8001f04:	88db      	ldrh	r3, [r3, #6]
 8001f06:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	89fa      	ldrh	r2, [r7, #14]
 8001f0c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3302      	adds	r3, #2
 8001f12:	89ba      	ldrh	r2, [r7, #12]
 8001f14:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	897a      	ldrh	r2, [r7, #10]
 8001f1c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3306      	adds	r3, #6
 8001f22:	893a      	ldrh	r2, [r7, #8]
 8001f24:	801a      	strh	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	24000c60 	.word	0x24000c60

08001f38 <inRange>:

// *********************************************************************************************************** HELPER FUNCTIONS

int inRange(uint16_t raw, int min, int max) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= 0) {
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	db01      	blt.n	8001f52 <inRange+0x1a>
		return 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <inRange+0x1c>
	}
	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <error_protocol>:

void error_protocol(ERROR_TAGS tag) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

	packet_t error_packet;
	uint8_t *buffer = (uint8_t*) malloc(ERROR_PACKET_DATA_SIZE * sizeof(uint8_t));
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	f014 f9d8 	bl	8016320 <malloc>
 8001f70:	4603      	mov	r3, r0
 8001f72:	61fb      	str	r3, [r7, #28]

	buffer[0] = ERROR_SYNC;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	22dd      	movs	r2, #221	; 0xdd
 8001f78:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERROR_SYNC;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	22dd      	movs	r2, #221	; 0xdd
 8001f80:	701a      	strb	r2, [r3, #0]
	buffer[2] = tag;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3302      	adds	r3, #2
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	701a      	strb	r2, [r3, #0]

	error_packet = create_packet(buffer, ERROR_PACKET_DATA_SIZE);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	69f9      	ldr	r1, [r7, #28]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f82f 	bl	8001ff4 <create_packet>
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	463a      	mov	r2, r7
 8001f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fa0:	e883 0003 	stmia.w	r3, {r0, r1}
	osMessageQueuePut(mid_MsgQueue, &error_packet, 0U, 0U);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <error_protocol+0x6c>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f107 0114 	add.w	r1, r7, #20
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f010 ffdc 	bl	8012f6c <osMessageQueuePut>
	available_msgs++;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <error_protocol+0x70>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <error_protocol+0x70>)
 8001fbc:	6013      	str	r3, [r2, #0]

	free(buffer);
 8001fbe:	69f8      	ldr	r0, [r7, #28]
 8001fc0:	f014 f9b6 	bl	8016330 <free>
	//TODO: Shutdown
}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24000bd0 	.word	0x24000bd0
 8001fd0:	24000bdc 	.word	0x24000bdc

08001fd4 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_UART_TxCpltCallback+0x1c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	24000000 	.word	0x24000000

08001ff4 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4618      	mov	r0, r3
 8002006:	f014 f98b 	bl	8016320 <malloc>
 800200a:	4603      	mov	r3, r0
 800200c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	4618      	mov	r0, r3
 8002016:	f014 f993 	bl	8016340 <memcpy>
	packet.size = size;
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	461a      	mov	r2, r3
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	e893 0003 	ldmia.w	r3, {r0, r1}
 800202a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 8002038:	b580      	push	{r7, lr}
 800203a:	b090      	sub	sp, #64	; 0x40
 800203c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 800203e:	230a      	movs	r3, #10
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8002042:	f107 011c 	add.w	r1, r7, #28
 8002046:	2364      	movs	r3, #100	; 0x64
 8002048:	2209      	movs	r2, #9
 800204a:	4840      	ldr	r0, [pc, #256]	; (800214c <handshake+0x114>)
 800204c:	f00d ff42 	bl	800fed4 <HAL_UART_Receive>
		key = rx_buffer[0];
 8002050:	7f3b      	ldrb	r3, [r7, #28]
 8002052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 8002056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d1f1      	bne.n	8002042 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 800205e:	7f7b      	ldrb	r3, [r7, #29]
 8002060:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8002064:	7fbb      	ldrb	r3, [r7, #30]
 8002066:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 800206a:	7ffb      	ldrb	r3, [r7, #31]
 800206c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8002070:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8002078:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800207c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8002080:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002084:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8002088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 800209c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020a0:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 80020a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020a6:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 80020a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020ac:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 80020ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020b2:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 80020b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020b8:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 80020ba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020be:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 80020c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c2:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	2200      	movs	r2, #0
 80020ca:	4619      	mov	r1, r3
 80020cc:	4820      	ldr	r0, [pc, #128]	; (8002150 <handshake+0x118>)
 80020ce:	f00b fc23 	bl	800d918 <HAL_RTC_SetDate>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 80020d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <handshake+0xac>
		Error_Handler();
 80020e0:	f000 fe84 	bl	8002dec <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4819      	ldr	r0, [pc, #100]	; (8002150 <handshake+0x118>)
 80020ec:	f00b fb1a 	bl	800d724 <HAL_RTC_SetTime>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 80020f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <handshake+0xca>
		Error_Handler();
 80020fe:	f000 fe75 	bl	8002dec <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002102:	23fa      	movs	r3, #250	; 0xfa
 8002104:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002108:	2302      	movs	r3, #2
 800210a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	e009      	b.n	800213a <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002126:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	2205      	movs	r2, #5
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <handshake+0x114>)
 8002130:	f00d fe42 	bl	800fdb8 <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 8002134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002136:	3301      	adds	r3, #1
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf1      	blt.n	8002126 <handshake+0xee>
	}

	return 1;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3740      	adds	r7, #64	; 0x40
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	240005ec 	.word	0x240005ec
 8002150:	240003d4 	.word	0x240003d4

08002154 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);	// Timer 3 is used for both HK and voltage monitor task. Must always be running in order for voltage monitor to work
 8002158:	2100      	movs	r1, #0
 800215a:	481b      	ldr	r0, [pc, #108]	; (80021c8 <system_setup+0x74>)
 800215c:	f00c faa2 	bl	800e6a4 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002164:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800216a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800216e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002172:	4816      	ldr	r0, [pc, #88]	; (80021cc <system_setup+0x78>)
 8002174:	f003 f8a2 	bl	80052bc <HAL_ADCEx_Calibration_Start>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800217e:	f000 fe35 	bl	8002dec <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002182:	220b      	movs	r2, #11
 8002184:	4912      	ldr	r1, [pc, #72]	; (80021d0 <system_setup+0x7c>)
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <system_setup+0x78>)
 8002188:	f002 f976 	bl	8004478 <HAL_ADC_Start_DMA>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002192:	f000 fe2b 	bl	8002dec <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002196:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800219a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800219e:	480d      	ldr	r0, [pc, #52]	; (80021d4 <system_setup+0x80>)
 80021a0:	f003 f88c 	bl	80052bc <HAL_ADCEx_Calibration_Start>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80021aa:	f000 fe1f 	bl	8002dec <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80021ae:	2204      	movs	r2, #4
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <system_setup+0x84>)
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <system_setup+0x80>)
 80021b4:	f002 f960 	bl	8004478 <HAL_ADC_Start_DMA>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80021be:	f000 fe15 	bl	8002dec <Error_Handler>
	}
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	240005a0 	.word	0x240005a0
 80021cc:	2400013c 	.word	0x2400013c
 80021d0:	24000c40 	.word	0x24000c40
 80021d4:	240001a0 	.word	0x240001a0
 80021d8:	24000c60 	.word	0x24000c60

080021dc <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	2200      	movs	r2, #0
 80021ea:	4619      	mov	r1, r3
 80021ec:	4821      	ldr	r0, [pc, #132]	; (8002274 <getTimestamp+0x98>)
 80021ee:	f00b fb37 	bl	800d860 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	481e      	ldr	r0, [pc, #120]	; (8002274 <getTimestamp+0x98>)
 80021fc:	f00b fc14 	bl	800da28 <HAL_RTC_GetDate>

	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	fb03 f202 	mul.w	r2, r3, r2
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <getTimestamp+0x9c>)
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	7b7a      	ldrb	r2, [r7, #13]
 800221a:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3302      	adds	r3, #2
 8002220:	7bba      	ldrb	r2, [r7, #14]
 8002222:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3303      	adds	r3, #3
 8002228:	7c3a      	ldrb	r2, [r7, #16]
 800222a:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	7c7a      	ldrb	r2, [r7, #17]
 8002232:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3305      	adds	r3, #5
 8002238:	7cba      	ldrb	r2, [r7, #18]
 800223a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	0e1a      	lsrs	r2, r3, #24
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3306      	adds	r3, #6
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	0c1a      	lsrs	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3307      	adds	r3, #7
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	0a1a      	lsrs	r2, r3, #8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3308      	adds	r3, #8
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3309      	adds	r3, #9
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	240003d4 	.word	0x240003d4
 8002278:	000f4240 	.word	0x000f4240

0800227c <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002282:	bf00      	nop
 8002284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002288:	4845      	ldr	r0, [pc, #276]	; (80023a0 <sample_pmt+0x124>)
 800228a:	f006 fe2b 	bl	8008ee4 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f7      	bne.n	8002284 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002294:	2010      	movs	r0, #16
 8002296:	f014 f843 	bl	8016320 <malloc>
 800229a:	4603      	mov	r3, r0
 800229c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800229e:	2002      	movs	r0, #2
 80022a0:	f014 f83e 	bl	8016320 <malloc>
 80022a4:	4603      	mov	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80022a8:	200a      	movs	r0, #10
 80022aa:	f014 f839 	bl	8016320 <malloc>
 80022ae:	4603      	mov	r3, r0
 80022b0:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff ff92 	bl	80021dc <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80022b8:	6938      	ldr	r0, [r7, #16]
 80022ba:	f7ff fd39 	bl	8001d30 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	22bb      	movs	r2, #187	; 0xbb
 80022c2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	22bb      	movs	r2, #187	; 0xbb
 80022ca:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <sample_pmt+0x128>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3302      	adds	r3, #2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <sample_pmt+0x128>)
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3303      	adds	r3, #3
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3304      	adds	r3, #4
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3305      	adds	r3, #5
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	7852      	ldrb	r2, [r2, #1]
 80022fa:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3306      	adds	r3, #6
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3307      	adds	r3, #7
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	7852      	ldrb	r2, [r2, #1]
 800230e:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3308      	adds	r3, #8
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	7892      	ldrb	r2, [r2, #2]
 8002318:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3309      	adds	r3, #9
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	78d2      	ldrb	r2, [r2, #3]
 8002322:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	330a      	adds	r3, #10
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	7912      	ldrb	r2, [r2, #4]
 800232c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	330b      	adds	r3, #11
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	7952      	ldrb	r2, [r2, #5]
 8002336:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	330c      	adds	r3, #12
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	7992      	ldrb	r2, [r2, #6]
 8002340:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	330d      	adds	r3, #13
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	79d2      	ldrb	r2, [r2, #7]
 800234a:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	330e      	adds	r3, #14
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	7a12      	ldrb	r2, [r2, #8]
 8002354:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	330f      	adds	r3, #15
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	7a52      	ldrb	r2, [r2, #9]
 800235e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2210      	movs	r2, #16
 8002364:	6979      	ldr	r1, [r7, #20]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fe44 	bl	8001ff4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <sample_pmt+0x12c>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	1d39      	adds	r1, r7, #4
 8002372:	2300      	movs	r3, #0
 8002374:	2200      	movs	r2, #0
 8002376:	f010 fdf9 	bl	8012f6c <osMessageQueuePut>
	available_msgs++;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <sample_pmt+0x130>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <sample_pmt+0x130>)
 8002382:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f013 ffd3 	bl	8016330 <free>
	free(pmt_spi);
 800238a:	6938      	ldr	r0, [r7, #16]
 800238c:	f013 ffd0 	bl	8016330 <free>
	free(timestamp);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f013 ffcd 	bl	8016330 <free>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58020000 	.word	0x58020000
 80023a4:	24000be0 	.word	0x24000be0
 80023a8:	24000bd0 	.word	0x24000bd0
 80023ac:	24000bdc 	.word	0x24000bdc

080023b0 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80023b6:	bf00      	nop
 80023b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023bc:	4859      	ldr	r0, [pc, #356]	; (8002524 <sample_erpa+0x174>)
 80023be:	f006 fd91 	bl	8008ee4 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f7      	bne.n	80023b8 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023c8:	2014      	movs	r0, #20
 80023ca:	f013 ffa9 	bl	8016320 <malloc>
 80023ce:	4603      	mov	r3, r0
 80023d0:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023d2:	2002      	movs	r0, #2
 80023d4:	f013 ffa4 	bl	8016320 <malloc>
 80023d8:	4603      	mov	r3, r0
 80023da:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80023dc:	2004      	movs	r0, #4
 80023de:	f013 ff9f 	bl	8016320 <malloc>
 80023e2:	4603      	mov	r3, r0
 80023e4:	60fb      	str	r3, [r7, #12]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80023e6:	200a      	movs	r0, #10
 80023e8:	f013 ff9a 	bl	8016320 <malloc>
 80023ec:	4603      	mov	r3, r0
 80023ee:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f7ff fef3 	bl	80021dc <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80023f6:	6938      	ldr	r0, [r7, #16]
 80023f8:	f7ff fcbe 	bl	8001d78 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fcdf 	bl	8001dc0 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	22aa      	movs	r2, #170	; 0xaa
 8002406:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	22aa      	movs	r2, #170	; 0xaa
 800240e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002410:	4b45      	ldr	r3, [pc, #276]	; (8002528 <sample_erpa+0x178>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29a      	uxth	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3302      	adds	r3, #2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <sample_erpa+0x178>)
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3303      	adds	r3, #3
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29a      	uxth	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3304      	adds	r3, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3305      	adds	r3, #5
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3302      	adds	r3, #2
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	b29a      	uxth	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3306      	adds	r3, #6
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3302      	adds	r3, #2
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3307      	adds	r3, #7
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3308      	adds	r3, #8
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3309      	adds	r3, #9
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	7852      	ldrb	r2, [r2, #1]
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	330a      	adds	r3, #10
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	330b      	adds	r3, #11
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	7852      	ldrb	r2, [r2, #1]
 800248e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	330c      	adds	r3, #12
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	7892      	ldrb	r2, [r2, #2]
 8002498:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	330d      	adds	r3, #13
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	78d2      	ldrb	r2, [r2, #3]
 80024a2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	330e      	adds	r3, #14
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	7912      	ldrb	r2, [r2, #4]
 80024ac:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	330f      	adds	r3, #15
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	7952      	ldrb	r2, [r2, #5]
 80024b6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3310      	adds	r3, #16
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	7992      	ldrb	r2, [r2, #6]
 80024c0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3311      	adds	r3, #17
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	79d2      	ldrb	r2, [r2, #7]
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3312      	adds	r3, #18
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	7a12      	ldrb	r2, [r2, #8]
 80024d4:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3313      	adds	r3, #19
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	7a52      	ldrb	r2, [r2, #9]
 80024de:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80024e0:	463b      	mov	r3, r7
 80024e2:	2214      	movs	r2, #20
 80024e4:	6979      	ldr	r1, [r7, #20]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd84 	bl	8001ff4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <sample_erpa+0x17c>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4639      	mov	r1, r7
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	f010 fd39 	bl	8012f6c <osMessageQueuePut>
	available_msgs++;
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <sample_erpa+0x180>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <sample_erpa+0x180>)
 8002502:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f013 ff13 	bl	8016330 <free>
	free(erpa_spi);
 800250a:	6938      	ldr	r0, [r7, #16]
 800250c:	f013 ff10 	bl	8016330 <free>
	free(erpa_adc);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f013 ff0d 	bl	8016330 <free>
	free(timestamp);
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	f013 ff0a 	bl	8016330 <free>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	58020400 	.word	0x58020400
 8002528:	24000be2 	.word	0x24000be2
 800252c:	24000bd0 	.word	0x24000bd0
 8002530:	24000bdc 	.word	0x24000bdc

08002534 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800253a:	2030      	movs	r0, #48	; 0x30
 800253c:	f013 fef0 	bl	8016320 <malloc>
 8002540:	4603      	mov	r3, r0
 8002542:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002544:	2008      	movs	r0, #8
 8002546:	f013 feeb 	bl	8016320 <malloc>
 800254a:	4603      	mov	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]
	uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 800254e:	2012      	movs	r0, #18
 8002550:	f013 fee6 	bl	8016320 <malloc>
 8002554:	4603      	mov	r3, r0
 8002556:	617b      	str	r3, [r7, #20]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002558:	2008      	movs	r0, #8
 800255a:	f013 fee1 	bl	8016320 <malloc>
 800255e:	4603      	mov	r3, r0
 8002560:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002562:	200a      	movs	r0, #10
 8002564:	f013 fedc 	bl	8016320 <malloc>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fe35 	bl	80021dc <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <sample_hk+0x8c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257a:	db25      	blt.n	80025c8 <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 800257c:	69b8      	ldr	r0, [r7, #24]
 800257e:	f7ff fc39 	bl	8001df4 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <sample_hk+0x90>)
 800258c:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3302      	adds	r3, #2
 8002592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <sample_hk+0x90>)
 800259a:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3304      	adds	r3, #4
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <sample_hk+0x90>)
 80025a8:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3306      	adds	r3, #6
 80025ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <sample_hk+0x90>)
 80025b6:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80025b8:	4b01      	ldr	r3, [pc, #4]	; (80025c0 <sample_hk+0x8c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e01f      	b.n	8002600 <sample_hk+0xcc>
 80025c0:	24000004 	.word	0x24000004
 80025c4:	24000c68 	.word	0x24000c68
	} else {
		TEMPERATURE_COUNTER++;
 80025c8:	4ba4      	ldr	r3, [pc, #656]	; (800285c <sample_hk+0x328>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4aa3      	ldr	r2, [pc, #652]	; (800285c <sample_hk+0x328>)
 80025d0:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80025d2:	4ba3      	ldr	r3, [pc, #652]	; (8002860 <sample_hk+0x32c>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80025dc:	4ba0      	ldr	r3, [pc, #640]	; (8002860 <sample_hk+0x32c>)
 80025de:	885a      	ldrh	r2, [r3, #2]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	3302      	adds	r3, #2
 80025e4:	b212      	sxth	r2, r2
 80025e6:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80025e8:	4b9d      	ldr	r3, [pc, #628]	; (8002860 <sample_hk+0x32c>)
 80025ea:	889a      	ldrh	r2, [r3, #4]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	3304      	adds	r3, #4
 80025f0:	b212      	sxth	r2, r2
 80025f2:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80025f4:	4b9a      	ldr	r3, [pc, #616]	; (8002860 <sample_hk+0x32c>)
 80025f6:	88da      	ldrh	r2, [r3, #6]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	3306      	adds	r3, #6
 80025fc:	b212      	sxth	r2, r2
 80025fe:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7ff fc27 	bl	8001e54 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8002606:	6938      	ldr	r0, [r7, #16]
 8002608:	f7ff fc6e 	bl	8001ee8 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	22cc      	movs	r2, #204	; 0xcc
 8002610:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	22cc      	movs	r2, #204	; 0xcc
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800261a:	4b92      	ldr	r3, [pc, #584]	; (8002864 <sample_hk+0x330>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29a      	uxth	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3302      	adds	r3, #2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800262a:	4b8e      	ldr	r3, [pc, #568]	; (8002864 <sample_hk+0x330>)
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3303      	adds	r3, #3
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3302      	adds	r3, #2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29a      	uxth	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3304      	adds	r3, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	3302      	adds	r3, #2
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3305      	adds	r3, #5
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29a      	uxth	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3306      	adds	r3, #6
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3307      	adds	r3, #7
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	121a      	asrs	r2, r3, #8
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3308      	adds	r3, #8
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3309      	adds	r3, #9
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	3302      	adds	r3, #2
 8002694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002698:	121a      	asrs	r2, r3, #8
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	330a      	adds	r3, #10
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	3302      	adds	r3, #2
 80026a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	330b      	adds	r3, #11
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3304      	adds	r3, #4
 80026b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ba:	121a      	asrs	r2, r3, #8
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	330c      	adds	r3, #12
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3304      	adds	r3, #4
 80026c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	330d      	adds	r3, #13
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	3306      	adds	r3, #6
 80026d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026dc:	121a      	asrs	r2, r3, #8
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	330e      	adds	r3, #14
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3306      	adds	r3, #6
 80026ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	330f      	adds	r3, #15
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3310      	adds	r3, #16
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3311      	adds	r3, #17
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3302      	adds	r3, #2
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	b29a      	uxth	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3312      	adds	r3, #18
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3302      	adds	r3, #2
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3313      	adds	r3, #19
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3304      	adds	r3, #4
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	b29a      	uxth	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3314      	adds	r3, #20
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3304      	adds	r3, #4
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3315      	adds	r3, #21
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3306      	adds	r3, #6
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29a      	uxth	r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3316      	adds	r3, #22
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3306      	adds	r3, #6
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3317      	adds	r3, #23
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	330c      	adds	r3, #12
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3318      	adds	r3, #24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	330c      	adds	r3, #12
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3319      	adds	r3, #25
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3306      	adds	r3, #6
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	b29a      	uxth	r2, r3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	331a      	adds	r3, #26
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3306      	adds	r3, #6
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	331b      	adds	r3, #27
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3304      	adds	r3, #4
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	331c      	adds	r3, #28
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3304      	adds	r3, #4
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	331d      	adds	r3, #29
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	330e      	adds	r3, #14
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	b29a      	uxth	r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	331e      	adds	r3, #30
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	330e      	adds	r3, #14
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	331f      	adds	r3, #31
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3310      	adds	r3, #16
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3320      	adds	r3, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3310      	adds	r3, #16
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3321      	adds	r3, #33	; 0x21
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3308      	adds	r3, #8
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	b29a      	uxth	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3322      	adds	r3, #34	; 0x22
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3308      	adds	r3, #8
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3323      	adds	r3, #35	; 0x23
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	330a      	adds	r3, #10
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	330a      	adds	r3, #10
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3325      	adds	r3, #37	; 0x25
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3326      	adds	r3, #38	; 0x26
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	e006      	b.n	8002868 <sample_hk+0x334>
 800285a:	bf00      	nop
 800285c:	24000004 	.word	0x24000004
 8002860:	24000c68 	.word	0x24000c68
 8002864:	24000be4 	.word	0x24000be4
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3327      	adds	r3, #39	; 0x27
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	7852      	ldrb	r2, [r2, #1]
 8002874:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	7892      	ldrb	r2, [r2, #2]
 800287e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3329      	adds	r3, #41	; 0x29
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	78d2      	ldrb	r2, [r2, #3]
 8002888:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	332a      	adds	r3, #42	; 0x2a
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	7912      	ldrb	r2, [r2, #4]
 8002892:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	332b      	adds	r3, #43	; 0x2b
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	7952      	ldrb	r2, [r2, #5]
 800289c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	332c      	adds	r3, #44	; 0x2c
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	7992      	ldrb	r2, [r2, #6]
 80028a6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	332d      	adds	r3, #45	; 0x2d
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	79d2      	ldrb	r2, [r2, #7]
 80028b0:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	332e      	adds	r3, #46	; 0x2e
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	7a12      	ldrb	r2, [r2, #8]
 80028ba:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	332f      	adds	r3, #47	; 0x2f
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	7a52      	ldrb	r2, [r2, #9]
 80028c4:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2230      	movs	r2, #48	; 0x30
 80028ca:	69f9      	ldr	r1, [r7, #28]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fb91 	bl	8001ff4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <sample_hk+0x3dc>)
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	1d39      	adds	r1, r7, #4
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	f010 fb46 	bl	8012f6c <osMessageQueuePut>
	available_msgs++;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <sample_hk+0x3e0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <sample_hk+0x3e0>)
 80028e8:	6013      	str	r3, [r2, #0]

	free(buffer);
 80028ea:	69f8      	ldr	r0, [r7, #28]
 80028ec:	f013 fd20 	bl	8016330 <free>
	free(hk_i2c);
 80028f0:	69b8      	ldr	r0, [r7, #24]
 80028f2:	f013 fd1d 	bl	8016330 <free>
	free(hk_adc1);
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f013 fd1a 	bl	8016330 <free>
	free(hk_adc3);
 80028fc:	6938      	ldr	r0, [r7, #16]
 80028fe:	f013 fd17 	bl	8016330 <free>
	free(timestamp);
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f013 fd14 	bl	8016330 <free>
}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	24000bd0 	.word	0x24000bd0
 8002914:	24000bdc 	.word	0x24000bdc

08002918 <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <PMT_init+0x38>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002928:	2200      	movs	r2, #0
 800292a:	2101      	movs	r1, #1
 800292c:	f010 fa44 	bl	8012db8 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <PMT_init+0x3c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <PMT_init+0x30>
			sample_pmt();
 8002938:	f7ff fca0 	bl	800227c <sample_pmt>
			pmt_seq++;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <PMT_init+0x40>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <PMT_init+0x40>)
 8002946:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002948:	f010 f956 	bl	8012bf8 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 800294c:	e7e8      	b.n	8002920 <PMT_init+0x8>
 800294e:	bf00      	nop
 8002950:	24000bec 	.word	0x24000bec
 8002954:	24000be6 	.word	0x24000be6
 8002958:	24000be0 	.word	0x24000be0

0800295c <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <ERPA_init+0x38>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800296c:	2200      	movs	r2, #0
 800296e:	2102      	movs	r1, #2
 8002970:	f010 fa22 	bl	8012db8 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <ERPA_init+0x3c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <ERPA_init+0x30>
			sample_erpa();
 800297c:	f7ff fd18 	bl	80023b0 <sample_erpa>
			erpa_seq++;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <ERPA_init+0x40>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <ERPA_init+0x40>)
 800298a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 800298c:	f010 f934 	bl	8012bf8 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002990:	e7e8      	b.n	8002964 <ERPA_init+0x8>
 8002992:	bf00      	nop
 8002994:	24000bec 	.word	0x24000bec
 8002998:	24000be7 	.word	0x24000be7
 800299c:	24000be2 	.word	0x24000be2

080029a0 <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HK_init+0x38>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b0:	2200      	movs	r2, #0
 80029b2:	2104      	movs	r1, #4
 80029b4:	f010 fa00 	bl	8012db8 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HK_init+0x3c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HK_init+0x30>
			sample_hk();
 80029c0:	f7ff fdb8 	bl	8002534 <sample_hk>
			hk_seq++;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HK_init+0x40>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HK_init+0x40>)
 80029ce:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80029d0:	f010 f912 	bl	8012bf8 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80029d4:	e7e8      	b.n	80029a8 <HK_init+0x8>
 80029d6:	bf00      	nop
 80029d8:	24000bec 	.word	0x24000bec
 80029dc:	24000be8 	.word	0x24000be8
 80029e0:	24000be4 	.word	0x24000be4

080029e4 <UART_RX_init>:
 * @brief Function implementing the UART_RX_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80029ec:	2201      	movs	r2, #1
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <UART_RX_init+0x1c>)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <UART_RX_init+0x20>)
 80029f2:	f00d fb37 	bl	8010064 <HAL_UART_Receive_IT>
		osDelay(5);
 80029f6:	2005      	movs	r0, #5
 80029f8:	f010 f93f 	bl	8012c7a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80029fc:	e7f6      	b.n	80029ec <UART_RX_init+0x8>
 80029fe:	bf00      	nop
 8002a00:	24000bf0 	.word	0x24000bf0
 8002a04:	240005ec 	.word	0x240005ec

08002a08 <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <GPIO_on_init+0x9c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f010 f90f 	bl	8012c38 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <GPIO_on_init+0xa0>)
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f006 fa77 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a26:	2064      	movs	r0, #100	; 0x64
 8002a28:	f010 f927 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <GPIO_on_init+0xa0>)
 8002a2e:	2120      	movs	r1, #32
 8002a30:	2201      	movs	r2, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 fa6e 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	f010 f91e 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <GPIO_on_init+0xa4>)
 8002a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a44:	2201      	movs	r2, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fa64 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	f010 f914 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <GPIO_on_init+0xa4>)
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	2201      	movs	r2, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f006 fa5b 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a5e:	2064      	movs	r0, #100	; 0x64
 8002a60:	f010 f90b 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <GPIO_on_init+0xa4>)
 8002a66:	2140      	movs	r1, #64	; 0x40
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 fa52 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f010 f902 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <GPIO_on_init+0xa4>)
 8002a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fa48 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	f010 f8f8 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <GPIO_on_init+0xa4>)
 8002a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a90:	2201      	movs	r2, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f006 fa3e 	bl	8008f14 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <GPIO_on_init+0x9c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f010 f8cb 	bl	8012c38 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002aa2:	e7ba      	b.n	8002a1a <GPIO_on_init+0x12>
 8002aa4:	24000708 	.word	0x24000708
 8002aa8:	58020400 	.word	0x58020400
 8002aac:	58020800 	.word	0x58020800

08002ab0 <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <GPIO_off_init+0x9c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f010 f8bb 	bl	8012c38 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <GPIO_off_init+0xa0>)
 8002ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f006 fa22 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ad0:	2064      	movs	r0, #100	; 0x64
 8002ad2:	f010 f8d2 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <GPIO_off_init+0xa0>)
 8002ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002adc:	2200      	movs	r2, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 fa18 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	f010 f8c8 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <GPIO_off_init+0xa0>)
 8002aec:	2140      	movs	r1, #64	; 0x40
 8002aee:	2200      	movs	r2, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f006 fa0f 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002af6:	2064      	movs	r0, #100	; 0x64
 8002af8:	f010 f8bf 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <GPIO_off_init+0xa0>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	2200      	movs	r2, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f006 fa06 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b08:	2064      	movs	r0, #100	; 0x64
 8002b0a:	f010 f8b6 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <GPIO_off_init+0xa0>)
 8002b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b14:	2200      	movs	r2, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f006 f9fc 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	f010 f8ac 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <GPIO_off_init+0xa4>)
 8002b24:	2120      	movs	r1, #32
 8002b26:	2200      	movs	r2, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 f9f3 	bl	8008f14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b2e:	2064      	movs	r0, #100	; 0x64
 8002b30:	f010 f8a3 	bl	8012c7a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <GPIO_off_init+0xa4>)
 8002b36:	2104      	movs	r1, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f006 f9ea 	bl	8008f14 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002b40:	4b02      	ldr	r3, [pc, #8]	; (8002b4c <GPIO_off_init+0x9c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f010 f877 	bl	8012c38 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b4a:	e7ba      	b.n	8002ac2 <GPIO_off_init+0x12>
 8002b4c:	24000968 	.word	0x24000968
 8002b50:	58020800 	.word	0x58020800
 8002b54:	58020400 	.word	0x58020400

08002b58 <UART_TX_init>:
 * @brief Function implementing the UART_TX_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[1000];
	uint32_t total_size = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <UART_TX_init+0x9c>)
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b70:	2200      	movs	r2, #0
 8002b72:	4921      	ldr	r1, [pc, #132]	; (8002bf8 <UART_TX_init+0xa0>)
 8002b74:	f010 fa5a 	bl	801302c <osMessageQueueGet>
 8002b78:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11c      	bne.n	8002bba <UART_TX_init+0x62>
				if (total_size + msg.size <= 1000) {
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <UART_TX_init+0xa0>)
 8002b82:	889b      	ldrh	r3, [r3, #4]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8e:	d818      	bhi.n	8002bc2 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <UART_TX_init+0xa4>)
 8002b94:	4413      	add	r3, r2
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <UART_TX_init+0xa0>)
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <UART_TX_init+0xa0>)
 8002b9c:	8892      	ldrh	r2, [r2, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f013 fbce 	bl	8016340 <memcpy>
					free(msg.array);
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <UART_TX_init+0xa0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f013 fbc1 	bl	8016330 <free>
					total_size += msg.size;
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <UART_TX_init+0xa0>)
 8002bb0:	889b      	ldrh	r3, [r3, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
				} else {

					break;
				}
			}
		} while (status == osOK);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0d3      	beq.n	8002b68 <UART_TX_init+0x10>
 8002bc0:	e000      	b.n	8002bc4 <UART_TX_init+0x6c>
					break;
 8002bc2:	bf00      	nop

		if (total_size > 0) {
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <UART_TX_init+0x94>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	490a      	ldr	r1, [pc, #40]	; (8002bfc <UART_TX_init+0xa4>)
 8002bd2:	480b      	ldr	r0, [pc, #44]	; (8002c00 <UART_TX_init+0xa8>)
 8002bd4:	f00d fa92 	bl	80100fc <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002bd8:	e001      	b.n	8002bde <UART_TX_init+0x86>
				osThreadYield();
 8002bda:	f010 f80d 	bl	8012bf8 <osThreadYield>
			while (tx_flag == 0) {
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <UART_TX_init+0xac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f9      	beq.n	8002bda <UART_TX_init+0x82>
			}

			// Reset the flag
			tx_flag = 0;
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <UART_TX_init+0xac>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002bec:	f010 f804 	bl	8012bf8 <osThreadYield>
		total_size = 0;
 8002bf0:	e7b8      	b.n	8002b64 <UART_TX_init+0xc>
 8002bf2:	bf00      	nop
 8002bf4:	24000bd0 	.word	0x24000bd0
 8002bf8:	24000bd4 	.word	0x24000bd4
 8002bfc:	24000c70 	.word	0x24000c70
 8002c00:	240005ec 	.word	0x240005ec
 8002c04:	24000000 	.word	0x24000000

08002c08 <Voltage_Monitor_init>:
 * @brief Function implementing the Voltage_Monitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_ID, osFlagsWaitAny,
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <Voltage_Monitor_init+0x1bc>)
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f010 f8cc 	bl	8012db8 <osEventFlagsWait>
		// Sample voltages

		// Check voltages

		// If out of range, de-init all voltages & send error
		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002c20:	2012      	movs	r0, #18
 8002c22:	f013 fb7d 	bl	8016320 <malloc>
 8002c26:	4603      	mov	r3, r0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f013 fb78 	bl	8016320 <malloc>
 8002c30:	4603      	mov	r3, r0
 8002c32:	623b      	str	r3, [r7, #32]

		receive_hk_adc1(hk_adc1);
 8002c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c36:	f7ff f90d 	bl	8001e54 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002c3a:	6a38      	ldr	r0, [r7, #32]
 8002c3c:	f7ff f954 	bl	8001ee8 <receive_hk_adc3>

		uint16_t _busvmon = hk_adc1[0];
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	83fb      	strh	r3, [r7, #30]
		uint16_t _busimon = hk_adc1[1];
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	885b      	ldrh	r3, [r3, #2]
 8002c4a:	83bb      	strh	r3, [r7, #28]
		uint16_t _2v5 = hk_adc1[2];
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	889b      	ldrh	r3, [r3, #4]
 8002c50:	837b      	strh	r3, [r7, #26]
		uint16_t _3v3 = hk_adc3[3];
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	88db      	ldrh	r3, [r3, #6]
 8002c56:	833b      	strh	r3, [r7, #24]
		uint16_t _5v = hk_adc1[6];
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	899b      	ldrh	r3, [r3, #12]
 8002c5c:	82fb      	strh	r3, [r7, #22]
		uint16_t _n3v3 = hk_adc1[3];
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	88db      	ldrh	r3, [r3, #6]
 8002c62:	82bb      	strh	r3, [r7, #20]
		uint16_t _n5v = hk_adc3[2];
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	889b      	ldrh	r3, [r3, #4]
 8002c68:	827b      	strh	r3, [r7, #18]
		uint16_t _15v = hk_adc1[7];
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	89db      	ldrh	r3, [r3, #14]
 8002c6e:	823b      	strh	r3, [r7, #16]
		uint16_t _5vref = hk_adc1[8];
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	8a1b      	ldrh	r3, [r3, #16]
 8002c74:	81fb      	strh	r3, [r7, #14]
		uint16_t _n200v = hk_adc1[4];
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	891b      	ldrh	r3, [r3, #8]
 8002c7a:	81bb      	strh	r3, [r7, #12]
		uint16_t _n800v = hk_adc1[5];
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	895b      	ldrh	r3, [r3, #10]
 8002c80:	817b      	strh	r3, [r7, #10]

		if (!inRange(_busvmon, 1574, 1739)) {
 8002c82:	8bfb      	ldrh	r3, [r7, #30]
 8002c84:	f240 62cb 	movw	r2, #1739	; 0x6cb
 8002c88:	f240 6126 	movw	r1, #1574	; 0x626
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f953 	bl	8001f38 <inRange>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <Voltage_Monitor_init+0x96>
			error_protocol(RAIL_BUSVMON);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7ff f961 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_busimon, 35, 39)) {
 8002c9e:	8bbb      	ldrh	r3, [r7, #28]
 8002ca0:	2227      	movs	r2, #39	; 0x27
 8002ca2:	2123      	movs	r1, #35	; 0x23
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f947 	bl	8001f38 <inRange>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <Voltage_Monitor_init+0xae>
			error_protocol(RAIL_BUSIMON);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff f955 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_2v5, 2947, 3257)) {
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
 8002cb8:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8002cbc:	f640 3183 	movw	r1, #2947	; 0xb83
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f939 	bl	8001f38 <inRange>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <Voltage_Monitor_init+0xca>
			error_protocol(RAIL_2v5);
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f7ff f947 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_3v3, 3537, 3909)) {
 8002cd2:	8b3b      	ldrh	r3, [r7, #24]
 8002cd4:	f640 7245 	movw	r2, #3909	; 0xf45
 8002cd8:	f640 51d1 	movw	r1, #3537	; 0xdd1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff f92b 	bl	8001f38 <inRange>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <Voltage_Monitor_init+0xe6>
			error_protocol(RAIL_3v3);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f7ff f939 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_5v, 3537, 3909)) {
 8002cee:	8afb      	ldrh	r3, [r7, #22]
 8002cf0:	f640 7245 	movw	r2, #3909	; 0xf45
 8002cf4:	f640 51d1 	movw	r1, #3537	; 0xdd1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f91d 	bl	8001f38 <inRange>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <Voltage_Monitor_init+0x102>
			error_protocol(RAIL_5v);
 8002d04:	2004      	movs	r0, #4
 8002d06:	f7ff f92b 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_n3v3, 3702, 4091)) {
 8002d0a:	8abb      	ldrh	r3, [r7, #20]
 8002d0c:	f640 72fb 	movw	r2, #4091	; 0xffb
 8002d10:	f640 6176 	movw	r1, #3702	; 0xe76
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f90f 	bl	8001f38 <inRange>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <Voltage_Monitor_init+0x11e>
			error_protocol(RAIL_n3v3);
 8002d20:	2005      	movs	r0, #5
 8002d22:	f7ff f91d 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_n5v, 3619, 4000)) {
 8002d26:	8a7b      	ldrh	r3, [r7, #18]
 8002d28:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d2c:	f640 6123 	movw	r1, #3619	; 0xe23
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f901 	bl	8001f38 <inRange>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <Voltage_Monitor_init+0x13a>
			error_protocol(RAIL_n5v);
 8002d3c:	2006      	movs	r0, #6
 8002d3e:	f7ff f90f 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_15v, 3525, 3896)) {
 8002d42:	8a3b      	ldrh	r3, [r7, #16]
 8002d44:	f640 7238 	movw	r2, #3896	; 0xf38
 8002d48:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f8f3 	bl	8001f38 <inRange>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <Voltage_Monitor_init+0x156>
			error_protocol(RAIL_15v);
 8002d58:	2007      	movs	r0, #7
 8002d5a:	f7ff f901 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_5vref, 3537, 3909)) {
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	f640 7245 	movw	r2, #3909	; 0xf45
 8002d64:	f640 51d1 	movw	r1, #3537	; 0xdd1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f8e5 	bl	8001f38 <inRange>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <Voltage_Monitor_init+0x172>
			error_protocol(RAIL_5vref);
 8002d74:	2008      	movs	r0, #8
 8002d76:	f7ff f8f3 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_n200v, 3796, 4196)) {
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	f241 0264 	movw	r2, #4196	; 0x1064
 8002d80:	f640 61d4 	movw	r1, #3796	; 0xed4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f8d7 	bl	8001f38 <inRange>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <Voltage_Monitor_init+0x18e>
			error_protocol(RAIL_n200v);
 8002d90:	2009      	movs	r0, #9
 8002d92:	f7ff f8e5 	bl	8001f60 <error_protocol>
		}

		if (!inRange(_n800v, 3018, 3336)) {
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	f640 5208 	movw	r2, #3336	; 0xd08
 8002d9c:	f640 31ca 	movw	r1, #3018	; 0xbca
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f8c9 	bl	8001f38 <inRange>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <Voltage_Monitor_init+0x1aa>
			error_protocol(RAIL_n800v);
 8002dac:	200a      	movs	r0, #10
 8002dae:	f7ff f8d7 	bl	8001f60 <error_protocol>
		}

		free(hk_adc1);
 8002db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db4:	f013 fabc 	bl	8016330 <free>
		free(hk_adc3);
 8002db8:	6a38      	ldr	r0, [r7, #32]
 8002dba:	f013 fab9 	bl	8016330 <free>

		osThreadYield();
 8002dbe:	f00f ff1b 	bl	8012bf8 <osThreadYield>
	for (;;) {
 8002dc2:	e725      	b.n	8002c10 <Voltage_Monitor_init+0x8>
 8002dc4:	24000bec 	.word	0x24000bec

08002dc8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002dda:	f000 ff5b 	bl	8003c94 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40001000 	.word	0x40001000

08002dec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df0:	b672      	cpsid	i
}
 8002df2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002df4:	e7fe      	b.n	8002df4 <Error_Handler+0x8>
	...

08002df8 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_MspInit+0x38>)
 8002e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_MspInit+0x38>)
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_MspInit+0x38>)
 8002e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f06f 0001 	mvn.w	r0, #1
 8002e24:	f002 fc44 	bl	80056b0 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	58024400 	.word	0x58024400

08002e34 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08e      	sub	sp, #56	; 0x38
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <HAL_ADC_MspInit+0x20c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 8091 	bne.w	8002f7a <HAL_ADC_MspInit+0x146>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC12_CLK_ENABLE();
 8002e58:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e5e:	4a79      	ldr	r2, [pc, #484]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	4a71      	ldr	r2, [pc, #452]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e86:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb2:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec2:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697b      	ldr	r3, [r7, #20]
		 PC4     ------> ADC1_INP4
		 PC5     ------> ADC1_INP8
		 PB0     ------> ADC1_INP9
		 PB1     ------> ADC1_INP5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8002ed0:	2333      	movs	r3, #51	; 0x33
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4859      	ldr	r0, [pc, #356]	; (8003048 <HAL_ADC_MspInit+0x214>)
 8002ee4:	f005 fe4e 	bl	8008b84 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6
 8002ee8:	23ce      	movs	r3, #206	; 0xce
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
				| GPIO_PIN_7;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eec:	2303      	movs	r3, #3
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4854      	ldr	r0, [pc, #336]	; (800304c <HAL_ADC_MspInit+0x218>)
 8002efc:	f005 fe42 	bl	8008b84 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f00:	2303      	movs	r3, #3
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f04:	2303      	movs	r3, #3
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f10:	4619      	mov	r1, r3
 8002f12:	484f      	ldr	r0, [pc, #316]	; (8003050 <HAL_ADC_MspInit+0x21c>)
 8002f14:	f005 fe36 	bl	8008b84 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA1_Stream0;
 8002f18:	4b4e      	ldr	r3, [pc, #312]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f1a:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_ADC_MspInit+0x224>)
 8002f1c:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f20:	2209      	movs	r2, #9
 8002f22:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f24:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f30:	4b48      	ldr	r3, [pc, #288]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f36:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f38:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f3e:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f46:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f48:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f50:	4b40      	ldr	r3, [pc, #256]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8002f5c:	483d      	ldr	r0, [pc, #244]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f5e:	f002 ffd5 	bl	8005f0c <HAL_DMA_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_ADC_MspInit+0x138>
			Error_Handler();
 8002f68:	f7ff ff40 	bl	8002dec <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a39      	ldr	r2, [pc, #228]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f70:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f72:	4a38      	ldr	r2, [pc, #224]	; (8003054 <HAL_ADC_MspInit+0x220>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6393      	str	r3, [r2, #56]	; 0x38
		/* USER CODE BEGIN ADC3_MspInit 1 */

		/* USER CODE END ADC3_MspInit 1 */
	}

}
 8002f78:	e05e      	b.n	8003038 <HAL_ADC_MspInit+0x204>
	} else if (hadc->Instance == ADC3) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_ADC_MspInit+0x228>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d159      	bne.n	8003038 <HAL_ADC_MspInit+0x204>
		__HAL_RCC_ADC3_CLK_ENABLE();
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa2:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_ADC_MspInit+0x210>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
		HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2,
 8002fc0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002fc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002fc8:	f000 fe90 	bl	8003cec <HAL_SYSCFG_AnalogSwitchConfig>
		HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3,
 8002fcc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002fd0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002fd4:	f000 fe8a 	bl	8003cec <HAL_SYSCFG_AnalogSwitchConfig>
		hdma_adc3.Instance = DMA1_Stream1;
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_ADC_MspInit+0x230>)
 8002fdc:	601a      	str	r2, [r3, #0]
		hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002fe0:	2273      	movs	r2, #115	; 0x73
 8002fe2:	605a      	str	r2, [r3, #4]
		hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
		hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	60da      	str	r2, [r3, #12]
		hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff6:	611a      	str	r2, [r3, #16]
		hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8002ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ffe:	615a      	str	r2, [r3, #20]
		hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8003002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003006:	619a      	str	r2, [r3, #24]
		hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 800300a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300e:	61da      	str	r2, [r3, #28]
		hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
		hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc3) != HAL_OK) {
 800301c:	4810      	ldr	r0, [pc, #64]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 800301e:	f002 ff75 	bl	8005f0c <HAL_DMA_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_ADC_MspInit+0x1f8>
			Error_Handler();
 8003028:	f7ff fee0 	bl	8002dec <Error_Handler>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8003030:	64da      	str	r2, [r3, #76]	; 0x4c
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <HAL_ADC_MspInit+0x22c>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003038:	bf00      	nop
 800303a:	3738      	adds	r7, #56	; 0x38
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40022000 	.word	0x40022000
 8003044:	58024400 	.word	0x58024400
 8003048:	58020800 	.word	0x58020800
 800304c:	58020000 	.word	0x58020000
 8003050:	58020400 	.word	0x58020400
 8003054:	24000204 	.word	0x24000204
 8003058:	40020010 	.word	0x40020010
 800305c:	58026000 	.word	0x58026000
 8003060:	2400027c 	.word	0x2400027c
 8003064:	40020028 	.word	0x40020028

08003068 <HAL_DAC_MspInit>:
 * @brief DAC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hdac: DAC handle pointer
 * @retval None
 */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
	if (hdac->Instance == DAC1) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a34      	ldr	r2, [pc, #208]	; (8003158 <HAL_DAC_MspInit+0xf0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d161      	bne.n	800314e <HAL_DAC_MspInit+0xe6>
		/* USER CODE BEGIN DAC1_MspInit 0 */

		/* USER CODE END DAC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_DAC12_CLK_ENABLE();
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_DAC_MspInit+0xf4>)
 800308c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003090:	4a32      	ldr	r2, [pc, #200]	; (800315c <HAL_DAC_MspInit+0xf4>)
 8003092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_DAC_MspInit+0xf4>)
 800309c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_DAC_MspInit+0xf4>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	4a2b      	ldr	r2, [pc, #172]	; (800315c <HAL_DAC_MspInit+0xf4>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_DAC_MspInit+0xf4>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
		/**DAC1 GPIO Configuration
		 PA4     ------> DAC1_OUT1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030c6:	2310      	movs	r3, #16
 80030c8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ca:	2303      	movs	r3, #3
 80030cc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	4821      	ldr	r0, [pc, #132]	; (8003160 <HAL_DAC_MspInit+0xf8>)
 80030da:	f005 fd53 	bl	8008b84 <HAL_GPIO_Init>

		/* DAC1 DMA Init */
		/* DAC1_CH1 Init */
		hdma_dac1_ch1.Instance = DMA1_Stream5;
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_DAC_MspInit+0x100>)
 80030e2:	601a      	str	r2, [r3, #0]
		hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 80030e6:	2243      	movs	r2, #67	; 0x43
 80030e8:	605a      	str	r2, [r3, #4]
		hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	609a      	str	r2, [r3, #8]
		hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
		hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 80030f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fc:	611a      	str	r2, [r3, #16]
		hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003104:	615a      	str	r2, [r3, #20]
		hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800310c:	619a      	str	r2, [r3, #24]
		hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003114:	61da      	str	r2, [r3, #28]
		hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
		hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 800311e:	2200      	movs	r2, #0
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK) {
 8003122:	4810      	ldr	r0, [pc, #64]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003124:	f002 fef2 	bl	8005f0c <HAL_DMA_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_DAC_MspInit+0xca>
			Error_Handler();
 800312e:	f7ff fe5d 	bl	8002dec <Error_Handler>
		}

		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1_ch1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_DAC_MspInit+0xfc>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6393      	str	r3, [r2, #56]	; 0x38

		/* DAC1 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2105      	movs	r1, #5
 8003142:	2036      	movs	r0, #54	; 0x36
 8003144:	f002 fab4 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003148:	2036      	movs	r0, #54	; 0x36
 800314a:	f002 facb 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN DAC1_MspInit 1 */

		/* USER CODE END DAC1_MspInit 1 */
	}

}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	; 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40007400 	.word	0x40007400
 800315c:	58024400 	.word	0x58024400
 8003160:	58020000 	.word	0x58020000
 8003164:	24000308 	.word	0x24000308
 8003168:	40020088 	.word	0x40020088

0800316c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b0ba      	sub	sp, #232	; 0xe8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003174:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	22c0      	movs	r2, #192	; 0xc0
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f013 f8e5 	bl	801635c <memset>
	if (hi2c->Instance == I2C1) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_I2C_MspInit+0xc8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d146      	bne.n	800322a <HAL_I2C_MspInit+0xbe>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800319c:	f04f 0208 	mov.w	r2, #8
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f007 fd36 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_MspInit+0x56>
			Error_Handler();
 80031be:	f7ff fe15 	bl	8002dec <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c8:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80031e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e8:	2312      	movs	r3, #18
 80031ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031fa:	2304      	movs	r3, #4
 80031fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003204:	4619      	mov	r1, r3
 8003206:	480d      	ldr	r0, [pc, #52]	; (800323c <HAL_I2C_MspInit+0xd0>)
 8003208:	f005 fcbc 	bl	8008b84 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 8003214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_I2C_MspInit+0xcc>)
 800321e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 800322a:	bf00      	nop
 800322c:	37e8      	adds	r7, #232	; 0xe8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40005400 	.word	0x40005400
 8003238:	58024400 	.word	0x58024400
 800323c:	58020400 	.word	0x58020400

08003240 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b0b2      	sub	sp, #200	; 0xc8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	22c0      	movs	r2, #192	; 0xc0
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f013 f883 	bl	801635c <memset>
	if (hrtc->Instance == RTC) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_RTC_MspInit+0x5c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d118      	bne.n	8003292 <HAL_RTC_MspInit+0x52>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003260:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RTC_MspInit+0x60>)
 800326e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003272:	f107 0308 	add.w	r3, r7, #8
 8003276:	4618      	mov	r0, r3
 8003278:	f007 fcd4 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RTC_MspInit+0x46>
			Error_Handler();
 8003282:	f7ff fdb3 	bl	8002dec <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_RTC_MspInit+0x64>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <HAL_RTC_MspInit+0x64>)
 800328c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}

}
 8003292:	bf00      	nop
 8003294:	37c8      	adds	r7, #200	; 0xc8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	58004000 	.word	0x58004000
 80032a0:	00019300 	.word	0x00019300
 80032a4:	58024400 	.word	0x58024400

080032a8 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0bc      	sub	sp, #240	; 0xf0
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	22c0      	movs	r2, #192	; 0xc0
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f013 f847 	bl	801635c <memset>
	if (hspi->Instance == SPI1) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <HAL_SPI_MspInit+0x15c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d145      	bne.n	8003364 <HAL_SPI_MspInit+0xbc>

		/* USER CODE END SPI1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	67bb      	str	r3, [r7, #120]	; 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80032e8:	f107 0318 	add.w	r3, r7, #24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f007 fc99 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_SPI_MspInit+0x54>
			Error_Handler();
 80032f8:	f7ff fd78 	bl	8002dec <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_SPI_MspInit+0x160>)
 80032fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003302:	4a41      	ldr	r2, [pc, #260]	; (8003408 <HAL_SPI_MspInit+0x160>)
 8003304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800330c:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_SPI_MspInit+0x160>)
 800330e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_SPI_MspInit+0x160>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	4a39      	ldr	r2, [pc, #228]	; (8003408 <HAL_SPI_MspInit+0x160>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_SPI_MspInit+0x160>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
		/**SPI1 GPIO Configuration
		 PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
		 PB4 (NJTRST)     ------> SPI1_MISO
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8003338:	2318      	movs	r3, #24
 800333a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003350:	2305      	movs	r3, #5
 8003352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800335a:	4619      	mov	r1, r3
 800335c:	482b      	ldr	r0, [pc, #172]	; (800340c <HAL_SPI_MspInit+0x164>)
 800335e:	f005 fc11 	bl	8008b84 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 8003362:	e04a      	b.n	80033fa <HAL_SPI_MspInit+0x152>
	} else if (hspi->Instance == SPI2) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a29      	ldr	r2, [pc, #164]	; (8003410 <HAL_SPI_MspInit+0x168>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d145      	bne.n	80033fa <HAL_SPI_MspInit+0x152>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800336e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800337a:	2300      	movs	r3, #0
 800337c:	67bb      	str	r3, [r7, #120]	; 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800337e:	f107 0318 	add.w	r3, r7, #24
 8003382:	4618      	mov	r0, r3
 8003384:	f007 fc4e 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_SPI_MspInit+0xea>
			Error_Handler();
 800338e:	f7ff fd2d 	bl	8002dec <Error_Handler>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_SPI_MspInit+0x160>)
 8003394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_SPI_MspInit+0x160>)
 800339a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_SPI_MspInit+0x160>)
 80033a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_SPI_MspInit+0x160>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_SPI_MspInit+0x160>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_SPI_MspInit+0x160>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80033ce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80033d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033e8:	2305      	movs	r3, #5
 80033ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033f2:	4619      	mov	r1, r3
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <HAL_SPI_MspInit+0x164>)
 80033f6:	f005 fbc5 	bl	8008b84 <HAL_GPIO_Init>
}
 80033fa:	bf00      	nop
 80033fc:	37f0      	adds	r7, #240	; 0xf0
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40013000 	.word	0x40013000
 8003408:	58024400 	.word	0x58024400
 800340c:	58020400 	.word	0x58020400
 8003410:	40003800 	.word	0x40003800

08003414 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a37      	ldr	r2, [pc, #220]	; (8003500 <HAL_TIM_Base_MspInit+0xec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12f      	bne.n	8003486 <HAL_TIM_Base_MspInit+0x72>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800342c:	4a35      	ldr	r2, [pc, #212]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 8003438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
		/* TIM1 interrupt Init */
		HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	2018      	movs	r0, #24
 800344a:	f002 f931 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800344e:	2018      	movs	r0, #24
 8003450:	f002 f948 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2105      	movs	r1, #5
 8003458:	2019      	movs	r0, #25
 800345a:	f002 f929 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800345e:	2019      	movs	r0, #25
 8003460:	f002 f940 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2105      	movs	r1, #5
 8003468:	201a      	movs	r0, #26
 800346a:	f002 f921 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800346e:	201a      	movs	r0, #26
 8003470:	f002 f938 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	2105      	movs	r1, #5
 8003478:	201b      	movs	r0, #27
 800347a:	f002 f919 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800347e:	201b      	movs	r0, #27
 8003480:	f002 f930 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}

}
 8003484:	e038      	b.n	80034f8 <HAL_TIM_Base_MspInit+0xe4>
	} else if (htim_base->Instance == TIM2) {
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d117      	bne.n	80034c0 <HAL_TIM_Base_MspInit+0xac>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 8003492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 80034a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2105      	movs	r1, #5
 80034b2:	201c      	movs	r0, #28
 80034b4:	f002 f8fc 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034b8:	201c      	movs	r0, #28
 80034ba:	f002 f913 	bl	80056e4 <HAL_NVIC_EnableIRQ>
}
 80034be:	e01b      	b.n	80034f8 <HAL_TIM_Base_MspInit+0xe4>
	} else if (htim_base->Instance == TIM3) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_TIM_Base_MspInit+0xf4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d116      	bne.n	80034f8 <HAL_TIM_Base_MspInit+0xe4>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_TIM_Base_MspInit+0xf0>)
 80034dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2105      	movs	r1, #5
 80034ec:	201d      	movs	r0, #29
 80034ee:	f002 f8df 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034f2:	201d      	movs	r0, #29
 80034f4:	f002 f8f6 	bl	80056e4 <HAL_NVIC_EnableIRQ>
}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40010000 	.word	0x40010000
 8003504:	58024400 	.word	0x58024400
 8003508:	40000400 	.word	0x40000400

0800350c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
	if (htim->Instance == TIM1) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_MspPostInit+0xb8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d120      	bne.n	8003570 <HAL_TIM_MspPostInit+0x64>
		/* USER CODE BEGIN TIM1_MspPostInit 0 */

		/* USER CODE END TIM1_MspPostInit 0 */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 8003530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 8003540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800355e:	2301      	movs	r3, #1
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4818      	ldr	r0, [pc, #96]	; (80035cc <HAL_TIM_MspPostInit+0xc0>)
 800356a:	f005 fb0b 	bl	8008b84 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 800356e:	e024      	b.n	80035ba <HAL_TIM_MspPostInit+0xae>
	} else if (htim->Instance == TIM2) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d11f      	bne.n	80035ba <HAL_TIM_MspPostInit+0xae>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 800357c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003580:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_TIM_MspPostInit+0xbc>)
 800358c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800359c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4806      	ldr	r0, [pc, #24]	; (80035d0 <HAL_TIM_MspPostInit+0xc4>)
 80035b6:	f005 fae5 	bl	8008b84 <HAL_GPIO_Init>
}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	58024400 	.word	0x58024400
 80035cc:	58020000 	.word	0x58020000
 80035d0:	58020400 	.word	0x58020400

080035d4 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0ba      	sub	sp, #232	; 0xe8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80035dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	22c0      	movs	r2, #192	; 0xc0
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f012 feb1 	bl	801635c <memset>
	if (huart->Instance == USART1) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a41      	ldr	r2, [pc, #260]	; (8003704 <HAL_UART_MspInit+0x130>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d17b      	bne.n	80036fc <HAL_UART_MspInit+0x128>

		/* USER CODE END USART1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003604:	f04f 0201 	mov.w	r2, #1
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.Usart16ClockSelection =
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				RCC_USART16CLKSOURCE_D2PCLK2;
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	4618      	mov	r0, r3
 800361c:	f007 fb02 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_UART_MspInit+0x56>
			Error_Handler();
 8003626:	f7ff fbe1 	bl	8002dec <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_UART_MspInit+0x134>)
 800362c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003630:	4a35      	ldr	r2, [pc, #212]	; (8003708 <HAL_UART_MspInit+0x134>)
 8003632:	f043 0310 	orr.w	r3, r3, #16
 8003636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_UART_MspInit+0x134>)
 800363c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <HAL_UART_MspInit+0x134>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <HAL_UART_MspInit+0x134>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_UART_MspInit+0x134>)
 800365a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8003666:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800366a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003680:	2307      	movs	r3, #7
 8003682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003686:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800368a:	4619      	mov	r1, r3
 800368c:	481f      	ldr	r0, [pc, #124]	; (800370c <HAL_UART_MspInit+0x138>)
 800368e:	f005 fa79 	bl	8008b84 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream2;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_UART_MspInit+0x13c>)
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_UART_MspInit+0x140>)
 8003696:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_UART_MspInit+0x13c>)
 800369a:	222a      	movs	r2, #42	; 0x2a
 800369c:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b0:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b8:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80036d0:	480f      	ldr	r0, [pc, #60]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036d2:	f002 fc1b 	bl	8005f0c <HAL_DMA_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_UART_MspInit+0x10c>
			Error_Handler();
 80036dc:	f7ff fb86 	bl	8002dec <Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_UART_MspInit+0x13c>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6393      	str	r3, [r2, #56]	; 0x38

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2105      	movs	r1, #5
 80036f0:	2025      	movs	r0, #37	; 0x25
 80036f2:	f001 ffdd 	bl	80056b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036f6:	2025      	movs	r0, #37	; 0x25
 80036f8:	f001 fff4 	bl	80056e4 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 80036fc:	bf00      	nop
 80036fe:	37e8      	adds	r7, #232	; 0xe8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40011000 	.word	0x40011000
 8003708:	58024400 	.word	0x58024400
 800370c:	58020000 	.word	0x58020000
 8003710:	24000680 	.word	0x24000680
 8003714:	40020040 	.word	0x40020040

08003718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b090      	sub	sp, #64	; 0x40
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d827      	bhi.n	8003776 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003726:	2200      	movs	r2, #0
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	2036      	movs	r0, #54	; 0x36
 800372c:	f001 ffc0 	bl	80056b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003730:	2036      	movs	r0, #54	; 0x36
 8003732:	f001 ffd7 	bl	80056e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003736:	4a29      	ldr	r2, [pc, #164]	; (80037dc <HAL_InitTick+0xc4>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HAL_InitTick+0xc8>)
 800373e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003742:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <HAL_InitTick+0xc8>)
 8003744:	f043 0310 	orr.w	r3, r3, #16
 8003748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_InitTick+0xc8>)
 800374e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800375a:	f107 0210 	add.w	r2, r7, #16
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f007 fa1b 	bl	800aba0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_InitTick+0x6a>
 8003774:	e001      	b.n	800377a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e02b      	b.n	80037d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800377a:	f007 f9e5 	bl	800ab48 <HAL_RCC_GetPCLK1Freq>
 800377e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003780:	e004      	b.n	800378c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003782:	f007 f9e1 	bl	800ab48 <HAL_RCC_GetPCLK1Freq>
 8003786:	4603      	mov	r3, r0
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_InitTick+0xcc>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	3b01      	subs	r3, #1
 8003798:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_InitTick+0xd0>)
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_InitTick+0xd4>)
 800379e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_InitTick+0xd0>)
 80037a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_InitTick+0xd0>)
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_InitTick+0xd0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_InitTick+0xd0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037ba:	480b      	ldr	r0, [pc, #44]	; (80037e8 <HAL_InitTick+0xd0>)
 80037bc:	f00a fea3 	bl	800e506 <HAL_TIM_Base_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037c6:	4808      	ldr	r0, [pc, #32]	; (80037e8 <HAL_InitTick+0xd0>)
 80037c8:	f00a fef4 	bl	800e5b4 <HAL_TIM_Base_Start_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	e000      	b.n	80037d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3740      	adds	r7, #64	; 0x40
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	24000098 	.word	0x24000098
 80037e0:	58024400 	.word	0x58024400
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	24001058 	.word	0x24001058
 80037ec:	40001000 	.word	0x40001000

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80037f4:	e7fe      	b.n	80037f4 <NMI_Handler+0x4>

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <DMA1_Stream0_IRQHandler+0x10>)
 8003822:	f003 fe9d 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24000204 	.word	0x24000204

08003830 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream1_IRQHandler+0x10>)
 8003836:	f003 fe93 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2400027c 	.word	0x2400027c

08003844 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream2_IRQHandler+0x10>)
 800384a:	f003 fe89 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	24000680 	.word	0x24000680

08003858 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA1_Stream5_IRQHandler+0x10>)
 800385e:	f003 fe7f 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	24000308 	.word	0x24000308

0800386c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <TIM1_BRK_IRQHandler+0x10>)
 8003872:	f00b f9b6 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	24000508 	.word	0x24000508

08003880 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <TIM1_UP_IRQHandler+0x10>)
 8003886:	f00b f9ac 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	24000508 	.word	0x24000508

08003894 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800389a:	f00b f9a2 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	24000508 	.word	0x24000508

080038a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <TIM1_CC_IRQHandler+0x10>)
 80038ae:	f00b f998 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	24000508 	.word	0x24000508

080038bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM2_IRQHandler+0x10>)
 80038c2:	f00b f98e 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	24000554 	.word	0x24000554

080038d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM3_IRQHandler+0x10>)
 80038d6:	f00b f984 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	240005a0 	.word	0x240005a0

080038e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <USART1_IRQHandler+0x10>)
 80038ea:	f00c fc87 	bl	80101fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	240005ec 	.word	0x240005ec

080038f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <TIM6_DAC_IRQHandler+0x20>)
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <TIM6_DAC_IRQHandler+0x20>)
 8003908:	f002 f881 	bl	8005a0e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800390c:	4803      	ldr	r0, [pc, #12]	; (800391c <TIM6_DAC_IRQHandler+0x24>)
 800390e:	f00b f968 	bl	800ebe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	240002f4 	.word	0x240002f4
 800391c:	24001058 	.word	0x24001058

08003920 <ITM_SendChar>:
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <ITM_SendChar+0x48>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <ITM_SendChar+0x48>)
 8003930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <ITM_SendChar+0x4c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <ITM_SendChar+0x4c>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	bf00      	nop
 8003944:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f8      	beq.n	8003944 <ITM_SendChar+0x24>
 8003952:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000edfc 	.word	0xe000edfc
 800396c:	e0000e00 	.word	0xe0000e00

08003970 <_read>:
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e00a      	b.n	8003998 <_read+0x28>
 8003982:	f3af 8000 	nop.w
 8003986:	4601      	mov	r1, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60ba      	str	r2, [r7, #8]
 800398e:	b2ca      	uxtb	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	dbf0      	blt.n	8003982 <_read+0x12>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_write>:
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e009      	b.n	80039d0 <_write+0x26>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	60ba      	str	r2, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ffab 	bl	8003920 <ITM_SendChar>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	dbf1      	blt.n	80039bc <_write+0x12>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_close>:
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_fstat>:
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_isatty>:
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	2301      	movs	r3, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_lseek>:
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <_sbrk>:
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <_sbrk+0x5c>)
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <_sbrk+0x60>)
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <_sbrk+0x64>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <_sbrk+0x22>
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <_sbrk+0x64>)
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <_sbrk+0x68>)
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d207      	bcs.n	8003a8c <_sbrk+0x40>
 8003a7c:	f012 fc26 	bl	80162cc <__errno>
 8003a80:	4603      	mov	r3, r0
 8003a82:	220c      	movs	r2, #12
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a8a:	e009      	b.n	8003aa0 <_sbrk+0x54>
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <_sbrk+0x64>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <_sbrk+0x64>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <_sbrk+0x64>)
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	24080000 	.word	0x24080000
 8003aac:	00000400 	.word	0x00000400
 8003ab0:	240010a4 	.word	0x240010a4
 8003ab4:	24005a10 	.word	0x24005a10

08003ab8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <SystemInit+0xe4>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	4a36      	ldr	r2, [pc, #216]	; (8003b9c <SystemInit+0xe4>)
 8003ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <SystemInit+0xe8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d807      	bhi.n	8003ae8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <SystemInit+0xe8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 030f 	bic.w	r3, r3, #15
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <SystemInit+0xe8>)
 8003ae2:	f043 0307 	orr.w	r3, r3, #7
 8003ae6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <SystemInit+0xec>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <SystemInit+0xec>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <SystemInit+0xec>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003afa:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <SystemInit+0xec>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <SystemInit+0xec>)
 8003b00:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <SystemInit+0xf0>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <SystemInit+0xe8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <SystemInit+0xe8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 030f 	bic.w	r3, r3, #15
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <SystemInit+0xe8>)
 8003b1c:	f043 0307 	orr.w	r3, r3, #7
 8003b20:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <SystemInit+0xec>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <SystemInit+0xec>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <SystemInit+0xec>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <SystemInit+0xec>)
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <SystemInit+0xf4>)
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <SystemInit+0xec>)
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <SystemInit+0xf8>)
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003b40:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <SystemInit+0xec>)
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <SystemInit+0xfc>)
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <SystemInit+0xec>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <SystemInit+0xec>)
 8003b4e:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <SystemInit+0xfc>)
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <SystemInit+0xec>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <SystemInit+0xec>)
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <SystemInit+0xfc>)
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <SystemInit+0xec>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <SystemInit+0xec>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <SystemInit+0xec>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <SystemInit+0xec>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <SystemInit+0x100>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <SystemInit+0x104>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b82:	d202      	bcs.n	8003b8a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <SystemInit+0x108>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <SystemInit+0x10c>)
 8003b8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00
 8003ba0:	52002000 	.word	0x52002000
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bac:	02020200 	.word	0x02020200
 8003bb0:	01ff0000 	.word	0x01ff0000
 8003bb4:	01010280 	.word	0x01010280
 8003bb8:	5c001000 	.word	0x5c001000
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	51008108 	.word	0x51008108
 8003bc4:	52004000 	.word	0x52004000

08003bc8 <Reset_Handler>:
 8003bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c00 <LoopFillZerobss+0xe>
 8003bcc:	f7ff ff74 	bl	8003ab8 <SystemInit>
 8003bd0:	480c      	ldr	r0, [pc, #48]	; (8003c04 <LoopFillZerobss+0x12>)
 8003bd2:	490d      	ldr	r1, [pc, #52]	; (8003c08 <LoopFillZerobss+0x16>)
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <LoopFillZerobss+0x1a>)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e002      	b.n	8003be0 <LoopCopyDataInit>

08003bda <CopyDataInit>:
 8003bda:	58d4      	ldr	r4, [r2, r3]
 8003bdc:	50c4      	str	r4, [r0, r3]
 8003bde:	3304      	adds	r3, #4

08003be0 <LoopCopyDataInit>:
 8003be0:	18c4      	adds	r4, r0, r3
 8003be2:	428c      	cmp	r4, r1
 8003be4:	d3f9      	bcc.n	8003bda <CopyDataInit>
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <LoopFillZerobss+0x1e>)
 8003be8:	4c0a      	ldr	r4, [pc, #40]	; (8003c14 <LoopFillZerobss+0x22>)
 8003bea:	2300      	movs	r3, #0
 8003bec:	e001      	b.n	8003bf2 <LoopFillZerobss>

08003bee <FillZerobss>:
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	3204      	adds	r2, #4

08003bf2 <LoopFillZerobss>:
 8003bf2:	42a2      	cmp	r2, r4
 8003bf4:	d3fb      	bcc.n	8003bee <FillZerobss>
 8003bf6:	f012 fb6f 	bl	80162d8 <__libc_init_array>
 8003bfa:	f7fd f94b 	bl	8000e94 <main>
 8003bfe:	4770      	bx	lr
 8003c00:	24080000 	.word	0x24080000
 8003c04:	24000000 	.word	0x24000000
 8003c08:	24000108 	.word	0x24000108
 8003c0c:	080171d8 	.word	0x080171d8
 8003c10:	24000120 	.word	0x24000120
 8003c14:	24005a0c 	.word	0x24005a0c

08003c18 <ADC3_IRQHandler>:
 8003c18:	e7fe      	b.n	8003c18 <ADC3_IRQHandler>
	...

08003c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c22:	2003      	movs	r0, #3
 8003c24:	f001 fd39 	bl	800569a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c28:	f006 fde4 	bl	800a7f4 <HAL_RCC_GetSysClockFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_Init+0x68>)
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	4913      	ldr	r1, [pc, #76]	; (8003c88 <HAL_Init+0x6c>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_Init+0x68>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <HAL_Init+0x6c>)
 8003c50:	5cd3      	ldrb	r3, [r2, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <HAL_Init+0x70>)
 8003c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c60:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <HAL_Init+0x74>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c66:	2005      	movs	r0, #5
 8003c68:	f7ff fd56 	bl	8003718 <HAL_InitTick>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e002      	b.n	8003c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c76:	f7ff f8bf 	bl	8002df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	58024400 	.word	0x58024400
 8003c88:	08017124 	.word	0x08017124
 8003c8c:	24000094 	.word	0x24000094
 8003c90:	24000090 	.word	0x24000090

08003c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_IncTick+0x20>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2400009c 	.word	0x2400009c
 8003cb8:	240010a8 	.word	0x240010a8

08003cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_GetTick+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	240010a8 	.word	0x240010a8

08003cd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_GetREVID+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	5c001000 	.word	0x5c001000

08003cec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58000400 	.word	0x58000400

08003d18 <LL_ADC_SetCommonClock>:
	 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
	 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON,
			uint32_t CommonClock) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]
				CommonClock);
	}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_ADC_SetCommonPathInternalCh>:
	 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(
			ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal) {
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCxy_COMMON->CCR,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
				ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
	}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_GetCommonPathInternalCh>:
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
	 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
	 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
	 */
	__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(
			ADC_Common_TypeDef *ADCxy_COMMON) {
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
		return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
				ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
	}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_SetOffset>:
	 *             Other channels are slow channels (conversion rate: refer to reference manual).
	 * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety,
			uint32_t Channel, uint32_t OffsetLevel) {
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
		__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
		{
			MODIFY_REG(*preg, ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	601a      	str	r2, [r3, #0]
					(Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
		}
	}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_SetDataRightShift>:
	 *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
	 *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
	 * @retval Returned None
	 */
	__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx,
			uint32_t Offsety, uint32_t RigthShift) {
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
		MODIFY_REG(ADCx->CFGR2,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	611a      	str	r2, [r3, #16]
				(ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4),
				RigthShift << (Offsety & 0x1FUL));
	}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_ADC_SetOffsetSignedSaturation>:
	 *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
	 *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
	 * @retval Returned None
	 */
	__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx,
			uint32_t Offsety, uint32_t OffsetSignedSaturation) {
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
		{
			__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3360      	adds	r3, #96	; 0x60
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
			MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	601a      	str	r2, [r3, #0]
		}
	}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_REG_IsTriggerSourceSWStart>:
	 * @param  ADCx ADC instance
	 * @retval Value "0" if trigger source external trigger
	 *         Value "1" if trigger source SW start.
	 */
	__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(
			ADC_TypeDef *ADCx) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
				== (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e40:	2300      	movs	r3, #0
	}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_REG_SetSequencerRanks>:
	 *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
	 *             Other channels are slow channels (conversion rate: refer to reference manual).
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx,
			uint32_t Rank, uint32_t Channel) {
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
		/* Set bits with content of parameter "Channel" with bits position          */
		/* in register and register position depending on parameter "Rank".         */
		/* Parameters "Rank" and "Channel" are used with masks because containing   */
		/* other bits reserved for other purpose.                                   */
		__IO uint32_t *preg =
				__ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3330      	adds	r3, #48	; 0x30
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	4413      	add	r3, r2
		__IO uint32_t *preg =
 8003e6c:	617b      	str	r3, [r7, #20]
						((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

		MODIFY_REG(*preg,
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	211f      	movs	r1, #31
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	f003 011f 	and.w	r1, r3, #31
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	601a      	str	r2, [r3, #0]
				ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
				((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
	}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_ADC_REG_SetDataTransferMode>:
	 * @param  ADCx ADC instance
	 * @param  DataTransferMode Select Data Management configuration
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx,
			uint32_t DataTransferMode) {
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
		MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f023 0203 	bic.w	r2, r3, #3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
	}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_SetChannelSamplingTime>:
	 *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
	 *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx,
			uint32_t Channel, uint32_t SamplingTime) {
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
		/* Set bits with content of parameter "SamplingTime" with bits position     */
		/* in register and register position depending on parameter "Channel".      */
		/* Parameter "Channel" is used with masks because containing                */
		/* other bits reserved for other purpose.                                   */
		__IO uint32_t *preg =
				__ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3314      	adds	r3, #20
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	0e5b      	lsrs	r3, r3, #25
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	4413      	add	r3, r2
		__IO uint32_t *preg =
 8003eea:	617b      	str	r3, [r7, #20]
						((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

		MODIFY_REG(*preg,
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	0d1b      	lsrs	r3, r3, #20
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2107      	movs	r1, #7
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	401a      	ands	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	0d1b      	lsrs	r3, r3, #20
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	431a      	orrs	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	601a      	str	r2, [r3, #0]
				ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
				SamplingTime << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
	}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <LL_ADC_SetChannelSingleDiff>:
	 *         @arg @ref LL_ADC_SINGLE_ENDED
	 *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx,
			uint32_t Channel, uint32_t SingleDiff) {
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
		/* Bits of channels in single or differential mode are set only for         */
		/* differential mode (for single mode, mask of bits allowed to be set is    */
		/* shifted out of range of bits of channels in single or differential mode. */
		MODIFY_REG(ADCx->DIFSEL, Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0318 	and.w	r3, r3, #24
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f48:	40d9      	lsrs	r1, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				(Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
	}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	000fffff 	.word	0x000fffff

08003f6c <LL_ADC_GetMultimode>:
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
	 *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
	 */
	__STATIC_INLINE uint32_t LL_ADC_GetMultimode(
			ADC_Common_TypeDef *ADCxy_COMMON) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
		return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 031f 	and.w	r3, r3, #31
	}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_DisableDeepPowerDown>:
	 *         ADC must be ADC disabled.
	 * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6093      	str	r3, [r2, #8]
	}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	5fffffc0 	.word	0x5fffffc0

08003fac <LL_ADC_IsDeepPowerDownEnabled>:
	 * @brief  Get the selected ADC instance deep power down state.
	 * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: deep power down is disabled, 1: deep power down is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx) {
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ?
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
				1UL : 0UL);
 8003fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fc6:	2300      	movs	r3, #0
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_EnableInternalRegulator>:
	 *         ADC must be ADC disabled.
	 * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
	}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	6fffffc0 	.word	0x6fffffc0

08003ffc <LL_ADC_IsInternalRegulatorEnabled>:
	 * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(
			ADC_TypeDef *ADCx) {
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ?
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
				1UL : 0UL);
 800400c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004010:	d101      	bne.n	8004016 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004016:	2300      	movs	r3, #0
	}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_Enable>:
	 *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
	 * @rmtoll CR       ADEN           LL_ADC_Enable
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx) {
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <LL_ADC_Enable+0x24>)
 8004032:	4013      	ands	r3, r2
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	609a      	str	r2, [r3, #8]
	}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	7fffffc0 	.word	0x7fffffc0

0800404c <LL_ADC_Disable>:
	 *         on either groups regular or injected.
	 * @rmtoll CR       ADDIS          LL_ADC_Disable
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx) {
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <LL_ADC_Disable+0x24>)
 800405a:	4013      	ands	r3, r2
 800405c:	f043 0202 	orr.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
	}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	7fffffc0 	.word	0x7fffffc0

08004074 <LL_ADC_IsEnabled>:
	 *         (not only core clock: this ADC has a dual clock domain)
	 * @rmtoll CR       ADEN           LL_ADC_IsEnabled
	 * @param  ADCx ADC instance
	 * @retval 0: ADC is disabled, 1: ADC is enabled.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx) {
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <LL_ADC_IsEnabled+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <LL_ADC_IsEnabled+0x1a>
 800408c:	2300      	movs	r3, #0
	}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_ADC_IsDisableOngoing>:
	 * @brief  Get the selected ADC instance disable state.
	 * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no ADC disable command on going.
	 */
	__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx) {
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d101      	bne.n	80040b2 <LL_ADC_IsDisableOngoing+0x18>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <LL_ADC_IsDisableOngoing+0x1a>
 80040b2:	2300      	movs	r3, #0
	}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_ADC_REG_StartConversion>:
	 *         without ADC disable command on going.
	 * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
	 * @param  ADCx ADC instance
	 * @retval None
	 */
	__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx) {
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
		/* Note: Write register with some additional bits forced to state reset     */
		/*       instead of modifying only the selected bit for this function,      */
		/*       to not interfere with bits with HW property "rs".                  */
		MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <LL_ADC_REG_StartConversion+0x24>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	f043 0204 	orr.w	r2, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]
	}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	7fffffc0 	.word	0x7fffffc0

080040e8 <LL_ADC_REG_IsConversionOngoing>:
	 * @brief  Get ADC group regular conversion state.
	 * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no conversion is on going on ADC group regular.
	 */
	__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx) {
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ?
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0304 	and.w	r3, r3, #4
				1UL : 0UL);
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d101      	bne.n	8004100 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004100:	2300      	movs	r3, #0
	}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_INJ_IsConversionOngoing>:
	 * @brief  Get ADC group injected conversion state.
	 * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
	 * @param  ADCx ADC instance
	 * @retval 0: no conversion is on going on ADC group injected.
	 */
	__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx) {
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ?
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0308 	and.w	r3, r3, #8
				1UL : 0UL);
 800411e:	2b08      	cmp	r3, #8
 8004120:	d101      	bne.n	8004126 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004126:	2300      	movs	r3, #0
	}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_ADC_Init>:
 *         case of update of a parameter of ADC_InitTypeDef on the fly,
 *         without  disabling the other ADCs.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
	uint32_t tmpCFGR;
	uint32_t tmp_adc_reg_is_conversion_on_going;
	__IO uint32_t wait_loop_index = 0UL;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]
	uint32_t tmp_adc_is_conversion_on_going_regular;
	uint32_t tmp_adc_is_conversion_on_going_injected;

	/* Check ADC handle */
	if (hadc == NULL) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_ADC_Init+0x1a>
		return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e18f      	b.n	800446e <HAL_ADC_Init+0x33a>
	assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
	assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
	assert_param(
			!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

	/* Actions performed only if ADC is coming from state reset:                */
	/* - Initialization of ADC MSP                                              */
	if (hadc->State == HAL_ADC_STATE_RESET) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7fe fe69 	bl	8002e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

		/* Set ADC error code to none */
		ADC_CLEAR_ERRORCODE(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	659a      	str	r2, [r3, #88]	; 0x58

		/* Initialize Lock */
		hadc->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

	/* - Exit from deep-power-down mode and ADC voltage regulator enable        */
	if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff19 	bl	8003fac <LL_ADC_IsDeepPowerDownEnabled>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <HAL_ADC_Init+0x56>
		/* Disable ADC deep power down mode */
		LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff feff 	bl	8003f88 <LL_ADC_DisableDeepPowerDown>
		/* System was in deep power down mode, calibration must
		 be relaunched or a previously saved calibration factor
		 re-applied once the ADC voltage regulator is enabled */
	}

	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff34 	bl	8003ffc <LL_ADC_IsInternalRegulatorEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d114      	bne.n	80041c4 <HAL_ADC_Init+0x90>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(hadc->Instance);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff18 	bl	8003fd4 <LL_ADC_EnableInternalRegulator>

		/* Note: Variable divided by 2 to compensate partially              */
		/*       CPU processing cycles, scaling in us split to not          */
		/*       exceed 32 bits register capacity and handle low frequency. */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
				* ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041a4:	4b87      	ldr	r3, [pc, #540]	; (80043c4 <HAL_ADC_Init+0x290>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	4a87      	ldr	r2, [pc, #540]	; (80043c8 <HAL_ADC_Init+0x294>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	3301      	adds	r3, #1
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 80041b4:	60bb      	str	r3, [r7, #8]
		while (wait_loop_index != 0UL) {
 80041b6:	e002      	b.n	80041be <HAL_ADC_Init+0x8a>
			wait_loop_index--;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
		while (wait_loop_index != 0UL) {
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f9      	bne.n	80041b8 <HAL_ADC_Init+0x84>
	}

	/* Verification that ADC voltage regulator is correctly enabled, whether    */
	/* or not ADC is coming from state reset (if any potential problem of       */
	/* clocking, voltage regulator would not be enabled).                       */
	if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff17 	bl	8003ffc <LL_ADC_IsInternalRegulatorEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10d      	bne.n	80041f0 <HAL_ADC_Init+0xbc>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0210 	orr.w	r2, r3, #16
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

		/* Set ADC error code to ADC peripheral internal error */
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	659a      	str	r2, [r3, #88]	; 0x58

		tmp_hal_status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed and if there is no conversion on going on regular    */
	/* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
	/* called to update a parameter on the fly).                                */
	tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff77 	bl	80040e8 <LL_ADC_REG_IsConversionOngoing>
 80041fa:	6178      	str	r0, [r7, #20]
			hadc->Instance);

	if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 8129 	bne.w	800445c <HAL_ADC_Init+0x328>
			&& (tmp_adc_reg_is_conversion_on_going == 0UL)) {
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8125 	bne.w	800445c <HAL_ADC_Init+0x328>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800421a:	f043 0202 	orr.w	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
		/* Configuration of common ADC parameters                                 */

		/* Parameters update conditioned to ADC state:                            */
		/* Parameters that can be updated only when ADC is disabled:              */
		/*  - clock configuration                                                 */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff24 	bl	8004074 <LL_ADC_IsEnabled>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d136      	bne.n	80042a0 <HAL_ADC_Init+0x16c>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
 8004236:	4a65      	ldr	r2, [pc, #404]	; (80043cc <HAL_ADC_Init+0x298>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_ADC_Init+0x112>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <HAL_ADC_Init+0x29c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10e      	bne.n	8004264 <HAL_ADC_Init+0x130>
 8004246:	4861      	ldr	r0, [pc, #388]	; (80043cc <HAL_ADC_Init+0x298>)
 8004248:	f7ff ff14 	bl	8004074 <LL_ADC_IsEnabled>
 800424c:	4604      	mov	r4, r0
 800424e:	4860      	ldr	r0, [pc, #384]	; (80043d0 <HAL_ADC_Init+0x29c>)
 8004250:	f7ff ff10 	bl	8004074 <LL_ADC_IsEnabled>
 8004254:	4603      	mov	r3, r0
 8004256:	4323      	orrs	r3, r4
					== 0UL) {
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e008      	b.n	8004276 <HAL_ADC_Init+0x142>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004264:	485b      	ldr	r0, [pc, #364]	; (80043d4 <HAL_ADC_Init+0x2a0>)
 8004266:	f7ff ff05 	bl	8004074 <LL_ADC_IsEnabled>
 800426a:	4603      	mov	r3, r0
					== 0UL) {
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004276:	2b00      	cmp	r3, #0
 8004278:	d012      	beq.n	80042a0 <HAL_ADC_Init+0x16c>
				/*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
				/*     HAL_ADCEx_MultiModeConfigChannel() )                             */
				/*   - internal measurement paths: Vbat, temperature sensor, Vref       */
				/*     (set into HAL_ADC_ConfigChannel() or                             */
				/*     HAL_ADCEx_InjectedConfigChannel() )                              */
				LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a53      	ldr	r2, [pc, #332]	; (80043cc <HAL_ADC_Init+0x298>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_ADC_Init+0x15a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a51      	ldr	r2, [pc, #324]	; (80043d0 <HAL_ADC_Init+0x29c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0x15e>
 800428e:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_ADC_Init+0x2a4>)
 8004290:	e000      	b.n	8004294 <HAL_ADC_Init+0x160>
 8004292:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_ADC_Init+0x2a8>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7ff fd3c 	bl	8003d18 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

		if ((HAL_GetREVID() > REV_ID_Y)
 80042a0:	f7ff fd18 	bl	8003cd4 <HAL_GetREVID>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d914      	bls.n	80042d8 <HAL_ADC_Init+0x1a4>
				&& (ADC_RESOLUTION_8B == hadc->Init.Resolution)) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d110      	bne.n	80042d8 <HAL_ADC_Init+0x1a4>
			/* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
			tmpCFGR =
					(ADC_CFGR_CONTINUOUS(
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7d5b      	ldrb	r3, [r3, #21]
 80042ba:	035a      	lsls	r2, r3, #13
							(uint32_t )hadc->Init.ContinuousConvMode)
							| hadc->Init.Overrun | hadc->Init.Resolution
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	431a      	orrs	r2, r3
							| (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)
							| ADC_CFGR_REG_DISCONTINUOUS(
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7f1b      	ldrb	r3, [r3, #28]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	4313      	orrs	r3, r2
			tmpCFGR =
 80042d0:	f043 030c 	orr.w	r3, r3, #12
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e00d      	b.n	80042f4 <HAL_ADC_Init+0x1c0>
									(uint32_t )hadc->Init.DiscontinuousConvMode));
		} else {

			tmpCFGR =
					(ADC_CFGR_CONTINUOUS(
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7d5b      	ldrb	r3, [r3, #21]
 80042dc:	035a      	lsls	r2, r3, #13
							(uint32_t )hadc->Init.ContinuousConvMode)
							| hadc->Init.Overrun | hadc->Init.Resolution
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	431a      	orrs	r2, r3
							| ADC_CFGR_REG_DISCONTINUOUS(
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7f1b      	ldrb	r3, [r3, #28]
 80042ee:	041b      	lsls	r3, r3, #16
			tmpCFGR =
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
									(uint32_t )hadc->Init.DiscontinuousConvMode));
		}

#endif /* ADC_VER_V5_3 */

		if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7f1b      	ldrb	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_ADC_Init+0x1d6>
			tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	3b01      	subs	r3, #1
 8004302:	045b      	lsls	r3, r3, #17
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
		/* Enable external trigger if trigger selection is different of software  */
		/* start.                                                                 */
		/* Note: This configuration keeps the hardware feature of parameter       */
		/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
		/*       software start.                                                  */
		if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_ADC_Init+0x1f2>
			tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
					| hadc->Init.ExternalTrigConvEdge);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	4313      	orrs	r3, r2
			tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
		/* Update Configuration Register CFGR */
		MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_ADC_Init+0x2ac>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	430b      	orrs	r3, r1
 8004338:	60d3      	str	r3, [r2, #12]
		/* Parameters that can be updated when ADC is disabled or enabled without */
		/* conversion on going on regular and injected groups:                    */
		/*  - Conversion data management      Init.ConversionDataManagement       */
		/*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
		/*  - Oversampling parameters         Init.Oversampling                   */
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fed2 	bl	80040e8 <LL_ADC_REG_IsConversionOngoing>
 8004344:	6138      	str	r0, [r7, #16]
				hadc->Instance);
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fedf 	bl	800410e <LL_ADC_INJ_IsConversionOngoing>
 8004350:	60f8      	str	r0, [r7, #12]
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d15f      	bne.n	8004418 <HAL_ADC_Init+0x2e4>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d15c      	bne.n	8004418 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
			tmpCFGR = (
			ADC_CFGR_AUTOWAIT((uint32_t )hadc->Init.LowPowerAutoWait)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7d1b      	ldrb	r3, [r3, #20]
 8004362:	039a      	lsls	r2, r3, #14
					| ADC_CFGR_DMACONTREQ(
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			tmpCFGR = (
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
							(uint32_t )hadc->Init.ConversionDataManagement));
#endif

			MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <HAL_ADC_Init+0x2b0>)
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	430b      	orrs	r3, r1
 800437e:	60d3      	str	r3, [r2, #12]

			if (hadc->Init.OversamplingMode == ENABLE) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004386:	2b01      	cmp	r3, #1
 8004388:	d130      	bne.n	80043ec <HAL_ADC_Init+0x2b8>
				assert_param(
						IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
				assert_param(
						IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

				if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
				/*  - Oversampling Ratio                                               */
				/*  - Right bit shift                                                  */
				/*  - Left bit shift                                                   */
				/*  - Triggered mode                                                   */
				/*  - Oversampling mode (continued/resumed)                            */
				MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_ADC_Init+0x2b4>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800439e:	3a01      	subs	r2, #1
 80043a0:	0411      	lsls	r1, r2, #16
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043ac:	4311      	orrs	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043b2:	430a      	orrs	r2, r1
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	e01c      	b.n	80043fc <HAL_ADC_Init+0x2c8>
 80043c2:	bf00      	nop
 80043c4:	24000090 	.word	0x24000090
 80043c8:	053e2d63 	.word	0x053e2d63
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40022100 	.word	0x40022100
 80043d4:	58026000 	.word	0x58026000
 80043d8:	40022300 	.word	0x40022300
 80043dc:	58026300 	.word	0x58026300
 80043e0:	fff0c003 	.word	0xfff0c003
 80043e4:	ffffbffc 	.word	0xffffbffc
 80043e8:	fc00f81e 	.word	0xfc00f81e
						ADC_CFGR2_ROVSE | ((hadc->Init.Oversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) | hadc->Init.Oversampling.RightBitShift | hadc->Init.Oversampling.TriggeredMode | hadc->Init.Oversampling.OversamplingStopReset);
#endif

			} else {
				/* Disable ADC oversampling scope on ADC group regular */
				CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	611a      	str	r2, [r3, #16]
			}

			/* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
			MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
			/* Configure the BOOST Mode */
			ADC_ConfigureBoostMode(hadc);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fdec 	bl	8004ff0 <ADC_ConfigureBoostMode>
		/*   Note: Scan mode is not present by hardware on this device, but       */
		/*   emulated by software for alignment over all STM32 devices.           */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion".                                         */

		if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10c      	bne.n	800443a <HAL_ADC_Init+0x306>
			/* Set number of ranks in regular group sequencer */
			MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f023 010f 	bic.w	r1, r3, #15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
 8004438:	e007      	b.n	800444a <HAL_ADC_Init+0x316>
					(hadc->Init.NbrOfConversion - (uint8_t )1));
		} else {
			CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 020f 	bic.w	r2, r2, #15
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/* Initialize the ADC state */
		/* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
		ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
 800445a:	e007      	b.n	800446c <HAL_ADC_Init+0x338>
	} else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f043 0210 	orr.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77fb      	strb	r3, [r7, #31]
	}

	/* Return function status */
	return tmp_hal_status;
 800446c:	7ffb      	ldrb	r3, [r7, #31]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd90      	pop	{r4, r7, pc}
 8004476:	bf00      	nop

08004478 <HAL_ADC_Start_DMA>:
 * @param pData Destination Buffer address.
 * @param Length Number of data to be transferred from ADC peripheral to memory
 * @retval HAL status.
 */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData,
		uint32_t Length) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status;
	uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
			__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
	uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
 8004488:	4a55      	ldr	r2, [pc, #340]	; (80045e0 <HAL_ADC_Start_DMA+0x168>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_ADC_Start_DMA+0x20>
			__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a54      	ldr	r2, [pc, #336]	; (80045e4 <HAL_ADC_Start_DMA+0x16c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_ADC_Start_DMA+0x24>
	uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
 8004498:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_ADC_Start_DMA+0x170>)
 800449a:	e000      	b.n	800449e <HAL_ADC_Start_DMA+0x26>
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_ADC_Start_DMA+0x174>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fd64 	bl	8003f6c <LL_ADC_GetMultimode>
 80044a4:	6138      	str	r0, [r7, #16]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Perform ADC enable and conversion start if no conversion is on going */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fe1c 	bl	80040e8 <LL_ADC_REG_IsConversionOngoing>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 808c 	bne.w	80045d0 <HAL_ADC_Start_DMA+0x158>
		/* Process locked */
		__HAL_LOCK(hadc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_Start_DMA+0x4e>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e087      	b.n	80045d6 <HAL_ADC_Start_DMA+0x15e>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		/* Ensure that multimode regular conversions are not enabled.   */
		/* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
		if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_ADC_Start_DMA+0x68>
				|| (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d002      	beq.n	80044e0 <HAL_ADC_Start_DMA+0x68>
				|| (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)) {
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b09      	cmp	r3, #9
 80044de:	d170      	bne.n	80045c2 <HAL_ADC_Start_DMA+0x14a>
			/* Enable the ADC peripheral */
			tmp_hal_status = ADC_Enable(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fc07 	bl	8004cf4 <ADC_Enable>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]

			/* Start conversion if ADC is effectively enabled */
			if (tmp_hal_status == HAL_OK) {
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d163      	bne.n	80045b8 <HAL_ADC_Start_DMA+0x140>
				/* Set ADC state                                                        */
				/* - Clear state bitfield related to regular group conversion results   */
				/* - Set state bitfield related to regular operation                    */
				ADC_STATE_CLR_SET(hadc->State,
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f4:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <HAL_ADC_Start_DMA+0x178>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
						HAL_ADC_STATE_REG_BUSY);

				/* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
				 - if ADC instance is master or if multimode feature is not available
				 - if multimode setting is disabled (ADC instance slave in independent mode) */
				if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <HAL_ADC_Start_DMA+0x16c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d002      	beq.n	8004510 <HAL_ADC_Start_DMA+0x98>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	e000      	b.n	8004512 <HAL_ADC_Start_DMA+0x9a>
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_ADC_Start_DMA+0x168>)
						== hadc->Instance)
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6812      	ldr	r2, [r2, #0]
				if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance)
 8004516:	4293      	cmp	r3, r2
 8004518:	d002      	beq.n	8004520 <HAL_ADC_Start_DMA+0xa8>
						|| (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)) {
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_ADC_Start_DMA+0xb4>
					CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
				}

				/* Check if a conversion is on going on ADC group injected */
				if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL) {
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <HAL_ADC_Start_DMA+0xce>
					/* Reset ADC error code fields related to regular conversions only */
					CLEAR_BIT(hadc->ErrorCode,
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f023 0206 	bic.w	r2, r3, #6
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
 8004544:	e002      	b.n	800454c <HAL_ADC_Start_DMA+0xd4>
							(HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
				} else {
					/* Reset all ADC error code fields */
					ADC_CLEAR_ERRORCODE(hadc);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	659a      	str	r2, [r3, #88]	; 0x58
				}

				/* Set the DMA transfer complete callback */
				hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_ADC_Start_DMA+0x17c>)
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c

				/* Set the DMA half transfer complete callback */
				hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_ADC_Start_DMA+0x180>)
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

				/* Set the DMA error callback */
				hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <HAL_ADC_Start_DMA+0x184>)
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
				/* ADC start (in case of SW start):                                   */

				/* Clear regular group conversion flag and overrun flag               */
				/* (To ensure of no unknown state from potential previous ADC         */
				/* operations)                                                        */
				__HAL_ADC_CLEAR_FLAG(hadc,
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	221c      	movs	r2, #28
 800456a:	601a      	str	r2, [r3, #0]
						(ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));

				/* Process unlocked */
				/* Unlock before starting ADC conversions: in case of potential         */
				/* interruption, to let the process to ADC IRQ Handler.                 */
				__HAL_UNLOCK(hadc);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				/* With DMA, overrun event is always considered as an error even if
				 hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
				 ADC_IT_OVR is enabled. */
				__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0210 	orr.w	r2, r2, #16
 8004582:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
				LL_ADC_REG_SetDataTransferMode(hadc->Instance,
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681a      	ldr	r2, [r3, #0]
						(uint32_t) hadc->Init.ConversionDataManagement);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				LL_ADC_REG_SetDataTransferMode(hadc->Instance,
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7ff fc89 	bl	8003ea6 <LL_ADC_REG_SetDataTransferMode>
#endif

				/* Start the DMA channel */
				tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
						(uint32_t) &hadc->Instance->DR, (uint32_t) pData,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3340      	adds	r3, #64	; 0x40
				tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle,
 800459e:	4619      	mov	r1, r3
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f002 f80e 	bl	80065c4 <HAL_DMA_Start_IT>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]
				/* Enable conversion of regular group.                                  */
				/* If software start has been selected, conversion starts immediately.  */
				/* If external trigger has been selected, conversion will start at next */
				/* trigger event.                                                       */
				/* Start ADC group regular conversion */
				LL_ADC_REG_StartConversion(hadc->Instance);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fd85 	bl	80040c0 <LL_ADC_REG_StartConversion>
			if (tmp_hal_status == HAL_OK) {
 80045b6:	e00d      	b.n	80045d4 <HAL_ADC_Start_DMA+0x15c>
			} else {
				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (tmp_hal_status == HAL_OK) {
 80045c0:	e008      	b.n	80045d4 <HAL_ADC_Start_DMA+0x15c>
			}

		} else {
			tmp_hal_status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
			/* Process unlocked */
			__HAL_UNLOCK(hadc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80045ce:	e001      	b.n	80045d4 <HAL_ADC_Start_DMA+0x15c>
		}
	} else {
		tmp_hal_status = HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	75fb      	strb	r3, [r7, #23]
	}

	/* Return function status */
	return tmp_hal_status;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40022100 	.word	0x40022100
 80045e8:	40022300 	.word	0x40022300
 80045ec:	58026300 	.word	0x58026300
 80045f0:	fffff0fe 	.word	0xfffff0fe
 80045f4:	08004ec7 	.word	0x08004ec7
 80045f8:	08004f9f 	.word	0x08004f9f
 80045fc:	08004fbb 	.word	0x08004fbb

08004600 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvCpltCallback must be implemented in the user file.
	 */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADC_ConvHalfCpltCallback>:
/**
 * @brief  Conversion DMA half-transfer callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
	 */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ADC_ErrorCallback>:
 *           "HAL_ADC_Start_DMA()"
 *           (this function is also clearing overrun flag)
 * @param hadc ADC handle
 * @retval None
 */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ErrorCallback must be implemented in the user file.
	 */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param sConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_ChannelConfTypeDef *sConfig) {
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b0a1      	sub	sp, #132	; 0x84
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t tmpOffsetShifted;
	uint32_t tmp_config_internal_channel;
	__IO uint32_t wait_loop_index = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
	 ignored (considered as reset) */
	assert_param(
			!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

	/* Verification of channel number */
	if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED) {
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a65      	ldr	r2, [pc, #404]	; (80047ec <HAL_ADC_ConfigChannel+0x1b0>)
 8004656:	4293      	cmp	r3, r2
		}
#endif
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x2a>
 8004662:	2302      	movs	r3, #2
 8004664:	e32e      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x688>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Channel number                                                        */
	/*  - Channel rank                                                          */
	if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd38 	bl	80040e8 <LL_ADC_REG_IsConversionOngoing>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 8313 	bne.w	8004ca6 <HAL_ADC_ConfigChannel+0x66a>
		if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))) {
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	db2c      	blt.n	80046e2 <HAL_ADC_ConfigChannel+0xa6>
      }
#else
			/* ADC channels preselection */
			hadc->Instance->PCSEL |=
					(1UL
							<< (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004690:	2b00      	cmp	r3, #0
 8004692:	d108      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x6a>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0e9b      	lsrs	r3, r3, #26
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	e016      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x98>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80046be:	2320      	movs	r3, #32
 80046c0:	e003      	b.n	80046ca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80046c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
									(uint32_t )sConfig->Channel)
									& 0x1FUL));
 80046ca:	f003 031f 	and.w	r3, r3, #31
							<< (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 80046ce:	2201      	movs	r2, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
			hadc->Instance->PCSEL |=
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	69d1      	ldr	r1, [r2, #28]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	430b      	orrs	r3, r1
 80046e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
		}

		/* Set ADC group regular sequence: channel on the selected scan sequence rank */
		LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f7ff fbad 	bl	8003e4e <LL_ADC_REG_SetSequencerRanks>
		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated when ADC is disabled or enabled without   */
		/* conversion on going on regular group:                                    */
		/*  - Channel sampling time                                                 */
		/*  - Channel offset                                                        */
		tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fcf5 	bl	80040e8 <LL_ADC_REG_IsConversionOngoing>
 80046fe:	67b8      	str	r0, [r7, #120]	; 0x78
				hadc->Instance);
		tmp_adc_is_conversion_on_going_injected =
				LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fd02 	bl	800410e <LL_ADC_INJ_IsConversionOngoing>
 800470a:	6778      	str	r0, [r7, #116]	; 0x74
		if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800470c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 80b8 	bne.w	8004884 <HAL_ADC_ConfigChannel+0x248>
				&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8004714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 80b4 	bne.w	8004884 <HAL_ADC_ConfigChannel+0x248>
			/* Set sampling time of the selected ADC channel */
			LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	461a      	mov	r2, r3
 800472a:	f7ff fbcf 	bl	8003ecc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
			{
				tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc,
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473a:	d10b      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x118>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	e01d      	b.n	8004790 <HAL_ADC_ConfigChannel+0x154>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <HAL_ADC_ConfigChannel+0x13e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	e00a      	b.n	8004790 <HAL_ADC_ConfigChannel+0x154>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	673b      	str	r3, [r7, #112]	; 0x70
						(uint32_t )sConfig->Offset);
			}

			if (sConfig->OffsetNumber != ADC_OFFSET_NONE) {
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d02c      	beq.n	80047f4 <HAL_ADC_ConfigChannel+0x1b8>
				/* Set ADC selected offset number */
				LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6919      	ldr	r1, [r3, #16]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a8:	f7ff faea 	bl	8003d80 <LL_ADC_SetOffset>
#endif /* ADC_VER_V5_V90 */
				{
					assert_param(
							IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
					/* Set ADC selected offset signed saturation */
					LL_ADC_SetOffsetSignedSaturation(hadc->Instance,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6919      	ldr	r1, [r3, #16]
							sConfig->OffsetNumber,
							(sConfig->OffsetSignedSaturation == ENABLE) ?
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	7e5b      	ldrb	r3, [r3, #25]
					LL_ADC_SetOffsetSignedSaturation(hadc->Instance,
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x186>
 80047bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047c0:	e000      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x188>
 80047c2:	2300      	movs	r3, #0
 80047c4:	461a      	mov	r2, r3
 80047c6:	f7ff fb14 	bl	8003df2 <LL_ADC_SetOffsetSignedSaturation>
									LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);

					assert_param(
							IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
					/* Set ADC selected offset right shift */
					LL_ADC_SetDataRightShift(hadc->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6919      	ldr	r1, [r3, #16]
							sConfig->OffsetNumber,
							(sConfig->OffsetRightShift == ENABLE) ?
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	7e1b      	ldrb	r3, [r3, #24]
					LL_ADC_SetDataRightShift(hadc->Instance,
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1a4>
 80047da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047de:	e000      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x1a6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	461a      	mov	r2, r3
 80047e4:	f7ff faec 	bl	8003dc0 <LL_ADC_SetDataRightShift>
 80047e8:	e04c      	b.n	8004884 <HAL_ADC_ConfigChannel+0x248>
 80047ea:	bf00      	nop
 80047ec:	47ff0000 	.word	0x47ff0000
 80047f0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
				{
					if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
							== ADC_OFR_CHANNEL(sConfig->Channel)) {
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	069b      	lsls	r3, r3, #26
					if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH)
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x1dc>
						CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
					}
					if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
							== ADC_OFR_CHANNEL(sConfig->Channel)) {
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	069b      	lsls	r3, r3, #26
					if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH)
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_ADC_ConfigChannel+0x200>
						CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800483a:	665a      	str	r2, [r3, #100]	; 0x64
					}
					if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
							== ADC_OFR_CHANNEL(sConfig->Channel)) {
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	069b      	lsls	r3, r3, #26
					if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH)
 800484c:	429a      	cmp	r2, r3
 800484e:	d107      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x224>
						CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800485e:	669a      	str	r2, [r3, #104]	; 0x68
					}
					if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
							== ADC_OFR_CHANNEL(sConfig->Channel)) {
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	069b      	lsls	r3, r3, #26
					if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH)
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x248>
						CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c

		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated only when ADC is disabled:                */
		/*  - Single or differential mode                                           */
		/*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
		if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fbf3 	bl	8004074 <LL_ADC_IsEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8211 	bne.w	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
			/* Set mode single-ended or differential input of the selected ADC channel */
			LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7ff fb3e 	bl	8003f24 <LL_ADC_SetChannelSingleDiff>
					sConfig->SingleDiff);

			/* Configuration of differential mode */
			if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED) {
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4aa1      	ldr	r2, [pc, #644]	; (8004b34 <HAL_ADC_ConfigChannel+0x4f8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f040 812e 	bne.w	8004b10 <HAL_ADC_ConfigChannel+0x4d4>
				/* Set sampling time of the selected ADC channel */
				/* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x2a0>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	3301      	adds	r3, #1
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2b09      	cmp	r3, #9
 80048d2:	bf94      	ite	ls
 80048d4:	2301      	movls	r3, #1
 80048d6:	2300      	movhi	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e019      	b.n	8004910 <HAL_ADC_ConfigChannel+0x2d4>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e003      	b.n	8004900 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2b09      	cmp	r3, #9
 8004908:	bf94      	ite	ls
 800490a:	2301      	movls	r3, #1
 800490c:	2300      	movhi	r3, #0
 800490e:	b2db      	uxtb	r3, r3
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004910:	2b00      	cmp	r3, #0
 8004912:	d079      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x3cc>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x2f4>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	3301      	adds	r3, #1
 8004928:	069b      	lsls	r3, r3, #26
 800492a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800492e:	e015      	b.n	800495c <HAL_ADC_ConfigChannel+0x320>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004940:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004948:	2320      	movs	r3, #32
 800494a:	e003      	b.n	8004954 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800494c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3301      	adds	r3, #1
 8004956:	069b      	lsls	r3, r3, #26
 8004958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <HAL_ADC_ConfigChannel+0x340>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0e9b      	lsrs	r3, r3, #26
 800496e:	3301      	adds	r3, #1
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	e017      	b.n	80049ac <HAL_ADC_ConfigChannel+0x370>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800498e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e003      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2101      	movs	r1, #1
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	ea42 0103 	orr.w	r1, r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x396>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	0e9b      	lsrs	r3, r3, #26
 80049c2:	3301      	adds	r3, #1
 80049c4:	f003 021f 	and.w	r2, r3, #31
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	051b      	lsls	r3, r3, #20
 80049d0:	e018      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x3c8>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e003      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	3301      	adds	r3, #1
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	051b      	lsls	r3, r3, #20
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a04:	430b      	orrs	r3, r1
 8004a06:	e07e      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x4ca>
						(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x3e8>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	069b      	lsls	r3, r3, #26
 8004a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a22:	e015      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x414>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	e003      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	069b      	lsls	r3, r3, #26
 8004a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x434>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	3301      	adds	r3, #1
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	e017      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x464>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x490>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0e9b      	lsrs	r3, r3, #26
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3b1e      	subs	r3, #30
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aca:	e01b      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x4c8>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	60fb      	str	r3, [r7, #12]
  return result;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	e003      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f003 021f 	and.w	r2, r3, #31
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	3b1e      	subs	r3, #30
 8004afe:	051b      	lsls	r3, r3, #20
 8004b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
				LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b04:	430b      	orrs	r3, r1
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	6892      	ldr	r2, [r2, #8]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f7ff f9de 	bl	8003ecc <LL_ADC_SetChannelSamplingTime>
			/* If internal channel selected, enable dedicated internal buffers and    */
			/* paths.                                                                 */
			/* Note: these internal measurement paths can be disabled using           */
			/* HAL_ADC_DeInit().                                                      */

			if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)) {
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f280 80cf 	bge.w	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
				/* Configuration of common ADC parameters                                 */

				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
						__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8004b1e:	4a06      	ldr	r2, [pc, #24]	; (8004b38 <HAL_ADC_ConfigChannel+0x4fc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_ADC_ConfigChannel+0x4f2>
						__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <HAL_ADC_ConfigChannel+0x500>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d10a      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x508>
				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_ADC_ConfigChannel+0x504>)
 8004b30:	e009      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x50a>
 8004b32:	bf00      	nop
 8004b34:	47ff0000 	.word	0x47ff0000
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40022100 	.word	0x40022100
 8004b40:	40022300 	.word	0x40022300
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_ADC_ConfigChannel+0x690>)
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f90c 	bl	8003d64 <LL_ADC_GetCommonPathInternalCh>
 8004b4c:	66f8      	str	r0, [r7, #108]	; 0x6c

				/* Software is allowed to change common parameters only when all ADCs   */
				/* of the common group are disabled.                                    */
				if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
						__LL_ADC_COMMON_INSTANCE(hadc->Instance))
						== 0UL) {
 8004b52:	4a5f      	ldr	r2, [pc, #380]	; (8004cd0 <HAL_ADC_ConfigChannel+0x694>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_ADC_ConfigChannel+0x526>
				if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5d      	ldr	r2, [pc, #372]	; (8004cd4 <HAL_ADC_ConfigChannel+0x698>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10e      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x544>
 8004b62:	485b      	ldr	r0, [pc, #364]	; (8004cd0 <HAL_ADC_ConfigChannel+0x694>)
 8004b64:	f7ff fa86 	bl	8004074 <LL_ADC_IsEnabled>
 8004b68:	4604      	mov	r4, r0
 8004b6a:	485a      	ldr	r0, [pc, #360]	; (8004cd4 <HAL_ADC_ConfigChannel+0x698>)
 8004b6c:	f7ff fa82 	bl	8004074 <LL_ADC_IsEnabled>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4323      	orrs	r3, r4
						== 0UL) {
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e008      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x556>
				if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004b80:	4855      	ldr	r0, [pc, #340]	; (8004cd8 <HAL_ADC_ConfigChannel+0x69c>)
 8004b82:	f7ff fa77 	bl	8004074 <LL_ADC_IsEnabled>
 8004b86:	4603      	mov	r3, r0
						== 0UL) {
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
				if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d07d      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0x656>
					/* If the requested internal measurement path has already been enabled, */
					/* bypass the configuration processing.                                 */
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <HAL_ADC_ConfigChannel+0x6a0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d130      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x5c6>
							&& ((tmp_config_internal_channel
									& LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL)) {
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
							&& ((tmp_config_internal_channel
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d12b      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x5c6>
						if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4a      	ldr	r2, [pc, #296]	; (8004cd8 <HAL_ADC_ConfigChannel+0x69c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f040 8081 	bne.w	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
							LL_ADC_SetCommonPathInternalCh(
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
							LL_ADC_SetCommonPathInternalCh(
 8004bba:	4a45      	ldr	r2, [pc, #276]	; (8004cd0 <HAL_ADC_ConfigChannel+0x694>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_ADC_ConfigChannel+0x58e>
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a43      	ldr	r2, [pc, #268]	; (8004cd4 <HAL_ADC_ConfigChannel+0x698>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x592>
							LL_ADC_SetCommonPathInternalCh(
 8004bca:	4a45      	ldr	r2, [pc, #276]	; (8004ce0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004bcc:	e000      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x594>
 8004bce:	4a3f      	ldr	r2, [pc, #252]	; (8004ccc <HAL_ADC_ConfigChannel+0x690>)
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7ff f8b0 	bl	8003d3e <LL_ADC_SetCommonPathInternalCh>
							/* Note: Variable divided by 2 to compensate partially              */
							/*       CPU processing cycles, scaling in us split to not          */
							/*       exceed 32 bits register capacity and handle low frequency. */
							wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US
									/ 10UL)
									* ((SystemCoreClock / (100000UL * 2UL))
 8004bde:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <HAL_ADC_ConfigChannel+0x6a8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <HAL_ADC_ConfigChannel+0x6ac>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	099b      	lsrs	r3, r3, #6
											+ 1UL));
 8004bec:	3301      	adds	r3, #1
									* ((SystemCoreClock / (100000UL * 2UL))
 8004bee:	005b      	lsls	r3, r3, #1
							wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US
 8004bf0:	60bb      	str	r3, [r7, #8]
							while (wait_loop_index != 0UL) {
 8004bf2:	e002      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x5be>
								wait_loop_index--;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
							while (wait_loop_index != 0UL) {
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f9      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x5b8>
						if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 8004c00:	e05a      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
							}
						}
					} else if ((sConfig->Channel == ADC_CHANNEL_VBAT)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a39      	ldr	r2, [pc, #228]	; (8004cec <HAL_ADC_ConfigChannel+0x6b0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d11e      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x60e>
							&& ((tmp_config_internal_channel
									& LL_ADC_PATH_INTERNAL_VBAT) == 0UL)) {
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
							&& ((tmp_config_internal_channel
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d119      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x60e>
						if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <HAL_ADC_ConfigChannel+0x69c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d14b      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
							LL_ADC_SetCommonPathInternalCh(
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
							LL_ADC_SetCommonPathInternalCh(
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <HAL_ADC_ConfigChannel+0x694>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_ADC_ConfigChannel+0x5f8>
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <HAL_ADC_ConfigChannel+0x698>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x5fc>
							LL_ADC_SetCommonPathInternalCh(
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c36:	e000      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x5fe>
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <HAL_ADC_ConfigChannel+0x690>)
 8004c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7ff f87b 	bl	8003d3e <LL_ADC_SetCommonPathInternalCh>
						if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 8004c48:	e036      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
									LL_ADC_PATH_INTERNAL_VBAT
											| tmp_config_internal_channel);
						}
					} else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d131      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
							&& ((tmp_config_internal_channel
									& LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
							&& ((tmp_config_internal_channel
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d12c      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
						if (ADC_VREFINT_INSTANCE(hadc)) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_ADC_ConfigChannel+0x69c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d127      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
							LL_ADC_SetCommonPathInternalCh(
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
							LL_ADC_SetCommonPathInternalCh(
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_ADC_ConfigChannel+0x694>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_ADC_ConfigChannel+0x640>
									__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <HAL_ADC_ConfigChannel+0x698>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x644>
							LL_ADC_SetCommonPathInternalCh(
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c7e:	e000      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x646>
 8004c80:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <HAL_ADC_ConfigChannel+0x690>)
 8004c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7ff f857 	bl	8003d3e <LL_ADC_SetCommonPathInternalCh>
 8004c90:	e012      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
				/* If the requested internal measurement path has already been          */
				/* enabled and other ADC of the common group are enabled, internal      */
				/* measurement paths cannot be enabled.                                 */
				else {
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54

					tmp_hal_status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ca4:	e008      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x67c>
	/* If a conversion is on going on regular group, no update on regular       */
	/* channel could be done on neither of the channel configuration structure  */
	/* parameters.                                                              */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 8004cc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3784      	adds	r7, #132	; 0x84
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}
 8004ccc:	58026300 	.word	0x58026300
 8004cd0:	40022000 	.word	0x40022000
 8004cd4:	40022100 	.word	0x40022100
 8004cd8:	58026000 	.word	0x58026000
 8004cdc:	cb840000 	.word	0xcb840000
 8004ce0:	40022300 	.word	0x40022300
 8004ce4:	24000090 	.word	0x24000090
 8004ce8:	053e2d63 	.word	0x053e2d63
 8004cec:	c7520000 	.word	0xc7520000
 8004cf0:	cfb80000 	.word	0xcfb80000

08004cf4 <ADC_Enable>:
 * @note   Prerequisite condition to use this function: ADC must be disabled
 *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

	/* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
	/* enabling phase not yet completed: flag ADC ready not yet set).           */
	/* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
	/* causes: ADC clock not running, ...).                                     */
	if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff f9b7 	bl	8004074 <LL_ADC_IsEnabled>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d16e      	bne.n	8004dea <ADC_Enable+0xf6>
		/* Check if conditions to enable the ADC are fulfilled */
		if ((hadc->Instance->CR
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
				& (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <ADC_Enable+0x100>)
 8004d14:	4013      	ands	r3, r2
		if ((hadc->Instance->CR
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <ADC_Enable+0x42>
						| ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN))
				!= 0UL) {
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f043 0210 	orr.w	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54

			/* Set ADC error code to ADC peripheral internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58

			return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e05a      	b.n	8004dec <ADC_Enable+0xf8>
		}

		/* Enable the ADC peripheral */
		LL_ADC_Enable(hadc->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f972 	bl	8004024 <LL_ADC_Enable>

		/* Wait for ADC effectively enabled */
		tickstart = HAL_GetTick();
 8004d40:	f7fe ffbc 	bl	8003cbc <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

		/* Poll for ADC ready flag raised except case of multimode enabled
		 and ADC slave selected. */
		uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
				__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
		uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <ADC_Enable+0x104>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <ADC_Enable+0x66>
				__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <ADC_Enable+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <ADC_Enable+0x6a>
		uint32_t tmp_multimode_config = LL_ADC_GetMultimode(
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <ADC_Enable+0x10c>)
 8004d5c:	e000      	b.n	8004d60 <ADC_Enable+0x6c>
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <ADC_Enable+0x110>)
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff f903 	bl	8003f6c <LL_ADC_GetMultimode>
 8004d66:	60b8      	str	r0, [r7, #8]
		if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a23      	ldr	r2, [pc, #140]	; (8004dfc <ADC_Enable+0x108>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d002      	beq.n	8004d78 <ADC_Enable+0x84>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	e000      	b.n	8004d7a <ADC_Enable+0x86>
 8004d78:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <ADC_Enable+0x104>)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02c      	beq.n	8004ddc <ADC_Enable+0xe8>
				|| (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)) {
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d130      	bne.n	8004dea <ADC_Enable+0xf6>
			while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8004d88:	e028      	b.n	8004ddc <ADC_Enable+0xe8>
				 The workaround is to continue setting ADEN until ADRDY is becomes 1.
				 Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
				 4 ADC clock cycle duration */
				/* Note: Test of ADC enabled required due to hardware constraint to     */
				/*       not enable ADC if already enabled.                             */
				if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff f970 	bl	8004074 <LL_ADC_IsEnabled>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <ADC_Enable+0xb0>
					LL_ADC_Enable(hadc->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff f940 	bl	8004024 <LL_ADC_Enable>
				}

				if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT) {
 8004da4:	f7fe ff8a 	bl	8003cbc <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d914      	bls.n	8004ddc <ADC_Enable+0xe8>
					/* New check to avoid false timeout detection in case of preemption */
					if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d00d      	beq.n	8004ddc <ADC_Enable+0xe8>
						/* Update ADC state machine to error */
						SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	f043 0210 	orr.w	r2, r3, #16
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54

						/* Set ADC error code to ADC peripheral internal error */
						SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58

						return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e007      	b.n	8004dec <ADC_Enable+0xf8>
			while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d1cf      	bne.n	8004d8a <ADC_Enable+0x96>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	8000003f 	.word	0x8000003f
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40022100 	.word	0x40022100
 8004e00:	40022300 	.word	0x40022300
 8004e04:	58026300 	.word	0x58026300

08004e08 <ADC_Disable>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped.
 * @param hadc ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff f940 	bl	800409a <LL_ADC_IsDisableOngoing>
 8004e1a:	60f8      	str	r0, [r7, #12]
			hadc->Instance);

	/* Verification if ADC is not already disabled:                             */
	/* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
	/*       disabled.                                                          */
	if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff f927 	bl	8004074 <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d047      	beq.n	8004ebc <ADC_Disable+0xb4>
			&& (tmp_adc_is_disable_on_going == 0UL)) {
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d144      	bne.n	8004ebc <ADC_Disable+0xb4>
		/* Check if conditions to disable the ADC are fulfilled */
		if ((hadc->Instance->CR
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
				& (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN))
 8004e38:	f003 030d 	and.w	r3, r3, #13
		if ((hadc->Instance->CR
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10c      	bne.n	8004e5a <ADC_Disable+0x52>
				== ADC_CR_ADEN) {
			/* Disable the ADC peripheral */
			LL_ADC_Disable(hadc->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff f901 	bl	800404c <LL_ADC_Disable>
			__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	601a      	str	r2, [r3, #0]
			return HAL_ERROR;
		}

		/* Wait for ADC effectively disabled */
		/* Get tick count */
		tickstart = HAL_GetTick();
 8004e52:	f7fe ff33 	bl	8003cbc <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8004e58:	e029      	b.n	8004eae <ADC_Disable+0xa6>
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	659a      	str	r2, [r3, #88]	; 0x58
			return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e023      	b.n	8004ebe <ADC_Disable+0xb6>
			if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT) {
 8004e76:	f7fe ff21 	bl	8003cbc <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d914      	bls.n	8004eae <ADC_Disable+0xa6>
				/* New check to avoid false timeout detection in case of preemption */
				if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <ADC_Disable+0xa6>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54

					/* Set ADC error code to ADC peripheral internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

					return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e007      	b.n	8004ebe <ADC_Disable+0xb6>
		while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1dc      	bne.n	8004e76 <ADC_Disable+0x6e>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <ADC_DMAConvCplt>:
/**
 * @brief  DMA transfer complete callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma) {
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	60fb      	str	r3, [r7, #12]
			(ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Update state machine on conversion status if not in error state */
	if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d14b      	bne.n	8004f78 <ADC_DMAConvCplt+0xb2>
			== 0UL) {
		/* Set ADC state */
		SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54

		/* Determine whether any further conversion upcoming on group regular     */
		/* by external trigger, continuous mode or scan sequence on going         */
		/* to disable interruption.                                               */
		/* Is it the end of the regular sequence ? */
		if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL) {
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <ADC_DMAConvCplt+0x78>
			/* Are conversions software-triggered ? */
			if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL) {
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe ff92 	bl	8003e28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d032      	beq.n	8004f70 <ADC_DMAConvCplt+0xaa>
				/* Is CONT bit set ? */
				if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL) {
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d12b      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
					/* CONT bit is not set, no more conversions expected */
					CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	655a      	str	r2, [r3, #84]	; 0x54
					if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL) {
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11f      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
						SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f3c:	e018      	b.n	8004f70 <ADC_DMAConvCplt+0xaa>
				}
			}
		} else {
			/* DMA End of Transfer interrupt was triggered but conversions sequence
			 is not over. If DMACFG is set to 0, conversions are stopped. */
			if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL) {
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d111      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
				/* DMACFG bit is not set, conversions are stopped. */
				CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
				if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
					SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54

		/* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
		HAL_ADC_ConvCpltCallback(hadc);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff fb45 	bl	8004600 <HAL_ADC_ConvCpltCallback>
		} else {
			/* Call ADC DMA error callback */
			hadc->DMA_Handle->XferErrorCallback(hdma);
		}
	}
}
 8004f76:	e00e      	b.n	8004f96 <ADC_DMAConvCplt+0xd0>
		if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL) {
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <ADC_DMAConvCplt+0xc6>
			HAL_ADC_ErrorCallback(hadc);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff fb4f 	bl	8004628 <HAL_ADC_ErrorCallback>
}
 8004f8a:	e004      	b.n	8004f96 <ADC_DMAConvCplt+0xd0>
			hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <ADC_DMAHalfConvCplt>:
/**
 * @brief  DMA half transfer complete callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma) {
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	60fb      	str	r3, [r7, #12]

	/* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
	HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff fb31 	bl	8004614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <ADC_DMAError>:
/**
 * @brief  DMA error callback.
 * @param hdma pointer to DMA handle.
 * @retval None
 */
void ADC_DMAError(DMA_HandleTypeDef *hdma) {
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
	/* Retrieve ADC handle corresponding to current DMA handle */
	ADC_HandleTypeDef *hadc =
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	60fb      	str	r3, [r7, #12]
			(ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	/* Set ADC state */
	SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

	/* Set ADC error code to DMA error */
	SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	659a      	str	r2, [r3, #88]	; 0x58

	/* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
	HAL_ADC_ErrorCallback(hadc);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fb21 	bl	8004628 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <ADC_ConfigureBoostMode>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped.
 * @param  hadc ADC handle
 * @retval None.
 */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	uint32_t freq;
	if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc)) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7a      	ldr	r2, [pc, #488]	; (80051e8 <ADC_ConfigureBoostMode+0x1f8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <ADC_ConfigureBoostMode+0x1c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a79      	ldr	r2, [pc, #484]	; (80051ec <ADC_ConfigureBoostMode+0x1fc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d109      	bne.n	8005020 <ADC_ConfigureBoostMode+0x30>
 800500c:	4b78      	ldr	r3, [pc, #480]	; (80051f0 <ADC_ConfigureBoostMode+0x200>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e008      	b.n	8005032 <ADC_ConfigureBoostMode+0x42>
 8005020:	4b74      	ldr	r3, [pc, #464]	; (80051f4 <ADC_ConfigureBoostMode+0x204>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01c      	beq.n	8005070 <ADC_ConfigureBoostMode+0x80>
		freq = HAL_RCC_GetHCLKFreq();
 8005036:	f005 fd57 	bl	800aae8 <HAL_RCC_GetHCLKFreq>
 800503a:	60f8      	str	r0, [r7, #12]
		switch (hadc->Init.ClockPrescaler) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005044:	d010      	beq.n	8005068 <ADC_ConfigureBoostMode+0x78>
 8005046:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800504a:	d873      	bhi.n	8005134 <ADC_ConfigureBoostMode+0x144>
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005050:	d002      	beq.n	8005058 <ADC_ConfigureBoostMode+0x68>
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005056:	d16d      	bne.n	8005134 <ADC_ConfigureBoostMode+0x144>
		case ADC_CLOCK_SYNC_PCLK_DIV1:
		case ADC_CLOCK_SYNC_PCLK_DIV2:
			freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	60fb      	str	r3, [r7, #12]
			break;
 8005066:	e068      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_SYNC_PCLK_DIV4:
			freq /= 4UL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	60fb      	str	r3, [r7, #12]
			break;
 800506e:	e064      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		default:
			break;
		}
	} else {
		freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005070:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	f006 ffde 	bl	800c038 <HAL_RCCEx_GetPeriphCLKFreq>
 800507c:	60f8      	str	r0, [r7, #12]
		switch (hadc->Init.ClockPrescaler) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005086:	d051      	beq.n	800512c <ADC_ConfigureBoostMode+0x13c>
 8005088:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800508c:	d854      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 800508e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005092:	d047      	beq.n	8005124 <ADC_ConfigureBoostMode+0x134>
 8005094:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005098:	d84e      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 800509a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800509e:	d03d      	beq.n	800511c <ADC_ConfigureBoostMode+0x12c>
 80050a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050a4:	d848      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050aa:	d033      	beq.n	8005114 <ADC_ConfigureBoostMode+0x124>
 80050ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b0:	d842      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050b6:	d029      	beq.n	800510c <ADC_ConfigureBoostMode+0x11c>
 80050b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050bc:	d83c      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050c2:	d01a      	beq.n	80050fa <ADC_ConfigureBoostMode+0x10a>
 80050c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050c8:	d836      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050ce:	d014      	beq.n	80050fa <ADC_ConfigureBoostMode+0x10a>
 80050d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050d4:	d830      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d00e      	beq.n	80050fa <ADC_ConfigureBoostMode+0x10a>
 80050dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e0:	d82a      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050e6:	d008      	beq.n	80050fa <ADC_ConfigureBoostMode+0x10a>
 80050e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ec:	d824      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x148>
 80050ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050f2:	d002      	beq.n	80050fa <ADC_ConfigureBoostMode+0x10a>
 80050f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050f8:	d11e      	bne.n	8005138 <ADC_ConfigureBoostMode+0x148>
		case ADC_CLOCK_ASYNC_DIV4:
		case ADC_CLOCK_ASYNC_DIV6:
		case ADC_CLOCK_ASYNC_DIV8:
		case ADC_CLOCK_ASYNC_DIV10:
		case ADC_CLOCK_ASYNC_DIV12:
			freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	0c9b      	lsrs	r3, r3, #18
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	60fb      	str	r3, [r7, #12]
			break;
 800510a:	e016      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_ASYNC_DIV16:
			freq /= 16UL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	60fb      	str	r3, [r7, #12]
			break;
 8005112:	e012      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_ASYNC_DIV32:
			freq /= 32UL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	60fb      	str	r3, [r7, #12]
			break;
 800511a:	e00e      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_ASYNC_DIV64:
			freq /= 64UL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	60fb      	str	r3, [r7, #12]
			break;
 8005122:	e00a      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_ASYNC_DIV128:
			freq /= 128UL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	60fb      	str	r3, [r7, #12]
			break;
 800512a:	e006      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		case ADC_CLOCK_ASYNC_DIV256:
			freq /= 256UL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	60fb      	str	r3, [r7, #12]
			break;
 8005132:	e002      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
			break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <ADC_ConfigureBoostMode+0x14a>
		default:
			break;
 8005138:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
	if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800513a:	f7fe fdcb 	bl	8003cd4 <HAL_GetREVID>
 800513e:	4603      	mov	r3, r0
 8005140:	f241 0203 	movw	r2, #4099	; 0x1003
 8005144:	4293      	cmp	r3, r2
 8005146:	d815      	bhi.n	8005174 <ADC_ConfigureBoostMode+0x184>
	{
		if (freq > 20000000UL) {
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <ADC_ConfigureBoostMode+0x208>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d908      	bls.n	8005162 <ADC_ConfigureBoostMode+0x172>
			SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515e:	609a      	str	r2, [r3, #8]
			MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST,
					ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
		}
	}
#endif /* ADC_VER_V5_3 */
}
 8005160:	e03e      	b.n	80051e0 <ADC_ConfigureBoostMode+0x1f0>
			CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	e035      	b.n	80051e0 <ADC_ConfigureBoostMode+0x1f0>
		freq /= 2U; /* divider by 2 for Rev.V */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
		if (freq <= 6250000UL) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <ADC_ConfigureBoostMode+0x20c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d808      	bhi.n	8005194 <ADC_ConfigureBoostMode+0x1a4>
			MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	e025      	b.n	80051e0 <ADC_ConfigureBoostMode+0x1f0>
		} else if (freq <= 12500000UL) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <ADC_ConfigureBoostMode+0x210>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d80a      	bhi.n	80051b2 <ADC_ConfigureBoostMode+0x1c2>
			MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	e016      	b.n	80051e0 <ADC_ConfigureBoostMode+0x1f0>
		} else if (freq <= 25000000UL) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <ADC_ConfigureBoostMode+0x214>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d80a      	bhi.n	80051d0 <ADC_ConfigureBoostMode+0x1e0>
			MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051cc:	609a      	str	r2, [r3, #8]
}
 80051ce:	e007      	b.n	80051e0 <ADC_ConfigureBoostMode+0x1f0>
			MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40022000 	.word	0x40022000
 80051ec:	40022100 	.word	0x40022100
 80051f0:	40022300 	.word	0x40022300
 80051f4:	58026300 	.word	0x58026300
 80051f8:	01312d00 	.word	0x01312d00
 80051fc:	005f5e10 	.word	0x005f5e10
 8005200:	00bebc20 	.word	0x00bebc20
 8005204:	017d7840 	.word	0x017d7840

08005208 <LL_ADC_IsEnabled>:
	__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx) {
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <LL_ADC_IsEnabled+0x18>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <LL_ADC_IsEnabled+0x1a>
 8005220:	2300      	movs	r3, #0
	}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <LL_ADC_StartCalibration>:
			uint32_t CalibrationMode, uint32_t SingleDiff) {
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
		MODIFY_REG(ADCx->CR,
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <LL_ADC_StartCalibration+0x38>)
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005250:	430a      	orrs	r2, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]
	}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	3ffeffc0 	.word	0x3ffeffc0

0800526c <LL_ADC_IsCalibrationOnGoing>:
	__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx) {
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005280:	d101      	bne.n	8005286 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005286:	2300      	movs	r3, #0
	}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_ADC_REG_IsConversionOngoing>:
	__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx) {
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
		return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ?
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0304 	and.w	r3, r3, #4
				1UL : 0UL);
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d101      	bne.n	80052ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052ac:	2300      	movs	r3, #0
	}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_ADCEx_Calibration_Start>:
 *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc,
		uint32_t CalibrationMode, uint32_t SingleDiff) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status;
	__IO uint32_t wait_loop_index = 0UL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
	assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

	/* Process locked */
	__HAL_LOCK(hadc);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_ADCEx_Calibration_Start+0x1e>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e04c      	b.n	8005374 <HAL_ADCEx_Calibration_Start+0xb8>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Calibration prerequisite: ADC must be disabled. */

	/* Disable the ADC (if not already disabled) */
	tmp_hal_status = ADC_Disable(hadc);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fd90 	bl	8004e08 <ADC_Disable>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

	/* Check if ADC is effectively disabled */
	if (tmp_hal_status == HAL_OK) {
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d135      	bne.n	800535e <HAL_ADCEx_Calibration_Start+0xa2>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <HAL_ADCEx_Calibration_Start+0xc0>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
				HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
				HAL_ADC_STATE_BUSY_INTERNAL);

		/* Start ADC calibration in mode single-ended or differential */
		LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ff90 	bl	8005230 <LL_ADC_StartCalibration>

		/* Wait for calibration completion */
		while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL) {
 8005310:	e014      	b.n	800533c <HAL_ADCEx_Calibration_Start+0x80>
			wait_loop_index++;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	3301      	adds	r3, #1
 8005316:	613b      	str	r3, [r7, #16]
			if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT) {
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4a19      	ldr	r2, [pc, #100]	; (8005380 <HAL_ADCEx_Calibration_Start+0xc4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d30d      	bcc.n	800533c <HAL_ADCEx_Calibration_Start+0x80>
				/* Update ADC state machine to error */
				ADC_STATE_CLR_SET(hadc->State,
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f023 0312 	bic.w	r3, r3, #18
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
						HAL_ADC_STATE_BUSY_INTERNAL,
						HAL_ADC_STATE_ERROR_INTERNAL);

				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e01b      	b.n	8005374 <HAL_ADCEx_Calibration_Start+0xb8>
		while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL) {
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff93 	bl	800526c <LL_ADC_IsCalibrationOnGoing>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e2      	bne.n	8005312 <HAL_ADCEx_Calibration_Start+0x56>
			}
		}

		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
 800535c:	e005      	b.n	800536a <HAL_ADCEx_Calibration_Start+0xae>
				HAL_ADC_STATE_BUSY_INTERNAL,
				HAL_ADC_STATE_READY);
	} else {
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0210 	orr.w	r2, r3, #16
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
		/* Note: No need to update variable "tmp_hal_status" here: already set    */
		/*       to state "HAL_ERROR" by function disabling the ADC.              */
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	ffffeefd 	.word	0xffffeefd
 8005380:	25c3f800 	.word	0x25c3f800

08005384 <HAL_ADCEx_MultiModeConfigChannel>:
 * @param hadc Master ADC handle
 * @param multimode Structure of ADC multimode configuration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_MultiModeTypeDef *multimode) {
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b09f      	sub	sp, #124	; 0x7c
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
		assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800539e:	2302      	movs	r3, #2
 80053a0:	e0be      	b.n	8005520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60

	ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5c      	ldr	r2, [pc, #368]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d102      	bne.n	80053c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053bc:	4b5b      	ldr	r3, [pc, #364]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	e001      	b.n	80053c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]

	if (tmphadcSlave.Instance == NULL) {
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54

		/* Process unlocked */
		__HAL_UNLOCK(hadc);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e09d      	b.n	8005520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Multimode DATA Format configuration                                   */
	tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing(
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff ff54 	bl	8005294 <LL_ADC_REG_IsConversionOngoing>
 80053ec:	6738      	str	r0, [r7, #112]	; 0x70
			(&tmphadcSlave)->Instance);
	if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff4e 	bl	8005294 <LL_ADC_REG_IsConversionOngoing>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d17f      	bne.n	80054fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
			&& (tmphadcSlave_conversion_on_going == 0UL)) {
 80053fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005400:	2b00      	cmp	r3, #0
 8005402:	d17c      	bne.n	80054fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
		/* Pointer to the common control register */
		tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a47      	ldr	r2, [pc, #284]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a46      	ldr	r2, [pc, #280]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d101      	bne.n	800541c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005418:	4b45      	ldr	r3, [pc, #276]	; (8005530 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800541a:	e000      	b.n	800541e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800541c:	4b45      	ldr	r3, [pc, #276]	; (8005534 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800541e:	66fb      	str	r3, [r7, #108]	; 0x6c

		/* If multimode is selected, configure all multimode parameters.          */
		/* Otherwise, reset multimode parameters (can be used in case of          */
		/* transition from multimode to independent mode).                        */
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d039      	beq.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x118>
			MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF,
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	431a      	orrs	r2, r3
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	609a      	str	r2, [r3, #8]
			/*      from 1 to 8 clock cycles for 12 bits                              */
			/*      from 1 to 6 clock cycles for 10 and 8 bits                        */
			/*    If a higher delay is selected, it will be clipped to maximum delay  */
			/*    range                                                               */

			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
 800543e:	4a3a      	ldr	r2, [pc, #232]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_ADCEx_MultiModeConfigChannel+0xca>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a38      	ldr	r2, [pc, #224]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10e      	bne.n	800546c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800544e:	4836      	ldr	r0, [pc, #216]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005450:	f7ff feda 	bl	8005208 <LL_ADC_IsEnabled>
 8005454:	4604      	mov	r4, r0
 8005456:	4835      	ldr	r0, [pc, #212]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005458:	f7ff fed6 	bl	8005208 <LL_ADC_IsEnabled>
 800545c:	4603      	mov	r3, r0
 800545e:	4323      	orrs	r3, r4
					== 0UL) {
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e008      	b.n	800547e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 800546c:	4832      	ldr	r0, [pc, #200]	; (8005538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800546e:	f7ff fecb 	bl	8005208 <LL_ADC_IsEnabled>
 8005472:	4603      	mov	r3, r0
					== 0UL) {
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 800547e:	2b00      	cmp	r3, #0
 8005480:	d047      	beq.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
				MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005488:	4013      	ands	r3, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	6892      	ldr	r2, [r2, #8]
 8005492:	430a      	orrs	r2, r1
 8005494:	431a      	orrs	r2, r3
 8005496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005498:	609a      	str	r2, [r3, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 800549a:	e03a      	b.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
						multimode->Mode | multimode->TwoSamplingDelay);
			}
		} else /* ADC_MODE_INDEPENDENT */
		{
			CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a6:	609a      	str	r2, [r3, #8]

			/* Parameters that can be updated only when ADC is disabled:                */
			/*  - Multimode mode selection                                              */
			/*  - Multimode delay                                                       */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
 80054ac:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1d      	ldr	r2, [pc, #116]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10e      	bne.n	80054da <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80054bc:	481a      	ldr	r0, [pc, #104]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054be:	f7ff fea3 	bl	8005208 <LL_ADC_IsEnabled>
 80054c2:	4604      	mov	r4, r0
 80054c4:	4819      	ldr	r0, [pc, #100]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054c6:	f7ff fe9f 	bl	8005208 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4323      	orrs	r3, r4
					== 0UL) {
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e008      	b.n	80054ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80054da:	4817      	ldr	r0, [pc, #92]	; (8005538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054dc:	f7ff fe94 	bl	8005208 <LL_ADC_IsEnabled>
 80054e0:	4603      	mov	r3, r0
					== 0UL) {
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
				CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054fa:	6093      	str	r3, [r2, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 80054fc:	e009      	b.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
	}
	/* If one of the ADC sharing the same common group is enabled, no update    */
	/* could be done on neither of the multimode structure parameters.          */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	655a      	str	r2, [r3, #84]	; 0x54

		tmp_hal_status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005510:	e000      	b.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x190>
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 8005512:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 800551c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005520:	4618      	mov	r0, r3
 8005522:	377c      	adds	r7, #124	; 0x7c
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	40022000 	.word	0x40022000
 800552c:	40022100 	.word	0x40022100
 8005530:	40022300 	.word	0x40022300
 8005534:	58026300 	.word	0x58026300
 8005538:	58026000 	.word	0x58026000
 800553c:	fffff0e0 	.word	0xfffff0e0

08005540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <__NVIC_SetPriorityGrouping+0x40>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 800556a:	4313      	orrs	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556e:	4a04      	ldr	r2, [pc, #16]	; (8005580 <__NVIC_SetPriorityGrouping+0x40>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	60d3      	str	r3, [r2, #12]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00
 8005584:	05fa0000 	.word	0x05fa0000

08005588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <__NVIC_GetPriorityGrouping+0x18>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0307 	and.w	r3, r3, #7
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db0b      	blt.n	80055ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <__NVIC_EnableIRQ+0x38>)
 80055be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2001      	movs	r0, #1
 80055c6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e100 	.word	0xe000e100

080055e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db0a      	blt.n	800560a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	490c      	ldr	r1, [pc, #48]	; (800562c <__NVIC_SetPriority+0x4c>)
 80055fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	440b      	add	r3, r1
 8005604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005608:	e00a      	b.n	8005620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4908      	ldr	r1, [pc, #32]	; (8005630 <__NVIC_SetPriority+0x50>)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	3b04      	subs	r3, #4
 8005618:	0112      	lsls	r2, r2, #4
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	440b      	add	r3, r1
 800561e:	761a      	strb	r2, [r3, #24]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000e100 	.word	0xe000e100
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f1c3 0307 	rsb	r3, r3, #7
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf28      	it	cs
 8005652:	2304      	movcs	r3, #4
 8005654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3304      	adds	r3, #4
 800565a:	2b06      	cmp	r3, #6
 800565c:	d902      	bls.n	8005664 <NVIC_EncodePriority+0x30>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3b03      	subs	r3, #3
 8005662:	e000      	b.n	8005666 <NVIC_EncodePriority+0x32>
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	401a      	ands	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800567c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	43d9      	mvns	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800568c:	4313      	orrs	r3, r2
         );
}
 800568e:	4618      	mov	r0, r3
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff4c 	bl	8005540 <__NVIC_SetPriorityGrouping>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056be:	f7ff ff63 	bl	8005588 <__NVIC_GetPriorityGrouping>
 80056c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6978      	ldr	r0, [r7, #20]
 80056ca:	f7ff ffb3 	bl	8005634 <NVIC_EncodePriority>
 80056ce:	4602      	mov	r2, r0
 80056d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff ff82 	bl	80055e0 <__NVIC_SetPriority>
}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff56 	bl	80055a4 <__NVIC_EnableIRQ>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e014      	b.n	800573c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd fca0 	bl	8003068 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e046      	b.n	80057e6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	795b      	ldrb	r3, [r3, #5]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_DAC_Start+0x20>
 8005760:	2302      	movs	r3, #2
 8005762:	e040      	b.n	80057e6 <HAL_DAC_Start+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2201      	movs	r2, #1
 800577e:	409a      	lsls	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005798:	2b02      	cmp	r3, #2
 800579a:	d11d      	bne.n	80057d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	e014      	b.n	80057d8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2102      	movs	r1, #2
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d107      	bne.n	80057d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0202 	orr.w	r2, r2, #2
 80057d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0a2      	b.n	8005952 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	795b      	ldrb	r3, [r3, #5]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_DAC_Start_DMA+0x24>
 8005814:	2302      	movs	r3, #2
 8005816:	e09c      	b.n	8005952 <HAL_DAC_Start_DMA+0x15e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2202      	movs	r2, #2
 8005822:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d129      	bne.n	800587e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4a4b      	ldr	r2, [pc, #300]	; (800595c <HAL_DAC_Start_DMA+0x168>)
 8005830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <HAL_DAC_Start_DMA+0x16c>)
 8005838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4a49      	ldr	r2, [pc, #292]	; (8005964 <HAL_DAC_Start_DMA+0x170>)
 8005840:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005850:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_DAC_Start_DMA+0x6c>
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d005      	beq.n	800586a <HAL_DAC_Start_DMA+0x76>
 800585e:	e009      	b.n	8005874 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	613b      	str	r3, [r7, #16]
        break;
 8005868:	e033      	b.n	80058d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	613b      	str	r3, [r7, #16]
        break;
 8005872:	e02e      	b.n	80058d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3310      	adds	r3, #16
 800587a:	613b      	str	r3, [r7, #16]
        break;
 800587c:	e029      	b.n	80058d2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4a39      	ldr	r2, [pc, #228]	; (8005968 <HAL_DAC_Start_DMA+0x174>)
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4a38      	ldr	r2, [pc, #224]	; (800596c <HAL_DAC_Start_DMA+0x178>)
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4a37      	ldr	r2, [pc, #220]	; (8005970 <HAL_DAC_Start_DMA+0x17c>)
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_DAC_Start_DMA+0xc0>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d005      	beq.n	80058be <HAL_DAC_Start_DMA+0xca>
 80058b2:	e009      	b.n	80058c8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	613b      	str	r3, [r7, #16]
        break;
 80058bc:	e009      	b.n	80058d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3318      	adds	r3, #24
 80058c4:	613b      	str	r3, [r7, #16]
        break;
 80058c6:	e004      	b.n	80058d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	331c      	adds	r3, #28
 80058ce:	613b      	str	r3, [r7, #16]
        break;
 80058d0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d111      	bne.n	80058fc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6898      	ldr	r0, [r3, #8]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	f000 fe67 	bl	80065c4 <HAL_DMA_Start_IT>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]
 80058fa:	e010      	b.n	800591e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800590a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68d8      	ldr	r0, [r3, #12]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	f000 fe55 	bl	80065c4 <HAL_DMA_Start_IT>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10c      	bne.n	8005944 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6819      	ldr	r1, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e005      	b.n	8005950 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f043 0204 	orr.w	r2, r3, #4
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08005de5 	.word	0x08005de5
 8005960:	08005e07 	.word	0x08005e07
 8005964:	08005e23 	.word	0x08005e23
 8005968:	08005ea1 	.word	0x08005ea1
 800596c:	08005ec3 	.word	0x08005ec3
 8005970:	08005edf 	.word	0x08005edf

08005974 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e03e      	b.n	8005a06 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43da      	mvns	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	400a      	ands	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2201      	movs	r2, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43da      	mvns	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	400a      	ands	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10d      	bne.n	80059e4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f863 	bl	8006a98 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e00c      	b.n	80059fe <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 f855 	bl	8006a98 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80059fc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d018      	beq.n	8005a6c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a64:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f86f 	bl	8005b4a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01d      	beq.n	8005ab2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2204      	movs	r2, #4
 8005a84:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f043 0202 	orr.w	r2, r3, #2
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f9ed 	bl	8005e8c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b087      	sub	sp, #28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e015      	b.n	8005b02 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3308      	adds	r3, #8
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e004      	b.n	8005af8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4413      	add	r3, r2
 8005af4:	3314      	adds	r3, #20
 8005af6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	461a      	mov	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_DAC_ConfigChannel+0x1e>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e12a      	b.n	8005dd8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	795b      	ldrb	r3, [r3, #5]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_DAC_ConfigChannel+0x2e>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e124      	b.n	8005dd8 <HAL_DAC_ConfigChannel+0x278>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d17a      	bne.n	8005c98 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ba2:	f7fe f88b 	bl	8003cbc <HAL_GetTick>
 8005ba6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d13d      	bne.n	8005c2a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bae:	e018      	b.n	8005be2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bb0:	f7fe f884 	bl	8003cbc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d911      	bls.n	8005be2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc4:	4b86      	ldr	r3, [pc, #536]	; (8005de0 <HAL_DAC_ConfigChannel+0x280>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f043 0208 	orr.w	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0fa      	b.n	8005dd8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	4b7d      	ldr	r3, [pc, #500]	; (8005de0 <HAL_DAC_ConfigChannel+0x280>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1df      	bne.n	8005bb0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	6992      	ldr	r2, [r2, #24]
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bfa:	e020      	b.n	8005c3e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bfc:	f7fe f85e 	bl	8003cbc <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d90f      	bls.n	8005c2a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da0a      	bge.n	8005c2a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f043 0208 	orr.w	r2, r3, #8
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2203      	movs	r2, #3
 8005c24:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0d6      	b.n	8005dd8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dbe3      	blt.n	8005bfc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	6992      	ldr	r2, [r2, #24]
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	ea02 0103 	and.w	r1, r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	21ff      	movs	r1, #255	; 0xff
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	ea02 0103 	and.w	r1, r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d11d      	bne.n	8005cdc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	221f      	movs	r2, #31
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2207      	movs	r2, #7
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
 8005d04:	e00f      	b.n	8005d26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d102      	bne.n	8005d14 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e008      	b.n	8005d26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	e001      	b.n	8005d26 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6819      	ldr	r1, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43da      	mvns	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	22c0      	movs	r2, #192	; 0xc0
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	43da      	mvns	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20008000 	.word	0x20008000

08005de4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fe8b 	bl	8005b0e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	711a      	strb	r2, [r3, #4]
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fe84 	bl	8005b22 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f043 0204 	orr.w	r2, r3, #4
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff fe7a 	bl	8005b36 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	711a      	strb	r2, [r3, #4]
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff ffce 	bl	8005e50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	711a      	strb	r2, [r3, #4]
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ffc7 	bl	8005e64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f043 0204 	orr.w	r2, r3, #4
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ffbd 	bl	8005e78 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	711a      	strb	r2, [r3, #4]
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	uint32_t registerValue;
	uint32_t tickstart = HAL_GetTick();
 8005f14:	f7fd fed2 	bl	8003cbc <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]
	DMA_Base_Registers *regs_dma;
	BDMA_Base_Registers *regs_bdma;

	/* Check the DMA peripheral handle */
	if (hdma == NULL) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_DMA_Init+0x18>
		return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e316      	b.n	8006552 <HAL_DMA_Init+0x646>
	assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
	assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
	assert_param(IS_DMA_MODE(hdma->Init.Mode));
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

	if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a66      	ldr	r2, [pc, #408]	; (80060c4 <HAL_DMA_Init+0x1b8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <HAL_DMA_Init+0x1bc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d045      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a63      	ldr	r2, [pc, #396]	; (80060cc <HAL_DMA_Init+0x1c0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a62      	ldr	r2, [pc, #392]	; (80060d0 <HAL_DMA_Init+0x1c4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d03b      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_DMA_Init+0x1c8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d036      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5f      	ldr	r2, [pc, #380]	; (80060d8 <HAL_DMA_Init+0x1cc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d031      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5d      	ldr	r2, [pc, #372]	; (80060dc <HAL_DMA_Init+0x1d0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5c      	ldr	r2, [pc, #368]	; (80060e0 <HAL_DMA_Init+0x1d4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d027      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5a      	ldr	r2, [pc, #360]	; (80060e4 <HAL_DMA_Init+0x1d8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a59      	ldr	r2, [pc, #356]	; (80060e8 <HAL_DMA_Init+0x1dc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a57      	ldr	r2, [pc, #348]	; (80060ec <HAL_DMA_Init+0x1e0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a56      	ldr	r2, [pc, #344]	; (80060f0 <HAL_DMA_Init+0x1e4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a54      	ldr	r2, [pc, #336]	; (80060f4 <HAL_DMA_Init+0x1e8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a53      	ldr	r2, [pc, #332]	; (80060f8 <HAL_DMA_Init+0x1ec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a51      	ldr	r2, [pc, #324]	; (80060fc <HAL_DMA_Init+0x1f0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a50      	ldr	r2, [pc, #320]	; (8006100 <HAL_DMA_Init+0x1f4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <HAL_DMA_Init+0xbc>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_DMA_Init+0xbe>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 813b 	beq.w	8006246 <HAL_DMA_Init+0x33a>
			assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
			assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
		}

		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Allocate lock resource */
		__HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Disable the peripheral */
		__HAL_DMA_DISABLE(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a37      	ldr	r2, [pc, #220]	; (80060c4 <HAL_DMA_Init+0x1b8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d04a      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a36      	ldr	r2, [pc, #216]	; (80060c8 <HAL_DMA_Init+0x1bc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d045      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	; (80060cc <HAL_DMA_Init+0x1c0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d040      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <HAL_DMA_Init+0x1c4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d03b      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <HAL_DMA_Init+0x1c8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d036      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <HAL_DMA_Init+0x1cc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d031      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_DMA_Init+0x1d0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d02c      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_DMA_Init+0x1d4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d027      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_DMA_Init+0x1d8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d022      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2a      	ldr	r2, [pc, #168]	; (80060e8 <HAL_DMA_Init+0x1dc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d01d      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a28      	ldr	r2, [pc, #160]	; (80060ec <HAL_DMA_Init+0x1e0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d018      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <HAL_DMA_Init+0x1e4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_DMA_Init+0x1e8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00e      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <HAL_DMA_Init+0x1ec>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a22      	ldr	r2, [pc, #136]	; (80060fc <HAL_DMA_Init+0x1f0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a21      	ldr	r2, [pc, #132]	; (8006100 <HAL_DMA_Init+0x1f4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <HAL_DMA_Init+0x186>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e007      	b.n	80060a2 <HAL_DMA_Init+0x196>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

		/* Check if the DMA Stream is effectively disabled */
		while ((((DMA_Stream_TypeDef*) hdma->Instance)->CR & DMA_SxCR_EN) != 0U) {
 80060a2:	e02f      	b.n	8006104 <HAL_DMA_Init+0x1f8>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80060a4:	f7fd fe0a 	bl	8003cbc <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d928      	bls.n	8006104 <HAL_DMA_Init+0x1f8>
				/* Update error code */
				hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_ERROR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2203      	movs	r2, #3
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e246      	b.n	8006552 <HAL_DMA_Init+0x646>
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
		while ((((DMA_Stream_TypeDef*) hdma->Instance)->CR & DMA_SxCR_EN) != 0U) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1c8      	bne.n	80060a4 <HAL_DMA_Init+0x198>
			}
		}

		/* Get the CR register value */
		registerValue = ((DMA_Stream_TypeDef*) hdma->Instance)->CR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	617b      	str	r3, [r7, #20]

		/* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
		registerValue &= ((uint32_t) ~(DMA_SxCR_MBURST | DMA_SxCR_PBURST |
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4b83      	ldr	r3, [pc, #524]	; (800632c <HAL_DMA_Init+0x420>)
 800611e:	4013      	ands	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
		DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE |
		DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC |
		DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

		/* Prepare the DMA Stream configuration */
		registerValue |= hdma->Init.Direction | hdma->Init.PeriphInc
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	431a      	orrs	r2, r3
				| hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
				| hdma->Init.MemDataAlignment | hdma->Init.Mode
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	431a      	orrs	r2, r3
				| hdma->Init.Priority;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	4313      	orrs	r3, r2
		registerValue |= hdma->Init.Direction | hdma->Init.PeriphInc
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

		/* the Memory burst and peripheral burst are not used when the FIFO is disabled */
		if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d107      	bne.n	8006168 <HAL_DMA_Init+0x25c>
			/* Get memory burst and peripheral burst */
			registerValue |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	4313      	orrs	r3, r2
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
		}

		/* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
		 lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
		if ((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U) {
 8006168:	4b71      	ldr	r3, [pc, #452]	; (8006330 <HAL_DMA_Init+0x424>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b71      	ldr	r3, [pc, #452]	; (8006334 <HAL_DMA_Init+0x428>)
 800616e:	4013      	ands	r3, r2
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006174:	d328      	bcc.n	80061c8 <HAL_DMA_Init+0x2bc>
#endif /* STM32H7_DEV_ID == 0x450UL */
			if (IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b28      	cmp	r3, #40	; 0x28
 800617c:	d903      	bls.n	8006186 <HAL_DMA_Init+0x27a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b2e      	cmp	r3, #46	; 0x2e
 8006184:	d917      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b3e      	cmp	r3, #62	; 0x3e
 800618c:	d903      	bls.n	8006196 <HAL_DMA_Init+0x28a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b42      	cmp	r3, #66	; 0x42
 8006194:	d90f      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b46      	cmp	r3, #70	; 0x46
 800619c:	d903      	bls.n	80061a6 <HAL_DMA_Init+0x29a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b48      	cmp	r3, #72	; 0x48
 80061a4:	d907      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b4e      	cmp	r3, #78	; 0x4e
 80061ac:	d905      	bls.n	80061ba <HAL_DMA_Init+0x2ae>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b52      	cmp	r3, #82	; 0x52
 80061b4:	d801      	bhi.n	80061ba <HAL_DMA_Init+0x2ae>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_DMA_Init+0x2b0>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_DMA_Init+0x2bc>
				registerValue |= DMA_SxCR_TRBUFF;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
		}
#endif /* STM32H7_DEV_ID == 0x450UL */

		/* Write to DMA Stream CR register */
		((DMA_Stream_TypeDef*) hdma->Instance)->CR = registerValue;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	601a      	str	r2, [r3, #0]

		/* Get the FCR register value */
		registerValue = ((DMA_Stream_TypeDef*) hdma->Instance)->FCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	617b      	str	r3, [r7, #20]

		/* Clear Direct mode and FIFO threshold bits */
		registerValue &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	617b      	str	r3, [r7, #20]

		/* Prepare the DMA Stream FIFO configuration */
		registerValue |= hdma->Init.FIFOMode;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

		/* the FIFO threshold is not used when the FIFO mode is disabled */
		if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d117      	bne.n	8006222 <HAL_DMA_Init+0x316>
			/* Get the FIFO threshold */
			registerValue |= hdma->Init.FIFOThreshold;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

			/* Check compatibility between FIFO threshold level and size of the memory burst */
			/* for INCR4, INCR8, INCR16 */
			if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_Init+0x316>
				if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 fb33 	bl	8008870 <DMA_CheckFifoParam>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_DMA_Init+0x316>
					/* Update error code */
					hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	655a      	str	r2, [r3, #84]	; 0x54

					/* Change the DMA state */
					hdma->State = HAL_DMA_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

					return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e197      	b.n	8006552 <HAL_DMA_Init+0x646>
				}
			}
		}

		/* Write to DMA Stream FCR */
		((DMA_Stream_TypeDef*) hdma->Instance)->FCR = registerValue;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	615a      	str	r2, [r3, #20]

		/* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
		 DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
		regs_dma = (DMA_Base_Registers*) DMA_CalcBaseAndBitshift(hdma);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f002 fa6e 	bl	800870c <DMA_CalcBaseAndBitshift>
 8006230:	4603      	mov	r3, r0
 8006232:	60bb      	str	r3, [r7, #8]

		/* Clear all interrupt flags */
		regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	223f      	movs	r2, #63	; 0x3f
 800623e:	409a      	lsls	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	e0cd      	b.n	80063e2 <HAL_DMA_Init+0x4d6>
	} else if (IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a3b      	ldr	r2, [pc, #236]	; (8006338 <HAL_DMA_Init+0x42c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a39      	ldr	r2, [pc, #228]	; (800633c <HAL_DMA_Init+0x430>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a38      	ldr	r2, [pc, #224]	; (8006340 <HAL_DMA_Init+0x434>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a36      	ldr	r2, [pc, #216]	; (8006344 <HAL_DMA_Init+0x438>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a35      	ldr	r2, [pc, #212]	; (8006348 <HAL_DMA_Init+0x43c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a33      	ldr	r2, [pc, #204]	; (800634c <HAL_DMA_Init+0x440>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a32      	ldr	r2, [pc, #200]	; (8006350 <HAL_DMA_Init+0x444>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a30      	ldr	r2, [pc, #192]	; (8006354 <HAL_DMA_Init+0x448>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_DMA_Init+0x38e>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_DMA_Init+0x390>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8097 	beq.w	80063d0 <HAL_DMA_Init+0x4c4>
	{
		if (IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_DMA_Init+0x42c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d021      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_DMA_Init+0x430>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01c      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_DMA_Init+0x434>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d017      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_DMA_Init+0x438>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d012      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_DMA_Init+0x43c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00d      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_DMA_Init+0x440>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d008      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_DMA_Init+0x444>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_DMA_Init+0x448>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bf00      	nop
			/* Check the request parameter */
			assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
		}

		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Allocate lock resource */
		__HAL_UNLOCK(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Get the CR register value */
		registerValue = ((BDMA_Channel_TypeDef*) hdma->Instance)->CCR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	617b      	str	r3, [r7, #20]

		/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
		registerValue &= ((uint32_t) ~(BDMA_CCR_PL | BDMA_CCR_MSIZE
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_DMA_Init+0x44c>)
 800630e:	4013      	ands	r3, r2
 8006310:	617b      	str	r3, [r7, #20]
				BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC |
				BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM |
				BDMA_CCR_CT));

		/* Prepare the DMA Channel configuration */
		registerValue |= DMA_TO_BDMA_DIRECTION(hdma->Init.Direction) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d020      	beq.n	800635c <HAL_DMA_Init+0x450>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b80      	cmp	r3, #128	; 0x80
 8006320:	d102      	bne.n	8006328 <HAL_DMA_Init+0x41c>
 8006322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006326:	e01a      	b.n	800635e <HAL_DMA_Init+0x452>
 8006328:	2300      	movs	r3, #0
 800632a:	e018      	b.n	800635e <HAL_DMA_Init+0x452>
 800632c:	fe10803f 	.word	0xfe10803f
 8006330:	5c001000 	.word	0x5c001000
 8006334:	ffff0000 	.word	0xffff0000
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
 8006358:	fffe000f 	.word	0xfffe000f
 800635c:	2310      	movs	r3, #16
		DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc) |
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	08d2      	lsrs	r2, r2, #3
		registerValue |= DMA_TO_BDMA_DIRECTION(hdma->Init.Direction) |
 8006364:	431a      	orrs	r2, r3
		DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc) |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	08db      	lsrs	r3, r3, #3
		DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc) |
 800636c:	431a      	orrs	r2, r3
		DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	08db      	lsrs	r3, r3, #3
		DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc) |
 8006374:	431a      	orrs	r2, r3
		DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment) |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	08db      	lsrs	r3, r3, #3
		DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800637c:	431a      	orrs	r2, r3
		DMA_TO_BDMA_MODE(hdma->Init.Mode) |
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	08db      	lsrs	r3, r3, #3
		DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment) |
 8006384:	431a      	orrs	r2, r3
		DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	091b      	lsrs	r3, r3, #4
		DMA_TO_BDMA_MODE(hdma->Init.Mode) |
 800638c:	4313      	orrs	r3, r2
		registerValue |= DMA_TO_BDMA_DIRECTION(hdma->Init.Direction) |
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

		/* Write to DMA Channel CR register */
		((BDMA_Channel_TypeDef*) hdma->Instance)->CCR = registerValue;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	601a      	str	r2, [r3, #0]

		/* calculation of the channel index */
		hdma->StreamIndex = (((uint32_t) ((uint32_t*) hdma->Instance)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
				- (uint32_t) BDMA_Channel0)
 80063a2:	4b6e      	ldr	r3, [pc, #440]	; (800655c <HAL_DMA_Init+0x650>)
 80063a4:	4413      	add	r3, r2
				/ ((uint32_t) BDMA_Channel1 - (uint32_t) BDMA_Channel0)) << 2U;
 80063a6:	4a6e      	ldr	r2, [pc, #440]	; (8006560 <HAL_DMA_Init+0x654>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	009a      	lsls	r2, r3, #2
		hdma->StreamIndex = (((uint32_t) ((uint32_t*) hdma->Instance)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	65da      	str	r2, [r3, #92]	; 0x5c

		/* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
		 DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
		regs_bdma = (BDMA_Base_Registers*) DMA_CalcBaseAndBitshift(hdma);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f002 f9a9 	bl	800870c <DMA_CalcBaseAndBitshift>
 80063ba:	4603      	mov	r3, r0
 80063bc:	60fb      	str	r3, [r7, #12]

		/* Clear all interrupt flags */
		regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2201      	movs	r2, #1
 80063c8:	409a      	lsls	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e008      	b.n	80063e2 <HAL_DMA_Init+0x4d6>
	} else {
		hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
		hdma->State = HAL_DMA_STATE_ERROR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0b7      	b.n	8006552 <HAL_DMA_Init+0x646>
	}

	if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5f      	ldr	r2, [pc, #380]	; (8006564 <HAL_DMA_Init+0x658>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d072      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5d      	ldr	r2, [pc, #372]	; (8006568 <HAL_DMA_Init+0x65c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d06d      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5c      	ldr	r2, [pc, #368]	; (800656c <HAL_DMA_Init+0x660>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d068      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5a      	ldr	r2, [pc, #360]	; (8006570 <HAL_DMA_Init+0x664>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d063      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a59      	ldr	r2, [pc, #356]	; (8006574 <HAL_DMA_Init+0x668>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d05e      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a57      	ldr	r2, [pc, #348]	; (8006578 <HAL_DMA_Init+0x66c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d059      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a56      	ldr	r2, [pc, #344]	; (800657c <HAL_DMA_Init+0x670>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d054      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a54      	ldr	r2, [pc, #336]	; (8006580 <HAL_DMA_Init+0x674>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04f      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a53      	ldr	r2, [pc, #332]	; (8006584 <HAL_DMA_Init+0x678>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d04a      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a51      	ldr	r2, [pc, #324]	; (8006588 <HAL_DMA_Init+0x67c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d045      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a50      	ldr	r2, [pc, #320]	; (800658c <HAL_DMA_Init+0x680>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d040      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a4e      	ldr	r2, [pc, #312]	; (8006590 <HAL_DMA_Init+0x684>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d03b      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a4d      	ldr	r2, [pc, #308]	; (8006594 <HAL_DMA_Init+0x688>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d036      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a4b      	ldr	r2, [pc, #300]	; (8006598 <HAL_DMA_Init+0x68c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d031      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4a      	ldr	r2, [pc, #296]	; (800659c <HAL_DMA_Init+0x690>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d02c      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a48      	ldr	r2, [pc, #288]	; (80065a0 <HAL_DMA_Init+0x694>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d027      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a47      	ldr	r2, [pc, #284]	; (80065a4 <HAL_DMA_Init+0x698>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d022      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a45      	ldr	r2, [pc, #276]	; (80065a8 <HAL_DMA_Init+0x69c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01d      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a44      	ldr	r2, [pc, #272]	; (80065ac <HAL_DMA_Init+0x6a0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d018      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a42      	ldr	r2, [pc, #264]	; (80065b0 <HAL_DMA_Init+0x6a4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <HAL_DMA_Init+0x6a8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00e      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <HAL_DMA_Init+0x6ac>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d009      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3e      	ldr	r2, [pc, #248]	; (80065bc <HAL_DMA_Init+0x6b0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <HAL_DMA_Init+0x6b4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_DMA_Init+0x5ca>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <HAL_DMA_Init+0x5cc>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d032      	beq.n	8006542 <HAL_DMA_Init+0x636>
	{
		/* Initialize parameters for DMAMUX channel :
		 DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
		 */
		DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 fa43 	bl	8008968 <DMA_CalcDMAMUXChannelBaseAndMask>

		if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d102      	bne.n	80064f0 <HAL_DMA_Init+0x5e4>
			/* if memory to memory force the request to 0*/
			hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	605a      	str	r2, [r3, #4]
		}

		/* Set peripheral request  to DMAMUX channel */
		hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	601a      	str	r2, [r3, #0]

		/* Clear the DMAMUX synchro overrun flag */
		hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006504:	605a      	str	r2, [r3, #4]

		/* Initialize parameters for DMAMUX request generator :
		 if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
		 */
		if ((hdma->Init.Request >= DMA_REQUEST_GENERATOR0)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <HAL_DMA_Init+0x624>
				&& (hdma->Init.Request <= DMA_REQUEST_GENERATOR7)) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d80c      	bhi.n	8006530 <HAL_DMA_Init+0x624>
			/* Initialize parameters for DMAMUX request generator :
			 DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
			DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 fac0 	bl	8008a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

			/* Reset the DMAMUX request generator register */
			hdma->DMAmuxRequestGen->RGCR = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

			/* Clear the DMAMUX request generator overrun flag */
			hdma->DMAmuxRequestGenStatus->RGCFR =
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
					hdma->DMAmuxRequestGenStatusMask;
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6f52      	ldr	r2, [r2, #116]	; 0x74
			hdma->DMAmuxRequestGenStatus->RGCFR =
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	e008      	b.n	8006542 <HAL_DMA_Init+0x636>
		} else {
			hdma->DMAmuxRequestGen = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	66da      	str	r2, [r3, #108]	; 0x6c
			hdma->DMAmuxRequestGenStatus = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	671a      	str	r2, [r3, #112]	; 0x70
			hdma->DMAmuxRequestGenStatusMask = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	675a      	str	r2, [r3, #116]	; 0x74
		}
	}

	/* Initialize the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	; 0x54

	/* Initialize the DMA state */
	hdma->State = HAL_DMA_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	a7fdabf8 	.word	0xa7fdabf8
 8006560:	cccccccd 	.word	0xcccccccd
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494

080065c4 <HAL_DMA_Start_IT>:
 * @param  DstAddress: The destination memory Buffer address
 * @param  DataLength: The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));

	/* Check the DMA peripheral handle */
	if (hdma == NULL) {
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_DMA_Start_IT+0x1c>
		return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e226      	b.n	8006a2e <HAL_DMA_Start_IT+0x46a>
	}

	/* Process locked */
	__HAL_LOCK(hdma);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_DMA_Start_IT+0x2a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e21f      	b.n	8006a2e <HAL_DMA_Start_IT+0x46a>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	if (HAL_DMA_STATE_READY == hdma->State) {
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	f040 820a 	bne.w	8006a18 <HAL_DMA_Start_IT+0x454>
		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Initialize the error code */
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	; 0x54

		/* Disable the peripheral */
		__HAL_DMA_DISABLE(hdma);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a68      	ldr	r2, [pc, #416]	; (80067b8 <HAL_DMA_Start_IT+0x1f4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a66      	ldr	r2, [pc, #408]	; (80067bc <HAL_DMA_Start_IT+0x1f8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_DMA_Start_IT+0x1fc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a63      	ldr	r2, [pc, #396]	; (80067c4 <HAL_DMA_Start_IT+0x200>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_DMA_Start_IT+0x204>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a60      	ldr	r2, [pc, #384]	; (80067cc <HAL_DMA_Start_IT+0x208>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5f      	ldr	r2, [pc, #380]	; (80067d0 <HAL_DMA_Start_IT+0x20c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5d      	ldr	r2, [pc, #372]	; (80067d4 <HAL_DMA_Start_IT+0x210>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5c      	ldr	r2, [pc, #368]	; (80067d8 <HAL_DMA_Start_IT+0x214>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5a      	ldr	r2, [pc, #360]	; (80067dc <HAL_DMA_Start_IT+0x218>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a59      	ldr	r2, [pc, #356]	; (80067e0 <HAL_DMA_Start_IT+0x21c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a57      	ldr	r2, [pc, #348]	; (80067e4 <HAL_DMA_Start_IT+0x220>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a56      	ldr	r2, [pc, #344]	; (80067e8 <HAL_DMA_Start_IT+0x224>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a54      	ldr	r2, [pc, #336]	; (80067ec <HAL_DMA_Start_IT+0x228>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a53      	ldr	r2, [pc, #332]	; (80067f0 <HAL_DMA_Start_IT+0x22c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a51      	ldr	r2, [pc, #324]	; (80067f4 <HAL_DMA_Start_IT+0x230>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <HAL_DMA_Start_IT+0x100>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e007      	b.n	80066d4 <HAL_DMA_Start_IT+0x110>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

		/* Configure the source, destination address and the data length */
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fe6a 	bl	80083b4 <DMA_SetConfig>

		if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	; (80067b8 <HAL_DMA_Start_IT+0x1f4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d04a      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a33      	ldr	r2, [pc, #204]	; (80067bc <HAL_DMA_Start_IT+0x1f8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d045      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a31      	ldr	r2, [pc, #196]	; (80067c0 <HAL_DMA_Start_IT+0x1fc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d040      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a30      	ldr	r2, [pc, #192]	; (80067c4 <HAL_DMA_Start_IT+0x200>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d03b      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <HAL_DMA_Start_IT+0x204>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d036      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2d      	ldr	r2, [pc, #180]	; (80067cc <HAL_DMA_Start_IT+0x208>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d031      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2b      	ldr	r2, [pc, #172]	; (80067d0 <HAL_DMA_Start_IT+0x20c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d02c      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <HAL_DMA_Start_IT+0x210>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d027      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_DMA_Start_IT+0x214>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d022      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a27      	ldr	r2, [pc, #156]	; (80067dc <HAL_DMA_Start_IT+0x218>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d01d      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_DMA_Start_IT+0x21c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_DMA_Start_IT+0x220>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_DMA_Start_IT+0x224>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_DMA_Start_IT+0x228>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_DMA_Start_IT+0x22c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <HAL_DMA_Start_IT+0x230>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_DMA_Start_IT+0x1c0>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_DMA_Start_IT+0x1c2>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d036      	beq.n	80067f8 <HAL_DMA_Start_IT+0x234>
		{
			/* Enable Common interrupts*/
			MODIFY_REG(((DMA_Stream_TypeDef* )hdma->Instance)->CR,
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f023 021e 	bic.w	r2, r3, #30
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0216 	orr.w	r2, r2, #22
 800679c:	601a      	str	r2, [r3, #0]
					(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT),
					(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));

			if (hdma->XferHalfCpltCallback != NULL) {
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03e      	beq.n	8006824 <HAL_DMA_Start_IT+0x260>
				/* Enable Half Transfer IT if corresponding Callback is set */
				((DMA_Stream_TypeDef*) hdma->Instance)->CR |= DMA_IT_HT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0208 	orr.w	r2, r2, #8
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e035      	b.n	8006824 <HAL_DMA_Start_IT+0x260>
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
			}
		} else /* BDMA channel */
		{
			/* Enable Common interrupts */
			MODIFY_REG(((BDMA_Channel_TypeDef* )hdma->Instance)->CCR,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 020e 	bic.w	r2, r3, #14
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 020a 	orr.w	r2, r2, #10
 800680a:	601a      	str	r2, [r3, #0]
					(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE),
					(BDMA_CCR_TCIE | BDMA_CCR_TEIE));

			if (hdma->XferHalfCpltCallback != NULL) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <HAL_DMA_Start_IT+0x260>
				/*Enable Half Transfer IT if corresponding Callback is set */
				((BDMA_Channel_TypeDef*) hdma->Instance)->CCR |= BDMA_CCR_HTIE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0204 	orr.w	r2, r2, #4
 8006822:	601a      	str	r2, [r3, #0]
			}
		}

		if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a83      	ldr	r2, [pc, #524]	; (8006a38 <HAL_DMA_Start_IT+0x474>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d072      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a82      	ldr	r2, [pc, #520]	; (8006a3c <HAL_DMA_Start_IT+0x478>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d06d      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a80      	ldr	r2, [pc, #512]	; (8006a40 <HAL_DMA_Start_IT+0x47c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d068      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7f      	ldr	r2, [pc, #508]	; (8006a44 <HAL_DMA_Start_IT+0x480>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d063      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a7d      	ldr	r2, [pc, #500]	; (8006a48 <HAL_DMA_Start_IT+0x484>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d05e      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7c      	ldr	r2, [pc, #496]	; (8006a4c <HAL_DMA_Start_IT+0x488>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d059      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7a      	ldr	r2, [pc, #488]	; (8006a50 <HAL_DMA_Start_IT+0x48c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d054      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a79      	ldr	r2, [pc, #484]	; (8006a54 <HAL_DMA_Start_IT+0x490>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d04f      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a77      	ldr	r2, [pc, #476]	; (8006a58 <HAL_DMA_Start_IT+0x494>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d04a      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a76      	ldr	r2, [pc, #472]	; (8006a5c <HAL_DMA_Start_IT+0x498>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d045      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a74      	ldr	r2, [pc, #464]	; (8006a60 <HAL_DMA_Start_IT+0x49c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d040      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a73      	ldr	r2, [pc, #460]	; (8006a64 <HAL_DMA_Start_IT+0x4a0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d03b      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a71      	ldr	r2, [pc, #452]	; (8006a68 <HAL_DMA_Start_IT+0x4a4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d036      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a70      	ldr	r2, [pc, #448]	; (8006a6c <HAL_DMA_Start_IT+0x4a8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d031      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6e      	ldr	r2, [pc, #440]	; (8006a70 <HAL_DMA_Start_IT+0x4ac>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6d      	ldr	r2, [pc, #436]	; (8006a74 <HAL_DMA_Start_IT+0x4b0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d027      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6b      	ldr	r2, [pc, #428]	; (8006a78 <HAL_DMA_Start_IT+0x4b4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <HAL_DMA_Start_IT+0x4b8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d01d      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a68      	ldr	r2, [pc, #416]	; (8006a80 <HAL_DMA_Start_IT+0x4bc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a67      	ldr	r2, [pc, #412]	; (8006a84 <HAL_DMA_Start_IT+0x4c0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a65      	ldr	r2, [pc, #404]	; (8006a88 <HAL_DMA_Start_IT+0x4c4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a64      	ldr	r2, [pc, #400]	; (8006a8c <HAL_DMA_Start_IT+0x4c8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a62      	ldr	r2, [pc, #392]	; (8006a90 <HAL_DMA_Start_IT+0x4cc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a61      	ldr	r2, [pc, #388]	; (8006a94 <HAL_DMA_Start_IT+0x4d0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d101      	bne.n	8006918 <HAL_DMA_Start_IT+0x354>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_DMA_Start_IT+0x356>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01a      	beq.n	8006954 <HAL_DMA_Start_IT+0x390>
		{
			/* Check if DMAMUX Synchronization is enabled */
			if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U) {
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_DMA_Start_IT+0x378>
				/* Enable DMAMUX sync overrun IT*/
				hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800693a:	601a      	str	r2, [r3, #0]
			}

			if (hdma->DMAmuxRequestGen != 0U) {
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_DMA_Start_IT+0x390>
				/* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
				/* enable the request gen overrun IT */
				hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006952:	601a      	str	r2, [r3, #0]
			}
		}

		/* Enable the Peripheral */
		__HAL_DMA_ENABLE(hdma);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <HAL_DMA_Start_IT+0x474>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a36      	ldr	r2, [pc, #216]	; (8006a3c <HAL_DMA_Start_IT+0x478>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <HAL_DMA_Start_IT+0x47c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a33      	ldr	r2, [pc, #204]	; (8006a44 <HAL_DMA_Start_IT+0x480>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	; (8006a48 <HAL_DMA_Start_IT+0x484>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <HAL_DMA_Start_IT+0x488>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2e      	ldr	r2, [pc, #184]	; (8006a50 <HAL_DMA_Start_IT+0x48c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <HAL_DMA_Start_IT+0x490>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_DMA_Start_IT+0x494>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <HAL_DMA_Start_IT+0x498>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <HAL_DMA_Start_IT+0x49c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <HAL_DMA_Start_IT+0x4a0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <HAL_DMA_Start_IT+0x4a4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a24      	ldr	r2, [pc, #144]	; (8006a6c <HAL_DMA_Start_IT+0x4a8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_DMA_Start_IT+0x4ac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <HAL_DMA_Start_IT+0x4b0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_DMA_Start_IT+0x442>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e012      	b.n	8006a2c <HAL_DMA_Start_IT+0x468>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e009      	b.n	8006a2c <HAL_DMA_Start_IT+0x468>
	} else {
		/* Set the error code to busy */
		hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54

		/* Process unlocked */
		__HAL_UNLOCK(hdma);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Return error status */
		status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40020010 	.word	0x40020010
 8006a3c:	40020028 	.word	0x40020028
 8006a40:	40020040 	.word	0x40020040
 8006a44:	40020058 	.word	0x40020058
 8006a48:	40020070 	.word	0x40020070
 8006a4c:	40020088 	.word	0x40020088
 8006a50:	400200a0 	.word	0x400200a0
 8006a54:	400200b8 	.word	0x400200b8
 8006a58:	40020410 	.word	0x40020410
 8006a5c:	40020428 	.word	0x40020428
 8006a60:	40020440 	.word	0x40020440
 8006a64:	40020458 	.word	0x40020458
 8006a68:	40020470 	.word	0x40020470
 8006a6c:	40020488 	.word	0x40020488
 8006a70:	400204a0 	.word	0x400204a0
 8006a74:	400204b8 	.word	0x400204b8
 8006a78:	58025408 	.word	0x58025408
 8006a7c:	5802541c 	.word	0x5802541c
 8006a80:	58025430 	.word	0x58025430
 8006a84:	58025444 	.word	0x58025444
 8006a88:	58025458 	.word	0x58025458
 8006a8c:	5802546c 	.word	0x5802546c
 8006a90:	58025480 	.word	0x58025480
 8006a94:	58025494 	.word	0x58025494

08006a98 <HAL_DMA_Abort>:
 *        while a data transfer is ongoing, the current data will be transferred
 *        and the Stream will be effectively disabled only after the transfer of
 *        this single data is finished.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs_dma;
	BDMA_Base_Registers *regs_bdma;
	const __IO uint32_t *enableRegister;

	uint32_t tickstart = HAL_GetTick();
 8006aa0:	f7fd f90c 	bl	8003cbc <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

	/* Check the DMA peripheral handle */
	if (hdma == NULL) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_DMA_Abort+0x18>
		return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e2dc      	b.n	800706a <HAL_DMA_Abort+0x5d2>
	}

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d008      	beq.n	8006ace <HAL_DMA_Abort+0x36>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e2cd      	b.n	800706a <HAL_DMA_Abort+0x5d2>
	} else {
		/* Disable all the transfer interrupts */
		if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a76      	ldr	r2, [pc, #472]	; (8006cac <HAL_DMA_Abort+0x214>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a74      	ldr	r2, [pc, #464]	; (8006cb0 <HAL_DMA_Abort+0x218>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a73      	ldr	r2, [pc, #460]	; (8006cb4 <HAL_DMA_Abort+0x21c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a71      	ldr	r2, [pc, #452]	; (8006cb8 <HAL_DMA_Abort+0x220>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a70      	ldr	r2, [pc, #448]	; (8006cbc <HAL_DMA_Abort+0x224>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a6e      	ldr	r2, [pc, #440]	; (8006cc0 <HAL_DMA_Abort+0x228>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a6d      	ldr	r2, [pc, #436]	; (8006cc4 <HAL_DMA_Abort+0x22c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a6b      	ldr	r2, [pc, #428]	; (8006cc8 <HAL_DMA_Abort+0x230>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6a      	ldr	r2, [pc, #424]	; (8006ccc <HAL_DMA_Abort+0x234>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a68      	ldr	r2, [pc, #416]	; (8006cd0 <HAL_DMA_Abort+0x238>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a67      	ldr	r2, [pc, #412]	; (8006cd4 <HAL_DMA_Abort+0x23c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a65      	ldr	r2, [pc, #404]	; (8006cd8 <HAL_DMA_Abort+0x240>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a64      	ldr	r2, [pc, #400]	; (8006cdc <HAL_DMA_Abort+0x244>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a62      	ldr	r2, [pc, #392]	; (8006ce0 <HAL_DMA_Abort+0x248>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a61      	ldr	r2, [pc, #388]	; (8006ce4 <HAL_DMA_Abort+0x24c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a5f      	ldr	r2, [pc, #380]	; (8006ce8 <HAL_DMA_Abort+0x250>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Abort+0xda>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_DMA_Abort+0xdc>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <HAL_DMA_Abort+0x108>
		{
			/* Disable DMA All Interrupts  */
			((DMA_Stream_TypeDef*) hdma->Instance)->CR &= ~(DMA_IT_TC
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 021e 	bic.w	r2, r2, #30
 8006b86:	601a      	str	r2, [r3, #0]
					| DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
			((DMA_Stream_TypeDef*) hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b96:	615a      	str	r2, [r3, #20]

			enableRegister =
					(__IO uint32_t*) (&(((DMA_Stream_TypeDef*) hdma->Instance)->CR));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
			enableRegister =
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e00a      	b.n	8006bb6 <HAL_DMA_Abort+0x11e>
		} else /* BDMA channel */
		{
			/* Disable DMA All Interrupts */
			((BDMA_Channel_TypeDef*) hdma->Instance)->CCR &= ~(BDMA_CCR_TCIE
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 020e 	bic.w	r2, r2, #14
 8006bae:	601a      	str	r2, [r3, #0]
					| BDMA_CCR_HTIE | BDMA_CCR_TEIE);

			enableRegister =
					(__IO uint32_t*) (&(((BDMA_Channel_TypeDef*) hdma->Instance)->CCR));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
			enableRegister =
 8006bb4:	617b      	str	r3, [r7, #20]
		}

		if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3c      	ldr	r2, [pc, #240]	; (8006cac <HAL_DMA_Abort+0x214>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d072      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a3a      	ldr	r2, [pc, #232]	; (8006cb0 <HAL_DMA_Abort+0x218>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d06d      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a39      	ldr	r2, [pc, #228]	; (8006cb4 <HAL_DMA_Abort+0x21c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d068      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a37      	ldr	r2, [pc, #220]	; (8006cb8 <HAL_DMA_Abort+0x220>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d063      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a36      	ldr	r2, [pc, #216]	; (8006cbc <HAL_DMA_Abort+0x224>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d05e      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a34      	ldr	r2, [pc, #208]	; (8006cc0 <HAL_DMA_Abort+0x228>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d059      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a33      	ldr	r2, [pc, #204]	; (8006cc4 <HAL_DMA_Abort+0x22c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d054      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a31      	ldr	r2, [pc, #196]	; (8006cc8 <HAL_DMA_Abort+0x230>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04f      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a30      	ldr	r2, [pc, #192]	; (8006ccc <HAL_DMA_Abort+0x234>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2e      	ldr	r2, [pc, #184]	; (8006cd0 <HAL_DMA_Abort+0x238>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <HAL_DMA_Abort+0x23c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	; (8006cd8 <HAL_DMA_Abort+0x240>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <HAL_DMA_Abort+0x244>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <HAL_DMA_Abort+0x248>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a27      	ldr	r2, [pc, #156]	; (8006ce4 <HAL_DMA_Abort+0x24c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a25      	ldr	r2, [pc, #148]	; (8006ce8 <HAL_DMA_Abort+0x250>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a24      	ldr	r2, [pc, #144]	; (8006cec <HAL_DMA_Abort+0x254>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_DMA_Abort+0x258>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a21      	ldr	r2, [pc, #132]	; (8006cf4 <HAL_DMA_Abort+0x25c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_DMA_Abort+0x260>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	; (8006cfc <HAL_DMA_Abort+0x264>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	; (8006d00 <HAL_DMA_Abort+0x268>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	; (8006d04 <HAL_DMA_Abort+0x26c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <HAL_DMA_Abort+0x270>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d132      	bne.n	8006d0c <HAL_DMA_Abort+0x274>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e031      	b.n	8006d0e <HAL_DMA_Abort+0x276>
 8006caa:	bf00      	nop
 8006cac:	40020010 	.word	0x40020010
 8006cb0:	40020028 	.word	0x40020028
 8006cb4:	40020040 	.word	0x40020040
 8006cb8:	40020058 	.word	0x40020058
 8006cbc:	40020070 	.word	0x40020070
 8006cc0:	40020088 	.word	0x40020088
 8006cc4:	400200a0 	.word	0x400200a0
 8006cc8:	400200b8 	.word	0x400200b8
 8006ccc:	40020410 	.word	0x40020410
 8006cd0:	40020428 	.word	0x40020428
 8006cd4:	40020440 	.word	0x40020440
 8006cd8:	40020458 	.word	0x40020458
 8006cdc:	40020470 	.word	0x40020470
 8006ce0:	40020488 	.word	0x40020488
 8006ce4:	400204a0 	.word	0x400204a0
 8006ce8:	400204b8 	.word	0x400204b8
 8006cec:	58025408 	.word	0x58025408
 8006cf0:	5802541c 	.word	0x5802541c
 8006cf4:	58025430 	.word	0x58025430
 8006cf8:	58025444 	.word	0x58025444
 8006cfc:	58025458 	.word	0x58025458
 8006d00:	5802546c 	.word	0x5802546c
 8006d04:	58025480 	.word	0x58025480
 8006d08:	58025494 	.word	0x58025494
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_DMA_Abort+0x28a>
		{
			/* disable the DMAMUX sync overrun IT */
			hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d20:	601a      	str	r2, [r3, #0]
		}

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6d      	ldr	r2, [pc, #436]	; (8006edc <HAL_DMA_Abort+0x444>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d04a      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6b      	ldr	r2, [pc, #428]	; (8006ee0 <HAL_DMA_Abort+0x448>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d045      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6a      	ldr	r2, [pc, #424]	; (8006ee4 <HAL_DMA_Abort+0x44c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d040      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a68      	ldr	r2, [pc, #416]	; (8006ee8 <HAL_DMA_Abort+0x450>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d03b      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a67      	ldr	r2, [pc, #412]	; (8006eec <HAL_DMA_Abort+0x454>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d036      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a65      	ldr	r2, [pc, #404]	; (8006ef0 <HAL_DMA_Abort+0x458>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d031      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a64      	ldr	r2, [pc, #400]	; (8006ef4 <HAL_DMA_Abort+0x45c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d02c      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a62      	ldr	r2, [pc, #392]	; (8006ef8 <HAL_DMA_Abort+0x460>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d027      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a61      	ldr	r2, [pc, #388]	; (8006efc <HAL_DMA_Abort+0x464>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5f      	ldr	r2, [pc, #380]	; (8006f00 <HAL_DMA_Abort+0x468>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a5e      	ldr	r2, [pc, #376]	; (8006f04 <HAL_DMA_Abort+0x46c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5c      	ldr	r2, [pc, #368]	; (8006f08 <HAL_DMA_Abort+0x470>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a5b      	ldr	r2, [pc, #364]	; (8006f0c <HAL_DMA_Abort+0x474>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a59      	ldr	r2, [pc, #356]	; (8006f10 <HAL_DMA_Abort+0x478>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a58      	ldr	r2, [pc, #352]	; (8006f14 <HAL_DMA_Abort+0x47c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a56      	ldr	r2, [pc, #344]	; (8006f18 <HAL_DMA_Abort+0x480>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d108      	bne.n	8006dd4 <HAL_DMA_Abort+0x33c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e007      	b.n	8006de4 <HAL_DMA_Abort+0x34c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

		/* Check if the DMA Stream is effectively disabled */
		while (((*enableRegister) & DMA_SxCR_EN) != 0U) {
 8006de4:	e013      	b.n	8006e0e <HAL_DMA_Abort+0x376>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8006de6:	f7fc ff69 	bl	8003cbc <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d90c      	bls.n	8006e0e <HAL_DMA_Abort+0x376>
				/* Update error code */
				hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_ERROR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				/* Process Unlocked */
				__HAL_UNLOCK(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

				return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e12d      	b.n	800706a <HAL_DMA_Abort+0x5d2>
		while (((*enableRegister) & DMA_SxCR_EN) != 0U) {
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e5      	bne.n	8006de6 <HAL_DMA_Abort+0x34e>
			}
		}

		/* Clear all interrupt flags at correct offset within the register */
		if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <HAL_DMA_Abort+0x444>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d04a      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <HAL_DMA_Abort+0x448>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <HAL_DMA_Abort+0x44c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d040      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <HAL_DMA_Abort+0x450>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a29      	ldr	r2, [pc, #164]	; (8006eec <HAL_DMA_Abort+0x454>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a27      	ldr	r2, [pc, #156]	; (8006ef0 <HAL_DMA_Abort+0x458>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <HAL_DMA_Abort+0x45c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <HAL_DMA_Abort+0x460>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a23      	ldr	r2, [pc, #140]	; (8006efc <HAL_DMA_Abort+0x464>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <HAL_DMA_Abort+0x468>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <HAL_DMA_Abort+0x46c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <HAL_DMA_Abort+0x470>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <HAL_DMA_Abort+0x474>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_DMA_Abort+0x478>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <HAL_DMA_Abort+0x47c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_DMA_Abort+0x480>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_DMA_Abort+0x426>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_DMA_Abort+0x428>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d02b      	beq.n	8006f1c <HAL_DMA_Abort+0x484>
		{
			regs_dma = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	60bb      	str	r3, [r7, #8]
			regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	223f      	movs	r2, #63	; 0x3f
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	e02a      	b.n	8006f32 <HAL_DMA_Abort+0x49a>
 8006edc:	40020010 	.word	0x40020010
 8006ee0:	40020028 	.word	0x40020028
 8006ee4:	40020040 	.word	0x40020040
 8006ee8:	40020058 	.word	0x40020058
 8006eec:	40020070 	.word	0x40020070
 8006ef0:	40020088 	.word	0x40020088
 8006ef4:	400200a0 	.word	0x400200a0
 8006ef8:	400200b8 	.word	0x400200b8
 8006efc:	40020410 	.word	0x40020410
 8006f00:	40020428 	.word	0x40020428
 8006f04:	40020440 	.word	0x40020440
 8006f08:	40020458 	.word	0x40020458
 8006f0c:	40020470 	.word	0x40020470
 8006f10:	40020488 	.word	0x40020488
 8006f14:	400204a0 	.word	0x400204a0
 8006f18:	400204b8 	.word	0x400204b8
		} else /* BDMA channel */
		{
			regs_bdma = (BDMA_Base_Registers*) hdma->StreamBaseAddress;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	60fb      	str	r3, [r7, #12]
			regs_bdma->IFCR =
					((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	409a      	lsls	r2, r3
			regs_bdma->IFCR =
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
		}

		if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4f      	ldr	r2, [pc, #316]	; (8007074 <HAL_DMA_Abort+0x5dc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d072      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4d      	ldr	r2, [pc, #308]	; (8007078 <HAL_DMA_Abort+0x5e0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d06d      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	; (800707c <HAL_DMA_Abort+0x5e4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d068      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a4a      	ldr	r2, [pc, #296]	; (8007080 <HAL_DMA_Abort+0x5e8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d063      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a49      	ldr	r2, [pc, #292]	; (8007084 <HAL_DMA_Abort+0x5ec>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d05e      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a47      	ldr	r2, [pc, #284]	; (8007088 <HAL_DMA_Abort+0x5f0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d059      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a46      	ldr	r2, [pc, #280]	; (800708c <HAL_DMA_Abort+0x5f4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d054      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a44      	ldr	r2, [pc, #272]	; (8007090 <HAL_DMA_Abort+0x5f8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d04f      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a43      	ldr	r2, [pc, #268]	; (8007094 <HAL_DMA_Abort+0x5fc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d04a      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a41      	ldr	r2, [pc, #260]	; (8007098 <HAL_DMA_Abort+0x600>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d045      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a40      	ldr	r2, [pc, #256]	; (800709c <HAL_DMA_Abort+0x604>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d040      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a3e      	ldr	r2, [pc, #248]	; (80070a0 <HAL_DMA_Abort+0x608>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d03b      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <HAL_DMA_Abort+0x60c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d036      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a3b      	ldr	r2, [pc, #236]	; (80070a8 <HAL_DMA_Abort+0x610>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d031      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a3a      	ldr	r2, [pc, #232]	; (80070ac <HAL_DMA_Abort+0x614>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d02c      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a38      	ldr	r2, [pc, #224]	; (80070b0 <HAL_DMA_Abort+0x618>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d027      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a37      	ldr	r2, [pc, #220]	; (80070b4 <HAL_DMA_Abort+0x61c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a35      	ldr	r2, [pc, #212]	; (80070b8 <HAL_DMA_Abort+0x620>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a34      	ldr	r2, [pc, #208]	; (80070bc <HAL_DMA_Abort+0x624>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a32      	ldr	r2, [pc, #200]	; (80070c0 <HAL_DMA_Abort+0x628>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a31      	ldr	r2, [pc, #196]	; (80070c4 <HAL_DMA_Abort+0x62c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a2f      	ldr	r2, [pc, #188]	; (80070c8 <HAL_DMA_Abort+0x630>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_DMA_Abort+0x634>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <HAL_DMA_Abort+0x638>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_DMA_Abort+0x58e>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <HAL_DMA_Abort+0x590>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d015      	beq.n	8007058 <HAL_DMA_Abort+0x5c0>
		{
			/* Clear the DMAMUX synchro overrun flag */
			hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007034:	605a      	str	r2, [r3, #4]

			if (hdma->DMAmuxRequestGen != 0U) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <HAL_DMA_Abort+0x5c0>
				/* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
				/* disable the request gen overrun IT */
				hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800704c:	601a      	str	r2, [r3, #0]

				/* Clear the DMAMUX request generator overrun flag */
				hdma->DMAmuxRequestGenStatus->RGCFR =
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
						hdma->DMAmuxRequestGenStatusMask;
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6f52      	ldr	r2, [r2, #116]	; 0x74
				hdma->DMAmuxRequestGenStatus->RGCFR =
 8007056:	605a      	str	r2, [r3, #4]
			}
		}

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40020010 	.word	0x40020010
 8007078:	40020028 	.word	0x40020028
 800707c:	40020040 	.word	0x40020040
 8007080:	40020058 	.word	0x40020058
 8007084:	40020070 	.word	0x40020070
 8007088:	40020088 	.word	0x40020088
 800708c:	400200a0 	.word	0x400200a0
 8007090:	400200b8 	.word	0x400200b8
 8007094:	40020410 	.word	0x40020410
 8007098:	40020428 	.word	0x40020428
 800709c:	40020440 	.word	0x40020440
 80070a0:	40020458 	.word	0x40020458
 80070a4:	40020470 	.word	0x40020470
 80070a8:	40020488 	.word	0x40020488
 80070ac:	400204a0 	.word	0x400204a0
 80070b0:	400204b8 	.word	0x400204b8
 80070b4:	58025408 	.word	0x58025408
 80070b8:	5802541c 	.word	0x5802541c
 80070bc:	58025430 	.word	0x58025430
 80070c0:	58025444 	.word	0x58025444
 80070c4:	58025458 	.word	0x58025458
 80070c8:	5802546c 	.word	0x5802546c
 80070cc:	58025480 	.word	0x58025480
 80070d0:	58025494 	.word	0x58025494

080070d4 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	BDMA_Base_Registers *regs_bdma;

	/* Check the DMA peripheral handle */
	if (hdma == NULL) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_DMA_Abort_IT+0x12>
		return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e237      	b.n	8007556 <HAL_DMA_Abort_IT+0x482>
	}

	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d004      	beq.n	80070fc <HAL_DMA_Abort_IT+0x28>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2280      	movs	r2, #128	; 0x80
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
		return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e22c      	b.n	8007556 <HAL_DMA_Abort_IT+0x482>
	} else {
		if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5c      	ldr	r2, [pc, #368]	; (8007274 <HAL_DMA_Abort_IT+0x1a0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d04a      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5b      	ldr	r2, [pc, #364]	; (8007278 <HAL_DMA_Abort_IT+0x1a4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d045      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a59      	ldr	r2, [pc, #356]	; (800727c <HAL_DMA_Abort_IT+0x1a8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d040      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a58      	ldr	r2, [pc, #352]	; (8007280 <HAL_DMA_Abort_IT+0x1ac>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d03b      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a56      	ldr	r2, [pc, #344]	; (8007284 <HAL_DMA_Abort_IT+0x1b0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d036      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a55      	ldr	r2, [pc, #340]	; (8007288 <HAL_DMA_Abort_IT+0x1b4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d031      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a53      	ldr	r2, [pc, #332]	; (800728c <HAL_DMA_Abort_IT+0x1b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d02c      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a52      	ldr	r2, [pc, #328]	; (8007290 <HAL_DMA_Abort_IT+0x1bc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d027      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a50      	ldr	r2, [pc, #320]	; (8007294 <HAL_DMA_Abort_IT+0x1c0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d022      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a4f      	ldr	r2, [pc, #316]	; (8007298 <HAL_DMA_Abort_IT+0x1c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d01d      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a4d      	ldr	r2, [pc, #308]	; (800729c <HAL_DMA_Abort_IT+0x1c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d018      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a4c      	ldr	r2, [pc, #304]	; (80072a0 <HAL_DMA_Abort_IT+0x1cc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d013      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a4a      	ldr	r2, [pc, #296]	; (80072a4 <HAL_DMA_Abort_IT+0x1d0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00e      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a49      	ldr	r2, [pc, #292]	; (80072a8 <HAL_DMA_Abort_IT+0x1d4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d009      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a47      	ldr	r2, [pc, #284]	; (80072ac <HAL_DMA_Abort_IT+0x1d8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <HAL_DMA_Abort_IT+0xc8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a46      	ldr	r2, [pc, #280]	; (80072b0 <HAL_DMA_Abort_IT+0x1dc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d101      	bne.n	80071a0 <HAL_DMA_Abort_IT+0xcc>
 800719c:	2301      	movs	r3, #1
 800719e:	e000      	b.n	80071a2 <HAL_DMA_Abort_IT+0xce>
 80071a0:	2300      	movs	r3, #0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8086 	beq.w	80072b4 <HAL_DMA_Abort_IT+0x1e0>
		{
			/* Set Abort State  */
			hdma->State = HAL_DMA_STATE_ABORT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2204      	movs	r2, #4
 80071ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Disable the stream */
			__HAL_DMA_DISABLE(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2f      	ldr	r2, [pc, #188]	; (8007274 <HAL_DMA_Abort_IT+0x1a0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d04a      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2e      	ldr	r2, [pc, #184]	; (8007278 <HAL_DMA_Abort_IT+0x1a4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d045      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2c      	ldr	r2, [pc, #176]	; (800727c <HAL_DMA_Abort_IT+0x1a8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d040      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2b      	ldr	r2, [pc, #172]	; (8007280 <HAL_DMA_Abort_IT+0x1ac>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d03b      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a29      	ldr	r2, [pc, #164]	; (8007284 <HAL_DMA_Abort_IT+0x1b0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d036      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a28      	ldr	r2, [pc, #160]	; (8007288 <HAL_DMA_Abort_IT+0x1b4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d031      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a26      	ldr	r2, [pc, #152]	; (800728c <HAL_DMA_Abort_IT+0x1b8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02c      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a25      	ldr	r2, [pc, #148]	; (8007290 <HAL_DMA_Abort_IT+0x1bc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d027      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a23      	ldr	r2, [pc, #140]	; (8007294 <HAL_DMA_Abort_IT+0x1c0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a22      	ldr	r2, [pc, #136]	; (8007298 <HAL_DMA_Abort_IT+0x1c4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d01d      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_DMA_Abort_IT+0x1c8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1f      	ldr	r2, [pc, #124]	; (80072a0 <HAL_DMA_Abort_IT+0x1cc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <HAL_DMA_Abort_IT+0x1d0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <HAL_DMA_Abort_IT+0x1d4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1a      	ldr	r2, [pc, #104]	; (80072ac <HAL_DMA_Abort_IT+0x1d8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_DMA_Abort_IT+0x17c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <HAL_DMA_Abort_IT+0x1dc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d108      	bne.n	8007262 <HAL_DMA_Abort_IT+0x18e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e178      	b.n	8007554 <HAL_DMA_Abort_IT+0x480>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e16f      	b.n	8007554 <HAL_DMA_Abort_IT+0x480>
 8007274:	40020010 	.word	0x40020010
 8007278:	40020028 	.word	0x40020028
 800727c:	40020040 	.word	0x40020040
 8007280:	40020058 	.word	0x40020058
 8007284:	40020070 	.word	0x40020070
 8007288:	40020088 	.word	0x40020088
 800728c:	400200a0 	.word	0x400200a0
 8007290:	400200b8 	.word	0x400200b8
 8007294:	40020410 	.word	0x40020410
 8007298:	40020428 	.word	0x40020428
 800729c:	40020440 	.word	0x40020440
 80072a0:	40020458 	.word	0x40020458
 80072a4:	40020470 	.word	0x40020470
 80072a8:	40020488 	.word	0x40020488
 80072ac:	400204a0 	.word	0x400204a0
 80072b0:	400204b8 	.word	0x400204b8
		} else /* BDMA channel */
		{
			/* Disable DMA All Interrupts  */
			((BDMA_Channel_TypeDef*) hdma->Instance)->CCR &= ~(BDMA_CCR_TCIE
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 020e 	bic.w	r2, r2, #14
 80072c2:	601a      	str	r2, [r3, #0]
					| BDMA_CCR_HTIE | BDMA_CCR_TEIE);

			/* Disable the channel */
			__HAL_DMA_DISABLE(hdma);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a6c      	ldr	r2, [pc, #432]	; (800747c <HAL_DMA_Abort_IT+0x3a8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d04a      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a6b      	ldr	r2, [pc, #428]	; (8007480 <HAL_DMA_Abort_IT+0x3ac>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d045      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a69      	ldr	r2, [pc, #420]	; (8007484 <HAL_DMA_Abort_IT+0x3b0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d040      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a68      	ldr	r2, [pc, #416]	; (8007488 <HAL_DMA_Abort_IT+0x3b4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d03b      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a66      	ldr	r2, [pc, #408]	; (800748c <HAL_DMA_Abort_IT+0x3b8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d036      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a65      	ldr	r2, [pc, #404]	; (8007490 <HAL_DMA_Abort_IT+0x3bc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d031      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a63      	ldr	r2, [pc, #396]	; (8007494 <HAL_DMA_Abort_IT+0x3c0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d02c      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a62      	ldr	r2, [pc, #392]	; (8007498 <HAL_DMA_Abort_IT+0x3c4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d027      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a60      	ldr	r2, [pc, #384]	; (800749c <HAL_DMA_Abort_IT+0x3c8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d022      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a5f      	ldr	r2, [pc, #380]	; (80074a0 <HAL_DMA_Abort_IT+0x3cc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d01d      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a5d      	ldr	r2, [pc, #372]	; (80074a4 <HAL_DMA_Abort_IT+0x3d0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d018      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a5c      	ldr	r2, [pc, #368]	; (80074a8 <HAL_DMA_Abort_IT+0x3d4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a5a      	ldr	r2, [pc, #360]	; (80074ac <HAL_DMA_Abort_IT+0x3d8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a59      	ldr	r2, [pc, #356]	; (80074b0 <HAL_DMA_Abort_IT+0x3dc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a57      	ldr	r2, [pc, #348]	; (80074b4 <HAL_DMA_Abort_IT+0x3e0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_DMA_Abort_IT+0x290>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a56      	ldr	r2, [pc, #344]	; (80074b8 <HAL_DMA_Abort_IT+0x3e4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d108      	bne.n	8007376 <HAL_DMA_Abort_IT+0x2a2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e007      	b.n	8007386 <HAL_DMA_Abort_IT+0x2b2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]

			if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a3c      	ldr	r2, [pc, #240]	; (800747c <HAL_DMA_Abort_IT+0x3a8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d072      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a3a      	ldr	r2, [pc, #232]	; (8007480 <HAL_DMA_Abort_IT+0x3ac>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d06d      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a39      	ldr	r2, [pc, #228]	; (8007484 <HAL_DMA_Abort_IT+0x3b0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d068      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a37      	ldr	r2, [pc, #220]	; (8007488 <HAL_DMA_Abort_IT+0x3b4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d063      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a36      	ldr	r2, [pc, #216]	; (800748c <HAL_DMA_Abort_IT+0x3b8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d05e      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a34      	ldr	r2, [pc, #208]	; (8007490 <HAL_DMA_Abort_IT+0x3bc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d059      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a33      	ldr	r2, [pc, #204]	; (8007494 <HAL_DMA_Abort_IT+0x3c0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d054      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a31      	ldr	r2, [pc, #196]	; (8007498 <HAL_DMA_Abort_IT+0x3c4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d04f      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a30      	ldr	r2, [pc, #192]	; (800749c <HAL_DMA_Abort_IT+0x3c8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04a      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a2e      	ldr	r2, [pc, #184]	; (80074a0 <HAL_DMA_Abort_IT+0x3cc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d045      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2d      	ldr	r2, [pc, #180]	; (80074a4 <HAL_DMA_Abort_IT+0x3d0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d040      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <HAL_DMA_Abort_IT+0x3d4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d03b      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <HAL_DMA_Abort_IT+0x3d8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d036      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <HAL_DMA_Abort_IT+0x3dc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a27      	ldr	r2, [pc, #156]	; (80074b4 <HAL_DMA_Abort_IT+0x3e0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d02c      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <HAL_DMA_Abort_IT+0x3e4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d027      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a24      	ldr	r2, [pc, #144]	; (80074bc <HAL_DMA_Abort_IT+0x3e8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_DMA_Abort_IT+0x3ec>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <HAL_DMA_Abort_IT+0x3f0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <HAL_DMA_Abort_IT+0x3f4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1e      	ldr	r2, [pc, #120]	; (80074cc <HAL_DMA_Abort_IT+0x3f8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <HAL_DMA_Abort_IT+0x3fc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <HAL_DMA_Abort_IT+0x400>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_DMA_Abort_IT+0x3a2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <HAL_DMA_Abort_IT+0x404>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d132      	bne.n	80074dc <HAL_DMA_Abort_IT+0x408>
 8007476:	2301      	movs	r3, #1
 8007478:	e031      	b.n	80074de <HAL_DMA_Abort_IT+0x40a>
 800747a:	bf00      	nop
 800747c:	40020010 	.word	0x40020010
 8007480:	40020028 	.word	0x40020028
 8007484:	40020040 	.word	0x40020040
 8007488:	40020058 	.word	0x40020058
 800748c:	40020070 	.word	0x40020070
 8007490:	40020088 	.word	0x40020088
 8007494:	400200a0 	.word	0x400200a0
 8007498:	400200b8 	.word	0x400200b8
 800749c:	40020410 	.word	0x40020410
 80074a0:	40020428 	.word	0x40020428
 80074a4:	40020440 	.word	0x40020440
 80074a8:	40020458 	.word	0x40020458
 80074ac:	40020470 	.word	0x40020470
 80074b0:	40020488 	.word	0x40020488
 80074b4:	400204a0 	.word	0x400204a0
 80074b8:	400204b8 	.word	0x400204b8
 80074bc:	58025408 	.word	0x58025408
 80074c0:	5802541c 	.word	0x5802541c
 80074c4:	58025430 	.word	0x58025430
 80074c8:	58025444 	.word	0x58025444
 80074cc:	58025458 	.word	0x58025458
 80074d0:	5802546c 	.word	0x5802546c
 80074d4:	58025480 	.word	0x58025480
 80074d8:	58025494 	.word	0x58025494
 80074dc:	2300      	movs	r3, #0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d028      	beq.n	8007534 <HAL_DMA_Abort_IT+0x460>
			{
				/* disable the DMAMUX sync overrun IT */
				hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f0:	601a      	str	r2, [r3, #0]

				/* Clear all flags */
				regs_bdma = (BDMA_Base_Registers*) hdma->StreamBaseAddress;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f6:	60fb      	str	r3, [r7, #12]
				regs_bdma->IFCR = ((BDMA_IFCR_CGIF0)
						<< (hdma->StreamIndex & 0x1FU));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
				regs_bdma->IFCR = ((BDMA_IFCR_CGIF0)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	605a      	str	r2, [r3, #4]

				/* Clear the DMAMUX synchro overrun flag */
				hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007510:	605a      	str	r2, [r3, #4]

				if (hdma->DMAmuxRequestGen != 0U) {
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_DMA_Abort_IT+0x460>
					/* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
					/* disable the request gen overrun IT */
					hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007528:	601a      	str	r2, [r3, #0]

					/* Clear the DMAMUX request generator overrun flag */
					hdma->DMAmuxRequestGenStatus->RGCFR =
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
							hdma->DMAmuxRequestGenStatusMask;
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6f52      	ldr	r2, [r2, #116]	; 0x74
					hdma->DMAmuxRequestGenStatus->RGCFR =
 8007532:	605a      	str	r2, [r3, #4]
				}
			}

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Process Unlocked */
			__HAL_UNLOCK(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

			/* Call User Abort callback */
			if (hdma->XferAbortCallback != NULL) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_DMA_Abort_IT+0x480>
				hdma->XferAbortCallback(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
			}
		}
	}

	return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <HAL_DMA_IRQHandler>:
 * @brief  Handles DMA interrupt request.
 * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval None
 */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	uint32_t tmpisr_dma, tmpisr_bdma;
	uint32_t ccr_reg;
	__IO uint32_t count = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout = SystemCoreClock / 9600U;
 800756c:	4b67      	ldr	r3, [pc, #412]	; (800770c <HAL_DMA_IRQHandler+0x1ac>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a67      	ldr	r2, [pc, #412]	; (8007710 <HAL_DMA_IRQHandler+0x1b0>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	0a9b      	lsrs	r3, r3, #10
 8007578:	627b      	str	r3, [r7, #36]	; 0x24

	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs_dma = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	623b      	str	r3, [r7, #32]
	BDMA_Base_Registers *regs_bdma =
			(BDMA_Base_Registers*) hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	BDMA_Base_Registers *regs_bdma =
 8007584:	61fb      	str	r3, [r7, #28]

	tmpisr_dma = regs_dma->ISR;
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	61bb      	str	r3, [r7, #24]
	tmpisr_bdma = regs_bdma->ISR;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]

	if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a5f      	ldr	r2, [pc, #380]	; (8007714 <HAL_DMA_IRQHandler+0x1b4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a5d      	ldr	r2, [pc, #372]	; (8007718 <HAL_DMA_IRQHandler+0x1b8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a5c      	ldr	r2, [pc, #368]	; (800771c <HAL_DMA_IRQHandler+0x1bc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5a      	ldr	r2, [pc, #360]	; (8007720 <HAL_DMA_IRQHandler+0x1c0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a59      	ldr	r2, [pc, #356]	; (8007724 <HAL_DMA_IRQHandler+0x1c4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a57      	ldr	r2, [pc, #348]	; (8007728 <HAL_DMA_IRQHandler+0x1c8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a56      	ldr	r2, [pc, #344]	; (800772c <HAL_DMA_IRQHandler+0x1cc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a54      	ldr	r2, [pc, #336]	; (8007730 <HAL_DMA_IRQHandler+0x1d0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a53      	ldr	r2, [pc, #332]	; (8007734 <HAL_DMA_IRQHandler+0x1d4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a51      	ldr	r2, [pc, #324]	; (8007738 <HAL_DMA_IRQHandler+0x1d8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a50      	ldr	r2, [pc, #320]	; (800773c <HAL_DMA_IRQHandler+0x1dc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <HAL_DMA_IRQHandler+0x1e0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4d      	ldr	r2, [pc, #308]	; (8007744 <HAL_DMA_IRQHandler+0x1e4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a4b      	ldr	r2, [pc, #300]	; (8007748 <HAL_DMA_IRQHandler+0x1e8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a4a      	ldr	r2, [pc, #296]	; (800774c <HAL_DMA_IRQHandler+0x1ec>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a48      	ldr	r2, [pc, #288]	; (8007750 <HAL_DMA_IRQHandler+0x1f0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d101      	bne.n	8007636 <HAL_DMA_IRQHandler+0xd6>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_DMA_IRQHandler+0xd8>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 842b 	beq.w	8007e94 <HAL_DMA_IRQHandler+0x934>
	{
		/* Transfer Error Interrupt management ***************************************/
		if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU)))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2208      	movs	r2, #8
 8007648:	409a      	lsls	r2, r3
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80a2 	beq.w	8007798 <HAL_DMA_IRQHandler+0x238>
				!= 0U) {
			if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2e      	ldr	r2, [pc, #184]	; (8007714 <HAL_DMA_IRQHandler+0x1b4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d04a      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <HAL_DMA_IRQHandler+0x1b8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d045      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2b      	ldr	r2, [pc, #172]	; (800771c <HAL_DMA_IRQHandler+0x1bc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d040      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <HAL_DMA_IRQHandler+0x1c0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d03b      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a28      	ldr	r2, [pc, #160]	; (8007724 <HAL_DMA_IRQHandler+0x1c4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d036      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a27      	ldr	r2, [pc, #156]	; (8007728 <HAL_DMA_IRQHandler+0x1c8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d031      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a25      	ldr	r2, [pc, #148]	; (800772c <HAL_DMA_IRQHandler+0x1cc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d02c      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a24      	ldr	r2, [pc, #144]	; (8007730 <HAL_DMA_IRQHandler+0x1d0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d027      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a22      	ldr	r2, [pc, #136]	; (8007734 <HAL_DMA_IRQHandler+0x1d4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d022      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a21      	ldr	r2, [pc, #132]	; (8007738 <HAL_DMA_IRQHandler+0x1d8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d01d      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1f      	ldr	r2, [pc, #124]	; (800773c <HAL_DMA_IRQHandler+0x1dc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d018      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <HAL_DMA_IRQHandler+0x1e0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d013      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_DMA_IRQHandler+0x1e4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00e      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_DMA_IRQHandler+0x1e8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d009      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a19      	ldr	r2, [pc, #100]	; (800774c <HAL_DMA_IRQHandler+0x1ec>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a18      	ldr	r2, [pc, #96]	; (8007750 <HAL_DMA_IRQHandler+0x1f0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d12f      	bne.n	8007754 <HAL_DMA_IRQHandler+0x1f4>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2301      	movne	r3, #1
 8007704:	2300      	moveq	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e02e      	b.n	8007768 <HAL_DMA_IRQHandler+0x208>
 800770a:	bf00      	nop
 800770c:	24000090 	.word	0x24000090
 8007710:	1b4e81b5 	.word	0x1b4e81b5
 8007714:	40020010 	.word	0x40020010
 8007718:	40020028 	.word	0x40020028
 800771c:	40020040 	.word	0x40020040
 8007720:	40020058 	.word	0x40020058
 8007724:	40020070 	.word	0x40020070
 8007728:	40020088 	.word	0x40020088
 800772c:	400200a0 	.word	0x400200a0
 8007730:	400200b8 	.word	0x400200b8
 8007734:	40020410 	.word	0x40020410
 8007738:	40020428 	.word	0x40020428
 800773c:	40020440 	.word	0x40020440
 8007740:	40020458 	.word	0x40020458
 8007744:	40020470 	.word	0x40020470
 8007748:	40020488 	.word	0x40020488
 800774c:	400204a0 	.word	0x400204a0
 8007750:	400204b8 	.word	0x400204b8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2301      	movne	r3, #1
 8007764:	2300      	moveq	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d015      	beq.n	8007798 <HAL_DMA_IRQHandler+0x238>
				/* Disable the transfer error interrupt */
				((DMA_Stream_TypeDef*) hdma->Instance)->CR &= ~(DMA_IT_TE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	601a      	str	r2, [r3, #0]

				/* Clear the transfer error flag */
				regs_dma->IFCR = DMA_FLAG_TEIF0_4
						<< (hdma->StreamIndex & 0x1FU);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	2208      	movs	r2, #8
 8007786:	409a      	lsls	r2, r3
				regs_dma->IFCR = DMA_FLAG_TEIF0_4
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	609a      	str	r2, [r3, #8]

				/* Update error code */
				hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f043 0201 	orr.w	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
			}
		}
		/* FIFO Error Interrupt management ******************************************/
		if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU)))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	f003 031f 	and.w	r3, r3, #31
				!= 0U) {
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	fa22 f303 	lsr.w	r3, r2, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
		if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU)))
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d06e      	beq.n	800788c <HAL_DMA_IRQHandler+0x32c>
			if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a69      	ldr	r2, [pc, #420]	; (8007958 <HAL_DMA_IRQHandler+0x3f8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d04a      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a67      	ldr	r2, [pc, #412]	; (800795c <HAL_DMA_IRQHandler+0x3fc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d045      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a66      	ldr	r2, [pc, #408]	; (8007960 <HAL_DMA_IRQHandler+0x400>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d040      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a64      	ldr	r2, [pc, #400]	; (8007964 <HAL_DMA_IRQHandler+0x404>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d03b      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a63      	ldr	r2, [pc, #396]	; (8007968 <HAL_DMA_IRQHandler+0x408>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d036      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a61      	ldr	r2, [pc, #388]	; (800796c <HAL_DMA_IRQHandler+0x40c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d031      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a60      	ldr	r2, [pc, #384]	; (8007970 <HAL_DMA_IRQHandler+0x410>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d02c      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a5e      	ldr	r2, [pc, #376]	; (8007974 <HAL_DMA_IRQHandler+0x414>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d027      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a5d      	ldr	r2, [pc, #372]	; (8007978 <HAL_DMA_IRQHandler+0x418>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d022      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a5b      	ldr	r2, [pc, #364]	; (800797c <HAL_DMA_IRQHandler+0x41c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01d      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a5a      	ldr	r2, [pc, #360]	; (8007980 <HAL_DMA_IRQHandler+0x420>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d018      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a58      	ldr	r2, [pc, #352]	; (8007984 <HAL_DMA_IRQHandler+0x424>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a57      	ldr	r2, [pc, #348]	; (8007988 <HAL_DMA_IRQHandler+0x428>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00e      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a55      	ldr	r2, [pc, #340]	; (800798c <HAL_DMA_IRQHandler+0x42c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a54      	ldr	r2, [pc, #336]	; (8007990 <HAL_DMA_IRQHandler+0x430>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a52      	ldr	r2, [pc, #328]	; (8007994 <HAL_DMA_IRQHandler+0x434>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d10a      	bne.n	8007864 <HAL_DMA_IRQHandler+0x304>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e003      	b.n	800786c <HAL_DMA_IRQHandler+0x30c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <HAL_DMA_IRQHandler+0x32c>
				/* Clear the FIFO error flag */
				regs_dma->IFCR = DMA_FLAG_FEIF0_4
						<< (hdma->StreamIndex & 0x1FU);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2201      	movs	r2, #1
 800787a:	409a      	lsls	r2, r3
				regs_dma->IFCR = DMA_FLAG_FEIF0_4
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	609a      	str	r2, [r3, #8]

				/* Update error code */
				hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007884:	f043 0202 	orr.w	r2, r3, #2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	655a      	str	r2, [r3, #84]	; 0x54
			}
		}
		/* Direct Mode Error Interrupt management ***********************************/
		if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU)))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2204      	movs	r2, #4
 8007896:	409a      	lsls	r2, r3
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 808f 	beq.w	80079c0 <HAL_DMA_IRQHandler+0x460>
				!= 0U) {
			if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <HAL_DMA_IRQHandler+0x3f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d04a      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a2a      	ldr	r2, [pc, #168]	; (800795c <HAL_DMA_IRQHandler+0x3fc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d045      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a29      	ldr	r2, [pc, #164]	; (8007960 <HAL_DMA_IRQHandler+0x400>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d040      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a27      	ldr	r2, [pc, #156]	; (8007964 <HAL_DMA_IRQHandler+0x404>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d03b      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a26      	ldr	r2, [pc, #152]	; (8007968 <HAL_DMA_IRQHandler+0x408>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d036      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a24      	ldr	r2, [pc, #144]	; (800796c <HAL_DMA_IRQHandler+0x40c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d031      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a23      	ldr	r2, [pc, #140]	; (8007970 <HAL_DMA_IRQHandler+0x410>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d02c      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a21      	ldr	r2, [pc, #132]	; (8007974 <HAL_DMA_IRQHandler+0x414>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d027      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <HAL_DMA_IRQHandler+0x418>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <HAL_DMA_IRQHandler+0x41c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d01d      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <HAL_DMA_IRQHandler+0x420>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_DMA_IRQHandler+0x424>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <HAL_DMA_IRQHandler+0x428>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a18      	ldr	r2, [pc, #96]	; (800798c <HAL_DMA_IRQHandler+0x42c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a17      	ldr	r2, [pc, #92]	; (8007990 <HAL_DMA_IRQHandler+0x430>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <HAL_DMA_IRQHandler+0x434>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d12a      	bne.n	8007998 <HAL_DMA_IRQHandler+0x438>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf14      	ite	ne
 8007950:	2301      	movne	r3, #1
 8007952:	2300      	moveq	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e023      	b.n	80079a0 <HAL_DMA_IRQHandler+0x440>
 8007958:	40020010 	.word	0x40020010
 800795c:	40020028 	.word	0x40020028
 8007960:	40020040 	.word	0x40020040
 8007964:	40020058 	.word	0x40020058
 8007968:	40020070 	.word	0x40020070
 800796c:	40020088 	.word	0x40020088
 8007970:	400200a0 	.word	0x400200a0
 8007974:	400200b8 	.word	0x400200b8
 8007978:	40020410 	.word	0x40020410
 800797c:	40020428 	.word	0x40020428
 8007980:	40020440 	.word	0x40020440
 8007984:	40020458 	.word	0x40020458
 8007988:	40020470 	.word	0x40020470
 800798c:	40020488 	.word	0x40020488
 8007990:	400204a0 	.word	0x400204a0
 8007994:	400204b8 	.word	0x400204b8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x460>
				/* Clear the direct mode error flag */
				regs_dma->IFCR = DMA_FLAG_DMEIF0_4
						<< (hdma->StreamIndex & 0x1FU);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2204      	movs	r2, #4
 80079ae:	409a      	lsls	r2, r3
				regs_dma->IFCR = DMA_FLAG_DMEIF0_4
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	609a      	str	r2, [r3, #8]

				/* Update error code */
				hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f043 0204 	orr.w	r2, r3, #4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
			}
		}
		/* Half Transfer Complete Interrupt management ******************************/
		if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU)))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2210      	movs	r2, #16
 80079ca:	409a      	lsls	r2, r3
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80a6 	beq.w	8007b22 <HAL_DMA_IRQHandler+0x5c2>
				!= 0U) {
			if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a85      	ldr	r2, [pc, #532]	; (8007bf0 <HAL_DMA_IRQHandler+0x690>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d04a      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a83      	ldr	r2, [pc, #524]	; (8007bf4 <HAL_DMA_IRQHandler+0x694>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d045      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a82      	ldr	r2, [pc, #520]	; (8007bf8 <HAL_DMA_IRQHandler+0x698>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d040      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a80      	ldr	r2, [pc, #512]	; (8007bfc <HAL_DMA_IRQHandler+0x69c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7f      	ldr	r2, [pc, #508]	; (8007c00 <HAL_DMA_IRQHandler+0x6a0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d036      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a7d      	ldr	r2, [pc, #500]	; (8007c04 <HAL_DMA_IRQHandler+0x6a4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d031      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7c      	ldr	r2, [pc, #496]	; (8007c08 <HAL_DMA_IRQHandler+0x6a8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d02c      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a7a      	ldr	r2, [pc, #488]	; (8007c0c <HAL_DMA_IRQHandler+0x6ac>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a79      	ldr	r2, [pc, #484]	; (8007c10 <HAL_DMA_IRQHandler+0x6b0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a77      	ldr	r2, [pc, #476]	; (8007c14 <HAL_DMA_IRQHandler+0x6b4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a76      	ldr	r2, [pc, #472]	; (8007c18 <HAL_DMA_IRQHandler+0x6b8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a74      	ldr	r2, [pc, #464]	; (8007c1c <HAL_DMA_IRQHandler+0x6bc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a73      	ldr	r2, [pc, #460]	; (8007c20 <HAL_DMA_IRQHandler+0x6c0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a71      	ldr	r2, [pc, #452]	; (8007c24 <HAL_DMA_IRQHandler+0x6c4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <HAL_DMA_IRQHandler+0x6c8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6e      	ldr	r2, [pc, #440]	; (8007c2c <HAL_DMA_IRQHandler+0x6cc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10a      	bne.n	8007a8c <HAL_DMA_IRQHandler+0x52c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bf14      	ite	ne
 8007a84:	2301      	movne	r3, #1
 8007a86:	2300      	moveq	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	e009      	b.n	8007aa0 <HAL_DMA_IRQHandler+0x540>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d03e      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
				/* Clear the half transfer complete flag */
				regs_dma->IFCR = DMA_FLAG_HTIF0_4
						<< (hdma->StreamIndex & 0x1FU);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	2210      	movs	r2, #16
 8007aae:	409a      	lsls	r2, r3
				regs_dma->IFCR = DMA_FLAG_HTIF0_4
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	609a      	str	r2, [r3, #8]

				/* Multi_Buffering mode enabled */
				if (((((DMA_Stream_TypeDef*) hdma->Instance)->CR)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
						& (uint32_t) (DMA_SxCR_DBM)) != 0U) {
 8007aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
				if (((((DMA_Stream_TypeDef*) hdma->Instance)->CR)
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x594>
					/* Current memory buffer used is Memory 0 */
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
							& DMA_SxCR_CT) == 0U) {
 8007ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d108      	bne.n	8007ae2 <HAL_DMA_IRQHandler+0x582>
						if (hdma->XferHalfCpltCallback != NULL) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d024      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
							/* Half transfer callback */
							hdma->XferHalfCpltCallback(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	e01f      	b.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
						}
					}
					/* Current memory buffer used is Memory 1 */
					else {
						if (hdma->XferM1HalfCpltCallback != NULL) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01b      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
							/* Half transfer callback */
							hdma->XferM1HalfCpltCallback(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	e016      	b.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
						}
					}
				} else {
					/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
							& DMA_SxCR_CIRC) == 0U) {
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <HAL_DMA_IRQHandler+0x5b2>
						/* Disable the half transfer interrupt */
						((DMA_Stream_TypeDef*) hdma->Instance)->CR &=
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0208 	bic.w	r2, r2, #8
 8007b10:	601a      	str	r2, [r3, #0]
								~(DMA_IT_HT);
					}

					if (hdma->XferHalfCpltCallback != NULL) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
						/* Half transfer callback */
						hdma->XferHalfCpltCallback(hdma);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
					}
				}
			}
		}
		/* Transfer Complete Interrupt management ***********************************/
		if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU)))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	409a      	lsls	r2, r3
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8110 	beq.w	8007d58 <HAL_DMA_IRQHandler+0x7f8>
				!= 0U) {
			if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2c      	ldr	r2, [pc, #176]	; (8007bf0 <HAL_DMA_IRQHandler+0x690>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d04a      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <HAL_DMA_IRQHandler+0x694>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d045      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <HAL_DMA_IRQHandler+0x698>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d040      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <HAL_DMA_IRQHandler+0x69c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d03b      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <HAL_DMA_IRQHandler+0x6a0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d036      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <HAL_DMA_IRQHandler+0x6a4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d031      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <HAL_DMA_IRQHandler+0x6a8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d02c      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a22      	ldr	r2, [pc, #136]	; (8007c0c <HAL_DMA_IRQHandler+0x6ac>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d027      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <HAL_DMA_IRQHandler+0x6b0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d022      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_DMA_IRQHandler+0x6b4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d01d      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <HAL_DMA_IRQHandler+0x6b8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d018      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_DMA_IRQHandler+0x6bc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1a      	ldr	r2, [pc, #104]	; (8007c20 <HAL_DMA_IRQHandler+0x6c0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_DMA_IRQHandler+0x6c4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <HAL_DMA_IRQHandler+0x6c8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a16      	ldr	r2, [pc, #88]	; (8007c2c <HAL_DMA_IRQHandler+0x6cc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d12b      	bne.n	8007c30 <HAL_DMA_IRQHandler+0x6d0>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e02a      	b.n	8007c44 <HAL_DMA_IRQHandler+0x6e4>
 8007bee:	bf00      	nop
 8007bf0:	40020010 	.word	0x40020010
 8007bf4:	40020028 	.word	0x40020028
 8007bf8:	40020040 	.word	0x40020040
 8007bfc:	40020058 	.word	0x40020058
 8007c00:	40020070 	.word	0x40020070
 8007c04:	40020088 	.word	0x40020088
 8007c08:	400200a0 	.word	0x400200a0
 8007c0c:	400200b8 	.word	0x400200b8
 8007c10:	40020410 	.word	0x40020410
 8007c14:	40020428 	.word	0x40020428
 8007c18:	40020440 	.word	0x40020440
 8007c1c:	40020458 	.word	0x40020458
 8007c20:	40020470 	.word	0x40020470
 8007c24:	40020488 	.word	0x40020488
 8007c28:	400204a0 	.word	0x400204a0
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8087 	beq.w	8007d58 <HAL_DMA_IRQHandler+0x7f8>
				/* Clear the transfer complete flag */
				regs_dma->IFCR = DMA_FLAG_TCIF0_4
						<< (hdma->StreamIndex & 0x1FU);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	2220      	movs	r2, #32
 8007c54:	409a      	lsls	r2, r3
				regs_dma->IFCR = DMA_FLAG_TCIF0_4
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	609a      	str	r2, [r3, #8]

				if (HAL_DMA_STATE_ABORT == hdma->State) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d139      	bne.n	8007cda <HAL_DMA_IRQHandler+0x77a>
					/* Disable all the transfer interrupts */
					((DMA_Stream_TypeDef*) hdma->Instance)->CR &= ~(DMA_IT_TC
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0216 	bic.w	r2, r2, #22
 8007c74:	601a      	str	r2, [r3, #0]
							| DMA_IT_TE | DMA_IT_DME);
					((DMA_Stream_TypeDef*) hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695a      	ldr	r2, [r3, #20]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c84:	615a      	str	r2, [r3, #20]

					if ((hdma->XferHalfCpltCallback != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <HAL_DMA_IRQHandler+0x736>
							|| (hdma->XferM1HalfCpltCallback != NULL)) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x746>
						((DMA_Stream_TypeDef*) hdma->Instance)->CR &=
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0208 	bic.w	r2, r2, #8
 8007ca4:	601a      	str	r2, [r3, #0]
								~(DMA_IT_HT);
					}

					/* Clear all interrupt flags at correct offset within the register */
					regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	223f      	movs	r2, #63	; 0x3f
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	609a      	str	r2, [r3, #8]

					/* Change the DMA state */
					hdma->State = HAL_DMA_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

					/* Process Unlocked */
					__HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

					if (hdma->XferAbortCallback != NULL) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 834a 	beq.w	8008364 <HAL_DMA_IRQHandler+0xe04>
						hdma->XferAbortCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
					}
					return;
 8007cd8:	e344      	b.n	8008364 <HAL_DMA_IRQHandler+0xe04>
				}

				if (((((DMA_Stream_TypeDef*) hdma->Instance)->CR)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
						& (uint32_t) (DMA_SxCR_DBM)) != 0U) {
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
				if (((((DMA_Stream_TypeDef*) hdma->Instance)->CR)
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d018      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x7ba>
					/* Current memory buffer used is Memory 0 */
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
							& DMA_SxCR_CT) == 0U) {
 8007cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d108      	bne.n	8007d08 <HAL_DMA_IRQHandler+0x7a8>
						if (hdma->XferM1CpltCallback != NULL) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02c      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
							/* Transfer complete Callback for memory1 */
							hdma->XferM1CpltCallback(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
 8007d06:	e027      	b.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
						}
					}
					/* Current memory buffer used is Memory 1 */
					else {
						if (hdma->XferCpltCallback != NULL) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d023      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
							/* Transfer complete Callback for memory0 */
							hdma->XferCpltCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
 8007d18:	e01e      	b.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
						}
					}
				}
				/* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
				else {
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
							& DMA_SxCR_CIRC) == 0U) {
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
					if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10f      	bne.n	8007d48 <HAL_DMA_IRQHandler+0x7e8>
						/* Disable the transfer complete interrupt */
						((DMA_Stream_TypeDef*) hdma->Instance)->CR &=
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0210 	bic.w	r2, r2, #16
 8007d36:	601a      	str	r2, [r3, #0]
								~(DMA_IT_TC);

						/* Change the DMA state */
						hdma->State = HAL_DMA_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

						/* Process Unlocked */
						__HAL_UNLOCK(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					}

					if (hdma->XferCpltCallback != NULL) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
						/* Transfer complete callback */
						hdma->XferCpltCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
				}
			}
		}

		/* manage error case */
		if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 8306 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
			if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8088 	beq.w	8007e80 <HAL_DMA_IRQHandler+0x920>
				hdma->State = HAL_DMA_STATE_ABORT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2204      	movs	r2, #4
 8007d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				/* Disable the stream */
				__HAL_DMA_DISABLE(hdma);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a7a      	ldr	r2, [pc, #488]	; (8007f68 <HAL_DMA_IRQHandler+0xa08>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d04a      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a79      	ldr	r2, [pc, #484]	; (8007f6c <HAL_DMA_IRQHandler+0xa0c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d045      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a77      	ldr	r2, [pc, #476]	; (8007f70 <HAL_DMA_IRQHandler+0xa10>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d040      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <HAL_DMA_IRQHandler+0xa14>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d03b      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a74      	ldr	r2, [pc, #464]	; (8007f78 <HAL_DMA_IRQHandler+0xa18>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d036      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a73      	ldr	r2, [pc, #460]	; (8007f7c <HAL_DMA_IRQHandler+0xa1c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d031      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a71      	ldr	r2, [pc, #452]	; (8007f80 <HAL_DMA_IRQHandler+0xa20>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d02c      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a70      	ldr	r2, [pc, #448]	; (8007f84 <HAL_DMA_IRQHandler+0xa24>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d027      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6e      	ldr	r2, [pc, #440]	; (8007f88 <HAL_DMA_IRQHandler+0xa28>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d022      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a6d      	ldr	r2, [pc, #436]	; (8007f8c <HAL_DMA_IRQHandler+0xa2c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d01d      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a6b      	ldr	r2, [pc, #428]	; (8007f90 <HAL_DMA_IRQHandler+0xa30>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d018      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a6a      	ldr	r2, [pc, #424]	; (8007f94 <HAL_DMA_IRQHandler+0xa34>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a68      	ldr	r2, [pc, #416]	; (8007f98 <HAL_DMA_IRQHandler+0xa38>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00e      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a67      	ldr	r2, [pc, #412]	; (8007f9c <HAL_DMA_IRQHandler+0xa3c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a65      	ldr	r2, [pc, #404]	; (8007fa0 <HAL_DMA_IRQHandler+0xa40>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d004      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a64      	ldr	r2, [pc, #400]	; (8007fa4 <HAL_DMA_IRQHandler+0xa44>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d108      	bne.n	8007e2a <HAL_DMA_IRQHandler+0x8ca>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e007      	b.n	8007e3a <HAL_DMA_IRQHandler+0x8da>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

				do {
					if (++count > timeout) {
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d307      	bcc.n	8007e56 <HAL_DMA_IRQHandler+0x8f6>
						break;
					}
				} while ((((DMA_Stream_TypeDef*) hdma->Instance)->CR
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
						& DMA_SxCR_EN) != 0U);
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f2      	bne.n	8007e3a <HAL_DMA_IRQHandler+0x8da>
 8007e54:	e000      	b.n	8007e58 <HAL_DMA_IRQHandler+0x8f8>
						break;
 8007e56:	bf00      	nop

				if ((((DMA_Stream_TypeDef*) hdma->Instance)->CR & DMA_SxCR_EN)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x910>
						!= 0U) {
					/* Change the DMA state to error if DMA disable fails */
					hdma->State = HAL_DMA_STATE_ERROR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e6e:	e003      	b.n	8007e78 <HAL_DMA_IRQHandler+0x918>
				} else {
					/* Change the DMA state to Ready if DMA disable success */
					hdma->State = HAL_DMA_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				}

				/* Process Unlocked */
				__HAL_UNLOCK(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			}

			if (hdma->XferErrorCallback != NULL) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8272 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
				/* Transfer error callback */
				hdma->XferErrorCallback(hdma);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	e26c      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
			}
		}
	} else if (IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a43      	ldr	r2, [pc, #268]	; (8007fa8 <HAL_DMA_IRQHandler+0xa48>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d022      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a42      	ldr	r2, [pc, #264]	; (8007fac <HAL_DMA_IRQHandler+0xa4c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d01d      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a40      	ldr	r2, [pc, #256]	; (8007fb0 <HAL_DMA_IRQHandler+0xa50>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d018      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3f      	ldr	r2, [pc, #252]	; (8007fb4 <HAL_DMA_IRQHandler+0xa54>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a3d      	ldr	r2, [pc, #244]	; (8007fb8 <HAL_DMA_IRQHandler+0xa58>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a3c      	ldr	r2, [pc, #240]	; (8007fbc <HAL_DMA_IRQHandler+0xa5c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d009      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a3a      	ldr	r2, [pc, #232]	; (8007fc0 <HAL_DMA_IRQHandler+0xa60>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a39      	ldr	r2, [pc, #228]	; (8007fc4 <HAL_DMA_IRQHandler+0xa64>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d101      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x988>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <HAL_DMA_IRQHandler+0x98a>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 823f 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
	{
		ccr_reg = (((BDMA_Channel_TypeDef*) hdma->Instance)->CCR);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	613b      	str	r3, [r7, #16]

		/* Half Transfer Complete Interrupt management ******************************/
		if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU)))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2204      	movs	r2, #4
 8007f02:	409a      	lsls	r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80cd 	beq.w	80080a8 <HAL_DMA_IRQHandler+0xb48>
				!= 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80c7 	beq.w	80080a8 <HAL_DMA_IRQHandler+0xb48>
			/* Clear the half transfer complete flag */
			regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2204      	movs	r2, #4
 8007f24:	409a      	lsls	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	605a      	str	r2, [r3, #4]

			/* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d049      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xa68>
				/* Current memory buffer used is Memory 0 */
				if ((ccr_reg & BDMA_CCR_CT) == 0U) {
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_DMA_IRQHandler+0x9f2>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8210 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
						/* Half transfer Callback for Memory 1 */
						hdma->XferM1HalfCpltCallback(hdma);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8007f50:	e20a      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
					}
				}
				/* Current memory buffer used is Memory 1 */
				else {
					if (hdma->XferHalfCpltCallback != NULL) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8206 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
						/* Half transfer Callback for Memory 0 */
						hdma->XferHalfCpltCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8007f64:	e200      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
 8007f66:	bf00      	nop
 8007f68:	40020010 	.word	0x40020010
 8007f6c:	40020028 	.word	0x40020028
 8007f70:	40020040 	.word	0x40020040
 8007f74:	40020058 	.word	0x40020058
 8007f78:	40020070 	.word	0x40020070
 8007f7c:	40020088 	.word	0x40020088
 8007f80:	400200a0 	.word	0x400200a0
 8007f84:	400200b8 	.word	0x400200b8
 8007f88:	40020410 	.word	0x40020410
 8007f8c:	40020428 	.word	0x40020428
 8007f90:	40020440 	.word	0x40020440
 8007f94:	40020458 	.word	0x40020458
 8007f98:	40020470 	.word	0x40020470
 8007f9c:	40020488 	.word	0x40020488
 8007fa0:	400204a0 	.word	0x400204a0
 8007fa4:	400204b8 	.word	0x400204b8
 8007fa8:	58025408 	.word	0x58025408
 8007fac:	5802541c 	.word	0x5802541c
 8007fb0:	58025430 	.word	0x58025430
 8007fb4:	58025444 	.word	0x58025444
 8007fb8:	58025458 	.word	0x58025458
 8007fbc:	5802546c 	.word	0x5802546c
 8007fc0:	58025480 	.word	0x58025480
 8007fc4:	58025494 	.word	0x58025494
					}
				}
			} else {
				if ((ccr_reg & BDMA_CCR_CIRC) == 0U) {
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f003 0320 	and.w	r3, r3, #32
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d160      	bne.n	8008094 <HAL_DMA_IRQHandler+0xb34>
					/* Disable the half transfer interrupt */
					__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a7f      	ldr	r2, [pc, #508]	; (80081d4 <HAL_DMA_IRQHandler+0xc74>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a7d      	ldr	r2, [pc, #500]	; (80081d8 <HAL_DMA_IRQHandler+0xc78>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a7c      	ldr	r2, [pc, #496]	; (80081dc <HAL_DMA_IRQHandler+0xc7c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a7a      	ldr	r2, [pc, #488]	; (80081e0 <HAL_DMA_IRQHandler+0xc80>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a79      	ldr	r2, [pc, #484]	; (80081e4 <HAL_DMA_IRQHandler+0xc84>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a77      	ldr	r2, [pc, #476]	; (80081e8 <HAL_DMA_IRQHandler+0xc88>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a76      	ldr	r2, [pc, #472]	; (80081ec <HAL_DMA_IRQHandler+0xc8c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a74      	ldr	r2, [pc, #464]	; (80081f0 <HAL_DMA_IRQHandler+0xc90>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a73      	ldr	r2, [pc, #460]	; (80081f4 <HAL_DMA_IRQHandler+0xc94>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a71      	ldr	r2, [pc, #452]	; (80081f8 <HAL_DMA_IRQHandler+0xc98>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a70      	ldr	r2, [pc, #448]	; (80081fc <HAL_DMA_IRQHandler+0xc9c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a6e      	ldr	r2, [pc, #440]	; (8008200 <HAL_DMA_IRQHandler+0xca0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a6d      	ldr	r2, [pc, #436]	; (8008204 <HAL_DMA_IRQHandler+0xca4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a6b      	ldr	r2, [pc, #428]	; (8008208 <HAL_DMA_IRQHandler+0xca8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a6a      	ldr	r2, [pc, #424]	; (800820c <HAL_DMA_IRQHandler+0xcac>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a68      	ldr	r2, [pc, #416]	; (8008210 <HAL_DMA_IRQHandler+0xcb0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <HAL_DMA_IRQHandler+0xb24>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0208 	bic.w	r2, r2, #8
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e007      	b.n	8008094 <HAL_DMA_IRQHandler+0xb34>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0204 	bic.w	r2, r2, #4
 8008092:	601a      	str	r2, [r3, #0]
				}

				/* DMA peripheral state is not updated in Half Transfer */
				/* but in Transfer Complete case */

				if (hdma->XferHalfCpltCallback != NULL) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8165 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
					/* Half transfer callback */
					hdma->XferHalfCpltCallback(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 80080a6:	e15f      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
				}
			}
		}

		/* Transfer Complete Interrupt management ***********************************/
		else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU)))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	2202      	movs	r2, #2
 80080b2:	409a      	lsls	r2, r3
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80c5 	beq.w	8008248 <HAL_DMA_IRQHandler+0xce8>
				!= 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80bf 	beq.w	8008248 <HAL_DMA_IRQHandler+0xce8>
			/* Clear the transfer complete flag */
			regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	2202      	movs	r2, #2
 80080d4:	409a      	lsls	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	605a      	str	r2, [r3, #4]

			/* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <HAL_DMA_IRQHandler+0xbb6>
				/* Current memory buffer used is Memory 0 */
				if ((ccr_reg & BDMA_CCR_CT) == 0U) {
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <HAL_DMA_IRQHandler+0xba2>
					if (hdma->XferM1CpltCallback != NULL) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 813a 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
						/* Transfer complete Callback for Memory 1 */
						hdma->XferM1CpltCallback(hdma);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8008100:	e134      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
					}
				}
				/* Current memory buffer used is Memory 1 */
				else {
					if (hdma->XferCpltCallback != NULL) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8130 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
						/* Transfer complete Callback for Memory 0 */
						hdma->XferCpltCallback(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8008114:	e12a      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
					}
				}
			} else {
				if ((ccr_reg & BDMA_CCR_CIRC) == 0U) {
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	f040 8089 	bne.w	8008234 <HAL_DMA_IRQHandler+0xcd4>
					/* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
					__HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <HAL_DMA_IRQHandler+0xc74>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d04a      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <HAL_DMA_IRQHandler+0xc78>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d045      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a28      	ldr	r2, [pc, #160]	; (80081dc <HAL_DMA_IRQHandler+0xc7c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d040      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <HAL_DMA_IRQHandler+0xc80>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d03b      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <HAL_DMA_IRQHandler+0xc84>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d036      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a23      	ldr	r2, [pc, #140]	; (80081e8 <HAL_DMA_IRQHandler+0xc88>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d031      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_DMA_IRQHandler+0xc8c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d02c      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a20      	ldr	r2, [pc, #128]	; (80081f0 <HAL_DMA_IRQHandler+0xc90>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d027      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <HAL_DMA_IRQHandler+0xc94>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1d      	ldr	r2, [pc, #116]	; (80081f8 <HAL_DMA_IRQHandler+0xc98>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01d      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <HAL_DMA_IRQHandler+0xc9c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1a      	ldr	r2, [pc, #104]	; (8008200 <HAL_DMA_IRQHandler+0xca0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_DMA_IRQHandler+0xca4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a17      	ldr	r2, [pc, #92]	; (8008208 <HAL_DMA_IRQHandler+0xca8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_DMA_IRQHandler+0xcac>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a14      	ldr	r2, [pc, #80]	; (8008210 <HAL_DMA_IRQHandler+0xcb0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d128      	bne.n	8008214 <HAL_DMA_IRQHandler+0xcb4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0214 	bic.w	r2, r2, #20
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e027      	b.n	8008224 <HAL_DMA_IRQHandler+0xcc4>
 80081d4:	40020010 	.word	0x40020010
 80081d8:	40020028 	.word	0x40020028
 80081dc:	40020040 	.word	0x40020040
 80081e0:	40020058 	.word	0x40020058
 80081e4:	40020070 	.word	0x40020070
 80081e8:	40020088 	.word	0x40020088
 80081ec:	400200a0 	.word	0x400200a0
 80081f0:	400200b8 	.word	0x400200b8
 80081f4:	40020410 	.word	0x40020410
 80081f8:	40020428 	.word	0x40020428
 80081fc:	40020440 	.word	0x40020440
 8008200:	40020458 	.word	0x40020458
 8008204:	40020470 	.word	0x40020470
 8008208:	40020488 	.word	0x40020488
 800820c:	400204a0 	.word	0x400204a0
 8008210:	400204b8 	.word	0x400204b8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 020a 	bic.w	r2, r2, #10
 8008222:	601a      	str	r2, [r3, #0]

					/* Change the DMA state */
					hdma->State = HAL_DMA_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

					/* Process Unlocked */
					__HAL_UNLOCK(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}

				if (hdma->XferCpltCallback != NULL) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8097 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
					/* Transfer complete callback */
					hdma->XferCpltCallback(hdma);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8008246:	e091      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
				}
			}
		}
		/* Transfer Error Interrupt management **************************************/
		else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU)))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	2208      	movs	r2, #8
 8008252:	409a      	lsls	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8088 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
				!= 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8082 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
			/* When a DMA transfer error occurs */
			/* A hardware clear of its EN bits is performed */
			/* Disable ALL DMA IT */
			__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a41      	ldr	r2, [pc, #260]	; (8008374 <HAL_DMA_IRQHandler+0xe14>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d04a      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <HAL_DMA_IRQHandler+0xe18>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d045      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a3e      	ldr	r2, [pc, #248]	; (800837c <HAL_DMA_IRQHandler+0xe1c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d040      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a3c      	ldr	r2, [pc, #240]	; (8008380 <HAL_DMA_IRQHandler+0xe20>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d03b      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3b      	ldr	r2, [pc, #236]	; (8008384 <HAL_DMA_IRQHandler+0xe24>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d036      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a39      	ldr	r2, [pc, #228]	; (8008388 <HAL_DMA_IRQHandler+0xe28>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d031      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a38      	ldr	r2, [pc, #224]	; (800838c <HAL_DMA_IRQHandler+0xe2c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d02c      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a36      	ldr	r2, [pc, #216]	; (8008390 <HAL_DMA_IRQHandler+0xe30>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d027      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a35      	ldr	r2, [pc, #212]	; (8008394 <HAL_DMA_IRQHandler+0xe34>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d022      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a33      	ldr	r2, [pc, #204]	; (8008398 <HAL_DMA_IRQHandler+0xe38>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01d      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a32      	ldr	r2, [pc, #200]	; (800839c <HAL_DMA_IRQHandler+0xe3c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d018      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a30      	ldr	r2, [pc, #192]	; (80083a0 <HAL_DMA_IRQHandler+0xe40>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2f      	ldr	r2, [pc, #188]	; (80083a4 <HAL_DMA_IRQHandler+0xe44>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a2d      	ldr	r2, [pc, #180]	; (80083a8 <HAL_DMA_IRQHandler+0xe48>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <HAL_DMA_IRQHandler+0xe4c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <HAL_DMA_IRQHandler+0xe50>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d108      	bne.n	800831c <HAL_DMA_IRQHandler+0xdbc>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 021c 	bic.w	r2, r2, #28
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	e007      	b.n	800832c <HAL_DMA_IRQHandler+0xdcc>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 020e 	bic.w	r2, r2, #14
 800832a:	601a      	str	r2, [r3, #0]

			/* Clear all flags */
			regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	2201      	movs	r2, #1
 8008336:	409a      	lsls	r2, r3
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	605a      	str	r2, [r3, #4]

			/* Update error code */
			hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	655a      	str	r2, [r3, #84]	; 0x54

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Process Unlocked */
			__HAL_UNLOCK(hdma);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

			if (hdma->XferErrorCallback != NULL) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <HAL_DMA_IRQHandler+0xe0e>
				/* Transfer error callback */
				hdma->XferErrorCallback(hdma);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	e004      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
					return;
 8008364:	bf00      	nop
 8008366:	e002      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 8008368:	bf00      	nop
 800836a:	e000      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
			if ((ccr_reg & BDMA_CCR_DBM) != 0U) {
 800836c:	bf00      	nop
			/* Nothing To Do */
		}
	} else {
		/* Nothing To Do */
	}
}
 800836e:	3728      	adds	r7, #40	; 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40020010 	.word	0x40020010
 8008378:	40020028 	.word	0x40020028
 800837c:	40020040 	.word	0x40020040
 8008380:	40020058 	.word	0x40020058
 8008384:	40020070 	.word	0x40020070
 8008388:	40020088 	.word	0x40020088
 800838c:	400200a0 	.word	0x400200a0
 8008390:	400200b8 	.word	0x400200b8
 8008394:	40020410 	.word	0x40020410
 8008398:	40020428 	.word	0x40020428
 800839c:	40020440 	.word	0x40020440
 80083a0:	40020458 	.word	0x40020458
 80083a4:	40020470 	.word	0x40020470
 80083a8:	40020488 	.word	0x40020488
 80083ac:	400204a0 	.word	0x400204a0
 80083b0:	400204b8 	.word	0x400204b8

080083b4 <DMA_SetConfig>:
 * @param  DstAddress: The destination memory Buffer address
 * @param  DataLength: The length of data to be transferred from source to destination
 * @retval None
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength) {
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs_dma = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	617b      	str	r3, [r7, #20]
	BDMA_Base_Registers *regs_bdma =
			(BDMA_Base_Registers*) hdma->StreamBaseAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	BDMA_Base_Registers *regs_bdma =
 80083cc:	613b      	str	r3, [r7, #16]

	if (IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a7f      	ldr	r2, [pc, #508]	; (80085d0 <DMA_SetConfig+0x21c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d072      	beq.n	80084be <DMA_SetConfig+0x10a>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7d      	ldr	r2, [pc, #500]	; (80085d4 <DMA_SetConfig+0x220>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d06d      	beq.n	80084be <DMA_SetConfig+0x10a>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a7c      	ldr	r2, [pc, #496]	; (80085d8 <DMA_SetConfig+0x224>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d068      	beq.n	80084be <DMA_SetConfig+0x10a>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a7a      	ldr	r2, [pc, #488]	; (80085dc <DMA_SetConfig+0x228>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d063      	beq.n	80084be <DMA_SetConfig+0x10a>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a79      	ldr	r2, [pc, #484]	; (80085e0 <DMA_SetConfig+0x22c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d05e      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a77      	ldr	r2, [pc, #476]	; (80085e4 <DMA_SetConfig+0x230>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d059      	beq.n	80084be <DMA_SetConfig+0x10a>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a76      	ldr	r2, [pc, #472]	; (80085e8 <DMA_SetConfig+0x234>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d054      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a74      	ldr	r2, [pc, #464]	; (80085ec <DMA_SetConfig+0x238>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d04f      	beq.n	80084be <DMA_SetConfig+0x10a>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a73      	ldr	r2, [pc, #460]	; (80085f0 <DMA_SetConfig+0x23c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d04a      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a71      	ldr	r2, [pc, #452]	; (80085f4 <DMA_SetConfig+0x240>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d045      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a70      	ldr	r2, [pc, #448]	; (80085f8 <DMA_SetConfig+0x244>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d040      	beq.n	80084be <DMA_SetConfig+0x10a>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a6e      	ldr	r2, [pc, #440]	; (80085fc <DMA_SetConfig+0x248>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d03b      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a6d      	ldr	r2, [pc, #436]	; (8008600 <DMA_SetConfig+0x24c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d036      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a6b      	ldr	r2, [pc, #428]	; (8008604 <DMA_SetConfig+0x250>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d031      	beq.n	80084be <DMA_SetConfig+0x10a>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a6a      	ldr	r2, [pc, #424]	; (8008608 <DMA_SetConfig+0x254>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d02c      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a68      	ldr	r2, [pc, #416]	; (800860c <DMA_SetConfig+0x258>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d027      	beq.n	80084be <DMA_SetConfig+0x10a>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a67      	ldr	r2, [pc, #412]	; (8008610 <DMA_SetConfig+0x25c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d022      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a65      	ldr	r2, [pc, #404]	; (8008614 <DMA_SetConfig+0x260>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d01d      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a64      	ldr	r2, [pc, #400]	; (8008618 <DMA_SetConfig+0x264>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d018      	beq.n	80084be <DMA_SetConfig+0x10a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a62      	ldr	r2, [pc, #392]	; (800861c <DMA_SetConfig+0x268>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <DMA_SetConfig+0x10a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a61      	ldr	r2, [pc, #388]	; (8008620 <DMA_SetConfig+0x26c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00e      	beq.n	80084be <DMA_SetConfig+0x10a>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a5f      	ldr	r2, [pc, #380]	; (8008624 <DMA_SetConfig+0x270>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <DMA_SetConfig+0x10a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a5e      	ldr	r2, [pc, #376]	; (8008628 <DMA_SetConfig+0x274>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <DMA_SetConfig+0x10a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a5c      	ldr	r2, [pc, #368]	; (800862c <DMA_SetConfig+0x278>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d101      	bne.n	80084c2 <DMA_SetConfig+0x10e>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <DMA_SetConfig+0x110>
 80084c2:	2300      	movs	r3, #0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <DMA_SetConfig+0x130>
	{
		/* Clear the DMAMUX synchro overrun flag */
		hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084d0:	605a      	str	r2, [r3, #4]

		if (hdma->DMAmuxRequestGen != 0U) {
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <DMA_SetConfig+0x130>
			/* Clear the DMAMUX request generator overrun flag */
			hdma->DMAmuxRequestGenStatus->RGCFR =
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
					hdma->DMAmuxRequestGenStatusMask;
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
			hdma->DMAmuxRequestGenStatus->RGCFR =
 80084e2:	605a      	str	r2, [r3, #4]
		}
	}

	if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a39      	ldr	r2, [pc, #228]	; (80085d0 <DMA_SetConfig+0x21c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d04a      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a38      	ldr	r2, [pc, #224]	; (80085d4 <DMA_SetConfig+0x220>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d045      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a36      	ldr	r2, [pc, #216]	; (80085d8 <DMA_SetConfig+0x224>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d040      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a35      	ldr	r2, [pc, #212]	; (80085dc <DMA_SetConfig+0x228>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d03b      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a33      	ldr	r2, [pc, #204]	; (80085e0 <DMA_SetConfig+0x22c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d036      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a32      	ldr	r2, [pc, #200]	; (80085e4 <DMA_SetConfig+0x230>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d031      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a30      	ldr	r2, [pc, #192]	; (80085e8 <DMA_SetConfig+0x234>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d02c      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2f      	ldr	r2, [pc, #188]	; (80085ec <DMA_SetConfig+0x238>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d027      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2d      	ldr	r2, [pc, #180]	; (80085f0 <DMA_SetConfig+0x23c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d022      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <DMA_SetConfig+0x240>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d01d      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a2a      	ldr	r2, [pc, #168]	; (80085f8 <DMA_SetConfig+0x244>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d018      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a29      	ldr	r2, [pc, #164]	; (80085fc <DMA_SetConfig+0x248>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a27      	ldr	r2, [pc, #156]	; (8008600 <DMA_SetConfig+0x24c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a26      	ldr	r2, [pc, #152]	; (8008604 <DMA_SetConfig+0x250>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a24      	ldr	r2, [pc, #144]	; (8008608 <DMA_SetConfig+0x254>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <DMA_SetConfig+0x1d0>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a23      	ldr	r2, [pc, #140]	; (800860c <DMA_SetConfig+0x258>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d101      	bne.n	8008588 <DMA_SetConfig+0x1d4>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <DMA_SetConfig+0x1d6>
 8008588:	2300      	movs	r3, #0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d059      	beq.n	8008642 <DMA_SetConfig+0x28e>
	{
		/* Clear all interrupt flags at correct offset within the register */
		regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	223f      	movs	r2, #63	; 0x3f
 8008598:	409a      	lsls	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	609a      	str	r2, [r3, #8]

		/* Clear DBM bit */
		((DMA_Stream_TypeDef*) hdma->Instance)->CR &=
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085ac:	601a      	str	r2, [r3, #0]
				(uint32_t) (~DMA_SxCR_DBM);

		/* Configure DMA Stream data length */
		((DMA_Stream_TypeDef*) hdma->Instance)->NDTR = DataLength;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	605a      	str	r2, [r3, #4]

		/* Peripheral to Memory */
		if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d138      	bne.n	8008630 <DMA_SetConfig+0x27c>
			/* Configure DMA Stream destination address */
			((DMA_Stream_TypeDef*) hdma->Instance)->PAR = DstAddress;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	609a      	str	r2, [r3, #8]

			/* Configure DMA Stream source address */
			((DMA_Stream_TypeDef*) hdma->Instance)->M0AR = SrcAddress;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	60da      	str	r2, [r3, #12]
			((BDMA_Channel_TypeDef*) hdma->Instance)->CM0AR = DstAddress;
		}
	} else {
		/* Nothing To Do */
	}
}
 80085ce:	e086      	b.n	80086de <DMA_SetConfig+0x32a>
 80085d0:	40020010 	.word	0x40020010
 80085d4:	40020028 	.word	0x40020028
 80085d8:	40020040 	.word	0x40020040
 80085dc:	40020058 	.word	0x40020058
 80085e0:	40020070 	.word	0x40020070
 80085e4:	40020088 	.word	0x40020088
 80085e8:	400200a0 	.word	0x400200a0
 80085ec:	400200b8 	.word	0x400200b8
 80085f0:	40020410 	.word	0x40020410
 80085f4:	40020428 	.word	0x40020428
 80085f8:	40020440 	.word	0x40020440
 80085fc:	40020458 	.word	0x40020458
 8008600:	40020470 	.word	0x40020470
 8008604:	40020488 	.word	0x40020488
 8008608:	400204a0 	.word	0x400204a0
 800860c:	400204b8 	.word	0x400204b8
 8008610:	58025408 	.word	0x58025408
 8008614:	5802541c 	.word	0x5802541c
 8008618:	58025430 	.word	0x58025430
 800861c:	58025444 	.word	0x58025444
 8008620:	58025458 	.word	0x58025458
 8008624:	5802546c 	.word	0x5802546c
 8008628:	58025480 	.word	0x58025480
 800862c:	58025494 	.word	0x58025494
			((DMA_Stream_TypeDef*) hdma->Instance)->PAR = SrcAddress;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	609a      	str	r2, [r3, #8]
			((DMA_Stream_TypeDef*) hdma->Instance)->M0AR = DstAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	60da      	str	r2, [r3, #12]
}
 8008640:	e04d      	b.n	80086de <DMA_SetConfig+0x32a>
	} else if (IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a29      	ldr	r2, [pc, #164]	; (80086ec <DMA_SetConfig+0x338>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d022      	beq.n	8008692 <DMA_SetConfig+0x2de>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a27      	ldr	r2, [pc, #156]	; (80086f0 <DMA_SetConfig+0x33c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01d      	beq.n	8008692 <DMA_SetConfig+0x2de>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <DMA_SetConfig+0x340>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d018      	beq.n	8008692 <DMA_SetConfig+0x2de>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a24      	ldr	r2, [pc, #144]	; (80086f8 <DMA_SetConfig+0x344>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <DMA_SetConfig+0x2de>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a23      	ldr	r2, [pc, #140]	; (80086fc <DMA_SetConfig+0x348>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <DMA_SetConfig+0x2de>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a21      	ldr	r2, [pc, #132]	; (8008700 <DMA_SetConfig+0x34c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <DMA_SetConfig+0x2de>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a20      	ldr	r2, [pc, #128]	; (8008704 <DMA_SetConfig+0x350>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <DMA_SetConfig+0x2de>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <DMA_SetConfig+0x354>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d101      	bne.n	8008696 <DMA_SetConfig+0x2e2>
 8008692:	2301      	movs	r3, #1
 8008694:	e000      	b.n	8008698 <DMA_SetConfig+0x2e4>
 8008696:	2300      	movs	r3, #0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d020      	beq.n	80086de <DMA_SetConfig+0x32a>
		regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	2201      	movs	r2, #1
 80086a6:	409a      	lsls	r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	605a      	str	r2, [r3, #4]
		((BDMA_Channel_TypeDef*) hdma->Instance)->CNDTR = DataLength;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
		if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d108      	bne.n	80086ce <DMA_SetConfig+0x31a>
			((BDMA_Channel_TypeDef*) hdma->Instance)->CPAR = DstAddress;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	609a      	str	r2, [r3, #8]
			((BDMA_Channel_TypeDef*) hdma->Instance)->CM0AR = SrcAddress;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	60da      	str	r2, [r3, #12]
}
 80086cc:	e007      	b.n	80086de <DMA_SetConfig+0x32a>
			((BDMA_Channel_TypeDef*) hdma->Instance)->CPAR = SrcAddress;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	609a      	str	r2, [r3, #8]
			((BDMA_Channel_TypeDef*) hdma->Instance)->CM0AR = DstAddress;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	60da      	str	r2, [r3, #12]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	58025408 	.word	0x58025408
 80086f0:	5802541c 	.word	0x5802541c
 80086f4:	58025430 	.word	0x58025430
 80086f8:	58025444 	.word	0x58025444
 80086fc:	58025458 	.word	0x58025458
 8008700:	5802546c 	.word	0x5802546c
 8008704:	58025480 	.word	0x58025480
 8008708:	58025494 	.word	0x58025494

0800870c <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	if (IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a42      	ldr	r2, [pc, #264]	; (8008824 <DMA_CalcBaseAndBitshift+0x118>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d04a      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a41      	ldr	r2, [pc, #260]	; (8008828 <DMA_CalcBaseAndBitshift+0x11c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d045      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a3f      	ldr	r2, [pc, #252]	; (800882c <DMA_CalcBaseAndBitshift+0x120>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d040      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a3e      	ldr	r2, [pc, #248]	; (8008830 <DMA_CalcBaseAndBitshift+0x124>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d03b      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a3c      	ldr	r2, [pc, #240]	; (8008834 <DMA_CalcBaseAndBitshift+0x128>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d036      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a3b      	ldr	r2, [pc, #236]	; (8008838 <DMA_CalcBaseAndBitshift+0x12c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d031      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a39      	ldr	r2, [pc, #228]	; (800883c <DMA_CalcBaseAndBitshift+0x130>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d02c      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a38      	ldr	r2, [pc, #224]	; (8008840 <DMA_CalcBaseAndBitshift+0x134>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d027      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a36      	ldr	r2, [pc, #216]	; (8008844 <DMA_CalcBaseAndBitshift+0x138>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a35      	ldr	r2, [pc, #212]	; (8008848 <DMA_CalcBaseAndBitshift+0x13c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d01d      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a33      	ldr	r2, [pc, #204]	; (800884c <DMA_CalcBaseAndBitshift+0x140>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d018      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a32      	ldr	r2, [pc, #200]	; (8008850 <DMA_CalcBaseAndBitshift+0x144>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a30      	ldr	r2, [pc, #192]	; (8008854 <DMA_CalcBaseAndBitshift+0x148>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <DMA_CalcBaseAndBitshift+0x14c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2d      	ldr	r2, [pc, #180]	; (800885c <DMA_CalcBaseAndBitshift+0x150>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2c      	ldr	r2, [pc, #176]	; (8008860 <DMA_CalcBaseAndBitshift+0x154>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d101      	bne.n	80087b8 <DMA_CalcBaseAndBitshift+0xac>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <DMA_CalcBaseAndBitshift+0xae>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d024      	beq.n	8008808 <DMA_CalcBaseAndBitshift+0xfc>
	{
		uint32_t stream_number = (((uint32_t) ((uint32_t*) hdma->Instance)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
				& 0xFFU) - 16U) / 24U;
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	3b10      	subs	r3, #16
		uint32_t stream_number = (((uint32_t) ((uint32_t*) hdma->Instance)
 80087c6:	4a27      	ldr	r2, [pc, #156]	; (8008864 <DMA_CalcBaseAndBitshift+0x158>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]

		/* lookup table for necessary bitshift of flags within status registers */
		static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U,
				6U, 16U, 22U };
		hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	4a24      	ldr	r2, [pc, #144]	; (8008868 <DMA_CalcBaseAndBitshift+0x15c>)
 80087d8:	5cd3      	ldrb	r3, [r2, r3]
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	65da      	str	r2, [r3, #92]	; 0x5c

		if (stream_number > 3U) {
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d908      	bls.n	80087f8 <DMA_CalcBaseAndBitshift+0xec>
			/* return pointer to HISR and HIFCR */
			hdma->StreamBaseAddress = (((uint32_t) ((uint32_t*) hdma->Instance)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
					& (uint32_t) (~0x3FFU)) + 4U);
 80087ec:	4b1f      	ldr	r3, [pc, #124]	; (800886c <DMA_CalcBaseAndBitshift+0x160>)
 80087ee:	4013      	ands	r3, r2
 80087f0:	1d1a      	adds	r2, r3, #4
			hdma->StreamBaseAddress = (((uint32_t) ((uint32_t*) hdma->Instance)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	659a      	str	r2, [r3, #88]	; 0x58
 80087f6:	e00d      	b.n	8008814 <DMA_CalcBaseAndBitshift+0x108>
		} else {
			/* return pointer to LISR and LIFCR */
			hdma->StreamBaseAddress = ((uint32_t) ((uint32_t*) hdma->Instance)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
					& (uint32_t) (~0x3FFU));
 80087fe:	4b1b      	ldr	r3, [pc, #108]	; (800886c <DMA_CalcBaseAndBitshift+0x160>)
 8008800:	4013      	ands	r3, r2
			hdma->StreamBaseAddress = ((uint32_t) ((uint32_t*) hdma->Instance)
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6593      	str	r3, [r2, #88]	; 0x58
 8008806:	e005      	b.n	8008814 <DMA_CalcBaseAndBitshift+0x108>
		}
	} else /* BDMA instance(s) */
	{
		/* return pointer to ISR and IFCR */
		hdma->StreamBaseAddress = ((uint32_t) ((uint32_t*) hdma->Instance)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
				& (uint32_t) (~0xFFU));
 800880c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
		hdma->StreamBaseAddress = ((uint32_t) ((uint32_t*) hdma->Instance)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	659a      	str	r2, [r3, #88]	; 0x58
	}

	return hdma->StreamBaseAddress;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	40020010 	.word	0x40020010
 8008828:	40020028 	.word	0x40020028
 800882c:	40020040 	.word	0x40020040
 8008830:	40020058 	.word	0x40020058
 8008834:	40020070 	.word	0x40020070
 8008838:	40020088 	.word	0x40020088
 800883c:	400200a0 	.word	0x400200a0
 8008840:	400200b8 	.word	0x400200b8
 8008844:	40020410 	.word	0x40020410
 8008848:	40020428 	.word	0x40020428
 800884c:	40020440 	.word	0x40020440
 8008850:	40020458 	.word	0x40020458
 8008854:	40020470 	.word	0x40020470
 8008858:	40020488 	.word	0x40020488
 800885c:	400204a0 	.word	0x400204a0
 8008860:	400204b8 	.word	0x400204b8
 8008864:	aaaaaaab 	.word	0xaaaaaaab
 8008868:	08017134 	.word	0x08017134
 800886c:	fffffc00 	.word	0xfffffc00

08008870 <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma) {
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d120      	bne.n	80088c6 <DMA_CheckFifoParam+0x56>
		switch (hdma->Init.FIFOThreshold) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	2b03      	cmp	r3, #3
 800888a:	d858      	bhi.n	800893e <DMA_CheckFifoParam+0xce>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <DMA_CheckFifoParam+0x24>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a5 	.word	0x080088a5
 8008898:	080088b7 	.word	0x080088b7
 800889c:	080088a5 	.word	0x080088a5
 80088a0:	0800893f 	.word	0x0800893f
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d048      	beq.n	8008942 <DMA_CheckFifoParam+0xd2>
				status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80088b4:	e045      	b.n	8008942 <DMA_CheckFifoParam+0xd2>

		case DMA_FIFO_THRESHOLD_HALFFULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088be:	d142      	bne.n	8008946 <DMA_CheckFifoParam+0xd6>
				status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80088c4:	e03f      	b.n	8008946 <DMA_CheckFifoParam+0xd6>
			break;
		}
	}

	/* Memory Data size equal to Half-Word */
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ce:	d123      	bne.n	8008918 <DMA_CheckFifoParam+0xa8>
		switch (hdma->Init.FIFOThreshold) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d838      	bhi.n	800894a <DMA_CheckFifoParam+0xda>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <DMA_CheckFifoParam+0x70>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	080088f7 	.word	0x080088f7
 80088e8:	080088f1 	.word	0x080088f1
 80088ec:	08008909 	.word	0x08008909
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
			break;
 80088f4:	e030      	b.n	8008958 <DMA_CheckFifoParam+0xe8>

		case DMA_FIFO_THRESHOLD_HALFFULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d025      	beq.n	800894e <DMA_CheckFifoParam+0xde>
				status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8008906:	e022      	b.n	800894e <DMA_CheckFifoParam+0xde>

		case DMA_FIFO_THRESHOLD_FULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008910:	d11f      	bne.n	8008952 <DMA_CheckFifoParam+0xe2>
				status = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8008916:	e01c      	b.n	8008952 <DMA_CheckFifoParam+0xe2>
		}
	}

	/* Memory Data size equal to Word */
	else {
		switch (hdma->Init.FIFOThreshold) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	2b02      	cmp	r3, #2
 800891e:	d902      	bls.n	8008926 <DMA_CheckFifoParam+0xb6>
 8008920:	2b03      	cmp	r3, #3
 8008922:	d003      	beq.n	800892c <DMA_CheckFifoParam+0xbc>
				status = HAL_ERROR;
			}
			break;

		default:
			break;
 8008924:	e018      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			status = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]
			break;
 800892a:	e015      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00e      	beq.n	8008956 <DMA_CheckFifoParam+0xe6>
				status = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
			break;
 800893c:	e00b      	b.n	8008956 <DMA_CheckFifoParam+0xe6>
			break;
 800893e:	bf00      	nop
 8008940:	e00a      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 8008942:	bf00      	nop
 8008944:	e008      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 8008946:	bf00      	nop
 8008948:	e006      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 800894a:	bf00      	nop
 800894c:	e004      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 800894e:	bf00      	nop
 8008950:	e002      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
			break;
 8008956:	bf00      	nop
		}
	}

	return status;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <DMA_CalcDMAMUXChannelBaseAndMask>:
 * @brief  Updates the DMA handle with the DMAMUX  channel and status mask depending on stream number
 * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma) {
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	uint32_t stream_number;
	uint32_t stream_baseaddress = (uint32_t) ((uint32_t*) hdma->Instance);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60bb      	str	r3, [r7, #8]

	if (IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a38      	ldr	r2, [pc, #224]	; (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d022      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a36      	ldr	r2, [pc, #216]	; (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01d      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a35      	ldr	r2, [pc, #212]	; (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d018      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a33      	ldr	r2, [pc, #204]	; (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d013      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a32      	ldr	r2, [pc, #200]	; (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00e      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a30      	ldr	r2, [pc, #192]	; (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d009      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2f      	ldr	r2, [pc, #188]	; (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d004      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	; (8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d101      	bne.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01a      	beq.n	8008a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
		/* BDMA Channels are connected to DMAMUX2 channels */
		stream_number = (((uint32_t) ((uint32_t*) hdma->Instance) & 0xFFU) - 8U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	3b08      	subs	r3, #8
 80089d8:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089da:	fba2 2303 	umull	r2, r3, r2, r3
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]
				/ 20U;
		hdma->DMAmuxChannel =
				(DMAMUX_Channel_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX2_Channel0)
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4b26      	ldr	r3, [pc, #152]	; (8008a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	461a      	mov	r2, r3
		hdma->DMAmuxChannel =
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	661a      	str	r2, [r3, #96]	; 0x60
						+ (stream_number * 4U)));
		hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089f4:	665a      	str	r2, [r3, #100]	; 0x64
		hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	2201      	movs	r2, #1
 80089fe:	409a      	lsls	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	669a      	str	r2, [r3, #104]	; 0x68
				(DMAMUX_Channel_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX1_Channel0)
						+ (stream_number * 4U)));
		hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
		hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
	}
}
 8008a04:	e024      	b.n	8008a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
				(((uint32_t) ((uint32_t*) hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	3b10      	subs	r3, #16
		stream_number =
 8008a0e:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	091b      	lsrs	r3, r3, #4
 8008a16:	60fb      	str	r3, [r7, #12]
		if ((stream_baseaddress <= ((uint32_t) DMA2_Stream7))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a1c      	ldr	r2, [pc, #112]	; (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d806      	bhi.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
				&& (stream_baseaddress >= ((uint32_t) DMA2_Stream0))) {
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d902      	bls.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
			stream_number += 8U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	60fb      	str	r3, [r7, #12]
				(DMAMUX_Channel_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX1_Channel0)
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	461a      	mov	r2, r3
		hdma->DMAmuxChannel =
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	661a      	str	r2, [r3, #96]	; 0x60
		hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a16      	ldr	r2, [pc, #88]	; (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a40:	665a      	str	r2, [r3, #100]	; 0x64
		hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2201      	movs	r2, #1
 8008a4a:	409a      	lsls	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	58025408 	.word	0x58025408
 8008a60:	5802541c 	.word	0x5802541c
 8008a64:	58025430 	.word	0x58025430
 8008a68:	58025444 	.word	0x58025444
 8008a6c:	58025458 	.word	0x58025458
 8008a70:	5802546c 	.word	0x5802546c
 8008a74:	58025480 	.word	0x58025480
 8008a78:	58025494 	.word	0x58025494
 8008a7c:	cccccccd 	.word	0xcccccccd
 8008a80:	16009600 	.word	0x16009600
 8008a84:	58025880 	.word	0x58025880
 8008a88:	aaaaaaab 	.word	0xaaaaaaab
 8008a8c:	400204b8 	.word	0x400204b8
 8008a90:	4002040f 	.word	0x4002040f
 8008a94:	10008200 	.word	0x10008200
 8008a98:	40020880 	.word	0x40020880

08008a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 * @brief  Updates the DMA handle with the DMAMUX  request generator params
 * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma) {
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	uint32_t request = hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	60fb      	str	r3, [r7, #12]

	if ((request >= DMA_REQUEST_GENERATOR0)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04a      	beq.n	8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
			&& (request <= DMA_REQUEST_GENERATOR7)) {
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d847      	bhi.n	8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
		if (IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a25      	ldr	r2, [pc, #148]	; (8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d022      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a24      	ldr	r2, [pc, #144]	; (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01d      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a22      	ldr	r2, [pc, #136]	; (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d018      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d013      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00e      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d009      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d101      	bne.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
			/* BDMA Channels are connected to DMAMUX2 request generator blocks */
			hdma->DMAmuxRequestGen =
					(DMAMUX_RequestGen_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX2_RequestGenerator0)
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	461a      	mov	r2, r3
			hdma->DMAmuxRequestGen =
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	66da      	str	r2, [r3, #108]	; 0x6c
							+ ((request - 1U) * 4U)));

			hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b24:	671a      	str	r2, [r3, #112]	; 0x70
 8008b26:	e009      	b.n	8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
		} else {
			/* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
			hdma->DMAmuxRequestGen =
					(DMAMUX_RequestGen_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX1_RequestGenerator0)
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4b14      	ldr	r3, [pc, #80]	; (8008b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	461a      	mov	r2, r3
			hdma->DMAmuxRequestGen =
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	66da      	str	r2, [r3, #108]	; 0x6c
							+ ((request - 1U) * 4U)));

			hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a11      	ldr	r2, [pc, #68]	; (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b3a:	671a      	str	r2, [r3, #112]	; 0x70
		}

		hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2201      	movs	r2, #1
 8008b42:	409a      	lsls	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	675a      	str	r2, [r3, #116]	; 0x74
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	58025408 	.word	0x58025408
 8008b58:	5802541c 	.word	0x5802541c
 8008b5c:	58025430 	.word	0x58025430
 8008b60:	58025444 	.word	0x58025444
 8008b64:	58025458 	.word	0x58025458
 8008b68:	5802546c 	.word	0x5802546c
 8008b6c:	58025480 	.word	0x58025480
 8008b70:	58025494 	.word	0x58025494
 8008b74:	1600963f 	.word	0x1600963f
 8008b78:	58025940 	.word	0x58025940
 8008b7c:	1000823f 	.word	0x1000823f
 8008b80:	40020940 	.word	0x40020940

08008b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b089      	sub	sp, #36	; 0x24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b92:	4b89      	ldr	r3, [pc, #548]	; (8008db8 <HAL_GPIO_Init+0x234>)
 8008b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b96:	e194      	b.n	8008ec2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8186 	beq.w	8008ebc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d005      	beq.n	8008bc8 <HAL_GPIO_Init+0x44>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d130      	bne.n	8008c2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd8:	43db      	mvns	r3, r3
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	4013      	ands	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bfe:	2201      	movs	r2, #1
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	43db      	mvns	r3, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 0201 	and.w	r2, r3, #1
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d017      	beq.n	8008c66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	2203      	movs	r2, #3
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	43db      	mvns	r3, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d123      	bne.n	8008cba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	08da      	lsrs	r2, r3, #3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3208      	adds	r2, #8
 8008c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	220f      	movs	r2, #15
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	43db      	mvns	r3, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4013      	ands	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	08da      	lsrs	r2, r3, #3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3208      	adds	r2, #8
 8008cb4:	69b9      	ldr	r1, [r7, #24]
 8008cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	43db      	mvns	r3, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f003 0203 	and.w	r2, r3, #3
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80e0 	beq.w	8008ebc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cfc:	4b2f      	ldr	r3, [pc, #188]	; (8008dbc <HAL_GPIO_Init+0x238>)
 8008cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d02:	4a2e      	ldr	r2, [pc, #184]	; (8008dbc <HAL_GPIO_Init+0x238>)
 8008d04:	f043 0302 	orr.w	r3, r3, #2
 8008d08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d0c:	4b2b      	ldr	r3, [pc, #172]	; (8008dbc <HAL_GPIO_Init+0x238>)
 8008d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d1a:	4a29      	ldr	r2, [pc, #164]	; (8008dc0 <HAL_GPIO_Init+0x23c>)
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	3302      	adds	r3, #2
 8008d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	220f      	movs	r2, #15
 8008d32:	fa02 f303 	lsl.w	r3, r2, r3
 8008d36:	43db      	mvns	r3, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a20      	ldr	r2, [pc, #128]	; (8008dc4 <HAL_GPIO_Init+0x240>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d052      	beq.n	8008dec <HAL_GPIO_Init+0x268>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1f      	ldr	r2, [pc, #124]	; (8008dc8 <HAL_GPIO_Init+0x244>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d031      	beq.n	8008db2 <HAL_GPIO_Init+0x22e>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1e      	ldr	r2, [pc, #120]	; (8008dcc <HAL_GPIO_Init+0x248>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d02b      	beq.n	8008dae <HAL_GPIO_Init+0x22a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <HAL_GPIO_Init+0x24c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d025      	beq.n	8008daa <HAL_GPIO_Init+0x226>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <HAL_GPIO_Init+0x250>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d01f      	beq.n	8008da6 <HAL_GPIO_Init+0x222>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_GPIO_Init+0x254>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d019      	beq.n	8008da2 <HAL_GPIO_Init+0x21e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <HAL_GPIO_Init+0x258>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <HAL_GPIO_Init+0x21a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <HAL_GPIO_Init+0x25c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00d      	beq.n	8008d9a <HAL_GPIO_Init+0x216>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a18      	ldr	r2, [pc, #96]	; (8008de4 <HAL_GPIO_Init+0x260>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d007      	beq.n	8008d96 <HAL_GPIO_Init+0x212>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <HAL_GPIO_Init+0x264>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d101      	bne.n	8008d92 <HAL_GPIO_Init+0x20e>
 8008d8e:	2309      	movs	r3, #9
 8008d90:	e02d      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008d92:	230a      	movs	r3, #10
 8008d94:	e02b      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008d96:	2308      	movs	r3, #8
 8008d98:	e029      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008d9a:	2307      	movs	r3, #7
 8008d9c:	e027      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008d9e:	2306      	movs	r3, #6
 8008da0:	e025      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008da2:	2305      	movs	r3, #5
 8008da4:	e023      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008da6:	2304      	movs	r3, #4
 8008da8:	e021      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008daa:	2303      	movs	r3, #3
 8008dac:	e01f      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008dae:	2302      	movs	r3, #2
 8008db0:	e01d      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e01b      	b.n	8008dee <HAL_GPIO_Init+0x26a>
 8008db6:	bf00      	nop
 8008db8:	58000080 	.word	0x58000080
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	58000400 	.word	0x58000400
 8008dc4:	58020000 	.word	0x58020000
 8008dc8:	58020400 	.word	0x58020400
 8008dcc:	58020800 	.word	0x58020800
 8008dd0:	58020c00 	.word	0x58020c00
 8008dd4:	58021000 	.word	0x58021000
 8008dd8:	58021400 	.word	0x58021400
 8008ddc:	58021800 	.word	0x58021800
 8008de0:	58021c00 	.word	0x58021c00
 8008de4:	58022000 	.word	0x58022000
 8008de8:	58022400 	.word	0x58022400
 8008dec:	2300      	movs	r3, #0
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	f002 0203 	and.w	r2, r2, #3
 8008df4:	0092      	lsls	r2, r2, #2
 8008df6:	4093      	lsls	r3, r2
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dfe:	4938      	ldr	r1, [pc, #224]	; (8008ee0 <HAL_GPIO_Init+0x35c>)
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	089b      	lsrs	r3, r3, #2
 8008e04:	3302      	adds	r3, #2
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	43db      	mvns	r3, r3
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	43db      	mvns	r3, r3
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	4013      	ands	r3, r2
 8008e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f47f ae63 	bne.w	8008b98 <HAL_GPIO_Init+0x14>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	3724      	adds	r7, #36	; 0x24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	58000400 	.word	0x58000400

08008ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	887b      	ldrh	r3, [r7, #2]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e001      	b.n	8008f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
 8008f20:	4613      	mov	r3, r2
 8008f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f24:	787b      	ldrb	r3, [r7, #1]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f30:	e003      	b.n	8008f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f32:	887b      	ldrh	r3, [r7, #2]
 8008f34:	041a      	lsls	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e08b      	b.n	8009072 <HAL_I2C_Init+0x12a>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2C_MspInit(hi2c);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fa f8fc 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	; 0x24
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx TIMINGR Configuration ------------------*/
	/* Configure I2Cx: Frequency range */
	hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f98:	611a      	str	r2, [r3, #16]

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Disable Own Address1 before set the Own Address1 configuration */
	hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fa8:	609a      	str	r2, [r3, #8]

	/* Configure I2Cx: Own Address1 and ack own address1 mode */
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d107      	bne.n	8008fc2 <HAL_I2C_Init+0x7a>
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fbe:	609a      	str	r2, [r3, #8]
 8008fc0:	e006      	b.n	8008fd0 <HAL_I2C_Init+0x88>
	} else /* I2C_ADDRESSINGMODE_10BIT */
	{
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
				| hi2c->Init.OwnAddress1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689a      	ldr	r2, [r3, #8]
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
				| hi2c->Init.OwnAddress1);
 8008fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
 8008fce:	609a      	str	r2, [r3, #8]
	}

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Addressing Master mode */
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d108      	bne.n	8008fea <HAL_I2C_Init+0xa2>
		SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	e007      	b.n	8008ffa <HAL_I2C_Init+0xb2>
	} else {
		/* Clear the I2C ADD10 bit */
		CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ff8:	605a      	str	r2, [r3, #4]
	}
	/* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
	hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6859      	ldr	r1, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	4b1d      	ldr	r3, [pc, #116]	; (800907c <HAL_I2C_Init+0x134>)
 8009006:	430b      	orrs	r3, r1
 8009008:	6053      	str	r3, [r2, #4]

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Disable Own Address2 before set the Own Address2 configuration */
	hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009018:	60da      	str	r2, [r3, #12]

	/* Configure I2Cx: Dual mode and Own Address2 */
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	ea42 0103 	orr.w	r1, r2, r3
			| (hi2c->Init.OwnAddress2Masks << 8));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	021a      	lsls	r2, r3, #8
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
			| (hi2c->Init.OwnAddress2Masks << 8));
 8009030:	430a      	orrs	r2, r1
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 8009032:	60da      	str	r2, [r3, #12]

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	hi2c->Instance->CR1 =
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69d9      	ldr	r1, [r3, #28]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1a      	ldr	r2, [r3, #32]
	hi2c->Instance->CR1 =
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009040:	430a      	orrs	r2, r1
	hi2c->Instance->CR1 =
 8009042:	601a      	str	r2, [r3, #0]

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	645a      	str	r2, [r3, #68]	; 0x44
	hi2c->State = HAL_I2C_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2c->PreviousState = I2C_STATE_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	02008000 	.word	0x02008000

08009080 <HAL_I2C_Master_Transmit>:
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	461a      	mov	r2, r3
 800908c:	460b      	mov	r3, r1
 800908e:	817b      	strh	r3, [r7, #10]
 8009090:	4613      	mov	r3, r2
 8009092:	813b      	strh	r3, [r7, #8]
	uint32_t tickstart;
	uint32_t xfermode;

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b20      	cmp	r3, #32
 800909e:	f040 80fd 	bne.w	800929c <HAL_I2C_Master_Transmit+0x21c>
		/* Process Locked */
		__HAL_LOCK(hi2c);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_I2C_Master_Transmit+0x30>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e0f6      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Init tickstart for timeout management*/
		tickstart = HAL_GetTick();
 80090b8:	f7fa fe00 	bl	8003cbc <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	2319      	movs	r3, #25
 80090c4:	2201      	movs	r2, #1
 80090c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fa0a 	bl	80094e4 <I2C_WaitOnFlagUntilTimeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <HAL_I2C_Master_Transmit+0x5a>
				I2C_TIMEOUT_BUSY, tickstart) != HAL_OK) {
			return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e0e1      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
		}

		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2221      	movs	r2, #33	; 0x21
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2210      	movs	r2, #16
 80090e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	645a      	str	r2, [r3, #68]	; 0x44

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	893a      	ldrh	r2, [r7, #8]
 80090fa:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferISR = NULL;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	635a      	str	r2, [r3, #52]	; 0x34

		if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	2bff      	cmp	r3, #255	; 0xff
 800910a:	d906      	bls.n	800911a <HAL_I2C_Master_Transmit+0x9a>
			hi2c->XferSize = MAX_NBYTE_SIZE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	22ff      	movs	r2, #255	; 0xff
 8009110:	851a      	strh	r2, [r3, #40]	; 0x28
			xfermode = I2C_RELOAD_MODE;
 8009112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e007      	b.n	800912a <HAL_I2C_Master_Transmit+0xaa>
		} else {
			hi2c->XferSize = hi2c->XferCount;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	851a      	strh	r2, [r3, #40]	; 0x28
			xfermode = I2C_AUTOEND_MODE;
 8009124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009128:	617b      	str	r3, [r7, #20]
		}

		if (hi2c->XferSize > 0U) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d024      	beq.n	800917c <HAL_I2C_Master_Transmit+0xfc>
			/* Preload TX register */
			/* Write data to TXDR */
			hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	629a      	str	r2, [r3, #40]	; 0x28

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	625a      	str	r2, [r3, #36]	; 0x24

			hi2c->XferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	855a      	strh	r2, [r3, #42]	; 0x2a
			hi2c->XferSize--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	851a      	strh	r2, [r3, #40]	; 0x28

			/* Send Slave Address */
			/* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
			I2C_TransferConfig(hi2c, DevAddress,
					(uint8_t) (hi2c->XferSize + 1U), xfermode,
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress,
 8009166:	b2db      	uxtb	r3, r3
 8009168:	3301      	adds	r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	8979      	ldrh	r1, [r7, #10]
 800916e:	4b4e      	ldr	r3, [pc, #312]	; (80092a8 <HAL_I2C_Master_Transmit+0x228>)
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fc05 	bl	8009984 <I2C_TransferConfig>
 800917a:	e066      	b.n	800924a <HAL_I2C_Master_Transmit+0x1ca>
					I2C_GENERATE_START_WRITE);
		} else {
			/* Send Slave Address */
			/* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	b2da      	uxtb	r2, r3
 8009182:	8979      	ldrh	r1, [r7, #10]
 8009184:	4b48      	ldr	r3, [pc, #288]	; (80092a8 <HAL_I2C_Master_Transmit+0x228>)
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fbfa 	bl	8009984 <I2C_TransferConfig>
					xfermode,
					I2C_GENERATE_START_WRITE);
		}

		while (hi2c->XferCount > 0U) {
 8009190:	e05b      	b.n	800924a <HAL_I2C_Master_Transmit+0x1ca>
			/* Wait until TXIS flag is set */
			if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart)
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	6a39      	ldr	r1, [r7, #32]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f9fd 	bl	8009596 <I2C_WaitOnTXISFlagUntilTimeout>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <HAL_I2C_Master_Transmit+0x126>
					!= HAL_OK) {
				return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e07b      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
			}
			/* Write data to TXDR */
			hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	629a      	str	r2, [r3, #40]	; 0x28

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24

			hi2c->XferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	855a      	strh	r2, [r3, #42]	; 0x2a
			hi2c->XferSize--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d034      	beq.n	800924a <HAL_I2C_Master_Transmit+0x1ca>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d130      	bne.n	800924a <HAL_I2C_Master_Transmit+0x1ca>
				/* Wait until TCR flag is set */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET,
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	2200      	movs	r2, #0
 80091f0:	2180      	movs	r1, #128	; 0x80
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 f976 	bl	80094e4 <I2C_WaitOnFlagUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_I2C_Master_Transmit+0x182>
						Timeout, tickstart) != HAL_OK) {
					return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e04d      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
				}

				if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009206:	b29b      	uxth	r3, r3
 8009208:	2bff      	cmp	r3, #255	; 0xff
 800920a:	d90e      	bls.n	800922a <HAL_I2C_Master_Transmit+0x1aa>
					hi2c->XferSize = MAX_NBYTE_SIZE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	22ff      	movs	r2, #255	; 0xff
 8009210:	851a      	strh	r2, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
							(uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8009216:	b2da      	uxtb	r2, r3
 8009218:	8979      	ldrh	r1, [r7, #10]
 800921a:	2300      	movs	r3, #0
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fbae 	bl	8009984 <I2C_TransferConfig>
 8009228:	e00f      	b.n	800924a <HAL_I2C_Master_Transmit+0x1ca>
							I2C_NO_STARTSTOP);
				} else {
					hi2c->XferSize = hi2c->XferCount;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	851a      	strh	r2, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
							(uint8_t) hi2c->XferSize, I2C_AUTOEND_MODE,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8009238:	b2da      	uxtb	r2, r3
 800923a:	8979      	ldrh	r1, [r7, #10]
 800923c:	2300      	movs	r3, #0
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb9d 	bl	8009984 <I2C_TransferConfig>
		while (hi2c->XferCount > 0U) {
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924e:	b29b      	uxth	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d19e      	bne.n	8009192 <HAL_I2C_Master_Transmit+0x112>
			}
		}

		/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
		/* Wait until STOPF flag is set */
		if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart)
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	6a39      	ldr	r1, [r7, #32]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f9e3 	bl	8009624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <HAL_I2C_Master_Transmit+0x1e8>
				!= HAL_OK) {
			return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e01a      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
		}

		/* Clear STOP Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2220      	movs	r2, #32
 800926e:	61da      	str	r2, [r3, #28]

		/* Clear Configuration Register 2 */
		I2C_RESET_CR2(hi2c);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <HAL_I2C_Master_Transmit+0x22c>)
 800927c:	400b      	ands	r3, r1
 800927e:	6053      	str	r3, [r2, #4]

		hi2c->State = HAL_I2C_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_I2C_Master_Transmit+0x21e>
	} else {
		return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
	}
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	80002000 	.word	0x80002000
 80092ac:	fe00e800 	.word	0xfe00e800

080092b0 <HAL_I2C_Master_Receive>:
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	461a      	mov	r2, r3
 80092bc:	460b      	mov	r3, r1
 80092be:	817b      	strh	r3, [r7, #10]
 80092c0:	4613      	mov	r3, r2
 80092c2:	813b      	strh	r3, [r7, #8]
	uint32_t tickstart;

	if (hi2c->State == HAL_I2C_STATE_READY) {
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	f040 80db 	bne.w	8009488 <HAL_I2C_Master_Receive+0x1d8>
		/* Process Locked */
		__HAL_LOCK(hi2c);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_I2C_Master_Receive+0x30>
 80092dc:	2302      	movs	r3, #2
 80092de:	e0d4      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Init tickstart for timeout management*/
		tickstart = HAL_GetTick();
 80092e8:	f7fa fce8 	bl	8003cbc <HAL_GetTick>
 80092ec:	6178      	str	r0, [r7, #20]

		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	2319      	movs	r3, #25
 80092f4:	2201      	movs	r2, #1
 80092f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f8f2 	bl	80094e4 <I2C_WaitOnFlagUntilTimeout>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_I2C_Master_Receive+0x5a>
				I2C_TIMEOUT_BUSY, tickstart) != HAL_OK) {
			return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e0bf      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
		}

		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2222      	movs	r2, #34	; 0x22
 800930e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2210      	movs	r2, #16
 8009316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	645a      	str	r2, [r3, #68]	; 0x44

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	893a      	ldrh	r2, [r7, #8]
 800932a:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferISR = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	635a      	str	r2, [r3, #52]	; 0x34

		/* Send Slave Address */
		/* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
		if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	2bff      	cmp	r3, #255	; 0xff
 800933a:	d90e      	bls.n	800935a <HAL_I2C_Master_Receive+0xaa>
			hi2c->XferSize = MAX_NBYTE_SIZE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	22ff      	movs	r2, #255	; 0xff
 8009340:	851a      	strh	r2, [r3, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009346:	b2da      	uxtb	r2, r3
 8009348:	8979      	ldrh	r1, [r7, #10]
 800934a:	4b52      	ldr	r3, [pc, #328]	; (8009494 <HAL_I2C_Master_Receive+0x1e4>)
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fb16 	bl	8009984 <I2C_TransferConfig>
 8009358:	e06d      	b.n	8009436 <HAL_I2C_Master_Receive+0x186>
					I2C_RELOAD_MODE,
					I2C_GENERATE_START_READ);
		} else {
			hi2c->XferSize = hi2c->XferCount;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	851a      	strh	r2, [r3, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009368:	b2da      	uxtb	r2, r3
 800936a:	8979      	ldrh	r1, [r7, #10]
 800936c:	4b49      	ldr	r3, [pc, #292]	; (8009494 <HAL_I2C_Master_Receive+0x1e4>)
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 fb05 	bl	8009984 <I2C_TransferConfig>
					I2C_AUTOEND_MODE,
					I2C_GENERATE_START_READ);
		}

		while (hi2c->XferCount > 0U) {
 800937a:	e05c      	b.n	8009436 <HAL_I2C_Master_Receive+0x186>
			/* Wait until RXNE flag is set */
			if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart)
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	6a39      	ldr	r1, [r7, #32]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f993 	bl	80096ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_I2C_Master_Receive+0xe0>
					!= HAL_OK) {
				return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e07c      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
			}

			/* Read data from RXDR */
			*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->RXDR;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	b2d2      	uxtb	r2, r2
 800939c:	701a      	strb	r2, [r3, #0]

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24

			hi2c->XferSize--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	851a      	strh	r2, [r3, #40]	; 0x28
			hi2c->XferCount--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	855a      	strh	r2, [r3, #42]	; 0x2a

			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d034      	beq.n	8009436 <HAL_I2C_Master_Receive+0x186>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d130      	bne.n	8009436 <HAL_I2C_Master_Receive+0x186>
				/* Wait until TCR flag is set */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET,
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	2200      	movs	r2, #0
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f880 	bl	80094e4 <I2C_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <HAL_I2C_Master_Receive+0x13e>
						Timeout, tickstart) != HAL_OK) {
					return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e04d      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
				}

				if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	2bff      	cmp	r3, #255	; 0xff
 80093f6:	d90e      	bls.n	8009416 <HAL_I2C_Master_Receive+0x166>
					hi2c->XferSize = MAX_NBYTE_SIZE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	22ff      	movs	r2, #255	; 0xff
 80093fc:	851a      	strh	r2, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
							(uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8009402:	b2da      	uxtb	r2, r3
 8009404:	8979      	ldrh	r1, [r7, #10]
 8009406:	2300      	movs	r3, #0
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fab8 	bl	8009984 <I2C_TransferConfig>
 8009414:	e00f      	b.n	8009436 <HAL_I2C_Master_Receive+0x186>
							I2C_NO_STARTSTOP);
				} else {
					hi2c->XferSize = hi2c->XferCount;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	851a      	strh	r2, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
							(uint8_t) hi2c->XferSize, I2C_AUTOEND_MODE,
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8009424:	b2da      	uxtb	r2, r3
 8009426:	8979      	ldrh	r1, [r7, #10]
 8009428:	2300      	movs	r3, #0
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 faa7 	bl	8009984 <I2C_TransferConfig>
		while (hi2c->XferCount > 0U) {
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d19d      	bne.n	800937c <HAL_I2C_Master_Receive+0xcc>
			}
		}

		/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
		/* Wait until STOPF flag is set */
		if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart)
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	6a39      	ldr	r1, [r7, #32]
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f8ed 	bl	8009624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <HAL_I2C_Master_Receive+0x1a4>
				!= HAL_OK) {
			return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e01a      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
		}

		/* Clear STOP Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2220      	movs	r2, #32
 800945a:	61da      	str	r2, [r3, #28]

		/* Clear Configuration Register 2 */
		I2C_RESET_CR2(hi2c);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6859      	ldr	r1, [r3, #4]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <HAL_I2C_Master_Receive+0x1e8>)
 8009468:	400b      	ands	r3, r1
 800946a:	6053      	str	r3, [r2, #4]

		hi2c->State = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		return HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	e000      	b.n	800948a <HAL_I2C_Master_Receive+0x1da>
	} else {
		return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
	}
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	80002400 	.word	0x80002400
 8009498:	fe00e800 	.word	0xfe00e800

0800949c <I2C_Flush_TXDR>:
/**
 * @brief  I2C Tx data register flush process.
 * @param  hi2c I2C handle.
 * @retval None
 */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c) {
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	/* If a pending TXIS flag is set */
	/* Write a dummy data in TXDR to clear it */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d103      	bne.n	80094ba <I2C_Flush_TXDR+0x1e>
		hi2c->Instance->TXDR = 0x00U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Flush TX register if not empty */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d007      	beq.n	80094d8 <I2C_Flush_TXDR+0x3c>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0201 	orr.w	r2, r2, #1
 80094d6:	619a      	str	r2, [r3, #24]
	}
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	71fb      	strb	r3, [r7, #7]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80094f4:	e03b      	b.n	800956e <I2C_WaitOnFlagUntilTimeout+0x8a>
		/* Check if an error is detected */
		if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK) {
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f962 	bl	80097c4 <I2C_IsErrorOccurred>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <I2C_WaitOnFlagUntilTimeout+0x26>
			return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e041      	b.n	800958e <I2C_WaitOnFlagUntilTimeout+0xaa>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009510:	d02d      	beq.n	800956e <I2C_WaitOnFlagUntilTimeout+0x8a>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8009512:	f7fa fbd3 	bl	8003cbc <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d302      	bcc.n	8009528 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d122      	bne.n	800956e <I2C_WaitOnFlagUntilTimeout+0x8a>
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)) {
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4013      	ands	r3, r2
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	429a      	cmp	r2, r3
 8009536:	bf0c      	ite	eq
 8009538:	2301      	moveq	r3, #1
 800953a:	2300      	movne	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	429a      	cmp	r2, r3
 8009544:	d113      	bne.n	800956e <I2C_WaitOnFlagUntilTimeout+0x8a>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	f043 0220 	orr.w	r2, r3, #32
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	645a      	str	r2, [r3, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					hi2c->Mode = HAL_I2C_MODE_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e00f      	b.n	800958e <I2C_WaitOnFlagUntilTimeout+0xaa>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4013      	ands	r3, r2
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	429a      	cmp	r2, r3
 800957c:	bf0c      	ite	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	2300      	movne	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	429a      	cmp	r2, r3
 800958a:	d0b4      	beq.n	80094f6 <I2C_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <I2C_WaitOnTXISFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET) {
 80095a2:	e033      	b.n	800960c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
		/* Check if an error is detected */
		if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK) {
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 f90b 	bl	80097c4 <I2C_IsErrorOccurred>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
			return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e031      	b.n	800961c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095be:	d025      	beq.n	800960c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80095c0:	f7fa fb7c 	bl	8003cbc <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d302      	bcc.n	80095d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d11a      	bne.n	800960c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
				if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)) {
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d013      	beq.n	800960c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	645a      	str	r2, [r3, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

					return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e007      	b.n	800961c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET) {
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b02      	cmp	r3, #2
 8009618:	d1c4      	bne.n	80095a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
				}
			}
		}
	}
	return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <I2C_WaitOnSTOPFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 8009630:	e02f      	b.n	8009692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
		/* Check if an error is detected */
		if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK) {
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f8c4 	bl	80097c4 <I2C_IsErrorOccurred>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e02d      	b.n	80096a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
		}

		/* Check for the Timeout */
		if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8009646:	f7fa fb39 	bl	8003cbc <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d302      	bcc.n	800965c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11a      	bne.n	8009692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)) {
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d013      	beq.n	8009692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966e:	f043 0220 	orr.w	r2, r3, #32
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	645a      	str	r2, [r3, #68]	; 0x44
				hi2c->State = HAL_I2C_STATE_READY;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2220      	movs	r2, #32
 800967a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

				return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e007      	b.n	80096a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f003 0320 	and.w	r3, r3, #32
 800969c:	2b20      	cmp	r3, #32
 800969e:	d1c8      	bne.n	8009632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
			}
		}
	}
	return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75fb      	strb	r3, [r7, #23]

	while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096bc:	e071      	b.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
			&& (status == HAL_OK)) {
		/* Check if an error is detected */
		if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK) {
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f87e 	bl	80097c4 <I2C_IsErrorOccurred>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
			status = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	75fb      	strb	r3, [r7, #23]
		}

		/* Check if a STOPF is detected */
		if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d13b      	bne.n	8009758 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
				&& (status == HAL_OK)) {
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d138      	bne.n	8009758 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
			/* Check if an RXNE is pending */
			/* Store Last receive data if any */
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d105      	bne.n	8009700 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
					&& (hi2c->XferSize > 0U)) {
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
				/* Return HAL_OK */
				/* The Reading of data from RXDR will be done in caller function */
				status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	75fb      	strb	r3, [r7, #23]
			}

			/* Check a no-acknowledge have been detected */
			if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	2b10      	cmp	r3, #16
 800970c:	d121      	bne.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2210      	movs	r2, #16
 8009714:	61da      	str	r2, [r3, #28]
				hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2204      	movs	r2, #4
 800971a:	645a      	str	r2, [r3, #68]	; 0x44

				/* Clear STOP Flag */
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2220      	movs	r2, #32
 8009722:	61da      	str	r2, [r3, #28]

				/* Clear Configuration Register 2 */
				I2C_RESET_CR2(hi2c);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6859      	ldr	r1, [r3, #4]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009730:	400b      	ands	r3, r1
 8009732:	6053      	str	r3, [r2, #4]

				hi2c->State = HAL_I2C_STATE_READY;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2220      	movs	r2, #32
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

				status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
 8009750:	e002      	b.n	8009758 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
			} else {
				hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
			}
		}

		/* Check for the Timeout */
		if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009758:	f7fa fab0 	bl	8003cbc <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	d302      	bcc.n	800976e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d119      	bne.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
				&& (status == HAL_OK)) {
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d116      	bne.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)) {
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b04      	cmp	r3, #4
 8009780:	d00f      	beq.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009786:	f043 0220 	orr.w	r2, r3, #32
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	645a      	str	r2, [r3, #68]	; 0x44
				hi2c->State = HAL_I2C_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

				status = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
	while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d002      	beq.n	80097b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
			&& (status == HAL_OK)) {
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d083      	beq.n	80096be <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
			}
		}
	}
	return status;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	fe00e800 	.word	0xfe00e800

080097c4 <I2C_IsErrorOccurred>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08a      	sub	sp, #40	; 0x28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t itflag = hi2c->Instance->ISR;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	61bb      	str	r3, [r7, #24]
	uint32_t error_code = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	623b      	str	r3, [r7, #32]
	uint32_t tickstart = Tickstart;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	61fb      	str	r3, [r7, #28]
	uint32_t tmp1;
	HAL_I2C_ModeTypeDef tmp2;

	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF)) {
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d068      	beq.n	80098c2 <I2C_IsErrorOccurred+0xfe>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2210      	movs	r2, #16
 80097f6:	61da      	str	r2, [r3, #28]

		/* Wait until STOP Flag is set or timeout occurred */
		/* AutoEnd should be initiate after AF */
		while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097f8:	e049      	b.n	800988e <I2C_IsErrorOccurred+0xca>
				&& (status == HAL_OK)) {
			/* Check for the Timeout */
			if (Timeout != HAL_MAX_DELAY) {
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009800:	d045      	beq.n	800988e <I2C_IsErrorOccurred+0xca>
				if (((HAL_GetTick() - tickstart) > Timeout)
 8009802:	f7fa fa5b 	bl	8003cbc <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	429a      	cmp	r2, r3
 8009810:	d302      	bcc.n	8009818 <I2C_IsErrorOccurred+0x54>
						|| (Timeout == 0U)) {
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d13a      	bne.n	800988e <I2C_IsErrorOccurred+0xca>
					tmp1 = (uint32_t) (hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009822:	617b      	str	r3, [r7, #20]
					tmp2 = hi2c->Mode;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800982a:	74fb      	strb	r3, [r7, #19]

					/* In case of I2C still busy, try to regenerate a STOP manually */
					if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800983a:	d121      	bne.n	8009880 <I2C_IsErrorOccurred+0xbc>
							&& (tmp1 != I2C_CR2_STOP)
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009842:	d01d      	beq.n	8009880 <I2C_IsErrorOccurred+0xbc>
							&& (tmp2 != HAL_I2C_MODE_SLAVE)) {
 8009844:	7cfb      	ldrb	r3, [r7, #19]
 8009846:	2b20      	cmp	r3, #32
 8009848:	d01a      	beq.n	8009880 <I2C_IsErrorOccurred+0xbc>
						/* Generate Stop */
						hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009858:	605a      	str	r2, [r3, #4]

						/* Update Tick with new reference */
						tickstart = HAL_GetTick();
 800985a:	f7fa fa2f 	bl	8003cbc <HAL_GetTick>
 800985e:	61f8      	str	r0, [r7, #28]
					}

					while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 8009860:	e00e      	b.n	8009880 <I2C_IsErrorOccurred+0xbc>
						/* Check for the Timeout */
						if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF) {
 8009862:	f7fa fa2b 	bl	8003cbc <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b19      	cmp	r3, #25
 800986e:	d907      	bls.n	8009880 <I2C_IsErrorOccurred+0xbc>
							error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	f043 0320 	orr.w	r3, r3, #32
 8009876:	623b      	str	r3, [r7, #32]

							status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

							break;
 800987e:	e006      	b.n	800988e <I2C_IsErrorOccurred+0xca>
					while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b20      	cmp	r3, #32
 800988c:	d1e9      	bne.n	8009862 <I2C_IsErrorOccurred+0x9e>
		while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	f003 0320 	and.w	r3, r3, #32
 8009898:	2b20      	cmp	r3, #32
 800989a:	d003      	beq.n	80098a4 <I2C_IsErrorOccurred+0xe0>
				&& (status == HAL_OK)) {
 800989c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0aa      	beq.n	80097fa <I2C_IsErrorOccurred+0x36>
				}
			}
		}

		/* In case STOP Flag is detected, clear it */
		if (status == HAL_OK) {
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <I2C_IsErrorOccurred+0xf0>
			/* Clear STOP Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2220      	movs	r2, #32
 80098b2:	61da      	str	r2, [r3, #28]
		}

		error_code |= HAL_I2C_ERROR_AF;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	f043 0304 	orr.w	r3, r3, #4
 80098ba:	623b      	str	r3, [r7, #32]

		status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Refresh Content of Status register */
	itflag = hi2c->Instance->ISR;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	61bb      	str	r3, [r7, #24]

	/* Then verify if an additional errors occurs */
	/* Check if a Bus error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR)) {
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <I2C_IsErrorOccurred+0x128>
		error_code |= HAL_I2C_ERROR_BERR;
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	623b      	str	r3, [r7, #32]

		/* Clear BERR flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098e4:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Check if an Over-Run/Under-Run error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR)) {
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00b      	beq.n	800990e <I2C_IsErrorOccurred+0x14a>
		error_code |= HAL_I2C_ERROR_OVR;
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	f043 0308 	orr.w	r3, r3, #8
 80098fc:	623b      	str	r3, [r7, #32]

		/* Clear OVR flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009906:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Check if an Arbitration Loss error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO)) {
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <I2C_IsErrorOccurred+0x16c>
		error_code |= HAL_I2C_ERROR_ARLO;
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	f043 0302 	orr.w	r3, r3, #2
 800991e:	623b      	str	r3, [r7, #32]

		/* Clear ARLO flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009928:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (status != HAL_OK) {
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01c      	beq.n	8009972 <I2C_IsErrorOccurred+0x1ae>
		/* Flush TX register */
		I2C_Flush_TXDR(hi2c);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff fdaf 	bl	800949c <I2C_Flush_TXDR>

		/* Clear Configuration Register 2 */
		I2C_RESET_CR2(hi2c);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6859      	ldr	r1, [r3, #4]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <I2C_IsErrorOccurred+0x1bc>)
 800994a:	400b      	ands	r3, r1
 800994c:	6053      	str	r3, [r2, #4]

		hi2c->ErrorCode |= error_code;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	431a      	orrs	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	645a      	str	r2, [r3, #68]	; 0x44
		hi2c->State = HAL_I2C_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	return status;
 8009972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009976:	4618      	mov	r0, r3
 8009978:	3728      	adds	r7, #40	; 0x28
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	fe00e800 	.word	0xfe00e800

08009984 <I2C_TransferConfig>:
 *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
 *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
 * @retval None
 */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint8_t Size, uint32_t Mode, uint32_t Request) {
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	817b      	strh	r3, [r7, #10]
 8009992:	4613      	mov	r3, r2
 8009994:	727b      	strb	r3, [r7, #9]
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_TRANSFER_MODE(Mode));
	assert_param(IS_TRANSFER_REQUEST(Request));

	/* Declaration of tmp to prevent undefined behavior of volatile usage */
	uint32_t tmp = ((uint32_t) (((uint32_t) DevAddress & I2C_CR2_SADD)
 8009996:	897b      	ldrh	r3, [r7, #10]
 8009998:	f3c3 0209 	ubfx	r2, r3, #0, #10
			| (((uint32_t) Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES)
 800999c:	7a7b      	ldrb	r3, [r7, #9]
 800999e:	041b      	lsls	r3, r3, #16
 80099a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099a4:	431a      	orrs	r2, r3
			| (uint32_t) Mode | (uint32_t) Request) & (~0x80000000U));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	431a      	orrs	r2, r3
	uint32_t tmp = ((uint32_t) (((uint32_t) DevAddress & I2C_CR2_SADD)
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	617b      	str	r3, [r7, #20]

	/* update CR2 register */
	MODIFY_REG(hi2c->Instance->CR2,
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	0d5b      	lsrs	r3, r3, #21
 80099be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80099c2:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <I2C_TransferConfig+0x60>)
 80099c4:	430b      	orrs	r3, r1
 80099c6:	43db      	mvns	r3, r3
 80099c8:	ea02 0103 	and.w	r1, r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
			((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)),
			tmp);
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	03ff63ff 	.word	0x03ff63ff

080099e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	d138      	bne.n	8009a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e032      	b.n	8009a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2224      	movs	r2, #36	; 0x24
 8009a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6819      	ldr	r1, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e000      	b.n	8009a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a70:	2302      	movs	r3, #2
  }
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d139      	bne.n	8009b08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e033      	b.n	8009b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2224      	movs	r2, #36	; 0x24
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0201 	bic.w	r2, r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ad0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	021b      	lsls	r3, r3, #8
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e000      	b.n	8009b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b08:	2302      	movs	r3, #2
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
	...

08009b18 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b26:	4a0c      	ldr	r2, [pc, #48]	; (8009b58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b28:	f043 0302 	orr.w	r3, r3, #2
 8009b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009b3e:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	4906      	ldr	r1, [pc, #24]	; (8009b5c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	604b      	str	r3, [r1, #4]
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	58000400 	.word	0x58000400

08009b60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b68:	4b19      	ldr	r3, [pc, #100]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d00a      	beq.n	8009b8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b74:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d001      	beq.n	8009b86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e01f      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e01d      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b8a:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f023 0207 	bic.w	r2, r3, #7
 8009b92:	490f      	ldr	r1, [pc, #60]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b9a:	f7fa f88f 	bl	8003cbc <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ba0:	e009      	b.n	8009bb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ba2:	f7fa f88b 	bl	8003cbc <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bb0:	d901      	bls.n	8009bb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e007      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009bb6:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc2:	d1ee      	bne.n	8009ba2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	58024800 	.word	0x58024800

08009bd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08c      	sub	sp, #48	; 0x30
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f000 bc48 	b.w	800a478 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 8088 	beq.w	8009d06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bf6:	4b99      	ldr	r3, [pc, #612]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c00:	4b96      	ldr	r3, [pc, #600]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d007      	beq.n	8009c1c <HAL_RCC_OscConfig+0x48>
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b18      	cmp	r3, #24
 8009c10:	d111      	bne.n	8009c36 <HAL_RCC_OscConfig+0x62>
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d10c      	bne.n	8009c36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c1c:	4b8f      	ldr	r3, [pc, #572]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d06d      	beq.n	8009d04 <HAL_RCC_OscConfig+0x130>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d169      	bne.n	8009d04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	f000 bc21 	b.w	800a478 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c3e:	d106      	bne.n	8009c4e <HAL_RCC_OscConfig+0x7a>
 8009c40:	4b86      	ldr	r3, [pc, #536]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a85      	ldr	r2, [pc, #532]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	e02e      	b.n	8009cac <HAL_RCC_OscConfig+0xd8>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10c      	bne.n	8009c70 <HAL_RCC_OscConfig+0x9c>
 8009c56:	4b81      	ldr	r3, [pc, #516]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a80      	ldr	r2, [pc, #512]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	4b7e      	ldr	r3, [pc, #504]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a7d      	ldr	r2, [pc, #500]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	e01d      	b.n	8009cac <HAL_RCC_OscConfig+0xd8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c78:	d10c      	bne.n	8009c94 <HAL_RCC_OscConfig+0xc0>
 8009c7a:	4b78      	ldr	r3, [pc, #480]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a77      	ldr	r2, [pc, #476]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	4b75      	ldr	r3, [pc, #468]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a74      	ldr	r2, [pc, #464]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e00b      	b.n	8009cac <HAL_RCC_OscConfig+0xd8>
 8009c94:	4b71      	ldr	r3, [pc, #452]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a70      	ldr	r2, [pc, #448]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	4b6e      	ldr	r3, [pc, #440]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a6d      	ldr	r2, [pc, #436]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d013      	beq.n	8009cdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb4:	f7fa f802 	bl	8003cbc <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cbc:	f7f9 fffe 	bl	8003cbc <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b64      	cmp	r3, #100	; 0x64
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e3d4      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cce:	4b63      	ldr	r3, [pc, #396]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0xe8>
 8009cda:	e014      	b.n	8009d06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cdc:	f7f9 ffee 	bl	8003cbc <HAL_GetTick>
 8009ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ce4:	f7f9 ffea 	bl	8003cbc <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b64      	cmp	r3, #100	; 0x64
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e3c0      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cf6:	4b59      	ldr	r3, [pc, #356]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x110>
 8009d02:	e000      	b.n	8009d06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 80ca 	beq.w	8009ea8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d14:	4b51      	ldr	r3, [pc, #324]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d1e:	4b4f      	ldr	r3, [pc, #316]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <HAL_RCC_OscConfig+0x166>
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	2b18      	cmp	r3, #24
 8009d2e:	d156      	bne.n	8009dde <HAL_RCC_OscConfig+0x20a>
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d151      	bne.n	8009dde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d3a:	4b48      	ldr	r3, [pc, #288]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <HAL_RCC_OscConfig+0x17e>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e392      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d52:	4b42      	ldr	r3, [pc, #264]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f023 0219 	bic.w	r2, r3, #25
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	493f      	ldr	r1, [pc, #252]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d64:	f7f9 ffaa 	bl	8003cbc <HAL_GetTick>
 8009d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d6c:	f7f9 ffa6 	bl	8003cbc <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e37c      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d7e:	4b37      	ldr	r3, [pc, #220]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0f0      	beq.n	8009d6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d8a:	f7f9 ffa3 	bl	8003cd4 <HAL_GetREVID>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d817      	bhi.n	8009dc8 <HAL_RCC_OscConfig+0x1f4>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b40      	cmp	r3, #64	; 0x40
 8009d9e:	d108      	bne.n	8009db2 <HAL_RCC_OscConfig+0x1de>
 8009da0:	4b2e      	ldr	r3, [pc, #184]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009da8:	4a2c      	ldr	r2, [pc, #176]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009db0:	e07a      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009db2:	4b2a      	ldr	r3, [pc, #168]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	031b      	lsls	r3, r3, #12
 8009dc0:	4926      	ldr	r1, [pc, #152]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dc6:	e06f      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dc8:	4b24      	ldr	r3, [pc, #144]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	061b      	lsls	r3, r3, #24
 8009dd6:	4921      	ldr	r1, [pc, #132]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ddc:	e064      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d047      	beq.n	8009e76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009de6:	4b1d      	ldr	r3, [pc, #116]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f023 0219 	bic.w	r2, r3, #25
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	491a      	ldr	r1, [pc, #104]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df8:	f7f9 ff60 	bl	8003cbc <HAL_GetTick>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e00:	f7f9 ff5c 	bl	8003cbc <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e332      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0304 	and.w	r3, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f0      	beq.n	8009e00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e1e:	f7f9 ff59 	bl	8003cd4 <HAL_GetREVID>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d819      	bhi.n	8009e60 <HAL_RCC_OscConfig+0x28c>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2b40      	cmp	r3, #64	; 0x40
 8009e32:	d108      	bne.n	8009e46 <HAL_RCC_OscConfig+0x272>
 8009e34:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e3c:	4a07      	ldr	r2, [pc, #28]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e42:	6053      	str	r3, [r2, #4]
 8009e44:	e030      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	031b      	lsls	r3, r3, #12
 8009e54:	4901      	ldr	r1, [pc, #4]	; (8009e5c <HAL_RCC_OscConfig+0x288>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	604b      	str	r3, [r1, #4]
 8009e5a:	e025      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
 8009e5c:	58024400 	.word	0x58024400
 8009e60:	4b9a      	ldr	r3, [pc, #616]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	4997      	ldr	r1, [pc, #604]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	604b      	str	r3, [r1, #4]
 8009e74:	e018      	b.n	8009ea8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e76:	4b95      	ldr	r3, [pc, #596]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a94      	ldr	r2, [pc, #592]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009e7c:	f023 0301 	bic.w	r3, r3, #1
 8009e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e82:	f7f9 ff1b 	bl	8003cbc <HAL_GetTick>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e88:	e008      	b.n	8009e9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e8a:	f7f9 ff17 	bl	8003cbc <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d901      	bls.n	8009e9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e2ed      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e9c:	4b8b      	ldr	r3, [pc, #556]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f0      	bne.n	8009e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 80a9 	beq.w	800a008 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009eb6:	4b85      	ldr	r3, [pc, #532]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ebe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ec0:	4b82      	ldr	r3, [pc, #520]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d007      	beq.n	8009edc <HAL_RCC_OscConfig+0x308>
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b18      	cmp	r3, #24
 8009ed0:	d13a      	bne.n	8009f48 <HAL_RCC_OscConfig+0x374>
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d135      	bne.n	8009f48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009edc:	4b7b      	ldr	r3, [pc, #492]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x320>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	2b80      	cmp	r3, #128	; 0x80
 8009eee:	d001      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e2c1      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ef4:	f7f9 feee 	bl	8003cd4 <HAL_GetREVID>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f241 0203 	movw	r2, #4099	; 0x1003
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d817      	bhi.n	8009f32 <HAL_RCC_OscConfig+0x35e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	2b20      	cmp	r3, #32
 8009f08:	d108      	bne.n	8009f1c <HAL_RCC_OscConfig+0x348>
 8009f0a:	4b70      	ldr	r3, [pc, #448]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f12:	4a6e      	ldr	r2, [pc, #440]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f1a:	e075      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f1c:	4b6b      	ldr	r3, [pc, #428]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	069b      	lsls	r3, r3, #26
 8009f2a:	4968      	ldr	r1, [pc, #416]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f30:	e06a      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f32:	4b66      	ldr	r3, [pc, #408]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	061b      	lsls	r3, r3, #24
 8009f40:	4962      	ldr	r1, [pc, #392]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f46:	e05f      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d042      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f50:	4b5e      	ldr	r3, [pc, #376]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a5d      	ldr	r2, [pc, #372]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5c:	f7f9 feae 	bl	8003cbc <HAL_GetTick>
 8009f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f64:	f7f9 feaa 	bl	8003cbc <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e280      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f76:	4b55      	ldr	r3, [pc, #340]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0f0      	beq.n	8009f64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f82:	f7f9 fea7 	bl	8003cd4 <HAL_GetREVID>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d817      	bhi.n	8009fc0 <HAL_RCC_OscConfig+0x3ec>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d108      	bne.n	8009faa <HAL_RCC_OscConfig+0x3d6>
 8009f98:	4b4c      	ldr	r3, [pc, #304]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009fa0:	4a4a      	ldr	r2, [pc, #296]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fa6:	6053      	str	r3, [r2, #4]
 8009fa8:	e02e      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
 8009faa:	4b48      	ldr	r3, [pc, #288]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	069b      	lsls	r3, r3, #26
 8009fb8:	4944      	ldr	r1, [pc, #272]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	604b      	str	r3, [r1, #4]
 8009fbe:	e023      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
 8009fc0:	4b42      	ldr	r3, [pc, #264]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	061b      	lsls	r3, r3, #24
 8009fce:	493f      	ldr	r1, [pc, #252]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60cb      	str	r3, [r1, #12]
 8009fd4:	e018      	b.n	800a008 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009fd6:	4b3d      	ldr	r3, [pc, #244]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a3c      	ldr	r2, [pc, #240]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe2:	f7f9 fe6b 	bl	8003cbc <HAL_GetTick>
 8009fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fe8:	e008      	b.n	8009ffc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fea:	f7f9 fe67 	bl	8003cbc <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e23d      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ffc:	4b33      	ldr	r3, [pc, #204]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f0      	bne.n	8009fea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0308 	and.w	r3, r3, #8
 800a010:	2b00      	cmp	r3, #0
 800a012:	d036      	beq.n	800a082 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d019      	beq.n	800a050 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a01c:	4b2b      	ldr	r3, [pc, #172]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a020:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a022:	f043 0301 	orr.w	r3, r3, #1
 800a026:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a028:	f7f9 fe48 	bl	8003cbc <HAL_GetTick>
 800a02c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a030:	f7f9 fe44 	bl	8003cbc <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e21a      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a042:	4b22      	ldr	r3, [pc, #136]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f0      	beq.n	800a030 <HAL_RCC_OscConfig+0x45c>
 800a04e:	e018      	b.n	800a082 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a054:	4a1d      	ldr	r2, [pc, #116]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a056:	f023 0301 	bic.w	r3, r3, #1
 800a05a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a05c:	f7f9 fe2e 	bl	8003cbc <HAL_GetTick>
 800a060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a062:	e008      	b.n	800a076 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a064:	f7f9 fe2a 	bl	8003cbc <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e200      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a076:	4b15      	ldr	r3, [pc, #84]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f0      	bne.n	800a064 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d039      	beq.n	800a102 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01c      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a096:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a09c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0a2:	f7f9 fe0b 	bl	8003cbc <HAL_GetTick>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0a8:	e008      	b.n	800a0bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0aa:	f7f9 fe07 	bl	8003cbc <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d901      	bls.n	800a0bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e1dd      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0bc:	4b03      	ldr	r3, [pc, #12]	; (800a0cc <HAL_RCC_OscConfig+0x4f8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0f0      	beq.n	800a0aa <HAL_RCC_OscConfig+0x4d6>
 800a0c8:	e01b      	b.n	800a102 <HAL_RCC_OscConfig+0x52e>
 800a0ca:	bf00      	nop
 800a0cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0d0:	4b9b      	ldr	r3, [pc, #620]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a9a      	ldr	r2, [pc, #616]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0dc:	f7f9 fdee 	bl	8003cbc <HAL_GetTick>
 800a0e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0e2:	e008      	b.n	800a0f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0e4:	f7f9 fdea 	bl	8003cbc <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e1c0      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0f6:	4b92      	ldr	r3, [pc, #584]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1f0      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8081 	beq.w	800a212 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a110:	4b8c      	ldr	r3, [pc, #560]	; (800a344 <HAL_RCC_OscConfig+0x770>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a8b      	ldr	r2, [pc, #556]	; (800a344 <HAL_RCC_OscConfig+0x770>)
 800a116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a11a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a11c:	f7f9 fdce 	bl	8003cbc <HAL_GetTick>
 800a120:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a124:	f7f9 fdca 	bl	8003cbc <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b64      	cmp	r3, #100	; 0x64
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e1a0      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a136:	4b83      	ldr	r3, [pc, #524]	; (800a344 <HAL_RCC_OscConfig+0x770>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d106      	bne.n	800a158 <HAL_RCC_OscConfig+0x584>
 800a14a:	4b7d      	ldr	r3, [pc, #500]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	4a7c      	ldr	r2, [pc, #496]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	6713      	str	r3, [r2, #112]	; 0x70
 800a156:	e02d      	b.n	800a1b4 <HAL_RCC_OscConfig+0x5e0>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10c      	bne.n	800a17a <HAL_RCC_OscConfig+0x5a6>
 800a160:	4b77      	ldr	r3, [pc, #476]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a164:	4a76      	ldr	r2, [pc, #472]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	6713      	str	r3, [r2, #112]	; 0x70
 800a16c:	4b74      	ldr	r3, [pc, #464]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	4a73      	ldr	r2, [pc, #460]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a172:	f023 0304 	bic.w	r3, r3, #4
 800a176:	6713      	str	r3, [r2, #112]	; 0x70
 800a178:	e01c      	b.n	800a1b4 <HAL_RCC_OscConfig+0x5e0>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2b05      	cmp	r3, #5
 800a180:	d10c      	bne.n	800a19c <HAL_RCC_OscConfig+0x5c8>
 800a182:	4b6f      	ldr	r3, [pc, #444]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a186:	4a6e      	ldr	r2, [pc, #440]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a188:	f043 0304 	orr.w	r3, r3, #4
 800a18c:	6713      	str	r3, [r2, #112]	; 0x70
 800a18e:	4b6c      	ldr	r3, [pc, #432]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a192:	4a6b      	ldr	r2, [pc, #428]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	6713      	str	r3, [r2, #112]	; 0x70
 800a19a:	e00b      	b.n	800a1b4 <HAL_RCC_OscConfig+0x5e0>
 800a19c:	4b68      	ldr	r3, [pc, #416]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a0:	4a67      	ldr	r2, [pc, #412]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a1a2:	f023 0301 	bic.w	r3, r3, #1
 800a1a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1a8:	4b65      	ldr	r3, [pc, #404]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	4a64      	ldr	r2, [pc, #400]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a1ae:	f023 0304 	bic.w	r3, r3, #4
 800a1b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d015      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1bc:	f7f9 fd7e 	bl	8003cbc <HAL_GetTick>
 800a1c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1c2:	e00a      	b.n	800a1da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1c4:	f7f9 fd7a 	bl	8003cbc <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d901      	bls.n	800a1da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e14e      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1da:	4b59      	ldr	r3, [pc, #356]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0ee      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x5f0>
 800a1e6:	e014      	b.n	800a212 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e8:	f7f9 fd68 	bl	8003cbc <HAL_GetTick>
 800a1ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1ee:	e00a      	b.n	800a206 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f0:	f7f9 fd64 	bl	8003cbc <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e138      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a206:	4b4e      	ldr	r3, [pc, #312]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1ee      	bne.n	800a1f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	f000 812d 	beq.w	800a476 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a21c:	4b48      	ldr	r3, [pc, #288]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a224:	2b18      	cmp	r3, #24
 800a226:	f000 80bd 	beq.w	800a3a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2b02      	cmp	r3, #2
 800a230:	f040 809e 	bne.w	800a370 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a234:	4b42      	ldr	r3, [pc, #264]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a41      	ldr	r2, [pc, #260]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a23a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a240:	f7f9 fd3c 	bl	8003cbc <HAL_GetTick>
 800a244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a246:	e008      	b.n	800a25a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a248:	f7f9 fd38 	bl	8003cbc <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	2b02      	cmp	r3, #2
 800a254:	d901      	bls.n	800a25a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e10e      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a25a:	4b39      	ldr	r3, [pc, #228]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f0      	bne.n	800a248 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a266:	4b36      	ldr	r3, [pc, #216]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26a:	4b37      	ldr	r3, [pc, #220]	; (800a348 <HAL_RCC_OscConfig+0x774>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a276:	0112      	lsls	r2, r2, #4
 800a278:	430a      	orrs	r2, r1
 800a27a:	4931      	ldr	r1, [pc, #196]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	628b      	str	r3, [r1, #40]	; 0x28
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a284:	3b01      	subs	r3, #1
 800a286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28e:	3b01      	subs	r3, #1
 800a290:	025b      	lsls	r3, r3, #9
 800a292:	b29b      	uxth	r3, r3
 800a294:	431a      	orrs	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29a:	3b01      	subs	r3, #1
 800a29c:	041b      	lsls	r3, r3, #16
 800a29e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	061b      	lsls	r3, r3, #24
 800a2ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2b0:	4923      	ldr	r1, [pc, #140]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a2b6:	4b22      	ldr	r3, [pc, #136]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	4a21      	ldr	r2, [pc, #132]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2bc:	f023 0301 	bic.w	r3, r3, #1
 800a2c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2c2:	4b1f      	ldr	r3, [pc, #124]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2c6:	4b21      	ldr	r3, [pc, #132]	; (800a34c <HAL_RCC_OscConfig+0x778>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2ce:	00d2      	lsls	r2, r2, #3
 800a2d0:	491b      	ldr	r1, [pc, #108]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	f023 020c 	bic.w	r2, r3, #12
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	4917      	ldr	r1, [pc, #92]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	f023 0202 	bic.w	r2, r3, #2
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f4:	4912      	ldr	r1, [pc, #72]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2fa:	4b11      	ldr	r3, [pc, #68]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	4a10      	ldr	r2, [pc, #64]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a306:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	4a0d      	ldr	r2, [pc, #52]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a30c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a312:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	4a0a      	ldr	r2, [pc, #40]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a31c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a31e:	4b08      	ldr	r3, [pc, #32]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a322:	4a07      	ldr	r2, [pc, #28]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a324:	f043 0301 	orr.w	r3, r3, #1
 800a328:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <HAL_RCC_OscConfig+0x76c>)
 800a330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a336:	f7f9 fcc1 	bl	8003cbc <HAL_GetTick>
 800a33a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a33c:	e011      	b.n	800a362 <HAL_RCC_OscConfig+0x78e>
 800a33e:	bf00      	nop
 800a340:	58024400 	.word	0x58024400
 800a344:	58024800 	.word	0x58024800
 800a348:	fffffc0c 	.word	0xfffffc0c
 800a34c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a350:	f7f9 fcb4 	bl	8003cbc <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e08a      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a362:	4b47      	ldr	r3, [pc, #284]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f0      	beq.n	800a350 <HAL_RCC_OscConfig+0x77c>
 800a36e:	e082      	b.n	800a476 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a370:	4b43      	ldr	r3, [pc, #268]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a42      	ldr	r2, [pc, #264]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a37a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a37c:	f7f9 fc9e 	bl	8003cbc <HAL_GetTick>
 800a380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a384:	f7f9 fc9a 	bl	8003cbc <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e070      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a396:	4b3a      	ldr	r3, [pc, #232]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f0      	bne.n	800a384 <HAL_RCC_OscConfig+0x7b0>
 800a3a2:	e068      	b.n	800a476 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3a4:	4b36      	ldr	r3, [pc, #216]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3aa:	4b35      	ldr	r3, [pc, #212]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d031      	beq.n	800a41c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f003 0203 	and.w	r2, r3, #3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d12a      	bne.n	800a41c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	091b      	lsrs	r3, r3, #4
 800a3ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d122      	bne.n	800a41c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d11a      	bne.n	800a41c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	0a5b      	lsrs	r3, r3, #9
 800a3ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d111      	bne.n	800a41c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a404:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a406:	429a      	cmp	r2, r3
 800a408:	d108      	bne.n	800a41c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	0e1b      	lsrs	r3, r3, #24
 800a40e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a416:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a418:	429a      	cmp	r2, r3
 800a41a:	d001      	beq.n	800a420 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e02b      	b.n	800a478 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a420:	4b17      	ldr	r3, [pc, #92]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	08db      	lsrs	r3, r3, #3
 800a426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a42a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	429a      	cmp	r2, r3
 800a434:	d01f      	beq.n	800a476 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	4a11      	ldr	r2, [pc, #68]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a442:	f7f9 fc3b 	bl	8003cbc <HAL_GetTick>
 800a446:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a448:	bf00      	nop
 800a44a:	f7f9 fc37 	bl	8003cbc <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	4293      	cmp	r3, r2
 800a454:	d0f9      	beq.n	800a44a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a456:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <HAL_RCC_OscConfig+0x8b0>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a462:	00d2      	lsls	r2, r2, #3
 800a464:	4906      	ldr	r1, [pc, #24]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a466:	4313      	orrs	r3, r2
 800a468:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	4a04      	ldr	r2, [pc, #16]	; (800a480 <HAL_RCC_OscConfig+0x8ac>)
 800a470:	f043 0301 	orr.w	r3, r3, #1
 800a474:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3730      	adds	r7, #48	; 0x30
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	58024400 	.word	0x58024400
 800a484:	ffff0007 	.word	0xffff0007

0800a488 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e19c      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a49c:	4b8a      	ldr	r3, [pc, #552]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d910      	bls.n	800a4cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4aa:	4b87      	ldr	r3, [pc, #540]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f023 020f 	bic.w	r2, r3, #15
 800a4b2:	4985      	ldr	r1, [pc, #532]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ba:	4b83      	ldr	r3, [pc, #524]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d001      	beq.n	800a4cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e184      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d010      	beq.n	800a4fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	4b7b      	ldr	r3, [pc, #492]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d908      	bls.n	800a4fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4e8:	4b78      	ldr	r3, [pc, #480]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	4975      	ldr	r1, [pc, #468]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0308 	and.w	r3, r3, #8
 800a502:	2b00      	cmp	r3, #0
 800a504:	d010      	beq.n	800a528 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695a      	ldr	r2, [r3, #20]
 800a50a:	4b70      	ldr	r3, [pc, #448]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a512:	429a      	cmp	r2, r3
 800a514:	d908      	bls.n	800a528 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a516:	4b6d      	ldr	r3, [pc, #436]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	496a      	ldr	r1, [pc, #424]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a524:	4313      	orrs	r3, r2
 800a526:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d010      	beq.n	800a556 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699a      	ldr	r2, [r3, #24]
 800a538:	4b64      	ldr	r3, [pc, #400]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a540:	429a      	cmp	r2, r3
 800a542:	d908      	bls.n	800a556 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a544:	4b61      	ldr	r3, [pc, #388]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	495e      	ldr	r1, [pc, #376]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a552:	4313      	orrs	r3, r2
 800a554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d010      	beq.n	800a584 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69da      	ldr	r2, [r3, #28]
 800a566:	4b59      	ldr	r3, [pc, #356]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a56e:	429a      	cmp	r2, r3
 800a570:	d908      	bls.n	800a584 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a572:	4b56      	ldr	r3, [pc, #344]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	4953      	ldr	r1, [pc, #332]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a580:	4313      	orrs	r3, r2
 800a582:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d010      	beq.n	800a5b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	4b4d      	ldr	r3, [pc, #308]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f003 030f 	and.w	r3, r3, #15
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d908      	bls.n	800a5b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5a0:	4b4a      	ldr	r3, [pc, #296]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	f023 020f 	bic.w	r2, r3, #15
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	4947      	ldr	r1, [pc, #284]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d055      	beq.n	800a66a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5be:	4b43      	ldr	r3, [pc, #268]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	4940      	ldr	r1, [pc, #256]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d107      	bne.n	800a5e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5d8:	4b3c      	ldr	r3, [pc, #240]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d121      	bne.n	800a628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e0f6      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d107      	bne.n	800a600 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5f0:	4b36      	ldr	r3, [pc, #216]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d115      	bne.n	800a628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0ea      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d107      	bne.n	800a618 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a608:	4b30      	ldr	r3, [pc, #192]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e0de      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a618:	4b2c      	ldr	r3, [pc, #176]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0304 	and.w	r3, r3, #4
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0d6      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a628:	4b28      	ldr	r3, [pc, #160]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	f023 0207 	bic.w	r2, r3, #7
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4925      	ldr	r1, [pc, #148]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a636:	4313      	orrs	r3, r2
 800a638:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a63a:	f7f9 fb3f 	bl	8003cbc <HAL_GetTick>
 800a63e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a640:	e00a      	b.n	800a658 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a642:	f7f9 fb3b 	bl	8003cbc <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a650:	4293      	cmp	r3, r2
 800a652:	d901      	bls.n	800a658 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e0be      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a658:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	429a      	cmp	r2, r3
 800a668:	d1eb      	bne.n	800a642 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d010      	beq.n	800a698 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	4b14      	ldr	r3, [pc, #80]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f003 030f 	and.w	r3, r3, #15
 800a682:	429a      	cmp	r2, r3
 800a684:	d208      	bcs.n	800a698 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f023 020f 	bic.w	r2, r3, #15
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	490e      	ldr	r1, [pc, #56]	; (800a6cc <HAL_RCC_ClockConfig+0x244>)
 800a694:	4313      	orrs	r3, r2
 800a696:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a698:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 030f 	and.w	r3, r3, #15
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d214      	bcs.n	800a6d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f023 020f 	bic.w	r2, r3, #15
 800a6ae:	4906      	ldr	r1, [pc, #24]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6b6:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <HAL_RCC_ClockConfig+0x240>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d005      	beq.n	800a6d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e086      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x34e>
 800a6c8:	52002000 	.word	0x52002000
 800a6cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d010      	beq.n	800a6fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	4b3f      	ldr	r3, [pc, #252]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d208      	bcs.n	800a6fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6ec:	4b3c      	ldr	r3, [pc, #240]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	4939      	ldr	r1, [pc, #228]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b00      	cmp	r3, #0
 800a708:	d010      	beq.n	800a72c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695a      	ldr	r2, [r3, #20]
 800a70e:	4b34      	ldr	r3, [pc, #208]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a716:	429a      	cmp	r2, r3
 800a718:	d208      	bcs.n	800a72c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a71a:	4b31      	ldr	r3, [pc, #196]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	492e      	ldr	r1, [pc, #184]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	d010      	beq.n	800a75a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	4b28      	ldr	r3, [pc, #160]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a744:	429a      	cmp	r2, r3
 800a746:	d208      	bcs.n	800a75a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a748:	4b25      	ldr	r3, [pc, #148]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	4922      	ldr	r1, [pc, #136]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a756:	4313      	orrs	r3, r2
 800a758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	d010      	beq.n	800a788 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69da      	ldr	r2, [r3, #28]
 800a76a:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a772:	429a      	cmp	r2, r3
 800a774:	d208      	bcs.n	800a788 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a776:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	4917      	ldr	r1, [pc, #92]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a784:	4313      	orrs	r3, r2
 800a786:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a788:	f000 f834 	bl	800a7f4 <HAL_RCC_GetSysClockFreq>
 800a78c:	4602      	mov	r2, r0
 800a78e:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	0a1b      	lsrs	r3, r3, #8
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	4912      	ldr	r1, [pc, #72]	; (800a7e4 <HAL_RCC_ClockConfig+0x35c>)
 800a79a:	5ccb      	ldrb	r3, [r1, r3]
 800a79c:	f003 031f 	and.w	r3, r3, #31
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <HAL_RCC_ClockConfig+0x358>)
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	4a0d      	ldr	r2, [pc, #52]	; (800a7e4 <HAL_RCC_ClockConfig+0x35c>)
 800a7b0:	5cd3      	ldrb	r3, [r2, r3]
 800a7b2:	f003 031f 	and.w	r3, r3, #31
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <HAL_RCC_ClockConfig+0x360>)
 800a7be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <HAL_RCC_ClockConfig+0x364>)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <HAL_RCC_ClockConfig+0x368>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f8 ffa4 	bl	8003718 <HAL_InitTick>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	58024400 	.word	0x58024400
 800a7e4:	08017124 	.word	0x08017124
 800a7e8:	24000094 	.word	0x24000094
 800a7ec:	24000090 	.word	0x24000090
 800a7f0:	24000098 	.word	0x24000098

0800a7f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b089      	sub	sp, #36	; 0x24
 800a7f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7fa:	4bb3      	ldr	r3, [pc, #716]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a802:	2b18      	cmp	r3, #24
 800a804:	f200 8155 	bhi.w	800aab2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a808:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a875 	.word	0x0800a875
 800a814:	0800aab3 	.word	0x0800aab3
 800a818:	0800aab3 	.word	0x0800aab3
 800a81c:	0800aab3 	.word	0x0800aab3
 800a820:	0800aab3 	.word	0x0800aab3
 800a824:	0800aab3 	.word	0x0800aab3
 800a828:	0800aab3 	.word	0x0800aab3
 800a82c:	0800aab3 	.word	0x0800aab3
 800a830:	0800a89b 	.word	0x0800a89b
 800a834:	0800aab3 	.word	0x0800aab3
 800a838:	0800aab3 	.word	0x0800aab3
 800a83c:	0800aab3 	.word	0x0800aab3
 800a840:	0800aab3 	.word	0x0800aab3
 800a844:	0800aab3 	.word	0x0800aab3
 800a848:	0800aab3 	.word	0x0800aab3
 800a84c:	0800aab3 	.word	0x0800aab3
 800a850:	0800a8a1 	.word	0x0800a8a1
 800a854:	0800aab3 	.word	0x0800aab3
 800a858:	0800aab3 	.word	0x0800aab3
 800a85c:	0800aab3 	.word	0x0800aab3
 800a860:	0800aab3 	.word	0x0800aab3
 800a864:	0800aab3 	.word	0x0800aab3
 800a868:	0800aab3 	.word	0x0800aab3
 800a86c:	0800aab3 	.word	0x0800aab3
 800a870:	0800a8a7 	.word	0x0800a8a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a874:	4b94      	ldr	r3, [pc, #592]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d009      	beq.n	800a894 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a880:	4b91      	ldr	r3, [pc, #580]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	08db      	lsrs	r3, r3, #3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	4a90      	ldr	r2, [pc, #576]	; (800aacc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
 800a890:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a892:	e111      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a894:	4b8d      	ldr	r3, [pc, #564]	; (800aacc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a896:	61bb      	str	r3, [r7, #24]
      break;
 800a898:	e10e      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a89a:	4b8d      	ldr	r3, [pc, #564]	; (800aad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a89c:	61bb      	str	r3, [r7, #24]
      break;
 800a89e:	e10b      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a8a0:	4b8c      	ldr	r3, [pc, #560]	; (800aad4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a8a2:	61bb      	str	r3, [r7, #24]
      break;
 800a8a4:	e108      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8a6:	4b88      	ldr	r3, [pc, #544]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a8b0:	4b85      	ldr	r3, [pc, #532]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	091b      	lsrs	r3, r3, #4
 800a8b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a8bc:	4b82      	ldr	r3, [pc, #520]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a8c6:	4b80      	ldr	r3, [pc, #512]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ca:	08db      	lsrs	r3, r3, #3
 800a8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	fb02 f303 	mul.w	r3, r2, r3
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 80e1 	beq.w	800aaac <HAL_RCC_GetSysClockFreq+0x2b8>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	f000 8083 	beq.w	800a9f8 <HAL_RCC_GetSysClockFreq+0x204>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	f200 80a1 	bhi.w	800aa3c <HAL_RCC_GetSysClockFreq+0x248>
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_RCC_GetSysClockFreq+0x114>
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d056      	beq.n	800a9b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a906:	e099      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a908:	4b6f      	ldr	r3, [pc, #444]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0320 	and.w	r3, r3, #32
 800a910:	2b00      	cmp	r3, #0
 800a912:	d02d      	beq.n	800a970 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a914:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	08db      	lsrs	r3, r3, #3
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	4a6b      	ldr	r2, [pc, #428]	; (800aacc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a920:	fa22 f303 	lsr.w	r3, r2, r3
 800a924:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	ee07 3a90 	vmov	s15, r3
 800a92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93e:	4b62      	ldr	r3, [pc, #392]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a952:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a96e:	e087      	b.n	800aa80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aadc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a982:	4b51      	ldr	r3, [pc, #324]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a992:	ed97 6a02 	vldr	s12, [r7, #8]
 800a996:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9b2:	e065      	b.n	800aa80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9be:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c6:	4b40      	ldr	r3, [pc, #256]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9f6:	e043      	b.n	800aa80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aae4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aa06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0a:	4b2f      	ldr	r3, [pc, #188]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa3a:	e021      	b.n	800aa80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa46:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aa80:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	0a5b      	lsrs	r3, r3, #9
 800aa86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa98:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa4:	ee17 3a90 	vmov	r3, s15
 800aaa8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aaaa:	e005      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	61bb      	str	r3, [r7, #24]
      break;
 800aab0:	e002      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aab4:	61bb      	str	r3, [r7, #24]
      break;
 800aab6:	bf00      	nop
  }

  return sysclockfreq;
 800aab8:	69bb      	ldr	r3, [r7, #24]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3724      	adds	r7, #36	; 0x24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400
 800aacc:	03d09000 	.word	0x03d09000
 800aad0:	003d0900 	.word	0x003d0900
 800aad4:	017d7840 	.word	0x017d7840
 800aad8:	46000000 	.word	0x46000000
 800aadc:	4c742400 	.word	0x4c742400
 800aae0:	4a742400 	.word	0x4a742400
 800aae4:	4bbebc20 	.word	0x4bbebc20

0800aae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aaee:	f7ff fe81 	bl	800a7f4 <HAL_RCC_GetSysClockFreq>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b10      	ldr	r3, [pc, #64]	; (800ab38 <HAL_RCC_GetHCLKFreq+0x50>)
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	f003 030f 	and.w	r3, r3, #15
 800aafe:	490f      	ldr	r1, [pc, #60]	; (800ab3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ab00:	5ccb      	ldrb	r3, [r1, r3]
 800ab02:	f003 031f 	and.w	r3, r3, #31
 800ab06:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	f003 030f 	and.w	r3, r3, #15
 800ab14:	4a09      	ldr	r2, [pc, #36]	; (800ab3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ab16:	5cd3      	ldrb	r3, [r2, r3]
 800ab18:	f003 031f 	and.w	r3, r3, #31
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab22:	4a07      	ldr	r2, [pc, #28]	; (800ab40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab26:	4a07      	ldr	r2, [pc, #28]	; (800ab44 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ab2c:	4b04      	ldr	r3, [pc, #16]	; (800ab40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	58024400 	.word	0x58024400
 800ab3c:	08017124 	.word	0x08017124
 800ab40:	24000094 	.word	0x24000094
 800ab44:	24000090 	.word	0x24000090

0800ab48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ab4c:	f7ff ffcc 	bl	800aae8 <HAL_RCC_GetHCLKFreq>
 800ab50:	4602      	mov	r2, r0
 800ab52:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	091b      	lsrs	r3, r3, #4
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	4904      	ldr	r1, [pc, #16]	; (800ab70 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab5e:	5ccb      	ldrb	r3, [r1, r3]
 800ab60:	f003 031f 	and.w	r3, r3, #31
 800ab64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	58024400 	.word	0x58024400
 800ab70:	08017124 	.word	0x08017124

0800ab74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab78:	f7ff ffb6 	bl	800aae8 <HAL_RCC_GetHCLKFreq>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	0a1b      	lsrs	r3, r3, #8
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	4904      	ldr	r1, [pc, #16]	; (800ab9c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab8a:	5ccb      	ldrb	r3, [r1, r3]
 800ab8c:	f003 031f 	and.w	r3, r3, #31
 800ab90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	08017124 	.word	0x08017124

0800aba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	223f      	movs	r2, #63	; 0x3f
 800abae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800abb0:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	f003 0207 	and.w	r2, r3, #7
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800abbc:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800abc8:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f003 020f 	and.w	r2, r3, #15
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800abd4:	4b11      	ldr	r3, [pc, #68]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800abe0:	4b0e      	ldr	r3, [pc, #56]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800abec:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800abf8:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <HAL_RCC_GetClockConfig+0x7c>)
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac04:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <HAL_RCC_GetClockConfig+0x80>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 020f 	and.w	r2, r3, #15
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	601a      	str	r2, [r3, #0]
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	52002000 	.word	0x52002000

0800ac24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac28:	b0ca      	sub	sp, #296	; 0x128
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac36:	2300      	movs	r3, #0
 800ac38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ac48:	2500      	movs	r5, #0
 800ac4a:	ea54 0305 	orrs.w	r3, r4, r5
 800ac4e:	d049      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac5a:	d02f      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ac5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac60:	d828      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac66:	d01a      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ac68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac6c:	d822      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ac72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac76:	d007      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ac78:	e01c      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac7a:	4bb8      	ldr	r3, [pc, #736]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	4ab7      	ldr	r2, [pc, #732]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac86:	e01a      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	2102      	movs	r1, #2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f002 fb61 	bl	800d358 <RCCEx_PLL2_Config>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac9c:	e00f      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca2:	3328      	adds	r3, #40	; 0x28
 800aca4:	2102      	movs	r1, #2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 fc08 	bl	800d4bc <RCCEx_PLL3_Config>
 800acac:	4603      	mov	r3, r0
 800acae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acb2:	e004      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acba:	e000      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800acbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acc6:	4ba5      	ldr	r3, [pc, #660]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800acce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd4:	4aa1      	ldr	r2, [pc, #644]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acd6:	430b      	orrs	r3, r1
 800acd8:	6513      	str	r3, [r2, #80]	; 0x50
 800acda:	e003      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ace0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ace4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800acf0:	f04f 0900 	mov.w	r9, #0
 800acf4:	ea58 0309 	orrs.w	r3, r8, r9
 800acf8:	d047      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d82a      	bhi.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad04:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800ad21 	.word	0x0800ad21
 800ad10:	0800ad2f 	.word	0x0800ad2f
 800ad14:	0800ad45 	.word	0x0800ad45
 800ad18:	0800ad63 	.word	0x0800ad63
 800ad1c:	0800ad63 	.word	0x0800ad63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad20:	4b8e      	ldr	r3, [pc, #568]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	4a8d      	ldr	r2, [pc, #564]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad2c:	e01a      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad32:	3308      	adds	r3, #8
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fb0e 	bl	800d358 <RCCEx_PLL2_Config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad42:	e00f      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad48:	3328      	adds	r3, #40	; 0x28
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f002 fbb5 	bl	800d4bc <RCCEx_PLL3_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad58:	e004      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad60:	e000      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ad62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad6c:	4b7b      	ldr	r3, [pc, #492]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad70:	f023 0107 	bic.w	r1, r3, #7
 800ad74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7a:	4a78      	ldr	r2, [pc, #480]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad80:	e003      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ad96:	f04f 0b00 	mov.w	fp, #0
 800ad9a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ad9e:	d04c      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ada6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adaa:	d030      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800adac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb0:	d829      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800adb2:	2bc0      	cmp	r3, #192	; 0xc0
 800adb4:	d02d      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800adb6:	2bc0      	cmp	r3, #192	; 0xc0
 800adb8:	d825      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800adba:	2b80      	cmp	r3, #128	; 0x80
 800adbc:	d018      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800adbe:	2b80      	cmp	r3, #128	; 0x80
 800adc0:	d821      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	d007      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800adca:	e01c      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adcc:	4b63      	ldr	r3, [pc, #396]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	4a62      	ldr	r2, [pc, #392]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800add2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800add8:	e01c      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adde:	3308      	adds	r3, #8
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f002 fab8 	bl	800d358 <RCCEx_PLL2_Config>
 800ade8:	4603      	mov	r3, r0
 800adea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800adee:	e011      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf4:	3328      	adds	r3, #40	; 0x28
 800adf6:	2100      	movs	r1, #0
 800adf8:	4618      	mov	r0, r3
 800adfa:	f002 fb5f 	bl	800d4bc <RCCEx_PLL3_Config>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae04:	e006      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae0c:	e002      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ae0e:	bf00      	nop
 800ae10:	e000      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ae12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ae1c:	4b4f      	ldr	r3, [pc, #316]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ae24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae2a:	4a4c      	ldr	r2, [pc, #304]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	6513      	str	r3, [r2, #80]	; 0x50
 800ae30:	e003      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ae46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ae50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d053      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae66:	d035      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ae68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae6c:	d82e      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae72:	d031      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ae74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae78:	d828      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae7e:	d01a      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ae80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae84:	d822      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ae8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae8e:	d007      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ae90:	e01c      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae92:	4b32      	ldr	r3, [pc, #200]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae96:	4a31      	ldr	r2, [pc, #196]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae9e:	e01c      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea4:	3308      	adds	r3, #8
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f002 fa55 	bl	800d358 <RCCEx_PLL2_Config>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aeb4:	e011      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeba:	3328      	adds	r3, #40	; 0x28
 800aebc:	2100      	movs	r1, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fafc 	bl	800d4bc <RCCEx_PLL3_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aeca:	e006      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aed2:	e002      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aed4:	bf00      	nop
 800aed6:	e000      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10b      	bne.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aee2:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aeea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aef2:	4a1a      	ldr	r2, [pc, #104]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aef4:	430b      	orrs	r3, r1
 800aef6:	6593      	str	r3, [r2, #88]	; 0x58
 800aef8:	e003      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aefe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800af0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af12:	2300      	movs	r3, #0
 800af14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800af18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800af1c:	460b      	mov	r3, r1
 800af1e:	4313      	orrs	r3, r2
 800af20:	d056      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800af22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af2e:	d038      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800af30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af34:	d831      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af3a:	d034      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800af3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af40:	d82b      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af46:	d01d      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800af48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4c:	d825      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d006      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800af52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af56:	d00a      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800af58:	e01f      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af60:	4ba2      	ldr	r3, [pc, #648]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	4aa1      	ldr	r2, [pc, #644]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e01c      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af72:	3308      	adds	r3, #8
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f002 f9ee 	bl	800d358 <RCCEx_PLL2_Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af82:	e011      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af88:	3328      	adds	r3, #40	; 0x28
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f002 fa95 	bl	800d4bc <RCCEx_PLL3_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af98:	e006      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afa0:	e002      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800afa2:	bf00      	nop
 800afa4:	e000      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800afa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800afb0:	4b8e      	ldr	r3, [pc, #568]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afc0:	4a8a      	ldr	r2, [pc, #552]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6593      	str	r3, [r2, #88]	; 0x58
 800afc6:	e003      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800afd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800afdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800afe0:	2300      	movs	r3, #0
 800afe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800afe6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800afea:	460b      	mov	r3, r1
 800afec:	4313      	orrs	r3, r2
 800afee:	d03a      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff6:	2b30      	cmp	r3, #48	; 0x30
 800aff8:	d01f      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800affa:	2b30      	cmp	r3, #48	; 0x30
 800affc:	d819      	bhi.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800affe:	2b20      	cmp	r3, #32
 800b000:	d00c      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b002:	2b20      	cmp	r3, #32
 800b004:	d815      	bhi.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b006:	2b00      	cmp	r3, #0
 800b008:	d019      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b00a:	2b10      	cmp	r3, #16
 800b00c:	d111      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b00e:	4b77      	ldr	r3, [pc, #476]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	4a76      	ldr	r2, [pc, #472]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b01a:	e011      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b020:	3308      	adds	r3, #8
 800b022:	2102      	movs	r1, #2
 800b024:	4618      	mov	r0, r3
 800b026:	f002 f997 	bl	800d358 <RCCEx_PLL2_Config>
 800b02a:	4603      	mov	r3, r0
 800b02c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b030:	e006      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b038:	e002      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b03a:	bf00      	nop
 800b03c:	e000      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b03e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b048:	4b68      	ldr	r3, [pc, #416]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b056:	4a65      	ldr	r2, [pc, #404]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b058:	430b      	orrs	r3, r1
 800b05a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b05c:	e003      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b072:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b076:	2300      	movs	r3, #0
 800b078:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b07c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b080:	460b      	mov	r3, r1
 800b082:	4313      	orrs	r3, r2
 800b084:	d051      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b08a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b090:	d035      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b096:	d82e      	bhi.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b09c:	d031      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b09e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0a2:	d828      	bhi.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b0a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a8:	d01a      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b0aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ae:	d822      	bhi.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b8:	d007      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b0ba:	e01c      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0bc:	4b4b      	ldr	r3, [pc, #300]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c0:	4a4a      	ldr	r2, [pc, #296]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0c8:	e01c      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f002 f940 	bl	800d358 <RCCEx_PLL2_Config>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0de:	e011      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e4:	3328      	adds	r3, #40	; 0x28
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f002 f9e7 	bl	800d4bc <RCCEx_PLL3_Config>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0f4:	e006      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0fc:	e002      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b0fe:	bf00      	nop
 800b100:	e000      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b102:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b10c:	4b37      	ldr	r3, [pc, #220]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b110:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b11a:	4a34      	ldr	r2, [pc, #208]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b11c:	430b      	orrs	r3, r1
 800b11e:	6513      	str	r3, [r2, #80]	; 0x50
 800b120:	e003      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b140:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b144:	460b      	mov	r3, r1
 800b146:	4313      	orrs	r3, r2
 800b148:	d056      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b154:	d033      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b15a:	d82c      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b15c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b160:	d02f      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b166:	d826      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b16c:	d02b      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b16e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b172:	d820      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b178:	d012      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b17a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b17e:	d81a      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b180:	2b00      	cmp	r3, #0
 800b182:	d022      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b188:	d115      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18e:	3308      	adds	r3, #8
 800b190:	2101      	movs	r1, #1
 800b192:	4618      	mov	r0, r3
 800b194:	f002 f8e0 	bl	800d358 <RCCEx_PLL2_Config>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b19e:	e015      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a4:	3328      	adds	r3, #40	; 0x28
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f002 f987 	bl	800d4bc <RCCEx_PLL3_Config>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b1b4:	e00a      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1bc:	e006      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b1be:	bf00      	nop
 800b1c0:	e004      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b1c2:	bf00      	nop
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b1c6:	bf00      	nop
 800b1c8:	e000      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10d      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1d4:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e2:	4a02      	ldr	r2, [pc, #8]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6513      	str	r3, [r2, #80]	; 0x50
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b1ea:	bf00      	nop
 800b1ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b208:	2300      	movs	r3, #0
 800b20a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b20e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b212:	460b      	mov	r3, r1
 800b214:	4313      	orrs	r3, r2
 800b216:	d055      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b21c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b224:	d033      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b22a:	d82c      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b230:	d02f      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b236:	d826      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b23c:	d02b      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b23e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b242:	d820      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b248:	d012      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b24a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b24e:	d81a      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d022      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b258:	d115      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	3308      	adds	r3, #8
 800b260:	2101      	movs	r1, #1
 800b262:	4618      	mov	r0, r3
 800b264:	f002 f878 	bl	800d358 <RCCEx_PLL2_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b26e:	e015      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	3328      	adds	r3, #40	; 0x28
 800b276:	2101      	movs	r1, #1
 800b278:	4618      	mov	r0, r3
 800b27a:	f002 f91f 	bl	800d4bc <RCCEx_PLL3_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b284:	e00a      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b28c:	e006      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b28e:	bf00      	nop
 800b290:	e004      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b292:	bf00      	nop
 800b294:	e002      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b296:	bf00      	nop
 800b298:	e000      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b2a4:	4ba3      	ldr	r3, [pc, #652]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2b4:	4a9f      	ldr	r2, [pc, #636]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b6:	430b      	orrs	r3, r1
 800b2b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b2ba:	e003      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b2d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b2da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	d037      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ee:	d00e      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b2f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2f4:	d816      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d018      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b2fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2fe:	d111      	bne.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b300:	4b8c      	ldr	r3, [pc, #560]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	4a8b      	ldr	r2, [pc, #556]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b30a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b30c:	e00f      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b312:	3308      	adds	r3, #8
 800b314:	2101      	movs	r1, #1
 800b316:	4618      	mov	r0, r3
 800b318:	f002 f81e 	bl	800d358 <RCCEx_PLL2_Config>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b322:	e004      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b32a:	e000      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b336:	4b7f      	ldr	r3, [pc, #508]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b344:	4a7b      	ldr	r2, [pc, #492]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b346:	430b      	orrs	r3, r1
 800b348:	6513      	str	r3, [r2, #80]	; 0x50
 800b34a:	e003      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b364:	2300      	movs	r3, #0
 800b366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b36a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b36e:	460b      	mov	r3, r1
 800b370:	4313      	orrs	r3, r2
 800b372:	d039      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d81c      	bhi.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b3c1 	.word	0x0800b3c1
 800b388:	0800b395 	.word	0x0800b395
 800b38c:	0800b3a3 	.word	0x0800b3a3
 800b390:	0800b3c1 	.word	0x0800b3c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b394:	4b67      	ldr	r3, [pc, #412]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	4a66      	ldr	r2, [pc, #408]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b39e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b3a0:	e00f      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	2102      	movs	r1, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 ffd4 	bl	800d358 <RCCEx_PLL2_Config>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b3b6:	e004      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3be:	e000      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b3c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10a      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3ca:	4b5a      	ldr	r3, [pc, #360]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ce:	f023 0103 	bic.w	r1, r3, #3
 800b3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d8:	4a56      	ldr	r2, [pc, #344]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3da:	430b      	orrs	r3, r1
 800b3dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3de:	e003      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b3f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b402:	460b      	mov	r3, r1
 800b404:	4313      	orrs	r3, r2
 800b406:	f000 809f 	beq.w	800b548 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b40a:	4b4b      	ldr	r3, [pc, #300]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a4a      	ldr	r2, [pc, #296]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b416:	f7f8 fc51 	bl	8003cbc <HAL_GetTick>
 800b41a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b41e:	e00b      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b420:	f7f8 fc4c 	bl	8003cbc <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	2b64      	cmp	r3, #100	; 0x64
 800b42e:	d903      	bls.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b436:	e005      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b438:	4b3f      	ldr	r3, [pc, #252]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0ed      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d179      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b44c:	4b39      	ldr	r3, [pc, #228]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b44e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b458:	4053      	eors	r3, r2
 800b45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d015      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b462:	4b34      	ldr	r3, [pc, #208]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b46a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b46e:	4b31      	ldr	r3, [pc, #196]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b472:	4a30      	ldr	r2, [pc, #192]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b478:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b47a:	4b2e      	ldr	r3, [pc, #184]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47e:	4a2d      	ldr	r2, [pc, #180]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b484:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b486:	4a2b      	ldr	r2, [pc, #172]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b48c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49a:	d118      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b49c:	f7f8 fc0e 	bl	8003cbc <HAL_GetTick>
 800b4a0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4a4:	e00d      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4a6:	f7f8 fc09 	bl	8003cbc <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b4b0:	1ad2      	subs	r2, r2, r3
 800b4b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d903      	bls.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b4c0:	e005      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4c2:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0eb      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d129      	bne.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4e6:	d10e      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b4e8:	4b12      	ldr	r3, [pc, #72]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4f8:	091a      	lsrs	r2, r3, #4
 800b4fa:	4b10      	ldr	r3, [pc, #64]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	4a0d      	ldr	r2, [pc, #52]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b500:	430b      	orrs	r3, r1
 800b502:	6113      	str	r3, [r2, #16]
 800b504:	e005      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b506:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	4a0a      	ldr	r2, [pc, #40]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b50c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b510:	6113      	str	r3, [r2, #16]
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b514:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b51e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b522:	4a04      	ldr	r2, [pc, #16]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b524:	430b      	orrs	r3, r1
 800b526:	6713      	str	r3, [r2, #112]	; 0x70
 800b528:	e00e      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b52a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b52e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b532:	e009      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b534:	58024400 	.word	0x58024400
 800b538:	58024800 	.word	0x58024800
 800b53c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b544:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 0301 	and.w	r3, r2, #1
 800b554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b55e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	f000 8089 	beq.w	800b67c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b570:	2b28      	cmp	r3, #40	; 0x28
 800b572:	d86b      	bhi.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b655 	.word	0x0800b655
 800b580:	0800b64d 	.word	0x0800b64d
 800b584:	0800b64d 	.word	0x0800b64d
 800b588:	0800b64d 	.word	0x0800b64d
 800b58c:	0800b64d 	.word	0x0800b64d
 800b590:	0800b64d 	.word	0x0800b64d
 800b594:	0800b64d 	.word	0x0800b64d
 800b598:	0800b64d 	.word	0x0800b64d
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b64d 	.word	0x0800b64d
 800b5a4:	0800b64d 	.word	0x0800b64d
 800b5a8:	0800b64d 	.word	0x0800b64d
 800b5ac:	0800b64d 	.word	0x0800b64d
 800b5b0:	0800b64d 	.word	0x0800b64d
 800b5b4:	0800b64d 	.word	0x0800b64d
 800b5b8:	0800b64d 	.word	0x0800b64d
 800b5bc:	0800b637 	.word	0x0800b637
 800b5c0:	0800b64d 	.word	0x0800b64d
 800b5c4:	0800b64d 	.word	0x0800b64d
 800b5c8:	0800b64d 	.word	0x0800b64d
 800b5cc:	0800b64d 	.word	0x0800b64d
 800b5d0:	0800b64d 	.word	0x0800b64d
 800b5d4:	0800b64d 	.word	0x0800b64d
 800b5d8:	0800b64d 	.word	0x0800b64d
 800b5dc:	0800b655 	.word	0x0800b655
 800b5e0:	0800b64d 	.word	0x0800b64d
 800b5e4:	0800b64d 	.word	0x0800b64d
 800b5e8:	0800b64d 	.word	0x0800b64d
 800b5ec:	0800b64d 	.word	0x0800b64d
 800b5f0:	0800b64d 	.word	0x0800b64d
 800b5f4:	0800b64d 	.word	0x0800b64d
 800b5f8:	0800b64d 	.word	0x0800b64d
 800b5fc:	0800b655 	.word	0x0800b655
 800b600:	0800b64d 	.word	0x0800b64d
 800b604:	0800b64d 	.word	0x0800b64d
 800b608:	0800b64d 	.word	0x0800b64d
 800b60c:	0800b64d 	.word	0x0800b64d
 800b610:	0800b64d 	.word	0x0800b64d
 800b614:	0800b64d 	.word	0x0800b64d
 800b618:	0800b64d 	.word	0x0800b64d
 800b61c:	0800b655 	.word	0x0800b655
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	3308      	adds	r3, #8
 800b626:	2101      	movs	r1, #1
 800b628:	4618      	mov	r0, r3
 800b62a:	f001 fe95 	bl	800d358 <RCCEx_PLL2_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b634:	e00f      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63a:	3328      	adds	r3, #40	; 0x28
 800b63c:	2101      	movs	r1, #1
 800b63e:	4618      	mov	r0, r3
 800b640:	f001 ff3c 	bl	800d4bc <RCCEx_PLL3_Config>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b64a:	e004      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b652:	e000      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b654:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10a      	bne.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b65e:	4bbf      	ldr	r3, [pc, #764]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b662:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66c:	4abb      	ldr	r2, [pc, #748]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b66e:	430b      	orrs	r3, r1
 800b670:	6553      	str	r3, [r2, #84]	; 0x54
 800b672:	e003      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f002 0302 	and.w	r3, r2, #2
 800b688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b692:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b696:	460b      	mov	r3, r1
 800b698:	4313      	orrs	r3, r2
 800b69a:	d041      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	d824      	bhi.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b6c5 	.word	0x0800b6c5
 800b6b4:	0800b6db 	.word	0x0800b6db
 800b6b8:	0800b6f9 	.word	0x0800b6f9
 800b6bc:	0800b6f9 	.word	0x0800b6f9
 800b6c0:	0800b6f9 	.word	0x0800b6f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 fe43 	bl	800d358 <RCCEx_PLL2_Config>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6d8:	e00f      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6de:	3328      	adds	r3, #40	; 0x28
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f001 feea 	bl	800d4bc <RCCEx_PLL3_Config>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6ee:	e004      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6f6:	e000      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b702:	4b96      	ldr	r3, [pc, #600]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b706:	f023 0107 	bic.w	r1, r3, #7
 800b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b710:	4a92      	ldr	r2, [pc, #584]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b712:	430b      	orrs	r3, r1
 800b714:	6553      	str	r3, [r2, #84]	; 0x54
 800b716:	e003      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f002 0304 	and.w	r3, r2, #4
 800b72c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b730:	2300      	movs	r3, #0
 800b732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b736:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4313      	orrs	r3, r2
 800b73e:	d044      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b748:	2b05      	cmp	r3, #5
 800b74a:	d825      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b74c:	a201      	add	r2, pc, #4	; (adr r2, 800b754 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b752:	bf00      	nop
 800b754:	0800b7a1 	.word	0x0800b7a1
 800b758:	0800b76d 	.word	0x0800b76d
 800b75c:	0800b783 	.word	0x0800b783
 800b760:	0800b7a1 	.word	0x0800b7a1
 800b764:	0800b7a1 	.word	0x0800b7a1
 800b768:	0800b7a1 	.word	0x0800b7a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b770:	3308      	adds	r3, #8
 800b772:	2101      	movs	r1, #1
 800b774:	4618      	mov	r0, r3
 800b776:	f001 fdef 	bl	800d358 <RCCEx_PLL2_Config>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b780:	e00f      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	3328      	adds	r3, #40	; 0x28
 800b788:	2101      	movs	r1, #1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 fe96 	bl	800d4bc <RCCEx_PLL3_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b796:	e004      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b79e:	e000      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10b      	bne.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7aa:	4b6c      	ldr	r3, [pc, #432]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ae:	f023 0107 	bic.w	r1, r3, #7
 800b7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ba:	4a68      	ldr	r2, [pc, #416]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6593      	str	r3, [r2, #88]	; 0x58
 800b7c0:	e003      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f002 0320 	and.w	r3, r2, #32
 800b7d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	d055      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7f6:	d033      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b7f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7fc:	d82c      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b802:	d02f      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b808:	d826      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b80a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b80e:	d02b      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b814:	d820      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b81a:	d012      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b820:	d81a      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b822:	2b00      	cmp	r3, #0
 800b824:	d022      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b82a:	d115      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b830:	3308      	adds	r3, #8
 800b832:	2100      	movs	r1, #0
 800b834:	4618      	mov	r0, r3
 800b836:	f001 fd8f 	bl	800d358 <RCCEx_PLL2_Config>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b840:	e015      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b846:	3328      	adds	r3, #40	; 0x28
 800b848:	2102      	movs	r1, #2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 fe36 	bl	800d4bc <RCCEx_PLL3_Config>
 800b850:	4603      	mov	r3, r0
 800b852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b856:	e00a      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b85e:	e006      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b860:	bf00      	nop
 800b862:	e004      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b864:	bf00      	nop
 800b866:	e002      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b868:	bf00      	nop
 800b86a:	e000      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b86c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10b      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b876:	4b39      	ldr	r3, [pc, #228]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b886:	4a35      	ldr	r2, [pc, #212]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b888:	430b      	orrs	r3, r1
 800b88a:	6553      	str	r3, [r2, #84]	; 0x54
 800b88c:	e003      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b8a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b8ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	d058      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8c2:	d033      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b8c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8c8:	d82c      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ce:	d02f      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8d4:	d826      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b8d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8da:	d02b      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b8dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8e0:	d820      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b8e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8e6:	d012      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b8e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ec:	d81a      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d022      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f6:	d115      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	2100      	movs	r1, #0
 800b900:	4618      	mov	r0, r3
 800b902:	f001 fd29 	bl	800d358 <RCCEx_PLL2_Config>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b90c:	e015      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	3328      	adds	r3, #40	; 0x28
 800b914:	2102      	movs	r1, #2
 800b916:	4618      	mov	r0, r3
 800b918:	f001 fdd0 	bl	800d4bc <RCCEx_PLL3_Config>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b922:	e00a      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b92a:	e006      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b92c:	bf00      	nop
 800b92e:	e004      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b930:	bf00      	nop
 800b932:	e002      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b934:	bf00      	nop
 800b936:	e000      	b.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d10e      	bne.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b942:	4b06      	ldr	r3, [pc, #24]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b946:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b952:	4a02      	ldr	r2, [pc, #8]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b954:	430b      	orrs	r3, r1
 800b956:	6593      	str	r3, [r2, #88]	; 0x58
 800b958:	e006      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b95a:	bf00      	nop
 800b95c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b964:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b978:	2300      	movs	r3, #0
 800b97a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b97e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b982:	460b      	mov	r3, r1
 800b984:	4313      	orrs	r3, r2
 800b986:	d055      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b990:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b994:	d033      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b996:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b99a:	d82c      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b99c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9a0:	d02f      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9a6:	d826      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b9ac:	d02b      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b9ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b9b2:	d820      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9b8:	d012      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b9ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9be:	d81a      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d022      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b9c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9c8:	d115      	bne.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 fcc0 	bl	800d358 <RCCEx_PLL2_Config>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9de:	e015      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	3328      	adds	r3, #40	; 0x28
 800b9e6:	2102      	movs	r1, #2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 fd67 	bl	800d4bc <RCCEx_PLL3_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9f4:	e00a      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9fc:	e006      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b9fe:	bf00      	nop
 800ba00:	e004      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba02:	bf00      	nop
 800ba04:	e002      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba06:	bf00      	nop
 800ba08:	e000      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10b      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ba14:	4ba1      	ldr	r3, [pc, #644]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ba1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba24:	4a9d      	ldr	r2, [pc, #628]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba26:	430b      	orrs	r3, r1
 800ba28:	6593      	str	r3, [r2, #88]	; 0x58
 800ba2a:	e003      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f002 0308 	and.w	r3, r2, #8
 800ba40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba44:	2300      	movs	r3, #0
 800ba46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4313      	orrs	r3, r2
 800ba52:	d01e      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ba54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba60:	d10c      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	3328      	adds	r3, #40	; 0x28
 800ba68:	2102      	movs	r1, #2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f001 fd26 	bl	800d4bc <RCCEx_PLL3_Config>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ba7c:	4b87      	ldr	r3, [pc, #540]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba8c:	4a83      	ldr	r2, [pc, #524]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f002 0310 	and.w	r3, r2, #16
 800ba9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800baa2:	2300      	movs	r3, #0
 800baa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800baa8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800baac:	460b      	mov	r3, r1
 800baae:	4313      	orrs	r3, r2
 800bab0:	d01e      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800baba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800babe:	d10c      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac4:	3328      	adds	r3, #40	; 0x28
 800bac6:	2102      	movs	r1, #2
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fcf7 	bl	800d4bc <RCCEx_PLL3_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bada:	4b70      	ldr	r3, [pc, #448]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800badc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800baea:	4a6c      	ldr	r2, [pc, #432]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800baec:	430b      	orrs	r3, r1
 800baee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800baf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bafc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	d03e      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb1c:	d022      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bb1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb22:	d81b      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2c:	d00b      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bb2e:	e015      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb34:	3308      	adds	r3, #8
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f001 fc0d 	bl	800d358 <RCCEx_PLL2_Config>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb44:	e00f      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4a:	3328      	adds	r3, #40	; 0x28
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 fcb4 	bl	800d4bc <RCCEx_PLL3_Config>
 800bb54:	4603      	mov	r3, r0
 800bb56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb5a:	e004      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb62:	e000      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bb64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10b      	bne.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb6e:	4b4b      	ldr	r3, [pc, #300]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb7e:	4a47      	ldr	r2, [pc, #284]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb80:	430b      	orrs	r3, r1
 800bb82:	6593      	str	r3, [r2, #88]	; 0x58
 800bb84:	e003      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bba0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bba4:	460b      	mov	r3, r1
 800bba6:	4313      	orrs	r3, r2
 800bba8:	d03b      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbb6:	d01f      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bbb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbbc:	d818      	bhi.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bbbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbc2:	d003      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bbc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbc8:	d007      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bbca:	e011      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbcc:	4b33      	ldr	r3, [pc, #204]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	4a32      	ldr	r2, [pc, #200]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbd8:	e00f      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbde:	3328      	adds	r3, #40	; 0x28
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fc6a 	bl	800d4bc <RCCEx_PLL3_Config>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbee:	e004      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbf6:	e000      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bbf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10b      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc02:	4b26      	ldr	r3, [pc, #152]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc12:	4a22      	ldr	r2, [pc, #136]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6553      	str	r3, [r2, #84]	; 0x54
 800bc18:	e003      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bc2e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc30:	2300      	movs	r3, #0
 800bc32:	677b      	str	r3, [r7, #116]	; 0x74
 800bc34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bc38:	460b      	mov	r3, r1
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	d034      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d003      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4c:	d007      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bc4e:	e011      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc50:	4b12      	ldr	r3, [pc, #72]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	4a11      	ldr	r2, [pc, #68]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc5c:	e00e      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	3308      	adds	r3, #8
 800bc64:	2102      	movs	r1, #2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 fb76 	bl	800d358 <RCCEx_PLL2_Config>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc72:	e003      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10d      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc92:	4a02      	ldr	r2, [pc, #8]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc98:	e006      	b.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bc9a:	bf00      	nop
 800bc9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bcb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	d00c      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc8:	3328      	adds	r3, #40	; 0x28
 800bcca:	2102      	movs	r1, #2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fbf5 	bl	800d4bc <RCCEx_PLL3_Config>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bcea:	663b      	str	r3, [r7, #96]	; 0x60
 800bcec:	2300      	movs	r3, #0
 800bcee:	667b      	str	r3, [r7, #100]	; 0x64
 800bcf0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	d038      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd06:	d018      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bd08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd0c:	d811      	bhi.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd12:	d014      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bd14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd18:	d80b      	bhi.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d011      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd22:	d106      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd24:	4bc3      	ldr	r3, [pc, #780]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	4ac2      	ldr	r2, [pc, #776]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd30:	e008      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd38:	e004      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd3a:	bf00      	nop
 800bd3c:	e002      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd3e:	bf00      	nop
 800bd40:	e000      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10b      	bne.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd4c:	4bb9      	ldr	r3, [pc, #740]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd5c:	4ab5      	ldr	r2, [pc, #724]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd5e:	430b      	orrs	r3, r1
 800bd60:	6553      	str	r3, [r2, #84]	; 0x54
 800bd62:	e003      	b.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd78:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bd82:	460b      	mov	r3, r1
 800bd84:	4313      	orrs	r3, r2
 800bd86:	d009      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd88:	4baa      	ldr	r3, [pc, #680]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd96:	4aa7      	ldr	r2, [pc, #668]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bda8:	653b      	str	r3, [r7, #80]	; 0x50
 800bdaa:	2300      	movs	r3, #0
 800bdac:	657b      	str	r3, [r7, #84]	; 0x54
 800bdae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	d00a      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bdb8:	4b9e      	ldr	r3, [pc, #632]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bdc8:	4a9a      	ldr	r2, [pc, #616]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdca:	430b      	orrs	r3, r1
 800bdcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bdda:	64bb      	str	r3, [r7, #72]	; 0x48
 800bddc:	2300      	movs	r3, #0
 800bdde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bde0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bde4:	460b      	mov	r3, r1
 800bde6:	4313      	orrs	r3, r2
 800bde8:	d009      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bdea:	4b92      	ldr	r3, [pc, #584]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf8:	4a8e      	ldr	r2, [pc, #568]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdfa:	430b      	orrs	r3, r1
 800bdfc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800be0a:	643b      	str	r3, [r7, #64]	; 0x40
 800be0c:	2300      	movs	r3, #0
 800be0e:	647b      	str	r3, [r7, #68]	; 0x44
 800be10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800be14:	460b      	mov	r3, r1
 800be16:	4313      	orrs	r3, r2
 800be18:	d00e      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be1a:	4b86      	ldr	r3, [pc, #536]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	4a85      	ldr	r2, [pc, #532]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be24:	6113      	str	r3, [r2, #16]
 800be26:	4b83      	ldr	r3, [pc, #524]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be28:	6919      	ldr	r1, [r3, #16]
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800be32:	4a80      	ldr	r2, [pc, #512]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be34:	430b      	orrs	r3, r1
 800be36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800be38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800be44:	63bb      	str	r3, [r7, #56]	; 0x38
 800be46:	2300      	movs	r3, #0
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800be4e:	460b      	mov	r3, r1
 800be50:	4313      	orrs	r3, r2
 800be52:	d009      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800be54:	4b77      	ldr	r3, [pc, #476]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be58:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be62:	4a74      	ldr	r2, [pc, #464]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be64:	430b      	orrs	r3, r1
 800be66:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be74:	633b      	str	r3, [r7, #48]	; 0x30
 800be76:	2300      	movs	r3, #0
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
 800be7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800be7e:	460b      	mov	r3, r1
 800be80:	4313      	orrs	r3, r2
 800be82:	d00a      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be84:	4b6b      	ldr	r3, [pc, #428]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be88:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800be8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be94:	4a67      	ldr	r2, [pc, #412]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be96:	430b      	orrs	r3, r1
 800be98:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	2100      	movs	r1, #0
 800bea4:	62b9      	str	r1, [r7, #40]	; 0x28
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800beb0:	460b      	mov	r3, r1
 800beb2:	4313      	orrs	r3, r2
 800beb4:	d011      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beba:	3308      	adds	r3, #8
 800bebc:	2100      	movs	r1, #0
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 fa4a 	bl	800d358 <RCCEx_PLL2_Config>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800beca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800beda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	2100      	movs	r1, #0
 800bee4:	6239      	str	r1, [r7, #32]
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
 800beec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bef0:	460b      	mov	r3, r1
 800bef2:	4313      	orrs	r3, r2
 800bef4:	d011      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befa:	3308      	adds	r3, #8
 800befc:	2101      	movs	r1, #1
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fa2a 	bl	800d358 <RCCEx_PLL2_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	2100      	movs	r1, #0
 800bf24:	61b9      	str	r1, [r7, #24]
 800bf26:	f003 0304 	and.w	r3, r3, #4
 800bf2a:	61fb      	str	r3, [r7, #28]
 800bf2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bf30:	460b      	mov	r3, r1
 800bf32:	4313      	orrs	r3, r2
 800bf34:	d011      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 fa0a 	bl	800d358 <RCCEx_PLL2_Config>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bf5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	2100      	movs	r1, #0
 800bf64:	6139      	str	r1, [r7, #16]
 800bf66:	f003 0308 	and.w	r3, r3, #8
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf70:	460b      	mov	r3, r1
 800bf72:	4313      	orrs	r3, r2
 800bf74:	d011      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	3328      	adds	r3, #40	; 0x28
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 fa9c 	bl	800d4bc <RCCEx_PLL3_Config>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bf8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	f003 0310 	and.w	r3, r3, #16
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	d011      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfba:	3328      	adds	r3, #40	; 0x28
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f001 fa7c 	bl	800d4bc <RCCEx_PLL3_Config>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	6039      	str	r1, [r7, #0]
 800bfe6:	f003 0320 	and.w	r3, r3, #32
 800bfea:	607b      	str	r3, [r7, #4]
 800bfec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bff0:	460b      	mov	r3, r1
 800bff2:	4313      	orrs	r3, r2
 800bff4:	d011      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffa:	3328      	adds	r3, #40	; 0x28
 800bffc:	2102      	movs	r1, #2
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 fa5c 	bl	800d4bc <RCCEx_PLL3_Config>
 800c004:	4603      	mov	r3, r0
 800c006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c00a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c01a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	e000      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
}
 800c028:	4618      	mov	r0, r3
 800c02a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c02e:	46bd      	mov	sp, r7
 800c030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c034:	58024400 	.word	0x58024400

0800c038 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b090      	sub	sp, #64	; 0x40
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c046:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c04a:	430b      	orrs	r3, r1
 800c04c:	f040 8094 	bne.w	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c050:	4b9e      	ldr	r3, [pc, #632]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c054:	f003 0307 	and.w	r3, r3, #7
 800c058:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	f200 8087 	bhi.w	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c062:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c07d 	.word	0x0800c07d
 800c06c:	0800c0a5 	.word	0x0800c0a5
 800c070:	0800c0cd 	.word	0x0800c0cd
 800c074:	0800c169 	.word	0x0800c169
 800c078:	0800c0f5 	.word	0x0800c0f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c07c:	4b93      	ldr	r3, [pc, #588]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c088:	d108      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c08a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c08e:	4618      	mov	r0, r3
 800c090:	f001 f810 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c098:	f000 bd45 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a0:	f000 bd41 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0a4:	4b89      	ldr	r3, [pc, #548]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0b0:	d108      	bne.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0b2:	f107 0318 	add.w	r3, r7, #24
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fd54 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c0:	f000 bd31 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c8:	f000 bd2d 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0cc:	4b7f      	ldr	r3, [pc, #508]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0d8:	d108      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0da:	f107 030c 	add.w	r3, r7, #12
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fe94 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e8:	f000 bd1d 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f0:	f000 bd19 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0f4:	4b75      	ldr	r3, [pc, #468]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0fe:	4b73      	ldr	r3, [pc, #460]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 0304 	and.w	r3, r3, #4
 800c106:	2b04      	cmp	r3, #4
 800c108:	d10c      	bne.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d109      	bne.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c110:	4b6e      	ldr	r3, [pc, #440]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	08db      	lsrs	r3, r3, #3
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	4a6d      	ldr	r2, [pc, #436]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c11c:	fa22 f303 	lsr.w	r3, r2, r3
 800c120:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c122:	e01f      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c124:	4b69      	ldr	r3, [pc, #420]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c130:	d106      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c138:	d102      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c13a:	4b66      	ldr	r3, [pc, #408]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c13e:	e011      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c140:	4b62      	ldr	r3, [pc, #392]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14c:	d106      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c154:	d102      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c156:	4b60      	ldr	r3, [pc, #384]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15a:	e003      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c160:	f000 bce1 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c164:	f000 bcdf 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c168:	4b5c      	ldr	r3, [pc, #368]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16c:	f000 bcdb 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	f000 bcd7 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c17c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c180:	430b      	orrs	r3, r1
 800c182:	f040 80ad 	bne.w	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c186:	4b51      	ldr	r3, [pc, #324]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c18e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c196:	d056      	beq.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c19e:	f200 8090 	bhi.w	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	2bc0      	cmp	r3, #192	; 0xc0
 800c1a6:	f000 8088 	beq.w	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	2bc0      	cmp	r3, #192	; 0xc0
 800c1ae:	f200 8088 	bhi.w	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	2b80      	cmp	r3, #128	; 0x80
 800c1b6:	d032      	beq.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	2b80      	cmp	r3, #128	; 0x80
 800c1bc:	f200 8081 	bhi.w	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	2b40      	cmp	r3, #64	; 0x40
 800c1ca:	d014      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c1cc:	e079      	b.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1ce:	4b3f      	ldr	r3, [pc, #252]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1da:	d108      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 ff67 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ea:	f000 bc9c 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	f000 bc98 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1f6:	4b35      	ldr	r3, [pc, #212]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c202:	d108      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c204:	f107 0318 	add.w	r3, r7, #24
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 fcab 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c212:	f000 bc88 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21a:	f000 bc84 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c21e:	4b2b      	ldr	r3, [pc, #172]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c22a:	d108      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c22c:	f107 030c 	add.w	r3, r7, #12
 800c230:	4618      	mov	r0, r3
 800c232:	f000 fdeb 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c23a:	f000 bc74 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c242:	f000 bc70 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c246:	4b21      	ldr	r3, [pc, #132]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c24a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c24e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c250:	4b1e      	ldr	r3, [pc, #120]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d10c      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d109      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c262:	4b1a      	ldr	r3, [pc, #104]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	08db      	lsrs	r3, r3, #3
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	4a18      	ldr	r2, [pc, #96]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c26e:	fa22 f303 	lsr.w	r3, r2, r3
 800c272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c274:	e01f      	b.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c282:	d106      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c28a:	d102      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c28c:	4b11      	ldr	r3, [pc, #68]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c290:	e011      	b.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c29a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c29e:	d106      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2a6:	d102      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2b2:	f000 bc38 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2b6:	f000 bc36 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2ba:	4b08      	ldr	r3, [pc, #32]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2be:	f000 bc32 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c6:	f000 bc2e 	b.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2ca:	bf00      	nop
 800c2cc:	58024400 	.word	0x58024400
 800c2d0:	03d09000 	.word	0x03d09000
 800c2d4:	003d0900 	.word	0x003d0900
 800c2d8:	017d7840 	.word	0x017d7840
 800c2dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	f040 809c 	bne.w	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c2ee:	4b9e      	ldr	r3, [pc, #632]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c2f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2fe:	d054      	beq.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c306:	f200 808b 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c310:	f000 8083 	beq.w	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c31a:	f200 8081 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c324:	d02f      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c32c:	d878      	bhi.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	2b00      	cmp	r3, #0
 800c332:	d004      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c33a:	d012      	beq.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c33c:	e070      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c33e:	4b8a      	ldr	r3, [pc, #552]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c34a:	d107      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c34c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c350:	4618      	mov	r0, r3
 800c352:	f000 feaf 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35a:	e3e4      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	e3e1      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c362:	4b81      	ldr	r3, [pc, #516]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c36a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c36e:	d107      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c370:	f107 0318 	add.w	r3, r7, #24
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fbf5 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37e:	e3d2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c384:	e3cf      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c386:	4b78      	ldr	r3, [pc, #480]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c392:	d107      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 fd37 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a2:	e3c0      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a8:	e3bd      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3aa:	4b6f      	ldr	r3, [pc, #444]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3b4:	4b6c      	ldr	r3, [pc, #432]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d10c      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d109      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c6:	4b68      	ldr	r3, [pc, #416]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	08db      	lsrs	r3, r3, #3
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	4a66      	ldr	r2, [pc, #408]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d8:	e01e      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3da:	4b63      	ldr	r3, [pc, #396]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e6:	d106      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3ee:	d102      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3f0:	4b5f      	ldr	r3, [pc, #380]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f4:	e010      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f6:	4b5c      	ldr	r3, [pc, #368]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c402:	d106      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c40a:	d102      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c40c:	4b59      	ldr	r3, [pc, #356]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c410:	e002      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c416:	e386      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c418:	e385      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c41a:	4b57      	ldr	r3, [pc, #348]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41e:	e382      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e37f      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c42a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c42e:	430b      	orrs	r3, r1
 800c430:	f040 80a7 	bne.w	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c434:	4b4c      	ldr	r3, [pc, #304]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c438:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c43c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c444:	d055      	beq.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c44c:	f200 8096 	bhi.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c456:	f000 8084 	beq.w	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c460:	f200 808c 	bhi.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c46a:	d030      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c472:	f200 8083 	bhi.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c482:	d012      	beq.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c484:	e07a      	b.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c486:	4b38      	ldr	r3, [pc, #224]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c492:	d107      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fe0b 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a2:	e340      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a8:	e33d      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4aa:	4b2f      	ldr	r3, [pc, #188]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b6:	d107      	bne.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b8:	f107 0318 	add.w	r3, r7, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 fb51 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c6:	e32e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4cc:	e32b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4ce:	4b26      	ldr	r3, [pc, #152]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4da:	d107      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4dc:	f107 030c 	add.w	r3, r7, #12
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fc93 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ea:	e31c      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f0:	e319      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4f2:	4b1d      	ldr	r3, [pc, #116]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4fc:	4b1a      	ldr	r3, [pc, #104]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b04      	cmp	r3, #4
 800c506:	d10c      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c50e:	4b16      	ldr	r3, [pc, #88]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	f003 0303 	and.w	r3, r3, #3
 800c518:	4a14      	ldr	r2, [pc, #80]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c51a:	fa22 f303 	lsr.w	r3, r2, r3
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	e01e      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c522:	4b11      	ldr	r3, [pc, #68]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c52e:	d106      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c536:	d102      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53c:	e010      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c53e:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54a:	d106      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c552:	d102      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c554:	4b07      	ldr	r3, [pc, #28]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c558:	e002      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c55e:	e2e2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c560:	e2e1      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c562:	4b05      	ldr	r3, [pc, #20]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c566:	e2de      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c568:	58024400 	.word	0x58024400
 800c56c:	03d09000 	.word	0x03d09000
 800c570:	003d0900 	.word	0x003d0900
 800c574:	017d7840 	.word	0x017d7840
 800c578:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c580:	e2d1      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c586:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c58a:	430b      	orrs	r3, r1
 800c58c:	f040 809c 	bne.w	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c590:	4b93      	ldr	r3, [pc, #588]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c594:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c598:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5a0:	d054      	beq.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5a8:	f200 808b 	bhi.w	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5b2:	f000 8083 	beq.w	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5bc:	f200 8081 	bhi.w	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5c6:	d02f      	beq.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ce:	d878      	bhi.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5dc:	d012      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c5de:	e070      	b.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5e0:	4b7f      	ldr	r3, [pc, #508]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5ec:	d107      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fd5e 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fc:	e293      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c602:	e290      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c604:	4b76      	ldr	r3, [pc, #472]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c60c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c610:	d107      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c612:	f107 0318 	add.w	r3, r7, #24
 800c616:	4618      	mov	r0, r3
 800c618:	f000 faa4 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c620:	e281      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c626:	e27e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c628:	4b6d      	ldr	r3, [pc, #436]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c634:	d107      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 fbe6 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c644:	e26f      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64a:	e26c      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c64c:	4b64      	ldr	r3, [pc, #400]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c654:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c656:	4b62      	ldr	r3, [pc, #392]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f003 0304 	and.w	r3, r3, #4
 800c65e:	2b04      	cmp	r3, #4
 800c660:	d10c      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c668:	4b5d      	ldr	r3, [pc, #372]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	08db      	lsrs	r3, r3, #3
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	4a5c      	ldr	r2, [pc, #368]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c674:	fa22 f303 	lsr.w	r3, r2, r3
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67a:	e01e      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c67c:	4b58      	ldr	r3, [pc, #352]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c688:	d106      	bne.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c690:	d102      	bne.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c692:	4b55      	ldr	r3, [pc, #340]	; (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c696:	e010      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c698:	4b51      	ldr	r3, [pc, #324]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a4:	d106      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ac:	d102      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6ae:	4b4f      	ldr	r3, [pc, #316]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b2:	e002      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6b8:	e235      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6ba:	e234      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6bc:	4b4c      	ldr	r3, [pc, #304]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c0:	e231      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c6:	e22e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6cc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	f040 808f 	bne.w	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c6d6:	4b42      	ldr	r3, [pc, #264]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6da:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c6de:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6e6:	d06b      	beq.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6ee:	d874      	bhi.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6f6:	d056      	beq.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6fe:	d86c      	bhi.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c702:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c706:	d03b      	beq.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c70e:	d864      	bhi.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c716:	d021      	beq.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c71e:	d85c      	bhi.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b00      	cmp	r3, #0
 800c724:	d004      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c72c:	d004      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c72e:	e054      	b.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c730:	f7fe fa0a 	bl	800ab48 <HAL_RCC_GetPCLK1Freq>
 800c734:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c736:	e1f6      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c738:	4b29      	ldr	r3, [pc, #164]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c744:	d107      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c746:	f107 0318 	add.w	r3, r7, #24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fa0a 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c754:	e1e7      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	e1e4      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c75c:	4b20      	ldr	r3, [pc, #128]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c768:	d107      	bne.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c76a:	f107 030c 	add.w	r3, r7, #12
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 fb4c 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c778:	e1d5      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77e:	e1d2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c780:	4b17      	ldr	r3, [pc, #92]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b04      	cmp	r3, #4
 800c78a:	d109      	bne.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c78c:	4b14      	ldr	r3, [pc, #80]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	08db      	lsrs	r3, r3, #3
 800c792:	f003 0303 	and.w	r3, r3, #3
 800c796:	4a13      	ldr	r2, [pc, #76]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c798:	fa22 f303 	lsr.w	r3, r2, r3
 800c79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c79e:	e1c2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e1bf      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7a6:	4b0e      	ldr	r3, [pc, #56]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7b2:	d102      	bne.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c7b4:	4b0c      	ldr	r3, [pc, #48]	; (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b8:	e1b5      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7be:	e1b2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7cc:	d102      	bne.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c7ce:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7d2:	e1a8      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d8:	e1a5      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7de:	e1a2      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7e0:	58024400 	.word	0x58024400
 800c7e4:	03d09000 	.word	0x03d09000
 800c7e8:	003d0900 	.word	0x003d0900
 800c7ec:	017d7840 	.word	0x017d7840
 800c7f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7f8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	d173      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c800:	4b9c      	ldr	r3, [pc, #624]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c808:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c810:	d02f      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c818:	d863      	bhi.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d004      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c826:	d012      	beq.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c828:	e05b      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c82a:	4b92      	ldr	r3, [pc, #584]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c836:	d107      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c838:	f107 0318 	add.w	r3, r7, #24
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 f991 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c846:	e16e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84c:	e16b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c84e:	4b89      	ldr	r3, [pc, #548]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c85a:	d107      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85c:	f107 030c 	add.w	r3, r7, #12
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fad3 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86a:	e15c      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c870:	e159      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c872:	4b80      	ldr	r3, [pc, #512]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c87c:	4b7d      	ldr	r3, [pc, #500]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b04      	cmp	r3, #4
 800c886:	d10c      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88e:	4b79      	ldr	r3, [pc, #484]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	08db      	lsrs	r3, r3, #3
 800c894:	f003 0303 	and.w	r3, r3, #3
 800c898:	4a77      	ldr	r2, [pc, #476]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c89a:	fa22 f303 	lsr.w	r3, r2, r3
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a0:	e01e      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8a2:	4b74      	ldr	r3, [pc, #464]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ae:	d106      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8b6:	d102      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8b8:	4b70      	ldr	r3, [pc, #448]	; (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8bc:	e010      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8be:	4b6d      	ldr	r3, [pc, #436]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ca:	d106      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8d2:	d102      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8d4:	4b6a      	ldr	r3, [pc, #424]	; (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d8:	e002      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8de:	e122      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8e0:	e121      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e6:	e11e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8ec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c8f0:	430b      	orrs	r3, r1
 800c8f2:	d133      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c8f4:	4b5f      	ldr	r3, [pc, #380]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c90a:	d012      	beq.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c90c:	e023      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c90e:	4b59      	ldr	r3, [pc, #356]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c91a:	d107      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c920:	4618      	mov	r0, r3
 800c922:	f000 fbc7 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92a:	e0fc      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c930:	e0f9      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c932:	4b50      	ldr	r3, [pc, #320]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c93e:	d107      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c940:	f107 0318 	add.w	r3, r7, #24
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f90d 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94e:	e0ea      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c954:	e0e7      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95a:	e0e4      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c960:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c964:	430b      	orrs	r3, r1
 800c966:	f040 808d 	bne.w	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c96a:	4b42      	ldr	r3, [pc, #264]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c96e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c972:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c97a:	d06b      	beq.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c982:	d874      	bhi.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c98a:	d056      	beq.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c992:	d86c      	bhi.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c99a:	d03b      	beq.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9a2:	d864      	bhi.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9aa:	d021      	beq.n	800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9b2:	d85c      	bhi.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9c0:	d004      	beq.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c9c2:	e054      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c9c4:	f000 f8b8 	bl	800cb38 <HAL_RCCEx_GetD3PCLK1Freq>
 800c9c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9ca:	e0ac      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9cc:	4b29      	ldr	r3, [pc, #164]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9d8:	d107      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9da:	f107 0318 	add.w	r3, r7, #24
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f8c0 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e8:	e09d      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ee:	e09a      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9f0:	4b20      	ldr	r3, [pc, #128]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fc:	d107      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9fe:	f107 030c 	add.w	r3, r7, #12
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 fa02 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0c:	e08b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca12:	e088      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca14:	4b17      	ldr	r3, [pc, #92]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b04      	cmp	r3, #4
 800ca1e:	d109      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca20:	4b14      	ldr	r3, [pc, #80]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	08db      	lsrs	r3, r3, #3
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	4a13      	ldr	r2, [pc, #76]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca32:	e078      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e075      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca3a:	4b0e      	ldr	r3, [pc, #56]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca46:	d102      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ca48:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca4c:	e06b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca52:	e068      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca54:	4b07      	ldr	r3, [pc, #28]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca60:	d102      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ca64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca66:	e05e      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6c:	e05b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca72:	e058      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca74:	58024400 	.word	0x58024400
 800ca78:	03d09000 	.word	0x03d09000
 800ca7c:	003d0900 	.word	0x003d0900
 800ca80:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ca84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca88:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	d148      	bne.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ca90:	4b27      	ldr	r3, [pc, #156]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ca92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caa0:	d02a      	beq.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caa8:	d838      	bhi.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	2b00      	cmp	r3, #0
 800caae:	d004      	beq.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cab6:	d00d      	beq.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cab8:	e030      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800caba:	4b1d      	ldr	r3, [pc, #116]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cac6:	d102      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cac8:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cacc:	e02b      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e028      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cad4:	4b16      	ldr	r3, [pc, #88]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cadc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cae0:	d107      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fae4 	bl	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf0:	e019      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf6:	e016      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caf8:	4b0d      	ldr	r3, [pc, #52]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb04:	d107      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb06:	f107 0318 	add.w	r3, r7, #24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 f82a 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb14:	e007      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1a:	e004      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb20:	e001      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3740      	adds	r7, #64	; 0x40
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	58024400 	.word	0x58024400
 800cb34:	017d7840 	.word	0x017d7840

0800cb38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cb3c:	f7fd ffd4 	bl	800aae8 <HAL_RCC_GetHCLKFreq>
 800cb40:	4602      	mov	r2, r0
 800cb42:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	091b      	lsrs	r3, r3, #4
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	4904      	ldr	r1, [pc, #16]	; (800cb60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cb4e:	5ccb      	ldrb	r3, [r1, r3]
 800cb50:	f003 031f 	and.w	r3, r3, #31
 800cb54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	58024400 	.word	0x58024400
 800cb60:	08017124 	.word	0x08017124

0800cb64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b089      	sub	sp, #36	; 0x24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb6c:	4ba1      	ldr	r3, [pc, #644]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cb76:	4b9f      	ldr	r3, [pc, #636]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7a:	0b1b      	lsrs	r3, r3, #12
 800cb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cb82:	4b9c      	ldr	r3, [pc, #624]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	091b      	lsrs	r3, r3, #4
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cb8e:	4b99      	ldr	r3, [pc, #612]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb92:	08db      	lsrs	r3, r3, #3
 800cb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 8111 	beq.w	800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	f000 8083 	beq.w	800ccc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	f200 80a1 	bhi.w	800cd04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d003      	beq.n	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d056      	beq.n	800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cbce:	e099      	b.n	800cd04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbd0:	4b88      	ldr	r3, [pc, #544]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d02d      	beq.n	800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbdc:	4b85      	ldr	r3, [pc, #532]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	08db      	lsrs	r3, r3, #3
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	4a84      	ldr	r2, [pc, #528]	; (800cdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	ee07 3a90 	vmov	s15, r3
 800cbf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc06:	4b7b      	ldr	r3, [pc, #492]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc36:	e087      	b.n	800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cc46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc4a:	4b6a      	ldr	r3, [pc, #424]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc7a:	e065      	b.n	800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8e:	4b59      	ldr	r3, [pc, #356]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccbe:	e043      	b.n	800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ccce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd2:	4b48      	ldr	r3, [pc, #288]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd02:	e021      	b.n	800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd16:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cd48:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4c:	0a5b      	lsrs	r3, r3, #9
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6e:	ee17 2a90 	vmov	r2, s15
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cd76:	4b1f      	ldr	r3, [pc, #124]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	0c1b      	lsrs	r3, r3, #16
 800cd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd9c:	ee17 2a90 	vmov	r2, s15
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cda4:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda8:	0e1b      	lsrs	r3, r3, #24
 800cdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdca:	ee17 2a90 	vmov	r2, s15
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cdd2:	e008      	b.n	800cde6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	609a      	str	r2, [r3, #8]
}
 800cde6:	bf00      	nop
 800cde8:	3724      	adds	r7, #36	; 0x24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	03d09000 	.word	0x03d09000
 800cdfc:	46000000 	.word	0x46000000
 800ce00:	4c742400 	.word	0x4c742400
 800ce04:	4a742400 	.word	0x4a742400
 800ce08:	4bbebc20 	.word	0x4bbebc20

0800ce0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b089      	sub	sp, #36	; 0x24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce14:	4ba1      	ldr	r3, [pc, #644]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ce1e:	4b9f      	ldr	r3, [pc, #636]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce22:	0d1b      	lsrs	r3, r3, #20
 800ce24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce2a:	4b9c      	ldr	r3, [pc, #624]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	0a1b      	lsrs	r3, r3, #8
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ce36:	4b99      	ldr	r3, [pc, #612]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce3a:	08db      	lsrs	r3, r3, #3
 800ce3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	fb02 f303 	mul.w	r3, r2, r3
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 8111 	beq.w	800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	f000 8083 	beq.w	800cf68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	f200 80a1 	bhi.w	800cfac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d003      	beq.n	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d056      	beq.n	800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ce76:	e099      	b.n	800cfac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce78:	4b88      	ldr	r3, [pc, #544]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0320 	and.w	r3, r3, #32
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d02d      	beq.n	800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce84:	4b85      	ldr	r3, [pc, #532]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	08db      	lsrs	r3, r3, #3
 800ce8a:	f003 0303 	and.w	r3, r3, #3
 800ce8e:	4a84      	ldr	r2, [pc, #528]	; (800d0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ce90:	fa22 f303 	lsr.w	r3, r2, r3
 800ce94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	ee07 3a90 	vmov	s15, r3
 800ce9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceae:	4b7b      	ldr	r3, [pc, #492]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cebe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cede:	e087      	b.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ceee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef2:	4b6a      	ldr	r3, [pc, #424]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf02:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf22:	e065      	b.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf36:	4b59      	ldr	r3, [pc, #356]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf66:	e043      	b.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cf76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf7a:	4b48      	ldr	r3, [pc, #288]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf82:	ee07 3a90 	vmov	s15, r3
 800cf86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfaa:	e021      	b.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	ee07 3a90 	vmov	s15, r3
 800cfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfbe:	4b37      	ldr	r3, [pc, #220]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfce:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cff0:	4b2a      	ldr	r3, [pc, #168]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff4:	0a5b      	lsrs	r3, r3, #9
 800cff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d016:	ee17 2a90 	vmov	r2, s15
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d01e:	4b1f      	ldr	r3, [pc, #124]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	0c1b      	lsrs	r3, r3, #16
 800d024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d028:	ee07 3a90 	vmov	s15, r3
 800d02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d034:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d038:	edd7 6a07 	vldr	s13, [r7, #28]
 800d03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d044:	ee17 2a90 	vmov	r2, s15
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d04c:	4b13      	ldr	r3, [pc, #76]	; (800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d050:	0e1b      	lsrs	r3, r3, #24
 800d052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d062:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d066:	edd7 6a07 	vldr	s13, [r7, #28]
 800d06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d072:	ee17 2a90 	vmov	r2, s15
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d07a:	e008      	b.n	800d08e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	609a      	str	r2, [r3, #8]
}
 800d08e:	bf00      	nop
 800d090:	3724      	adds	r7, #36	; 0x24
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	58024400 	.word	0x58024400
 800d0a0:	03d09000 	.word	0x03d09000
 800d0a4:	46000000 	.word	0x46000000
 800d0a8:	4c742400 	.word	0x4c742400
 800d0ac:	4a742400 	.word	0x4a742400
 800d0b0:	4bbebc20 	.word	0x4bbebc20

0800d0b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b089      	sub	sp, #36	; 0x24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0bc:	4ba0      	ldr	r3, [pc, #640]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c0:	f003 0303 	and.w	r3, r3, #3
 800d0c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d0c6:	4b9e      	ldr	r3, [pc, #632]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	091b      	lsrs	r3, r3, #4
 800d0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d0d2:	4b9b      	ldr	r3, [pc, #620]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d0dc:	4b98      	ldr	r3, [pc, #608]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e0:	08db      	lsrs	r3, r3, #3
 800d0e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ec:	ee07 3a90 	vmov	s15, r3
 800d0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 8111 	beq.w	800d322 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	2b02      	cmp	r3, #2
 800d104:	f000 8083 	beq.w	800d20e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	f200 80a1 	bhi.w	800d252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d056      	beq.n	800d1ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d11c:	e099      	b.n	800d252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d11e:	4b88      	ldr	r3, [pc, #544]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b00      	cmp	r3, #0
 800d128:	d02d      	beq.n	800d186 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d12a:	4b85      	ldr	r3, [pc, #532]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	08db      	lsrs	r3, r3, #3
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	4a83      	ldr	r2, [pc, #524]	; (800d344 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d136:	fa22 f303 	lsr.w	r3, r2, r3
 800d13a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d154:	4b7a      	ldr	r3, [pc, #488]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15c:	ee07 3a90 	vmov	s15, r3
 800d160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d164:	ed97 6a03 	vldr	s12, [r7, #12]
 800d168:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d16c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d180:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d184:	e087      	b.n	800d296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	ee07 3a90 	vmov	s15, r3
 800d18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d190:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d198:	4b69      	ldr	r3, [pc, #420]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a0:	ee07 3a90 	vmov	s15, r3
 800d1a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c8:	e065      	b.n	800d296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	ee07 3a90 	vmov	s15, r3
 800d1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d350 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d1d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1dc:	4b58      	ldr	r3, [pc, #352]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e4:	ee07 3a90 	vmov	s15, r3
 800d1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d208:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d20c:	e043      	b.n	800d296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	ee07 3a90 	vmov	s15, r3
 800d214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d218:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d21c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d220:	4b47      	ldr	r3, [pc, #284]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d228:	ee07 3a90 	vmov	s15, r3
 800d22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d230:	ed97 6a03 	vldr	s12, [r7, #12]
 800d234:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d23c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d24c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d250:	e021      	b.n	800d296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d25c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d264:	4b36      	ldr	r3, [pc, #216]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d274:	ed97 6a03 	vldr	s12, [r7, #12]
 800d278:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d27c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d294:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d296:	4b2a      	ldr	r3, [pc, #168]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29a:	0a5b      	lsrs	r3, r3, #9
 800d29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a0:	ee07 3a90 	vmov	s15, r3
 800d2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2bc:	ee17 2a90 	vmov	r2, s15
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d2c4:	4b1e      	ldr	r3, [pc, #120]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c8:	0c1b      	lsrs	r3, r3, #16
 800d2ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ea:	ee17 2a90 	vmov	r2, s15
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d2f2:	4b13      	ldr	r3, [pc, #76]	; (800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f6:	0e1b      	lsrs	r3, r3, #24
 800d2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2fc:	ee07 3a90 	vmov	s15, r3
 800d300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d30c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d318:	ee17 2a90 	vmov	r2, s15
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d320:	e008      	b.n	800d334 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	609a      	str	r2, [r3, #8]
}
 800d334:	bf00      	nop
 800d336:	3724      	adds	r7, #36	; 0x24
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	58024400 	.word	0x58024400
 800d344:	03d09000 	.word	0x03d09000
 800d348:	46000000 	.word	0x46000000
 800d34c:	4c742400 	.word	0x4c742400
 800d350:	4a742400 	.word	0x4a742400
 800d354:	4bbebc20 	.word	0x4bbebc20

0800d358 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d366:	4b53      	ldr	r3, [pc, #332]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36a:	f003 0303 	and.w	r3, r3, #3
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d101      	bne.n	800d376 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e099      	b.n	800d4aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d376:	4b4f      	ldr	r3, [pc, #316]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a4e      	ldr	r2, [pc, #312]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d37c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d382:	f7f6 fc9b 	bl	8003cbc <HAL_GetTick>
 800d386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d388:	e008      	b.n	800d39c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d38a:	f7f6 fc97 	bl	8003cbc <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	2b02      	cmp	r3, #2
 800d396:	d901      	bls.n	800d39c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e086      	b.n	800d4aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d39c:	4b45      	ldr	r3, [pc, #276]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1f0      	bne.n	800d38a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d3a8:	4b42      	ldr	r3, [pc, #264]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	031b      	lsls	r3, r3, #12
 800d3b6:	493f      	ldr	r1, [pc, #252]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	025b      	lsls	r3, r3, #9
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	431a      	orrs	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	041b      	lsls	r3, r3, #16
 800d3da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	061b      	lsls	r3, r3, #24
 800d3e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d3ec:	4931      	ldr	r1, [pc, #196]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d3f2:	4b30      	ldr	r3, [pc, #192]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	695b      	ldr	r3, [r3, #20]
 800d3fe:	492d      	ldr	r1, [pc, #180]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d400:	4313      	orrs	r3, r2
 800d402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d404:	4b2b      	ldr	r3, [pc, #172]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	f023 0220 	bic.w	r2, r3, #32
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	4928      	ldr	r1, [pc, #160]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d412:	4313      	orrs	r3, r2
 800d414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d416:	4b27      	ldr	r3, [pc, #156]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	4a26      	ldr	r2, [pc, #152]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d41c:	f023 0310 	bic.w	r3, r3, #16
 800d420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d422:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <RCCEx_PLL2_Config+0x160>)
 800d428:	4013      	ands	r3, r2
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	69d2      	ldr	r2, [r2, #28]
 800d42e:	00d2      	lsls	r2, r2, #3
 800d430:	4920      	ldr	r1, [pc, #128]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d432:	4313      	orrs	r3, r2
 800d434:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d436:	4b1f      	ldr	r3, [pc, #124]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43a:	4a1e      	ldr	r2, [pc, #120]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d43c:	f043 0310 	orr.w	r3, r3, #16
 800d440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d106      	bne.n	800d456 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d448:	4b1a      	ldr	r3, [pc, #104]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	4a19      	ldr	r2, [pc, #100]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d44e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d452:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d454:	e00f      	b.n	800d476 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d106      	bne.n	800d46a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d45c:	4b15      	ldr	r3, [pc, #84]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	4a14      	ldr	r2, [pc, #80]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d466:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d468:	e005      	b.n	800d476 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d46a:	4b12      	ldr	r3, [pc, #72]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	4a11      	ldr	r2, [pc, #68]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a0e      	ldr	r2, [pc, #56]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d47c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d482:	f7f6 fc1b 	bl	8003cbc <HAL_GetTick>
 800d486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d488:	e008      	b.n	800d49c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d48a:	f7f6 fc17 	bl	8003cbc <HAL_GetTick>
 800d48e:	4602      	mov	r2, r0
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	2b02      	cmp	r3, #2
 800d496:	d901      	bls.n	800d49c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d498:	2303      	movs	r3, #3
 800d49a:	e006      	b.n	800d4aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d49c:	4b05      	ldr	r3, [pc, #20]	; (800d4b4 <RCCEx_PLL2_Config+0x15c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d0f0      	beq.n	800d48a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	58024400 	.word	0x58024400
 800d4b8:	ffff0007 	.word	0xffff0007

0800d4bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4ca:	4b53      	ldr	r3, [pc, #332]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ce:	f003 0303 	and.w	r3, r3, #3
 800d4d2:	2b03      	cmp	r3, #3
 800d4d4:	d101      	bne.n	800d4da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e099      	b.n	800d60e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d4da:	4b4f      	ldr	r3, [pc, #316]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a4e      	ldr	r2, [pc, #312]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d4e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4e6:	f7f6 fbe9 	bl	8003cbc <HAL_GetTick>
 800d4ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4ec:	e008      	b.n	800d500 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4ee:	f7f6 fbe5 	bl	8003cbc <HAL_GetTick>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d901      	bls.n	800d500 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	e086      	b.n	800d60e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d500:	4b45      	ldr	r3, [pc, #276]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1f0      	bne.n	800d4ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d50c:	4b42      	ldr	r3, [pc, #264]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d510:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	051b      	lsls	r3, r3, #20
 800d51a:	493f      	ldr	r1, [pc, #252]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d51c:	4313      	orrs	r3, r2
 800d51e:	628b      	str	r3, [r1, #40]	; 0x28
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	3b01      	subs	r3, #1
 800d526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	3b01      	subs	r3, #1
 800d530:	025b      	lsls	r3, r3, #9
 800d532:	b29b      	uxth	r3, r3
 800d534:	431a      	orrs	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	041b      	lsls	r3, r3, #16
 800d53e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d542:	431a      	orrs	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	3b01      	subs	r3, #1
 800d54a:	061b      	lsls	r3, r3, #24
 800d54c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d550:	4931      	ldr	r1, [pc, #196]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d552:	4313      	orrs	r3, r2
 800d554:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d556:	4b30      	ldr	r3, [pc, #192]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	492d      	ldr	r1, [pc, #180]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d564:	4313      	orrs	r3, r2
 800d566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d568:	4b2b      	ldr	r3, [pc, #172]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	4928      	ldr	r1, [pc, #160]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d576:	4313      	orrs	r3, r2
 800d578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d57a:	4b27      	ldr	r3, [pc, #156]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57e:	4a26      	ldr	r2, [pc, #152]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d586:	4b24      	ldr	r3, [pc, #144]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d58a:	4b24      	ldr	r3, [pc, #144]	; (800d61c <RCCEx_PLL3_Config+0x160>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	69d2      	ldr	r2, [r2, #28]
 800d592:	00d2      	lsls	r2, r2, #3
 800d594:	4920      	ldr	r1, [pc, #128]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d596:	4313      	orrs	r3, r2
 800d598:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d59a:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59e:	4a1e      	ldr	r2, [pc, #120]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d5ac:	4b1a      	ldr	r3, [pc, #104]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b0:	4a19      	ldr	r2, [pc, #100]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d5b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5b8:	e00f      	b.n	800d5da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d106      	bne.n	800d5ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d5c0:	4b15      	ldr	r3, [pc, #84]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	4a14      	ldr	r2, [pc, #80]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5cc:	e005      	b.n	800d5da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d5ce:	4b12      	ldr	r3, [pc, #72]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d2:	4a11      	ldr	r2, [pc, #68]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a0e      	ldr	r2, [pc, #56]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5e6:	f7f6 fb69 	bl	8003cbc <HAL_GetTick>
 800d5ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5ec:	e008      	b.n	800d600 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5ee:	f7f6 fb65 	bl	8003cbc <HAL_GetTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d901      	bls.n	800d600 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e006      	b.n	800d60e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <RCCEx_PLL3_Config+0x15c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d0f0      	beq.n	800d5ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	58024400 	.word	0x58024400
 800d61c:	ffff0007 	.word	0xffff0007

0800d620 <HAL_RTC_Init>:
/**
 * @brief  Initialize the RTC peripheral
 * @param  hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	73fb      	strb	r3, [r7, #15]

	/* Check RTC handler */
	if (hrtc != NULL) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d071      	beq.n	800d716 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
		if (hrtc->State == HAL_RTC_STATE_RESET) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <HAL_RTC_Init+0x2c>
			/* Allocate lock resource and initialize it */
			hrtc->Lock = HAL_UNLOCKED;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2020 	strb.w	r2, [r3, #32]

			/* Initialize RTC MSP */
			HAL_RTC_MspInit(hrtc);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7f5 fdfa 	bl	8003240 <HAL_RTC_MspInit>
		}
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

		/* Set RTC state */
		hrtc->State = HAL_RTC_STATE_BUSY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2202      	movs	r2, #2
 800d650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/* Check whether the calendar needs to be initialized */
		if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	f003 0310 	and.w	r3, r3, #16
 800d65e:	2b10      	cmp	r3, #16
 800d660:	d050      	beq.n	800d704 <HAL_RTC_Init+0xe4>
			/* Disable the write protection for RTC registers */
			__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	22ca      	movs	r2, #202	; 0xca
 800d668:	625a      	str	r2, [r3, #36]	; 0x24
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2253      	movs	r2, #83	; 0x53
 800d670:	625a      	str	r2, [r3, #36]	; 0x24

			/* Enter Initialization mode */
			status = RTC_EnterInitMode(hrtc);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa4a 	bl	800db0c <RTC_EnterInitMode>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
			if (status == HAL_OK) {
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d124      	bne.n	800d6cc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
				/* Clear RTC_CR FMT, OSEL and POL Bits */
				hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6899      	ldr	r1, [r3, #8]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	4b24      	ldr	r3, [pc, #144]	; (800d720 <HAL_RTC_Init+0x100>)
 800d68e:	400b      	ands	r3, r1
 800d690:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

				/* Set RTC_CR register */
				hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6899      	ldr	r1, [r3, #8]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	431a      	orrs	r2, r3
						| hrtc->Init.OutPutPolarity);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	431a      	orrs	r2, r3
				hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	430a      	orrs	r2, r1
 800d6ae:	609a      	str	r2, [r3, #8]

				/* Configure the RTC PRER */
				hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	689b      	ldr	r3, [r3, #8]
						<< RTC_PRER_PREDIV_A_Pos)
 800d6b4:	0419      	lsls	r1, r3, #16
						| (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68da      	ldr	r2, [r3, #12]
				hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
						| (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d6be:	430a      	orrs	r2, r1
				hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv
 800d6c0:	611a      	str	r2, [r3, #16]

				/* Exit Initialization mode */
				status = RTC_ExitInitMode(hrtc);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa56 	bl	800db74 <RTC_ExitInitMode>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73fb      	strb	r3, [r7, #15]
			}
			if (status == HAL_OK) {
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d113      	bne.n	800d6fa <HAL_RTC_Init+0xda>
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
				hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f022 0203 	bic.w	r2, r2, #3
 800d6e0:	64da      	str	r2, [r3, #76]	; 0x4c
				hrtc->Instance->OR |= (hrtc->Init.OutPutType
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	69da      	ldr	r2, [r3, #28]
						| hrtc->Init.OutPutRemap);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	431a      	orrs	r2, r3
				hrtc->Instance->OR |= (hrtc->Init.OutPutType
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	430a      	orrs	r2, r1
 800d6f8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
			}

			/* Enable the write protection for RTC registers */
			__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	22ff      	movs	r2, #255	; 0xff
 800d700:	625a      	str	r2, [r3, #36]	; 0x24
 800d702:	e001      	b.n	800d708 <HAL_RTC_Init+0xe8>
		} else {
			/* The calendar is already initialized */
			status = HAL_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
		}

		if (status == HAL_OK) {
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d103      	bne.n	800d716 <HAL_RTC_Init+0xf6>
			/* Set RTC state */
			hrtc->State = HAL_RTC_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
	}

	/* return status */
	return status;
 800d716:	7bfb      	ldrb	r3, [r7, #15]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	ff8fffbf 	.word	0xff8fffbf

0800d724 <HAL_RTC_SetTime>:
 *            @arg RTC_FORMAT_BIN: Binary data format
 *            @arg RTC_FORMAT_BCD: BCD data format
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc,
		RTC_TimeTypeDef *sTime, uint32_t Format) {
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
	assert_param(IS_RTC_FORMAT(Format));
	assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
	assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

	/* Process Locked */
	__HAL_LOCK(hrtc);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <HAL_RTC_SetTime+0x1a>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e089      	b.n	800d852 <HAL_RTC_SetTime+0x12e>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2202      	movs	r2, #2
 800d74a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	22ca      	movs	r2, #202	; 0xca
 800d754:	625a      	str	r2, [r3, #36]	; 0x24
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2253      	movs	r2, #83	; 0x53
 800d75c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 f9d4 	bl	800db0c <RTC_EnterInitMode>
 800d764:	4603      	mov	r3, r0
 800d766:	74fb      	strb	r3, [r7, #19]
	if (status == HAL_OK) {
 800d768:	7cfb      	ldrb	r3, [r7, #19]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d161      	bne.n	800d832 <HAL_RTC_SetTime+0x10e>
		if (Format == RTC_FORMAT_BIN) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d126      	bne.n	800d7c2 <HAL_RTC_SetTime+0x9e>
			if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U) {
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <HAL_RTC_SetTime+0x64>
				assert_param(IS_RTC_HOUR12(sTime->Hours));
				assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
			} else {
				sTime->TimeFormat = 0x00U;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2200      	movs	r2, #0
 800d786:	70da      	strb	r2, [r3, #3]
				assert_param(IS_RTC_HOUR24(sTime->Hours));
			}
			assert_param(IS_RTC_MINUTES(sTime->Minutes));
			assert_param(IS_RTC_SECONDS(sTime->Seconds));

			tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fa2f 	bl	800dbf0 <RTC_ByteToBcd2>
 800d792:	4603      	mov	r3, r0
					<< RTC_TR_HU_Pos)
 800d794:	041c      	lsls	r4, r3, #16
					| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	785b      	ldrb	r3, [r3, #1]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fa28 	bl	800dbf0 <RTC_ByteToBcd2>
 800d7a0:	4603      	mov	r3, r0
							<< RTC_TR_MNU_Pos)
 800d7a2:	021b      	lsls	r3, r3, #8
					| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes)
 800d7a4:	431c      	orrs	r4, r3
					| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds)
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	789b      	ldrb	r3, [r3, #2]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fa20 	bl	800dbf0 <RTC_ByteToBcd2>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	ea44 0203 	orr.w	r2, r4, r3
							<< RTC_TR_SU_Pos)
					| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	78db      	ldrb	r3, [r3, #3]
 800d7ba:	059b      	lsls	r3, r3, #22
			tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	e018      	b.n	800d7f4 <HAL_RTC_SetTime+0xd0>
		} else {
			if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U) {
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <HAL_RTC_SetTime+0xb2>
				assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
				assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
			} else {
				sTime->TimeFormat = 0x00U;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	70da      	strb	r2, [r3, #3]
				assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
			}
			assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
			assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
			tmpreg = (((uint32_t) (sTime->Hours) << RTC_TR_HU_Pos)
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	041a      	lsls	r2, r3, #16
					| ((uint32_t) (sTime->Minutes) << RTC_TR_MNU_Pos)
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	785b      	ldrb	r3, [r3, #1]
 800d7e0:	021b      	lsls	r3, r3, #8
 800d7e2:	4313      	orrs	r3, r2
					| ((uint32_t) (sTime->Seconds) << RTC_TR_SU_Pos)
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	7892      	ldrb	r2, [r2, #2]
 800d7e8:	431a      	orrs	r2, r3
					| ((uint32_t) (sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	78db      	ldrb	r3, [r3, #3]
 800d7ee:	059b      	lsls	r3, r3, #22
			tmpreg = (((uint32_t) (sTime->Hours) << RTC_TR_HU_Pos)
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
		}

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	6979      	ldr	r1, [r7, #20]
 800d7fa:	4b18      	ldr	r3, [pc, #96]	; (800d85c <HAL_RTC_SetTime+0x138>)
 800d7fc:	400b      	ands	r3, r1
 800d7fe:	6013      	str	r3, [r2, #0]

		/* Clear the bits to be configured */
		hrtc->Instance->CR &= ((uint32_t) ~RTC_CR_BKP);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d80e:	609a      	str	r2, [r3, #8]

		/* Configure the RTC_CR register */
		hrtc->Instance->CR |= (uint32_t) (sTime->DayLightSaving
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6899      	ldr	r1, [r3, #8]
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	68da      	ldr	r2, [r3, #12]
				| sTime->StoreOperation);
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	431a      	orrs	r2, r3
		hrtc->Instance->CR |= (uint32_t) (sTime->DayLightSaving
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	609a      	str	r2, [r3, #8]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f9a3 	bl	800db74 <RTC_ExitInitMode>
 800d82e:	4603      	mov	r3, r0
 800d830:	74fb      	strb	r3, [r7, #19]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	22ff      	movs	r2, #255	; 0xff
 800d838:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800d83a:	7cfb      	ldrb	r3, [r7, #19]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d103      	bne.n	800d848 <HAL_RTC_SetTime+0x124>
		hrtc->State = HAL_RTC_STATE_READY;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2020 	strb.w	r2, [r3, #32]

	return status;
 800d850:	7cfb      	ldrb	r3, [r7, #19]
}
 800d852:	4618      	mov	r0, r3
 800d854:	371c      	adds	r7, #28
 800d856:	46bd      	mov	sp, r7
 800d858:	bd90      	pop	{r4, r7, pc}
 800d85a:	bf00      	nop
 800d85c:	007f7f7f 	.word	0x007f7f7f

0800d860 <HAL_RTC_GetTime>:
 *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
 *        to ensure consistency between the time and date values.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc,
		RTC_TimeTypeDef *sTime, uint32_t Format) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_RTC_FORMAT(Format));

	/* Get subseconds structure field from the corresponding register*/
	sTime->SubSeconds = (uint32_t) (hrtc->Instance->SSR);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	605a      	str	r2, [r3, #4]

	/* Get SecondFraction structure field from the corresponding register field*/
	sTime->SecondFraction =
			(uint32_t) (hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	f3c3 020e 	ubfx	r2, r3, #0, #15
	sTime->SecondFraction =
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	609a      	str	r2, [r3, #8]

	/* Get the TR register */
	tmpreg = (uint32_t) (hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <HAL_RTC_GetTime+0xb4>)
 800d88c:	4013      	ands	r3, r2
 800d88e:	617b      	str	r3, [r7, #20]

	/* Fill the structure fields with the read parameters */
	sTime->Hours = (uint8_t) ((tmpreg & (RTC_TR_HT | RTC_TR_HU))
			>> RTC_TR_HU_Pos);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	0c1b      	lsrs	r3, r3, #16
	sTime->Hours = (uint8_t) ((tmpreg & (RTC_TR_HT | RTC_TR_HU))
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	701a      	strb	r2, [r3, #0]
	sTime->Minutes = (uint8_t) ((tmpreg & (RTC_TR_MNT | RTC_TR_MNU))
			>> RTC_TR_MNU_Pos);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	0a1b      	lsrs	r3, r3, #8
	sTime->Minutes = (uint8_t) ((tmpreg & (RTC_TR_MNT | RTC_TR_MNU))
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	705a      	strb	r2, [r3, #1]
	sTime->Seconds = (uint8_t) ((tmpreg & (RTC_TR_ST | RTC_TR_SU))
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	709a      	strb	r2, [r3, #2]
			>> RTC_TR_SU_Pos);
	sTime->TimeFormat = (uint8_t) ((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	0d9b      	lsrs	r3, r3, #22
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	70da      	strb	r2, [r3, #3]

	/* Check the input parameters format */
	if (Format == RTC_FORMAT_BIN) {
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d11a      	bne.n	800d90a <HAL_RTC_GetTime+0xaa>
		/* Convert the time structure parameters to Binary format */
		sTime->Hours = (uint8_t) RTC_Bcd2ToByte(sTime->Hours);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 f9a9 	bl	800dc30 <RTC_Bcd2ToByte>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	701a      	strb	r2, [r3, #0]
		sTime->Minutes = (uint8_t) RTC_Bcd2ToByte(sTime->Minutes);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	785b      	ldrb	r3, [r3, #1]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f9a0 	bl	800dc30 <RTC_Bcd2ToByte>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	705a      	strb	r2, [r3, #1]
		sTime->Seconds = (uint8_t) RTC_Bcd2ToByte(sTime->Seconds);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	789b      	ldrb	r3, [r3, #2]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 f997 	bl	800dc30 <RTC_Bcd2ToByte>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	709a      	strb	r2, [r3, #2]
	}

	return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	007f7f7f 	.word	0x007f7f7f

0800d918 <HAL_RTC_SetDate>:
 *            @arg RTC_FORMAT_BIN: Binary data format
 *            @arg RTC_FORMAT_BCD: BCD data format
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc,
		RTC_DateTypeDef *sDate, uint32_t Format) {
 800d918:	b590      	push	{r4, r7, lr}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_RTC_FORMAT(Format));

	/* Process Locked */
	__HAL_LOCK(hrtc);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d101      	bne.n	800d932 <HAL_RTC_SetDate+0x1a>
 800d92e:	2302      	movs	r3, #2
 800d930:	e073      	b.n	800da1a <HAL_RTC_SetDate+0x102>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2202      	movs	r2, #2
 800d93e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U)) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10e      	bne.n	800d966 <HAL_RTC_SetDate+0x4e>
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	f003 0310 	and.w	r3, r3, #16
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_RTC_SetDate+0x4e>
		sDate->Month = (uint8_t) ((sDate->Month & (uint8_t) ~(0x10U))
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	f023 0310 	bic.w	r3, r3, #16
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	330a      	adds	r3, #10
 800d960:	b2da      	uxtb	r2, r3
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	705a      	strb	r2, [r3, #1]
				+ (uint8_t) 0x0AU);
	}

	assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

	if (Format == RTC_FORMAT_BIN) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11c      	bne.n	800d9a6 <HAL_RTC_SetDate+0x8e>
		assert_param(IS_RTC_YEAR(sDate->Year));
		assert_param(IS_RTC_MONTH(sDate->Month));
		assert_param(IS_RTC_DATE(sDate->Date));

		datetmpreg = (((uint32_t) RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos)
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	78db      	ldrb	r3, [r3, #3]
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f93d 	bl	800dbf0 <RTC_ByteToBcd2>
 800d976:	4603      	mov	r3, r0
 800d978:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	4618      	mov	r0, r3
 800d980:	f000 f936 	bl	800dbf0 <RTC_ByteToBcd2>
 800d984:	4603      	mov	r3, r0
 800d986:	021b      	lsls	r3, r3, #8
 800d988:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos)
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	789b      	ldrb	r3, [r3, #2]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 f92e 	bl	800dbf0 <RTC_ByteToBcd2>
 800d994:	4603      	mov	r3, r0
 800d996:	ea44 0203 	orr.w	r2, r4, r3
				| ((uint32_t) sDate->WeekDay << RTC_DR_WDU_Pos));
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	035b      	lsls	r3, r3, #13
		datetmpreg = (((uint32_t) RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos)
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	e00e      	b.n	800d9c4 <HAL_RTC_SetDate+0xac>
	} else {
		assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
		assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
		assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

		datetmpreg = ((((uint32_t) sDate->Year) << RTC_DR_YU_Pos)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	78db      	ldrb	r3, [r3, #3]
 800d9aa:	041a      	lsls	r2, r3, #16
				| (((uint32_t) sDate->Month) << RTC_DR_MU_Pos)
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	785b      	ldrb	r3, [r3, #1]
 800d9b0:	021b      	lsls	r3, r3, #8
 800d9b2:	4313      	orrs	r3, r2
				| (((uint32_t) sDate->Date) << RTC_DR_DU_Pos)
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	7892      	ldrb	r2, [r2, #2]
 800d9b8:	431a      	orrs	r2, r3
				| (((uint32_t) sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	035b      	lsls	r3, r3, #13
		datetmpreg = ((((uint32_t) sDate->Year) << RTC_DR_YU_Pos)
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	617b      	str	r3, [r7, #20]
	}

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	22ca      	movs	r2, #202	; 0xca
 800d9ca:	625a      	str	r2, [r3, #36]	; 0x24
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2253      	movs	r2, #83	; 0x53
 800d9d2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f000 f899 	bl	800db0c <RTC_EnterInitMode>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	74fb      	strb	r3, [r7, #19]
	if (status == HAL_OK) {
 800d9de:	7cfb      	ldrb	r3, [r7, #19]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <HAL_RTC_SetDate+0xe2>
		/* Set the RTC_DR register */
		hrtc->Instance->DR = (uint32_t) (datetmpreg & RTC_DR_RESERVED_MASK);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	6979      	ldr	r1, [r7, #20]
 800d9ea:	4b0e      	ldr	r3, [pc, #56]	; (800da24 <HAL_RTC_SetDate+0x10c>)
 800d9ec:	400b      	ands	r3, r1
 800d9ee:	6053      	str	r3, [r2, #4]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 f8bf 	bl	800db74 <RTC_ExitInitMode>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	74fb      	strb	r3, [r7, #19]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	22ff      	movs	r2, #255	; 0xff
 800da00:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800da02:	7cfb      	ldrb	r3, [r7, #19]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <HAL_RTC_SetDate+0xf8>
		hrtc->State = HAL_RTC_STATE_READY;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	f883 2020 	strb.w	r2, [r3, #32]

	return status;
 800da18:	7cfb      	ldrb	r3, [r7, #19]

}
 800da1a:	4618      	mov	r0, r3
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd90      	pop	{r4, r7, pc}
 800da22:	bf00      	nop
 800da24:	00ffff3f 	.word	0x00ffff3f

0800da28 <HAL_RTC_GetDate>:
 *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
 *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc,
		RTC_DateTypeDef *sDate, uint32_t Format) {
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_RTC_FORMAT(Format));

	/* Get the DR register */
	datetmpreg = (uint32_t) (hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	4b21      	ldr	r3, [pc, #132]	; (800dac0 <HAL_RTC_GetDate+0x98>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	617b      	str	r3, [r7, #20]

	/* Fill the structure fields with the read parameters */
	sDate->Year = (uint8_t) ((datetmpreg & (RTC_DR_YT | RTC_DR_YU))
			>> RTC_DR_YU_Pos);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	0c1b      	lsrs	r3, r3, #16
	sDate->Year = (uint8_t) ((datetmpreg & (RTC_DR_YT | RTC_DR_YU))
 800da44:	b2da      	uxtb	r2, r3
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	70da      	strb	r2, [r3, #3]
	sDate->Month = (uint8_t) ((datetmpreg & (RTC_DR_MT | RTC_DR_MU))
			>> RTC_DR_MU_Pos);
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	0a1b      	lsrs	r3, r3, #8
	sDate->Month = (uint8_t) ((datetmpreg & (RTC_DR_MT | RTC_DR_MU))
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 031f 	and.w	r3, r3, #31
 800da54:	b2da      	uxtb	r2, r3
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	705a      	strb	r2, [r3, #1]
	sDate->Date = (uint8_t) ((datetmpreg & (RTC_DR_DT | RTC_DR_DU))
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da62:	b2da      	uxtb	r2, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	709a      	strb	r2, [r3, #2]
			>> RTC_DR_DU_Pos);
	sDate->WeekDay = (uint8_t) ((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	0b5b      	lsrs	r3, r3, #13
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	b2da      	uxtb	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	701a      	strb	r2, [r3, #0]

	/* Check the input parameters format */
	if (Format == RTC_FORMAT_BIN) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d11a      	bne.n	800dab4 <HAL_RTC_GetDate+0x8c>
		/* Convert the date structure parameters to Binary format */
		sDate->Year = (uint8_t) RTC_Bcd2ToByte(sDate->Year);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	78db      	ldrb	r3, [r3, #3]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f8d4 	bl	800dc30 <RTC_Bcd2ToByte>
 800da88:	4603      	mov	r3, r0
 800da8a:	461a      	mov	r2, r3
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	70da      	strb	r2, [r3, #3]
		sDate->Month = (uint8_t) RTC_Bcd2ToByte(sDate->Month);
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	785b      	ldrb	r3, [r3, #1]
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f8cb 	bl	800dc30 <RTC_Bcd2ToByte>
 800da9a:	4603      	mov	r3, r0
 800da9c:	461a      	mov	r2, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	705a      	strb	r2, [r3, #1]
		sDate->Date = (uint8_t) RTC_Bcd2ToByte(sDate->Date);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	789b      	ldrb	r3, [r3, #2]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 f8c2 	bl	800dc30 <RTC_Bcd2ToByte>
 800daac:	4603      	mov	r3, r0
 800daae:	461a      	mov	r2, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	709a      	strb	r2, [r3, #2]
	}
	return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	00ffff3f 	.word	0x00ffff3f

0800dac4 <HAL_RTC_WaitForSynchro>:
 *         the calendar, which means that the calendar registers have been
 *         correctly copied into the RTC_TR and RTC_DR shadow registers.
 * @param  hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc) {
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]

	/* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
	hrtc->Instance->ISR = ((uint32_t) (RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a0d      	ldr	r2, [pc, #52]	; (800db08 <HAL_RTC_WaitForSynchro+0x44>)
 800dad2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

	tickstart = HAL_GetTick();
 800dad4:	f7f6 f8f2 	bl	8003cbc <HAL_GetTick>
 800dad8:	60f8      	str	r0, [r7, #12]

	/* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dada:	e009      	b.n	800daf0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
	{
		if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 800dadc:	f7f6 f8ee 	bl	8003cbc <HAL_GetTick>
 800dae0:	4602      	mov	r2, r0
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daea:	d901      	bls.n	800daf0 <HAL_RTC_WaitForSynchro+0x2c>
			return HAL_TIMEOUT;
 800daec:	2303      	movs	r3, #3
 800daee:	e007      	b.n	800db00 <HAL_RTC_WaitForSynchro+0x3c>
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	f003 0320 	and.w	r3, r3, #32
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0ee      	beq.n	800dadc <HAL_RTC_WaitForSynchro+0x18>
		}
	}

	return HAL_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	0003ff5f 	.word	0x0003ff5f

0800db0c <RTC_EnterInitMode>:
 * @note   The RTC Initialization mode is write protected, use the
 *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
 * @param  hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc) {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
	if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db22:	2b00      	cmp	r3, #0
 800db24:	d120      	bne.n	800db68 <RTC_EnterInitMode+0x5c>
		/* Set the Initialization mode */
		hrtc->Instance->ISR = (uint32_t) RTC_INIT_MASK;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db2e:	60da      	str	r2, [r3, #12]

		tickstart = HAL_GetTick();
 800db30:	f7f6 f8c4 	bl	8003cbc <HAL_GetTick>
 800db34:	60b8      	str	r0, [r7, #8]

		/* Wait till RTC is in INIT state and if timeout is reached exit */
		while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db36:	e00d      	b.n	800db54 <RTC_EnterInitMode+0x48>
				&& (status != HAL_TIMEOUT))
#endif /* TAMP */
		{
			if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 800db38:	f7f6 f8c0 	bl	8003cbc <HAL_GetTick>
 800db3c:	4602      	mov	r2, r0
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db46:	d905      	bls.n	800db54 <RTC_EnterInitMode+0x48>
				status = HAL_TIMEOUT;
 800db48:	2303      	movs	r3, #3
 800db4a:	73fb      	strb	r3, [r7, #15]
				hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2203      	movs	r2, #3
 800db50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d102      	bne.n	800db68 <RTC_EnterInitMode+0x5c>
				&& (status != HAL_TIMEOUT))
 800db62:	7bfb      	ldrb	r3, [r7, #15]
 800db64:	2b03      	cmp	r3, #3
 800db66:	d1e7      	bne.n	800db38 <RTC_EnterInitMode+0x2c>
			}
		}
	}

	return status;
 800db68:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
	...

0800db74 <RTC_ExitInitMode>:
/**
 * @brief  Exit the RTC Initialization mode.
 * @param  hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc) {
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	73fb      	strb	r3, [r7, #15]

	/* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db80:	4b1a      	ldr	r3, [pc, #104]	; (800dbec <RTC_ExitInitMode+0x78>)
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	4a19      	ldr	r2, [pc, #100]	; (800dbec <RTC_ExitInitMode+0x78>)
 800db86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db8a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

	/* If CR_BYPSHAD bit = 0, wait for synchro */
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U) {
 800db8c:	4b17      	ldr	r3, [pc, #92]	; (800dbec <RTC_ExitInitMode+0x78>)
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	f003 0320 	and.w	r3, r3, #32
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10c      	bne.n	800dbb2 <RTC_ExitInitMode+0x3e>
		if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff ff93 	bl	800dac4 <HAL_RTC_WaitForSynchro>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d01e      	beq.n	800dbe2 <RTC_ExitInitMode+0x6e>
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2203      	movs	r2, #3
 800dba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			status = HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	73fb      	strb	r3, [r7, #15]
 800dbb0:	e017      	b.n	800dbe2 <RTC_ExitInitMode+0x6e>
		}
	} else {
		/* Clear BYPSHAD bit */
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbb2:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <RTC_ExitInitMode+0x78>)
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	4a0d      	ldr	r2, [pc, #52]	; (800dbec <RTC_ExitInitMode+0x78>)
 800dbb8:	f023 0320 	bic.w	r3, r3, #32
 800dbbc:	6093      	str	r3, [r2, #8]
		if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ff80 	bl	800dac4 <HAL_RTC_WaitForSynchro>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d005      	beq.n	800dbd6 <RTC_ExitInitMode+0x62>
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2203      	movs	r2, #3
 800dbce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			status = HAL_TIMEOUT;
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	73fb      	strb	r3, [r7, #15]
		}
		/* Restore BYPSHAD bit */
		SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbd6:	4b05      	ldr	r3, [pc, #20]	; (800dbec <RTC_ExitInitMode+0x78>)
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	4a04      	ldr	r2, [pc, #16]	; (800dbec <RTC_ExitInitMode+0x78>)
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	6093      	str	r3, [r2, #8]
	}

	return status;
 800dbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	58004000 	.word	0x58004000

0800dbf0 <RTC_ByteToBcd2>:
/**
 * @brief  Convert a 2 digit decimal to BCD format.
 * @param  Value Byte to be converted
 * @retval Converted byte
 */
uint8_t RTC_ByteToBcd2(uint8_t Value) {
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	71fb      	strb	r3, [r7, #7]
	uint32_t bcdhigh = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
	uint8_t bcdlow = Value;
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	72fb      	strb	r3, [r7, #11]

	while (bcdlow >= 10U) {
 800dc02:	e005      	b.n	800dc10 <RTC_ByteToBcd2+0x20>
		bcdhigh++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
		bcdlow -= 10U;
 800dc0a:	7afb      	ldrb	r3, [r7, #11]
 800dc0c:	3b0a      	subs	r3, #10
 800dc0e:	72fb      	strb	r3, [r7, #11]
	while (bcdlow >= 10U) {
 800dc10:	7afb      	ldrb	r3, [r7, #11]
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d8f6      	bhi.n	800dc04 <RTC_ByteToBcd2+0x14>
	}

	return ((uint8_t) (bcdhigh << 4U) | bcdlow);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	011b      	lsls	r3, r3, #4
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	7afb      	ldrb	r3, [r7, #11]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	b2db      	uxtb	r3, r3
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <RTC_Bcd2ToByte>:
/**
 * @brief  Convert from 2 digit BCD to Binary.
 * @param  Value BCD value to be converted
 * @retval Converted word
 */
uint8_t RTC_Bcd2ToByte(uint8_t Value) {
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	091b      	lsrs	r3, r3, #4
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	461a      	mov	r2, r3
 800dc42:	0092      	lsls	r2, r2, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	73fb      	strb	r3, [r7, #15]
	return (tmp + (Value & 0x0FU));
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	f003 030f 	and.w	r3, r3, #15
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	4413      	add	r3, r2
 800dc56:	b2db      	uxtb	r3, r3
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e10f      	b.n	800de96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	/* Verify that the SPI instance supports Data Size higher than 16bits */
	if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a87      	ldr	r2, [pc, #540]	; (800dea0 <HAL_SPI_Init+0x23c>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00f      	beq.n	800dca6 <HAL_SPI_Init+0x42>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a86      	ldr	r2, [pc, #536]	; (800dea4 <HAL_SPI_Init+0x240>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d00a      	beq.n	800dca6 <HAL_SPI_Init+0x42>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a84      	ldr	r2, [pc, #528]	; (800dea8 <HAL_SPI_Init+0x244>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d005      	beq.n	800dca6 <HAL_SPI_Init+0x42>
			&& (hspi->Init.DataSize > SPI_DATASIZE_16BIT)) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	2b0f      	cmp	r3, #15
 800dca0:	d901      	bls.n	800dca6 <HAL_SPI_Init+0x42>
		return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e0f7      	b.n	800de96 <HAL_SPI_Init+0x232>
	}

	/* Verify that the SPI instance supports requested data packing */
	packet_length = SPI_GetPacketSize(hspi);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fc12 	bl	800e4d0 <SPI_GetPacketSize>
 800dcac:	60f8      	str	r0, [r7, #12]
	if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a7b      	ldr	r2, [pc, #492]	; (800dea0 <HAL_SPI_Init+0x23c>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d00c      	beq.n	800dcd2 <HAL_SPI_Init+0x6e>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a79      	ldr	r2, [pc, #484]	; (800dea4 <HAL_SPI_Init+0x240>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d007      	beq.n	800dcd2 <HAL_SPI_Init+0x6e>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a78      	ldr	r2, [pc, #480]	; (800dea8 <HAL_SPI_Init+0x244>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d002      	beq.n	800dcd2 <HAL_SPI_Init+0x6e>
			&& (packet_length > SPI_LOWEND_FIFO_SIZE))
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d811      	bhi.n	800dcf6 <HAL_SPI_Init+0x92>
			|| ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a72      	ldr	r2, [pc, #456]	; (800dea0 <HAL_SPI_Init+0x23c>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d009      	beq.n	800dcf0 <HAL_SPI_Init+0x8c>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a70      	ldr	r2, [pc, #448]	; (800dea4 <HAL_SPI_Init+0x240>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d004      	beq.n	800dcf0 <HAL_SPI_Init+0x8c>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a6f      	ldr	r2, [pc, #444]	; (800dea8 <HAL_SPI_Init+0x244>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d104      	bne.n	800dcfa <HAL_SPI_Init+0x96>
					&& (packet_length > SPI_HIGHEND_FIFO_SIZE))) {
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b10      	cmp	r3, #16
 800dcf4:	d901      	bls.n	800dcfa <HAL_SPI_Init+0x96>
		return HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e0cd      	b.n	800de96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <HAL_SPI_Init+0xb0>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7f5 faca 	bl	80032a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2202      	movs	r2, #2
 800dd18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f022 0201 	bic.w	r2, r2, #1
 800dd2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
	/* Keep the default value of CRCSIZE in case of CRC is not used */
	crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dd36:	60bb      	str	r3, [r7, #8]
	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
	 Communication speed, First bit, CRC calculation state, CRC Length */

	/* SPIx NSS Software Management Configuration */
	if ((hspi->Init.NSS == SPI_NSS_SOFT)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd40:	d119      	bne.n	800dd76 <HAL_SPI_Init+0x112>
			&& (((hspi->Init.Mode == SPI_MODE_MASTER)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd4a:	d103      	bne.n	800dd54 <HAL_SPI_Init+0xf0>
					&& (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d008      	beq.n	800dd66 <HAL_SPI_Init+0x102>
					|| ((hspi->Init.Mode == SPI_MODE_SLAVE)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10c      	bne.n	800dd76 <HAL_SPI_Init+0x112>
							&& (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH)))) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd64:	d107      	bne.n	800dd76 <HAL_SPI_Init+0x112>
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd74:	601a      	str	r2, [r3, #0]
	}

	/* SPIx Master Rx Auto Suspend Configuration */
	if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00f      	beq.n	800dda2 <HAL_SPI_Init+0x13e>
			&& (hspi->Init.DataSize >= SPI_DATASIZE_8BIT)) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	2b06      	cmp	r3, #6
 800dd88:	d90b      	bls.n	800dda2 <HAL_SPI_Init+0x13e>
		MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX,
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	430a      	orrs	r2, r1
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	e007      	b.n	800ddb2 <HAL_SPI_Init+0x14e>
				hspi->Init.MasterReceiverAutoSusp);
	} else {
		CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ddb0:	601a      	str	r2, [r3, #0]
	}

	/* SPIx CFG1 Configuration */
	WRITE_REG(hspi->Instance->CFG1,
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	69da      	ldr	r2, [r3, #28]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc4:	ea42 0103 	orr.w	r1, r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	68da      	ldr	r2, [r3, #12]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	609a      	str	r2, [r3, #8]
			(hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation
					| crc_length | hspi->Init.FifoThreshold
					| hspi->Init.DataSize));

	/* SPIx CFG2 Configuration */
	WRITE_REG(hspi->Instance->CFG2,
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	431a      	orrs	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde2:	431a      	orrs	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	699b      	ldr	r3, [r3, #24]
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	431a      	orrs	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	431a      	orrs	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	431a      	orrs	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de06:	431a      	orrs	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	431a      	orrs	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de12:	ea42 0103 	orr.w	r1, r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

	/* Insure that Underrun configuration is managed only by Salve */
	if (hspi->Init.Mode == SPI_MODE_SLAVE) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d113      	bne.n	800de52 <HAL_SPI_Init+0x1ee>
		/* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
		{
			MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET,
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de3c:	609a      	str	r2, [r3, #8]
					SPI_CFG1_UDRDET_0);
		}
		MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de50:	609a      	str	r2, [r3, #8]
	}

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f022 0201 	bic.w	r2, r2, #1
 800de60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

	/* Insure that AFCNTR is managed only by Master */
	if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00a      	beq.n	800de84 <HAL_SPI_Init+0x220>
		/* Alternate function GPIOs control */
		MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR,
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	430a      	orrs	r2, r1
 800de82:	60da      	str	r2, [r3, #12]
				(hspi->Init.MasterKeepIOState));
	}

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hspi->State = HAL_SPI_STATE_READY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	return HAL_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	40013000 	.word	0x40013000
 800dea4:	40003800 	.word	0x40003800
 800dea8:	40003c00 	.word	0x40003c00

0800deac <HAL_SPI_Receive>:
 * @param  Size   : amount of data to be received
 * @param  Timeout: Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	603b      	str	r3, [r7, #0]
 800deb8:	4613      	mov	r3, r2
 800deba:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	uint32_t temp_sr_reg;
	uint16_t init_max_data_in_fifo;
	init_max_data_in_fifo =
			(((uint16_t) (hspi->Init.FifoThreshold >> 5U) + 1U));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec0:	095b      	lsrs	r3, r3, #5
 800dec2:	b29b      	uxth	r3, r3
	init_max_data_in_fifo =
 800dec4:	3301      	adds	r3, #1
 800dec6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
	__IO uint16_t *prxdr_16bits = (__IO uint16_t*) (&(hspi->Instance->RXDR));
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3330      	adds	r3, #48	; 0x30
 800dece:	61bb      	str	r3, [r7, #24]
	/* Check Direction parameter */
	assert_param(
			IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 800ded0:	f7f5 fef4 	bl	8003cbc <HAL_GetTick>
 800ded4:	6178      	str	r0, [r7, #20]

	if (hspi->State != HAL_SPI_STATE_READY) {
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d001      	beq.n	800dee6 <HAL_SPI_Receive+0x3a>
		return HAL_BUSY;
 800dee2:	2302      	movs	r3, #2
 800dee4:	e250      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
	}

	if ((pData == NULL) || (Size == 0UL)) {
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <HAL_SPI_Receive+0x46>
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <HAL_SPI_Receive+0x4a>
		return HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	e248      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
	}

	/* Lock the process */
	__HAL_LOCK(hspi);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800defc:	2b01      	cmp	r3, #1
 800defe:	d101      	bne.n	800df04 <HAL_SPI_Receive+0x58>
 800df00:	2302      	movs	r3, #2
 800df02:	e241      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2204      	movs	r2, #4
 800df10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hspi->pRxBuffPtr = (uint8_t*) pData;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	665a      	str	r2, [r3, #100]	; 0x64
	hspi->RxXferSize = Size;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	88fa      	ldrh	r2, [r7, #6]
 800df26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hspi->RxXferCount = Size;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	88fa      	ldrh	r2, [r7, #6]
 800df2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	/*Init field not used in handle to zero */
	hspi->pTxBuffPtr = NULL;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	65da      	str	r2, [r3, #92]	; 0x5c
	hspi->TxXferSize = (uint16_t) 0UL;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	hspi->TxXferCount = (uint16_t) 0UL;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	hspi->RxISR = NULL;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	671a      	str	r2, [r3, #112]	; 0x70
	hspi->TxISR = NULL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	675a      	str	r2, [r3, #116]	; 0x74

	/* Configure communication direction: 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800df5c:	d108      	bne.n	800df70 <HAL_SPI_Receive+0xc4>
		SPI_1LINE_RX(hspi);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	e009      	b.n	800df84 <HAL_SPI_Receive+0xd8>
	} else {
		SPI_2LINES_RX(hspi);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800df82:	60da      	str	r2, [r3, #12]
	}

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	4b95      	ldr	r3, [pc, #596]	; (800e1e0 <HAL_SPI_Receive+0x334>)
 800df8c:	4013      	ands	r3, r2
 800df8e:	88f9      	ldrh	r1, [r7, #6]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	6812      	ldr	r2, [r2, #0]
 800df94:	430b      	orrs	r3, r1
 800df96:	6053      	str	r3, [r2, #4]

	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f042 0201 	orr.w	r2, r2, #1
 800dfa6:	601a      	str	r2, [r3, #0]

	if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfb0:	d107      	bne.n	800dfc2 <HAL_SPI_Receive+0x116>
		/* Master transfer start */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfc0:	601a      	str	r2, [r3, #0]
	}

	/* Receive data in 32 Bit mode */
	if (hspi->Init.DataSize > SPI_DATASIZE_16BIT) {
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	2b0f      	cmp	r3, #15
 800dfc8:	d96c      	bls.n	800e0a4 <HAL_SPI_Receive+0x1f8>
		/* Transfer loop */
		while (hspi->RxXferCount > 0UL) {
 800dfca:	e064      	b.n	800e096 <HAL_SPI_Receive+0x1ea>
			/* Evaluate state of SR register */
			temp_sr_reg = hspi->Instance->SR;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	613b      	str	r3, [r7, #16]

			/* Check the RXP flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) {
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d114      	bne.n	800e00c <HAL_SPI_Receive+0x160>
				*((uint32_t*) hspi->pRxBuffPtr) =
						*((__IO uint32_t*) &hspi->Instance->RXDR);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681a      	ldr	r2, [r3, #0]
				*((uint32_t*) hspi->pRxBuffPtr) =
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint32_t*) &hspi->Instance->RXDR);
 800dfea:	6b12      	ldr	r2, [r2, #48]	; 0x30
				*((uint32_t*) hspi->pRxBuffPtr) =
 800dfec:	601a      	str	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint32_t);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dff2:	1d1a      	adds	r2, r3, #4
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dffe:	b29b      	uxth	r3, r3
 800e000:	3b01      	subs	r3, #1
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e00a:	e044      	b.n	800e096 <HAL_SPI_Receive+0x1ea>
			}
			/* Check RXWNE flag if RXP cannot be reached */
			else if ((hspi->RxXferCount < init_max_data_in_fifo)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e012:	b29b      	uxth	r3, r3
 800e014:	8bfa      	ldrh	r2, [r7, #30]
 800e016:	429a      	cmp	r2, r3
 800e018:	d919      	bls.n	800e04e <HAL_SPI_Receive+0x1a2>
					&& ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL)) {
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d014      	beq.n	800e04e <HAL_SPI_Receive+0x1a2>
				*((uint32_t*) hspi->pRxBuffPtr) =
						*((__IO uint32_t*) &hspi->Instance->RXDR);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681a      	ldr	r2, [r3, #0]
				*((uint32_t*) hspi->pRxBuffPtr) =
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint32_t*) &hspi->Instance->RXDR);
 800e02c:	6b12      	ldr	r2, [r2, #48]	; 0x30
				*((uint32_t*) hspi->pRxBuffPtr) =
 800e02e:	601a      	str	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint32_t);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e034:	1d1a      	adds	r2, r3, #4
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e040:	b29b      	uxth	r3, r3
 800e042:	3b01      	subs	r3, #1
 800e044:	b29a      	uxth	r2, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e04c:	e023      	b.n	800e096 <HAL_SPI_Receive+0x1ea>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800e04e:	f7f5 fe35 	bl	8003cbc <HAL_GetTick>
 800e052:	4602      	mov	r2, r0
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d803      	bhi.n	800e066 <HAL_SPI_Receive+0x1ba>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e064:	d102      	bne.n	800e06c <HAL_SPI_Receive+0x1c0>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d114      	bne.n	800e096 <HAL_SPI_Receive+0x1ea>
					/* Call standard close procedure with error check */
					SPI_CloseTransfer(hspi);
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f000 f98f 	bl	800e390 <SPI_CloseTransfer>

					SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					hspi->State = HAL_SPI_STATE_READY;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

					/* Unlock the process */
					__HAL_UNLOCK(hspi);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

					return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e178      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
		while (hspi->RxXferCount > 0UL) {
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d194      	bne.n	800dfcc <HAL_SPI_Receive+0x120>
 800e0a2:	e15e      	b.n	800e362 <HAL_SPI_Receive+0x4b6>
				}
			}
		}
	}
	/* Receive data in 16 Bit mode */
	else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	2b07      	cmp	r3, #7
 800e0aa:	f240 8153 	bls.w	800e354 <HAL_SPI_Receive+0x4a8>
		/* Transfer loop */
		while (hspi->RxXferCount > 0UL) {
 800e0ae:	e08f      	b.n	800e1d0 <HAL_SPI_Receive+0x324>
			/* Evaluate state of SR register */
			temp_sr_reg = hspi->Instance->SR;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	613b      	str	r3, [r7, #16]

			/* Check the RXP flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d114      	bne.n	800e0f0 <HAL_SPI_Receive+0x244>
#if defined (__GNUC__)
				*((uint16_t*) hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	8812      	ldrh	r2, [r2, #0]
 800e0ce:	b292      	uxth	r2, r2
 800e0d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d6:	1c9a      	adds	r2, r3, #2
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0ee:	e06f      	b.n	800e1d0 <HAL_SPI_Receive+0x324>
			}
			/* Check RXWNE flag if RXP cannot be reached */
			else if ((hspi->RxXferCount < init_max_data_in_fifo)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	8bfa      	ldrh	r2, [r7, #30]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d924      	bls.n	800e148 <HAL_SPI_Receive+0x29c>
					&& ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL)) {
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d01f      	beq.n	800e148 <HAL_SPI_Receive+0x29c>
#if defined (__GNUC__)
				*((uint16_t*) hspi->pRxBuffPtr) = *prxdr_16bits;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	8812      	ldrh	r2, [r2, #0]
 800e110:	b292      	uxth	r2, r2
 800e112:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e118:	1c9a      	adds	r2, r3, #2
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
				*((uint16_t*) hspi->pRxBuffPtr) = *prxdr_16bits;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e122:	69ba      	ldr	r2, [r7, #24]
 800e124:	8812      	ldrh	r2, [r2, #0]
 800e126:	b292      	uxth	r2, r2
 800e128:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12e:	1c9a      	adds	r2, r3, #2
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount -= (uint16_t) 2UL;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	3b02      	subs	r3, #2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e146:	e043      	b.n	800e1d0 <HAL_SPI_Receive+0x324>
			}
			/* Check RXPLVL flags when RXWNE cannot be reached */
			else if ((hspi->RxXferCount == 1UL)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e14e:	b29b      	uxth	r3, r3
 800e150:	2b01      	cmp	r3, #1
 800e152:	d119      	bne.n	800e188 <HAL_SPI_Receive+0x2dc>
					&& ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL)) {
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d014      	beq.n	800e188 <HAL_SPI_Receive+0x2dc>
#if defined (__GNUC__)
				*((uint16_t*) hspi->pRxBuffPtr) = *prxdr_16bits;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	8812      	ldrh	r2, [r2, #0]
 800e166:	b292      	uxth	r2, r2
 800e168:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e16e:	1c9a      	adds	r2, r3, #2
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	3b01      	subs	r3, #1
 800e17e:	b29a      	uxth	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e186:	e023      	b.n	800e1d0 <HAL_SPI_Receive+0x324>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800e188:	f7f5 fd98 	bl	8003cbc <HAL_GetTick>
 800e18c:	4602      	mov	r2, r0
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	683a      	ldr	r2, [r7, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	d803      	bhi.n	800e1a0 <HAL_SPI_Receive+0x2f4>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e19e:	d102      	bne.n	800e1a6 <HAL_SPI_Receive+0x2fa>
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d114      	bne.n	800e1d0 <HAL_SPI_Receive+0x324>
					/* Call standard close procedure with error check */
					SPI_CloseTransfer(hspi);
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f000 f8f2 	bl	800e390 <SPI_CloseTransfer>

					SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					hspi->State = HAL_SPI_STATE_READY;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

					/* Unlock the process */
					__HAL_UNLOCK(hspi);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

					return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e0db      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
		while (hspi->RxXferCount > 0UL) {
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f47f af69 	bne.w	800e0b0 <HAL_SPI_Receive+0x204>
 800e1de:	e0c0      	b.n	800e362 <HAL_SPI_Receive+0x4b6>
 800e1e0:	ffff0000 	.word	0xffff0000
	/* Receive data in 8 Bit mode */
	else {
		/* Transfer loop */
		while (hspi->RxXferCount > 0UL) {
			/* Evaluate state of SR register */
			temp_sr_reg = hspi->Instance->SR;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	613b      	str	r3, [r7, #16]

			/* Check the RXP flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) {
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d117      	bne.n	800e22a <HAL_SPI_Receive+0x37e>
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e206:	7812      	ldrb	r2, [r2, #0]
 800e208:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e20a:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	3b01      	subs	r3, #1
 800e220:	b29a      	uxth	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e228:	e094      	b.n	800e354 <HAL_SPI_Receive+0x4a8>
			}
			/* Check RXWNE flag if RXP cannot be reached */
			else if ((hspi->RxXferCount < init_max_data_in_fifo)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e230:	b29b      	uxth	r3, r3
 800e232:	8bfa      	ldrh	r2, [r7, #30]
 800e234:	429a      	cmp	r2, r3
 800e236:	d946      	bls.n	800e2c6 <HAL_SPI_Receive+0x41a>
					&& ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL)) {
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d041      	beq.n	800e2c6 <HAL_SPI_Receive+0x41a>
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e252:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	665a      	str	r2, [r3, #100]	; 0x64
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e26a:	7812      	ldrb	r2, [r2, #0]
 800e26c:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e26e:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	665a      	str	r2, [r3, #100]	; 0x64
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e286:	7812      	ldrb	r2, [r2, #0]
 800e288:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e28a:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e290:	1c5a      	adds	r2, r3, #1
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	665a      	str	r2, [r3, #100]	; 0x64
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e2a2:	7812      	ldrb	r2, [r2, #0]
 800e2a4:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e2a6:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount -= (uint16_t) 4UL;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	3b04      	subs	r3, #4
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2c4:	e046      	b.n	800e354 <HAL_SPI_Receive+0x4a8>
			}
			/* Check RXPLVL flags when RXWNE cannot be reached */
			else if ((hspi->RxXferCount < 4UL)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d81c      	bhi.n	800e30c <HAL_SPI_Receive+0x460>
					&& ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL)) {
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d017      	beq.n	800e30c <HAL_SPI_Receive+0x460>
				*((uint8_t*) hspi->pRxBuffPtr) =
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
						*((__IO uint8_t*) &hspi->Instance->RXDR);
 800e2e8:	7812      	ldrb	r2, [r2, #0]
 800e2ea:	b2d2      	uxtb	r2, r2
				*((uint8_t*) hspi->pRxBuffPtr) =
 800e2ec:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	665a      	str	r2, [r3, #100]	; 0x64
				hspi->RxXferCount--;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e30a:	e023      	b.n	800e354 <HAL_SPI_Receive+0x4a8>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800e30c:	f7f5 fcd6 	bl	8003cbc <HAL_GetTick>
 800e310:	4602      	mov	r2, r0
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d803      	bhi.n	800e324 <HAL_SPI_Receive+0x478>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e322:	d102      	bne.n	800e32a <HAL_SPI_Receive+0x47e>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d114      	bne.n	800e354 <HAL_SPI_Receive+0x4a8>
					/* Call standard close procedure with error check */
					SPI_CloseTransfer(hspi);
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f000 f830 	bl	800e390 <SPI_CloseTransfer>

					SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					hspi->State = HAL_SPI_STATE_READY;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

					/* Unlock the process */
					__HAL_UNLOCK(hspi);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

					return HAL_TIMEOUT;
 800e350:	2303      	movs	r3, #3
 800e352:	e019      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
		while (hspi->RxXferCount > 0UL) {
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f47f af41 	bne.w	800e1e4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

	/* Call standard close procedure with error check */
	SPI_CloseTransfer(hspi);
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 f814 	bl	800e390 <SPI_CloseTransfer>

	hspi->State = HAL_SPI_STATE_READY;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <HAL_SPI_Receive+0x4da>
		return HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	e000      	b.n	800e388 <HAL_SPI_Receive+0x4dc>
	} else {
		return HAL_OK;
 800e386:	2300      	movs	r3, #0
	}
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3720      	adds	r7, #32
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <SPI_CloseTransfer>:
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL_ERROR: if any error detected
 *         HAL_OK: if nothing detected
 */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi) {
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	60fb      	str	r3, [r7, #12]

	__HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	699a      	ldr	r2, [r3, #24]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f042 0208 	orr.w	r2, r2, #8
 800e3ae:	619a      	str	r2, [r3, #24]
	__HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	699a      	ldr	r2, [r3, #24]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f042 0210 	orr.w	r2, r2, #16
 800e3be:	619a      	str	r2, [r3, #24]

	/* Disable SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f022 0201 	bic.w	r2, r2, #1
 800e3ce:	601a      	str	r2, [r3, #0]

	/* Disable ITs */
	__HAL_SPI_DISABLE_IT(hspi,
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6919      	ldr	r1, [r3, #16]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	4b3c      	ldr	r3, [pc, #240]	; (800e4cc <SPI_CloseTransfer+0x13c>)
 800e3dc:	400b      	ands	r3, r1
 800e3de:	6113      	str	r3, [r2, #16]
			(SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));

	/* Disable Tx DMA Request */
	CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	689a      	ldr	r2, [r3, #8]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e3ee:	609a      	str	r2, [r3, #8]

	/* Report UnderRun error for non RX Only communication */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b04      	cmp	r3, #4
 800e3fa:	d014      	beq.n	800e426 <SPI_CloseTransfer+0x96>
		if ((itflag & SPI_FLAG_UDR) != 0UL) {
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f003 0320 	and.w	r3, r3, #32
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00f      	beq.n	800e426 <SPI_CloseTransfer+0x96>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e40c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			__HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	699a      	ldr	r2, [r3, #24]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f042 0220 	orr.w	r2, r2, #32
 800e424:	619a      	str	r2, [r3, #24]
		}
	}

	/* Report OverRun error for non TX Only communication */
	if (hspi->State != HAL_SPI_STATE_BUSY_TX) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d014      	beq.n	800e45c <SPI_CloseTransfer+0xcc>
		if ((itflag & SPI_FLAG_OVR) != 0UL) {
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00f      	beq.n	800e45c <SPI_CloseTransfer+0xcc>
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e442:	f043 0204 	orr.w	r2, r3, #4
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	699a      	ldr	r2, [r3, #24]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e45a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
	}

	/* SPI Mode Fault error interrupt occurred -------------------------------*/
	if ((itflag & SPI_FLAG_MODF) != 0UL) {
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00f      	beq.n	800e486 <SPI_CloseTransfer+0xf6>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e46c:	f043 0201 	orr.w	r2, r3, #1
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		__HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	699a      	ldr	r2, [r3, #24]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e484:	619a      	str	r2, [r3, #24]
	}

	/* SPI Frame error interrupt occurred ------------------------------------*/
	if ((itflag & SPI_FLAG_FRE) != 0UL) {
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00f      	beq.n	800e4b0 <SPI_CloseTransfer+0x120>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e496:	f043 0208 	orr.w	r2, r3, #8
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		__HAL_SPI_CLEAR_FREFLAG(hspi);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4ae:	619a      	str	r2, [r3, #24]
	}

	hspi->TxXferCount = (uint16_t) 0UL;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	hspi->RxXferCount = (uint16_t) 0UL;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e4c0:	bf00      	nop
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	fffffc90 	.word	0xfffffc90

0800e4d0 <SPI_GetPacketSize>:
 * @brief  Compute configured packet size from fifo perspective.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval Packet size occupied in the fifo
 */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi) {
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4dc:	095b      	lsrs	r3, r3, #5
 800e4de:	3301      	adds	r3, #1
 800e4e0:	60fb      	str	r3, [r7, #12]
			+ 1UL;
	uint32_t data_size = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	60bb      	str	r3, [r7, #8]

	/* Convert data size to Byte */
	data_size = (data_size + 7UL) / 8UL;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	3307      	adds	r3, #7
 800e4ee:	08db      	lsrs	r3, r3, #3
 800e4f0:	60bb      	str	r3, [r7, #8]

	return data_size * fifo_threashold;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	fb02 f303 	mul.w	r3, r2, r3
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3714      	adds	r7, #20
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	e049      	b.n	800e5ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	d106      	bne.n	800e532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7f4 ff71 	bl	8003414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2202      	movs	r2, #2
 800e536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3304      	adds	r3, #4
 800e542:	4619      	mov	r1, r3
 800e544:	4610      	mov	r0, r2
 800e546:	f000 fe7d 	bl	800f244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d001      	beq.n	800e5cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e054      	b.n	800e676 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2202      	movs	r2, #2
 800e5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68da      	ldr	r2, [r3, #12]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f042 0201 	orr.w	r2, r2, #1
 800e5e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a26      	ldr	r2, [pc, #152]	; (800e684 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d022      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5f6:	d01d      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a22      	ldr	r2, [pc, #136]	; (800e688 <HAL_TIM_Base_Start_IT+0xd4>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d018      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a21      	ldr	r2, [pc, #132]	; (800e68c <HAL_TIM_Base_Start_IT+0xd8>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d013      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a1f      	ldr	r2, [pc, #124]	; (800e690 <HAL_TIM_Base_Start_IT+0xdc>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d00e      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a1e      	ldr	r2, [pc, #120]	; (800e694 <HAL_TIM_Base_Start_IT+0xe0>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d009      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a1c      	ldr	r2, [pc, #112]	; (800e698 <HAL_TIM_Base_Start_IT+0xe4>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d004      	beq.n	800e634 <HAL_TIM_Base_Start_IT+0x80>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a1b      	ldr	r2, [pc, #108]	; (800e69c <HAL_TIM_Base_Start_IT+0xe8>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d115      	bne.n	800e660 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	689a      	ldr	r2, [r3, #8]
 800e63a:	4b19      	ldr	r3, [pc, #100]	; (800e6a0 <HAL_TIM_Base_Start_IT+0xec>)
 800e63c:	4013      	ands	r3, r2
 800e63e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b06      	cmp	r3, #6
 800e644:	d015      	beq.n	800e672 <HAL_TIM_Base_Start_IT+0xbe>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e64c:	d011      	beq.n	800e672 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f042 0201 	orr.w	r2, r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e65e:	e008      	b.n	800e672 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f042 0201 	orr.w	r2, r2, #1
 800e66e:	601a      	str	r2, [r3, #0]
 800e670:	e000      	b.n	800e674 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	40010000 	.word	0x40010000
 800e688:	40000400 	.word	0x40000400
 800e68c:	40000800 	.word	0x40000800
 800e690:	40000c00 	.word	0x40000c00
 800e694:	40010400 	.word	0x40010400
 800e698:	40001800 	.word	0x40001800
 800e69c:	40014000 	.word	0x40014000
 800e6a0:	00010007 	.word	0x00010007

0800e6a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d109      	bne.n	800e6cc <HAL_TIM_OC_Start_IT+0x28>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	bf14      	ite	ne
 800e6c4:	2301      	movne	r3, #1
 800e6c6:	2300      	moveq	r3, #0
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	e03c      	b.n	800e746 <HAL_TIM_OC_Start_IT+0xa2>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b04      	cmp	r3, #4
 800e6d0:	d109      	bne.n	800e6e6 <HAL_TIM_OC_Start_IT+0x42>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	e02f      	b.n	800e746 <HAL_TIM_OC_Start_IT+0xa2>
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b08      	cmp	r3, #8
 800e6ea:	d109      	bne.n	800e700 <HAL_TIM_OC_Start_IT+0x5c>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	bf14      	ite	ne
 800e6f8:	2301      	movne	r3, #1
 800e6fa:	2300      	moveq	r3, #0
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	e022      	b.n	800e746 <HAL_TIM_OC_Start_IT+0xa2>
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	2b0c      	cmp	r3, #12
 800e704:	d109      	bne.n	800e71a <HAL_TIM_OC_Start_IT+0x76>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b01      	cmp	r3, #1
 800e710:	bf14      	ite	ne
 800e712:	2301      	movne	r3, #1
 800e714:	2300      	moveq	r3, #0
 800e716:	b2db      	uxtb	r3, r3
 800e718:	e015      	b.n	800e746 <HAL_TIM_OC_Start_IT+0xa2>
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b10      	cmp	r3, #16
 800e71e:	d109      	bne.n	800e734 <HAL_TIM_OC_Start_IT+0x90>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b01      	cmp	r3, #1
 800e72a:	bf14      	ite	ne
 800e72c:	2301      	movne	r3, #1
 800e72e:	2300      	moveq	r3, #0
 800e730:	b2db      	uxtb	r3, r3
 800e732:	e008      	b.n	800e746 <HAL_TIM_OC_Start_IT+0xa2>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	bf14      	ite	ne
 800e740:	2301      	movne	r3, #1
 800e742:	2300      	moveq	r3, #0
 800e744:	b2db      	uxtb	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e0ec      	b.n	800e928 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d104      	bne.n	800e75e <HAL_TIM_OC_Start_IT+0xba>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2202      	movs	r2, #2
 800e758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e75c:	e023      	b.n	800e7a6 <HAL_TIM_OC_Start_IT+0x102>
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	2b04      	cmp	r3, #4
 800e762:	d104      	bne.n	800e76e <HAL_TIM_OC_Start_IT+0xca>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2202      	movs	r2, #2
 800e768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e76c:	e01b      	b.n	800e7a6 <HAL_TIM_OC_Start_IT+0x102>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b08      	cmp	r3, #8
 800e772:	d104      	bne.n	800e77e <HAL_TIM_OC_Start_IT+0xda>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2202      	movs	r2, #2
 800e778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e77c:	e013      	b.n	800e7a6 <HAL_TIM_OC_Start_IT+0x102>
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2b0c      	cmp	r3, #12
 800e782:	d104      	bne.n	800e78e <HAL_TIM_OC_Start_IT+0xea>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2202      	movs	r2, #2
 800e788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e78c:	e00b      	b.n	800e7a6 <HAL_TIM_OC_Start_IT+0x102>
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b10      	cmp	r3, #16
 800e792:	d104      	bne.n	800e79e <HAL_TIM_OC_Start_IT+0xfa>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2202      	movs	r2, #2
 800e798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e79c:	e003      	b.n	800e7a6 <HAL_TIM_OC_Start_IT+0x102>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2b0c      	cmp	r3, #12
 800e7aa:	d841      	bhi.n	800e830 <HAL_TIM_OC_Start_IT+0x18c>
 800e7ac:	a201      	add	r2, pc, #4	; (adr r2, 800e7b4 <HAL_TIM_OC_Start_IT+0x110>)
 800e7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b2:	bf00      	nop
 800e7b4:	0800e7e9 	.word	0x0800e7e9
 800e7b8:	0800e831 	.word	0x0800e831
 800e7bc:	0800e831 	.word	0x0800e831
 800e7c0:	0800e831 	.word	0x0800e831
 800e7c4:	0800e7fb 	.word	0x0800e7fb
 800e7c8:	0800e831 	.word	0x0800e831
 800e7cc:	0800e831 	.word	0x0800e831
 800e7d0:	0800e831 	.word	0x0800e831
 800e7d4:	0800e80d 	.word	0x0800e80d
 800e7d8:	0800e831 	.word	0x0800e831
 800e7dc:	0800e831 	.word	0x0800e831
 800e7e0:	0800e831 	.word	0x0800e831
 800e7e4:	0800e81f 	.word	0x0800e81f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68da      	ldr	r2, [r3, #12]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0202 	orr.w	r2, r2, #2
 800e7f6:	60da      	str	r2, [r3, #12]
      break;
 800e7f8:	e01d      	b.n	800e836 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68da      	ldr	r2, [r3, #12]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f042 0204 	orr.w	r2, r2, #4
 800e808:	60da      	str	r2, [r3, #12]
      break;
 800e80a:	e014      	b.n	800e836 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f042 0208 	orr.w	r2, r2, #8
 800e81a:	60da      	str	r2, [r3, #12]
      break;
 800e81c:	e00b      	b.n	800e836 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68da      	ldr	r2, [r3, #12]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f042 0210 	orr.w	r2, r2, #16
 800e82c:	60da      	str	r2, [r3, #12]
      break;
 800e82e:	e002      	b.n	800e836 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	73fb      	strb	r3, [r7, #15]
      break;
 800e834:	bf00      	nop
  }

  if (status == HAL_OK)
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d174      	bne.n	800e926 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2201      	movs	r2, #1
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	4618      	mov	r0, r3
 800e846:	f001 f917 	bl	800fa78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a38      	ldr	r2, [pc, #224]	; (800e930 <HAL_TIM_OC_Start_IT+0x28c>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d013      	beq.n	800e87c <HAL_TIM_OC_Start_IT+0x1d8>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a36      	ldr	r2, [pc, #216]	; (800e934 <HAL_TIM_OC_Start_IT+0x290>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d00e      	beq.n	800e87c <HAL_TIM_OC_Start_IT+0x1d8>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a35      	ldr	r2, [pc, #212]	; (800e938 <HAL_TIM_OC_Start_IT+0x294>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d009      	beq.n	800e87c <HAL_TIM_OC_Start_IT+0x1d8>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a33      	ldr	r2, [pc, #204]	; (800e93c <HAL_TIM_OC_Start_IT+0x298>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d004      	beq.n	800e87c <HAL_TIM_OC_Start_IT+0x1d8>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a32      	ldr	r2, [pc, #200]	; (800e940 <HAL_TIM_OC_Start_IT+0x29c>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d101      	bne.n	800e880 <HAL_TIM_OC_Start_IT+0x1dc>
 800e87c:	2301      	movs	r3, #1
 800e87e:	e000      	b.n	800e882 <HAL_TIM_OC_Start_IT+0x1de>
 800e880:	2300      	movs	r3, #0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a25      	ldr	r2, [pc, #148]	; (800e930 <HAL_TIM_OC_Start_IT+0x28c>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d022      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8a8:	d01d      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a25      	ldr	r2, [pc, #148]	; (800e944 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d018      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a23      	ldr	r2, [pc, #140]	; (800e948 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d013      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a22      	ldr	r2, [pc, #136]	; (800e94c <HAL_TIM_OC_Start_IT+0x2a8>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d00e      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a19      	ldr	r2, [pc, #100]	; (800e934 <HAL_TIM_OC_Start_IT+0x290>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d009      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a1e      	ldr	r2, [pc, #120]	; (800e950 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d004      	beq.n	800e8e6 <HAL_TIM_OC_Start_IT+0x242>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a15      	ldr	r2, [pc, #84]	; (800e938 <HAL_TIM_OC_Start_IT+0x294>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d115      	bne.n	800e912 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	4b19      	ldr	r3, [pc, #100]	; (800e954 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	2b06      	cmp	r3, #6
 800e8f6:	d015      	beq.n	800e924 <HAL_TIM_OC_Start_IT+0x280>
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8fe:	d011      	beq.n	800e924 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f042 0201 	orr.w	r2, r2, #1
 800e90e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e910:	e008      	b.n	800e924 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f042 0201 	orr.w	r2, r2, #1
 800e920:	601a      	str	r2, [r3, #0]
 800e922:	e000      	b.n	800e926 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e924:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e926:	7bfb      	ldrb	r3, [r7, #15]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	40010000 	.word	0x40010000
 800e934:	40010400 	.word	0x40010400
 800e938:	40014000 	.word	0x40014000
 800e93c:	40014400 	.word	0x40014400
 800e940:	40014800 	.word	0x40014800
 800e944:	40000400 	.word	0x40000400
 800e948:	40000800 	.word	0x40000800
 800e94c:	40000c00 	.word	0x40000c00
 800e950:	40001800 	.word	0x40001800
 800e954:	00010007 	.word	0x00010007

0800e958 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b0c      	cmp	r3, #12
 800e96a:	d841      	bhi.n	800e9f0 <HAL_TIM_OC_Stop_IT+0x98>
 800e96c:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e972:	bf00      	nop
 800e974:	0800e9a9 	.word	0x0800e9a9
 800e978:	0800e9f1 	.word	0x0800e9f1
 800e97c:	0800e9f1 	.word	0x0800e9f1
 800e980:	0800e9f1 	.word	0x0800e9f1
 800e984:	0800e9bb 	.word	0x0800e9bb
 800e988:	0800e9f1 	.word	0x0800e9f1
 800e98c:	0800e9f1 	.word	0x0800e9f1
 800e990:	0800e9f1 	.word	0x0800e9f1
 800e994:	0800e9cd 	.word	0x0800e9cd
 800e998:	0800e9f1 	.word	0x0800e9f1
 800e99c:	0800e9f1 	.word	0x0800e9f1
 800e9a0:	0800e9f1 	.word	0x0800e9f1
 800e9a4:	0800e9df 	.word	0x0800e9df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0202 	bic.w	r2, r2, #2
 800e9b6:	60da      	str	r2, [r3, #12]
      break;
 800e9b8:	e01d      	b.n	800e9f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0204 	bic.w	r2, r2, #4
 800e9c8:	60da      	str	r2, [r3, #12]
      break;
 800e9ca:	e014      	b.n	800e9f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68da      	ldr	r2, [r3, #12]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f022 0208 	bic.w	r2, r2, #8
 800e9da:	60da      	str	r2, [r3, #12]
      break;
 800e9dc:	e00b      	b.n	800e9f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68da      	ldr	r2, [r3, #12]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f022 0210 	bic.w	r2, r2, #16
 800e9ec:	60da      	str	r2, [r3, #12]
      break;
 800e9ee:	e002      	b.n	800e9f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f040 8081 	bne.w	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2200      	movs	r2, #0
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f001 f836 	bl	800fa78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a3e      	ldr	r2, [pc, #248]	; (800eb0c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d013      	beq.n	800ea3e <HAL_TIM_OC_Stop_IT+0xe6>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a3d      	ldr	r2, [pc, #244]	; (800eb10 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d00e      	beq.n	800ea3e <HAL_TIM_OC_Stop_IT+0xe6>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a3b      	ldr	r2, [pc, #236]	; (800eb14 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d009      	beq.n	800ea3e <HAL_TIM_OC_Stop_IT+0xe6>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a3a      	ldr	r2, [pc, #232]	; (800eb18 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d004      	beq.n	800ea3e <HAL_TIM_OC_Stop_IT+0xe6>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a38      	ldr	r2, [pc, #224]	; (800eb1c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d101      	bne.n	800ea42 <HAL_TIM_OC_Stop_IT+0xea>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e000      	b.n	800ea44 <HAL_TIM_OC_Stop_IT+0xec>
 800ea42:	2300      	movs	r3, #0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d017      	beq.n	800ea78 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6a1a      	ldr	r2, [r3, #32]
 800ea4e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ea52:	4013      	ands	r3, r2
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10f      	bne.n	800ea78 <HAL_TIM_OC_Stop_IT+0x120>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6a1a      	ldr	r2, [r3, #32]
 800ea5e:	f240 4344 	movw	r3, #1092	; 0x444
 800ea62:	4013      	ands	r3, r2
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d107      	bne.n	800ea78 <HAL_TIM_OC_Stop_IT+0x120>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6a1a      	ldr	r2, [r3, #32]
 800ea7e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ea82:	4013      	ands	r3, r2
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10f      	bne.n	800eaa8 <HAL_TIM_OC_Stop_IT+0x150>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6a1a      	ldr	r2, [r3, #32]
 800ea8e:	f240 4344 	movw	r3, #1092	; 0x444
 800ea92:	4013      	ands	r3, r2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d107      	bne.n	800eaa8 <HAL_TIM_OC_Stop_IT+0x150>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f022 0201 	bic.w	r2, r2, #1
 800eaa6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d104      	bne.n	800eab8 <HAL_TIM_OC_Stop_IT+0x160>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eab6:	e023      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	d104      	bne.n	800eac8 <HAL_TIM_OC_Stop_IT+0x170>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eac6:	e01b      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b08      	cmp	r3, #8
 800eacc:	d104      	bne.n	800ead8 <HAL_TIM_OC_Stop_IT+0x180>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ead6:	e013      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b0c      	cmp	r3, #12
 800eadc:	d104      	bne.n	800eae8 <HAL_TIM_OC_Stop_IT+0x190>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2201      	movs	r2, #1
 800eae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eae6:	e00b      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b10      	cmp	r3, #16
 800eaec:	d104      	bne.n	800eaf8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eaf6:	e003      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	40010000 	.word	0x40010000
 800eb10:	40010400 	.word	0x40010400
 800eb14:	40014000 	.word	0x40014000
 800eb18:	40014400 	.word	0x40014400
 800eb1c:	40014800 	.word	0x40014800

0800eb20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e049      	b.n	800ebc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d106      	bne.n	800eb4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f841 	bl	800ebce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	f000 fb70 	bl	800f244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b083      	sub	sp, #12
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ebd6:	bf00      	nop
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	f003 0302 	and.w	r3, r3, #2
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d020      	beq.n	800ec46 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f003 0302 	and.w	r3, r3, #2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d01b      	beq.n	800ec46 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f06f 0202 	mvn.w	r2, #2
 800ec16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	699b      	ldr	r3, [r3, #24]
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 faeb 	bl	800f208 <HAL_TIM_IC_CaptureCallback>
 800ec32:	e005      	b.n	800ec40 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7f1 fcd5 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 faee 	bl	800f21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d020      	beq.n	800ec92 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f003 0304 	and.w	r3, r3, #4
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d01b      	beq.n	800ec92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f06f 0204 	mvn.w	r2, #4
 800ec62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d003      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fac5 	bl	800f208 <HAL_TIM_IC_CaptureCallback>
 800ec7e:	e005      	b.n	800ec8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7f1 fcaf 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fac8 	bl	800f21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	f003 0308 	and.w	r3, r3, #8
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d020      	beq.n	800ecde <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f003 0308 	and.w	r3, r3, #8
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d01b      	beq.n	800ecde <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f06f 0208 	mvn.w	r2, #8
 800ecae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2204      	movs	r2, #4
 800ecb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	f003 0303 	and.w	r3, r3, #3
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d003      	beq.n	800eccc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 fa9f 	bl	800f208 <HAL_TIM_IC_CaptureCallback>
 800ecca:	e005      	b.n	800ecd8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7f1 fc89 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 faa2 	bl	800f21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	f003 0310 	and.w	r3, r3, #16
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d020      	beq.n	800ed2a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f003 0310 	and.w	r3, r3, #16
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d01b      	beq.n	800ed2a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f06f 0210 	mvn.w	r2, #16
 800ecfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2208      	movs	r2, #8
 800ed00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	69db      	ldr	r3, [r3, #28]
 800ed08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fa79 	bl	800f208 <HAL_TIM_IC_CaptureCallback>
 800ed16:	e005      	b.n	800ed24 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7f1 fc63 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fa7c 	bl	800f21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f003 0301 	and.w	r3, r3, #1
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00c      	beq.n	800ed4e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d007      	beq.n	800ed4e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f06f 0201 	mvn.w	r2, #1
 800ed46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7f4 f83d 	bl	8002dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d104      	bne.n	800ed62 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00c      	beq.n	800ed7c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ed74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 ffba 	bl	800fcf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00c      	beq.n	800eda0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d007      	beq.n	800eda0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 ffb2 	bl	800fd04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00c      	beq.n	800edc4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800edbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fa36 	bl	800f230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	f003 0320 	and.w	r3, r3, #32
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00c      	beq.n	800ede8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f003 0320 	and.w	r3, r3, #32
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d007      	beq.n	800ede8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f06f 0220 	mvn.w	r2, #32
 800ede0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 ff7a 	bl	800fcdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ede8:	bf00      	nop
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d101      	bne.n	800ee0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	e0ff      	b.n	800f00e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b14      	cmp	r3, #20
 800ee1a:	f200 80f0 	bhi.w	800effe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee1e:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee79 	.word	0x0800ee79
 800ee28:	0800efff 	.word	0x0800efff
 800ee2c:	0800efff 	.word	0x0800efff
 800ee30:	0800efff 	.word	0x0800efff
 800ee34:	0800eeb9 	.word	0x0800eeb9
 800ee38:	0800efff 	.word	0x0800efff
 800ee3c:	0800efff 	.word	0x0800efff
 800ee40:	0800efff 	.word	0x0800efff
 800ee44:	0800eefb 	.word	0x0800eefb
 800ee48:	0800efff 	.word	0x0800efff
 800ee4c:	0800efff 	.word	0x0800efff
 800ee50:	0800efff 	.word	0x0800efff
 800ee54:	0800ef3b 	.word	0x0800ef3b
 800ee58:	0800efff 	.word	0x0800efff
 800ee5c:	0800efff 	.word	0x0800efff
 800ee60:	0800efff 	.word	0x0800efff
 800ee64:	0800ef7d 	.word	0x0800ef7d
 800ee68:	0800efff 	.word	0x0800efff
 800ee6c:	0800efff 	.word	0x0800efff
 800ee70:	0800efff 	.word	0x0800efff
 800ee74:	0800efbd 	.word	0x0800efbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68b9      	ldr	r1, [r7, #8]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 fa86 	bl	800f390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	699a      	ldr	r2, [r3, #24]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f042 0208 	orr.w	r2, r2, #8
 800ee92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	699a      	ldr	r2, [r3, #24]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f022 0204 	bic.w	r2, r2, #4
 800eea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6999      	ldr	r1, [r3, #24]
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	691a      	ldr	r2, [r3, #16]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	430a      	orrs	r2, r1
 800eeb4:	619a      	str	r2, [r3, #24]
      break;
 800eeb6:	e0a5      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68b9      	ldr	r1, [r7, #8]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 faf6 	bl	800f4b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	699a      	ldr	r2, [r3, #24]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	699a      	ldr	r2, [r3, #24]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6999      	ldr	r1, [r3, #24]
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	021a      	lsls	r2, r3, #8
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	430a      	orrs	r2, r1
 800eef6:	619a      	str	r2, [r3, #24]
      break;
 800eef8:	e084      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68b9      	ldr	r1, [r7, #8]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 fb5f 	bl	800f5c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69da      	ldr	r2, [r3, #28]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f042 0208 	orr.w	r2, r2, #8
 800ef14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	69da      	ldr	r2, [r3, #28]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f022 0204 	bic.w	r2, r2, #4
 800ef24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	69d9      	ldr	r1, [r3, #28]
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	691a      	ldr	r2, [r3, #16]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	430a      	orrs	r2, r1
 800ef36:	61da      	str	r2, [r3, #28]
      break;
 800ef38:	e064      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68b9      	ldr	r1, [r7, #8]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 fbc7 	bl	800f6d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	69da      	ldr	r2, [r3, #28]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	69da      	ldr	r2, [r3, #28]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	69d9      	ldr	r1, [r3, #28]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	021a      	lsls	r2, r3, #8
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	430a      	orrs	r2, r1
 800ef78:	61da      	str	r2, [r3, #28]
      break;
 800ef7a:	e043      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68b9      	ldr	r1, [r7, #8]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fc10 	bl	800f7a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f042 0208 	orr.w	r2, r2, #8
 800ef96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f022 0204 	bic.w	r2, r2, #4
 800efa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	691a      	ldr	r2, [r3, #16]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	430a      	orrs	r2, r1
 800efb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800efba:	e023      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68b9      	ldr	r1, [r7, #8]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 fc54 	bl	800f870 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efe6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	021a      	lsls	r2, r3, #8
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	430a      	orrs	r2, r1
 800effa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800effc:	e002      	b.n	800f004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	75fb      	strb	r3, [r7, #23]
      break;
 800f002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3718      	adds	r7, #24
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop

0800f018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d101      	bne.n	800f034 <HAL_TIM_ConfigClockSource+0x1c>
 800f030:	2302      	movs	r3, #2
 800f032:	e0dc      	b.n	800f1ee <HAL_TIM_ConfigClockSource+0x1d6>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2202      	movs	r2, #2
 800f040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	4b6a      	ldr	r3, [pc, #424]	; (800f1f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f050:	4013      	ands	r3, r2
 800f052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f05a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a64      	ldr	r2, [pc, #400]	; (800f1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	f000 80a9 	beq.w	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f070:	4a62      	ldr	r2, [pc, #392]	; (800f1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f072:	4293      	cmp	r3, r2
 800f074:	f200 80ae 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f078:	4a61      	ldr	r2, [pc, #388]	; (800f200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	f000 80a1 	beq.w	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f080:	4a5f      	ldr	r2, [pc, #380]	; (800f200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f082:	4293      	cmp	r3, r2
 800f084:	f200 80a6 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f088:	4a5e      	ldr	r2, [pc, #376]	; (800f204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	f000 8099 	beq.w	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f090:	4a5c      	ldr	r2, [pc, #368]	; (800f204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f092:	4293      	cmp	r3, r2
 800f094:	f200 809e 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f09c:	f000 8091 	beq.w	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f0a4:	f200 8096 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0ac:	f000 8089 	beq.w	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0b4:	f200 808e 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0bc:	d03e      	beq.n	800f13c <HAL_TIM_ConfigClockSource+0x124>
 800f0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0c2:	f200 8087 	bhi.w	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0ca:	f000 8086 	beq.w	800f1da <HAL_TIM_ConfigClockSource+0x1c2>
 800f0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0d2:	d87f      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0d4:	2b70      	cmp	r3, #112	; 0x70
 800f0d6:	d01a      	beq.n	800f10e <HAL_TIM_ConfigClockSource+0xf6>
 800f0d8:	2b70      	cmp	r3, #112	; 0x70
 800f0da:	d87b      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0dc:	2b60      	cmp	r3, #96	; 0x60
 800f0de:	d050      	beq.n	800f182 <HAL_TIM_ConfigClockSource+0x16a>
 800f0e0:	2b60      	cmp	r3, #96	; 0x60
 800f0e2:	d877      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0e4:	2b50      	cmp	r3, #80	; 0x50
 800f0e6:	d03c      	beq.n	800f162 <HAL_TIM_ConfigClockSource+0x14a>
 800f0e8:	2b50      	cmp	r3, #80	; 0x50
 800f0ea:	d873      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0ec:	2b40      	cmp	r3, #64	; 0x40
 800f0ee:	d058      	beq.n	800f1a2 <HAL_TIM_ConfigClockSource+0x18a>
 800f0f0:	2b40      	cmp	r3, #64	; 0x40
 800f0f2:	d86f      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0f4:	2b30      	cmp	r3, #48	; 0x30
 800f0f6:	d064      	beq.n	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0f8:	2b30      	cmp	r3, #48	; 0x30
 800f0fa:	d86b      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	d060      	beq.n	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f100:	2b20      	cmp	r3, #32
 800f102:	d867      	bhi.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f104:	2b00      	cmp	r3, #0
 800f106:	d05c      	beq.n	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f108:	2b10      	cmp	r3, #16
 800f10a:	d05a      	beq.n	800f1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f10c:	e062      	b.n	800f1d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	6899      	ldr	r1, [r3, #8]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	f000 fc8b 	bl	800fa38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	609a      	str	r2, [r3, #8]
      break;
 800f13a:	e04f      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6818      	ldr	r0, [r3, #0]
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	6899      	ldr	r1, [r3, #8]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	685a      	ldr	r2, [r3, #4]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	f000 fc74 	bl	800fa38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	689a      	ldr	r2, [r3, #8]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f15e:	609a      	str	r2, [r3, #8]
      break;
 800f160:	e03c      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6818      	ldr	r0, [r3, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	6859      	ldr	r1, [r3, #4]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	461a      	mov	r2, r3
 800f170:	f000 fbe4 	bl	800f93c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2150      	movs	r1, #80	; 0x50
 800f17a:	4618      	mov	r0, r3
 800f17c:	f000 fc3e 	bl	800f9fc <TIM_ITRx_SetConfig>
      break;
 800f180:	e02c      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6818      	ldr	r0, [r3, #0]
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	6859      	ldr	r1, [r3, #4]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	461a      	mov	r2, r3
 800f190:	f000 fc03 	bl	800f99a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2160      	movs	r1, #96	; 0x60
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 fc2e 	bl	800f9fc <TIM_ITRx_SetConfig>
      break;
 800f1a0:	e01c      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6818      	ldr	r0, [r3, #0]
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	6859      	ldr	r1, [r3, #4]
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f000 fbc4 	bl	800f93c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2140      	movs	r1, #64	; 0x40
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f000 fc1e 	bl	800f9fc <TIM_ITRx_SetConfig>
      break;
 800f1c0:	e00c      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	f000 fc15 	bl	800f9fc <TIM_ITRx_SetConfig>
      break;
 800f1d2:	e003      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1d8:	e000      	b.n	800f1dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f1da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	ffceff88 	.word	0xffceff88
 800f1fc:	00100040 	.word	0x00100040
 800f200:	00100030 	.word	0x00100030
 800f204:	00100020 	.word	0x00100020

0800f208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a46      	ldr	r2, [pc, #280]	; (800f370 <TIM_Base_SetConfig+0x12c>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d013      	beq.n	800f284 <TIM_Base_SetConfig+0x40>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f262:	d00f      	beq.n	800f284 <TIM_Base_SetConfig+0x40>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a43      	ldr	r2, [pc, #268]	; (800f374 <TIM_Base_SetConfig+0x130>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00b      	beq.n	800f284 <TIM_Base_SetConfig+0x40>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a42      	ldr	r2, [pc, #264]	; (800f378 <TIM_Base_SetConfig+0x134>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d007      	beq.n	800f284 <TIM_Base_SetConfig+0x40>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a41      	ldr	r2, [pc, #260]	; (800f37c <TIM_Base_SetConfig+0x138>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d003      	beq.n	800f284 <TIM_Base_SetConfig+0x40>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a40      	ldr	r2, [pc, #256]	; (800f380 <TIM_Base_SetConfig+0x13c>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d108      	bne.n	800f296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	4313      	orrs	r3, r2
 800f294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a35      	ldr	r2, [pc, #212]	; (800f370 <TIM_Base_SetConfig+0x12c>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d01f      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2a4:	d01b      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a32      	ldr	r2, [pc, #200]	; (800f374 <TIM_Base_SetConfig+0x130>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d017      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a31      	ldr	r2, [pc, #196]	; (800f378 <TIM_Base_SetConfig+0x134>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d013      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a30      	ldr	r2, [pc, #192]	; (800f37c <TIM_Base_SetConfig+0x138>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d00f      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a2f      	ldr	r2, [pc, #188]	; (800f380 <TIM_Base_SetConfig+0x13c>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d00b      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a2e      	ldr	r2, [pc, #184]	; (800f384 <TIM_Base_SetConfig+0x140>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d007      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a2d      	ldr	r2, [pc, #180]	; (800f388 <TIM_Base_SetConfig+0x144>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d003      	beq.n	800f2de <TIM_Base_SetConfig+0x9a>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a2c      	ldr	r2, [pc, #176]	; (800f38c <TIM_Base_SetConfig+0x148>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d108      	bne.n	800f2f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	689a      	ldr	r2, [r3, #8]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a16      	ldr	r2, [pc, #88]	; (800f370 <TIM_Base_SetConfig+0x12c>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d00f      	beq.n	800f33c <TIM_Base_SetConfig+0xf8>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a18      	ldr	r2, [pc, #96]	; (800f380 <TIM_Base_SetConfig+0x13c>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d00b      	beq.n	800f33c <TIM_Base_SetConfig+0xf8>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a17      	ldr	r2, [pc, #92]	; (800f384 <TIM_Base_SetConfig+0x140>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d007      	beq.n	800f33c <TIM_Base_SetConfig+0xf8>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a16      	ldr	r2, [pc, #88]	; (800f388 <TIM_Base_SetConfig+0x144>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d003      	beq.n	800f33c <TIM_Base_SetConfig+0xf8>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a15      	ldr	r2, [pc, #84]	; (800f38c <TIM_Base_SetConfig+0x148>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d103      	bne.n	800f344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	691a      	ldr	r2, [r3, #16]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	f003 0301 	and.w	r3, r3, #1
 800f352:	2b01      	cmp	r3, #1
 800f354:	d105      	bne.n	800f362 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	691b      	ldr	r3, [r3, #16]
 800f35a:	f023 0201 	bic.w	r2, r3, #1
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	611a      	str	r2, [r3, #16]
  }
}
 800f362:	bf00      	nop
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	40010000 	.word	0x40010000
 800f374:	40000400 	.word	0x40000400
 800f378:	40000800 	.word	0x40000800
 800f37c:	40000c00 	.word	0x40000c00
 800f380:	40010400 	.word	0x40010400
 800f384:	40014000 	.word	0x40014000
 800f388:	40014400 	.word	0x40014400
 800f38c:	40014800 	.word	0x40014800

0800f390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	f023 0201 	bic.w	r2, r3, #1
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	4b37      	ldr	r3, [pc, #220]	; (800f498 <TIM_OC1_SetConfig+0x108>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f023 0303 	bic.w	r3, r3, #3
 800f3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	f023 0302 	bic.w	r3, r3, #2
 800f3d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a2d      	ldr	r2, [pc, #180]	; (800f49c <TIM_OC1_SetConfig+0x10c>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d00f      	beq.n	800f40c <TIM_OC1_SetConfig+0x7c>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a2c      	ldr	r2, [pc, #176]	; (800f4a0 <TIM_OC1_SetConfig+0x110>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d00b      	beq.n	800f40c <TIM_OC1_SetConfig+0x7c>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a2b      	ldr	r2, [pc, #172]	; (800f4a4 <TIM_OC1_SetConfig+0x114>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d007      	beq.n	800f40c <TIM_OC1_SetConfig+0x7c>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a2a      	ldr	r2, [pc, #168]	; (800f4a8 <TIM_OC1_SetConfig+0x118>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d003      	beq.n	800f40c <TIM_OC1_SetConfig+0x7c>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a29      	ldr	r2, [pc, #164]	; (800f4ac <TIM_OC1_SetConfig+0x11c>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d10c      	bne.n	800f426 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	f023 0308 	bic.w	r3, r3, #8
 800f412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	f023 0304 	bic.w	r3, r3, #4
 800f424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a1c      	ldr	r2, [pc, #112]	; (800f49c <TIM_OC1_SetConfig+0x10c>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d00f      	beq.n	800f44e <TIM_OC1_SetConfig+0xbe>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a1b      	ldr	r2, [pc, #108]	; (800f4a0 <TIM_OC1_SetConfig+0x110>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d00b      	beq.n	800f44e <TIM_OC1_SetConfig+0xbe>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a1a      	ldr	r2, [pc, #104]	; (800f4a4 <TIM_OC1_SetConfig+0x114>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d007      	beq.n	800f44e <TIM_OC1_SetConfig+0xbe>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a19      	ldr	r2, [pc, #100]	; (800f4a8 <TIM_OC1_SetConfig+0x118>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d003      	beq.n	800f44e <TIM_OC1_SetConfig+0xbe>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a18      	ldr	r2, [pc, #96]	; (800f4ac <TIM_OC1_SetConfig+0x11c>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d111      	bne.n	800f472 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	4313      	orrs	r3, r2
 800f466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	699b      	ldr	r3, [r3, #24]
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	4313      	orrs	r3, r2
 800f470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	693a      	ldr	r2, [r7, #16]
 800f476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	685a      	ldr	r2, [r3, #4]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	621a      	str	r2, [r3, #32]
}
 800f48c:	bf00      	nop
 800f48e:	371c      	adds	r7, #28
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr
 800f498:	fffeff8f 	.word	0xfffeff8f
 800f49c:	40010000 	.word	0x40010000
 800f4a0:	40010400 	.word	0x40010400
 800f4a4:	40014000 	.word	0x40014000
 800f4a8:	40014400 	.word	0x40014400
 800f4ac:	40014800 	.word	0x40014800

0800f4b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1b      	ldr	r3, [r3, #32]
 800f4be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a1b      	ldr	r3, [r3, #32]
 800f4c4:	f023 0210 	bic.w	r2, r3, #16
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	4b34      	ldr	r3, [pc, #208]	; (800f5ac <TIM_OC2_SetConfig+0xfc>)
 800f4dc:	4013      	ands	r3, r2
 800f4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	021b      	lsls	r3, r3, #8
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	f023 0320 	bic.w	r3, r3, #32
 800f4fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	697a      	ldr	r2, [r7, #20]
 800f504:	4313      	orrs	r3, r2
 800f506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a29      	ldr	r2, [pc, #164]	; (800f5b0 <TIM_OC2_SetConfig+0x100>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d003      	beq.n	800f518 <TIM_OC2_SetConfig+0x68>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a28      	ldr	r2, [pc, #160]	; (800f5b4 <TIM_OC2_SetConfig+0x104>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d10d      	bne.n	800f534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f51e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	4313      	orrs	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f532:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a1e      	ldr	r2, [pc, #120]	; (800f5b0 <TIM_OC2_SetConfig+0x100>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d00f      	beq.n	800f55c <TIM_OC2_SetConfig+0xac>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a1d      	ldr	r2, [pc, #116]	; (800f5b4 <TIM_OC2_SetConfig+0x104>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d00b      	beq.n	800f55c <TIM_OC2_SetConfig+0xac>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a1c      	ldr	r2, [pc, #112]	; (800f5b8 <TIM_OC2_SetConfig+0x108>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d007      	beq.n	800f55c <TIM_OC2_SetConfig+0xac>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a1b      	ldr	r2, [pc, #108]	; (800f5bc <TIM_OC2_SetConfig+0x10c>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d003      	beq.n	800f55c <TIM_OC2_SetConfig+0xac>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a1a      	ldr	r2, [pc, #104]	; (800f5c0 <TIM_OC2_SetConfig+0x110>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d113      	bne.n	800f584 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f56a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	693a      	ldr	r2, [r7, #16]
 800f574:	4313      	orrs	r3, r2
 800f576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	699b      	ldr	r3, [r3, #24]
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	4313      	orrs	r3, r2
 800f582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	621a      	str	r2, [r3, #32]
}
 800f59e:	bf00      	nop
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	feff8fff 	.word	0xfeff8fff
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40010400 	.word	0x40010400
 800f5b8:	40014000 	.word	0x40014000
 800f5bc:	40014400 	.word	0x40014400
 800f5c0:	40014800 	.word	0x40014800

0800f5c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	4b33      	ldr	r3, [pc, #204]	; (800f6bc <TIM_OC3_SetConfig+0xf8>)
 800f5f0:	4013      	ands	r3, r2
 800f5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f023 0303 	bic.w	r3, r3, #3
 800f5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	4313      	orrs	r3, r2
 800f604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f60c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	021b      	lsls	r3, r3, #8
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	4313      	orrs	r3, r2
 800f618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a28      	ldr	r2, [pc, #160]	; (800f6c0 <TIM_OC3_SetConfig+0xfc>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d003      	beq.n	800f62a <TIM_OC3_SetConfig+0x66>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a27      	ldr	r2, [pc, #156]	; (800f6c4 <TIM_OC3_SetConfig+0x100>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d10d      	bne.n	800f646 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	021b      	lsls	r3, r3, #8
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a1d      	ldr	r2, [pc, #116]	; (800f6c0 <TIM_OC3_SetConfig+0xfc>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00f      	beq.n	800f66e <TIM_OC3_SetConfig+0xaa>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a1c      	ldr	r2, [pc, #112]	; (800f6c4 <TIM_OC3_SetConfig+0x100>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d00b      	beq.n	800f66e <TIM_OC3_SetConfig+0xaa>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a1b      	ldr	r2, [pc, #108]	; (800f6c8 <TIM_OC3_SetConfig+0x104>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d007      	beq.n	800f66e <TIM_OC3_SetConfig+0xaa>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a1a      	ldr	r2, [pc, #104]	; (800f6cc <TIM_OC3_SetConfig+0x108>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d003      	beq.n	800f66e <TIM_OC3_SetConfig+0xaa>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a19      	ldr	r2, [pc, #100]	; (800f6d0 <TIM_OC3_SetConfig+0x10c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d113      	bne.n	800f696 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f67c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	695b      	ldr	r3, [r3, #20]
 800f682:	011b      	lsls	r3, r3, #4
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	4313      	orrs	r3, r2
 800f688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	011b      	lsls	r3, r3, #4
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	4313      	orrs	r3, r2
 800f694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	621a      	str	r2, [r3, #32]
}
 800f6b0:	bf00      	nop
 800f6b2:	371c      	adds	r7, #28
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	fffeff8f 	.word	0xfffeff8f
 800f6c0:	40010000 	.word	0x40010000
 800f6c4:	40010400 	.word	0x40010400
 800f6c8:	40014000 	.word	0x40014000
 800f6cc:	40014400 	.word	0x40014400
 800f6d0:	40014800 	.word	0x40014800

0800f6d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	4b24      	ldr	r3, [pc, #144]	; (800f790 <TIM_OC4_SetConfig+0xbc>)
 800f700:	4013      	ands	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	68fa      	ldr	r2, [r7, #12]
 800f714:	4313      	orrs	r3, r2
 800f716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f71e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	031b      	lsls	r3, r3, #12
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	4313      	orrs	r3, r2
 800f72a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a19      	ldr	r2, [pc, #100]	; (800f794 <TIM_OC4_SetConfig+0xc0>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d00f      	beq.n	800f754 <TIM_OC4_SetConfig+0x80>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4a18      	ldr	r2, [pc, #96]	; (800f798 <TIM_OC4_SetConfig+0xc4>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d00b      	beq.n	800f754 <TIM_OC4_SetConfig+0x80>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4a17      	ldr	r2, [pc, #92]	; (800f79c <TIM_OC4_SetConfig+0xc8>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d007      	beq.n	800f754 <TIM_OC4_SetConfig+0x80>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4a16      	ldr	r2, [pc, #88]	; (800f7a0 <TIM_OC4_SetConfig+0xcc>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d003      	beq.n	800f754 <TIM_OC4_SetConfig+0x80>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4a15      	ldr	r2, [pc, #84]	; (800f7a4 <TIM_OC4_SetConfig+0xd0>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d109      	bne.n	800f768 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f75a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	019b      	lsls	r3, r3, #6
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	4313      	orrs	r3, r2
 800f766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	621a      	str	r2, [r3, #32]
}
 800f782:	bf00      	nop
 800f784:	371c      	adds	r7, #28
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	feff8fff 	.word	0xfeff8fff
 800f794:	40010000 	.word	0x40010000
 800f798:	40010400 	.word	0x40010400
 800f79c:	40014000 	.word	0x40014000
 800f7a0:	40014400 	.word	0x40014400
 800f7a4:	40014800 	.word	0x40014800

0800f7a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b087      	sub	sp, #28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a1b      	ldr	r3, [r3, #32]
 800f7b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	4b21      	ldr	r3, [pc, #132]	; (800f858 <TIM_OC5_SetConfig+0xb0>)
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f7e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	041b      	lsls	r3, r3, #16
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a18      	ldr	r2, [pc, #96]	; (800f85c <TIM_OC5_SetConfig+0xb4>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d00f      	beq.n	800f81e <TIM_OC5_SetConfig+0x76>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a17      	ldr	r2, [pc, #92]	; (800f860 <TIM_OC5_SetConfig+0xb8>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d00b      	beq.n	800f81e <TIM_OC5_SetConfig+0x76>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a16      	ldr	r2, [pc, #88]	; (800f864 <TIM_OC5_SetConfig+0xbc>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d007      	beq.n	800f81e <TIM_OC5_SetConfig+0x76>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a15      	ldr	r2, [pc, #84]	; (800f868 <TIM_OC5_SetConfig+0xc0>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d003      	beq.n	800f81e <TIM_OC5_SetConfig+0x76>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a14      	ldr	r2, [pc, #80]	; (800f86c <TIM_OC5_SetConfig+0xc4>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d109      	bne.n	800f832 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	695b      	ldr	r3, [r3, #20]
 800f82a:	021b      	lsls	r3, r3, #8
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	4313      	orrs	r3, r2
 800f830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	697a      	ldr	r2, [r7, #20]
 800f836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	621a      	str	r2, [r3, #32]
}
 800f84c:	bf00      	nop
 800f84e:	371c      	adds	r7, #28
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	fffeff8f 	.word	0xfffeff8f
 800f85c:	40010000 	.word	0x40010000
 800f860:	40010400 	.word	0x40010400
 800f864:	40014000 	.word	0x40014000
 800f868:	40014400 	.word	0x40014400
 800f86c:	40014800 	.word	0x40014800

0800f870 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4b22      	ldr	r3, [pc, #136]	; (800f924 <TIM_OC6_SetConfig+0xb4>)
 800f89c:	4013      	ands	r3, r2
 800f89e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	021b      	lsls	r3, r3, #8
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	051b      	lsls	r3, r3, #20
 800f8ba:	693a      	ldr	r2, [r7, #16]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a19      	ldr	r2, [pc, #100]	; (800f928 <TIM_OC6_SetConfig+0xb8>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d00f      	beq.n	800f8e8 <TIM_OC6_SetConfig+0x78>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a18      	ldr	r2, [pc, #96]	; (800f92c <TIM_OC6_SetConfig+0xbc>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d00b      	beq.n	800f8e8 <TIM_OC6_SetConfig+0x78>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a17      	ldr	r2, [pc, #92]	; (800f930 <TIM_OC6_SetConfig+0xc0>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d007      	beq.n	800f8e8 <TIM_OC6_SetConfig+0x78>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a16      	ldr	r2, [pc, #88]	; (800f934 <TIM_OC6_SetConfig+0xc4>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d003      	beq.n	800f8e8 <TIM_OC6_SetConfig+0x78>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a15      	ldr	r2, [pc, #84]	; (800f938 <TIM_OC6_SetConfig+0xc8>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d109      	bne.n	800f8fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	695b      	ldr	r3, [r3, #20]
 800f8f4:	029b      	lsls	r3, r3, #10
 800f8f6:	697a      	ldr	r2, [r7, #20]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	685a      	ldr	r2, [r3, #4]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	693a      	ldr	r2, [r7, #16]
 800f914:	621a      	str	r2, [r3, #32]
}
 800f916:	bf00      	nop
 800f918:	371c      	adds	r7, #28
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	feff8fff 	.word	0xfeff8fff
 800f928:	40010000 	.word	0x40010000
 800f92c:	40010400 	.word	0x40010400
 800f930:	40014000 	.word	0x40014000
 800f934:	40014400 	.word	0x40014400
 800f938:	40014800 	.word	0x40014800

0800f93c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b087      	sub	sp, #28
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	f023 0201 	bic.w	r2, r3, #1
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	011b      	lsls	r3, r3, #4
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	4313      	orrs	r3, r2
 800f970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f023 030a 	bic.w	r3, r3, #10
 800f978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	4313      	orrs	r3, r2
 800f980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	621a      	str	r2, [r3, #32]
}
 800f98e:	bf00      	nop
 800f990:	371c      	adds	r7, #28
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b087      	sub	sp, #28
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	60f8      	str	r0, [r7, #12]
 800f9a2:	60b9      	str	r1, [r7, #8]
 800f9a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6a1b      	ldr	r3, [r3, #32]
 800f9b0:	f023 0210 	bic.w	r2, r3, #16
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	699b      	ldr	r3, [r3, #24]
 800f9bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f9c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	031b      	lsls	r3, r3, #12
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f9d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	697a      	ldr	r2, [r7, #20]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	621a      	str	r2, [r3, #32]
}
 800f9ee:	bf00      	nop
 800f9f0:	371c      	adds	r7, #28
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
	...

0800f9fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4b09      	ldr	r3, [pc, #36]	; (800fa34 <TIM_ITRx_SetConfig+0x38>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	f043 0307 	orr.w	r3, r3, #7
 800fa1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	609a      	str	r2, [r3, #8]
}
 800fa26:	bf00      	nop
 800fa28:	3714      	adds	r7, #20
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	ffcfff8f 	.word	0xffcfff8f

0800fa38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fa52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	021a      	lsls	r2, r3, #8
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	431a      	orrs	r2, r3
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	609a      	str	r2, [r3, #8]
}
 800fa6c:	bf00      	nop
 800fa6e:	371c      	adds	r7, #28
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f003 031f 	and.w	r3, r3, #31
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6a1a      	ldr	r2, [r3, #32]
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	43db      	mvns	r3, r3
 800fa9a:	401a      	ands	r2, r3
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6a1a      	ldr	r2, [r3, #32]
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f003 031f 	and.w	r3, r3, #31
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	fa01 f303 	lsl.w	r3, r1, r3
 800fab0:	431a      	orrs	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	621a      	str	r2, [r3, #32]
}
 800fab6:	bf00      	nop
 800fab8:	371c      	adds	r7, #28
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
	...

0800fac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d101      	bne.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fad8:	2302      	movs	r3, #2
 800fada:	e06d      	b.n	800fbb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2202      	movs	r2, #2
 800fae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a30      	ldr	r2, [pc, #192]	; (800fbc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d004      	beq.n	800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a2f      	ldr	r2, [pc, #188]	; (800fbc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d108      	bne.n	800fb22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fb16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a20      	ldr	r2, [pc, #128]	; (800fbc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d022      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb4e:	d01d      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a1d      	ldr	r2, [pc, #116]	; (800fbcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d018      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4a1c      	ldr	r2, [pc, #112]	; (800fbd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d013      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a1a      	ldr	r2, [pc, #104]	; (800fbd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d00e      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a15      	ldr	r2, [pc, #84]	; (800fbc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d009      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a16      	ldr	r2, [pc, #88]	; (800fbd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d004      	beq.n	800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a15      	ldr	r2, [pc, #84]	; (800fbdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d10c      	bne.n	800fba6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3714      	adds	r7, #20
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	40010000 	.word	0x40010000
 800fbc8:	40010400 	.word	0x40010400
 800fbcc:	40000400 	.word	0x40000400
 800fbd0:	40000800 	.word	0x40000800
 800fbd4:	40000c00 	.word	0x40000c00
 800fbd8:	40001800 	.word	0x40001800
 800fbdc:	40014000 	.word	0x40014000

0800fbe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fbea:	2300      	movs	r3, #0
 800fbec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d101      	bne.n	800fbfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	e065      	b.n	800fcc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	4313      	orrs	r3, r2
 800fc56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc62:	4313      	orrs	r3, r2
 800fc64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	041b      	lsls	r3, r3, #16
 800fc72:	4313      	orrs	r3, r2
 800fc74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a16      	ldr	r2, [pc, #88]	; (800fcd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d004      	beq.n	800fc8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a14      	ldr	r2, [pc, #80]	; (800fcd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d115      	bne.n	800fcb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc94:	051b      	lsls	r3, r3, #20
 800fc96:	4313      	orrs	r3, r2
 800fc98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	69db      	ldr	r3, [r3, #28]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	6a1b      	ldr	r3, [r3, #32]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr
 800fcd4:	40010000 	.word	0x40010000
 800fcd8:	40010400 	.word	0x40010400

0800fcdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e042      	b.n	800fdb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d106      	bne.n	800fd42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7f3 fc49 	bl	80035d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2224      	movs	r2, #36	; 0x24
 800fd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f022 0201 	bic.w	r2, r2, #1
 800fd58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d002      	beq.n	800fd68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f001 fb8c 	bl	8011480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fe21 	bl	80109b0 <UART_SetConfig>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d101      	bne.n	800fd78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fd74:	2301      	movs	r3, #1
 800fd76:	e01b      	b.n	800fdb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f042 0201 	orr.w	r2, r2, #1
 800fda6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f001 fc0b 	bl	80115c4 <UART_CheckIdleState>
 800fdae:	4603      	mov	r3, r0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08a      	sub	sp, #40	; 0x28
 800fdbc:	af02      	add	r7, sp, #8
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdce:	2b20      	cmp	r3, #32
 800fdd0:	d17b      	bne.n	800feca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <HAL_UART_Transmit+0x26>
 800fdd8:	88fb      	ldrh	r3, [r7, #6]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fdde:	2301      	movs	r3, #1
 800fde0:	e074      	b.n	800fecc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2221      	movs	r2, #33	; 0x21
 800fdee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fdf2:	f7f3 ff63 	bl	8003cbc <HAL_GetTick>
 800fdf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	88fa      	ldrh	r2, [r7, #6]
 800fdfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	88fa      	ldrh	r2, [r7, #6]
 800fe04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe10:	d108      	bne.n	800fe24 <HAL_UART_Transmit+0x6c>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d104      	bne.n	800fe24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	e003      	b.n	800fe2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fe2c:	e030      	b.n	800fe90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2200      	movs	r2, #0
 800fe36:	2180      	movs	r1, #128	; 0x80
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	f001 fc6d 	bl	8011718 <UART_WaitOnFlagUntilTimeout>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d005      	beq.n	800fe50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2220      	movs	r2, #32
 800fe48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fe4c:	2303      	movs	r3, #3
 800fe4e:	e03d      	b.n	800fecc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10b      	bne.n	800fe6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	3302      	adds	r3, #2
 800fe6a:	61bb      	str	r3, [r7, #24]
 800fe6c:	e007      	b.n	800fe7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	781a      	ldrb	r2, [r3, #0]
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	3b01      	subs	r3, #1
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1c8      	bne.n	800fe2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2200      	movs	r2, #0
 800fea4:	2140      	movs	r1, #64	; 0x40
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f001 fc36 	bl	8011718 <UART_WaitOnFlagUntilTimeout>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d005      	beq.n	800febe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2220      	movs	r2, #32
 800feb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800feba:	2303      	movs	r3, #3
 800febc:	e006      	b.n	800fecc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2220      	movs	r2, #32
 800fec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	e000      	b.n	800fecc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800feca:	2302      	movs	r3, #2
  }
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3720      	adds	r7, #32
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08a      	sub	sp, #40	; 0x28
 800fed8:	af02      	add	r7, sp, #8
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	603b      	str	r3, [r7, #0]
 800fee0:	4613      	mov	r3, r2
 800fee2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feea:	2b20      	cmp	r3, #32
 800feec:	f040 80b5 	bne.w	801005a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d002      	beq.n	800fefc <HAL_UART_Receive+0x28>
 800fef6:	88fb      	ldrh	r3, [r7, #6]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	e0ad      	b.n	801005c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2222      	movs	r2, #34	; 0x22
 800ff0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2200      	movs	r2, #0
 800ff14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff16:	f7f3 fed1 	bl	8003cbc <HAL_GetTick>
 800ff1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	88fa      	ldrh	r2, [r7, #6]
 800ff20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	88fa      	ldrh	r2, [r7, #6]
 800ff28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff34:	d10e      	bne.n	800ff54 <HAL_UART_Receive+0x80>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d105      	bne.n	800ff4a <HAL_UART_Receive+0x76>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ff44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff48:	e02d      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	22ff      	movs	r2, #255	; 0xff
 800ff4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff52:	e028      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d10d      	bne.n	800ff78 <HAL_UART_Receive+0xa4>
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d104      	bne.n	800ff6e <HAL_UART_Receive+0x9a>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	22ff      	movs	r2, #255	; 0xff
 800ff68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff6c:	e01b      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	227f      	movs	r2, #127	; 0x7f
 800ff72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff76:	e016      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff80:	d10d      	bne.n	800ff9e <HAL_UART_Receive+0xca>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d104      	bne.n	800ff94 <HAL_UART_Receive+0xc0>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	227f      	movs	r2, #127	; 0x7f
 800ff8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff92:	e008      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	223f      	movs	r2, #63	; 0x3f
 800ff98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff9c:	e003      	b.n	800ffa6 <HAL_UART_Receive+0xd2>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffb6:	d108      	bne.n	800ffca <HAL_UART_Receive+0xf6>
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d104      	bne.n	800ffca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	61bb      	str	r3, [r7, #24]
 800ffc8:	e003      	b.n	800ffd2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ffd2:	e036      	b.n	8010042 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	2120      	movs	r1, #32
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f001 fb9a 	bl	8011718 <UART_WaitOnFlagUntilTimeout>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d005      	beq.n	800fff6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2220      	movs	r2, #32
 800ffee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e032      	b.n	801005c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10c      	bne.n	8010016 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	b29a      	uxth	r2, r3
 8010004:	8a7b      	ldrh	r3, [r7, #18]
 8010006:	4013      	ands	r3, r2
 8010008:	b29a      	uxth	r2, r3
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	3302      	adds	r3, #2
 8010012:	61bb      	str	r3, [r7, #24]
 8010014:	e00c      	b.n	8010030 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	b2da      	uxtb	r2, r3
 801001e:	8a7b      	ldrh	r3, [r7, #18]
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4013      	ands	r3, r2
 8010024:	b2da      	uxtb	r2, r3
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	3301      	adds	r3, #1
 801002e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010036:	b29b      	uxth	r3, r3
 8010038:	3b01      	subs	r3, #1
 801003a:	b29a      	uxth	r2, r3
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010048:	b29b      	uxth	r3, r3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d1c2      	bne.n	800ffd4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2220      	movs	r2, #32
 8010052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	e000      	b.n	801005c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801005a:	2302      	movs	r3, #2
  }
}
 801005c:	4618      	mov	r0, r3
 801005e:	3720      	adds	r7, #32
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08a      	sub	sp, #40	; 0x28
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	4613      	mov	r3, r2
 8010070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010078:	2b20      	cmp	r3, #32
 801007a:	d137      	bne.n	80100ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d002      	beq.n	8010088 <HAL_UART_Receive_IT+0x24>
 8010082:	88fb      	ldrh	r3, [r7, #6]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010088:	2301      	movs	r3, #1
 801008a:	e030      	b.n	80100ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a18      	ldr	r2, [pc, #96]	; (80100f8 <HAL_UART_Receive_IT+0x94>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d01f      	beq.n	80100dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d018      	beq.n	80100dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	e853 3f00 	ldrex	r3, [r3]
 80100b6:	613b      	str	r3, [r7, #16]
   return(result);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80100be:	627b      	str	r3, [r7, #36]	; 0x24
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	461a      	mov	r2, r3
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	623b      	str	r3, [r7, #32]
 80100ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100cc:	69f9      	ldr	r1, [r7, #28]
 80100ce:	6a3a      	ldr	r2, [r7, #32]
 80100d0:	e841 2300 	strex	r3, r2, [r1]
 80100d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1e6      	bne.n	80100aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80100dc:	88fb      	ldrh	r3, [r7, #6]
 80100de:	461a      	mov	r2, r3
 80100e0:	68b9      	ldr	r1, [r7, #8]
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f001 fb86 	bl	80117f4 <UART_Start_Receive_IT>
 80100e8:	4603      	mov	r3, r0
 80100ea:	e000      	b.n	80100ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80100ec:	2302      	movs	r3, #2
  }
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3728      	adds	r7, #40	; 0x28
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	58000c00 	.word	0x58000c00

080100fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08a      	sub	sp, #40	; 0x28
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	4613      	mov	r3, r2
 8010108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010110:	2b20      	cmp	r3, #32
 8010112:	d167      	bne.n	80101e4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <HAL_UART_Transmit_DMA+0x24>
 801011a:	88fb      	ldrh	r3, [r7, #6]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	e060      	b.n	80101e6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	88fa      	ldrh	r2, [r7, #6]
 801012e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	88fa      	ldrh	r2, [r7, #6]
 8010136:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2221      	movs	r2, #33	; 0x21
 8010146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801014e:	2b00      	cmp	r3, #0
 8010150:	d028      	beq.n	80101a4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010156:	4a26      	ldr	r2, [pc, #152]	; (80101f0 <HAL_UART_Transmit_DMA+0xf4>)
 8010158:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801015e:	4a25      	ldr	r2, [pc, #148]	; (80101f4 <HAL_UART_Transmit_DMA+0xf8>)
 8010160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010166:	4a24      	ldr	r2, [pc, #144]	; (80101f8 <HAL_UART_Transmit_DMA+0xfc>)
 8010168:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801016e:	2200      	movs	r2, #0
 8010170:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801017a:	4619      	mov	r1, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3328      	adds	r3, #40	; 0x28
 8010182:	461a      	mov	r2, r3
 8010184:	88fb      	ldrh	r3, [r7, #6]
 8010186:	f7f6 fa1d 	bl	80065c4 <HAL_DMA_Start_IT>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d009      	beq.n	80101a4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2210      	movs	r2, #16
 8010194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2220      	movs	r2, #32
 801019c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	e020      	b.n	80101e6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2240      	movs	r2, #64	; 0x40
 80101aa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3308      	adds	r3, #8
 80101b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	e853 3f00 	ldrex	r3, [r3]
 80101ba:	613b      	str	r3, [r7, #16]
   return(result);
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	3308      	adds	r3, #8
 80101ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101cc:	623a      	str	r2, [r7, #32]
 80101ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d0:	69f9      	ldr	r1, [r7, #28]
 80101d2:	6a3a      	ldr	r2, [r7, #32]
 80101d4:	e841 2300 	strex	r3, r2, [r1]
 80101d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1e5      	bne.n	80101ac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	e000      	b.n	80101e6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80101e4:	2302      	movs	r3, #2
  }
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3728      	adds	r7, #40	; 0x28
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	08011b89 	.word	0x08011b89
 80101f4:	08011c1f 	.word	0x08011c1f
 80101f8:	08011c3b 	.word	0x08011c3b

080101fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b0ba      	sub	sp, #232	; 0xe8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	69db      	ldr	r3, [r3, #28]
 801020a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010222:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010226:	f640 030f 	movw	r3, #2063	; 0x80f
 801022a:	4013      	ands	r3, r2
 801022c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010234:	2b00      	cmp	r3, #0
 8010236:	d11b      	bne.n	8010270 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801023c:	f003 0320 	and.w	r3, r3, #32
 8010240:	2b00      	cmp	r3, #0
 8010242:	d015      	beq.n	8010270 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010248:	f003 0320 	and.w	r3, r3, #32
 801024c:	2b00      	cmp	r3, #0
 801024e:	d105      	bne.n	801025c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010258:	2b00      	cmp	r3, #0
 801025a:	d009      	beq.n	8010270 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 8377 	beq.w	8010954 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	4798      	blx	r3
      }
      return;
 801026e:	e371      	b.n	8010954 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 8123 	beq.w	80104c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801027a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801027e:	4b8d      	ldr	r3, [pc, #564]	; (80104b4 <HAL_UART_IRQHandler+0x2b8>)
 8010280:	4013      	ands	r3, r2
 8010282:	2b00      	cmp	r3, #0
 8010284:	d106      	bne.n	8010294 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801028a:	4b8b      	ldr	r3, [pc, #556]	; (80104b8 <HAL_UART_IRQHandler+0x2bc>)
 801028c:	4013      	ands	r3, r2
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 8116 	beq.w	80104c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010298:	f003 0301 	and.w	r3, r3, #1
 801029c:	2b00      	cmp	r3, #0
 801029e:	d011      	beq.n	80102c4 <HAL_UART_IRQHandler+0xc8>
 80102a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00b      	beq.n	80102c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2201      	movs	r2, #1
 80102b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ba:	f043 0201 	orr.w	r2, r3, #1
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102c8:	f003 0302 	and.w	r3, r3, #2
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d011      	beq.n	80102f4 <HAL_UART_IRQHandler+0xf8>
 80102d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102d4:	f003 0301 	and.w	r3, r3, #1
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00b      	beq.n	80102f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2202      	movs	r2, #2
 80102e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ea:	f043 0204 	orr.w	r2, r3, #4
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102f8:	f003 0304 	and.w	r3, r3, #4
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d011      	beq.n	8010324 <HAL_UART_IRQHandler+0x128>
 8010300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010304:	f003 0301 	and.w	r3, r3, #1
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00b      	beq.n	8010324 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2204      	movs	r2, #4
 8010312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801031a:	f043 0202 	orr.w	r2, r3, #2
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010328:	f003 0308 	and.w	r3, r3, #8
 801032c:	2b00      	cmp	r3, #0
 801032e:	d017      	beq.n	8010360 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010334:	f003 0320 	and.w	r3, r3, #32
 8010338:	2b00      	cmp	r3, #0
 801033a:	d105      	bne.n	8010348 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801033c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010340:	4b5c      	ldr	r3, [pc, #368]	; (80104b4 <HAL_UART_IRQHandler+0x2b8>)
 8010342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00b      	beq.n	8010360 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2208      	movs	r2, #8
 801034e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010356:	f043 0208 	orr.w	r2, r3, #8
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010368:	2b00      	cmp	r3, #0
 801036a:	d012      	beq.n	8010392 <HAL_UART_IRQHandler+0x196>
 801036c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00c      	beq.n	8010392 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010388:	f043 0220 	orr.w	r2, r3, #32
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 82dd 	beq.w	8010958 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801039e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103a2:	f003 0320 	and.w	r3, r3, #32
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d013      	beq.n	80103d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103ae:	f003 0320 	and.w	r3, r3, #32
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d105      	bne.n	80103c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d007      	beq.n	80103d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e6:	2b40      	cmp	r3, #64	; 0x40
 80103e8:	d005      	beq.n	80103f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80103ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d054      	beq.n	80104a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f001 fb60 	bl	8011abc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010406:	2b40      	cmp	r3, #64	; 0x40
 8010408:	d146      	bne.n	8010498 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3308      	adds	r3, #8
 8010410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010418:	e853 3f00 	ldrex	r3, [r3]
 801041c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3308      	adds	r3, #8
 8010432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801043a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010446:	e841 2300 	strex	r3, r2, [r1]
 801044a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801044e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1d9      	bne.n	801040a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801045c:	2b00      	cmp	r3, #0
 801045e:	d017      	beq.n	8010490 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010466:	4a15      	ldr	r2, [pc, #84]	; (80104bc <HAL_UART_IRQHandler+0x2c0>)
 8010468:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010470:	4618      	mov	r0, r3
 8010472:	f7f6 fe2f 	bl	80070d4 <HAL_DMA_Abort_IT>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d019      	beq.n	80104b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801048a:	4610      	mov	r0, r2
 801048c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801048e:	e00f      	b.n	80104b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fa77 	bl	8010984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010496:	e00b      	b.n	80104b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 fa73 	bl	8010984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049e:	e007      	b.n	80104b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fa6f 	bl	8010984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80104ae:	e253      	b.n	8010958 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104b0:	bf00      	nop
    return;
 80104b2:	e251      	b.n	8010958 <HAL_UART_IRQHandler+0x75c>
 80104b4:	10000001 	.word	0x10000001
 80104b8:	04000120 	.word	0x04000120
 80104bc:	08011cbb 	.word	0x08011cbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	f040 81e7 	bne.w	8010898 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104ce:	f003 0310 	and.w	r3, r3, #16
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 81e0 	beq.w	8010898 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104dc:	f003 0310 	and.w	r3, r3, #16
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 81d9 	beq.w	8010898 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2210      	movs	r2, #16
 80104ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104f8:	2b40      	cmp	r3, #64	; 0x40
 80104fa:	f040 8151 	bne.w	80107a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4a96      	ldr	r2, [pc, #600]	; (8010760 <HAL_UART_IRQHandler+0x564>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d068      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a93      	ldr	r2, [pc, #588]	; (8010764 <HAL_UART_IRQHandler+0x568>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d061      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a91      	ldr	r2, [pc, #580]	; (8010768 <HAL_UART_IRQHandler+0x56c>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d05a      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a8e      	ldr	r2, [pc, #568]	; (801076c <HAL_UART_IRQHandler+0x570>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d053      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a8c      	ldr	r2, [pc, #560]	; (8010770 <HAL_UART_IRQHandler+0x574>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d04c      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a89      	ldr	r2, [pc, #548]	; (8010774 <HAL_UART_IRQHandler+0x578>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d045      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a87      	ldr	r2, [pc, #540]	; (8010778 <HAL_UART_IRQHandler+0x57c>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d03e      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4a84      	ldr	r2, [pc, #528]	; (801077c <HAL_UART_IRQHandler+0x580>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d037      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a82      	ldr	r2, [pc, #520]	; (8010780 <HAL_UART_IRQHandler+0x584>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d030      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a7f      	ldr	r2, [pc, #508]	; (8010784 <HAL_UART_IRQHandler+0x588>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d029      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a7d      	ldr	r2, [pc, #500]	; (8010788 <HAL_UART_IRQHandler+0x58c>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d022      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a7a      	ldr	r2, [pc, #488]	; (801078c <HAL_UART_IRQHandler+0x590>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d01b      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4a78      	ldr	r2, [pc, #480]	; (8010790 <HAL_UART_IRQHandler+0x594>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d014      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a75      	ldr	r2, [pc, #468]	; (8010794 <HAL_UART_IRQHandler+0x598>)
 80105be:	4293      	cmp	r3, r2
 80105c0:	d00d      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a73      	ldr	r2, [pc, #460]	; (8010798 <HAL_UART_IRQHandler+0x59c>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d006      	beq.n	80105de <HAL_UART_IRQHandler+0x3e2>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a70      	ldr	r2, [pc, #448]	; (801079c <HAL_UART_IRQHandler+0x5a0>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d106      	bne.n	80105ec <HAL_UART_IRQHandler+0x3f0>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	e005      	b.n	80105f8 <HAL_UART_IRQHandler+0x3fc>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80105fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 81ab 	beq.w	801095c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801060c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010610:	429a      	cmp	r2, r3
 8010612:	f080 81a3 	bcs.w	801095c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801061c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010626:	69db      	ldr	r3, [r3, #28]
 8010628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801062c:	f000 8087 	beq.w	801073e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801063c:	e853 3f00 	ldrex	r3, [r3]
 8010640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801064c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	461a      	mov	r2, r3
 8010656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801065a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801065e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801066a:	e841 2300 	strex	r3, r2, [r1]
 801066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1da      	bne.n	8010630 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3308      	adds	r3, #8
 8010680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010684:	e853 3f00 	ldrex	r3, [r3]
 8010688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801068a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801068c:	f023 0301 	bic.w	r3, r3, #1
 8010690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3308      	adds	r3, #8
 801069a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801069e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80106a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80106a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106aa:	e841 2300 	strex	r3, r2, [r1]
 80106ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80106b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1e1      	bne.n	801067a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3308      	adds	r3, #8
 80106bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3308      	adds	r3, #8
 80106d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80106da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80106dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80106e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80106e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e3      	bne.n	80106b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2220      	movs	r2, #32
 80106f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010704:	e853 3f00 	ldrex	r3, [r3]
 8010708:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801070a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801070c:	f023 0310 	bic.w	r3, r3, #16
 8010710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	461a      	mov	r2, r3
 801071a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801071e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010720:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010722:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010726:	e841 2300 	strex	r3, r2, [r1]
 801072a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801072c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1e4      	bne.n	80106fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010738:	4618      	mov	r0, r3
 801073a:	f7f6 f9ad 	bl	8006a98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2202      	movs	r2, #2
 8010742:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010750:	b29b      	uxth	r3, r3
 8010752:	1ad3      	subs	r3, r2, r3
 8010754:	b29b      	uxth	r3, r3
 8010756:	4619      	mov	r1, r3
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 f91d 	bl	8010998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801075e:	e0fd      	b.n	801095c <HAL_UART_IRQHandler+0x760>
 8010760:	40020010 	.word	0x40020010
 8010764:	40020028 	.word	0x40020028
 8010768:	40020040 	.word	0x40020040
 801076c:	40020058 	.word	0x40020058
 8010770:	40020070 	.word	0x40020070
 8010774:	40020088 	.word	0x40020088
 8010778:	400200a0 	.word	0x400200a0
 801077c:	400200b8 	.word	0x400200b8
 8010780:	40020410 	.word	0x40020410
 8010784:	40020428 	.word	0x40020428
 8010788:	40020440 	.word	0x40020440
 801078c:	40020458 	.word	0x40020458
 8010790:	40020470 	.word	0x40020470
 8010794:	40020488 	.word	0x40020488
 8010798:	400204a0 	.word	0x400204a0
 801079c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 80cf 	beq.w	8010960 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80107c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f000 80ca 	beq.w	8010960 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d4:	e853 3f00 	ldrex	r3, [r3]
 80107d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80107e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	461a      	mov	r2, r3
 80107ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107ee:	647b      	str	r3, [r7, #68]	; 0x44
 80107f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107f6:	e841 2300 	strex	r3, r2, [r1]
 80107fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1e4      	bne.n	80107cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	3308      	adds	r3, #8
 8010808:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080c:	e853 3f00 	ldrex	r3, [r3]
 8010810:	623b      	str	r3, [r7, #32]
   return(result);
 8010812:	6a3a      	ldr	r2, [r7, #32]
 8010814:	4b55      	ldr	r3, [pc, #340]	; (801096c <HAL_UART_IRQHandler+0x770>)
 8010816:	4013      	ands	r3, r2
 8010818:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	3308      	adds	r3, #8
 8010822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010826:	633a      	str	r2, [r7, #48]	; 0x30
 8010828:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801082a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082e:	e841 2300 	strex	r3, r2, [r1]
 8010832:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1e3      	bne.n	8010802 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2220      	movs	r2, #32
 801083e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	e853 3f00 	ldrex	r3, [r3]
 801085a:	60fb      	str	r3, [r7, #12]
   return(result);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f023 0310 	bic.w	r3, r3, #16
 8010862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010874:	69b9      	ldr	r1, [r7, #24]
 8010876:	69fa      	ldr	r2, [r7, #28]
 8010878:	e841 2300 	strex	r3, r2, [r1]
 801087c:	617b      	str	r3, [r7, #20]
   return(result);
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1e4      	bne.n	801084e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2202      	movs	r2, #2
 8010888:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801088a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801088e:	4619      	mov	r1, r3
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f000 f881 	bl	8010998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010896:	e063      	b.n	8010960 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801089c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00e      	beq.n	80108c2 <HAL_UART_IRQHandler+0x6c6>
 80108a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d008      	beq.n	80108c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80108b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f001 ff5a 	bl	8012774 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108c0:	e051      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80108c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d014      	beq.n	80108f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80108ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d105      	bne.n	80108e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80108da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d008      	beq.n	80108f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d03a      	beq.n	8010964 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	4798      	blx	r3
    }
    return;
 80108f6:	e035      	b.n	8010964 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80108f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010900:	2b00      	cmp	r3, #0
 8010902:	d009      	beq.n	8010918 <HAL_UART_IRQHandler+0x71c>
 8010904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801090c:	2b00      	cmp	r3, #0
 801090e:	d003      	beq.n	8010918 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f001 f9e8 	bl	8011ce6 <UART_EndTransmit_IT>
    return;
 8010916:	e026      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801091c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010920:	2b00      	cmp	r3, #0
 8010922:	d009      	beq.n	8010938 <HAL_UART_IRQHandler+0x73c>
 8010924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010928:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d003      	beq.n	8010938 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f001 ff33 	bl	801279c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010936:	e016      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801093c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010940:	2b00      	cmp	r3, #0
 8010942:	d010      	beq.n	8010966 <HAL_UART_IRQHandler+0x76a>
 8010944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010948:	2b00      	cmp	r3, #0
 801094a:	da0c      	bge.n	8010966 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f001 ff1b 	bl	8012788 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010952:	e008      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
      return;
 8010954:	bf00      	nop
 8010956:	e006      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
    return;
 8010958:	bf00      	nop
 801095a:	e004      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
      return;
 801095c:	bf00      	nop
 801095e:	e002      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
      return;
 8010960:	bf00      	nop
 8010962:	e000      	b.n	8010966 <HAL_UART_IRQHandler+0x76a>
    return;
 8010964:	bf00      	nop
  }
}
 8010966:	37e8      	adds	r7, #232	; 0xe8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	effffffe 	.word	0xeffffffe

08010970 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010978:	bf00      	nop
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801098c:	bf00      	nop
 801098e:	370c      	adds	r7, #12
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	460b      	mov	r3, r1
 80109a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109b4:	b092      	sub	sp, #72	; 0x48
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109ba:	2300      	movs	r3, #0
 80109bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	689a      	ldr	r2, [r3, #8]
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	431a      	orrs	r2, r3
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	695b      	ldr	r3, [r3, #20]
 80109ce:	431a      	orrs	r2, r3
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	69db      	ldr	r3, [r3, #28]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	4bbe      	ldr	r3, [pc, #760]	; (8010cd8 <UART_SetConfig+0x328>)
 80109e0:	4013      	ands	r3, r2
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	6812      	ldr	r2, [r2, #0]
 80109e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109e8:	430b      	orrs	r3, r1
 80109ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	430a      	orrs	r2, r1
 8010a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4ab3      	ldr	r2, [pc, #716]	; (8010cdc <UART_SetConfig+0x32c>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d004      	beq.n	8010a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	6a1b      	ldr	r3, [r3, #32]
 8010a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	689a      	ldr	r2, [r3, #8]
 8010a22:	4baf      	ldr	r3, [pc, #700]	; (8010ce0 <UART_SetConfig+0x330>)
 8010a24:	4013      	ands	r3, r2
 8010a26:	697a      	ldr	r2, [r7, #20]
 8010a28:	6812      	ldr	r2, [r2, #0]
 8010a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a2c:	430b      	orrs	r3, r1
 8010a2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a36:	f023 010f 	bic.w	r1, r3, #15
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	430a      	orrs	r2, r1
 8010a44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4aa6      	ldr	r2, [pc, #664]	; (8010ce4 <UART_SetConfig+0x334>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d177      	bne.n	8010b40 <UART_SetConfig+0x190>
 8010a50:	4ba5      	ldr	r3, [pc, #660]	; (8010ce8 <UART_SetConfig+0x338>)
 8010a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a58:	2b28      	cmp	r3, #40	; 0x28
 8010a5a:	d86d      	bhi.n	8010b38 <UART_SetConfig+0x188>
 8010a5c:	a201      	add	r2, pc, #4	; (adr r2, 8010a64 <UART_SetConfig+0xb4>)
 8010a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a62:	bf00      	nop
 8010a64:	08010b09 	.word	0x08010b09
 8010a68:	08010b39 	.word	0x08010b39
 8010a6c:	08010b39 	.word	0x08010b39
 8010a70:	08010b39 	.word	0x08010b39
 8010a74:	08010b39 	.word	0x08010b39
 8010a78:	08010b39 	.word	0x08010b39
 8010a7c:	08010b39 	.word	0x08010b39
 8010a80:	08010b39 	.word	0x08010b39
 8010a84:	08010b11 	.word	0x08010b11
 8010a88:	08010b39 	.word	0x08010b39
 8010a8c:	08010b39 	.word	0x08010b39
 8010a90:	08010b39 	.word	0x08010b39
 8010a94:	08010b39 	.word	0x08010b39
 8010a98:	08010b39 	.word	0x08010b39
 8010a9c:	08010b39 	.word	0x08010b39
 8010aa0:	08010b39 	.word	0x08010b39
 8010aa4:	08010b19 	.word	0x08010b19
 8010aa8:	08010b39 	.word	0x08010b39
 8010aac:	08010b39 	.word	0x08010b39
 8010ab0:	08010b39 	.word	0x08010b39
 8010ab4:	08010b39 	.word	0x08010b39
 8010ab8:	08010b39 	.word	0x08010b39
 8010abc:	08010b39 	.word	0x08010b39
 8010ac0:	08010b39 	.word	0x08010b39
 8010ac4:	08010b21 	.word	0x08010b21
 8010ac8:	08010b39 	.word	0x08010b39
 8010acc:	08010b39 	.word	0x08010b39
 8010ad0:	08010b39 	.word	0x08010b39
 8010ad4:	08010b39 	.word	0x08010b39
 8010ad8:	08010b39 	.word	0x08010b39
 8010adc:	08010b39 	.word	0x08010b39
 8010ae0:	08010b39 	.word	0x08010b39
 8010ae4:	08010b29 	.word	0x08010b29
 8010ae8:	08010b39 	.word	0x08010b39
 8010aec:	08010b39 	.word	0x08010b39
 8010af0:	08010b39 	.word	0x08010b39
 8010af4:	08010b39 	.word	0x08010b39
 8010af8:	08010b39 	.word	0x08010b39
 8010afc:	08010b39 	.word	0x08010b39
 8010b00:	08010b39 	.word	0x08010b39
 8010b04:	08010b31 	.word	0x08010b31
 8010b08:	2301      	movs	r3, #1
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e222      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b10:	2304      	movs	r3, #4
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e21e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b18:	2308      	movs	r3, #8
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1e:	e21a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b20:	2310      	movs	r3, #16
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b26:	e216      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b28:	2320      	movs	r3, #32
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2e:	e212      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b30:	2340      	movs	r3, #64	; 0x40
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b36:	e20e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b38:	2380      	movs	r3, #128	; 0x80
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3e:	e20a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a69      	ldr	r2, [pc, #420]	; (8010cec <UART_SetConfig+0x33c>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d130      	bne.n	8010bac <UART_SetConfig+0x1fc>
 8010b4a:	4b67      	ldr	r3, [pc, #412]	; (8010ce8 <UART_SetConfig+0x338>)
 8010b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	2b05      	cmp	r3, #5
 8010b54:	d826      	bhi.n	8010ba4 <UART_SetConfig+0x1f4>
 8010b56:	a201      	add	r2, pc, #4	; (adr r2, 8010b5c <UART_SetConfig+0x1ac>)
 8010b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5c:	08010b75 	.word	0x08010b75
 8010b60:	08010b7d 	.word	0x08010b7d
 8010b64:	08010b85 	.word	0x08010b85
 8010b68:	08010b8d 	.word	0x08010b8d
 8010b6c:	08010b95 	.word	0x08010b95
 8010b70:	08010b9d 	.word	0x08010b9d
 8010b74:	2300      	movs	r3, #0
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e1ec      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b7c:	2304      	movs	r3, #4
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e1e8      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b84:	2308      	movs	r3, #8
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8a:	e1e4      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b8c:	2310      	movs	r3, #16
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b92:	e1e0      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b94:	2320      	movs	r3, #32
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9a:	e1dc      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010b9c:	2340      	movs	r3, #64	; 0x40
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba2:	e1d8      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ba4:	2380      	movs	r3, #128	; 0x80
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010baa:	e1d4      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4a4f      	ldr	r2, [pc, #316]	; (8010cf0 <UART_SetConfig+0x340>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d130      	bne.n	8010c18 <UART_SetConfig+0x268>
 8010bb6:	4b4c      	ldr	r3, [pc, #304]	; (8010ce8 <UART_SetConfig+0x338>)
 8010bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bba:	f003 0307 	and.w	r3, r3, #7
 8010bbe:	2b05      	cmp	r3, #5
 8010bc0:	d826      	bhi.n	8010c10 <UART_SetConfig+0x260>
 8010bc2:	a201      	add	r2, pc, #4	; (adr r2, 8010bc8 <UART_SetConfig+0x218>)
 8010bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc8:	08010be1 	.word	0x08010be1
 8010bcc:	08010be9 	.word	0x08010be9
 8010bd0:	08010bf1 	.word	0x08010bf1
 8010bd4:	08010bf9 	.word	0x08010bf9
 8010bd8:	08010c01 	.word	0x08010c01
 8010bdc:	08010c09 	.word	0x08010c09
 8010be0:	2300      	movs	r3, #0
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e1b6      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010be8:	2304      	movs	r3, #4
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e1b2      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010bf0:	2308      	movs	r3, #8
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e1ae      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010bf8:	2310      	movs	r3, #16
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e1aa      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c00:	2320      	movs	r3, #32
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e1a6      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c08:	2340      	movs	r3, #64	; 0x40
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e1a2      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c10:	2380      	movs	r3, #128	; 0x80
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e19e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a35      	ldr	r2, [pc, #212]	; (8010cf4 <UART_SetConfig+0x344>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d130      	bne.n	8010c84 <UART_SetConfig+0x2d4>
 8010c22:	4b31      	ldr	r3, [pc, #196]	; (8010ce8 <UART_SetConfig+0x338>)
 8010c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c26:	f003 0307 	and.w	r3, r3, #7
 8010c2a:	2b05      	cmp	r3, #5
 8010c2c:	d826      	bhi.n	8010c7c <UART_SetConfig+0x2cc>
 8010c2e:	a201      	add	r2, pc, #4	; (adr r2, 8010c34 <UART_SetConfig+0x284>)
 8010c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c34:	08010c4d 	.word	0x08010c4d
 8010c38:	08010c55 	.word	0x08010c55
 8010c3c:	08010c5d 	.word	0x08010c5d
 8010c40:	08010c65 	.word	0x08010c65
 8010c44:	08010c6d 	.word	0x08010c6d
 8010c48:	08010c75 	.word	0x08010c75
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e180      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c54:	2304      	movs	r3, #4
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e17c      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c5c:	2308      	movs	r3, #8
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e178      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c64:	2310      	movs	r3, #16
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e174      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c6c:	2320      	movs	r3, #32
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e170      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c74:	2340      	movs	r3, #64	; 0x40
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e16c      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c7c:	2380      	movs	r3, #128	; 0x80
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e168      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4a1b      	ldr	r2, [pc, #108]	; (8010cf8 <UART_SetConfig+0x348>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d142      	bne.n	8010d14 <UART_SetConfig+0x364>
 8010c8e:	4b16      	ldr	r3, [pc, #88]	; (8010ce8 <UART_SetConfig+0x338>)
 8010c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c92:	f003 0307 	and.w	r3, r3, #7
 8010c96:	2b05      	cmp	r3, #5
 8010c98:	d838      	bhi.n	8010d0c <UART_SetConfig+0x35c>
 8010c9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ca0 <UART_SetConfig+0x2f0>)
 8010c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca0:	08010cb9 	.word	0x08010cb9
 8010ca4:	08010cc1 	.word	0x08010cc1
 8010ca8:	08010cc9 	.word	0x08010cc9
 8010cac:	08010cd1 	.word	0x08010cd1
 8010cb0:	08010cfd 	.word	0x08010cfd
 8010cb4:	08010d05 	.word	0x08010d05
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e14a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010cc0:	2304      	movs	r3, #4
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e146      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010cc8:	2308      	movs	r3, #8
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e142      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010cd0:	2310      	movs	r3, #16
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e13e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010cd8:	cfff69f3 	.word	0xcfff69f3
 8010cdc:	58000c00 	.word	0x58000c00
 8010ce0:	11fff4ff 	.word	0x11fff4ff
 8010ce4:	40011000 	.word	0x40011000
 8010ce8:	58024400 	.word	0x58024400
 8010cec:	40004400 	.word	0x40004400
 8010cf0:	40004800 	.word	0x40004800
 8010cf4:	40004c00 	.word	0x40004c00
 8010cf8:	40005000 	.word	0x40005000
 8010cfc:	2320      	movs	r3, #32
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e128      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010d04:	2340      	movs	r3, #64	; 0x40
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e124      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010d0c:	2380      	movs	r3, #128	; 0x80
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d12:	e120      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4acb      	ldr	r2, [pc, #812]	; (8011048 <UART_SetConfig+0x698>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d176      	bne.n	8010e0c <UART_SetConfig+0x45c>
 8010d1e:	4bcb      	ldr	r3, [pc, #812]	; (801104c <UART_SetConfig+0x69c>)
 8010d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d26:	2b28      	cmp	r3, #40	; 0x28
 8010d28:	d86c      	bhi.n	8010e04 <UART_SetConfig+0x454>
 8010d2a:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <UART_SetConfig+0x380>)
 8010d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d30:	08010dd5 	.word	0x08010dd5
 8010d34:	08010e05 	.word	0x08010e05
 8010d38:	08010e05 	.word	0x08010e05
 8010d3c:	08010e05 	.word	0x08010e05
 8010d40:	08010e05 	.word	0x08010e05
 8010d44:	08010e05 	.word	0x08010e05
 8010d48:	08010e05 	.word	0x08010e05
 8010d4c:	08010e05 	.word	0x08010e05
 8010d50:	08010ddd 	.word	0x08010ddd
 8010d54:	08010e05 	.word	0x08010e05
 8010d58:	08010e05 	.word	0x08010e05
 8010d5c:	08010e05 	.word	0x08010e05
 8010d60:	08010e05 	.word	0x08010e05
 8010d64:	08010e05 	.word	0x08010e05
 8010d68:	08010e05 	.word	0x08010e05
 8010d6c:	08010e05 	.word	0x08010e05
 8010d70:	08010de5 	.word	0x08010de5
 8010d74:	08010e05 	.word	0x08010e05
 8010d78:	08010e05 	.word	0x08010e05
 8010d7c:	08010e05 	.word	0x08010e05
 8010d80:	08010e05 	.word	0x08010e05
 8010d84:	08010e05 	.word	0x08010e05
 8010d88:	08010e05 	.word	0x08010e05
 8010d8c:	08010e05 	.word	0x08010e05
 8010d90:	08010ded 	.word	0x08010ded
 8010d94:	08010e05 	.word	0x08010e05
 8010d98:	08010e05 	.word	0x08010e05
 8010d9c:	08010e05 	.word	0x08010e05
 8010da0:	08010e05 	.word	0x08010e05
 8010da4:	08010e05 	.word	0x08010e05
 8010da8:	08010e05 	.word	0x08010e05
 8010dac:	08010e05 	.word	0x08010e05
 8010db0:	08010df5 	.word	0x08010df5
 8010db4:	08010e05 	.word	0x08010e05
 8010db8:	08010e05 	.word	0x08010e05
 8010dbc:	08010e05 	.word	0x08010e05
 8010dc0:	08010e05 	.word	0x08010e05
 8010dc4:	08010e05 	.word	0x08010e05
 8010dc8:	08010e05 	.word	0x08010e05
 8010dcc:	08010e05 	.word	0x08010e05
 8010dd0:	08010dfd 	.word	0x08010dfd
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e0bc      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ddc:	2304      	movs	r3, #4
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e0b8      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010de4:	2308      	movs	r3, #8
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e0b4      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010dec:	2310      	movs	r3, #16
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e0b0      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010df4:	2320      	movs	r3, #32
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e0ac      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e0a8      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e04:	2380      	movs	r3, #128	; 0x80
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e0a4      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a8f      	ldr	r2, [pc, #572]	; (8011050 <UART_SetConfig+0x6a0>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d130      	bne.n	8010e78 <UART_SetConfig+0x4c8>
 8010e16:	4b8d      	ldr	r3, [pc, #564]	; (801104c <UART_SetConfig+0x69c>)
 8010e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e1a:	f003 0307 	and.w	r3, r3, #7
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	d826      	bhi.n	8010e70 <UART_SetConfig+0x4c0>
 8010e22:	a201      	add	r2, pc, #4	; (adr r2, 8010e28 <UART_SetConfig+0x478>)
 8010e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e28:	08010e41 	.word	0x08010e41
 8010e2c:	08010e49 	.word	0x08010e49
 8010e30:	08010e51 	.word	0x08010e51
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e61 	.word	0x08010e61
 8010e3c:	08010e69 	.word	0x08010e69
 8010e40:	2300      	movs	r3, #0
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e086      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e082      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e50:	2308      	movs	r3, #8
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e07e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e58:	2310      	movs	r3, #16
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e07a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e60:	2320      	movs	r3, #32
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e076      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e68:	2340      	movs	r3, #64	; 0x40
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e072      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e70:	2380      	movs	r3, #128	; 0x80
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e06e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4a75      	ldr	r2, [pc, #468]	; (8011054 <UART_SetConfig+0x6a4>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d130      	bne.n	8010ee4 <UART_SetConfig+0x534>
 8010e82:	4b72      	ldr	r3, [pc, #456]	; (801104c <UART_SetConfig+0x69c>)
 8010e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e86:	f003 0307 	and.w	r3, r3, #7
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	d826      	bhi.n	8010edc <UART_SetConfig+0x52c>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <UART_SetConfig+0x4e4>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010ead 	.word	0x08010ead
 8010e98:	08010eb5 	.word	0x08010eb5
 8010e9c:	08010ebd 	.word	0x08010ebd
 8010ea0:	08010ec5 	.word	0x08010ec5
 8010ea4:	08010ecd 	.word	0x08010ecd
 8010ea8:	08010ed5 	.word	0x08010ed5
 8010eac:	2300      	movs	r3, #0
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e050      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010eb4:	2304      	movs	r3, #4
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e04c      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e048      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e044      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ecc:	2320      	movs	r3, #32
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e040      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ed4:	2340      	movs	r3, #64	; 0x40
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e03c      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e038      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a5b      	ldr	r2, [pc, #364]	; (8011058 <UART_SetConfig+0x6a8>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d130      	bne.n	8010f50 <UART_SetConfig+0x5a0>
 8010eee:	4b57      	ldr	r3, [pc, #348]	; (801104c <UART_SetConfig+0x69c>)
 8010ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	2b05      	cmp	r3, #5
 8010ef8:	d826      	bhi.n	8010f48 <UART_SetConfig+0x598>
 8010efa:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <UART_SetConfig+0x550>)
 8010efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f21 	.word	0x08010f21
 8010f08:	08010f29 	.word	0x08010f29
 8010f0c:	08010f31 	.word	0x08010f31
 8010f10:	08010f39 	.word	0x08010f39
 8010f14:	08010f41 	.word	0x08010f41
 8010f18:	2302      	movs	r3, #2
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e01a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f20:	2304      	movs	r3, #4
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e016      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f28:	2308      	movs	r3, #8
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e012      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f30:	2310      	movs	r3, #16
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e00e      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f38:	2320      	movs	r3, #32
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e00a      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f40:	2340      	movs	r3, #64	; 0x40
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e006      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f48:	2380      	movs	r3, #128	; 0x80
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e002      	b.n	8010f56 <UART_SetConfig+0x5a6>
 8010f50:	2380      	movs	r3, #128	; 0x80
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a3f      	ldr	r2, [pc, #252]	; (8011058 <UART_SetConfig+0x6a8>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	f040 80f8 	bne.w	8011152 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f66:	2b20      	cmp	r3, #32
 8010f68:	dc46      	bgt.n	8010ff8 <UART_SetConfig+0x648>
 8010f6a:	2b02      	cmp	r3, #2
 8010f6c:	f2c0 8082 	blt.w	8011074 <UART_SetConfig+0x6c4>
 8010f70:	3b02      	subs	r3, #2
 8010f72:	2b1e      	cmp	r3, #30
 8010f74:	d87e      	bhi.n	8011074 <UART_SetConfig+0x6c4>
 8010f76:	a201      	add	r2, pc, #4	; (adr r2, 8010f7c <UART_SetConfig+0x5cc>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	08010fff 	.word	0x08010fff
 8010f80:	08011075 	.word	0x08011075
 8010f84:	08011007 	.word	0x08011007
 8010f88:	08011075 	.word	0x08011075
 8010f8c:	08011075 	.word	0x08011075
 8010f90:	08011075 	.word	0x08011075
 8010f94:	08011017 	.word	0x08011017
 8010f98:	08011075 	.word	0x08011075
 8010f9c:	08011075 	.word	0x08011075
 8010fa0:	08011075 	.word	0x08011075
 8010fa4:	08011075 	.word	0x08011075
 8010fa8:	08011075 	.word	0x08011075
 8010fac:	08011075 	.word	0x08011075
 8010fb0:	08011075 	.word	0x08011075
 8010fb4:	08011027 	.word	0x08011027
 8010fb8:	08011075 	.word	0x08011075
 8010fbc:	08011075 	.word	0x08011075
 8010fc0:	08011075 	.word	0x08011075
 8010fc4:	08011075 	.word	0x08011075
 8010fc8:	08011075 	.word	0x08011075
 8010fcc:	08011075 	.word	0x08011075
 8010fd0:	08011075 	.word	0x08011075
 8010fd4:	08011075 	.word	0x08011075
 8010fd8:	08011075 	.word	0x08011075
 8010fdc:	08011075 	.word	0x08011075
 8010fe0:	08011075 	.word	0x08011075
 8010fe4:	08011075 	.word	0x08011075
 8010fe8:	08011075 	.word	0x08011075
 8010fec:	08011075 	.word	0x08011075
 8010ff0:	08011075 	.word	0x08011075
 8010ff4:	08011067 	.word	0x08011067
 8010ff8:	2b40      	cmp	r3, #64	; 0x40
 8010ffa:	d037      	beq.n	801106c <UART_SetConfig+0x6bc>
 8010ffc:	e03a      	b.n	8011074 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010ffe:	f7fb fd9b 	bl	800cb38 <HAL_RCCEx_GetD3PCLK1Freq>
 8011002:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011004:	e03c      	b.n	8011080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801100a:	4618      	mov	r0, r3
 801100c:	f7fb fdaa 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011014:	e034      	b.n	8011080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011016:	f107 0318 	add.w	r3, r7, #24
 801101a:	4618      	mov	r0, r3
 801101c:	f7fb fef6 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011024:	e02c      	b.n	8011080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011026:	4b09      	ldr	r3, [pc, #36]	; (801104c <UART_SetConfig+0x69c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 0320 	and.w	r3, r3, #32
 801102e:	2b00      	cmp	r3, #0
 8011030:	d016      	beq.n	8011060 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011032:	4b06      	ldr	r3, [pc, #24]	; (801104c <UART_SetConfig+0x69c>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	08db      	lsrs	r3, r3, #3
 8011038:	f003 0303 	and.w	r3, r3, #3
 801103c:	4a07      	ldr	r2, [pc, #28]	; (801105c <UART_SetConfig+0x6ac>)
 801103e:	fa22 f303 	lsr.w	r3, r2, r3
 8011042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011044:	e01c      	b.n	8011080 <UART_SetConfig+0x6d0>
 8011046:	bf00      	nop
 8011048:	40011400 	.word	0x40011400
 801104c:	58024400 	.word	0x58024400
 8011050:	40007800 	.word	0x40007800
 8011054:	40007c00 	.word	0x40007c00
 8011058:	58000c00 	.word	0x58000c00
 801105c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011060:	4b9d      	ldr	r3, [pc, #628]	; (80112d8 <UART_SetConfig+0x928>)
 8011062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011064:	e00c      	b.n	8011080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011066:	4b9d      	ldr	r3, [pc, #628]	; (80112dc <UART_SetConfig+0x92c>)
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801106a:	e009      	b.n	8011080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801106c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011072:	e005      	b.n	8011080 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011074:	2300      	movs	r3, #0
 8011076:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801107e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011082:	2b00      	cmp	r3, #0
 8011084:	f000 81de 	beq.w	8011444 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108c:	4a94      	ldr	r2, [pc, #592]	; (80112e0 <UART_SetConfig+0x930>)
 801108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011092:	461a      	mov	r2, r3
 8011094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011096:	fbb3 f3f2 	udiv	r3, r3, r2
 801109a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	685a      	ldr	r2, [r3, #4]
 80110a0:	4613      	mov	r3, r2
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	4413      	add	r3, r2
 80110a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d305      	bcc.n	80110b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d903      	bls.n	80110c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80110b8:	2301      	movs	r3, #1
 80110ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110be:	e1c1      	b.n	8011444 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c2:	2200      	movs	r2, #0
 80110c4:	60bb      	str	r3, [r7, #8]
 80110c6:	60fa      	str	r2, [r7, #12]
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	4a84      	ldr	r2, [pc, #528]	; (80112e0 <UART_SetConfig+0x930>)
 80110ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	2200      	movs	r2, #0
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	607a      	str	r2, [r7, #4]
 80110da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110e2:	f7ef f8fd 	bl	80002e0 <__aeabi_uldivmod>
 80110e6:	4602      	mov	r2, r0
 80110e8:	460b      	mov	r3, r1
 80110ea:	4610      	mov	r0, r2
 80110ec:	4619      	mov	r1, r3
 80110ee:	f04f 0200 	mov.w	r2, #0
 80110f2:	f04f 0300 	mov.w	r3, #0
 80110f6:	020b      	lsls	r3, r1, #8
 80110f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80110fc:	0202      	lsls	r2, r0, #8
 80110fe:	6979      	ldr	r1, [r7, #20]
 8011100:	6849      	ldr	r1, [r1, #4]
 8011102:	0849      	lsrs	r1, r1, #1
 8011104:	2000      	movs	r0, #0
 8011106:	460c      	mov	r4, r1
 8011108:	4605      	mov	r5, r0
 801110a:	eb12 0804 	adds.w	r8, r2, r4
 801110e:	eb43 0905 	adc.w	r9, r3, r5
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	469a      	mov	sl, r3
 801111a:	4693      	mov	fp, r2
 801111c:	4652      	mov	r2, sl
 801111e:	465b      	mov	r3, fp
 8011120:	4640      	mov	r0, r8
 8011122:	4649      	mov	r1, r9
 8011124:	f7ef f8dc 	bl	80002e0 <__aeabi_uldivmod>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4613      	mov	r3, r2
 801112e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011136:	d308      	bcc.n	801114a <UART_SetConfig+0x79a>
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801113e:	d204      	bcs.n	801114a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011146:	60da      	str	r2, [r3, #12]
 8011148:	e17c      	b.n	8011444 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801114a:	2301      	movs	r3, #1
 801114c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011150:	e178      	b.n	8011444 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801115a:	f040 80c5 	bne.w	80112e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801115e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011162:	2b20      	cmp	r3, #32
 8011164:	dc48      	bgt.n	80111f8 <UART_SetConfig+0x848>
 8011166:	2b00      	cmp	r3, #0
 8011168:	db7b      	blt.n	8011262 <UART_SetConfig+0x8b2>
 801116a:	2b20      	cmp	r3, #32
 801116c:	d879      	bhi.n	8011262 <UART_SetConfig+0x8b2>
 801116e:	a201      	add	r2, pc, #4	; (adr r2, 8011174 <UART_SetConfig+0x7c4>)
 8011170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011174:	080111ff 	.word	0x080111ff
 8011178:	08011207 	.word	0x08011207
 801117c:	08011263 	.word	0x08011263
 8011180:	08011263 	.word	0x08011263
 8011184:	0801120f 	.word	0x0801120f
 8011188:	08011263 	.word	0x08011263
 801118c:	08011263 	.word	0x08011263
 8011190:	08011263 	.word	0x08011263
 8011194:	0801121f 	.word	0x0801121f
 8011198:	08011263 	.word	0x08011263
 801119c:	08011263 	.word	0x08011263
 80111a0:	08011263 	.word	0x08011263
 80111a4:	08011263 	.word	0x08011263
 80111a8:	08011263 	.word	0x08011263
 80111ac:	08011263 	.word	0x08011263
 80111b0:	08011263 	.word	0x08011263
 80111b4:	0801122f 	.word	0x0801122f
 80111b8:	08011263 	.word	0x08011263
 80111bc:	08011263 	.word	0x08011263
 80111c0:	08011263 	.word	0x08011263
 80111c4:	08011263 	.word	0x08011263
 80111c8:	08011263 	.word	0x08011263
 80111cc:	08011263 	.word	0x08011263
 80111d0:	08011263 	.word	0x08011263
 80111d4:	08011263 	.word	0x08011263
 80111d8:	08011263 	.word	0x08011263
 80111dc:	08011263 	.word	0x08011263
 80111e0:	08011263 	.word	0x08011263
 80111e4:	08011263 	.word	0x08011263
 80111e8:	08011263 	.word	0x08011263
 80111ec:	08011263 	.word	0x08011263
 80111f0:	08011263 	.word	0x08011263
 80111f4:	08011255 	.word	0x08011255
 80111f8:	2b40      	cmp	r3, #64	; 0x40
 80111fa:	d02e      	beq.n	801125a <UART_SetConfig+0x8aa>
 80111fc:	e031      	b.n	8011262 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111fe:	f7f9 fca3 	bl	800ab48 <HAL_RCC_GetPCLK1Freq>
 8011202:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011204:	e033      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011206:	f7f9 fcb5 	bl	800ab74 <HAL_RCC_GetPCLK2Freq>
 801120a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801120c:	e02f      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011212:	4618      	mov	r0, r3
 8011214:	f7fb fca6 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801121c:	e027      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801121e:	f107 0318 	add.w	r3, r7, #24
 8011222:	4618      	mov	r0, r3
 8011224:	f7fb fdf2 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801122c:	e01f      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801122e:	4b2d      	ldr	r3, [pc, #180]	; (80112e4 <UART_SetConfig+0x934>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f003 0320 	and.w	r3, r3, #32
 8011236:	2b00      	cmp	r3, #0
 8011238:	d009      	beq.n	801124e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801123a:	4b2a      	ldr	r3, [pc, #168]	; (80112e4 <UART_SetConfig+0x934>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	08db      	lsrs	r3, r3, #3
 8011240:	f003 0303 	and.w	r3, r3, #3
 8011244:	4a24      	ldr	r2, [pc, #144]	; (80112d8 <UART_SetConfig+0x928>)
 8011246:	fa22 f303 	lsr.w	r3, r2, r3
 801124a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801124c:	e00f      	b.n	801126e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801124e:	4b22      	ldr	r3, [pc, #136]	; (80112d8 <UART_SetConfig+0x928>)
 8011250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011252:	e00c      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011254:	4b21      	ldr	r3, [pc, #132]	; (80112dc <UART_SetConfig+0x92c>)
 8011256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011258:	e009      	b.n	801126e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801125e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011260:	e005      	b.n	801126e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011262:	2300      	movs	r3, #0
 8011264:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801126c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801126e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 80e7 	beq.w	8011444 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127a:	4a19      	ldr	r2, [pc, #100]	; (80112e0 <UART_SetConfig+0x930>)
 801127c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011280:	461a      	mov	r2, r3
 8011282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011284:	fbb3 f3f2 	udiv	r3, r3, r2
 8011288:	005a      	lsls	r2, r3, #1
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	085b      	lsrs	r3, r3, #1
 8011290:	441a      	add	r2, r3
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	fbb2 f3f3 	udiv	r3, r2, r3
 801129a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	2b0f      	cmp	r3, #15
 80112a0:	d916      	bls.n	80112d0 <UART_SetConfig+0x920>
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112a8:	d212      	bcs.n	80112d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	f023 030f 	bic.w	r3, r3, #15
 80112b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	085b      	lsrs	r3, r3, #1
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	f003 0307 	and.w	r3, r3, #7
 80112be:	b29a      	uxth	r2, r3
 80112c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112c2:	4313      	orrs	r3, r2
 80112c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80112cc:	60da      	str	r2, [r3, #12]
 80112ce:	e0b9      	b.n	8011444 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80112d0:	2301      	movs	r3, #1
 80112d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80112d6:	e0b5      	b.n	8011444 <UART_SetConfig+0xa94>
 80112d8:	03d09000 	.word	0x03d09000
 80112dc:	003d0900 	.word	0x003d0900
 80112e0:	0801713c 	.word	0x0801713c
 80112e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80112e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112ec:	2b20      	cmp	r3, #32
 80112ee:	dc49      	bgt.n	8011384 <UART_SetConfig+0x9d4>
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	db7c      	blt.n	80113ee <UART_SetConfig+0xa3e>
 80112f4:	2b20      	cmp	r3, #32
 80112f6:	d87a      	bhi.n	80113ee <UART_SetConfig+0xa3e>
 80112f8:	a201      	add	r2, pc, #4	; (adr r2, 8011300 <UART_SetConfig+0x950>)
 80112fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fe:	bf00      	nop
 8011300:	0801138b 	.word	0x0801138b
 8011304:	08011393 	.word	0x08011393
 8011308:	080113ef 	.word	0x080113ef
 801130c:	080113ef 	.word	0x080113ef
 8011310:	0801139b 	.word	0x0801139b
 8011314:	080113ef 	.word	0x080113ef
 8011318:	080113ef 	.word	0x080113ef
 801131c:	080113ef 	.word	0x080113ef
 8011320:	080113ab 	.word	0x080113ab
 8011324:	080113ef 	.word	0x080113ef
 8011328:	080113ef 	.word	0x080113ef
 801132c:	080113ef 	.word	0x080113ef
 8011330:	080113ef 	.word	0x080113ef
 8011334:	080113ef 	.word	0x080113ef
 8011338:	080113ef 	.word	0x080113ef
 801133c:	080113ef 	.word	0x080113ef
 8011340:	080113bb 	.word	0x080113bb
 8011344:	080113ef 	.word	0x080113ef
 8011348:	080113ef 	.word	0x080113ef
 801134c:	080113ef 	.word	0x080113ef
 8011350:	080113ef 	.word	0x080113ef
 8011354:	080113ef 	.word	0x080113ef
 8011358:	080113ef 	.word	0x080113ef
 801135c:	080113ef 	.word	0x080113ef
 8011360:	080113ef 	.word	0x080113ef
 8011364:	080113ef 	.word	0x080113ef
 8011368:	080113ef 	.word	0x080113ef
 801136c:	080113ef 	.word	0x080113ef
 8011370:	080113ef 	.word	0x080113ef
 8011374:	080113ef 	.word	0x080113ef
 8011378:	080113ef 	.word	0x080113ef
 801137c:	080113ef 	.word	0x080113ef
 8011380:	080113e1 	.word	0x080113e1
 8011384:	2b40      	cmp	r3, #64	; 0x40
 8011386:	d02e      	beq.n	80113e6 <UART_SetConfig+0xa36>
 8011388:	e031      	b.n	80113ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801138a:	f7f9 fbdd 	bl	800ab48 <HAL_RCC_GetPCLK1Freq>
 801138e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011390:	e033      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011392:	f7f9 fbef 	bl	800ab74 <HAL_RCC_GetPCLK2Freq>
 8011396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011398:	e02f      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fb fbe0 	bl	800cb64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a8:	e027      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113aa:	f107 0318 	add.w	r3, r7, #24
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fb fd2c 	bl	800ce0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b8:	e01f      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113ba:	4b2d      	ldr	r3, [pc, #180]	; (8011470 <UART_SetConfig+0xac0>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0320 	and.w	r3, r3, #32
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d009      	beq.n	80113da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113c6:	4b2a      	ldr	r3, [pc, #168]	; (8011470 <UART_SetConfig+0xac0>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	08db      	lsrs	r3, r3, #3
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	4a28      	ldr	r2, [pc, #160]	; (8011474 <UART_SetConfig+0xac4>)
 80113d2:	fa22 f303 	lsr.w	r3, r2, r3
 80113d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113d8:	e00f      	b.n	80113fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80113da:	4b26      	ldr	r3, [pc, #152]	; (8011474 <UART_SetConfig+0xac4>)
 80113dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113de:	e00c      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113e0:	4b25      	ldr	r3, [pc, #148]	; (8011478 <UART_SetConfig+0xac8>)
 80113e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e4:	e009      	b.n	80113fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113ec:	e005      	b.n	80113fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80113ee:	2300      	movs	r3, #0
 80113f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113f2:	2301      	movs	r3, #1
 80113f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113f8:	bf00      	nop
    }

    if (pclk != 0U)
 80113fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d021      	beq.n	8011444 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011404:	4a1d      	ldr	r2, [pc, #116]	; (801147c <UART_SetConfig+0xacc>)
 8011406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801140a:	461a      	mov	r2, r3
 801140c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	085b      	lsrs	r3, r3, #1
 8011418:	441a      	add	r2, r3
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011422:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011426:	2b0f      	cmp	r3, #15
 8011428:	d909      	bls.n	801143e <UART_SetConfig+0xa8e>
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011430:	d205      	bcs.n	801143e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011434:	b29a      	uxth	r2, r3
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	60da      	str	r2, [r3, #12]
 801143c:	e002      	b.n	8011444 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801143e:	2301      	movs	r3, #1
 8011440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2201      	movs	r2, #1
 8011448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	2201      	movs	r2, #1
 8011450:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	2200      	movs	r2, #0
 8011458:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	2200      	movs	r2, #0
 801145e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011460:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011464:	4618      	mov	r0, r3
 8011466:	3748      	adds	r7, #72	; 0x48
 8011468:	46bd      	mov	sp, r7
 801146a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801146e:	bf00      	nop
 8011470:	58024400 	.word	0x58024400
 8011474:	03d09000 	.word	0x03d09000
 8011478:	003d0900 	.word	0x003d0900
 801147c:	0801713c 	.word	0x0801713c

08011480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801148c:	f003 0308 	and.w	r3, r3, #8
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00a      	beq.n	80114aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	430a      	orrs	r2, r1
 80114a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ae:	f003 0301 	and.w	r3, r3, #1
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00a      	beq.n	80114cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	430a      	orrs	r2, r1
 80114ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d0:	f003 0302 	and.w	r3, r3, #2
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00a      	beq.n	80114ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	430a      	orrs	r2, r1
 80114ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f2:	f003 0304 	and.w	r3, r3, #4
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00a      	beq.n	8011510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	430a      	orrs	r2, r1
 801150e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011514:	f003 0310 	and.w	r3, r3, #16
 8011518:	2b00      	cmp	r3, #0
 801151a:	d00a      	beq.n	8011532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	430a      	orrs	r2, r1
 8011530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011536:	f003 0320 	and.w	r3, r3, #32
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00a      	beq.n	8011554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	430a      	orrs	r2, r1
 8011552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801155c:	2b00      	cmp	r3, #0
 801155e:	d01a      	beq.n	8011596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	430a      	orrs	r2, r1
 8011574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801157a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801157e:	d10a      	bne.n	8011596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	430a      	orrs	r2, r1
 8011594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d00a      	beq.n	80115b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	430a      	orrs	r2, r1
 80115b6:	605a      	str	r2, [r3, #4]
  }
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b098      	sub	sp, #96	; 0x60
 80115c8:	af02      	add	r7, sp, #8
 80115ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115d4:	f7f2 fb72 	bl	8003cbc <HAL_GetTick>
 80115d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f003 0308 	and.w	r3, r3, #8
 80115e4:	2b08      	cmp	r3, #8
 80115e6:	d12f      	bne.n	8011648 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115f0:	2200      	movs	r2, #0
 80115f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 f88e 	bl	8011718 <UART_WaitOnFlagUntilTimeout>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d022      	beq.n	8011648 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160a:	e853 3f00 	ldrex	r3, [r3]
 801160e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011616:	653b      	str	r3, [r7, #80]	; 0x50
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	461a      	mov	r2, r3
 801161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011620:	647b      	str	r3, [r7, #68]	; 0x44
 8011622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011628:	e841 2300 	strex	r3, r2, [r1]
 801162c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1e6      	bne.n	8011602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2220      	movs	r2, #32
 8011638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2200      	movs	r2, #0
 8011640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011644:	2303      	movs	r3, #3
 8011646:	e063      	b.n	8011710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f003 0304 	and.w	r3, r3, #4
 8011652:	2b04      	cmp	r3, #4
 8011654:	d149      	bne.n	80116ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801165e:	2200      	movs	r2, #0
 8011660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 f857 	bl	8011718 <UART_WaitOnFlagUntilTimeout>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d03c      	beq.n	80116ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011678:	e853 3f00 	ldrex	r3, [r3]
 801167c:	623b      	str	r3, [r7, #32]
   return(result);
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	461a      	mov	r2, r3
 801168c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801168e:	633b      	str	r3, [r7, #48]	; 0x30
 8011690:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011696:	e841 2300 	strex	r3, r2, [r1]
 801169a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1e6      	bne.n	8011670 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	3308      	adds	r3, #8
 80116a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	e853 3f00 	ldrex	r3, [r3]
 80116b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f023 0301 	bic.w	r3, r3, #1
 80116b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	3308      	adds	r3, #8
 80116c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116c2:	61fa      	str	r2, [r7, #28]
 80116c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c6:	69b9      	ldr	r1, [r7, #24]
 80116c8:	69fa      	ldr	r2, [r7, #28]
 80116ca:	e841 2300 	strex	r3, r2, [r1]
 80116ce:	617b      	str	r3, [r7, #20]
   return(result);
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d1e5      	bne.n	80116a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2220      	movs	r2, #32
 80116da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116e6:	2303      	movs	r3, #3
 80116e8:	e012      	b.n	8011710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2220      	movs	r2, #32
 80116ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2220      	movs	r2, #32
 80116f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	3758      	adds	r7, #88	; 0x58
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	4613      	mov	r3, r2
 8011726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011728:	e04f      	b.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011730:	d04b      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011732:	f7f2 fac3 	bl	8003cbc <HAL_GetTick>
 8011736:	4602      	mov	r2, r0
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	69ba      	ldr	r2, [r7, #24]
 801173e:	429a      	cmp	r2, r3
 8011740:	d302      	bcc.n	8011748 <UART_WaitOnFlagUntilTimeout+0x30>
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d101      	bne.n	801174c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011748:	2303      	movs	r3, #3
 801174a:	e04e      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f003 0304 	and.w	r3, r3, #4
 8011756:	2b00      	cmp	r3, #0
 8011758:	d037      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	2b80      	cmp	r3, #128	; 0x80
 801175e:	d034      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	2b40      	cmp	r3, #64	; 0x40
 8011764:	d031      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	69db      	ldr	r3, [r3, #28]
 801176c:	f003 0308 	and.w	r3, r3, #8
 8011770:	2b08      	cmp	r3, #8
 8011772:	d110      	bne.n	8011796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2208      	movs	r2, #8
 801177a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f000 f99d 	bl	8011abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2208      	movs	r2, #8
 8011786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	e029      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117a4:	d111      	bne.n	80117ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80117ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 f983 	bl	8011abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2220      	movs	r2, #32
 80117ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80117c6:	2303      	movs	r3, #3
 80117c8:	e00f      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	69da      	ldr	r2, [r3, #28]
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	4013      	ands	r3, r2
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	bf0c      	ite	eq
 80117da:	2301      	moveq	r3, #1
 80117dc:	2300      	movne	r3, #0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	461a      	mov	r2, r3
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d0a0      	beq.n	801172a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b0a3      	sub	sp, #140	; 0x8c
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	4613      	mov	r3, r2
 8011800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	88fa      	ldrh	r2, [r7, #6]
 801180c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	88fa      	ldrh	r2, [r7, #6]
 8011814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2200      	movs	r2, #0
 801181c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011826:	d10e      	bne.n	8011846 <UART_Start_Receive_IT+0x52>
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	691b      	ldr	r3, [r3, #16]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d105      	bne.n	801183c <UART_Start_Receive_IT+0x48>
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801183a:	e02d      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	22ff      	movs	r2, #255	; 0xff
 8011840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011844:	e028      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	689b      	ldr	r3, [r3, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10d      	bne.n	801186a <UART_Start_Receive_IT+0x76>
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	691b      	ldr	r3, [r3, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d104      	bne.n	8011860 <UART_Start_Receive_IT+0x6c>
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	22ff      	movs	r2, #255	; 0xff
 801185a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801185e:	e01b      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	227f      	movs	r2, #127	; 0x7f
 8011864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011868:	e016      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011872:	d10d      	bne.n	8011890 <UART_Start_Receive_IT+0x9c>
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d104      	bne.n	8011886 <UART_Start_Receive_IT+0x92>
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	227f      	movs	r2, #127	; 0x7f
 8011880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011884:	e008      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	223f      	movs	r2, #63	; 0x3f
 801188a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801188e:	e003      	b.n	8011898 <UART_Start_Receive_IT+0xa4>
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2200      	movs	r2, #0
 8011894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2200      	movs	r2, #0
 801189c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2222      	movs	r2, #34	; 0x22
 80118a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	3308      	adds	r3, #8
 80118ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80118b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118ba:	f043 0301 	orr.w	r3, r3, #1
 80118be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	3308      	adds	r3, #8
 80118c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80118cc:	673a      	str	r2, [r7, #112]	; 0x70
 80118ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80118d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80118d4:	e841 2300 	strex	r3, r2, [r1]
 80118d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80118da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1e3      	bne.n	80118a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118e8:	d14f      	bne.n	801198a <UART_Start_Receive_IT+0x196>
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118f0:	88fa      	ldrh	r2, [r7, #6]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d349      	bcc.n	801198a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118fe:	d107      	bne.n	8011910 <UART_Start_Receive_IT+0x11c>
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d103      	bne.n	8011910 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	4a47      	ldr	r2, [pc, #284]	; (8011a28 <UART_Start_Receive_IT+0x234>)
 801190c:	675a      	str	r2, [r3, #116]	; 0x74
 801190e:	e002      	b.n	8011916 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	4a46      	ldr	r2, [pc, #280]	; (8011a2c <UART_Start_Receive_IT+0x238>)
 8011914:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	691b      	ldr	r3, [r3, #16]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d01a      	beq.n	8011954 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011926:	e853 3f00 	ldrex	r3, [r3]
 801192a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801192c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	461a      	mov	r2, r3
 801193c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011942:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011944:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011948:	e841 2300 	strex	r3, r2, [r1]
 801194c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1e4      	bne.n	801191e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	3308      	adds	r3, #8
 801195a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	e853 3f00 	ldrex	r3, [r3]
 8011962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801196a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3308      	adds	r3, #8
 8011972:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011974:	64ba      	str	r2, [r7, #72]	; 0x48
 8011976:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801197a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801197c:	e841 2300 	strex	r3, r2, [r1]
 8011980:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1e5      	bne.n	8011954 <UART_Start_Receive_IT+0x160>
 8011988:	e046      	b.n	8011a18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011992:	d107      	bne.n	80119a4 <UART_Start_Receive_IT+0x1b0>
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	4a24      	ldr	r2, [pc, #144]	; (8011a30 <UART_Start_Receive_IT+0x23c>)
 80119a0:	675a      	str	r2, [r3, #116]	; 0x74
 80119a2:	e002      	b.n	80119aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	4a23      	ldr	r2, [pc, #140]	; (8011a34 <UART_Start_Receive_IT+0x240>)
 80119a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d019      	beq.n	80119e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	e853 3f00 	ldrex	r3, [r3]
 80119be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80119c6:	677b      	str	r3, [r7, #116]	; 0x74
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	461a      	mov	r2, r3
 80119ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119d0:	637b      	str	r3, [r7, #52]	; 0x34
 80119d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119d8:	e841 2300 	strex	r3, r2, [r1]
 80119dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1e6      	bne.n	80119b2 <UART_Start_Receive_IT+0x1be>
 80119e4:	e018      	b.n	8011a18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	e853 3f00 	ldrex	r3, [r3]
 80119f2:	613b      	str	r3, [r7, #16]
   return(result);
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	f043 0320 	orr.w	r3, r3, #32
 80119fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	461a      	mov	r2, r3
 8011a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a04:	623b      	str	r3, [r7, #32]
 8011a06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a08:	69f9      	ldr	r1, [r7, #28]
 8011a0a:	6a3a      	ldr	r2, [r7, #32]
 8011a0c:	e841 2300 	strex	r3, r2, [r1]
 8011a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d1e6      	bne.n	80119e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	378c      	adds	r7, #140	; 0x8c
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	0801240d 	.word	0x0801240d
 8011a2c:	080120ad 	.word	0x080120ad
 8011a30:	08011ef5 	.word	0x08011ef5
 8011a34:	08011d3d 	.word	0x08011d3d

08011a38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b08f      	sub	sp, #60	; 0x3c
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	e853 3f00 	ldrex	r3, [r3]
 8011a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011a54:	637b      	str	r3, [r7, #52]	; 0x34
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a60:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a66:	e841 2300 	strex	r3, r2, [r1]
 8011a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1e6      	bne.n	8011a40 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	3308      	adds	r3, #8
 8011a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	e853 3f00 	ldrex	r3, [r3]
 8011a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011a88:	633b      	str	r3, [r7, #48]	; 0x30
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3308      	adds	r3, #8
 8011a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a92:	61ba      	str	r2, [r7, #24]
 8011a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a96:	6979      	ldr	r1, [r7, #20]
 8011a98:	69ba      	ldr	r2, [r7, #24]
 8011a9a:	e841 2300 	strex	r3, r2, [r1]
 8011a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1e5      	bne.n	8011a72 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2220      	movs	r2, #32
 8011aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011aae:	bf00      	nop
 8011ab0:	373c      	adds	r7, #60	; 0x3c
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
	...

08011abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b095      	sub	sp, #84	; 0x54
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011acc:	e853 3f00 	ldrex	r3, [r3]
 8011ad0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	461a      	mov	r2, r3
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ae4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011aea:	e841 2300 	strex	r3, r2, [r1]
 8011aee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1e6      	bne.n	8011ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3308      	adds	r3, #8
 8011afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011afe:	6a3b      	ldr	r3, [r7, #32]
 8011b00:	e853 3f00 	ldrex	r3, [r3]
 8011b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b06:	69fa      	ldr	r2, [r7, #28]
 8011b08:	4b1e      	ldr	r3, [pc, #120]	; (8011b84 <UART_EndRxTransfer+0xc8>)
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	3308      	adds	r3, #8
 8011b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011b18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b1e:	e841 2300 	strex	r3, r2, [r1]
 8011b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1e5      	bne.n	8011af6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d118      	bne.n	8011b64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	e853 3f00 	ldrex	r3, [r3]
 8011b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	f023 0310 	bic.w	r3, r3, #16
 8011b46:	647b      	str	r3, [r7, #68]	; 0x44
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b50:	61bb      	str	r3, [r7, #24]
 8011b52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b54:	6979      	ldr	r1, [r7, #20]
 8011b56:	69ba      	ldr	r2, [r7, #24]
 8011b58:	e841 2300 	strex	r3, r2, [r1]
 8011b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1e6      	bne.n	8011b32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2220      	movs	r2, #32
 8011b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b78:	bf00      	nop
 8011b7a:	3754      	adds	r7, #84	; 0x54
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	effffffe 	.word	0xeffffffe

08011b88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b090      	sub	sp, #64	; 0x40
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b94:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	69db      	ldr	r3, [r3, #28]
 8011b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b9e:	d037      	beq.n	8011c10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	3308      	adds	r3, #8
 8011bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	e853 3f00 	ldrex	r3, [r3]
 8011bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8011bb8:	6a3b      	ldr	r3, [r7, #32]
 8011bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	3308      	adds	r3, #8
 8011bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8011bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bd0:	e841 2300 	strex	r3, r2, [r1]
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d1e5      	bne.n	8011ba8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	e853 3f00 	ldrex	r3, [r3]
 8011be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8011bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfa:	61fb      	str	r3, [r7, #28]
 8011bfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfe:	69b9      	ldr	r1, [r7, #24]
 8011c00:	69fa      	ldr	r2, [r7, #28]
 8011c02:	e841 2300 	strex	r3, r2, [r1]
 8011c06:	617b      	str	r3, [r7, #20]
   return(result);
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1e6      	bne.n	8011bdc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c0e:	e002      	b.n	8011c16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011c10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c12:	f7f0 f9df 	bl	8001fd4 <HAL_UART_TxCpltCallback>
}
 8011c16:	bf00      	nop
 8011c18:	3740      	adds	r7, #64	; 0x40
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b084      	sub	sp, #16
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f7fe fe9f 	bl	8010970 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c32:	bf00      	nop
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b086      	sub	sp, #24
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c62:	2b80      	cmp	r3, #128	; 0x80
 8011c64:	d109      	bne.n	8011c7a <UART_DMAError+0x40>
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	2b21      	cmp	r3, #33	; 0x21
 8011c6a:	d106      	bne.n	8011c7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011c74:	6978      	ldr	r0, [r7, #20]
 8011c76:	f7ff fedf 	bl	8011a38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c84:	2b40      	cmp	r3, #64	; 0x40
 8011c86:	d109      	bne.n	8011c9c <UART_DMAError+0x62>
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2b22      	cmp	r3, #34	; 0x22
 8011c8c:	d106      	bne.n	8011c9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011c96:	6978      	ldr	r0, [r7, #20]
 8011c98:	f7ff ff10 	bl	8011abc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ca2:	f043 0210 	orr.w	r2, r3, #16
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011cac:	6978      	ldr	r0, [r7, #20]
 8011cae:	f7fe fe69 	bl	8010984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cb2:	bf00      	nop
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7fe fe53 	bl	8010984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cde:	bf00      	nop
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b088      	sub	sp, #32
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	e853 3f00 	ldrex	r3, [r3]
 8011cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d02:	61fb      	str	r3, [r7, #28]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	61bb      	str	r3, [r7, #24]
 8011d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d10:	6979      	ldr	r1, [r7, #20]
 8011d12:	69ba      	ldr	r2, [r7, #24]
 8011d14:	e841 2300 	strex	r3, r2, [r1]
 8011d18:	613b      	str	r3, [r7, #16]
   return(result);
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d1e6      	bne.n	8011cee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2220      	movs	r2, #32
 8011d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7f0 f950 	bl	8001fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d34:	bf00      	nop
 8011d36:	3720      	adds	r7, #32
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b09c      	sub	sp, #112	; 0x70
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d54:	2b22      	cmp	r3, #34	; 0x22
 8011d56:	f040 80be 	bne.w	8011ed6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011d64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011d68:	b2d9      	uxtb	r1, r3
 8011d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d74:	400a      	ands	r2, r1
 8011d76:	b2d2      	uxtb	r2, r2
 8011d78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	3b01      	subs	r3, #1
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 80a1 	bne.w	8011ee6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dac:	e853 3f00 	ldrex	r3, [r3]
 8011db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011dc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011dca:	e841 2300 	strex	r3, r2, [r1]
 8011dce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1e6      	bne.n	8011da4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3308      	adds	r3, #8
 8011ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de0:	e853 3f00 	ldrex	r3, [r3]
 8011de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de8:	f023 0301 	bic.w	r3, r3, #1
 8011dec:	667b      	str	r3, [r7, #100]	; 0x64
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011df6:	647a      	str	r2, [r7, #68]	; 0x44
 8011df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dfe:	e841 2300 	strex	r3, r2, [r1]
 8011e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1e5      	bne.n	8011dd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2220      	movs	r2, #32
 8011e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4a33      	ldr	r2, [pc, #204]	; (8011ef0 <UART_RxISR_8BIT+0x1b4>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d01f      	beq.n	8011e68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d018      	beq.n	8011e68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3e:	e853 3f00 	ldrex	r3, [r3]
 8011e42:	623b      	str	r3, [r7, #32]
   return(result);
 8011e44:	6a3b      	ldr	r3, [r7, #32]
 8011e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	461a      	mov	r2, r3
 8011e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e54:	633b      	str	r3, [r7, #48]	; 0x30
 8011e56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e5c:	e841 2300 	strex	r3, r2, [r1]
 8011e60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1e6      	bne.n	8011e36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d12e      	bne.n	8011ece <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	e853 3f00 	ldrex	r3, [r3]
 8011e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f023 0310 	bic.w	r3, r3, #16
 8011e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	461a      	mov	r2, r3
 8011e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e94:	61fb      	str	r3, [r7, #28]
 8011e96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e98:	69b9      	ldr	r1, [r7, #24]
 8011e9a:	69fa      	ldr	r2, [r7, #28]
 8011e9c:	e841 2300 	strex	r3, r2, [r1]
 8011ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1e6      	bne.n	8011e76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	69db      	ldr	r3, [r3, #28]
 8011eae:	f003 0310 	and.w	r3, r3, #16
 8011eb2:	2b10      	cmp	r3, #16
 8011eb4:	d103      	bne.n	8011ebe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2210      	movs	r2, #16
 8011ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7fe fd66 	bl	8010998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ecc:	e00b      	b.n	8011ee6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ee fbc4 	bl	800065c <HAL_UART_RxCpltCallback>
}
 8011ed4:	e007      	b.n	8011ee6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	699a      	ldr	r2, [r3, #24]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f042 0208 	orr.w	r2, r2, #8
 8011ee4:	619a      	str	r2, [r3, #24]
}
 8011ee6:	bf00      	nop
 8011ee8:	3770      	adds	r7, #112	; 0x70
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	58000c00 	.word	0x58000c00

08011ef4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b09c      	sub	sp, #112	; 0x70
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f0c:	2b22      	cmp	r3, #34	; 0x22
 8011f0e:	f040 80be 	bne.w	801208e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f20:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011f22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011f26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011f2a:	4013      	ands	r3, r2
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f36:	1c9a      	adds	r2, r3, #2
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	3b01      	subs	r3, #1
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f040 80a1 	bne.w	801209e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f64:	e853 3f00 	ldrex	r3, [r3]
 8011f68:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f70:	667b      	str	r3, [r7, #100]	; 0x64
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	461a      	mov	r2, r3
 8011f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8011f7c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f82:	e841 2300 	strex	r3, r2, [r1]
 8011f86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1e6      	bne.n	8011f5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3308      	adds	r3, #8
 8011f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f98:	e853 3f00 	ldrex	r3, [r3]
 8011f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	f023 0301 	bic.w	r3, r3, #1
 8011fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	3308      	adds	r3, #8
 8011fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011fae:	643a      	str	r2, [r7, #64]	; 0x40
 8011fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011fb6:	e841 2300 	strex	r3, r2, [r1]
 8011fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1e5      	bne.n	8011f8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2220      	movs	r2, #32
 8011fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a33      	ldr	r2, [pc, #204]	; (80120a8 <UART_RxISR_16BIT+0x1b4>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d01f      	beq.n	8012020 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d018      	beq.n	8012020 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff4:	6a3b      	ldr	r3, [r7, #32]
 8011ff6:	e853 3f00 	ldrex	r3, [r3]
 8011ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801200c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801200e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012014:	e841 2300 	strex	r3, r2, [r1]
 8012018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1e6      	bne.n	8011fee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012024:	2b01      	cmp	r3, #1
 8012026:	d12e      	bne.n	8012086 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	e853 3f00 	ldrex	r3, [r3]
 801203a:	60bb      	str	r3, [r7, #8]
   return(result);
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	f023 0310 	bic.w	r3, r3, #16
 8012042:	65bb      	str	r3, [r7, #88]	; 0x58
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	461a      	mov	r2, r3
 801204a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801204c:	61bb      	str	r3, [r7, #24]
 801204e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012050:	6979      	ldr	r1, [r7, #20]
 8012052:	69ba      	ldr	r2, [r7, #24]
 8012054:	e841 2300 	strex	r3, r2, [r1]
 8012058:	613b      	str	r3, [r7, #16]
   return(result);
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1e6      	bne.n	801202e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	69db      	ldr	r3, [r3, #28]
 8012066:	f003 0310 	and.w	r3, r3, #16
 801206a:	2b10      	cmp	r3, #16
 801206c:	d103      	bne.n	8012076 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2210      	movs	r2, #16
 8012074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801207c:	4619      	mov	r1, r3
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7fe fc8a 	bl	8010998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012084:	e00b      	b.n	801209e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7ee fae8 	bl	800065c <HAL_UART_RxCpltCallback>
}
 801208c:	e007      	b.n	801209e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	699a      	ldr	r2, [r3, #24]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f042 0208 	orr.w	r2, r2, #8
 801209c:	619a      	str	r2, [r3, #24]
}
 801209e:	bf00      	nop
 80120a0:	3770      	adds	r7, #112	; 0x70
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	58000c00 	.word	0x58000c00

080120ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b0ac      	sub	sp, #176	; 0xb0
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	69db      	ldr	r3, [r3, #28]
 80120c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120e2:	2b22      	cmp	r3, #34	; 0x22
 80120e4:	f040 8180 	bne.w	80123e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120f2:	e123      	b.n	801233c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012102:	b2d9      	uxtb	r1, r3
 8012104:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012108:	b2da      	uxtb	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801210e:	400a      	ands	r2, r1
 8012110:	b2d2      	uxtb	r2, r2
 8012112:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012118:	1c5a      	adds	r2, r3, #1
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012124:	b29b      	uxth	r3, r3
 8012126:	3b01      	subs	r3, #1
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	69db      	ldr	r3, [r3, #28]
 8012136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801213a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801213e:	f003 0307 	and.w	r3, r3, #7
 8012142:	2b00      	cmp	r3, #0
 8012144:	d053      	beq.n	80121ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801214a:	f003 0301 	and.w	r3, r3, #1
 801214e:	2b00      	cmp	r3, #0
 8012150:	d011      	beq.n	8012176 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2201      	movs	r2, #1
 8012164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801216c:	f043 0201 	orr.w	r2, r3, #1
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801217a:	f003 0302 	and.w	r3, r3, #2
 801217e:	2b00      	cmp	r3, #0
 8012180:	d011      	beq.n	80121a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012186:	f003 0301 	and.w	r3, r3, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00b      	beq.n	80121a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2202      	movs	r2, #2
 8012194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801219c:	f043 0204 	orr.w	r2, r3, #4
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80121a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d011      	beq.n	80121d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80121b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121b6:	f003 0301 	and.w	r3, r3, #1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00b      	beq.n	80121d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2204      	movs	r2, #4
 80121c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121cc:	f043 0202 	orr.w	r2, r3, #2
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d006      	beq.n	80121ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7fe fbcf 	bl	8010984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f040 80a0 	bne.w	801233c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012204:	e853 3f00 	ldrex	r3, [r3]
 8012208:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	461a      	mov	r2, r3
 801221a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801221e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012220:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012222:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012224:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012226:	e841 2300 	strex	r3, r2, [r1]
 801222a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801222e:	2b00      	cmp	r3, #0
 8012230:	d1e4      	bne.n	80121fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	3308      	adds	r3, #8
 8012238:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801223a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801223c:	e853 3f00 	ldrex	r3, [r3]
 8012240:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012244:	4b6e      	ldr	r3, [pc, #440]	; (8012400 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012246:	4013      	ands	r3, r2
 8012248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3308      	adds	r3, #8
 8012252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012256:	66ba      	str	r2, [r7, #104]	; 0x68
 8012258:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801225a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801225c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801225e:	e841 2300 	strex	r3, r2, [r1]
 8012262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1e3      	bne.n	8012232 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2220      	movs	r2, #32
 801226e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	4a60      	ldr	r2, [pc, #384]	; (8012404 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012284:	4293      	cmp	r3, r2
 8012286:	d021      	beq.n	80122cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012292:	2b00      	cmp	r3, #0
 8012294:	d01a      	beq.n	80122cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801229e:	e853 3f00 	ldrex	r3, [r3]
 80122a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80122aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80122b8:	657b      	str	r3, [r7, #84]	; 0x54
 80122ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122c0:	e841 2300 	strex	r3, r2, [r1]
 80122c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1e4      	bne.n	8012296 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d130      	bne.n	8012336 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	e853 3f00 	ldrex	r3, [r3]
 80122e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ea:	f023 0310 	bic.w	r3, r3, #16
 80122ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80122fc:	643b      	str	r3, [r7, #64]	; 0x40
 80122fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012304:	e841 2300 	strex	r3, r2, [r1]
 8012308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	2b00      	cmp	r3, #0
 801230e:	d1e4      	bne.n	80122da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	69db      	ldr	r3, [r3, #28]
 8012316:	f003 0310 	and.w	r3, r3, #16
 801231a:	2b10      	cmp	r3, #16
 801231c:	d103      	bne.n	8012326 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2210      	movs	r2, #16
 8012324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801232c:	4619      	mov	r1, r3
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f7fe fb32 	bl	8010998 <HAL_UARTEx_RxEventCallback>
 8012334:	e002      	b.n	801233c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7ee f990 	bl	800065c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801233c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012340:	2b00      	cmp	r3, #0
 8012342:	d006      	beq.n	8012352 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012348:	f003 0320 	and.w	r3, r3, #32
 801234c:	2b00      	cmp	r3, #0
 801234e:	f47f aed1 	bne.w	80120f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012358:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801235c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012360:	2b00      	cmp	r3, #0
 8012362:	d049      	beq.n	80123f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801236a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801236e:	429a      	cmp	r2, r3
 8012370:	d242      	bcs.n	80123f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	3308      	adds	r3, #8
 8012378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	e853 3f00 	ldrex	r3, [r3]
 8012380:	61fb      	str	r3, [r7, #28]
   return(result);
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	3308      	adds	r3, #8
 8012392:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801239e:	e841 2300 	strex	r3, r2, [r1]
 80123a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1e3      	bne.n	8012372 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4a16      	ldr	r2, [pc, #88]	; (8012408 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80123ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	e853 3f00 	ldrex	r3, [r3]
 80123bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	f043 0320 	orr.w	r3, r3, #32
 80123c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	461a      	mov	r2, r3
 80123ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80123d2:	61bb      	str	r3, [r7, #24]
 80123d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d6:	6979      	ldr	r1, [r7, #20]
 80123d8:	69ba      	ldr	r2, [r7, #24]
 80123da:	e841 2300 	strex	r3, r2, [r1]
 80123de:	613b      	str	r3, [r7, #16]
   return(result);
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d1e4      	bne.n	80123b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123e6:	e007      	b.n	80123f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	699a      	ldr	r2, [r3, #24]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f042 0208 	orr.w	r2, r2, #8
 80123f6:	619a      	str	r2, [r3, #24]
}
 80123f8:	bf00      	nop
 80123fa:	37b0      	adds	r7, #176	; 0xb0
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	effffffe 	.word	0xeffffffe
 8012404:	58000c00 	.word	0x58000c00
 8012408:	08011d3d 	.word	0x08011d3d

0801240c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b0ae      	sub	sp, #184	; 0xb8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801241a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012442:	2b22      	cmp	r3, #34	; 0x22
 8012444:	f040 8184 	bne.w	8012750 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801244e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012452:	e127      	b.n	80126a4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012466:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801246a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801246e:	4013      	ands	r3, r2
 8012470:	b29a      	uxth	r2, r3
 8012472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801247c:	1c9a      	adds	r2, r3, #2
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012488:	b29b      	uxth	r3, r3
 801248a:	3b01      	subs	r3, #1
 801248c:	b29a      	uxth	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	69db      	ldr	r3, [r3, #28]
 801249a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801249e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124a2:	f003 0307 	and.w	r3, r3, #7
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d053      	beq.n	8012552 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80124aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124ae:	f003 0301 	and.w	r3, r3, #1
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d011      	beq.n	80124da <UART_RxISR_16BIT_FIFOEN+0xce>
 80124b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00b      	beq.n	80124da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2201      	movs	r2, #1
 80124c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d0:	f043 0201 	orr.w	r2, r3, #1
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124de:	f003 0302 	and.w	r3, r3, #2
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d011      	beq.n	801250a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80124e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124ea:	f003 0301 	and.w	r3, r3, #1
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d00b      	beq.n	801250a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2202      	movs	r2, #2
 80124f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012500:	f043 0204 	orr.w	r2, r3, #4
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801250a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801250e:	f003 0304 	and.w	r3, r3, #4
 8012512:	2b00      	cmp	r3, #0
 8012514:	d011      	beq.n	801253a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801251a:	f003 0301 	and.w	r3, r3, #1
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2204      	movs	r2, #4
 8012528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012530:	f043 0202 	orr.w	r2, r3, #2
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012540:	2b00      	cmp	r3, #0
 8012542:	d006      	beq.n	8012552 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f7fe fa1d 	bl	8010984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2200      	movs	r2, #0
 801254e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012558:	b29b      	uxth	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	f040 80a2 	bne.w	80126a4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012568:	e853 3f00 	ldrex	r3, [r3]
 801256c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801256e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	461a      	mov	r2, r3
 801257e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012586:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012588:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801258a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801258e:	e841 2300 	strex	r3, r2, [r1]
 8012592:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1e2      	bne.n	8012560 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	3308      	adds	r3, #8
 80125a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125a4:	e853 3f00 	ldrex	r3, [r3]
 80125a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80125aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80125ac:	4b6e      	ldr	r3, [pc, #440]	; (8012768 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80125ae:	4013      	ands	r3, r2
 80125b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3308      	adds	r3, #8
 80125ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80125be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80125c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80125c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80125c6:	e841 2300 	strex	r3, r2, [r1]
 80125ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80125cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1e3      	bne.n	801259a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2220      	movs	r2, #32
 80125d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2200      	movs	r2, #0
 80125de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4a60      	ldr	r2, [pc, #384]	; (801276c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d021      	beq.n	8012634 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d01a      	beq.n	8012634 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012606:	e853 3f00 	ldrex	r3, [r3]
 801260a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801260c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801260e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	461a      	mov	r2, r3
 801261c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012620:	65bb      	str	r3, [r7, #88]	; 0x58
 8012622:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012628:	e841 2300 	strex	r3, r2, [r1]
 801262c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1e4      	bne.n	80125fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012638:	2b01      	cmp	r3, #1
 801263a:	d130      	bne.n	801269e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2200      	movs	r2, #0
 8012640:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264a:	e853 3f00 	ldrex	r3, [r3]
 801264e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012652:	f023 0310 	bic.w	r3, r3, #16
 8012656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012664:	647b      	str	r3, [r7, #68]	; 0x44
 8012666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801266a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801266c:	e841 2300 	strex	r3, r2, [r1]
 8012670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1e4      	bne.n	8012642 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	69db      	ldr	r3, [r3, #28]
 801267e:	f003 0310 	and.w	r3, r3, #16
 8012682:	2b10      	cmp	r3, #16
 8012684:	d103      	bne.n	801268e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2210      	movs	r2, #16
 801268c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7fe f97e 	bl	8010998 <HAL_UARTEx_RxEventCallback>
 801269c:	e002      	b.n	80126a4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ed ffdc 	bl	800065c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d006      	beq.n	80126ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80126ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80126b0:	f003 0320 	and.w	r3, r3, #32
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f47f aecd 	bne.w	8012454 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80126c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d049      	beq.n	8012760 <UART_RxISR_16BIT_FIFOEN+0x354>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d242      	bcs.n	8012760 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3308      	adds	r3, #8
 80126e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e4:	e853 3f00 	ldrex	r3, [r3]
 80126e8:	623b      	str	r3, [r7, #32]
   return(result);
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	3308      	adds	r3, #8
 80126fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80126fe:	633a      	str	r2, [r7, #48]	; 0x30
 8012700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012706:	e841 2300 	strex	r3, r2, [r1]
 801270a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270e:	2b00      	cmp	r3, #0
 8012710:	d1e3      	bne.n	80126da <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4a16      	ldr	r2, [pc, #88]	; (8012770 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012716:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	e853 3f00 	ldrex	r3, [r3]
 8012724:	60fb      	str	r3, [r7, #12]
   return(result);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f043 0320 	orr.w	r3, r3, #32
 801272c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	461a      	mov	r2, r3
 8012736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801273a:	61fb      	str	r3, [r7, #28]
 801273c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801273e:	69b9      	ldr	r1, [r7, #24]
 8012740:	69fa      	ldr	r2, [r7, #28]
 8012742:	e841 2300 	strex	r3, r2, [r1]
 8012746:	617b      	str	r3, [r7, #20]
   return(result);
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1e4      	bne.n	8012718 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801274e:	e007      	b.n	8012760 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	699a      	ldr	r2, [r3, #24]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f042 0208 	orr.w	r2, r2, #8
 801275e:	619a      	str	r2, [r3, #24]
}
 8012760:	bf00      	nop
 8012762:	37b8      	adds	r7, #184	; 0xb8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	effffffe 	.word	0xeffffffe
 801276c:	58000c00 	.word	0x58000c00
 8012770:	08011ef5 	.word	0x08011ef5

08012774 <HAL_UARTEx_WakeupCallback>:
/**
 * @brief UART wakeup from Stop mode callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_WakeupCallback can be implemented in the user file.
	 */
}
 801277c:	bf00      	nop
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <HAL_UARTEx_RxFifoFullCallback>:
/**
 * @brief  UART RX Fifo full callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart) {
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
	 */
}
 8012790:	bf00      	nop
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <HAL_UARTEx_TxFifoEmptyCallback>:
/**
 * @brief  UART TX Fifo empty callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart) {
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
	 */
}
 80127a4:	bf00      	nop
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <HAL_UARTEx_DisableFifoMode>:
/**
 * @brief  Disable the FIFO mode.
 * @param huart      UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart) {
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]

	/* Check parameters */
	assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

	/* Process Locked */
	__HAL_LOCK(huart);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d101      	bne.n	80127c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80127c2:	2302      	movs	r3, #2
 80127c4:	e027      	b.n	8012816 <HAL_UARTEx_DisableFifoMode+0x66>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2201      	movs	r2, #1
 80127ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	huart->gState = HAL_UART_STATE_BUSY;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2224      	movs	r2, #36	; 0x24
 80127d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Save actual UART configuration */
	tmpcr1 = READ_REG(huart->Instance->CR1);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	60fb      	str	r3, [r7, #12]

	/* Disable UART */
	__HAL_UART_DISABLE(huart);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f022 0201 	bic.w	r2, r2, #1
 80127ec:	601a      	str	r2, [r3, #0]

	/* Enable FIFO mode */
	CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80127f4:	60fb      	str	r3, [r7, #12]
	huart->FifoMode = UART_FIFOMODE_DISABLE;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	665a      	str	r2, [r3, #100]	; 0x64

	/* Restore UART configuration */
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	601a      	str	r2, [r3, #0]

	huart->gState = HAL_UART_STATE_READY;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2220      	movs	r2, #32
 8012808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Process Unlocked */
	__HAL_UNLOCK(huart);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	return HAL_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <HAL_UARTEx_SetTxFifoThreshold>:
 *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart,
		uint32_t Threshold) {
 8012822:	b580      	push	{r7, lr}
 8012824:	b084      	sub	sp, #16
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	6039      	str	r1, [r7, #0]
	/* Check parameters */
	assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
	assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

	/* Process Locked */
	__HAL_LOCK(huart);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012832:	2b01      	cmp	r3, #1
 8012834:	d101      	bne.n	801283a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012836:	2302      	movs	r3, #2
 8012838:	e02d      	b.n	8012896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2201      	movs	r2, #1
 801283e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	huart->gState = HAL_UART_STATE_BUSY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2224      	movs	r2, #36	; 0x24
 8012846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Save actual UART configuration */
	tmpcr1 = READ_REG(huart->Instance->CR1);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	60fb      	str	r3, [r7, #12]

	/* Disable UART */
	__HAL_UART_DISABLE(huart);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f022 0201 	bic.w	r2, r2, #1
 8012860:	601a      	str	r2, [r3, #0]

	/* Update TX threshold configuration */
	MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	430a      	orrs	r2, r1
 8012874:	609a      	str	r2, [r3, #8]

	/* Determine the number of data to process during RX/TX ISR execution */
	UARTEx_SetNbDataToProcess(huart);
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 f850 	bl	801291c <UARTEx_SetNbDataToProcess>

	/* Restore UART configuration */
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	601a      	str	r2, [r3, #0]

	huart->gState = HAL_UART_STATE_READY;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2220      	movs	r2, #32
 8012888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Process Unlocked */
	__HAL_UNLOCK(huart);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	return HAL_OK;
 8012894:	2300      	movs	r3, #0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <HAL_UARTEx_SetRxFifoThreshold>:
 *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart,
		uint32_t Threshold) {
 801289e:	b580      	push	{r7, lr}
 80128a0:	b084      	sub	sp, #16
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
 80128a6:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
	assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

	/* Process Locked */
	__HAL_LOCK(huart);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d101      	bne.n	80128b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80128b2:	2302      	movs	r3, #2
 80128b4:	e02d      	b.n	8012912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2201      	movs	r2, #1
 80128ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	huart->gState = HAL_UART_STATE_BUSY;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2224      	movs	r2, #36	; 0x24
 80128c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Save actual UART configuration */
	tmpcr1 = READ_REG(huart->Instance->CR1);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	60fb      	str	r3, [r7, #12]

	/* Disable UART */
	__HAL_UART_DISABLE(huart);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f022 0201 	bic.w	r2, r2, #1
 80128dc:	601a      	str	r2, [r3, #0]

	/* Update RX threshold configuration */
	MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	689b      	ldr	r3, [r3, #8]
 80128e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	430a      	orrs	r2, r1
 80128f0:	609a      	str	r2, [r3, #8]

	/* Determine the number of data to process during RX/TX ISR execution */
	UARTEx_SetNbDataToProcess(huart);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f812 	bl	801291c <UARTEx_SetNbDataToProcess>

	/* Restore UART configuration */
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	601a      	str	r2, [r3, #0]

	huart->gState = HAL_UART_STATE_READY;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2220      	movs	r2, #32
 8012904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* Process Unlocked */
	__HAL_UNLOCK(huart);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	return HAL_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
	...

0801291c <UARTEx_SetNbDataToProcess>:
 * @note The RX FIFO depth and the TX FIFO depth is extracted from
 *       the UART configuration registers.
 * @param huart UART handle.
 * @retval None
 */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart) {
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
	uint8_t rx_fifo_threshold;
	uint8_t tx_fifo_threshold;
	static const uint8_t numerator[] = { 1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U };
	static const uint8_t denominator[] = { 8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U };

	if (huart->FifoMode == UART_FIFOMODE_DISABLE) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012928:	2b00      	cmp	r3, #0
 801292a:	d108      	bne.n	801293e <UARTEx_SetNbDataToProcess+0x22>
		huart->NbTxDataToProcess = 1U;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2201      	movs	r2, #1
 8012930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		huart->NbRxDataToProcess = 1U;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2201      	movs	r2, #1
 8012938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				/ (uint16_t) denominator[tx_fifo_threshold];
		huart->NbRxDataToProcess = ((uint16_t) rx_fifo_depth
				* numerator[rx_fifo_threshold])
				/ (uint16_t) denominator[rx_fifo_threshold];
	}
}
 801293c:	e031      	b.n	80129a2 <UARTEx_SetNbDataToProcess+0x86>
		rx_fifo_depth = RX_FIFO_DEPTH;
 801293e:	2310      	movs	r3, #16
 8012940:	73fb      	strb	r3, [r7, #15]
		tx_fifo_depth = TX_FIFO_DEPTH;
 8012942:	2310      	movs	r3, #16
 8012944:	73bb      	strb	r3, [r7, #14]
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	689b      	ldr	r3, [r3, #8]
						>> USART_CR3_RXFTCFG_Pos);
 801294c:	0e5b      	lsrs	r3, r3, #25
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG)
 801294e:	b2db      	uxtb	r3, r3
		rx_fifo_threshold =
 8012950:	f003 0307 	and.w	r3, r3, #7
 8012954:	737b      	strb	r3, [r7, #13]
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	689b      	ldr	r3, [r3, #8]
						>> USART_CR3_TXFTCFG_Pos);
 801295c:	0f5b      	lsrs	r3, r3, #29
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG)
 801295e:	b2db      	uxtb	r3, r3
		tx_fifo_threshold =
 8012960:	f003 0307 	and.w	r3, r3, #7
 8012964:	733b      	strb	r3, [r7, #12]
		huart->NbTxDataToProcess = ((uint16_t) tx_fifo_depth
 8012966:	7bbb      	ldrb	r3, [r7, #14]
				* numerator[tx_fifo_threshold])
 8012968:	7b3a      	ldrb	r2, [r7, #12]
 801296a:	4911      	ldr	r1, [pc, #68]	; (80129b0 <UARTEx_SetNbDataToProcess+0x94>)
 801296c:	5c8a      	ldrb	r2, [r1, r2]
 801296e:	fb02 f303 	mul.w	r3, r2, r3
				/ (uint16_t) denominator[tx_fifo_threshold];
 8012972:	7b3a      	ldrb	r2, [r7, #12]
 8012974:	490f      	ldr	r1, [pc, #60]	; (80129b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012976:	5c8a      	ldrb	r2, [r1, r2]
 8012978:	fb93 f3f2 	sdiv	r3, r3, r2
		huart->NbTxDataToProcess = ((uint16_t) tx_fifo_depth
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		huart->NbRxDataToProcess = ((uint16_t) rx_fifo_depth
 8012984:	7bfb      	ldrb	r3, [r7, #15]
				* numerator[rx_fifo_threshold])
 8012986:	7b7a      	ldrb	r2, [r7, #13]
 8012988:	4909      	ldr	r1, [pc, #36]	; (80129b0 <UARTEx_SetNbDataToProcess+0x94>)
 801298a:	5c8a      	ldrb	r2, [r1, r2]
 801298c:	fb02 f303 	mul.w	r3, r2, r3
				/ (uint16_t) denominator[rx_fifo_threshold];
 8012990:	7b7a      	ldrb	r2, [r7, #13]
 8012992:	4908      	ldr	r1, [pc, #32]	; (80129b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012994:	5c8a      	ldrb	r2, [r1, r2]
 8012996:	fb93 f3f2 	sdiv	r3, r3, r2
		huart->NbRxDataToProcess = ((uint16_t) rx_fifo_depth
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80129a2:	bf00      	nop
 80129a4:	3714      	adds	r7, #20
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	08017154 	.word	0x08017154
 80129b4:	0801715c 	.word	0x0801715c

080129b8 <__NVIC_SetPriority>:
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	6039      	str	r1, [r7, #0]
 80129c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80129c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	db0a      	blt.n	80129e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	490c      	ldr	r1, [pc, #48]	; (8012a04 <__NVIC_SetPriority+0x4c>)
 80129d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129d6:	0112      	lsls	r2, r2, #4
 80129d8:	b2d2      	uxtb	r2, r2
 80129da:	440b      	add	r3, r1
 80129dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80129e0:	e00a      	b.n	80129f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	b2da      	uxtb	r2, r3
 80129e6:	4908      	ldr	r1, [pc, #32]	; (8012a08 <__NVIC_SetPriority+0x50>)
 80129e8:	88fb      	ldrh	r3, [r7, #6]
 80129ea:	f003 030f 	and.w	r3, r3, #15
 80129ee:	3b04      	subs	r3, #4
 80129f0:	0112      	lsls	r2, r2, #4
 80129f2:	b2d2      	uxtb	r2, r2
 80129f4:	440b      	add	r3, r1
 80129f6:	761a      	strb	r2, [r3, #24]
}
 80129f8:	bf00      	nop
 80129fa:	370c      	adds	r7, #12
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr
 8012a04:	e000e100 	.word	0xe000e100
 8012a08:	e000ed00 	.word	0xe000ed00

08012a0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012a10:	4b05      	ldr	r3, [pc, #20]	; (8012a28 <SysTick_Handler+0x1c>)
 8012a12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012a14:	f002 fbba 	bl	801518c <xTaskGetSchedulerState>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d001      	beq.n	8012a22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012a1e:	f003 f9db 	bl	8015dd8 <xPortSysTickHandler>
  }
}
 8012a22:	bf00      	nop
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	e000e010 	.word	0xe000e010

08012a2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012a30:	2100      	movs	r1, #0
 8012a32:	f06f 0004 	mvn.w	r0, #4
 8012a36:	f7ff ffbf 	bl	80129b8 <__NVIC_SetPriority>
#endif
}
 8012a3a:	bf00      	nop
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a46:	f3ef 8305 	mrs	r3, IPSR
 8012a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8012a4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d003      	beq.n	8012a5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012a52:	f06f 0305 	mvn.w	r3, #5
 8012a56:	607b      	str	r3, [r7, #4]
 8012a58:	e00c      	b.n	8012a74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012a5a:	4b0a      	ldr	r3, [pc, #40]	; (8012a84 <osKernelInitialize+0x44>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d105      	bne.n	8012a6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012a62:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <osKernelInitialize+0x44>)
 8012a64:	2201      	movs	r2, #1
 8012a66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	607b      	str	r3, [r7, #4]
 8012a6c:	e002      	b.n	8012a74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012a74:	687b      	ldr	r3, [r7, #4]
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	370c      	adds	r7, #12
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr
 8012a82:	bf00      	nop
 8012a84:	240010ac 	.word	0x240010ac

08012a88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a8e:	f3ef 8305 	mrs	r3, IPSR
 8012a92:	603b      	str	r3, [r7, #0]
  return(result);
 8012a94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d003      	beq.n	8012aa2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012a9a:	f06f 0305 	mvn.w	r3, #5
 8012a9e:	607b      	str	r3, [r7, #4]
 8012aa0:	e010      	b.n	8012ac4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012aa2:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <osKernelStart+0x48>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d109      	bne.n	8012abe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012aaa:	f7ff ffbf 	bl	8012a2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012aae:	4b08      	ldr	r3, [pc, #32]	; (8012ad0 <osKernelStart+0x48>)
 8012ab0:	2202      	movs	r2, #2
 8012ab2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012ab4:	f001 fe84 	bl	80147c0 <vTaskStartScheduler>
      stat = osOK;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	607b      	str	r3, [r7, #4]
 8012abc:	e002      	b.n	8012ac4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ac4:	687b      	ldr	r3, [r7, #4]
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3708      	adds	r7, #8
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	240010ac 	.word	0x240010ac

08012ad4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b08e      	sub	sp, #56	; 0x38
 8012ad8:	af04      	add	r7, sp, #16
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ae4:	f3ef 8305 	mrs	r3, IPSR
 8012ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8012aea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d17e      	bne.n	8012bee <osThreadNew+0x11a>
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d07b      	beq.n	8012bee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012af6:	2380      	movs	r3, #128	; 0x80
 8012af8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012afa:	2318      	movs	r3, #24
 8012afc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012afe:	2300      	movs	r3, #0
 8012b00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d045      	beq.n	8012b9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d002      	beq.n	8012b1c <osThreadNew+0x48>
        name = attr->name;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	699b      	ldr	r3, [r3, #24]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d008      	beq.n	8012b42 <osThreadNew+0x6e>
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	2b38      	cmp	r3, #56	; 0x38
 8012b34:	d805      	bhi.n	8012b42 <osThreadNew+0x6e>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	f003 0301 	and.w	r3, r3, #1
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <osThreadNew+0x72>
        return (NULL);
 8012b42:	2300      	movs	r3, #0
 8012b44:	e054      	b.n	8012bf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	695b      	ldr	r3, [r3, #20]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d003      	beq.n	8012b56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	695b      	ldr	r3, [r3, #20]
 8012b52:	089b      	lsrs	r3, r3, #2
 8012b54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	689b      	ldr	r3, [r3, #8]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d00e      	beq.n	8012b7c <osThreadNew+0xa8>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	2b5b      	cmp	r3, #91	; 0x5b
 8012b64:	d90a      	bls.n	8012b7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d006      	beq.n	8012b7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	695b      	ldr	r3, [r3, #20]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d002      	beq.n	8012b7c <osThreadNew+0xa8>
        mem = 1;
 8012b76:	2301      	movs	r3, #1
 8012b78:	61bb      	str	r3, [r7, #24]
 8012b7a:	e010      	b.n	8012b9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d10c      	bne.n	8012b9e <osThreadNew+0xca>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d108      	bne.n	8012b9e <osThreadNew+0xca>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d104      	bne.n	8012b9e <osThreadNew+0xca>
          mem = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	61bb      	str	r3, [r7, #24]
 8012b98:	e001      	b.n	8012b9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d110      	bne.n	8012bc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012bac:	9202      	str	r2, [sp, #8]
 8012bae:	9301      	str	r3, [sp, #4]
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	9300      	str	r3, [sp, #0]
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	6a3a      	ldr	r2, [r7, #32]
 8012bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bba:	68f8      	ldr	r0, [r7, #12]
 8012bbc:	f001 fb10 	bl	80141e0 <xTaskCreateStatic>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	613b      	str	r3, [r7, #16]
 8012bc4:	e013      	b.n	8012bee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d110      	bne.n	8012bee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	f107 0310 	add.w	r3, r7, #16
 8012bd4:	9301      	str	r3, [sp, #4]
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	9300      	str	r3, [sp, #0]
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f001 fb5b 	bl	801429a <xTaskCreate>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d001      	beq.n	8012bee <osThreadNew+0x11a>
            hTask = NULL;
 8012bea:	2300      	movs	r3, #0
 8012bec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012bee:	693b      	ldr	r3, [r7, #16]
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3728      	adds	r7, #40	; 0x28
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bfe:	f3ef 8305 	mrs	r3, IPSR
 8012c02:	603b      	str	r3, [r7, #0]
  return(result);
 8012c04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d003      	beq.n	8012c12 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012c0a:	f06f 0305 	mvn.w	r3, #5
 8012c0e:	607b      	str	r3, [r7, #4]
 8012c10:	e009      	b.n	8012c26 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012c12:	2300      	movs	r3, #0
 8012c14:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012c16:	4b07      	ldr	r3, [pc, #28]	; (8012c34 <osThreadYield+0x3c>)
 8012c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012c26:	687b      	ldr	r3, [r7, #4]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr
 8012c34:	e000ed04 	.word	0xe000ed04

08012c38 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b086      	sub	sp, #24
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c44:	f3ef 8305 	mrs	r3, IPSR
 8012c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d003      	beq.n	8012c58 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012c50:	f06f 0305 	mvn.w	r3, #5
 8012c54:	617b      	str	r3, [r7, #20]
 8012c56:	e00b      	b.n	8012c70 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d103      	bne.n	8012c66 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012c5e:	f06f 0303 	mvn.w	r3, #3
 8012c62:	617b      	str	r3, [r7, #20]
 8012c64:	e004      	b.n	8012c70 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012c66:	2300      	movs	r3, #0
 8012c68:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012c6a:	6938      	ldr	r0, [r7, #16]
 8012c6c:	f001 fc8e 	bl	801458c <vTaskSuspend>
  }

  return (stat);
 8012c70:	697b      	ldr	r3, [r7, #20]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3718      	adds	r7, #24
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b084      	sub	sp, #16
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c82:	f3ef 8305 	mrs	r3, IPSR
 8012c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d003      	beq.n	8012c96 <osDelay+0x1c>
    stat = osErrorISR;
 8012c8e:	f06f 0305 	mvn.w	r3, #5
 8012c92:	60fb      	str	r3, [r7, #12]
 8012c94:	e007      	b.n	8012ca6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012c96:	2300      	movs	r3, #0
 8012c98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f001 fc3f 	bl	8014524 <vTaskDelay>
    }
  }

  return (stat);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cbc:	f3ef 8305 	mrs	r3, IPSR
 8012cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012cc2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d12d      	bne.n	8012d24 <osEventFlagsNew+0x74>
    mem = -1;
 8012cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ccc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d015      	beq.n	8012d00 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d006      	beq.n	8012cea <osEventFlagsNew+0x3a>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	2b1f      	cmp	r3, #31
 8012ce2:	d902      	bls.n	8012cea <osEventFlagsNew+0x3a>
        mem = 1;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	613b      	str	r3, [r7, #16]
 8012ce8:	e00c      	b.n	8012d04 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d108      	bne.n	8012d04 <osEventFlagsNew+0x54>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d104      	bne.n	8012d04 <osEventFlagsNew+0x54>
          mem = 0;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	613b      	str	r3, [r7, #16]
 8012cfe:	e001      	b.n	8012d04 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d106      	bne.n	8012d18 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f000 fa1e 	bl	8013150 <xEventGroupCreateStatic>
 8012d14:	6178      	str	r0, [r7, #20]
 8012d16:	e005      	b.n	8012d24 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d102      	bne.n	8012d24 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012d1e:	f000 fa4e 	bl	80131be <xEventGroupCreate>
 8012d22:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012d24:	697b      	ldr	r3, [r7, #20]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3718      	adds	r7, #24
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
	...

08012d30 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d004      	beq.n	8012d4e <osEventFlagsSet+0x1e>
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d003      	beq.n	8012d56 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012d4e:	f06f 0303 	mvn.w	r3, #3
 8012d52:	617b      	str	r3, [r7, #20]
 8012d54:	e028      	b.n	8012da8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d56:	f3ef 8305 	mrs	r3, IPSR
 8012d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d01d      	beq.n	8012d9e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012d62:	2300      	movs	r3, #0
 8012d64:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012d66:	f107 0308 	add.w	r3, r7, #8
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	6839      	ldr	r1, [r7, #0]
 8012d6e:	6938      	ldr	r0, [r7, #16]
 8012d70:	f000 fbc8 	bl	8013504 <xEventGroupSetBitsFromISR>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d103      	bne.n	8012d82 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012d7a:	f06f 0302 	mvn.w	r3, #2
 8012d7e:	617b      	str	r3, [r7, #20]
 8012d80:	e012      	b.n	8012da8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00d      	beq.n	8012da8 <osEventFlagsSet+0x78>
 8012d8c:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <osEventFlagsSet+0x84>)
 8012d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d92:	601a      	str	r2, [r3, #0]
 8012d94:	f3bf 8f4f 	dsb	sy
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	e004      	b.n	8012da8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012d9e:	6839      	ldr	r1, [r7, #0]
 8012da0:	6938      	ldr	r0, [r7, #16]
 8012da2:	f000 faf5 	bl	8013390 <xEventGroupSetBits>
 8012da6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012da8:	697b      	ldr	r3, [r7, #20]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	e000ed04 	.word	0xe000ed04

08012db8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b08c      	sub	sp, #48	; 0x30
 8012dbc:	af02      	add	r7, sp, #8
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
 8012dc4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d004      	beq.n	8012dda <osEventFlagsWait+0x22>
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d003      	beq.n	8012de2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012dda:	f06f 0303 	mvn.w	r3, #3
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e04b      	b.n	8012e7a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012de2:	f3ef 8305 	mrs	r3, IPSR
 8012de6:	617b      	str	r3, [r7, #20]
  return(result);
 8012de8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d003      	beq.n	8012df6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012dee:	f06f 0305 	mvn.w	r3, #5
 8012df2:	61fb      	str	r3, [r7, #28]
 8012df4:	e041      	b.n	8012e7a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f003 0301 	and.w	r3, r3, #1
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d002      	beq.n	8012e06 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012e00:	2301      	movs	r3, #1
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
 8012e04:	e001      	b.n	8012e0a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012e06:	2300      	movs	r3, #0
 8012e08:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f003 0302 	and.w	r3, r3, #2
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	623b      	str	r3, [r7, #32]
 8012e18:	e001      	b.n	8012e1e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	9300      	str	r3, [sp, #0]
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	6a3a      	ldr	r2, [r7, #32]
 8012e26:	68b9      	ldr	r1, [r7, #8]
 8012e28:	69b8      	ldr	r0, [r7, #24]
 8012e2a:	f000 f9e3 	bl	80131f4 <xEventGroupWaitBits>
 8012e2e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f003 0301 	and.w	r3, r3, #1
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d010      	beq.n	8012e5c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	4013      	ands	r3, r2
 8012e40:	68ba      	ldr	r2, [r7, #8]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d019      	beq.n	8012e7a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d003      	beq.n	8012e54 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012e4c:	f06f 0301 	mvn.w	r3, #1
 8012e50:	61fb      	str	r3, [r7, #28]
 8012e52:	e012      	b.n	8012e7a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012e54:	f06f 0302 	mvn.w	r3, #2
 8012e58:	61fb      	str	r3, [r7, #28]
 8012e5a:	e00e      	b.n	8012e7a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012e5c:	68ba      	ldr	r2, [r7, #8]
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	4013      	ands	r3, r2
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d109      	bne.n	8012e7a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d003      	beq.n	8012e74 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012e6c:	f06f 0301 	mvn.w	r3, #1
 8012e70:	61fb      	str	r3, [r7, #28]
 8012e72:	e002      	b.n	8012e7a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012e74:	f06f 0302 	mvn.w	r3, #2
 8012e78:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012e7a:	69fb      	ldr	r3, [r7, #28]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3728      	adds	r7, #40	; 0x28
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b08a      	sub	sp, #40	; 0x28
 8012e88:	af02      	add	r7, sp, #8
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012e90:	2300      	movs	r3, #0
 8012e92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e94:	f3ef 8305 	mrs	r3, IPSR
 8012e98:	613b      	str	r3, [r7, #16]
  return(result);
 8012e9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d15f      	bne.n	8012f60 <osMessageQueueNew+0xdc>
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d05c      	beq.n	8012f60 <osMessageQueueNew+0xdc>
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d059      	beq.n	8012f60 <osMessageQueueNew+0xdc>
    mem = -1;
 8012eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d029      	beq.n	8012f0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d012      	beq.n	8012ee6 <osMessageQueueNew+0x62>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	68db      	ldr	r3, [r3, #12]
 8012ec4:	2b4f      	cmp	r3, #79	; 0x4f
 8012ec6:	d90e      	bls.n	8012ee6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00a      	beq.n	8012ee6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	695a      	ldr	r2, [r3, #20]
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	68b9      	ldr	r1, [r7, #8]
 8012ed8:	fb01 f303 	mul.w	r3, r1, r3
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d302      	bcc.n	8012ee6 <osMessageQueueNew+0x62>
        mem = 1;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	61bb      	str	r3, [r7, #24]
 8012ee4:	e014      	b.n	8012f10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d110      	bne.n	8012f10 <osMessageQueueNew+0x8c>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10c      	bne.n	8012f10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d108      	bne.n	8012f10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d104      	bne.n	8012f10 <osMessageQueueNew+0x8c>
          mem = 0;
 8012f06:	2300      	movs	r3, #0
 8012f08:	61bb      	str	r3, [r7, #24]
 8012f0a:	e001      	b.n	8012f10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d10b      	bne.n	8012f2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	691a      	ldr	r2, [r3, #16]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	2100      	movs	r1, #0
 8012f20:	9100      	str	r1, [sp, #0]
 8012f22:	68b9      	ldr	r1, [r7, #8]
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f000 fc1d 	bl	8013764 <xQueueGenericCreateStatic>
 8012f2a:	61f8      	str	r0, [r7, #28]
 8012f2c:	e008      	b.n	8012f40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d105      	bne.n	8012f40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012f34:	2200      	movs	r2, #0
 8012f36:	68b9      	ldr	r1, [r7, #8]
 8012f38:	68f8      	ldr	r0, [r7, #12]
 8012f3a:	f000 fc8b 	bl	8013854 <xQueueGenericCreate>
 8012f3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d00c      	beq.n	8012f60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d003      	beq.n	8012f54 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	617b      	str	r3, [r7, #20]
 8012f52:	e001      	b.n	8012f58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012f54:	2300      	movs	r3, #0
 8012f56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012f58:	6979      	ldr	r1, [r7, #20]
 8012f5a:	69f8      	ldr	r0, [r7, #28]
 8012f5c:	f001 f8e2 	bl	8014124 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012f60:	69fb      	ldr	r3, [r7, #28]
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3720      	adds	r7, #32
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
	...

08012f6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b088      	sub	sp, #32
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	60f8      	str	r0, [r7, #12]
 8012f74:	60b9      	str	r1, [r7, #8]
 8012f76:	603b      	str	r3, [r7, #0]
 8012f78:	4613      	mov	r3, r2
 8012f7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012f80:	2300      	movs	r3, #0
 8012f82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f84:	f3ef 8305 	mrs	r3, IPSR
 8012f88:	617b      	str	r3, [r7, #20]
  return(result);
 8012f8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d028      	beq.n	8012fe2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d005      	beq.n	8012fa2 <osMessageQueuePut+0x36>
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <osMessageQueuePut+0x36>
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d003      	beq.n	8012faa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012fa2:	f06f 0303 	mvn.w	r3, #3
 8012fa6:	61fb      	str	r3, [r7, #28]
 8012fa8:	e038      	b.n	801301c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012faa:	2300      	movs	r3, #0
 8012fac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012fae:	f107 0210 	add.w	r2, r7, #16
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	68b9      	ldr	r1, [r7, #8]
 8012fb6:	69b8      	ldr	r0, [r7, #24]
 8012fb8:	f000 fda8 	bl	8013b0c <xQueueGenericSendFromISR>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d003      	beq.n	8012fca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012fc2:	f06f 0302 	mvn.w	r3, #2
 8012fc6:	61fb      	str	r3, [r7, #28]
 8012fc8:	e028      	b.n	801301c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d025      	beq.n	801301c <osMessageQueuePut+0xb0>
 8012fd0:	4b15      	ldr	r3, [pc, #84]	; (8013028 <osMessageQueuePut+0xbc>)
 8012fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd6:	601a      	str	r2, [r3, #0]
 8012fd8:	f3bf 8f4f 	dsb	sy
 8012fdc:	f3bf 8f6f 	isb	sy
 8012fe0:	e01c      	b.n	801301c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <osMessageQueuePut+0x82>
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d103      	bne.n	8012ff6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012fee:	f06f 0303 	mvn.w	r3, #3
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	e012      	b.n	801301c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	68b9      	ldr	r1, [r7, #8]
 8012ffc:	69b8      	ldr	r0, [r7, #24]
 8012ffe:	f000 fc87 	bl	8013910 <xQueueGenericSend>
 8013002:	4603      	mov	r3, r0
 8013004:	2b01      	cmp	r3, #1
 8013006:	d009      	beq.n	801301c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d003      	beq.n	8013016 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801300e:	f06f 0301 	mvn.w	r3, #1
 8013012:	61fb      	str	r3, [r7, #28]
 8013014:	e002      	b.n	801301c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013016:	f06f 0302 	mvn.w	r3, #2
 801301a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801301c:	69fb      	ldr	r3, [r7, #28]
}
 801301e:	4618      	mov	r0, r3
 8013020:	3720      	adds	r7, #32
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	e000ed04 	.word	0xe000ed04

0801302c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801302c:	b580      	push	{r7, lr}
 801302e:	b088      	sub	sp, #32
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
 8013038:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801303e:	2300      	movs	r3, #0
 8013040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013042:	f3ef 8305 	mrs	r3, IPSR
 8013046:	617b      	str	r3, [r7, #20]
  return(result);
 8013048:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801304a:	2b00      	cmp	r3, #0
 801304c:	d028      	beq.n	80130a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d005      	beq.n	8013060 <osMessageQueueGet+0x34>
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d002      	beq.n	8013060 <osMessageQueueGet+0x34>
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d003      	beq.n	8013068 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013060:	f06f 0303 	mvn.w	r3, #3
 8013064:	61fb      	str	r3, [r7, #28]
 8013066:	e037      	b.n	80130d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013068:	2300      	movs	r3, #0
 801306a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801306c:	f107 0310 	add.w	r3, r7, #16
 8013070:	461a      	mov	r2, r3
 8013072:	68b9      	ldr	r1, [r7, #8]
 8013074:	69b8      	ldr	r0, [r7, #24]
 8013076:	f000 fec5 	bl	8013e04 <xQueueReceiveFromISR>
 801307a:	4603      	mov	r3, r0
 801307c:	2b01      	cmp	r3, #1
 801307e:	d003      	beq.n	8013088 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013080:	f06f 0302 	mvn.w	r3, #2
 8013084:	61fb      	str	r3, [r7, #28]
 8013086:	e027      	b.n	80130d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d024      	beq.n	80130d8 <osMessageQueueGet+0xac>
 801308e:	4b15      	ldr	r3, [pc, #84]	; (80130e4 <osMessageQueueGet+0xb8>)
 8013090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	f3bf 8f4f 	dsb	sy
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	e01b      	b.n	80130d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80130a0:	69bb      	ldr	r3, [r7, #24]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d002      	beq.n	80130ac <osMessageQueueGet+0x80>
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d103      	bne.n	80130b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80130ac:	f06f 0303 	mvn.w	r3, #3
 80130b0:	61fb      	str	r3, [r7, #28]
 80130b2:	e011      	b.n	80130d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80130b4:	683a      	ldr	r2, [r7, #0]
 80130b6:	68b9      	ldr	r1, [r7, #8]
 80130b8:	69b8      	ldr	r0, [r7, #24]
 80130ba:	f000 fdc3 	bl	8013c44 <xQueueReceive>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d009      	beq.n	80130d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d003      	beq.n	80130d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80130ca:	f06f 0301 	mvn.w	r3, #1
 80130ce:	61fb      	str	r3, [r7, #28]
 80130d0:	e002      	b.n	80130d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80130d2:	f06f 0302 	mvn.w	r3, #2
 80130d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80130d8:	69fb      	ldr	r3, [r7, #28]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3720      	adds	r7, #32
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	e000ed04 	.word	0xe000ed04

080130e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80130e8:	b480      	push	{r7}
 80130ea:	b085      	sub	sp, #20
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	4a07      	ldr	r2, [pc, #28]	; (8013114 <vApplicationGetIdleTaskMemory+0x2c>)
 80130f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	4a06      	ldr	r2, [pc, #24]	; (8013118 <vApplicationGetIdleTaskMemory+0x30>)
 80130fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2280      	movs	r2, #128	; 0x80
 8013104:	601a      	str	r2, [r3, #0]
}
 8013106:	bf00      	nop
 8013108:	3714      	adds	r7, #20
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	240010b0 	.word	0x240010b0
 8013118:	2400110c 	.word	0x2400110c

0801311c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	4a07      	ldr	r2, [pc, #28]	; (8013148 <vApplicationGetTimerTaskMemory+0x2c>)
 801312c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	4a06      	ldr	r2, [pc, #24]	; (801314c <vApplicationGetTimerTaskMemory+0x30>)
 8013132:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f44f 7280 	mov.w	r2, #256	; 0x100
 801313a:	601a      	str	r2, [r3, #0]
}
 801313c:	bf00      	nop
 801313e:	3714      	adds	r7, #20
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr
 8013148:	2400130c 	.word	0x2400130c
 801314c:	24001368 	.word	0x24001368

08013150 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

EventGroupHandle_t xEventGroupCreateStatic(
		StaticEventGroup_t *pxEventGroupBuffer) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

	/* A StaticEventGroup_t object must be provided. */
	configASSERT(pxEventGroupBuffer);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d10a      	bne.n	8013174 <xEventGroupCreateStatic+0x24>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
	uint32_t ulNewBASEPRI;

	__asm volatile
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	613b      	str	r3, [r7, #16]
			"	msr basepri, %0											\n"
			"	isb														\n"
			"	dsb														\n"
			:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013170:	bf00      	nop
 8013172:	e7fe      	b.n	8013172 <xEventGroupCreateStatic+0x22>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticEventGroup_t equals the size of the real
		 event group structure. */
		volatile size_t xSize = sizeof(StaticEventGroup_t);
 8013174:	2320      	movs	r3, #32
 8013176:	60bb      	str	r3, [r7, #8]
		configASSERT(xSize == sizeof(EventGroup_t));
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2b20      	cmp	r3, #32
 801317c:	d00a      	beq.n	8013194 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	60fb      	str	r3, [r7, #12]
}
 8013190:	bf00      	nop
 8013192:	e7fe      	b.n	8013192 <xEventGroupCreateStatic+0x42>
	} /*lint !e529 xSize is referenced if configASSERT() is defined. */
#endif /* configASSERT_DEFINED */

	/* The user has provided a statically allocated event group - use it. */
	pxEventBits = (EventGroup_t*) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	617b      	str	r3, [r7, #20]

	if (pxEventBits != NULL) {
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00a      	beq.n	80131b4 <xEventGroupCreateStatic+0x64>
		pxEventBits->uxEventBits = 0;
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	2200      	movs	r2, #0
 80131a2:	601a      	str	r2, [r3, #0]
		vListInitialise(&(pxEventBits->xTasksWaitingForBits));
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	3304      	adds	r3, #4
 80131a8:	4618      	mov	r0, r3
 80131aa:	f000 f9bf 	bl	801352c <vListInitialise>
#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both static and dynamic allocation can be used, so note that
			 this event group was created statically in case the event group
			 is later deleted. */
			pxEventBits->ucStaticallyAllocated = pdTRUE;
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	2201      	movs	r2, #1
 80131b2:	771a      	strb	r2, [r3, #28]
		 pxEventGroupBuffer pointing to a pre-allocated (compile time
		 allocated) StaticEventGroup_t variable. */
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return pxEventBits;
 80131b4:	697b      	ldr	r3, [r7, #20]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3718      	adds	r7, #24
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <xEventGroupCreate>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

EventGroupHandle_t xEventGroupCreate(void) {
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
	 TickType_t alignment requirements the cast is safe.  In other cases,
	 where the natural word size of the architecture is less than
	 sizeof( TickType_t ), the TickType_t variables will be accessed in two
	 or more reads operations, and the alignment requirements is only that
	 of each individual read. */
	pxEventBits = (EventGroup_t*) pvPortMalloc(sizeof(EventGroup_t)); /*lint !e9087 !e9079 see comment above. */
 80131c4:	2020      	movs	r0, #32
 80131c6:	f002 fe97 	bl	8015ef8 <pvPortMalloc>
 80131ca:	6078      	str	r0, [r7, #4]

	if (pxEventBits != NULL) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d00a      	beq.n	80131e8 <xEventGroupCreate+0x2a>
		pxEventBits->uxEventBits = 0;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
		vListInitialise(&(pxEventBits->xTasksWaitingForBits));
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	3304      	adds	r3, #4
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 f9a5 	bl	801352c <vListInitialise>
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			/* Both static and dynamic allocation can be used, so note this
			 event group was allocated statically in case the event group is
			 later deleted. */
			pxEventBits->ucStaticallyAllocated = pdFALSE;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	771a      	strb	r2, [r3, #28]
		traceEVENT_GROUP_CREATE( pxEventBits );
	} else {
		traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
	}

	return pxEventBits;
 80131e8:	687b      	ldr	r3, [r7, #4]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
	...

080131f4 <xEventGroupWaitBits>:
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits(EventGroupHandle_t xEventGroup,
		const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit,
		const BaseType_t xWaitForAllBits, TickType_t xTicksToWait) {
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b090      	sub	sp, #64	; 0x40
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
 8013200:	603b      	str	r3, [r7, #0]
	EventGroup_t *pxEventBits = xEventGroup;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	637b      	str	r3, [r7, #52]	; 0x34
	EventBits_t uxReturn, uxControlBits = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	63bb      	str	r3, [r7, #56]	; 0x38
	BaseType_t xWaitConditionMet, xAlreadyYielded;
	BaseType_t xTimeoutOccurred = pdFALSE;
 801320a:	2300      	movs	r3, #0
 801320c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	 itself, and that at least one bit is being requested. */
	configASSERT(xEventGroup);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10a      	bne.n	801322a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013218:	f383 8811 	msr	BASEPRI, r3
 801321c:	f3bf 8f6f 	isb	sy
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	623b      	str	r3, [r7, #32]
}
 8013226:	bf00      	nop
 8013228:	e7fe      	b.n	8013228 <xEventGroupWaitBits+0x34>
	configASSERT(( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0);
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013230:	2b00      	cmp	r3, #0
 8013232:	d00a      	beq.n	801324a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013238:	f383 8811 	msr	BASEPRI, r3
 801323c:	f3bf 8f6f 	isb	sy
 8013240:	f3bf 8f4f 	dsb	sy
 8013244:	61fb      	str	r3, [r7, #28]
}
 8013246:	bf00      	nop
 8013248:	e7fe      	b.n	8013248 <xEventGroupWaitBits+0x54>
	configASSERT(uxBitsToWaitFor != 0);
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d10a      	bne.n	8013266 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013254:	f383 8811 	msr	BASEPRI, r3
 8013258:	f3bf 8f6f 	isb	sy
 801325c:	f3bf 8f4f 	dsb	sy
 8013260:	61bb      	str	r3, [r7, #24]
}
 8013262:	bf00      	nop
 8013264:	e7fe      	b.n	8013264 <xEventGroupWaitBits+0x70>
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 8013266:	f001 ff91 	bl	801518c <xTaskGetSchedulerState>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d102      	bne.n	8013276 <xEventGroupWaitBits+0x82>
 8013270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013272:	2b00      	cmp	r3, #0
 8013274:	d101      	bne.n	801327a <xEventGroupWaitBits+0x86>
 8013276:	2301      	movs	r3, #1
 8013278:	e000      	b.n	801327c <xEventGroupWaitBits+0x88>
 801327a:	2300      	movs	r3, #0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d10a      	bne.n	8013296 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013284:	f383 8811 	msr	BASEPRI, r3
 8013288:	f3bf 8f6f 	isb	sy
 801328c:	f3bf 8f4f 	dsb	sy
 8013290:	617b      	str	r3, [r7, #20]
}
 8013292:	bf00      	nop
 8013294:	e7fe      	b.n	8013294 <xEventGroupWaitBits+0xa0>
				!( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ));
	}
#endif

	vTaskSuspendAll();
 8013296:	f001 faf9 	bl	801488c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition(uxCurrentEventBits,
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	68b9      	ldr	r1, [r7, #8]
 80132a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132a6:	f000 f90b 	bl	80134c0 <prvTestWaitCondition>
 80132aa:	62b8      	str	r0, [r7, #40]	; 0x28
				uxBitsToWaitFor, xWaitForAllBits);

		if (xWaitConditionMet != pdFALSE) {
 80132ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00e      	beq.n	80132d0 <xEventGroupWaitBits+0xdc>
			/* The wait condition has already been met so there is no need to
			 block. */
			uxReturn = uxCurrentEventBits;
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = (TickType_t) 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if (xClearOnExit != pdFALSE) {
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d028      	beq.n	8013312 <xEventGroupWaitBits+0x11e>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80132c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	43db      	mvns	r3, r3
 80132c8:	401a      	ands	r2, r3
 80132ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	e020      	b.n	8013312 <xEventGroupWaitBits+0x11e>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else if (xTicksToWait == (TickType_t) 0) {
 80132d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d104      	bne.n	80132e0 <xEventGroupWaitBits+0xec>
			/* The wait condition has not been met, but no block time was
			 specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80132da:	2301      	movs	r3, #1
 80132dc:	633b      	str	r3, [r7, #48]	; 0x30
 80132de:	e018      	b.n	8013312 <xEventGroupWaitBits+0x11e>
		} else {
			/* The task is going to block to wait for its required bits to be
			 set.  uxControlBits are used to remember the specified behaviour of
			 this call to xEventGroupWaitBits() - for use when the event bits
			 unblock the task. */
			if (xClearOnExit != pdFALSE) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <xEventGroupWaitBits+0xfa>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80132e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80132ec:	63bb      	str	r3, [r7, #56]	; 0x38
			} else {
				mtCOVERAGE_TEST_MARKER();
			}

			if (xWaitForAllBits != pdFALSE) {
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <xEventGroupWaitBits+0x108>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80132f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80132fa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			 task's event list item so the kernel knows when a match is
			 found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList(&(pxEventBits->xTasksWaitingForBits),
 80132fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132fe:	1d18      	adds	r0, r3, #4
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013304:	4313      	orrs	r3, r2
 8013306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013308:	4619      	mov	r1, r3
 801330a:	f001 fcb7 	bl	8014c7c <vTaskPlaceOnUnorderedEventList>
					(uxBitsToWaitFor | uxControlBits), xTicksToWait);

			/* This is obsolete as it will get set after the task unblocks, but
			 some compilers mistakenly generate a warning about the variable
			 being returned without being set if it is not done. */
			uxReturn = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013312:	f001 fac9 	bl	80148a8 <xTaskResumeAll>
 8013316:	6278      	str	r0, [r7, #36]	; 0x24

	if (xTicksToWait != (TickType_t) 0) {
 8013318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801331a:	2b00      	cmp	r3, #0
 801331c:	d031      	beq.n	8013382 <xEventGroupWaitBits+0x18e>
		if (xAlreadyYielded == pdFALSE) {
 801331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013320:	2b00      	cmp	r3, #0
 8013322:	d107      	bne.n	8013334 <xEventGroupWaitBits+0x140>
			portYIELD_WITHIN_API()
 8013324:	4b19      	ldr	r3, [pc, #100]	; (801338c <xEventGroupWaitBits+0x198>)
 8013326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801332a:	601a      	str	r2, [r3, #0]
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		 point either the required bits were set or the block time expired.  If
		 the required bits were set they will have been stored in the task's
		 event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013334:	f001 ffb6 	bl	80152a4 <uxTaskResetEventItemValue>
 8013338:	63f8      	str	r0, [r7, #60]	; 0x3c

		if ((uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET) == (EventBits_t) 0) {
 801333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013340:	2b00      	cmp	r3, #0
 8013342:	d11a      	bne.n	801337a <xEventGroupWaitBits+0x186>
			taskENTER_CRITICAL();
 8013344:	f002 fcb6 	bl	8015cb4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				 task leaving the Blocked state and running again. */
				if (prvTestWaitCondition(uxReturn, uxBitsToWaitFor,
 801334e:	683a      	ldr	r2, [r7, #0]
 8013350:	68b9      	ldr	r1, [r7, #8]
 8013352:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013354:	f000 f8b4 	bl	80134c0 <prvTestWaitCondition>
 8013358:	4603      	mov	r3, r0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d009      	beq.n	8013372 <xEventGroupWaitBits+0x17e>
						xWaitForAllBits) != pdFALSE) {
					if (xClearOnExit != pdFALSE) {
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d006      	beq.n	8013372 <xEventGroupWaitBits+0x17e>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	43db      	mvns	r3, r3
 801336c:	401a      	ands	r2, r3
 801336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013370:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013372:	2301      	movs	r3, #1
 8013374:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013376:	f002 fccd 	bl	8015d14 <vPortExitCritical>
		} else {
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801337c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013380:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred);

	/* Prevent compiler warnings when trace macros are not used. */
	(void) xTimeoutOccurred;

	return uxReturn;
 8013382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013384:	4618      	mov	r0, r3
 8013386:	3740      	adds	r7, #64	; 0x40
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	e000ed04 	.word	0xe000ed04

08013390 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup,
		const EventBits_t uxBitsToSet) {
 8013390:	b580      	push	{r7, lr}
 8013392:	b08e      	sub	sp, #56	; 0x38
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
	ListItem_t *pxListItem, *pxNext;
	ListItem_t const *pxListEnd;
	List_t const *pxList;
	EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801339a:	2300      	movs	r3, #0
 801339c:	633b      	str	r3, [r7, #48]	; 0x30
	EventGroup_t *pxEventBits = xEventGroup;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	62bb      	str	r3, [r7, #40]	; 0x28
	BaseType_t xMatchFound = pdFALSE;
 80133a2:	2300      	movs	r3, #0
 80133a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	 itself. */
	configASSERT(xEventGroup);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10a      	bne.n	80133c2 <xEventGroupSetBits+0x32>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	613b      	str	r3, [r7, #16]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <xEventGroupSetBits+0x30>
	configASSERT(( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0);
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d00a      	beq.n	80133e2 <xEventGroupSetBits+0x52>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	60fb      	str	r3, [r7, #12]
}
 80133de:	bf00      	nop
 80133e0:	e7fe      	b.n	80133e0 <xEventGroupSetBits+0x50>

	pxList = &(pxEventBits->xTasksWaitingForBits);
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	3304      	adds	r3, #4
 80133e6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER(pxList); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ea:	3308      	adds	r3, #8
 80133ec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80133ee:	f001 fa4d 	bl	801488c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY(pxList);
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80133f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	431a      	orrs	r2, r3
 8013400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013402:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while (pxListItem != pxListEnd) {
 8013404:	e03c      	b.n	8013480 <xEventGroupSetBits+0xf0>
			pxNext = listGET_NEXT(pxListItem);
 8013406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE(pxListItem);
 801340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013412:	2300      	movs	r3, #0
 8013414:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801341c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013424:	61bb      	str	r3, [r7, #24]

			if ((uxControlBits & eventWAIT_FOR_ALL_BITS) == (EventBits_t) 0) {
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801342c:	2b00      	cmp	r3, #0
 801342e:	d108      	bne.n	8013442 <xEventGroupSetBits+0xb2>
				/* Just looking for single bit being set. */
				if ((uxBitsWaitedFor & pxEventBits->uxEventBits)
 8013430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013432:	681a      	ldr	r2, [r3, #0]
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	4013      	ands	r3, r2
 8013438:	2b00      	cmp	r3, #0
 801343a:	d00b      	beq.n	8013454 <xEventGroupSetBits+0xc4>
						!= (EventBits_t) 0) {
					xMatchFound = pdTRUE;
 801343c:	2301      	movs	r3, #1
 801343e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013440:	e008      	b.n	8013454 <xEventGroupSetBits+0xc4>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
			} else if ((uxBitsWaitedFor & pxEventBits->uxEventBits)
 8013442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	4013      	ands	r3, r2
 801344a:	69ba      	ldr	r2, [r7, #24]
 801344c:	429a      	cmp	r2, r3
 801344e:	d101      	bne.n	8013454 <xEventGroupSetBits+0xc4>
					== uxBitsWaitedFor) {
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013450:	2301      	movs	r3, #1
 8013452:	62fb      	str	r3, [r7, #44]	; 0x2c
			} else {
				/* Need all bits to be set, but not all the bits were set. */
			}

			if (xMatchFound != pdFALSE) {
 8013454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013456:	2b00      	cmp	r3, #0
 8013458:	d010      	beq.n	801347c <xEventGroupSetBits+0xec>
				/* The bits match.  Should the bits be cleared on exit? */
				if ((uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT)
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013460:	2b00      	cmp	r3, #0
 8013462:	d003      	beq.n	801346c <xEventGroupSetBits+0xdc>
						!= (EventBits_t) 0) {
					uxBitsToClear |= uxBitsWaitedFor;
 8013464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	4313      	orrs	r3, r2
 801346a:	633b      	str	r3, [r7, #48]	; 0x30
				 item before removing the task from the event list.  The
				 eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				 that is was unblocked due to its required bits matching, rather
				 than because it timed out. */
				vTaskRemoveFromUnorderedEventList(pxListItem,
						pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET);
 801346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346e:	681b      	ldr	r3, [r3, #0]
				vTaskRemoveFromUnorderedEventList(pxListItem,
 8013470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013474:	4619      	mov	r1, r3
 8013476:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013478:	f001 fccc 	bl	8014e14 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			 used here as the list item may have been removed from the event list
			 and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801347c:	69fb      	ldr	r3, [r7, #28]
 801347e:	637b      	str	r3, [r7, #52]	; 0x34
		while (pxListItem != pxListEnd) {
 8013480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013482:	6a3b      	ldr	r3, [r7, #32]
 8013484:	429a      	cmp	r2, r3
 8013486:	d1be      	bne.n	8013406 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		 bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348e:	43db      	mvns	r3, r3
 8013490:	401a      	ands	r2, r3
 8013492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013494:	601a      	str	r2, [r3, #0]
	}
	(void) xTaskResumeAll();
 8013496:	f001 fa07 	bl	80148a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349c:	681b      	ldr	r3, [r3, #0]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3738      	adds	r7, #56	; 0x38
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <vEventGroupSetBitsCallback>:
}
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
 an interrupt. */
void vEventGroupSetBitsCallback(void *pvEventGroup, const uint32_t ulBitsToSet) {
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b082      	sub	sp, #8
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
	(void) xEventGroupSetBits(pvEventGroup, (EventBits_t) ulBitsToSet); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80134b0:	6839      	ldr	r1, [r7, #0]
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7ff ff6c 	bl	8013390 <xEventGroupSetBits>
}
 80134b8:	bf00      	nop
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <prvTestWaitCondition>:
	(void) xEventGroupClearBits(pvEventGroup, (EventBits_t) ulBitsToClear); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition(const EventBits_t uxCurrentEventBits,
		const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits) {
 80134c0:	b480      	push	{r7}
 80134c2:	b087      	sub	sp, #28
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	607a      	str	r2, [r7, #4]
	BaseType_t xWaitConditionMet = pdFALSE;
 80134cc:	2300      	movs	r3, #0
 80134ce:	617b      	str	r3, [r7, #20]

	if (xWaitForAllBits == pdFALSE) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d107      	bne.n	80134e6 <prvTestWaitCondition+0x26>
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		 set.  Is one already set? */
		if ((uxCurrentEventBits & uxBitsToWaitFor) != (EventBits_t) 0) {
 80134d6:	68fa      	ldr	r2, [r7, #12]
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	4013      	ands	r3, r2
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00a      	beq.n	80134f6 <prvTestWaitCondition+0x36>
			xWaitConditionMet = pdTRUE;
 80134e0:	2301      	movs	r3, #1
 80134e2:	617b      	str	r3, [r7, #20]
 80134e4:	e007      	b.n	80134f6 <prvTestWaitCondition+0x36>
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		 Are they set already? */
		if ((uxCurrentEventBits & uxBitsToWaitFor) == uxBitsToWaitFor) {
 80134e6:	68fa      	ldr	r2, [r7, #12]
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	4013      	ands	r3, r2
 80134ec:	68ba      	ldr	r2, [r7, #8]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d101      	bne.n	80134f6 <prvTestWaitCondition+0x36>
			xWaitConditionMet = pdTRUE;
 80134f2:	2301      	movs	r3, #1
 80134f4:	617b      	str	r3, [r7, #20]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80134f6:	697b      	ldr	r3, [r7, #20]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	371c      	adds	r7, #28
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

BaseType_t xEventGroupSetBitsFromISR(EventGroupHandle_t xEventGroup,
		const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken) {
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

	traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
	xReturn = xTimerPendFunctionCallFromISR(vEventGroupSetBitsCallback,
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	68ba      	ldr	r2, [r7, #8]
 8013514:	68f9      	ldr	r1, [r7, #12]
 8013516:	4804      	ldr	r0, [pc, #16]	; (8013528 <xEventGroupSetBitsFromISR+0x24>)
 8013518:	f002 fa7e 	bl	8015a18 <xTimerPendFunctionCallFromISR>
 801351c:	6178      	str	r0, [r7, #20]
			(void*) xEventGroup, (uint32_t) uxBitsToSet,
			pxHigherPriorityTaskWoken); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */

	return xReturn;
 801351e:	697b      	ldr	r3, [r7, #20]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3718      	adds	r7, #24
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	080134a7 	.word	0x080134a7

0801352c <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t *const pxList) {
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	 end of the list.  To initialise the list the list end is inserted
	 as the only list entry. */
	pxList->pxIndex = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f103 0208 	add.w	r2, r3, #8
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	 ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013544:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	 when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f103 0208 	add.w	r2, r3, #8
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = (ListItem_t*) &(pxList->xListEnd);/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f103 0208 	add.w	r2, r3, #8
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = (UBaseType_t) 0U;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList ); listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013560:	bf00      	nop
 8013562:	370c      	adds	r7, #12
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr

0801356c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem) {
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem ); listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801357a:	bf00      	nop
 801357c:	370c      	adds	r7, #12
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr

08013586 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem) {
 8013586:	b480      	push	{r7}
 8013588:	b085      	sub	sp, #20
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
 801358e:	6039      	str	r1, [r7, #0]
	ListItem_t *const pxIndex = pxList->pxIndex;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_INTEGRITY( pxList ); listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	 makes the new list item the last item to be removed by a call to
	 listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	689a      	ldr	r2, [r3, #8]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	689b      	ldr	r3, [r3, #8]
 80135a8:	683a      	ldr	r2, [r7, #0]
 80135aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	683a      	ldr	r2, [r7, #0]
 80135b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	1c5a      	adds	r2, r3, #1
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	601a      	str	r2, [r3, #0]
}
 80135c2:	bf00      	nop
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr

080135ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem) {
 80135ce:	b480      	push	{r7}
 80135d0:	b085      	sub	sp, #20
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
 80135d6:	6039      	str	r1, [r7, #0]
	ListItem_t *pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	60bb      	str	r3, [r7, #8]
	 new list item should be placed after it.  This ensures that TCBs which are
	 stored in ready lists (all of which have the same xItemValue value) get a
	 share of the CPU.  However, if the xItemValue is the same as the back marker
	 the iteration loop below will not end.  Therefore the value is checked
	 first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135e4:	d103      	bne.n	80135ee <vListInsert+0x20>
		pxIterator = pxList->xListEnd.pxPrevious;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	60fb      	str	r3, [r7, #12]
 80135ec:	e00c      	b.n	8013608 <vListInsert+0x3a>
		 4) Using a queue or semaphore before it has been initialised or
		 before the scheduler has been started (are interrupts firing
		 before vTaskStartScheduler() has been called?).
		 **********************************************************************/

		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	3308      	adds	r3, #8
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	e002      	b.n	80135fc <vListInsert+0x2e>
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
				pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	60fb      	str	r3, [r7, #12]
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 8013602:	68ba      	ldr	r2, [r7, #8]
 8013604:	429a      	cmp	r2, r3
 8013606:	d2f6      	bcs.n	80135f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			 insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	685a      	ldr	r2, [r3, #4]
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	683a      	ldr	r2, [r7, #0]
 8013622:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	 item later. */
	pxNewListItem->pxContainer = pxList;
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	1c5a      	adds	r2, r3, #1
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	601a      	str	r2, [r3, #0]
}
 8013634:	bf00      	nop
 8013636:	3714      	adds	r7, #20
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove) {
 8013640:	b480      	push	{r7}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
	/* The list item knows which list it is in.  Obtain the list from the list
	 item. */
	List_t *const pxList = pxItemToRemove->pxContainer;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	691b      	ldr	r3, [r3, #16]
 801364c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	6892      	ldr	r2, [r2, #8]
 8013656:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	689b      	ldr	r3, [r3, #8]
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	6852      	ldr	r2, [r2, #4]
 8013660:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	429a      	cmp	r2, r3
 801366a:	d103      	bne.n	8013674 <uxListRemove+0x34>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	689a      	ldr	r2, [r3, #8]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	605a      	str	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	1e5a      	subs	r2, r3, #1
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3714      	adds	r7, #20
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10a      	bne.n	80136be <xQueueGenericReset+0x2a>
	__asm volatile
 80136a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ac:	f383 8811 	msr	BASEPRI, r3
 80136b0:	f3bf 8f6f 	isb	sy
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	60bb      	str	r3, [r7, #8]
}
 80136ba:	bf00      	nop
 80136bc:	e7fe      	b.n	80136bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80136be:	f002 faf9 	bl	8015cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ca:	68f9      	ldr	r1, [r7, #12]
 80136cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136ce:	fb01 f303 	mul.w	r3, r1, r3
 80136d2:	441a      	add	r2, r3
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2200      	movs	r2, #0
 80136dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ee:	3b01      	subs	r3, #1
 80136f0:	68f9      	ldr	r1, [r7, #12]
 80136f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136f4:	fb01 f303 	mul.w	r3, r1, r3
 80136f8:	441a      	add	r2, r3
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	22ff      	movs	r2, #255	; 0xff
 8013702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	22ff      	movs	r2, #255	; 0xff
 801370a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d114      	bne.n	801373e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	691b      	ldr	r3, [r3, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d01a      	beq.n	8013752 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	3310      	adds	r3, #16
 8013720:	4618      	mov	r0, r3
 8013722:	f001 fb13 	bl	8014d4c <xTaskRemoveFromEventList>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	d012      	beq.n	8013752 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801372c:	4b0c      	ldr	r3, [pc, #48]	; (8013760 <xQueueGenericReset+0xcc>)
 801372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	f3bf 8f4f 	dsb	sy
 8013738:	f3bf 8f6f 	isb	sy
 801373c:	e009      	b.n	8013752 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	3310      	adds	r3, #16
 8013742:	4618      	mov	r0, r3
 8013744:	f7ff fef2 	bl	801352c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	3324      	adds	r3, #36	; 0x24
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff feed 	bl	801352c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013752:	f002 fadf 	bl	8015d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013756:	2301      	movs	r3, #1
}
 8013758:	4618      	mov	r0, r3
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	e000ed04 	.word	0xe000ed04

08013764 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013764:	b580      	push	{r7, lr}
 8013766:	b08e      	sub	sp, #56	; 0x38
 8013768:	af02      	add	r7, sp, #8
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
 8013770:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377c:	f383 8811 	msr	BASEPRI, r3
 8013780:	f3bf 8f6f 	isb	sy
 8013784:	f3bf 8f4f 	dsb	sy
 8013788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801378a:	bf00      	nop
 801378c:	e7fe      	b.n	801378c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d10a      	bne.n	80137aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80137a6:	bf00      	nop
 80137a8:	e7fe      	b.n	80137a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <xQueueGenericCreateStatic+0x52>
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d001      	beq.n	80137ba <xQueueGenericCreateStatic+0x56>
 80137b6:	2301      	movs	r3, #1
 80137b8:	e000      	b.n	80137bc <xQueueGenericCreateStatic+0x58>
 80137ba:	2300      	movs	r3, #0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d10a      	bne.n	80137d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	623b      	str	r3, [r7, #32]
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d102      	bne.n	80137e2 <xQueueGenericCreateStatic+0x7e>
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d101      	bne.n	80137e6 <xQueueGenericCreateStatic+0x82>
 80137e2:	2301      	movs	r3, #1
 80137e4:	e000      	b.n	80137e8 <xQueueGenericCreateStatic+0x84>
 80137e6:	2300      	movs	r3, #0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d10a      	bne.n	8013802 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80137ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f0:	f383 8811 	msr	BASEPRI, r3
 80137f4:	f3bf 8f6f 	isb	sy
 80137f8:	f3bf 8f4f 	dsb	sy
 80137fc:	61fb      	str	r3, [r7, #28]
}
 80137fe:	bf00      	nop
 8013800:	e7fe      	b.n	8013800 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013802:	2350      	movs	r3, #80	; 0x50
 8013804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	2b50      	cmp	r3, #80	; 0x50
 801380a:	d00a      	beq.n	8013822 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013810:	f383 8811 	msr	BASEPRI, r3
 8013814:	f3bf 8f6f 	isb	sy
 8013818:	f3bf 8f4f 	dsb	sy
 801381c:	61bb      	str	r3, [r7, #24]
}
 801381e:	bf00      	nop
 8013820:	e7fe      	b.n	8013820 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013822:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00d      	beq.n	801384a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013830:	2201      	movs	r2, #1
 8013832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013836:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	4613      	mov	r3, r2
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	68b9      	ldr	r1, [r7, #8]
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f000 f83f 	bl	80138c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801384c:	4618      	mov	r0, r3
 801384e:	3730      	adds	r7, #48	; 0x30
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013854:	b580      	push	{r7, lr}
 8013856:	b08a      	sub	sp, #40	; 0x28
 8013858:	af02      	add	r7, sp, #8
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	4613      	mov	r3, r2
 8013860:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d10a      	bne.n	801387e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386c:	f383 8811 	msr	BASEPRI, r3
 8013870:	f3bf 8f6f 	isb	sy
 8013874:	f3bf 8f4f 	dsb	sy
 8013878:	613b      	str	r3, [r7, #16]
}
 801387a:	bf00      	nop
 801387c:	e7fe      	b.n	801387c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	68ba      	ldr	r2, [r7, #8]
 8013882:	fb02 f303 	mul.w	r3, r2, r3
 8013886:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	3350      	adds	r3, #80	; 0x50
 801388c:	4618      	mov	r0, r3
 801388e:	f002 fb33 	bl	8015ef8 <pvPortMalloc>
 8013892:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d011      	beq.n	80138be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	3350      	adds	r3, #80	; 0x50
 80138a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80138ac:	79fa      	ldrb	r2, [r7, #7]
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	9300      	str	r3, [sp, #0]
 80138b2:	4613      	mov	r3, r2
 80138b4:	697a      	ldr	r2, [r7, #20]
 80138b6:	68b9      	ldr	r1, [r7, #8]
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f000 f805 	bl	80138c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80138be:	69bb      	ldr	r3, [r7, #24]
	}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3720      	adds	r7, #32
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}

080138c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
 80138d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d103      	bne.n	80138e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	69ba      	ldr	r2, [r7, #24]
 80138e0:	601a      	str	r2, [r3, #0]
 80138e2:	e002      	b.n	80138ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	687a      	ldr	r2, [r7, #4]
 80138e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	68ba      	ldr	r2, [r7, #8]
 80138f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80138f6:	2101      	movs	r1, #1
 80138f8:	69b8      	ldr	r0, [r7, #24]
 80138fa:	f7ff fecb 	bl	8013694 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	78fa      	ldrb	r2, [r7, #3]
 8013902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013906:	bf00      	nop
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
	...

08013910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b08e      	sub	sp, #56	; 0x38
 8013914:	af00      	add	r7, sp, #0
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
 801391c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801391e:	2300      	movs	r3, #0
 8013920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10a      	bne.n	8013942 <xQueueGenericSend+0x32>
	__asm volatile
 801392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013930:	f383 8811 	msr	BASEPRI, r3
 8013934:	f3bf 8f6f 	isb	sy
 8013938:	f3bf 8f4f 	dsb	sy
 801393c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801393e:	bf00      	nop
 8013940:	e7fe      	b.n	8013940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d103      	bne.n	8013950 <xQueueGenericSend+0x40>
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801394c:	2b00      	cmp	r3, #0
 801394e:	d101      	bne.n	8013954 <xQueueGenericSend+0x44>
 8013950:	2301      	movs	r3, #1
 8013952:	e000      	b.n	8013956 <xQueueGenericSend+0x46>
 8013954:	2300      	movs	r3, #0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d10a      	bne.n	8013970 <xQueueGenericSend+0x60>
	__asm volatile
 801395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395e:	f383 8811 	msr	BASEPRI, r3
 8013962:	f3bf 8f6f 	isb	sy
 8013966:	f3bf 8f4f 	dsb	sy
 801396a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801396c:	bf00      	nop
 801396e:	e7fe      	b.n	801396e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	2b02      	cmp	r3, #2
 8013974:	d103      	bne.n	801397e <xQueueGenericSend+0x6e>
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397a:	2b01      	cmp	r3, #1
 801397c:	d101      	bne.n	8013982 <xQueueGenericSend+0x72>
 801397e:	2301      	movs	r3, #1
 8013980:	e000      	b.n	8013984 <xQueueGenericSend+0x74>
 8013982:	2300      	movs	r3, #0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d10a      	bne.n	801399e <xQueueGenericSend+0x8e>
	__asm volatile
 8013988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398c:	f383 8811 	msr	BASEPRI, r3
 8013990:	f3bf 8f6f 	isb	sy
 8013994:	f3bf 8f4f 	dsb	sy
 8013998:	623b      	str	r3, [r7, #32]
}
 801399a:	bf00      	nop
 801399c:	e7fe      	b.n	801399c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801399e:	f001 fbf5 	bl	801518c <xTaskGetSchedulerState>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d102      	bne.n	80139ae <xQueueGenericSend+0x9e>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d101      	bne.n	80139b2 <xQueueGenericSend+0xa2>
 80139ae:	2301      	movs	r3, #1
 80139b0:	e000      	b.n	80139b4 <xQueueGenericSend+0xa4>
 80139b2:	2300      	movs	r3, #0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10a      	bne.n	80139ce <xQueueGenericSend+0xbe>
	__asm volatile
 80139b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139bc:	f383 8811 	msr	BASEPRI, r3
 80139c0:	f3bf 8f6f 	isb	sy
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	61fb      	str	r3, [r7, #28]
}
 80139ca:	bf00      	nop
 80139cc:	e7fe      	b.n	80139cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139ce:	f002 f971 	bl	8015cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139da:	429a      	cmp	r2, r3
 80139dc:	d302      	bcc.n	80139e4 <xQueueGenericSend+0xd4>
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	2b02      	cmp	r3, #2
 80139e2:	d129      	bne.n	8013a38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	68b9      	ldr	r1, [r7, #8]
 80139e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ea:	f000 fa8b 	bl	8013f04 <prvCopyDataToQueue>
 80139ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d010      	beq.n	8013a1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fa:	3324      	adds	r3, #36	; 0x24
 80139fc:	4618      	mov	r0, r3
 80139fe:	f001 f9a5 	bl	8014d4c <xTaskRemoveFromEventList>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d013      	beq.n	8013a30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013a08:	4b3f      	ldr	r3, [pc, #252]	; (8013b08 <xQueueGenericSend+0x1f8>)
 8013a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a0e:	601a      	str	r2, [r3, #0]
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	e00a      	b.n	8013a30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d007      	beq.n	8013a30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013a20:	4b39      	ldr	r3, [pc, #228]	; (8013b08 <xQueueGenericSend+0x1f8>)
 8013a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a26:	601a      	str	r2, [r3, #0]
 8013a28:	f3bf 8f4f 	dsb	sy
 8013a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013a30:	f002 f970 	bl	8015d14 <vPortExitCritical>
				return pdPASS;
 8013a34:	2301      	movs	r3, #1
 8013a36:	e063      	b.n	8013b00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d103      	bne.n	8013a46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a3e:	f002 f969 	bl	8015d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	e05c      	b.n	8013b00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d106      	bne.n	8013a5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a4c:	f107 0314 	add.w	r3, r7, #20
 8013a50:	4618      	mov	r0, r3
 8013a52:	f001 fa41 	bl	8014ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a56:	2301      	movs	r3, #1
 8013a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a5a:	f002 f95b 	bl	8015d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a5e:	f000 ff15 	bl	801488c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a62:	f002 f927 	bl	8015cb4 <vPortEnterCritical>
 8013a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a72:	d103      	bne.n	8013a7c <xQueueGenericSend+0x16c>
 8013a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a76:	2200      	movs	r2, #0
 8013a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a82:	b25b      	sxtb	r3, r3
 8013a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a88:	d103      	bne.n	8013a92 <xQueueGenericSend+0x182>
 8013a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a92:	f002 f93f 	bl	8015d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a96:	1d3a      	adds	r2, r7, #4
 8013a98:	f107 0314 	add.w	r3, r7, #20
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f001 fa30 	bl	8014f04 <xTaskCheckForTimeOut>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d124      	bne.n	8013af4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013aac:	f000 fb22 	bl	80140f4 <prvIsQueueFull>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d018      	beq.n	8013ae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	3310      	adds	r3, #16
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	4611      	mov	r1, r2
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f001 f8b8 	bl	8014c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ac6:	f000 faad 	bl	8014024 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013aca:	f000 feed 	bl	80148a8 <xTaskResumeAll>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f47f af7c 	bne.w	80139ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013ad6:	4b0c      	ldr	r3, [pc, #48]	; (8013b08 <xQueueGenericSend+0x1f8>)
 8013ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013adc:	601a      	str	r2, [r3, #0]
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	f3bf 8f6f 	isb	sy
 8013ae6:	e772      	b.n	80139ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013aea:	f000 fa9b 	bl	8014024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013aee:	f000 fedb 	bl	80148a8 <xTaskResumeAll>
 8013af2:	e76c      	b.n	80139ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013af6:	f000 fa95 	bl	8014024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013afa:	f000 fed5 	bl	80148a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3738      	adds	r7, #56	; 0x38
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	e000ed04 	.word	0xe000ed04

08013b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b090      	sub	sp, #64	; 0x40
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d10a      	bne.n	8013b3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013b36:	bf00      	nop
 8013b38:	e7fe      	b.n	8013b38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d103      	bne.n	8013b48 <xQueueGenericSendFromISR+0x3c>
 8013b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <xQueueGenericSendFromISR+0x40>
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e000      	b.n	8013b4e <xQueueGenericSendFromISR+0x42>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10a      	bne.n	8013b68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b56:	f383 8811 	msr	BASEPRI, r3
 8013b5a:	f3bf 8f6f 	isb	sy
 8013b5e:	f3bf 8f4f 	dsb	sy
 8013b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b64:	bf00      	nop
 8013b66:	e7fe      	b.n	8013b66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	2b02      	cmp	r3, #2
 8013b6c:	d103      	bne.n	8013b76 <xQueueGenericSendFromISR+0x6a>
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d101      	bne.n	8013b7a <xQueueGenericSendFromISR+0x6e>
 8013b76:	2301      	movs	r3, #1
 8013b78:	e000      	b.n	8013b7c <xQueueGenericSendFromISR+0x70>
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10a      	bne.n	8013b96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	623b      	str	r3, [r7, #32]
}
 8013b92:	bf00      	nop
 8013b94:	e7fe      	b.n	8013b94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b96:	f002 f96f 	bl	8015e78 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
	uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8013b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba2:	f383 8811 	msr	BASEPRI, r3
 8013ba6:	f3bf 8f6f 	isb	sy
 8013baa:	f3bf 8f4f 	dsb	sy
 8013bae:	61fa      	str	r2, [r7, #28]
 8013bb0:	61bb      	str	r3, [r7, #24]
			:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	 warnings. */
	return ulOriginalBASEPRI;
 8013bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d302      	bcc.n	8013bc8 <xQueueGenericSendFromISR+0xbc>
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	2b02      	cmp	r3, #2
 8013bc6:	d12f      	bne.n	8013c28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013bd8:	683a      	ldr	r2, [r7, #0]
 8013bda:	68b9      	ldr	r1, [r7, #8]
 8013bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bde:	f000 f991 	bl	8013f04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013be2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bea:	d112      	bne.n	8013c12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d016      	beq.n	8013c22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf6:	3324      	adds	r3, #36	; 0x24
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f001 f8a7 	bl	8014d4c <xTaskRemoveFromEventList>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d00e      	beq.n	8013c22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00b      	beq.n	8013c22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	e007      	b.n	8013c22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013c16:	3301      	adds	r3, #1
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	b25a      	sxtb	r2, r3
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013c22:	2301      	movs	r3, #1
 8013c24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013c26:	e001      	b.n	8013c2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
	__asm volatile
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	f383 8811 	msr	BASEPRI, r3
	(
			"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013c36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3740      	adds	r7, #64	; 0x40
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
	...

08013c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b08c      	sub	sp, #48	; 0x30
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c50:	2300      	movs	r3, #0
 8013c52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d10a      	bne.n	8013c74 <xQueueReceive+0x30>
	__asm volatile
 8013c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c62:	f383 8811 	msr	BASEPRI, r3
 8013c66:	f3bf 8f6f 	isb	sy
 8013c6a:	f3bf 8f4f 	dsb	sy
 8013c6e:	623b      	str	r3, [r7, #32]
}
 8013c70:	bf00      	nop
 8013c72:	e7fe      	b.n	8013c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d103      	bne.n	8013c82 <xQueueReceive+0x3e>
 8013c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <xQueueReceive+0x42>
 8013c82:	2301      	movs	r3, #1
 8013c84:	e000      	b.n	8013c88 <xQueueReceive+0x44>
 8013c86:	2300      	movs	r3, #0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d10a      	bne.n	8013ca2 <xQueueReceive+0x5e>
	__asm volatile
 8013c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c90:	f383 8811 	msr	BASEPRI, r3
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	f3bf 8f4f 	dsb	sy
 8013c9c:	61fb      	str	r3, [r7, #28]
}
 8013c9e:	bf00      	nop
 8013ca0:	e7fe      	b.n	8013ca0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ca2:	f001 fa73 	bl	801518c <xTaskGetSchedulerState>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d102      	bne.n	8013cb2 <xQueueReceive+0x6e>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d101      	bne.n	8013cb6 <xQueueReceive+0x72>
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e000      	b.n	8013cb8 <xQueueReceive+0x74>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10a      	bne.n	8013cd2 <xQueueReceive+0x8e>
	__asm volatile
 8013cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc0:	f383 8811 	msr	BASEPRI, r3
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	61bb      	str	r3, [r7, #24]
}
 8013cce:	bf00      	nop
 8013cd0:	e7fe      	b.n	8013cd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013cd2:	f001 ffef 	bl	8015cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d01f      	beq.n	8013d22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ce2:	68b9      	ldr	r1, [r7, #8]
 8013ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ce6:	f000 f977 	bl	8013fd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cec:	1e5a      	subs	r2, r3, #1
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf4:	691b      	ldr	r3, [r3, #16]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00f      	beq.n	8013d1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfc:	3310      	adds	r3, #16
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f001 f824 	bl	8014d4c <xTaskRemoveFromEventList>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d007      	beq.n	8013d1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013d0a:	4b3d      	ldr	r3, [pc, #244]	; (8013e00 <xQueueReceive+0x1bc>)
 8013d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	f3bf 8f4f 	dsb	sy
 8013d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013d1a:	f001 fffb 	bl	8015d14 <vPortExitCritical>
				return pdPASS;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e069      	b.n	8013df6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d103      	bne.n	8013d30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d28:	f001 fff4 	bl	8015d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e062      	b.n	8013df6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d106      	bne.n	8013d44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d36:	f107 0310 	add.w	r3, r7, #16
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f001 f8cc 	bl	8014ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d40:	2301      	movs	r3, #1
 8013d42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d44:	f001 ffe6 	bl	8015d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d48:	f000 fda0 	bl	801488c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d4c:	f001 ffb2 	bl	8015cb4 <vPortEnterCritical>
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d56:	b25b      	sxtb	r3, r3
 8013d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d5c:	d103      	bne.n	8013d66 <xQueueReceive+0x122>
 8013d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d60:	2200      	movs	r2, #0
 8013d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d6c:	b25b      	sxtb	r3, r3
 8013d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d72:	d103      	bne.n	8013d7c <xQueueReceive+0x138>
 8013d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d76:	2200      	movs	r2, #0
 8013d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d7c:	f001 ffca 	bl	8015d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d80:	1d3a      	adds	r2, r7, #4
 8013d82:	f107 0310 	add.w	r3, r7, #16
 8013d86:	4611      	mov	r1, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f001 f8bb 	bl	8014f04 <xTaskCheckForTimeOut>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d123      	bne.n	8013ddc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d96:	f000 f997 	bl	80140c8 <prvIsQueueEmpty>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d017      	beq.n	8013dd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da2:	3324      	adds	r3, #36	; 0x24
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	4611      	mov	r1, r2
 8013da8:	4618      	mov	r0, r3
 8013daa:	f000 ff43 	bl	8014c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013db0:	f000 f938 	bl	8014024 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013db4:	f000 fd78 	bl	80148a8 <xTaskResumeAll>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d189      	bne.n	8013cd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013dbe:	4b10      	ldr	r3, [pc, #64]	; (8013e00 <xQueueReceive+0x1bc>)
 8013dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dc4:	601a      	str	r2, [r3, #0]
 8013dc6:	f3bf 8f4f 	dsb	sy
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	e780      	b.n	8013cd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dd2:	f000 f927 	bl	8014024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dd6:	f000 fd67 	bl	80148a8 <xTaskResumeAll>
 8013dda:	e77a      	b.n	8013cd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dde:	f000 f921 	bl	8014024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013de2:	f000 fd61 	bl	80148a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013de8:	f000 f96e 	bl	80140c8 <prvIsQueueEmpty>
 8013dec:	4603      	mov	r3, r0
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f43f af6f 	beq.w	8013cd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3730      	adds	r7, #48	; 0x30
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	e000ed04 	.word	0xe000ed04

08013e04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b08e      	sub	sp, #56	; 0x38
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10a      	bne.n	8013e30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	623b      	str	r3, [r7, #32]
}
 8013e2c:	bf00      	nop
 8013e2e:	e7fe      	b.n	8013e2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d103      	bne.n	8013e3e <xQueueReceiveFromISR+0x3a>
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d101      	bne.n	8013e42 <xQueueReceiveFromISR+0x3e>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e000      	b.n	8013e44 <xQueueReceiveFromISR+0x40>
 8013e42:	2300      	movs	r3, #0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10a      	bne.n	8013e5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	61fb      	str	r3, [r7, #28]
}
 8013e5a:	bf00      	nop
 8013e5c:	e7fe      	b.n	8013e5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e5e:	f002 f80b 	bl	8015e78 <vPortValidateInterruptPriority>
	__asm volatile
 8013e62:	f3ef 8211 	mrs	r2, BASEPRI
 8013e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e6a:	f383 8811 	msr	BASEPRI, r3
 8013e6e:	f3bf 8f6f 	isb	sy
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	61ba      	str	r2, [r7, #24]
 8013e78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d02f      	beq.n	8013eea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e98:	f000 f89e 	bl	8013fd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9e:	1e5a      	subs	r2, r3, #1
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013ea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eac:	d112      	bne.n	8013ed4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb0:	691b      	ldr	r3, [r3, #16]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d016      	beq.n	8013ee4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	3310      	adds	r3, #16
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f000 ff46 	bl	8014d4c <xTaskRemoveFromEventList>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d00e      	beq.n	8013ee4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d00b      	beq.n	8013ee4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2201      	movs	r2, #1
 8013ed0:	601a      	str	r2, [r3, #0]
 8013ed2:	e007      	b.n	8013ee4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ed8:	3301      	adds	r3, #1
 8013eda:	b2db      	uxtb	r3, r3
 8013edc:	b25a      	sxtb	r2, r3
 8013ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8013ee8:	e001      	b.n	8013eee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013eea:	2300      	movs	r3, #0
 8013eec:	637b      	str	r3, [r7, #52]	; 0x34
 8013eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	f383 8811 	msr	BASEPRI, r3
}
 8013ef8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3738      	adds	r7, #56	; 0x38
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f10:	2300      	movs	r3, #0
 8013f12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d10d      	bne.n	8013f3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d14d      	bne.n	8013fc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f001 f94a 	bl	80151c8 <xTaskPriorityDisinherit>
 8013f34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	609a      	str	r2, [r3, #8]
 8013f3c:	e043      	b.n	8013fc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d119      	bne.n	8013f78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6858      	ldr	r0, [r3, #4]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	68b9      	ldr	r1, [r7, #8]
 8013f50:	f002 f9f6 	bl	8016340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	685a      	ldr	r2, [r3, #4]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f5c:	441a      	add	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	685a      	ldr	r2, [r3, #4]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d32b      	bcc.n	8013fc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	605a      	str	r2, [r3, #4]
 8013f76:	e026      	b.n	8013fc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	68d8      	ldr	r0, [r3, #12]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f80:	461a      	mov	r2, r3
 8013f82:	68b9      	ldr	r1, [r7, #8]
 8013f84:	f002 f9dc 	bl	8016340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	68da      	ldr	r2, [r3, #12]
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f90:	425b      	negs	r3, r3
 8013f92:	441a      	add	r2, r3
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d207      	bcs.n	8013fb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	689a      	ldr	r2, [r3, #8]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fac:	425b      	negs	r3, r3
 8013fae:	441a      	add	r2, r3
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d105      	bne.n	8013fc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d002      	beq.n	8013fc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	3b01      	subs	r3, #1
 8013fc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	1c5a      	adds	r2, r3, #1
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013fce:	697b      	ldr	r3, [r7, #20]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d018      	beq.n	801401c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	68da      	ldr	r2, [r3, #12]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ff2:	441a      	add	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	68da      	ldr	r2, [r3, #12]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	689b      	ldr	r3, [r3, #8]
 8014000:	429a      	cmp	r2, r3
 8014002:	d303      	bcc.n	801400c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	68d9      	ldr	r1, [r3, #12]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014014:	461a      	mov	r2, r3
 8014016:	6838      	ldr	r0, [r7, #0]
 8014018:	f002 f992 	bl	8016340 <memcpy>
	}
}
 801401c:	bf00      	nop
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801402c:	f001 fe42 	bl	8015cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014036:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014038:	e011      	b.n	801405e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403e:	2b00      	cmp	r3, #0
 8014040:	d012      	beq.n	8014068 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	3324      	adds	r3, #36	; 0x24
 8014046:	4618      	mov	r0, r3
 8014048:	f000 fe80 	bl	8014d4c <xTaskRemoveFromEventList>
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d001      	beq.n	8014056 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014052:	f000 ffb9 	bl	8014fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014056:	7bfb      	ldrb	r3, [r7, #15]
 8014058:	3b01      	subs	r3, #1
 801405a:	b2db      	uxtb	r3, r3
 801405c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014062:	2b00      	cmp	r3, #0
 8014064:	dce9      	bgt.n	801403a <prvUnlockQueue+0x16>
 8014066:	e000      	b.n	801406a <prvUnlockQueue+0x46>
					break;
 8014068:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	22ff      	movs	r2, #255	; 0xff
 801406e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014072:	f001 fe4f 	bl	8015d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014076:	f001 fe1d 	bl	8015cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014080:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014082:	e011      	b.n	80140a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	691b      	ldr	r3, [r3, #16]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d012      	beq.n	80140b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	3310      	adds	r3, #16
 8014090:	4618      	mov	r0, r3
 8014092:	f000 fe5b 	bl	8014d4c <xTaskRemoveFromEventList>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d001      	beq.n	80140a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801409c:	f000 ff94 	bl	8014fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140a0:	7bbb      	ldrb	r3, [r7, #14]
 80140a2:	3b01      	subs	r3, #1
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	dce9      	bgt.n	8014084 <prvUnlockQueue+0x60>
 80140b0:	e000      	b.n	80140b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	22ff      	movs	r2, #255	; 0xff
 80140b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80140bc:	f001 fe2a 	bl	8015d14 <vPortExitCritical>
}
 80140c0:	bf00      	nop
 80140c2:	3710      	adds	r7, #16
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140d0:	f001 fdf0 	bl	8015cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80140dc:	2301      	movs	r3, #1
 80140de:	60fb      	str	r3, [r7, #12]
 80140e0:	e001      	b.n	80140e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80140e2:	2300      	movs	r3, #0
 80140e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140e6:	f001 fe15 	bl	8015d14 <vPortExitCritical>

	return xReturn;
 80140ea:	68fb      	ldr	r3, [r7, #12]
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	3710      	adds	r7, #16
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140fc:	f001 fdda 	bl	8015cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014108:	429a      	cmp	r2, r3
 801410a:	d102      	bne.n	8014112 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801410c:	2301      	movs	r3, #1
 801410e:	60fb      	str	r3, [r7, #12]
 8014110:	e001      	b.n	8014116 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014112:	2300      	movs	r3, #0
 8014114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014116:	f001 fdfd 	bl	8015d14 <vPortExitCritical>

	return xReturn;
 801411a:	68fb      	ldr	r3, [r7, #12]
}
 801411c:	4618      	mov	r0, r3
 801411e:	3710      	adds	r7, #16
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014124:	b480      	push	{r7}
 8014126:	b085      	sub	sp, #20
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801412e:	2300      	movs	r3, #0
 8014130:	60fb      	str	r3, [r7, #12]
 8014132:	e014      	b.n	801415e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014134:	4a0f      	ldr	r2, [pc, #60]	; (8014174 <vQueueAddToRegistry+0x50>)
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10b      	bne.n	8014158 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014140:	490c      	ldr	r1, [pc, #48]	; (8014174 <vQueueAddToRegistry+0x50>)
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	683a      	ldr	r2, [r7, #0]
 8014146:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801414a:	4a0a      	ldr	r2, [pc, #40]	; (8014174 <vQueueAddToRegistry+0x50>)
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	00db      	lsls	r3, r3, #3
 8014150:	4413      	add	r3, r2
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014156:	e006      	b.n	8014166 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	3301      	adds	r3, #1
 801415c:	60fb      	str	r3, [r7, #12]
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b07      	cmp	r3, #7
 8014162:	d9e7      	bls.n	8014134 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014164:	bf00      	nop
 8014166:	bf00      	nop
 8014168:	3714      	adds	r7, #20
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	24001768 	.word	0x24001768

08014178 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014188:	f001 fd94 	bl	8015cb4 <vPortEnterCritical>
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014192:	b25b      	sxtb	r3, r3
 8014194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014198:	d103      	bne.n	80141a2 <vQueueWaitForMessageRestricted+0x2a>
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2200      	movs	r2, #0
 801419e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141a8:	b25b      	sxtb	r3, r3
 80141aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ae:	d103      	bne.n	80141b8 <vQueueWaitForMessageRestricted+0x40>
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2200      	movs	r2, #0
 80141b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141b8:	f001 fdac 	bl	8015d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d106      	bne.n	80141d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	3324      	adds	r3, #36	; 0x24
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f000 fd91 	bl	8014cf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80141d2:	6978      	ldr	r0, [r7, #20]
 80141d4:	f7ff ff26 	bl	8014024 <prvUnlockQueue>
	}
 80141d8:	bf00      	nop
 80141da:	3718      	adds	r7, #24
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <xTaskCreateStatic>:

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, StackType_t *const puxStackBuffer,
		StaticTask_t *const pxTaskBuffer) {
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b08e      	sub	sp, #56	; 0x38
 80141e4:	af04      	add	r7, sp, #16
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
 80141ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

	configASSERT(puxStackBuffer != NULL);
 80141ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10a      	bne.n	801420a <xTaskCreateStatic+0x2a>
	__asm volatile
 80141f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f8:	f383 8811 	msr	BASEPRI, r3
 80141fc:	f3bf 8f6f 	isb	sy
 8014200:	f3bf 8f4f 	dsb	sy
 8014204:	623b      	str	r3, [r7, #32]
}
 8014206:	bf00      	nop
 8014208:	e7fe      	b.n	8014208 <xTaskCreateStatic+0x28>
	configASSERT(pxTaskBuffer != NULL);
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	2b00      	cmp	r3, #0
 801420e:	d10a      	bne.n	8014226 <xTaskCreateStatic+0x46>
	__asm volatile
 8014210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	61fb      	str	r3, [r7, #28]
}
 8014222:	bf00      	nop
 8014224:	e7fe      	b.n	8014224 <xTaskCreateStatic+0x44>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticTask_t equals the size of the real task
		 structure. */
		volatile size_t xSize = sizeof(StaticTask_t);
 8014226:	235c      	movs	r3, #92	; 0x5c
 8014228:	613b      	str	r3, [r7, #16]
		configASSERT(xSize == sizeof(TCB_t));
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	2b5c      	cmp	r3, #92	; 0x5c
 801422e:	d00a      	beq.n	8014246 <xTaskCreateStatic+0x66>
	__asm volatile
 8014230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	61bb      	str	r3, [r7, #24]
}
 8014242:	bf00      	nop
 8014244:	e7fe      	b.n	8014244 <xTaskCreateStatic+0x64>
		(void) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014246:	693b      	ldr	r3, [r7, #16]
	}
#endif /* configASSERT_DEFINED */

	if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 8014248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424a:	2b00      	cmp	r3, #0
 801424c:	d01e      	beq.n	801428c <xTaskCreateStatic+0xac>
 801424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014250:	2b00      	cmp	r3, #0
 8014252:	d01b      	beq.n	801428c <xTaskCreateStatic+0xac>
		/* The memory used for the task's TCB and stack are passed into this
		 function - use them. */
		pxNewTCB = (TCB_t*) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014256:	627b      	str	r3, [r7, #36]	; 0x24
		pxNewTCB->pxStack = (StackType_t*) puxStackBuffer;
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801425c:	631a      	str	r2, [r3, #48]	; 0x30

#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created statically in case the task is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 801425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014260:	2202      	movs	r2, #2
 8014262:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
					tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters,
 8014266:	2300      	movs	r3, #0
 8014268:	9303      	str	r3, [sp, #12]
 801426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426c:	9302      	str	r3, [sp, #8]
 801426e:	f107 0314 	add.w	r3, r7, #20
 8014272:	9301      	str	r3, [sp, #4]
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	687a      	ldr	r2, [r7, #4]
 801427c:	68b9      	ldr	r1, [r7, #8]
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f000 f850 	bl	8014324 <prvInitialiseNewTask>
				uxPriority, &xReturn, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8014284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014286:	f000 f8dd 	bl	8014444 <prvAddNewTaskToReadyList>
 801428a:	e001      	b.n	8014290 <xTaskCreateStatic+0xb0>
	} else {
		xReturn = NULL;
 801428c:	2300      	movs	r3, #0
 801428e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014290:	697b      	ldr	r3, [r7, #20]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3728      	adds	r7, #40	; 0x28
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}

0801429a <xTaskCreate>:

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 801429a:	b580      	push	{r7, lr}
 801429c:	b08c      	sub	sp, #48	; 0x30
 801429e:	af04      	add	r7, sp, #16
 80142a0:	60f8      	str	r0, [r7, #12]
 80142a2:	60b9      	str	r1, [r7, #8]
 80142a4:	603b      	str	r3, [r7, #0]
 80142a6:	4613      	mov	r3, r2
 80142a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80142aa:	88fb      	ldrh	r3, [r7, #6]
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4618      	mov	r0, r3
 80142b0:	f001 fe22 	bl	8015ef8 <pvPortMalloc>
 80142b4:	6178      	str	r0, [r7, #20]

		if (pxStack != NULL) {
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d00e      	beq.n	80142da <xTaskCreate+0x40>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t*) pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80142bc:	205c      	movs	r0, #92	; 0x5c
 80142be:	f001 fe1b 	bl	8015ef8 <pvPortMalloc>
 80142c2:	61f8      	str	r0, [r7, #28]

			if (pxNewTCB != NULL) {
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d003      	beq.n	80142d2 <xTaskCreate+0x38>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	697a      	ldr	r2, [r7, #20]
 80142ce:	631a      	str	r2, [r3, #48]	; 0x30
 80142d0:	e005      	b.n	80142de <xTaskCreate+0x44>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				 it again. */
				vPortFree(pxStack);
 80142d2:	6978      	ldr	r0, [r7, #20]
 80142d4:	f001 fedc 	bl	8016090 <vPortFree>
 80142d8:	e001      	b.n	80142de <xTaskCreate+0x44>
			}
		} else {
			pxNewTCB = NULL;
 80142da:	2300      	movs	r3, #0
 80142dc:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d017      	beq.n	8014314 <xTaskCreate+0x7a>
#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
					tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t) usStackDepth,
 80142ec:	88fa      	ldrh	r2, [r7, #6]
 80142ee:	2300      	movs	r3, #0
 80142f0:	9303      	str	r3, [sp, #12]
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	9302      	str	r3, [sp, #8]
 80142f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f8:	9301      	str	r3, [sp, #4]
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	68b9      	ldr	r1, [r7, #8]
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f000 f80e 	bl	8014324 <prvInitialiseNewTask>
				pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8014308:	69f8      	ldr	r0, [r7, #28]
 801430a:	f000 f89b 	bl	8014444 <prvAddNewTaskToReadyList>
		xReturn = pdPASS;
 801430e:	2301      	movs	r3, #1
 8014310:	61bb      	str	r3, [r7, #24]
 8014312:	e002      	b.n	801431a <xTaskCreate+0x80>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014318:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
 801431a:	69bb      	ldr	r3, [r7, #24]
}
 801431c:	4618      	mov	r0, r3
 801431e:	3720      	adds	r7, #32
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}

08014324 <prvInitialiseNewTask>:

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
		TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions) {
 8014324:	b580      	push	{r7, lr}
 8014326:	b088      	sub	sp, #32
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	60b9      	str	r1, [r7, #8]
 801432e:	607a      	str	r2, [r7, #4]
 8014330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		(void) memset(pxNewTCB->pxStack, (int) tskSTACK_FILL_BYTE,
 8014332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	461a      	mov	r2, r3
 801433c:	21a5      	movs	r1, #165	; 0xa5
 801433e:	f002 f80d 	bl	801635c <memset>
	 grows from high memory to low (as per the 80x86) or vice versa.
	 portSTACK_GROWTH is used to make the result positive or negative as required
	 by the port. */
#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 8014342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014346:	6879      	ldr	r1, [r7, #4]
 8014348:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801434c:	440b      	add	r3, r1
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	4413      	add	r3, r2
 8014352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 8014354:	69bb      	ldr	r3, [r7, #24]
				& (~(( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014356:	f023 0307 	bic.w	r3, r3, #7
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 801435a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT(
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	f003 0307 	and.w	r3, r3, #7
 8014362:	2b00      	cmp	r3, #0
 8014364:	d00a      	beq.n	801437c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436a:	f383 8811 	msr	BASEPRI, r3
 801436e:	f3bf 8f6f 	isb	sy
 8014372:	f3bf 8f4f 	dsb	sy
 8014376:	617b      	str	r3, [r7, #20]
}
 8014378:	bf00      	nop
 801437a:	e7fe      	b.n	801437a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if (pcName != NULL) {
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d01f      	beq.n	80143c2 <prvInitialiseNewTask+0x9e>
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 8014382:	2300      	movs	r3, #0
 8014384:	61fb      	str	r3, [r7, #28]
 8014386:	e012      	b.n	80143ae <prvInitialiseNewTask+0x8a>
				x++) {
			pxNewTCB->pcTaskName[x] = pcName[x];
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	69fb      	ldr	r3, [r7, #28]
 801438c:	4413      	add	r3, r2
 801438e:	7819      	ldrb	r1, [r3, #0]
 8014390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	4413      	add	r3, r2
 8014396:	3334      	adds	r3, #52	; 0x34
 8014398:	460a      	mov	r2, r1
 801439a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			 configMAX_TASK_NAME_LEN characters just in case the memory after the
			 string is not accessible (extremely unlikely). */
			if (pcName[x] == (char) 0x00) {
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	4413      	add	r3, r2
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d006      	beq.n	80143b6 <prvInitialiseNewTask+0x92>
				x++) {
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	3301      	adds	r3, #1
 80143ac:	61fb      	str	r3, [r7, #28]
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	2b0f      	cmp	r3, #15
 80143b2:	d9e9      	bls.n	8014388 <prvInitialiseNewTask+0x64>
 80143b4:	e000      	b.n	80143b8 <prvInitialiseNewTask+0x94>
				break;
 80143b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		 was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1] = '\0';
 80143b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ba:	2200      	movs	r2, #0
 80143bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80143c0:	e003      	b.n	80143ca <prvInitialiseNewTask+0xa6>
	} else {
		/* The task has not been given a name, so just ensure there is a NULL
		 terminator when it is read out. */
		pxNewTCB->pcTaskName[0] = 0x00;
 80143c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c4:	2200      	movs	r2, #0
 80143c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	 remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t) configMAX_PRIORITIES) {
 80143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143cc:	2b37      	cmp	r3, #55	; 0x37
 80143ce:	d901      	bls.n	80143d4 <prvInitialiseNewTask+0xb0>
		uxPriority = (UBaseType_t) configMAX_PRIORITIES - (UBaseType_t) 1U;
 80143d0:	2337      	movs	r3, #55	; 0x37
 80143d2:	62bb      	str	r3, [r7, #40]	; 0x28
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80143d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143d8:	62da      	str	r2, [r3, #44]	; 0x2c
#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80143e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e2:	2200      	movs	r2, #0
 80143e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 80143e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e8:	3304      	adds	r3, #4
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7ff f8be 	bl	801356c <vListInitialiseItem>
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 80143f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f2:	3318      	adds	r3, #24
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7ff f8b9 	bl	801356c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	 back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 80143fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 8014400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014402:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014408:	619a      	str	r2, [r3, #24]
			( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 801440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801440e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014412:	2200      	movs	r2, #0
 8014414:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014418:	2200      	movs	r2, #0
 801441a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack,
 801441e:	683a      	ldr	r2, [r7, #0]
 8014420:	68f9      	ldr	r1, [r7, #12]
 8014422:	69b8      	ldr	r0, [r7, #24]
 8014424:	f001 fb18 	bl	8015a58 <pxPortInitialiseStack>
 8014428:	4602      	mov	r2, r0
 801442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801442c:	601a      	str	r2, [r3, #0]
		}
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
#endif /* portUSING_MPU_WRAPPERS */

	if (pxCreatedTask != NULL) {
 801442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014430:	2b00      	cmp	r3, #0
 8014432:	d002      	beq.n	801443a <prvInitialiseNewTask+0x116>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		 change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t) pxNewTCB;
 8014434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014438:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 801443a:	bf00      	nop
 801443c:	3720      	adds	r7, #32
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
	...

08014444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB) {
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	 updated. */
	taskENTER_CRITICAL();
 801444c:	f001 fc32 	bl	8015cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014450:	4b2d      	ldr	r3, [pc, #180]	; (8014508 <prvAddNewTaskToReadyList+0xc4>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	3301      	adds	r3, #1
 8014456:	4a2c      	ldr	r2, [pc, #176]	; (8014508 <prvAddNewTaskToReadyList+0xc4>)
 8014458:	6013      	str	r3, [r2, #0]
		if (pxCurrentTCB == NULL) {
 801445a:	4b2c      	ldr	r3, [pc, #176]	; (801450c <prvAddNewTaskToReadyList+0xc8>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d109      	bne.n	8014476 <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			 the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014462:	4a2a      	ldr	r2, [pc, #168]	; (801450c <prvAddNewTaskToReadyList+0xc8>)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6013      	str	r3, [r2, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t) 1) {
 8014468:	4b27      	ldr	r3, [pc, #156]	; (8014508 <prvAddNewTaskToReadyList+0xc4>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b01      	cmp	r3, #1
 801446e:	d110      	bne.n	8014492 <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				 initialisation required.  We will not recover if this call
				 fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014470:	f000 fdce 	bl	8015010 <prvInitialiseTaskLists>
 8014474:	e00d      	b.n	8014492 <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			 current task if it is the highest priority task to be created
			 so far. */
			if (xSchedulerRunning == pdFALSE) {
 8014476:	4b26      	ldr	r3, [pc, #152]	; (8014510 <prvAddNewTaskToReadyList+0xcc>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d109      	bne.n	8014492 <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 801447e:	4b23      	ldr	r3, [pc, #140]	; (801450c <prvAddNewTaskToReadyList+0xc8>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014488:	429a      	cmp	r2, r3
 801448a:	d802      	bhi.n	8014492 <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
 801448c:	4a1f      	ldr	r2, [pc, #124]	; (801450c <prvAddNewTaskToReadyList+0xc8>)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6013      	str	r3, [r2, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014492:	4b20      	ldr	r3, [pc, #128]	; (8014514 <prvAddNewTaskToReadyList+0xd0>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	3301      	adds	r3, #1
 8014498:	4a1e      	ldr	r2, [pc, #120]	; (8014514 <prvAddNewTaskToReadyList+0xd0>)
 801449a:	6013      	str	r3, [r2, #0]

#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801449c:	4b1d      	ldr	r3, [pc, #116]	; (8014514 <prvAddNewTaskToReadyList+0xd0>)
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList(pxNewTCB);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144a8:	4b1b      	ldr	r3, [pc, #108]	; (8014518 <prvAddNewTaskToReadyList+0xd4>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d903      	bls.n	80144b8 <prvAddNewTaskToReadyList+0x74>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b4:	4a18      	ldr	r2, [pc, #96]	; (8014518 <prvAddNewTaskToReadyList+0xd4>)
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4a15      	ldr	r2, [pc, #84]	; (801451c <prvAddNewTaskToReadyList+0xd8>)
 80144c6:	441a      	add	r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	3304      	adds	r3, #4
 80144cc:	4619      	mov	r1, r3
 80144ce:	4610      	mov	r0, r2
 80144d0:	f7ff f859 	bl	8013586 <vListInsertEnd>

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
 80144d4:	f001 fc1e 	bl	8015d14 <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE) {
 80144d8:	4b0d      	ldr	r3, [pc, #52]	; (8014510 <prvAddNewTaskToReadyList+0xcc>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00e      	beq.n	80144fe <prvAddNewTaskToReadyList+0xba>
		/* If the created task is of a higher priority than the current task
		 then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 80144e0:	4b0a      	ldr	r3, [pc, #40]	; (801450c <prvAddNewTaskToReadyList+0xc8>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d207      	bcs.n	80144fe <prvAddNewTaskToReadyList+0xba>
			taskYIELD_IF_USING_PREEMPTION();
 80144ee:	4b0c      	ldr	r3, [pc, #48]	; (8014520 <prvAddNewTaskToReadyList+0xdc>)
 80144f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f4:	601a      	str	r2, [r3, #0]
 80144f6:	f3bf 8f4f 	dsb	sy
 80144fa:	f3bf 8f6f 	isb	sy
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144fe:	bf00      	nop
 8014500:	3708      	adds	r7, #8
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	24001c7c 	.word	0x24001c7c
 801450c:	240017a8 	.word	0x240017a8
 8014510:	24001c88 	.word	0x24001c88
 8014514:	24001c98 	.word	0x24001c98
 8014518:	24001c84 	.word	0x24001c84
 801451c:	240017ac 	.word	0x240017ac
 8014520:	e000ed04 	.word	0xe000ed04

08014524 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

void vTaskDelay(const TickType_t xTicksToDelay) {
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801452c:	2300      	movs	r3, #0
 801452e:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t) 0U) {
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d017      	beq.n	8014566 <vTaskDelay+0x42>
		configASSERT(uxSchedulerSuspended == 0);
 8014536:	4b13      	ldr	r3, [pc, #76]	; (8014584 <vTaskDelay+0x60>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00a      	beq.n	8014554 <vTaskDelay+0x30>
	__asm volatile
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	f383 8811 	msr	BASEPRI, r3
 8014546:	f3bf 8f6f 	isb	sy
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	60bb      	str	r3, [r7, #8]
}
 8014550:	bf00      	nop
 8014552:	e7fe      	b.n	8014552 <vTaskDelay+0x2e>
		vTaskSuspendAll();
 8014554:	f000 f99a 	bl	801488c <vTaskSuspendAll>
			 list or removed from the blocked list until the scheduler
			 is resumed.

			 This task cannot be in an event list as it is the currently
			 executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 8014558:	2100      	movs	r1, #0
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 feba 	bl	80152d4 <prvAddCurrentTaskToDelayedList>
		}
		xAlreadyYielded = xTaskResumeAll();
 8014560:	f000 f9a2 	bl	80148a8 <xTaskResumeAll>
 8014564:	60f8      	str	r0, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d107      	bne.n	801457c <vTaskDelay+0x58>
		portYIELD_WITHIN_API()
 801456c:	4b06      	ldr	r3, [pc, #24]	; (8014588 <vTaskDelay+0x64>)
 801456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	f3bf 8f4f 	dsb	sy
 8014578:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 801457c:	bf00      	nop
 801457e:	3710      	adds	r7, #16
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	24001ca4 	.word	0x24001ca4
 8014588:	e000ed04 	.word	0xe000ed04

0801458c <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 801458c:	b580      	push	{r7, lr}
 801458e:	b084      	sub	sp, #16
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

	taskENTER_CRITICAL();
 8014594:	f001 fb8e 	bl	8015cb4 <vPortEnterCritical>
	{
		/* If null is passed in here then it is the running task that is
		 being suspended. */
		pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d102      	bne.n	80145a4 <vTaskSuspend+0x18>
 801459e:	4b30      	ldr	r3, [pc, #192]	; (8014660 <vTaskSuspend+0xd4>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	e000      	b.n	80145a6 <vTaskSuspend+0x1a>
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	60fb      	str	r3, [r7, #12]

		traceTASK_SUSPEND( pxTCB );

		/* Remove task from the ready/delayed list and place in the
		 suspended list. */
		if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	3304      	adds	r3, #4
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7ff f847 	bl	8013640 <uxListRemove>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		/* Is the task waiting on an event also? */
		if ( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL) {
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d004      	beq.n	80145c4 <vTaskSuspend+0x38>
			(void) uxListRemove(&(pxTCB->xEventListItem));
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	3318      	adds	r3, #24
 80145be:	4618      	mov	r0, r3
 80145c0:	f7ff f83e 	bl	8013640 <uxListRemove>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	3304      	adds	r3, #4
 80145c8:	4619      	mov	r1, r3
 80145ca:	4826      	ldr	r0, [pc, #152]	; (8014664 <vTaskSuspend+0xd8>)
 80145cc:	f7fe ffdb 	bl	8013586 <vListInsertEnd>

#if( configUSE_TASK_NOTIFICATIONS == 1 )
		{
			if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d103      	bne.n	80145e4 <vTaskSuspend+0x58>
				/* The task was blocked to wait for a notification, but is
				 now suspended, so no notification was received. */
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	2200      	movs	r2, #0
 80145e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
		}
#endif
	}
	taskEXIT_CRITICAL();
 80145e4:	f001 fb96 	bl	8015d14 <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE) {
 80145e8:	4b1f      	ldr	r3, [pc, #124]	; (8014668 <vTaskSuspend+0xdc>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d005      	beq.n	80145fc <vTaskSuspend+0x70>
		/* Reset the next expected unblock time in case it referred to the
		 task that is now in the Suspended state. */
		taskENTER_CRITICAL();
 80145f0:	f001 fb60 	bl	8015cb4 <vPortEnterCritical>
		{
			prvResetNextTaskUnblockTime();
 80145f4:	f000 fdaa 	bl	801514c <prvResetNextTaskUnblockTime>
		}
		taskEXIT_CRITICAL();
 80145f8:	f001 fb8c 	bl	8015d14 <vPortExitCritical>
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	if (pxTCB == pxCurrentTCB) {
 80145fc:	4b18      	ldr	r3, [pc, #96]	; (8014660 <vTaskSuspend+0xd4>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	68fa      	ldr	r2, [r7, #12]
 8014602:	429a      	cmp	r2, r3
 8014604:	d127      	bne.n	8014656 <vTaskSuspend+0xca>
		if (xSchedulerRunning != pdFALSE) {
 8014606:	4b18      	ldr	r3, [pc, #96]	; (8014668 <vTaskSuspend+0xdc>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d017      	beq.n	801463e <vTaskSuspend+0xb2>
			/* The current task has just been suspended. */
			configASSERT(uxSchedulerSuspended == 0);
 801460e:	4b17      	ldr	r3, [pc, #92]	; (801466c <vTaskSuspend+0xe0>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00a      	beq.n	801462c <vTaskSuspend+0xa0>
	__asm volatile
 8014616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801461a:	f383 8811 	msr	BASEPRI, r3
 801461e:	f3bf 8f6f 	isb	sy
 8014622:	f3bf 8f4f 	dsb	sy
 8014626:	60bb      	str	r3, [r7, #8]
}
 8014628:	bf00      	nop
 801462a:	e7fe      	b.n	801462a <vTaskSuspend+0x9e>
			portYIELD_WITHIN_API()
 801462c:	4b10      	ldr	r3, [pc, #64]	; (8014670 <vTaskSuspend+0xe4>)
 801462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	f3bf 8f4f 	dsb	sy
 8014638:	f3bf 8f6f 	isb	sy
			}
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 801463c:	e00b      	b.n	8014656 <vTaskSuspend+0xca>
			if ( listCURRENT_LIST_LENGTH(&xSuspendedTaskList)
 801463e:	4b09      	ldr	r3, [pc, #36]	; (8014664 <vTaskSuspend+0xd8>)
 8014640:	681a      	ldr	r2, [r3, #0]
					== uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 8014642:	4b0c      	ldr	r3, [pc, #48]	; (8014674 <vTaskSuspend+0xe8>)
 8014644:	681b      	ldr	r3, [r3, #0]
			if ( listCURRENT_LIST_LENGTH(&xSuspendedTaskList)
 8014646:	429a      	cmp	r2, r3
 8014648:	d103      	bne.n	8014652 <vTaskSuspend+0xc6>
				pxCurrentTCB = NULL;
 801464a:	4b05      	ldr	r3, [pc, #20]	; (8014660 <vTaskSuspend+0xd4>)
 801464c:	2200      	movs	r2, #0
 801464e:	601a      	str	r2, [r3, #0]
}
 8014650:	e001      	b.n	8014656 <vTaskSuspend+0xca>
				vTaskSwitchContext();
 8014652:	f000 fa91 	bl	8014b78 <vTaskSwitchContext>
}
 8014656:	bf00      	nop
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	240017a8 	.word	0x240017a8
 8014664:	24001c68 	.word	0x24001c68
 8014668:	24001c88 	.word	0x24001c88
 801466c:	24001ca4 	.word	0x24001ca4
 8014670:	e000ed04 	.word	0xe000ed04
 8014674:	24001c7c 	.word	0x24001c7c

08014678 <prvTaskIsTaskSuspended>:
#endif /* INCLUDE_vTaskSuspend */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

static BaseType_t prvTaskIsTaskSuspended(const TaskHandle_t xTask) {
 8014678:	b480      	push	{r7}
 801467a:	b087      	sub	sp, #28
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014680:	2300      	movs	r3, #0
 8014682:	617b      	str	r3, [r7, #20]
	const TCB_t *const pxTCB = xTask;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	613b      	str	r3, [r7, #16]

	/* Accesses xPendingReadyList so must be called from a critical
	 section. */

	/* It does not make sense to check if the calling task is suspended. */
	configASSERT(xTask);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10a      	bne.n	80146a4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014692:	f383 8811 	msr	BASEPRI, r3
 8014696:	f3bf 8f6f 	isb	sy
 801469a:	f3bf 8f4f 	dsb	sy
 801469e:	60fb      	str	r3, [r7, #12]
}
 80146a0:	bf00      	nop
 80146a2:	e7fe      	b.n	80146a2 <prvTaskIsTaskSuspended+0x2a>

	/* Is the task being resumed actually in the suspended list? */
	if ( listIS_CONTAINED_WITHIN(&xSuspendedTaskList,
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	695b      	ldr	r3, [r3, #20]
 80146a8:	4a0a      	ldr	r2, [pc, #40]	; (80146d4 <prvTaskIsTaskSuspended+0x5c>)
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d10a      	bne.n	80146c4 <prvTaskIsTaskSuspended+0x4c>
			&(pxTCB->xStateListItem)) != pdFALSE) {
		/* Has the task already been resumed from within an ISR? */
		if ( listIS_CONTAINED_WITHIN(&xPendingReadyList,
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b2:	4a09      	ldr	r2, [pc, #36]	; (80146d8 <prvTaskIsTaskSuspended+0x60>)
 80146b4:	4293      	cmp	r3, r2
 80146b6:	d005      	beq.n	80146c4 <prvTaskIsTaskSuspended+0x4c>
				&(pxTCB->xEventListItem)) == pdFALSE) {
			/* Is it in the suspended list because it is in the	Suspended
			 state, or because is is blocked with no timeout? */
			if ( listIS_CONTAINED_WITHIN(NULL,
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d101      	bne.n	80146c4 <prvTaskIsTaskSuspended+0x4c>
					&(pxTCB->xEventListItem)) != pdFALSE) /*lint !e961.  The cast is only redundant when NULL is used. */
					{
				xReturn = pdTRUE;
 80146c0:	2301      	movs	r3, #1
 80146c2:	617b      	str	r3, [r7, #20]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80146c4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80146c6:	4618      	mov	r0, r3
 80146c8:	371c      	adds	r7, #28
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	24001c68 	.word	0x24001c68
 80146d8:	24001c3c 	.word	0x24001c3c

080146dc <xTaskResumeFromISR>:

/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

BaseType_t xTaskResumeFromISR(TaskHandle_t xTaskToResume) {
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80146e4:	2300      	movs	r3, #0
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t *const pxTCB = xTaskToResume;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

	configASSERT(xTaskToResume);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d10a      	bne.n	8014708 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80146f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f6:	f383 8811 	msr	BASEPRI, r3
 80146fa:	f3bf 8f6f 	isb	sy
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	61bb      	str	r3, [r7, #24]
}
 8014704:	bf00      	nop
 8014706:	e7fe      	b.n	8014706 <xTaskResumeFromISR+0x2a>
	 below the maximum system call interrupt priority.  FreeRTOS maintains a
	 separate interrupt safe API to ensure interrupt entry is as fast and as
	 simple as possible.  More information (albeit Cortex-M specific) is
	 provided on the following link:
	 https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014708:	f001 fbb6 	bl	8015e78 <vPortValidateInterruptPriority>
	__asm volatile
 801470c:	f3ef 8211 	mrs	r2, BASEPRI
 8014710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014714:	f383 8811 	msr	BASEPRI, r3
 8014718:	f3bf 8f6f 	isb	sy
 801471c:	f3bf 8f4f 	dsb	sy
 8014720:	617a      	str	r2, [r7, #20]
 8014722:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014724:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014726:	61fb      	str	r3, [r7, #28]
	{
		if (prvTaskIsTaskSuspended(pxTCB) != pdFALSE) {
 8014728:	6a38      	ldr	r0, [r7, #32]
 801472a:	f7ff ffa5 	bl	8014678 <prvTaskIsTaskSuspended>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d030      	beq.n	8014796 <xTaskResumeFromISR+0xba>
			traceTASK_RESUME_FROM_ISR( pxTCB );

			/* Check the ready lists can be accessed. */
			if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8014734:	4b1d      	ldr	r3, [pc, #116]	; (80147ac <xTaskResumeFromISR+0xd0>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d126      	bne.n	801478a <xTaskResumeFromISR+0xae>
				/* Ready lists can be accessed so move the task from the
				 suspended list to the ready list directly. */
				if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 801473c:	6a3b      	ldr	r3, [r7, #32]
 801473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014740:	4b1b      	ldr	r3, [pc, #108]	; (80147b0 <xTaskResumeFromISR+0xd4>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014746:	429a      	cmp	r2, r3
 8014748:	d301      	bcc.n	801474e <xTaskResumeFromISR+0x72>
					xYieldRequired = pdTRUE;
 801474a:	2301      	movs	r3, #1
 801474c:	627b      	str	r3, [r7, #36]	; 0x24
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				(void) uxListRemove(&(pxTCB->xStateListItem));
 801474e:	6a3b      	ldr	r3, [r7, #32]
 8014750:	3304      	adds	r3, #4
 8014752:	4618      	mov	r0, r3
 8014754:	f7fe ff74 	bl	8013640 <uxListRemove>
				prvAddTaskToReadyList(pxTCB);
 8014758:	6a3b      	ldr	r3, [r7, #32]
 801475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801475c:	4b15      	ldr	r3, [pc, #84]	; (80147b4 <xTaskResumeFromISR+0xd8>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	429a      	cmp	r2, r3
 8014762:	d903      	bls.n	801476c <xTaskResumeFromISR+0x90>
 8014764:	6a3b      	ldr	r3, [r7, #32]
 8014766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014768:	4a12      	ldr	r2, [pc, #72]	; (80147b4 <xTaskResumeFromISR+0xd8>)
 801476a:	6013      	str	r3, [r2, #0]
 801476c:	6a3b      	ldr	r3, [r7, #32]
 801476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014770:	4613      	mov	r3, r2
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	4413      	add	r3, r2
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	4a0f      	ldr	r2, [pc, #60]	; (80147b8 <xTaskResumeFromISR+0xdc>)
 801477a:	441a      	add	r2, r3
 801477c:	6a3b      	ldr	r3, [r7, #32]
 801477e:	3304      	adds	r3, #4
 8014780:	4619      	mov	r1, r3
 8014782:	4610      	mov	r0, r2
 8014784:	f7fe feff 	bl	8013586 <vListInsertEnd>
 8014788:	e005      	b.n	8014796 <xTaskResumeFromISR+0xba>
			} else {
				/* The delayed or ready lists cannot be accessed so the task
				 is held in the pending ready list until the scheduler is
				 unsuspended. */
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
 801478a:	6a3b      	ldr	r3, [r7, #32]
 801478c:	3318      	adds	r3, #24
 801478e:	4619      	mov	r1, r3
 8014790:	480a      	ldr	r0, [pc, #40]	; (80147bc <xTaskResumeFromISR+0xe0>)
 8014792:	f7fe fef8 	bl	8013586 <vListInsertEnd>
 8014796:	69fb      	ldr	r3, [r7, #28]
 8014798:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f383 8811 	msr	BASEPRI, r3
}
 80147a0:	bf00      	nop
			mtCOVERAGE_TEST_MARKER();
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

	return xYieldRequired;
 80147a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3728      	adds	r7, #40	; 0x28
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	24001ca4 	.word	0x24001ca4
 80147b0:	240017a8 	.word	0x240017a8
 80147b4:	24001c84 	.word	0x24001c84
 80147b8:	240017ac 	.word	0x240017ac
 80147bc:	24001c3c 	.word	0x24001c3c

080147c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b08a      	sub	sp, #40	; 0x28
 80147c4:	af04      	add	r7, sp, #16
	BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80147c6:	2300      	movs	r3, #0
 80147c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80147ca:	2300      	movs	r3, #0
 80147cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		 address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer,
 80147ce:	463a      	mov	r2, r7
 80147d0:	1d39      	adds	r1, r7, #4
 80147d2:	f107 0308 	add.w	r3, r7, #8
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7fe fc86 	bl	80130e8 <vApplicationGetIdleTaskMemory>
				&pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
		xIdleTaskHandle = xTaskCreateStatic(prvIdleTask,
 80147dc:	6839      	ldr	r1, [r7, #0]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	9202      	str	r2, [sp, #8]
 80147e4:	9301      	str	r3, [sp, #4]
 80147e6:	2300      	movs	r3, #0
 80147e8:	9300      	str	r3, [sp, #0]
 80147ea:	2300      	movs	r3, #0
 80147ec:	460a      	mov	r2, r1
 80147ee:	4921      	ldr	r1, [pc, #132]	; (8014874 <vTaskStartScheduler+0xb4>)
 80147f0:	4821      	ldr	r0, [pc, #132]	; (8014878 <vTaskStartScheduler+0xb8>)
 80147f2:	f7ff fcf5 	bl	80141e0 <xTaskCreateStatic>
 80147f6:	4603      	mov	r3, r0
 80147f8:	4a20      	ldr	r2, [pc, #128]	; (801487c <vTaskStartScheduler+0xbc>)
 80147fa:	6013      	str	r3, [r2, #0]
		configIDLE_TASK_NAME, ulIdleTaskStackSize, (void*) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
		portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
		pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if (xIdleTaskHandle != NULL) {
 80147fc:	4b1f      	ldr	r3, [pc, #124]	; (801487c <vTaskStartScheduler+0xbc>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d002      	beq.n	801480a <vTaskStartScheduler+0x4a>
			xReturn = pdPASS;
 8014804:	2301      	movs	r3, #1
 8014806:	617b      	str	r3, [r7, #20]
 8014808:	e001      	b.n	801480e <vTaskStartScheduler+0x4e>
		} else {
			xReturn = pdFAIL;
 801480a:	2300      	movs	r3, #0
 801480c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

#if ( configUSE_TIMERS == 1 )
	{
		if (xReturn == pdPASS) {
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d102      	bne.n	801481a <vTaskStartScheduler+0x5a>
			xReturn = xTimerCreateTimerTask();
 8014814:	f000 fdb2 	bl	801537c <xTimerCreateTimerTask>
 8014818:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	2b01      	cmp	r3, #1
 801481e:	d116      	bne.n	801484e <vTaskStartScheduler+0x8e>
	__asm volatile
 8014820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014824:	f383 8811 	msr	BASEPRI, r3
 8014828:	f3bf 8f6f 	isb	sy
 801482c:	f3bf 8f4f 	dsb	sy
 8014830:	613b      	str	r3, [r7, #16]
}
 8014832:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014834:	4b12      	ldr	r3, [pc, #72]	; (8014880 <vTaskStartScheduler+0xc0>)
 8014836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801483a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801483c:	4b11      	ldr	r3, [pc, #68]	; (8014884 <vTaskStartScheduler+0xc4>)
 801483e:	2201      	movs	r2, #1
 8014840:	601a      	str	r2, [r3, #0]
		xTickCount = (TickType_t) configINITIAL_TICK_COUNT;
 8014842:	4b11      	ldr	r3, [pc, #68]	; (8014888 <vTaskStartScheduler+0xc8>)
 8014844:	2200      	movs	r2, #0
 8014846:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		 portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
 8014848:	f001 f992 	bl	8015b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	 meaning xIdleTaskHandle is not used anywhere else. */
	(void) xIdleTaskHandle;
}
 801484c:	e00e      	b.n	801486c <vTaskStartScheduler+0xac>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014854:	d10a      	bne.n	801486c <vTaskStartScheduler+0xac>
	__asm volatile
 8014856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801485a:	f383 8811 	msr	BASEPRI, r3
 801485e:	f3bf 8f6f 	isb	sy
 8014862:	f3bf 8f4f 	dsb	sy
 8014866:	60fb      	str	r3, [r7, #12]
}
 8014868:	bf00      	nop
 801486a:	e7fe      	b.n	801486a <vTaskStartScheduler+0xaa>
}
 801486c:	bf00      	nop
 801486e:	3718      	adds	r7, #24
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	08016fec 	.word	0x08016fec
 8014878:	08014fe1 	.word	0x08014fe1
 801487c:	24001ca0 	.word	0x24001ca0
 8014880:	24001c9c 	.word	0x24001c9c
 8014884:	24001c88 	.word	0x24001c88
 8014888:	24001c80 	.word	0x24001c80

0801488c <vTaskSuspendAll>:
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 801488c:	b480      	push	{r7}
 801488e:	af00      	add	r7, sp, #0
	 do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	 is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014890:	4b04      	ldr	r3, [pc, #16]	; (80148a4 <vTaskSuspendAll+0x18>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	3301      	adds	r3, #1
 8014896:	4a03      	ldr	r2, [pc, #12]	; (80148a4 <vTaskSuspendAll+0x18>)
 8014898:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	 the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801489a:	bf00      	nop
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr
 80148a4:	24001ca4 	.word	0x24001ca4

080148a8 <xTaskResumeAll>:
	}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
	TCB_t *pxTCB = NULL;
 80148ae:	2300      	movs	r3, #0
 80148b0:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
 80148b2:	2300      	movs	r3, #0
 80148b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	 previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
 80148b6:	4b42      	ldr	r3, [pc, #264]	; (80149c0 <xTaskResumeAll+0x118>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d10a      	bne.n	80148d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80148be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c2:	f383 8811 	msr	BASEPRI, r3
 80148c6:	f3bf 8f6f 	isb	sy
 80148ca:	f3bf 8f4f 	dsb	sy
 80148ce:	603b      	str	r3, [r7, #0]
}
 80148d0:	bf00      	nop
 80148d2:	e7fe      	b.n	80148d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	 list while the scheduler was suspended.  If this was the case then the
	 removed task will have been added to the xPendingReadyList.  Once the
	 scheduler has been resumed it is safe to move all the pending ready
	 tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80148d4:	f001 f9ee 	bl	8015cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80148d8:	4b39      	ldr	r3, [pc, #228]	; (80149c0 <xTaskResumeAll+0x118>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3b01      	subs	r3, #1
 80148de:	4a38      	ldr	r2, [pc, #224]	; (80149c0 <xTaskResumeAll+0x118>)
 80148e0:	6013      	str	r3, [r2, #0]

		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 80148e2:	4b37      	ldr	r3, [pc, #220]	; (80149c0 <xTaskResumeAll+0x118>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d162      	bne.n	80149b0 <xTaskResumeAll+0x108>
			if (uxCurrentNumberOfTasks > (UBaseType_t) 0U) {
 80148ea:	4b36      	ldr	r3, [pc, #216]	; (80149c4 <xTaskResumeAll+0x11c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d05e      	beq.n	80149b0 <xTaskResumeAll+0x108>
				/* Move any readied tasks from the pending list into the
				 appropriate ready list. */
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 80148f2:	e02f      	b.n	8014954 <xTaskResumeAll+0xac>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f4:	4b34      	ldr	r3, [pc, #208]	; (80149c8 <xTaskResumeAll+0x120>)
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	60fb      	str	r3, [r7, #12]
					(void) uxListRemove(&(pxTCB->xEventListItem));
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	3318      	adds	r3, #24
 8014900:	4618      	mov	r0, r3
 8014902:	f7fe fe9d 	bl	8013640 <uxListRemove>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3304      	adds	r3, #4
 801490a:	4618      	mov	r0, r3
 801490c:	f7fe fe98 	bl	8013640 <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014914:	4b2d      	ldr	r3, [pc, #180]	; (80149cc <xTaskResumeAll+0x124>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	429a      	cmp	r2, r3
 801491a:	d903      	bls.n	8014924 <xTaskResumeAll+0x7c>
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014920:	4a2a      	ldr	r2, [pc, #168]	; (80149cc <xTaskResumeAll+0x124>)
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014928:	4613      	mov	r3, r2
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4413      	add	r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	4a27      	ldr	r2, [pc, #156]	; (80149d0 <xTaskResumeAll+0x128>)
 8014932:	441a      	add	r2, r3
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	3304      	adds	r3, #4
 8014938:	4619      	mov	r1, r3
 801493a:	4610      	mov	r0, r2
 801493c:	f7fe fe23 	bl	8013586 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					 task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014944:	4b23      	ldr	r3, [pc, #140]	; (80149d4 <xTaskResumeAll+0x12c>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801494a:	429a      	cmp	r2, r3
 801494c:	d302      	bcc.n	8014954 <xTaskResumeAll+0xac>
						xYieldPending = pdTRUE;
 801494e:	4b22      	ldr	r3, [pc, #136]	; (80149d8 <xTaskResumeAll+0x130>)
 8014950:	2201      	movs	r2, #1
 8014952:	601a      	str	r2, [r3, #0]
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8014954:	4b1c      	ldr	r3, [pc, #112]	; (80149c8 <xTaskResumeAll+0x120>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1cb      	bne.n	80148f4 <xTaskResumeAll+0x4c>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d001      	beq.n	8014966 <xTaskResumeAll+0xbe>
					 which may have prevented the next unblock time from being
					 re-calculated, in which case re-calculate it now.  Mainly
					 important for low power tickless implementations, where
					 this can prevent an unnecessary exit from low power
					 state. */
					prvResetNextTaskUnblockTime();
 8014962:	f000 fbf3 	bl	801514c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				 they should be processed now.  This ensures the tick count does
				 not	slip, and that any delayed tasks are resumed at the correct
				 time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014966:	4b1d      	ldr	r3, [pc, #116]	; (80149dc <xTaskResumeAll+0x134>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	607b      	str	r3, [r7, #4]

					if (xPendedCounts > (TickType_t) 0U) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d010      	beq.n	8014994 <xTaskResumeAll+0xec>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
 8014972:	f000 f847 	bl	8014a04 <xTaskIncrementTick>
 8014976:	4603      	mov	r3, r0
 8014978:	2b00      	cmp	r3, #0
 801497a:	d002      	beq.n	8014982 <xTaskResumeAll+0xda>
								xYieldPending = pdTRUE;
 801497c:	4b16      	ldr	r3, [pc, #88]	; (80149d8 <xTaskResumeAll+0x130>)
 801497e:	2201      	movs	r2, #1
 8014980:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	3b01      	subs	r3, #1
 8014986:	607b      	str	r3, [r7, #4]
						} while (xPendedCounts > (TickType_t) 0U);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1f1      	bne.n	8014972 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801498e:	4b13      	ldr	r3, [pc, #76]	; (80149dc <xTaskResumeAll+0x134>)
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
 8014994:	4b10      	ldr	r3, [pc, #64]	; (80149d8 <xTaskResumeAll+0x130>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d009      	beq.n	80149b0 <xTaskResumeAll+0x108>
#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801499c:	2301      	movs	r3, #1
 801499e:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
 80149a0:	4b0f      	ldr	r3, [pc, #60]	; (80149e0 <xTaskResumeAll+0x138>)
 80149a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149a6:	601a      	str	r2, [r3, #0]
 80149a8:	f3bf 8f4f 	dsb	sy
 80149ac:	f3bf 8f6f 	isb	sy
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149b0:	f001 f9b0 	bl	8015d14 <vPortExitCritical>

	return xAlreadyYielded;
 80149b4:	68bb      	ldr	r3, [r7, #8]
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	24001ca4 	.word	0x24001ca4
 80149c4:	24001c7c 	.word	0x24001c7c
 80149c8:	24001c3c 	.word	0x24001c3c
 80149cc:	24001c84 	.word	0x24001c84
 80149d0:	240017ac 	.word	0x240017ac
 80149d4:	240017a8 	.word	0x240017a8
 80149d8:	24001c90 	.word	0x24001c90
 80149dc:	24001c8c 	.word	0x24001c8c
 80149e0:	e000ed04 	.word	0xe000ed04

080149e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 80149e4:	b480      	push	{r7}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80149ea:	4b05      	ldr	r3, [pc, #20]	; (8014a00 <xTaskGetTickCount+0x1c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	607b      	str	r3, [r7, #4]
	} portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80149f0:	687b      	ldr	r3, [r7, #4]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	370c      	adds	r7, #12
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop
 8014a00:	24001c80 	.word	0x24001c80

08014a04 <xTaskIncrementTick>:
	}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	 Increments the tick then checks to see if the new tick value will cause any
	 tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8014a0e:	4b4f      	ldr	r3, [pc, #316]	; (8014b4c <xTaskIncrementTick+0x148>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	f040 808f 	bne.w	8014b36 <xTaskIncrementTick+0x132>
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t) 1;
 8014a18:	4b4d      	ldr	r3, [pc, #308]	; (8014b50 <xTaskIncrementTick+0x14c>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		 delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014a20:	4a4b      	ldr	r2, [pc, #300]	; (8014b50 <xTaskIncrementTick+0x14c>)
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	6013      	str	r3, [r2, #0]

		if (xConstTickCount == (TickType_t) 0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d120      	bne.n	8014a6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014a2c:	4b49      	ldr	r3, [pc, #292]	; (8014b54 <xTaskIncrementTick+0x150>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d00a      	beq.n	8014a4c <xTaskIncrementTick+0x48>
	__asm volatile
 8014a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3a:	f383 8811 	msr	BASEPRI, r3
 8014a3e:	f3bf 8f6f 	isb	sy
 8014a42:	f3bf 8f4f 	dsb	sy
 8014a46:	603b      	str	r3, [r7, #0]
}
 8014a48:	bf00      	nop
 8014a4a:	e7fe      	b.n	8014a4a <xTaskIncrementTick+0x46>
 8014a4c:	4b41      	ldr	r3, [pc, #260]	; (8014b54 <xTaskIncrementTick+0x150>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	60fb      	str	r3, [r7, #12]
 8014a52:	4b41      	ldr	r3, [pc, #260]	; (8014b58 <xTaskIncrementTick+0x154>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	4a3f      	ldr	r2, [pc, #252]	; (8014b54 <xTaskIncrementTick+0x150>)
 8014a58:	6013      	str	r3, [r2, #0]
 8014a5a:	4a3f      	ldr	r2, [pc, #252]	; (8014b58 <xTaskIncrementTick+0x154>)
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	6013      	str	r3, [r2, #0]
 8014a60:	4b3e      	ldr	r3, [pc, #248]	; (8014b5c <xTaskIncrementTick+0x158>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	3301      	adds	r3, #1
 8014a66:	4a3d      	ldr	r2, [pc, #244]	; (8014b5c <xTaskIncrementTick+0x158>)
 8014a68:	6013      	str	r3, [r2, #0]
 8014a6a:	f000 fb6f 	bl	801514c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		 the	queue in the order of their wake time - meaning once one task
		 has been found whose block time has not expired there is no need to
		 look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
 8014a6e:	4b3c      	ldr	r3, [pc, #240]	; (8014b60 <xTaskIncrementTick+0x15c>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	693a      	ldr	r2, [r7, #16]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d349      	bcc.n	8014b0c <xTaskIncrementTick+0x108>
			for (;;) {
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8014a78:	4b36      	ldr	r3, [pc, #216]	; (8014b54 <xTaskIncrementTick+0x150>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d104      	bne.n	8014a8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					 to the maximum possible value so it is extremely
					 unlikely that the
					 if( xTickCount >= xNextTaskUnblockTime ) test will pass
					 next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a82:	4b37      	ldr	r3, [pc, #220]	; (8014b60 <xTaskIncrementTick+0x15c>)
 8014a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a88:	601a      	str	r2, [r3, #0]
					break;
 8014a8a:	e03f      	b.n	8014b0c <xTaskIncrementTick+0x108>
				} else {
					/* The delayed list is not empty, get the value of the
					 item at the head of the delayed list.  This is the time
					 at which the task at the head of the delayed list must
					 be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a8c:	4b31      	ldr	r3, [pc, #196]	; (8014b54 <xTaskIncrementTick+0x150>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	607b      	str	r3, [r7, #4]
							&(pxTCB->xStateListItem));

					if (xConstTickCount < xItemValue) {
 8014a9c:	693a      	ldr	r2, [r7, #16]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d203      	bcs.n	8014aac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						 item value is the time at which the task at the head
						 of the blocked list must be removed from the Blocked
						 state -	so record the item value in
						 xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014aa4:	4a2e      	ldr	r2, [pc, #184]	; (8014b60 <xTaskIncrementTick+0x15c>)
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014aaa:	e02f      	b.n	8014b0c <xTaskIncrementTick+0x108>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	3304      	adds	r3, #4
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe fdc5 	bl	8013640 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					 it from the event list. */
					if ( listLIST_ITEM_CONTAINER(
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d004      	beq.n	8014ac8 <xTaskIncrementTick+0xc4>
							&(pxTCB->xEventListItem)) != NULL) {
						(void) uxListRemove(&(pxTCB->xEventListItem));
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	3318      	adds	r3, #24
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fe fdbc 	bl	8013640 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					 list. */
					prvAddTaskToReadyList(pxTCB);
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014acc:	4b25      	ldr	r3, [pc, #148]	; (8014b64 <xTaskIncrementTick+0x160>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d903      	bls.n	8014adc <xTaskIncrementTick+0xd8>
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ad8:	4a22      	ldr	r2, [pc, #136]	; (8014b64 <xTaskIncrementTick+0x160>)
 8014ada:	6013      	str	r3, [r2, #0]
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	4413      	add	r3, r2
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4a1f      	ldr	r2, [pc, #124]	; (8014b68 <xTaskIncrementTick+0x164>)
 8014aea:	441a      	add	r2, r3
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	3304      	adds	r3, #4
 8014af0:	4619      	mov	r1, r3
 8014af2:	4610      	mov	r0, r2
 8014af4:	f7fe fd47 	bl	8013586 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						 only be performed if the unblocked task has a
						 priority that is equal to or higher than the
						 currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afc:	4b1b      	ldr	r3, [pc, #108]	; (8014b6c <xTaskIncrementTick+0x168>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d3b8      	bcc.n	8014a78 <xTaskIncrementTick+0x74>
							xSwitchRequired = pdTRUE;
 8014b06:	2301      	movs	r3, #1
 8014b08:	617b      	str	r3, [r7, #20]
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8014b0a:	e7b5      	b.n	8014a78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		 processing time (time slice) if preemption is on, and the application
		 writer has not explicitly turned time slicing off. */
#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if ( listCURRENT_LIST_LENGTH(
 8014b0c:	4b17      	ldr	r3, [pc, #92]	; (8014b6c <xTaskIncrementTick+0x168>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b12:	4915      	ldr	r1, [pc, #84]	; (8014b68 <xTaskIncrementTick+0x164>)
 8014b14:	4613      	mov	r3, r2
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	4413      	add	r3, r2
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	440b      	add	r3, r1
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d901      	bls.n	8014b28 <xTaskIncrementTick+0x124>
					&(pxReadyTasksLists[pxCurrentTCB->uxPriority]))
					> (UBaseType_t) 1) {
				xSwitchRequired = pdTRUE;
 8014b24:	2301      	movs	r3, #1
 8014b26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

#if ( configUSE_PREEMPTION == 1 )
		{
			if (xYieldPending != pdFALSE) {
 8014b28:	4b11      	ldr	r3, [pc, #68]	; (8014b70 <xTaskIncrementTick+0x16c>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d007      	beq.n	8014b40 <xTaskIncrementTick+0x13c>
				xSwitchRequired = pdTRUE;
 8014b30:	2301      	movs	r3, #1
 8014b32:	617b      	str	r3, [r7, #20]
 8014b34:	e004      	b.n	8014b40 <xTaskIncrementTick+0x13c>
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_PREEMPTION */
	} else {
		++xPendedTicks;
 8014b36:	4b0f      	ldr	r3, [pc, #60]	; (8014b74 <xTaskIncrementTick+0x170>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	4a0d      	ldr	r2, [pc, #52]	; (8014b74 <xTaskIncrementTick+0x170>)
 8014b3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014b40:	697b      	ldr	r3, [r7, #20]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3718      	adds	r7, #24
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	24001ca4 	.word	0x24001ca4
 8014b50:	24001c80 	.word	0x24001c80
 8014b54:	24001c34 	.word	0x24001c34
 8014b58:	24001c38 	.word	0x24001c38
 8014b5c:	24001c94 	.word	0x24001c94
 8014b60:	24001c9c 	.word	0x24001c9c
 8014b64:	24001c84 	.word	0x24001c84
 8014b68:	240017ac 	.word	0x240017ac
 8014b6c:	240017a8 	.word	0x240017a8
 8014b70:	24001c90 	.word	0x24001c90
 8014b74:	24001c8c 	.word	0x24001c8c

08014b78 <vTaskSwitchContext>:
	}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 8014b7e:	4b28      	ldr	r3, [pc, #160]	; (8014c20 <vTaskSwitchContext+0xa8>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d003      	beq.n	8014b8e <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		 switch. */
		xYieldPending = pdTRUE;
 8014b86:	4b27      	ldr	r3, [pc, #156]	; (8014c24 <vTaskSwitchContext+0xac>)
 8014b88:	2201      	movs	r2, #1
 8014b8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b8c:	e041      	b.n	8014c12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014b8e:	4b25      	ldr	r3, [pc, #148]	; (8014c24 <vTaskSwitchContext+0xac>)
 8014b90:	2200      	movs	r2, #0
 8014b92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b94:	4b24      	ldr	r3, [pc, #144]	; (8014c28 <vTaskSwitchContext+0xb0>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	60fb      	str	r3, [r7, #12]
 8014b9a:	e010      	b.n	8014bbe <vTaskSwitchContext+0x46>
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d10a      	bne.n	8014bb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8014ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	607b      	str	r3, [r7, #4]
}
 8014bb4:	bf00      	nop
 8014bb6:	e7fe      	b.n	8014bb6 <vTaskSwitchContext+0x3e>
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3b01      	subs	r3, #1
 8014bbc:	60fb      	str	r3, [r7, #12]
 8014bbe:	491b      	ldr	r1, [pc, #108]	; (8014c2c <vTaskSwitchContext+0xb4>)
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	4613      	mov	r3, r2
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	4413      	add	r3, r2
 8014bc8:	009b      	lsls	r3, r3, #2
 8014bca:	440b      	add	r3, r1
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d0e4      	beq.n	8014b9c <vTaskSwitchContext+0x24>
 8014bd2:	68fa      	ldr	r2, [r7, #12]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	009b      	lsls	r3, r3, #2
 8014bd8:	4413      	add	r3, r2
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	4a13      	ldr	r2, [pc, #76]	; (8014c2c <vTaskSwitchContext+0xb4>)
 8014bde:	4413      	add	r3, r2
 8014be0:	60bb      	str	r3, [r7, #8]
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	605a      	str	r2, [r3, #4]
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	685a      	ldr	r2, [r3, #4]
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	3308      	adds	r3, #8
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d104      	bne.n	8014c02 <vTaskSwitchContext+0x8a>
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	685a      	ldr	r2, [r3, #4]
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	605a      	str	r2, [r3, #4]
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	4a09      	ldr	r2, [pc, #36]	; (8014c30 <vTaskSwitchContext+0xb8>)
 8014c0a:	6013      	str	r3, [r2, #0]
 8014c0c:	4a06      	ldr	r2, [pc, #24]	; (8014c28 <vTaskSwitchContext+0xb0>)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	6013      	str	r3, [r2, #0]
}
 8014c12:	bf00      	nop
 8014c14:	3714      	adds	r7, #20
 8014c16:	46bd      	mov	sp, r7
 8014c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop
 8014c20:	24001ca4 	.word	0x24001ca4
 8014c24:	24001c90 	.word	0x24001c90
 8014c28:	24001c84 	.word	0x24001c84
 8014c2c:	240017ac 	.word	0x240017ac
 8014c30:	240017a8 	.word	0x240017a8

08014c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList,
		const TickType_t xTicksToWait) {
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d10a      	bne.n	8014c5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	60fb      	str	r3, [r7, #12]
}
 8014c56:	bf00      	nop
 8014c58:	e7fe      	b.n	8014c58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	 This is placed in the list in priority order so the highest priority task
	 is the first to be woken by the event.  The queue that contains the event
	 list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 8014c5a:	4b07      	ldr	r3, [pc, #28]	; (8014c78 <vTaskPlaceOnEventList+0x44>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	3318      	adds	r3, #24
 8014c60:	4619      	mov	r1, r3
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7fe fcb3 	bl	80135ce <vListInsert>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 8014c68:	2101      	movs	r1, #1
 8014c6a:	6838      	ldr	r0, [r7, #0]
 8014c6c:	f000 fb32 	bl	80152d4 <prvAddCurrentTaskToDelayedList>
}
 8014c70:	bf00      	nop
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	240017a8 	.word	0x240017a8

08014c7c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList(List_t *pxEventList,
		const TickType_t xItemValue, const TickType_t xTicksToWait) {
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b086      	sub	sp, #24
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d10a      	bne.n	8014ca4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c92:	f383 8811 	msr	BASEPRI, r3
 8014c96:	f3bf 8f6f 	isb	sy
 8014c9a:	f3bf 8f4f 	dsb	sy
 8014c9e:	617b      	str	r3, [r7, #20]
}
 8014ca0:	bf00      	nop
 8014ca2:	e7fe      	b.n	8014ca2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	 the event groups implementation. */
	configASSERT(uxSchedulerSuspended != 0);
 8014ca4:	4b11      	ldr	r3, [pc, #68]	; (8014cec <vTaskPlaceOnUnorderedEventList+0x70>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d10a      	bne.n	8014cc2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb0:	f383 8811 	msr	BASEPRI, r3
 8014cb4:	f3bf 8f6f 	isb	sy
 8014cb8:	f3bf 8f4f 	dsb	sy
 8014cbc:	613b      	str	r3, [r7, #16]
}
 8014cbe:	bf00      	nop
 8014cc0:	e7fe      	b.n	8014cc0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	 event list item here as interrupts won't access the event list item of a
	 task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xEventListItem),
 8014cc2:	4b0b      	ldr	r3, [pc, #44]	; (8014cf0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	68ba      	ldr	r2, [r7, #8]
 8014cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014ccc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	 list.  It is safe to access the event list here because it is part of an
	 event group implementation - and interrupts don't access event groups
	 directly (instead they access them indirectly by pending function calls to
	 the task level). */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 8014cce:	4b08      	ldr	r3, [pc, #32]	; (8014cf0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	3318      	adds	r3, #24
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7fe fc55 	bl	8013586 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 8014cdc:	2101      	movs	r1, #1
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 faf8 	bl	80152d4 <prvAddCurrentTaskToDelayedList>
}
 8014ce4:	bf00      	nop
 8014ce6:	3718      	adds	r7, #24
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	24001ca4 	.word	0x24001ca4
 8014cf0:	240017a8 	.word	0x240017a8

08014cf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d10a      	bne.n	8014d1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0a:	f383 8811 	msr	BASEPRI, r3
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f3bf 8f4f 	dsb	sy
 8014d16:	617b      	str	r3, [r7, #20]
}
 8014d18:	bf00      	nop
 8014d1a:	e7fe      	b.n	8014d1a <vTaskPlaceOnEventListRestricted+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	 In this case it is assume that this is the only task that is going to
	 be waiting on this event list, so the faster vListInsertEnd() function
	 can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 8014d1c:	4b0a      	ldr	r3, [pc, #40]	; (8014d48 <vTaskPlaceOnEventListRestricted+0x54>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	3318      	adds	r3, #24
 8014d22:	4619      	mov	r1, r3
 8014d24:	68f8      	ldr	r0, [r7, #12]
 8014d26:	f7fe fc2e 	bl	8013586 <vListInsertEnd>

	/* If the task should block indefinitely then set the block time to a
	 value that will be recognised as an indefinite delay inside the
	 prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d002      	beq.n	8014d36 <vTaskPlaceOnEventListRestricted+0x42>
		xTicksToWait = portMAX_DELAY;
 8014d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d34:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 8014d36:	6879      	ldr	r1, [r7, #4]
 8014d38:	68b8      	ldr	r0, [r7, #8]
 8014d3a:	f000 facb 	bl	80152d4 <prvAddCurrentTaskToDelayedList>
}
 8014d3e:	bf00      	nop
 8014d40:	3718      	adds	r7, #24
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	240017a8 	.word	0x240017a8

08014d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList) {
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b086      	sub	sp, #24
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
	 get called - the lock count on the queue will get modified instead.  This
	 means exclusive access to the event list is guaranteed here.

	 This function assumes that a check has already been made to ensure that
	 pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	68db      	ldr	r3, [r3, #12]
 8014d5a:	613b      	str	r3, [r7, #16]
	configASSERT(pxUnblockedTCB);
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d10a      	bne.n	8014d78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d66:	f383 8811 	msr	BASEPRI, r3
 8014d6a:	f3bf 8f6f 	isb	sy
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	60fb      	str	r3, [r7, #12]
}
 8014d74:	bf00      	nop
 8014d76:	e7fe      	b.n	8014d76 <xTaskRemoveFromEventList+0x2a>
	(void) uxListRemove(&(pxUnblockedTCB->xEventListItem));
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	3318      	adds	r3, #24
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fe fc5f 	bl	8013640 <uxListRemove>

	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8014d82:	4b1e      	ldr	r3, [pc, #120]	; (8014dfc <xTaskRemoveFromEventList+0xb0>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d11d      	bne.n	8014dc6 <xTaskRemoveFromEventList+0x7a>
		(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fe fc56 	bl	8013640 <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d98:	4b19      	ldr	r3, [pc, #100]	; (8014e00 <xTaskRemoveFromEventList+0xb4>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d903      	bls.n	8014da8 <xTaskRemoveFromEventList+0x5c>
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014da4:	4a16      	ldr	r2, [pc, #88]	; (8014e00 <xTaskRemoveFromEventList+0xb4>)
 8014da6:	6013      	str	r3, [r2, #0]
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dac:	4613      	mov	r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	4413      	add	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	4a13      	ldr	r2, [pc, #76]	; (8014e04 <xTaskRemoveFromEventList+0xb8>)
 8014db6:	441a      	add	r2, r3
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	3304      	adds	r3, #4
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	4610      	mov	r0, r2
 8014dc0:	f7fe fbe1 	bl	8013586 <vListInsertEnd>
 8014dc4:	e005      	b.n	8014dd2 <xTaskRemoveFromEventList+0x86>
		}
		#endif
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		 pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	3318      	adds	r3, #24
 8014dca:	4619      	mov	r1, r3
 8014dcc:	480e      	ldr	r0, [pc, #56]	; (8014e08 <xTaskRemoveFromEventList+0xbc>)
 8014dce:	f7fe fbda 	bl	8013586 <vListInsertEnd>
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd6:	4b0d      	ldr	r3, [pc, #52]	; (8014e0c <xTaskRemoveFromEventList+0xc0>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d905      	bls.n	8014dec <xTaskRemoveFromEventList+0xa0>
		/* Return true if the task removed from the event list has a higher
		 priority than the calling task.  This allows the calling task to know if
		 it should force a context switch now. */
		xReturn = pdTRUE;
 8014de0:	2301      	movs	r3, #1
 8014de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		 "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014de4:	4b0a      	ldr	r3, [pc, #40]	; (8014e10 <xTaskRemoveFromEventList+0xc4>)
 8014de6:	2201      	movs	r2, #1
 8014de8:	601a      	str	r2, [r3, #0]
 8014dea:	e001      	b.n	8014df0 <xTaskRemoveFromEventList+0xa4>
	} else {
		xReturn = pdFALSE;
 8014dec:	2300      	movs	r3, #0
 8014dee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014df0:	697b      	ldr	r3, [r7, #20]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3718      	adds	r7, #24
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	24001ca4 	.word	0x24001ca4
 8014e00:	24001c84 	.word	0x24001c84
 8014e04:	240017ac 	.word	0x240017ac
 8014e08:	24001c3c 	.word	0x24001c3c
 8014e0c:	240017a8 	.word	0x240017a8
 8014e10:	24001c90 	.word	0x24001c90

08014e14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem,
		const TickType_t xItemValue) {
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b086      	sub	sp, #24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
	TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	 the event flags implementation. */
	configASSERT(uxSchedulerSuspended != pdFALSE);
 8014e1e:	4b29      	ldr	r3, [pc, #164]	; (8014ec4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d10a      	bne.n	8014e3c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e2a:	f383 8811 	msr	BASEPRI, r3
 8014e2e:	f3bf 8f6f 	isb	sy
 8014e32:	f3bf 8f4f 	dsb	sy
 8014e36:	613b      	str	r3, [r7, #16]
}
 8014e38:	bf00      	nop
 8014e3a:	e7fe      	b.n	8014e3a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE(pxEventListItem,
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	601a      	str	r2, [r3, #0]
			xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE);

	/* Remove the event list form the event flag.  Interrupts do not access
	 event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER(pxEventListItem); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	68db      	ldr	r3, [r3, #12]
 8014e4a:	617b      	str	r3, [r7, #20]
	configASSERT(pxUnblockedTCB);
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d10a      	bne.n	8014e68 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e56:	f383 8811 	msr	BASEPRI, r3
 8014e5a:	f3bf 8f6f 	isb	sy
 8014e5e:	f3bf 8f4f 	dsb	sy
 8014e62:	60fb      	str	r3, [r7, #12]
}
 8014e64:	bf00      	nop
 8014e66:	e7fe      	b.n	8014e66 <vTaskRemoveFromUnorderedEventList+0x52>
	(void) uxListRemove(pxEventListItem);
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7fe fbe9 	bl	8013640 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	 scheduler is suspended so interrupts will not be accessing the ready
	 lists. */
	(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	3304      	adds	r3, #4
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7fe fbe4 	bl	8013640 <uxListRemove>
	prvAddTaskToReadyList(pxUnblockedTCB);
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7c:	4b12      	ldr	r3, [pc, #72]	; (8014ec8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d903      	bls.n	8014e8c <vTaskRemoveFromUnorderedEventList+0x78>
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e88:	4a0f      	ldr	r2, [pc, #60]	; (8014ec8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e8a:	6013      	str	r3, [r2, #0]
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e90:	4613      	mov	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	4a0c      	ldr	r2, [pc, #48]	; (8014ecc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014e9a:	441a      	add	r2, r3
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	3304      	adds	r3, #4
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	f7fe fb6f 	bl	8013586 <vListInsertEnd>

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 8014ea8:	697b      	ldr	r3, [r7, #20]
 8014eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eac:	4b08      	ldr	r3, [pc, #32]	; (8014ed0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d902      	bls.n	8014ebc <vTaskRemoveFromUnorderedEventList+0xa8>
		/* The unblocked task has a priority above that of the calling task, so
		 a context switch is required.  This function is called with the
		 scheduler suspended so xYieldPending is set so the context switch
		 occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014eb6:	4b07      	ldr	r3, [pc, #28]	; (8014ed4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014eb8:	2201      	movs	r2, #1
 8014eba:	601a      	str	r2, [r3, #0]
	}
}
 8014ebc:	bf00      	nop
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	24001ca4 	.word	0x24001ca4
 8014ec8:	24001c84 	.word	0x24001c84
 8014ecc:	240017ac 	.word	0x240017ac
 8014ed0:	240017a8 	.word	0x240017a8
 8014ed4:	24001c90 	.word	0x24001c90

08014ed8 <vTaskInternalSetTimeOutState>:
	}
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut) {
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ee0:	4b06      	ldr	r3, [pc, #24]	; (8014efc <vTaskInternalSetTimeOutState+0x24>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ee8:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <vTaskInternalSetTimeOutState+0x28>)
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	605a      	str	r2, [r3, #4]
}
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr
 8014efc:	24001c94 	.word	0x24001c94
 8014f00:	24001c80 	.word	0x24001c80

08014f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut,
		TickType_t *const pxTicksToWait) {
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b088      	sub	sp, #32
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10a      	bne.n	8014f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	613b      	str	r3, [r7, #16]
}
 8014f26:	bf00      	nop
 8014f28:	e7fe      	b.n	8014f28 <xTaskCheckForTimeOut+0x24>
	configASSERT(pxTicksToWait);
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d10a      	bne.n	8014f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f34:	f383 8811 	msr	BASEPRI, r3
 8014f38:	f3bf 8f6f 	isb	sy
 8014f3c:	f3bf 8f4f 	dsb	sy
 8014f40:	60fb      	str	r3, [r7, #12]
}
 8014f42:	bf00      	nop
 8014f44:	e7fe      	b.n	8014f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014f46:	f000 feb5 	bl	8015cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014f4a:	4b1d      	ldr	r3, [pc, #116]	; (8014fc0 <xTaskCheckForTimeOut+0xbc>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount
				- pxTimeOut->xTimeOnEntering;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	685b      	ldr	r3, [r3, #4]
		const TickType_t xElapsedTime = xConstTickCount
 8014f54:	69ba      	ldr	r2, [r7, #24]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

#if ( INCLUDE_vTaskSuspend == 1 )
		if (*pxTicksToWait == portMAX_DELAY) {
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f62:	d102      	bne.n	8014f6a <xTaskCheckForTimeOut+0x66>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			 specified is the maximum block time then the task should block
			 indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
 8014f64:	2300      	movs	r3, #0
 8014f66:	61fb      	str	r3, [r7, #28]
 8014f68:	e023      	b.n	8014fb2 <xTaskCheckForTimeOut+0xae>
		} else
#endif

		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	4b15      	ldr	r3, [pc, #84]	; (8014fc4 <xTaskCheckForTimeOut+0xc0>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d007      	beq.n	8014f86 <xTaskCheckForTimeOut+0x82>
				&& (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	69ba      	ldr	r2, [r7, #24]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d302      	bcc.n	8014f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			 vTaskSetTimeout() was called, but has also overflowed since
			 vTaskSetTimeOut() was called.  It must have wrapped all the way
			 around and gone past again. This passed since vTaskSetTimeout()
			 was called. */
			xReturn = pdTRUE;
 8014f80:	2301      	movs	r3, #1
 8014f82:	61fb      	str	r3, [r7, #28]
 8014f84:	e015      	b.n	8014fb2 <xTaskCheckForTimeOut+0xae>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	697a      	ldr	r2, [r7, #20]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d20b      	bcs.n	8014fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	1ad2      	subs	r2, r2, r3
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff ff9b 	bl	8014ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	61fb      	str	r3, [r7, #28]
 8014fa6:	e004      	b.n	8014fb2 <xTaskCheckForTimeOut+0xae>
		} else {
			*pxTicksToWait = 0;
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	2200      	movs	r2, #0
 8014fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014fae:	2301      	movs	r3, #1
 8014fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014fb2:	f000 feaf 	bl	8015d14 <vPortExitCritical>

	return xReturn;
 8014fb6:	69fb      	ldr	r3, [r7, #28]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3720      	adds	r7, #32
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	24001c80 	.word	0x24001c80
 8014fc4:	24001c94 	.word	0x24001c94

08014fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 8014fc8:	b480      	push	{r7}
 8014fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014fcc:	4b03      	ldr	r3, [pc, #12]	; (8014fdc <vTaskMissedYield+0x14>)
 8014fce:	2201      	movs	r2, #1
 8014fd0:	601a      	str	r2, [r3, #0]
}
 8014fd2:	bf00      	nop
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr
 8014fdc:	24001c90 	.word	0x24001c90

08014fe0 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters ) {
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		 is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014fe8:	f000 f852 	bl	8015090 <prvCheckTasksWaitingTermination>

			 A critical region is not required here as we are just reading from
			 the list, and an occasional incorrect value will not matter.  If
			 the ready list at the idle priority contains more than one task
			 then a task other than the idle task is ready to execute. */
			if ( listCURRENT_LIST_LENGTH(
 8014fec:	4b06      	ldr	r3, [pc, #24]	; (8015008 <prvIdleTask+0x28>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d9f9      	bls.n	8014fe8 <prvIdleTask+0x8>
					&( pxReadyTasksLists[ tskIDLE_PRIORITY ] ))
					> (UBaseType_t) 1) {
				taskYIELD();
 8014ff4:	4b05      	ldr	r3, [pc, #20]	; (801500c <prvIdleTask+0x2c>)
 8014ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ffa:	601a      	str	r2, [r3, #0]
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015004:	e7f0      	b.n	8014fe8 <prvIdleTask+0x8>
 8015006:	bf00      	nop
 8015008:	240017ac 	.word	0x240017ac
 801500c:	e000ed04 	.word	0xe000ed04

08015010 <prvInitialiseTaskLists>:
	}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t) 0U;
 8015016:	2300      	movs	r3, #0
 8015018:	607b      	str	r3, [r7, #4]
 801501a:	e00c      	b.n	8015036 <prvInitialiseTaskLists+0x26>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	4613      	mov	r3, r2
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	4413      	add	r3, r2
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	4a12      	ldr	r2, [pc, #72]	; (8015070 <prvInitialiseTaskLists+0x60>)
 8015028:	4413      	add	r3, r2
 801502a:	4618      	mov	r0, r3
 801502c:	f7fe fa7e 	bl	801352c <vListInitialise>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	3301      	adds	r3, #1
 8015034:	607b      	str	r3, [r7, #4]
	for (uxPriority = (UBaseType_t) 0U;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2b37      	cmp	r3, #55	; 0x37
 801503a:	d9ef      	bls.n	801501c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
 801503c:	480d      	ldr	r0, [pc, #52]	; (8015074 <prvInitialiseTaskLists+0x64>)
 801503e:	f7fe fa75 	bl	801352c <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 8015042:	480d      	ldr	r0, [pc, #52]	; (8015078 <prvInitialiseTaskLists+0x68>)
 8015044:	f7fe fa72 	bl	801352c <vListInitialise>
	vListInitialise(&xPendingReadyList);
 8015048:	480c      	ldr	r0, [pc, #48]	; (801507c <prvInitialiseTaskLists+0x6c>)
 801504a:	f7fe fa6f 	bl	801352c <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise(&xTasksWaitingTermination);
 801504e:	480c      	ldr	r0, [pc, #48]	; (8015080 <prvInitialiseTaskLists+0x70>)
 8015050:	f7fe fa6c 	bl	801352c <vListInitialise>
	}
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise(&xSuspendedTaskList);
 8015054:	480b      	ldr	r0, [pc, #44]	; (8015084 <prvInitialiseTaskLists+0x74>)
 8015056:	f7fe fa69 	bl	801352c <vListInitialise>
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	 using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801505a:	4b0b      	ldr	r3, [pc, #44]	; (8015088 <prvInitialiseTaskLists+0x78>)
 801505c:	4a05      	ldr	r2, [pc, #20]	; (8015074 <prvInitialiseTaskLists+0x64>)
 801505e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015060:	4b0a      	ldr	r3, [pc, #40]	; (801508c <prvInitialiseTaskLists+0x7c>)
 8015062:	4a05      	ldr	r2, [pc, #20]	; (8015078 <prvInitialiseTaskLists+0x68>)
 8015064:	601a      	str	r2, [r3, #0]
}
 8015066:	bf00      	nop
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	240017ac 	.word	0x240017ac
 8015074:	24001c0c 	.word	0x24001c0c
 8015078:	24001c20 	.word	0x24001c20
 801507c:	24001c3c 	.word	0x24001c3c
 8015080:	24001c50 	.word	0x24001c50
 8015084:	24001c68 	.word	0x24001c68
 8015088:	24001c34 	.word	0x24001c34
 801508c:	24001c38 	.word	0x24001c38

08015090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		 being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 8015096:	e019      	b.n	80150cc <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 8015098:	f000 fe0c 	bl	8015cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 801509c:	4b10      	ldr	r3, [pc, #64]	; (80150e0 <prvCheckTasksWaitingTermination+0x50>)
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	607b      	str	r3, [r7, #4]
						(&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
				(void) uxListRemove(&(pxTCB->xStateListItem));
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	3304      	adds	r3, #4
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7fe fac9 	bl	8013640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80150ae:	4b0d      	ldr	r3, [pc, #52]	; (80150e4 <prvCheckTasksWaitingTermination+0x54>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	3b01      	subs	r3, #1
 80150b4:	4a0b      	ldr	r2, [pc, #44]	; (80150e4 <prvCheckTasksWaitingTermination+0x54>)
 80150b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80150b8:	4b0b      	ldr	r3, [pc, #44]	; (80150e8 <prvCheckTasksWaitingTermination+0x58>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	3b01      	subs	r3, #1
 80150be:	4a0a      	ldr	r2, [pc, #40]	; (80150e8 <prvCheckTasksWaitingTermination+0x58>)
 80150c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80150c2:	f000 fe27 	bl	8015d14 <vPortExitCritical>

			prvDeleteTCB(pxTCB);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f810 	bl	80150ec <prvDeleteTCB>
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 80150cc:	4b06      	ldr	r3, [pc, #24]	; (80150e8 <prvCheckTasksWaitingTermination+0x58>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d1e1      	bne.n	8015098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
 80150d4:	bf00      	nop
 80150d6:	bf00      	nop
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	24001c50 	.word	0x24001c50
 80150e4:	24001c7c 	.word	0x24001c7c
 80150e8:	24001c64 	.word	0x24001c64

080150ec <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

static void prvDeleteTCB(TCB_t *pxTCB) {
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
	{
		/* The task could have been allocated statically or dynamically, so
		 check what was statically allocated before trying to free the
		 memory. */
		if (pxTCB->ucStaticallyAllocated
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d108      	bne.n	8015110 <prvDeleteTCB+0x24>
				== tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
			/* Both the stack and TCB were allocated dynamically, so both
			 must be freed. */
			vPortFree(pxTCB->pxStack);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015102:	4618      	mov	r0, r3
 8015104:	f000 ffc4 	bl	8016090 <vPortFree>
			vPortFree(pxTCB);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f000 ffc1 	bl	8016090 <vPortFree>
			configASSERT(
					pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB); mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801510e:	e018      	b.n	8015142 <prvDeleteTCB+0x56>
		} else if (pxTCB->ucStaticallyAllocated
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015116:	2b01      	cmp	r3, #1
 8015118:	d103      	bne.n	8015122 <prvDeleteTCB+0x36>
			vPortFree(pxTCB);
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 ffb8 	bl	8016090 <vPortFree>
}
 8015120:	e00f      	b.n	8015142 <prvDeleteTCB+0x56>
			configASSERT(
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015128:	2b02      	cmp	r3, #2
 801512a:	d00a      	beq.n	8015142 <prvDeleteTCB+0x56>
	__asm volatile
 801512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015130:	f383 8811 	msr	BASEPRI, r3
 8015134:	f3bf 8f6f 	isb	sy
 8015138:	f3bf 8f4f 	dsb	sy
 801513c:	60fb      	str	r3, [r7, #12]
}
 801513e:	bf00      	nop
 8015140:	e7fe      	b.n	8015140 <prvDeleteTCB+0x54>
}
 8015142:	bf00      	nop
 8015144:	3710      	adds	r7, #16
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
	...

0801514c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 801514c:	b480      	push	{r7}
 801514e:	b083      	sub	sp, #12
 8015150:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8015152:	4b0c      	ldr	r3, [pc, #48]	; (8015184 <prvResetNextTaskUnblockTime+0x38>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d104      	bne.n	8015166 <prvResetNextTaskUnblockTime+0x1a>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		 the maximum possible value so it is	extremely unlikely that the
		 if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		 there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801515c:	4b0a      	ldr	r3, [pc, #40]	; (8015188 <prvResetNextTaskUnblockTime+0x3c>)
 801515e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015162:	601a      	str	r2, [r3, #0]
		 from the Blocked state. */
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
				&((pxTCB)->xStateListItem));
	}
}
 8015164:	e008      	b.n	8015178 <prvResetNextTaskUnblockTime+0x2c>
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015166:	4b07      	ldr	r3, [pc, #28]	; (8015184 <prvResetNextTaskUnblockTime+0x38>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	4a04      	ldr	r2, [pc, #16]	; (8015188 <prvResetNextTaskUnblockTime+0x3c>)
 8015176:	6013      	str	r3, [r2, #0]
}
 8015178:	bf00      	nop
 801517a:	370c      	adds	r7, #12
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr
 8015184:	24001c34 	.word	0x24001c34
 8015188:	24001c9c 	.word	0x24001c9c

0801518c <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

BaseType_t xTaskGetSchedulerState(void) {
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
 8015192:	4b0b      	ldr	r3, [pc, #44]	; (80151c0 <xTaskGetSchedulerState+0x34>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d102      	bne.n	80151a0 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
 801519a:	2301      	movs	r3, #1
 801519c:	607b      	str	r3, [r7, #4]
 801519e:	e008      	b.n	80151b2 <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 80151a0:	4b08      	ldr	r3, [pc, #32]	; (80151c4 <xTaskGetSchedulerState+0x38>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d102      	bne.n	80151ae <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
 80151a8:	2302      	movs	r3, #2
 80151aa:	607b      	str	r3, [r7, #4]
 80151ac:	e001      	b.n	80151b2 <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
 80151ae:	2300      	movs	r3, #0
 80151b0:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
 80151b2:	687b      	ldr	r3, [r7, #4]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	370c      	adds	r7, #12
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr
 80151c0:	24001c88 	.word	0x24001c88
 80151c4:	24001ca4 	.word	0x24001ca4

080151c8 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b086      	sub	sp, #24
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
	TCB_t *const pxTCB = pxMutexHolder;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80151d4:	2300      	movs	r3, #0
 80151d6:	617b      	str	r3, [r7, #20]

	if (pxMutexHolder != NULL) {
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d056      	beq.n	801528c <xTaskPriorityDisinherit+0xc4>
		/* A task can only have an inherited priority if it holds the mutex.
		 If the mutex is held by a task then it cannot be given from an
		 interrupt, and if a mutex is given by the holding task then it must
		 be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
 80151de:	4b2e      	ldr	r3, [pc, #184]	; (8015298 <xTaskPriorityDisinherit+0xd0>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	693a      	ldr	r2, [r7, #16]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d00a      	beq.n	80151fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80151e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ec:	f383 8811 	msr	BASEPRI, r3
 80151f0:	f3bf 8f6f 	isb	sy
 80151f4:	f3bf 8f4f 	dsb	sy
 80151f8:	60fb      	str	r3, [r7, #12]
}
 80151fa:	bf00      	nop
 80151fc:	e7fe      	b.n	80151fc <xTaskPriorityDisinherit+0x34>
		configASSERT(pxTCB->uxMutexesHeld);
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015202:	2b00      	cmp	r3, #0
 8015204:	d10a      	bne.n	801521c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520a:	f383 8811 	msr	BASEPRI, r3
 801520e:	f3bf 8f6f 	isb	sy
 8015212:	f3bf 8f4f 	dsb	sy
 8015216:	60bb      	str	r3, [r7, #8]
}
 8015218:	bf00      	nop
 801521a:	e7fe      	b.n	801521a <xTaskPriorityDisinherit+0x52>
		(pxTCB->uxMutexesHeld)--;
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015220:	1e5a      	subs	r2, r3, #1
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	651a      	str	r2, [r3, #80]	; 0x50

		/* Has the holder of the mutex inherited the priority of another
		 task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 8015226:	693b      	ldr	r3, [r7, #16]
 8015228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801522e:	429a      	cmp	r2, r3
 8015230:	d02c      	beq.n	801528c <xTaskPriorityDisinherit+0xc4>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t) 0) {
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015236:	2b00      	cmp	r3, #0
 8015238:	d128      	bne.n	801528c <xTaskPriorityDisinherit+0xc4>
				/* A task can only have an inherited priority if it holds
				 the mutex.  If the mutex is held by a task then it cannot be
				 given from an interrupt, and if a mutex is given by the
				 holding task then it must be the running state task.  Remove
				 the holding task from the ready/delayed list. */
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	3304      	adds	r3, #4
 801523e:	4618      	mov	r0, r3
 8015240:	f7fe f9fe 	bl	8013640 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the
				 new	ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
				 any other purpose if this task is running, and it must be
				 running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	619a      	str	r2, [r3, #24]
						( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				prvAddTaskToReadyList(pxTCB);
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801525c:	4b0f      	ldr	r3, [pc, #60]	; (801529c <xTaskPriorityDisinherit+0xd4>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	429a      	cmp	r2, r3
 8015262:	d903      	bls.n	801526c <xTaskPriorityDisinherit+0xa4>
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015268:	4a0c      	ldr	r2, [pc, #48]	; (801529c <xTaskPriorityDisinherit+0xd4>)
 801526a:	6013      	str	r3, [r2, #0]
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015270:	4613      	mov	r3, r2
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	4413      	add	r3, r2
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	4a09      	ldr	r2, [pc, #36]	; (80152a0 <xTaskPriorityDisinherit+0xd8>)
 801527a:	441a      	add	r2, r3
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	3304      	adds	r3, #4
 8015280:	4619      	mov	r1, r3
 8015282:	4610      	mov	r0, r2
 8015284:	f7fe f97f 	bl	8013586 <vListInsertEnd>
				 in an order different to that in which they were taken.
				 If a context switch did not occur when the first mutex was
				 returned, even if a task was waiting on it, then a context
				 switch should occur when the last mutex is returned whether
				 a task is waiting on it or not. */
				xReturn = pdTRUE;
 8015288:	2301      	movs	r3, #1
 801528a:	617b      	str	r3, [r7, #20]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801528c:	697b      	ldr	r3, [r7, #20]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	240017a8 	.word	0x240017a8
 801529c:	24001c84 	.word	0x24001c84
 80152a0:	240017ac 	.word	0x240017ac

080152a4 <uxTaskResetEventItemValue>:
	}

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue(void) {
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
	TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE(&(pxCurrentTCB->xEventListItem));
 80152aa:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <uxTaskResetEventItemValue+0x2c>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	699b      	ldr	r3, [r3, #24]
 80152b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	 queues and semaphores. */
	listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xEventListItem),
 80152b2:	4b07      	ldr	r3, [pc, #28]	; (80152d0 <uxTaskResetEventItemValue+0x2c>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b8:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <uxTaskResetEventItemValue+0x2c>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80152c0:	619a      	str	r2, [r3, #24]
			( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority )); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
 80152c2:	687b      	ldr	r3, [r7, #4]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr
 80152d0:	240017a8 	.word	0x240017a8

080152d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,
		const BaseType_t xCanBlockIndefinitely) {
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 80152de:	4b21      	ldr	r3, [pc, #132]	; (8015364 <prvAddCurrentTaskToDelayedList+0x90>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	 as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 80152e4:	4b20      	ldr	r3, [pc, #128]	; (8015368 <prvAddCurrentTaskToDelayedList+0x94>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	3304      	adds	r3, #4
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fe f9a8 	bl	8013640 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if ((xTicksToWait == portMAX_DELAY )
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152f6:	d10a      	bne.n	801530e <prvAddCurrentTaskToDelayedList+0x3a>
				&& (xCanBlockIndefinitely != pdFALSE)) {
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d007      	beq.n	801530e <prvAddCurrentTaskToDelayedList+0x3a>
			/* Add the task to the suspended task list instead of a delayed task
			 list to ensure it is not woken by a timing event.  It will block
			 indefinitely. */
			vListInsertEnd(&xSuspendedTaskList,
					&(pxCurrentTCB->xStateListItem));
 80152fe:	4b1a      	ldr	r3, [pc, #104]	; (8015368 <prvAddCurrentTaskToDelayedList+0x94>)
 8015300:	681b      	ldr	r3, [r3, #0]
			vListInsertEnd(&xSuspendedTaskList,
 8015302:	3304      	adds	r3, #4
 8015304:	4619      	mov	r1, r3
 8015306:	4819      	ldr	r0, [pc, #100]	; (801536c <prvAddCurrentTaskToDelayedList+0x98>)
 8015308:	f7fe f93d 	bl	8013586 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801530c:	e026      	b.n	801535c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801530e:	68fa      	ldr	r2, [r7, #12]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	4413      	add	r3, r2
 8015314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem),
 8015316:	4b14      	ldr	r3, [pc, #80]	; (8015368 <prvAddCurrentTaskToDelayedList+0x94>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	68ba      	ldr	r2, [r7, #8]
 801531c:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
 801531e:	68ba      	ldr	r2, [r7, #8]
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	429a      	cmp	r2, r3
 8015324:	d209      	bcs.n	801533a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList,
 8015326:	4b12      	ldr	r3, [pc, #72]	; (8015370 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015328:	681a      	ldr	r2, [r3, #0]
						&(pxCurrentTCB->xStateListItem));
 801532a:	4b0f      	ldr	r3, [pc, #60]	; (8015368 <prvAddCurrentTaskToDelayedList+0x94>)
 801532c:	681b      	ldr	r3, [r3, #0]
				vListInsert(pxOverflowDelayedTaskList,
 801532e:	3304      	adds	r3, #4
 8015330:	4619      	mov	r1, r3
 8015332:	4610      	mov	r0, r2
 8015334:	f7fe f94b 	bl	80135ce <vListInsert>
}
 8015338:	e010      	b.n	801535c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 801533a:	4b0e      	ldr	r3, [pc, #56]	; (8015374 <prvAddCurrentTaskToDelayedList+0xa0>)
 801533c:	681a      	ldr	r2, [r3, #0]
 801533e:	4b0a      	ldr	r3, [pc, #40]	; (8015368 <prvAddCurrentTaskToDelayedList+0x94>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	3304      	adds	r3, #4
 8015344:	4619      	mov	r1, r3
 8015346:	4610      	mov	r0, r2
 8015348:	f7fe f941 	bl	80135ce <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime) {
 801534c:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <prvAddCurrentTaskToDelayedList+0xa4>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	429a      	cmp	r2, r3
 8015354:	d202      	bcs.n	801535c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015356:	4a08      	ldr	r2, [pc, #32]	; (8015378 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	6013      	str	r3, [r2, #0]
}
 801535c:	bf00      	nop
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	24001c80 	.word	0x24001c80
 8015368:	240017a8 	.word	0x240017a8
 801536c:	24001c68 	.word	0x24001c68
 8015370:	24001c38 	.word	0x24001c38
 8015374:	24001c34 	.word	0x24001c34
 8015378:	24001c9c 	.word	0x24001c9c

0801537c <xTimerCreateTimerTask>:
const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload,
		void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction,
		Timer_t *pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 801537c:	b580      	push	{r7, lr}
 801537e:	b08a      	sub	sp, #40	; 0x28
 8015380:	af04      	add	r7, sp, #16
	BaseType_t xReturn = pdFAIL;
 8015382:	2300      	movs	r3, #0
 8015384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	 configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	 timer service task has been created/initialised.  If timers have already
	 been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015386:	f000 fb07 	bl	8015998 <prvCheckForValidListAndQueue>

	if (xTimerQueue != NULL) {
 801538a:	4b1c      	ldr	r3, [pc, #112]	; (80153fc <xTimerCreateTimerTask+0x80>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d021      	beq.n	80153d6 <xTimerCreateTimerTask+0x5a>
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015392:	2300      	movs	r3, #0
 8015394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015396:	2300      	movs	r3, #0
 8015398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer,
 801539a:	1d3a      	adds	r2, r7, #4
 801539c:	f107 0108 	add.w	r1, r7, #8
 80153a0:	f107 030c 	add.w	r3, r7, #12
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fd feb9 	bl	801311c <vApplicationGetTimerTaskMemory>
					&pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
			xTimerTaskHandle = xTaskCreateStatic(prvTimerTask,
 80153aa:	6879      	ldr	r1, [r7, #4]
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	9202      	str	r2, [sp, #8]
 80153b2:	9301      	str	r3, [sp, #4]
 80153b4:	2302      	movs	r3, #2
 80153b6:	9300      	str	r3, [sp, #0]
 80153b8:	2300      	movs	r3, #0
 80153ba:	460a      	mov	r2, r1
 80153bc:	4910      	ldr	r1, [pc, #64]	; (8015400 <xTimerCreateTimerTask+0x84>)
 80153be:	4811      	ldr	r0, [pc, #68]	; (8015404 <xTimerCreateTimerTask+0x88>)
 80153c0:	f7fe ff0e 	bl	80141e0 <xTaskCreateStatic>
 80153c4:	4603      	mov	r3, r0
 80153c6:	4a10      	ldr	r2, [pc, #64]	; (8015408 <xTimerCreateTimerTask+0x8c>)
 80153c8:	6013      	str	r3, [r2, #0]
			configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize,
			NULL, ((UBaseType_t) configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT,
					pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);

			if (xTimerTaskHandle != NULL) {
 80153ca:	4b0f      	ldr	r3, [pc, #60]	; (8015408 <xTimerCreateTimerTask+0x8c>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d001      	beq.n	80153d6 <xTimerCreateTimerTask+0x5a>
				xReturn = pdPASS;
 80153d2:	2301      	movs	r3, #1
 80153d4:	617b      	str	r3, [r7, #20]
		#endif /* configSUPPORT_STATIC_ALLOCATION */
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT(xReturn);
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d10a      	bne.n	80153f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80153dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e0:	f383 8811 	msr	BASEPRI, r3
 80153e4:	f3bf 8f6f 	isb	sy
 80153e8:	f3bf 8f4f 	dsb	sy
 80153ec:	613b      	str	r3, [r7, #16]
}
 80153ee:	bf00      	nop
 80153f0:	e7fe      	b.n	80153f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80153f2:	697b      	ldr	r3, [r7, #20]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	24001cd8 	.word	0x24001cd8
 8015400:	08016ff4 	.word	0x08016ff4
 8015404:	08015541 	.word	0x08015541
 8015408:	24001cdc 	.word	0x24001cdc

0801540c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer,
		const BaseType_t xCommandID, const TickType_t xOptionalValue,
		BaseType_t *const pxHigherPriorityTaskWoken,
		const TickType_t xTicksToWait) {
 801540c:	b580      	push	{r7, lr}
 801540e:	b08a      	sub	sp, #40	; 0x28
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]
 8015418:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn = pdFAIL;
 801541a:	2300      	movs	r3, #0
 801541c:	627b      	str	r3, [r7, #36]	; 0x24
	DaemonTaskMessage_t xMessage;

	configASSERT(xTimer);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d10a      	bne.n	801543a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015428:	f383 8811 	msr	BASEPRI, r3
 801542c:	f3bf 8f6f 	isb	sy
 8015430:	f3bf 8f4f 	dsb	sy
 8015434:	623b      	str	r3, [r7, #32]
}
 8015436:	bf00      	nop
 8015438:	e7fe      	b.n	8015438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	 on a particular timer definition. */
	if (xTimerQueue != NULL) {
 801543a:	4b1a      	ldr	r3, [pc, #104]	; (80154a4 <xTimerGenericCommand+0x98>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d02a      	beq.n	8015498 <xTimerGenericCommand+0x8c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	61bb      	str	r3, [r7, #24]

		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	2b05      	cmp	r3, #5
 8015452:	dc18      	bgt.n	8015486 <xTimerGenericCommand+0x7a>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 8015454:	f7ff fe9a 	bl	801518c <xTaskGetSchedulerState>
 8015458:	4603      	mov	r3, r0
 801545a:	2b02      	cmp	r3, #2
 801545c:	d109      	bne.n	8015472 <xTimerGenericCommand+0x66>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage,
 801545e:	4b11      	ldr	r3, [pc, #68]	; (80154a4 <xTimerGenericCommand+0x98>)
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f107 0110 	add.w	r1, r7, #16
 8015466:	2300      	movs	r3, #0
 8015468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801546a:	f7fe fa51 	bl	8013910 <xQueueGenericSend>
 801546e:	6278      	str	r0, [r7, #36]	; 0x24
 8015470:	e012      	b.n	8015498 <xTimerGenericCommand+0x8c>
						xTicksToWait);
			} else {
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 8015472:	4b0c      	ldr	r3, [pc, #48]	; (80154a4 <xTimerGenericCommand+0x98>)
 8015474:	6818      	ldr	r0, [r3, #0]
 8015476:	f107 0110 	add.w	r1, r7, #16
 801547a:	2300      	movs	r3, #0
 801547c:	2200      	movs	r2, #0
 801547e:	f7fe fa47 	bl	8013910 <xQueueGenericSend>
 8015482:	6278      	str	r0, [r7, #36]	; 0x24
 8015484:	e008      	b.n	8015498 <xTimerGenericCommand+0x8c>
			}
		} else {
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage,
 8015486:	4b07      	ldr	r3, [pc, #28]	; (80154a4 <xTimerGenericCommand+0x98>)
 8015488:	6818      	ldr	r0, [r3, #0]
 801548a:	f107 0110 	add.w	r1, r7, #16
 801548e:	2300      	movs	r3, #0
 8015490:	683a      	ldr	r2, [r7, #0]
 8015492:	f7fe fb3b 	bl	8013b0c <xQueueGenericSendFromISR>
 8015496:	6278      	str	r0, [r7, #36]	; 0x24
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801549a:	4618      	mov	r0, r3
 801549c:	3728      	adds	r7, #40	; 0x28
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	24001cd8 	.word	0x24001cd8

080154a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime,
		const TickType_t xTimeNow) {
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b088      	sub	sp, #32
 80154ac:	af02      	add	r7, sp, #8
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	6039      	str	r1, [r7, #0]
	BaseType_t xResult;
	Timer_t *const pxTimer = (Timer_t*) listGET_OWNER_OF_HEAD_ENTRY(
 80154b2:	4b22      	ldr	r3, [pc, #136]	; (801553c <prvProcessExpiredTimer+0x94>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	617b      	str	r3, [r7, #20]
			pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

	/* Remove the timer from the list of active timers.  A check has already
	 been performed to ensure the list is not empty. */
	(void) uxListRemove(&(pxTimer->xTimerListItem));
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	3304      	adds	r3, #4
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fe f8bd 	bl	8013640 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	 expiry time and re-insert the timer in the list of active timers. */
	if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154cc:	f003 0304 	and.w	r3, r3, #4
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d022      	beq.n	801551a <prvProcessExpiredTimer+0x72>
		/* The timer is inserted into a list using a time relative to anything
		 other than the current time.  It will therefore be inserted into the
		 correct list relative to the time this task thinks it is now. */
		if (prvInsertTimerInActiveList(pxTimer,
				(xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow,
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	699a      	ldr	r2, [r3, #24]
		if (prvInsertTimerInActiveList(pxTimer,
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	18d1      	adds	r1, r2, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	683a      	ldr	r2, [r7, #0]
 80154e0:	6978      	ldr	r0, [r7, #20]
 80154e2:	f000 f8d1 	bl	8015688 <prvInsertTimerInActiveList>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d01f      	beq.n	801552c <prvProcessExpiredTimer+0x84>
				xNextExpireTime) != pdFALSE) {
			/* The timer expired before it was added to the active timer
			 list.  Reload it now.  */
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE,
 80154ec:	2300      	movs	r3, #0
 80154ee:	9300      	str	r3, [sp, #0]
 80154f0:	2300      	movs	r3, #0
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	2100      	movs	r1, #0
 80154f6:	6978      	ldr	r0, [r7, #20]
 80154f8:	f7ff ff88 	bl	801540c <xTimerGenericCommand>
 80154fc:	6138      	str	r0, [r7, #16]
					xNextExpireTime, NULL, tmrNO_DELAY);
			configASSERT(xResult);
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d113      	bne.n	801552c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015508:	f383 8811 	msr	BASEPRI, r3
 801550c:	f3bf 8f6f 	isb	sy
 8015510:	f3bf 8f4f 	dsb	sy
 8015514:	60fb      	str	r3, [r7, #12]
}
 8015516:	bf00      	nop
 8015518:	e7fe      	b.n	8015518 <prvProcessExpiredTimer+0x70>
			(void) xResult;
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015520:	f023 0301 	bic.w	r3, r3, #1
 8015524:	b2da      	uxtb	r2, r3
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	6a1b      	ldr	r3, [r3, #32]
 8015530:	6978      	ldr	r0, [r7, #20]
 8015532:	4798      	blx	r3
}
 8015534:	bf00      	nop
 8015536:	3718      	adds	r7, #24
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	24001cd0 	.word	0x24001cd0

08015540 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters ) {
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

	for (;;) {
		/* Query the timers list to see if it contains any timers, and if so,
		 obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 8015548:	f107 0308 	add.w	r3, r7, #8
 801554c:	4618      	mov	r0, r3
 801554e:	f000 f857 	bl	8015600 <prvGetNextExpireTime>
 8015552:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		 until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	4619      	mov	r1, r3
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f000 f803 	bl	8015564 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801555e:	f000 f8d5 	bl	801570c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 8015562:	e7f1      	b.n	8015548 <prvTimerTask+0x8>

08015564 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime,
		BaseType_t xListWasEmpty) {
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeNow;
	BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801556e:	f7ff f98d 	bl	801488c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		 has expired or not.  If obtaining the time causes the lists to switch
		 then don't process this timer as any timers that remained in the list
		 when the lists were switched will have been processed within the
		 prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 8015572:	f107 0308 	add.w	r3, r7, #8
 8015576:	4618      	mov	r0, r3
 8015578:	f000 f866 	bl	8015648 <prvSampleTimeNow>
 801557c:	60f8      	str	r0, [r7, #12]
		if (xTimerListsWereSwitched == pdFALSE) {
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d130      	bne.n	80155e6 <prvProcessTimerOrBlockTask+0x82>
			/* The tick count has not overflowed, has the timer expired? */
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d10a      	bne.n	80155a0 <prvProcessTimerOrBlockTask+0x3c>
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	429a      	cmp	r2, r3
 8015590:	d806      	bhi.n	80155a0 <prvProcessTimerOrBlockTask+0x3c>
				(void) xTaskResumeAll();
 8015592:	f7ff f989 	bl	80148a8 <xTaskResumeAll>
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 8015596:	68f9      	ldr	r1, [r7, #12]
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f7ff ff85 	bl	80154a8 <prvProcessExpiredTimer>
			}
		} else {
			(void) xTaskResumeAll();
		}
	}
}
 801559e:	e024      	b.n	80155ea <prvProcessTimerOrBlockTask+0x86>
				if (xListWasEmpty != pdFALSE) {
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d008      	beq.n	80155b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 80155a6:	4b13      	ldr	r3, [pc, #76]	; (80155f4 <prvProcessTimerOrBlockTask+0x90>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d101      	bne.n	80155b4 <prvProcessTimerOrBlockTask+0x50>
 80155b0:	2301      	movs	r3, #1
 80155b2:	e000      	b.n	80155b6 <prvProcessTimerOrBlockTask+0x52>
 80155b4:	2300      	movs	r3, #0
 80155b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted(xTimerQueue,
 80155b8:	4b0f      	ldr	r3, [pc, #60]	; (80155f8 <prvProcessTimerOrBlockTask+0x94>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	683a      	ldr	r2, [r7, #0]
 80155c4:	4619      	mov	r1, r3
 80155c6:	f7fe fdd7 	bl	8014178 <vQueueWaitForMessageRestricted>
				if (xTaskResumeAll() == pdFALSE) {
 80155ca:	f7ff f96d 	bl	80148a8 <xTaskResumeAll>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d10a      	bne.n	80155ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API()
 80155d4:	4b09      	ldr	r3, [pc, #36]	; (80155fc <prvProcessTimerOrBlockTask+0x98>)
 80155d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155da:	601a      	str	r2, [r3, #0]
 80155dc:	f3bf 8f4f 	dsb	sy
 80155e0:	f3bf 8f6f 	isb	sy
}
 80155e4:	e001      	b.n	80155ea <prvProcessTimerOrBlockTask+0x86>
			(void) xTaskResumeAll();
 80155e6:	f7ff f95f 	bl	80148a8 <xTaskResumeAll>
}
 80155ea:	bf00      	nop
 80155ec:	3710      	adds	r7, #16
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	24001cd4 	.word	0x24001cd4
 80155f8:	24001cd8 	.word	0x24001cd8
 80155fc:	e000ed04 	.word	0xe000ed04

08015600 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t *const pxListWasEmpty) {
 8015600:	b480      	push	{r7}
 8015602:	b085      	sub	sp, #20
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
	 the timer with the nearest expiry time will expire.  If there are no
	 active timers then just set the next expire time to 0.  That will cause
	 this task to unblock when the tick count overflows, at which point the
	 timer lists will be switched and the next expiry time can be
	 re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 8015608:	4b0e      	ldr	r3, [pc, #56]	; (8015644 <prvGetNextExpireTime+0x44>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d101      	bne.n	8015616 <prvGetNextExpireTime+0x16>
 8015612:	2201      	movs	r2, #1
 8015614:	e000      	b.n	8015618 <prvGetNextExpireTime+0x18>
 8015616:	2200      	movs	r2, #0
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	601a      	str	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d105      	bne.n	8015630 <prvGetNextExpireTime+0x30>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 8015624:	4b07      	ldr	r3, [pc, #28]	; (8015644 <prvGetNextExpireTime+0x44>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	60fb      	str	r3, [r7, #12]
 801562e:	e001      	b.n	8015634 <prvGetNextExpireTime+0x34>
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t) 0U;
 8015630:	2300      	movs	r3, #0
 8015632:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015634:	68fb      	ldr	r3, [r7, #12]
}
 8015636:	4618      	mov	r0, r3
 8015638:	3714      	adds	r7, #20
 801563a:	46bd      	mov	sp, r7
 801563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015640:	4770      	bx	lr
 8015642:	bf00      	nop
 8015644:	24001cd0 	.word	0x24001cd0

08015648 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t *const pxTimerListsWereSwitched) {
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;
	PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015650:	f7ff f9c8 	bl	80149e4 <xTaskGetTickCount>
 8015654:	60f8      	str	r0, [r7, #12]

	if (xTimeNow < xLastTime) {
 8015656:	4b0b      	ldr	r3, [pc, #44]	; (8015684 <prvSampleTimeNow+0x3c>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	68fa      	ldr	r2, [r7, #12]
 801565c:	429a      	cmp	r2, r3
 801565e:	d205      	bcs.n	801566c <prvSampleTimeNow+0x24>
		prvSwitchTimerLists();
 8015660:	f000 f936 	bl	80158d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2201      	movs	r2, #1
 8015668:	601a      	str	r2, [r3, #0]
 801566a:	e002      	b.n	8015672 <prvSampleTimeNow+0x2a>
	} else {
		*pxTimerListsWereSwitched = pdFALSE;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2200      	movs	r2, #0
 8015670:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015672:	4a04      	ldr	r2, [pc, #16]	; (8015684 <prvSampleTimeNow+0x3c>)
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015678:	68fb      	ldr	r3, [r7, #12]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
 8015682:	bf00      	nop
 8015684:	24001ce0 	.word	0x24001ce0

08015688 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer,
		const TickType_t xNextExpiryTime, const TickType_t xTimeNow,
		const TickType_t xCommandTime) {
 8015688:	b580      	push	{r7, lr}
 801568a:	b086      	sub	sp, #24
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
	BaseType_t xProcessTimerNow = pdFALSE;
 8015696:	2300      	movs	r3, #0
 8015698:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	611a      	str	r2, [r3, #16]

	if (xNextExpiryTime <= xTimeNow) {
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d812      	bhi.n	80156d4 <prvInsertTimerInActiveList+0x4c>
		/* Has the expiry time elapsed between the command to start/reset a
		 timer was issued, and the time the command was processed? */
		if (((TickType_t) (xTimeNow - xCommandTime))
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	1ad2      	subs	r2, r2, r3
				>= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	699b      	ldr	r3, [r3, #24]
		if (((TickType_t) (xTimeNow - xCommandTime))
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d302      	bcc.n	80156c2 <prvInsertTimerInActiveList+0x3a>
				{
			/* The time between a command being issued and the command being
			 processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80156bc:	2301      	movs	r3, #1
 80156be:	617b      	str	r3, [r7, #20]
 80156c0:	e01b      	b.n	80156fa <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 80156c2:	4b10      	ldr	r3, [pc, #64]	; (8015704 <prvInsertTimerInActiveList+0x7c>)
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	3304      	adds	r3, #4
 80156ca:	4619      	mov	r1, r3
 80156cc:	4610      	mov	r0, r2
 80156ce:	f7fd ff7e 	bl	80135ce <vListInsert>
 80156d2:	e012      	b.n	80156fa <prvInsertTimerInActiveList+0x72>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d206      	bcs.n	80156ea <prvInsertTimerInActiveList+0x62>
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d302      	bcc.n	80156ea <prvInsertTimerInActiveList+0x62>
			/* If, since the command was issued, the tick count has overflowed
			 but the expiry time has not, then the timer must have already passed
			 its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80156e4:	2301      	movs	r3, #1
 80156e6:	617b      	str	r3, [r7, #20]
 80156e8:	e007      	b.n	80156fa <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 80156ea:	4b07      	ldr	r3, [pc, #28]	; (8015708 <prvInsertTimerInActiveList+0x80>)
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	3304      	adds	r3, #4
 80156f2:	4619      	mov	r1, r3
 80156f4:	4610      	mov	r0, r2
 80156f6:	f7fd ff6a 	bl	80135ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156fa:	697b      	ldr	r3, [r7, #20]
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3718      	adds	r7, #24
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	24001cd4 	.word	0x24001cd4
 8015708:	24001cd0 	.word	0x24001cd0

0801570c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 801570c:	b580      	push	{r7, lr}
 801570e:	b08e      	sub	sp, #56	; 0x38
 8015710:	af02      	add	r7, sp, #8
	DaemonTaskMessage_t xMessage;
	Timer_t *pxTimer;
	BaseType_t xTimerListsWereSwitched, xResult;
	TickType_t xTimeNow;

	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015712:	e0ca      	b.n	80158aa <prvProcessReceivedCommands+0x19e>
	{
#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			 commands. */
			if (xMessage.xMessageID < (BaseType_t) 0) {
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2b00      	cmp	r3, #0
 8015718:	da18      	bge.n	801574c <prvProcessReceivedCommands+0x40>
				const CallbackParameters_t *const pxCallback =
 801571a:	1d3b      	adds	r3, r7, #4
 801571c:	3304      	adds	r3, #4
 801571e:	62fb      	str	r3, [r7, #44]	; 0x2c
						&(xMessage.u.xCallbackParameters);

				/* The timer uses the xCallbackParameters member to request a
				 callback be executed.  Check the callback is not NULL. */
				configASSERT(pxCallback);
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d10a      	bne.n	801573c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572a:	f383 8811 	msr	BASEPRI, r3
 801572e:	f3bf 8f6f 	isb	sy
 8015732:	f3bf 8f4f 	dsb	sy
 8015736:	61fb      	str	r3, [r7, #28]
}
 8015738:	bf00      	nop
 801573a:	e7fe      	b.n	801573a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction(pxCallback->pvParameter1,
 801573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015742:	6850      	ldr	r0, [r2, #4]
 8015744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015746:	6892      	ldr	r2, [r2, #8]
 8015748:	4611      	mov	r1, r2
 801574a:	4798      	blx	r3
		}
#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		 function calls. */
		if (xMessage.xMessageID >= (BaseType_t) 0) {
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2b00      	cmp	r3, #0
 8015750:	f2c0 80aa 	blt.w	80158a8 <prvProcessReceivedCommands+0x19c>
			/* The messages uses the xTimerParameters member to work on a
			 software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	62bb      	str	r3, [r7, #40]	; 0x28

			if ( listIS_CONTAINED_WITHIN(NULL,
 8015758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575a:	695b      	ldr	r3, [r3, #20]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d004      	beq.n	801576a <prvProcessReceivedCommands+0x5e>
					&(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
					{
				/* The timer is in a list, remove it. */
				(void) uxListRemove(&(pxTimer->xTimerListItem));
 8015760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015762:	3304      	adds	r3, #4
 8015764:	4618      	mov	r0, r3
 8015766:	f7fd ff6b 	bl	8013640 <uxListRemove>
			 it must be present in the function call.  prvSampleTimeNow() must be
			 called after the message is received from xTimerQueue so there is no
			 possibility of a higher priority task adding a message to the message
			 queue with a time that is ahead of the timer daemon task (because it
			 pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 801576a:	463b      	mov	r3, r7
 801576c:	4618      	mov	r0, r3
 801576e:	f7ff ff6b 	bl	8015648 <prvSampleTimeNow>
 8015772:	6278      	str	r0, [r7, #36]	; 0x24

			switch (xMessage.xMessageID) {
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b09      	cmp	r3, #9
 8015778:	f200 8097 	bhi.w	80158aa <prvProcessReceivedCommands+0x19e>
 801577c:	a201      	add	r2, pc, #4	; (adr r2, 8015784 <prvProcessReceivedCommands+0x78>)
 801577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015782:	bf00      	nop
 8015784:	080157ad 	.word	0x080157ad
 8015788:	080157ad 	.word	0x080157ad
 801578c:	080157ad 	.word	0x080157ad
 8015790:	08015821 	.word	0x08015821
 8015794:	08015835 	.word	0x08015835
 8015798:	0801587f 	.word	0x0801587f
 801579c:	080157ad 	.word	0x080157ad
 80157a0:	080157ad 	.word	0x080157ad
 80157a4:	08015821 	.word	0x08015821
 80157a8:	08015835 	.word	0x08015835
			case tmrCOMMAND_START_FROM_ISR:
			case tmrCOMMAND_RESET:
			case tmrCOMMAND_RESET_FROM_ISR:
			case tmrCOMMAND_START_DONT_TRACE:
				/* Start or restart a timer. */
				pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157b2:	f043 0301 	orr.w	r3, r3, #1
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				if (prvInsertTimerInActiveList(pxTimer,
						xMessage.u.xTimerParameters.xMessageValue
 80157be:	68ba      	ldr	r2, [r7, #8]
								+ pxTimer->xTimerPeriodInTicks, xTimeNow,
 80157c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c2:	699b      	ldr	r3, [r3, #24]
				if (prvInsertTimerInActiveList(pxTimer,
 80157c4:	18d1      	adds	r1, r2, r3
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157cc:	f7ff ff5c 	bl	8015688 <prvInsertTimerInActiveList>
 80157d0:	4603      	mov	r3, r0
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d069      	beq.n	80158aa <prvProcessReceivedCommands+0x19e>
						xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
					/* The timer expired before it was added to the active
					 timer list.  Process it now. */
					pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 80157d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d8:	6a1b      	ldr	r3, [r3, #32]
 80157da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157dc:	4798      	blx	r3
					traceTIMER_EXPIRED( pxTimer );

					if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 80157de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157e4:	f003 0304 	and.w	r3, r3, #4
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d05e      	beq.n	80158aa <prvProcessReceivedCommands+0x19e>
						xResult = xTimerGenericCommand(pxTimer,
								tmrCOMMAND_START_DONT_TRACE,
								xMessage.u.xTimerParameters.xMessageValue
 80157ec:	68ba      	ldr	r2, [r7, #8]
										+ pxTimer->xTimerPeriodInTicks, NULL,
 80157ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f0:	699b      	ldr	r3, [r3, #24]
						xResult = xTimerGenericCommand(pxTimer,
 80157f2:	441a      	add	r2, r3
 80157f4:	2300      	movs	r3, #0
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	2300      	movs	r3, #0
 80157fa:	2100      	movs	r1, #0
 80157fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157fe:	f7ff fe05 	bl	801540c <xTimerGenericCommand>
 8015802:	6238      	str	r0, [r7, #32]
								tmrNO_DELAY);
						configASSERT(xResult);
 8015804:	6a3b      	ldr	r3, [r7, #32]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d14f      	bne.n	80158aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801580e:	f383 8811 	msr	BASEPRI, r3
 8015812:	f3bf 8f6f 	isb	sy
 8015816:	f3bf 8f4f 	dsb	sy
 801581a:	61bb      	str	r3, [r7, #24]
}
 801581c:	bf00      	nop
 801581e:	e7fe      	b.n	801581e <prvProcessReceivedCommands+0x112>
				break;

			case tmrCOMMAND_STOP:
			case tmrCOMMAND_STOP_FROM_ISR:
				/* The timer has already been removed from the active list. */
				pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015826:	f023 0301 	bic.w	r3, r3, #1
 801582a:	b2da      	uxtb	r2, r3
 801582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 8015832:	e03a      	b.n	80158aa <prvProcessReceivedCommands+0x19e>

			case tmrCOMMAND_CHANGE_PERIOD:
			case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
				pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801583a:	f043 0301 	orr.w	r3, r3, #1
 801583e:	b2da      	uxtb	r2, r3
 8015840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				pxTimer->xTimerPeriodInTicks =
						xMessage.u.xTimerParameters.xMessageValue;
 8015846:	68ba      	ldr	r2, [r7, #8]
				pxTimer->xTimerPeriodInTicks =
 8015848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584a:	619a      	str	r2, [r3, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0))
 801584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d10a      	bne.n	801586a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015858:	f383 8811 	msr	BASEPRI, r3
 801585c:	f3bf 8f6f 	isb	sy
 8015860:	f3bf 8f4f 	dsb	sy
 8015864:	617b      	str	r3, [r7, #20]
}
 8015866:	bf00      	nop
 8015868:	e7fe      	b.n	8015868 <prvProcessReceivedCommands+0x15c>
				 therefore set to the current time, and as the period cannot
				 be zero the next expiry time can only be in the future,
				 meaning (unlike for the xTimerStart() case above) there is
				 no fail case that needs to be handled here. */
				(void) prvInsertTimerInActiveList(pxTimer,
						(xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow,
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	699a      	ldr	r2, [r3, #24]
				(void) prvInsertTimerInActiveList(pxTimer,
 801586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015870:	18d1      	adds	r1, r2, r3
 8015872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015878:	f7ff ff06 	bl	8015688 <prvInsertTimerInActiveList>
						xTimeNow);
				break;
 801587c:	e015      	b.n	80158aa <prvProcessReceivedCommands+0x19e>
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* The timer has already been removed from the active list,
				 just free up the memory if the memory was dynamically
				 allocated. */
				if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED)
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015884:	f003 0302 	and.w	r3, r3, #2
 8015888:	2b00      	cmp	r3, #0
 801588a:	d103      	bne.n	8015894 <prvProcessReceivedCommands+0x188>
						== (uint8_t) 0) {
					vPortFree(pxTimer);
 801588c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801588e:	f000 fbff 	bl	8016090 <vPortFree>
 8015892:	e00a      	b.n	80158aa <prvProcessReceivedCommands+0x19e>
				} else {
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801589a:	f023 0301 	bic.w	r3, r3, #1
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
				break;
 80158a6:	e000      	b.n	80158aa <prvProcessReceivedCommands+0x19e>

			default:
				/* Don't expect to get here. */
				break;
			}
		}
 80158a8:	bf00      	nop
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80158aa:	4b08      	ldr	r3, [pc, #32]	; (80158cc <prvProcessReceivedCommands+0x1c0>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	1d39      	adds	r1, r7, #4
 80158b0:	2200      	movs	r2, #0
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fe f9c6 	bl	8013c44 <xQueueReceive>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f47f af2a 	bne.w	8015714 <prvProcessReceivedCommands+0x8>
	}
}
 80158c0:	bf00      	nop
 80158c2:	bf00      	nop
 80158c4:	3730      	adds	r7, #48	; 0x30
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	24001cd8 	.word	0x24001cd8

080158d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b088      	sub	sp, #32
 80158d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	 If there are any timers still referenced from the current timer list
	 then they must have expired and should be processed before the lists
	 are switched. */
	while ( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE) {
 80158d6:	e048      	b.n	801596a <prvSwitchTimerLists+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 80158d8:	4b2d      	ldr	r3, [pc, #180]	; (8015990 <prvSwitchTimerLists+0xc0>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = (Timer_t*) listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158e2:	4b2b      	ldr	r3, [pc, #172]	; (8015990 <prvSwitchTimerLists+0xc0>)
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	68db      	ldr	r3, [r3, #12]
 80158ea:	60fb      	str	r3, [r7, #12]
		(void) uxListRemove(&(pxTimer->xTimerListItem));
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	3304      	adds	r3, #4
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fd fea5 	bl	8013640 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		 it is an auto-reload timer.  It cannot be restarted here as the lists
		 have not yet been switched. */
		pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	6a1b      	ldr	r3, [r3, #32]
 80158fa:	68f8      	ldr	r0, [r7, #12]
 80158fc:	4798      	blx	r3

		if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015904:	f003 0304 	and.w	r3, r3, #4
 8015908:	2b00      	cmp	r3, #0
 801590a:	d02e      	beq.n	801596a <prvSwitchTimerLists+0x9a>
			 the timer going into the same timer list then it has already expired
			 and the timer should be re-inserted into the current list so it is
			 processed again within this loop.  Otherwise a command should be sent
			 to restart the timer to ensure it is only inserted into a list after
			 the lists have been swapped. */
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	699b      	ldr	r3, [r3, #24]
 8015910:	693a      	ldr	r2, [r7, #16]
 8015912:	4413      	add	r3, r2
 8015914:	60bb      	str	r3, [r7, #8]
			if (xReloadTime > xNextExpireTime) {
 8015916:	68ba      	ldr	r2, [r7, #8]
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	429a      	cmp	r2, r3
 801591c:	d90e      	bls.n	801593c <prvSwitchTimerLists+0x6c>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem),
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	605a      	str	r2, [r3, #4]
						xReloadTime);
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68fa      	ldr	r2, [r7, #12]
 8015928:	611a      	str	r2, [r3, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 801592a:	4b19      	ldr	r3, [pc, #100]	; (8015990 <prvSwitchTimerLists+0xc0>)
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	3304      	adds	r3, #4
 8015932:	4619      	mov	r1, r3
 8015934:	4610      	mov	r0, r2
 8015936:	f7fd fe4a 	bl	80135ce <vListInsert>
 801593a:	e016      	b.n	801596a <prvSwitchTimerLists+0x9a>
			} else {
				xResult = xTimerGenericCommand(pxTimer,
 801593c:	2300      	movs	r3, #0
 801593e:	9300      	str	r3, [sp, #0]
 8015940:	2300      	movs	r3, #0
 8015942:	693a      	ldr	r2, [r7, #16]
 8015944:	2100      	movs	r1, #0
 8015946:	68f8      	ldr	r0, [r7, #12]
 8015948:	f7ff fd60 	bl	801540c <xTimerGenericCommand>
 801594c:	6078      	str	r0, [r7, #4]
						tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL,
						tmrNO_DELAY);
				configASSERT(xResult);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d10a      	bne.n	801596a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015958:	f383 8811 	msr	BASEPRI, r3
 801595c:	f3bf 8f6f 	isb	sy
 8015960:	f3bf 8f4f 	dsb	sy
 8015964:	603b      	str	r3, [r7, #0]
}
 8015966:	bf00      	nop
 8015968:	e7fe      	b.n	8015968 <prvSwitchTimerLists+0x98>
	while ( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE) {
 801596a:	4b09      	ldr	r3, [pc, #36]	; (8015990 <prvSwitchTimerLists+0xc0>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d1b1      	bne.n	80158d8 <prvSwitchTimerLists+0x8>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015974:	4b06      	ldr	r3, [pc, #24]	; (8015990 <prvSwitchTimerLists+0xc0>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801597a:	4b06      	ldr	r3, [pc, #24]	; (8015994 <prvSwitchTimerLists+0xc4>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	4a04      	ldr	r2, [pc, #16]	; (8015990 <prvSwitchTimerLists+0xc0>)
 8015980:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015982:	4a04      	ldr	r2, [pc, #16]	; (8015994 <prvSwitchTimerLists+0xc4>)
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	6013      	str	r3, [r2, #0]
}
 8015988:	bf00      	nop
 801598a:	3718      	adds	r7, #24
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}
 8015990:	24001cd0 	.word	0x24001cd0
 8015994:	24001cd4 	.word	0x24001cd4

08015998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	 queue used to communicate with the timer service, have been
	 initialised. */
	taskENTER_CRITICAL();
 801599e:	f000 f989 	bl	8015cb4 <vPortEnterCritical>
	{
		if (xTimerQueue == NULL) {
 80159a2:	4b15      	ldr	r3, [pc, #84]	; (80159f8 <prvCheckForValidListAndQueue+0x60>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d120      	bne.n	80159ec <prvCheckForValidListAndQueue+0x54>
			vListInitialise(&xActiveTimerList1);
 80159aa:	4814      	ldr	r0, [pc, #80]	; (80159fc <prvCheckForValidListAndQueue+0x64>)
 80159ac:	f7fd fdbe 	bl	801352c <vListInitialise>
			vListInitialise(&xActiveTimerList2);
 80159b0:	4813      	ldr	r0, [pc, #76]	; (8015a00 <prvCheckForValidListAndQueue+0x68>)
 80159b2:	f7fd fdbb 	bl	801352c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80159b6:	4b13      	ldr	r3, [pc, #76]	; (8015a04 <prvCheckForValidListAndQueue+0x6c>)
 80159b8:	4a10      	ldr	r2, [pc, #64]	; (80159fc <prvCheckForValidListAndQueue+0x64>)
 80159ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80159bc:	4b12      	ldr	r3, [pc, #72]	; (8015a08 <prvCheckForValidListAndQueue+0x70>)
 80159be:	4a10      	ldr	r2, [pc, #64]	; (8015a00 <prvCheckForValidListAndQueue+0x68>)
 80159c0:	601a      	str	r2, [r3, #0]
				 configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[(size_t) configTIMER_QUEUE_LENGTH
						* sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic(
 80159c2:	2300      	movs	r3, #0
 80159c4:	9300      	str	r3, [sp, #0]
 80159c6:	4b11      	ldr	r3, [pc, #68]	; (8015a0c <prvCheckForValidListAndQueue+0x74>)
 80159c8:	4a11      	ldr	r2, [pc, #68]	; (8015a10 <prvCheckForValidListAndQueue+0x78>)
 80159ca:	2110      	movs	r1, #16
 80159cc:	200a      	movs	r0, #10
 80159ce:	f7fd fec9 	bl	8013764 <xQueueGenericCreateStatic>
 80159d2:	4603      	mov	r3, r0
 80159d4:	4a08      	ldr	r2, [pc, #32]	; (80159f8 <prvCheckForValidListAndQueue+0x60>)
 80159d6:	6013      	str	r3, [r2, #0]
			}
			#endif

#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if (xTimerQueue != NULL) {
 80159d8:	4b07      	ldr	r3, [pc, #28]	; (80159f8 <prvCheckForValidListAndQueue+0x60>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d005      	beq.n	80159ec <prvCheckForValidListAndQueue+0x54>
					vQueueAddToRegistry(xTimerQueue, "TmrQ");
 80159e0:	4b05      	ldr	r3, [pc, #20]	; (80159f8 <prvCheckForValidListAndQueue+0x60>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	490b      	ldr	r1, [pc, #44]	; (8015a14 <prvCheckForValidListAndQueue+0x7c>)
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fe fb9c 	bl	8014124 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80159ec:	f000 f992 	bl	8015d14 <vPortExitCritical>
}
 80159f0:	bf00      	nop
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	24001cd8 	.word	0x24001cd8
 80159fc:	24001ca8 	.word	0x24001ca8
 8015a00:	24001cbc 	.word	0x24001cbc
 8015a04:	24001cd0 	.word	0x24001cd0
 8015a08:	24001cd4 	.word	0x24001cd4
 8015a0c:	24001d84 	.word	0x24001d84
 8015a10:	24001ce4 	.word	0x24001ce4
 8015a14:	08016ffc 	.word	0x08016ffc

08015a18 <xTimerPendFunctionCallFromISR>:

#if( INCLUDE_xTimerPendFunctionCall == 1 )

BaseType_t xTimerPendFunctionCallFromISR(PendedFunction_t xFunctionToPend,
		void *pvParameter1, uint32_t ulParameter2,
		BaseType_t *pxHigherPriorityTaskWoken) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b08a      	sub	sp, #40	; 0x28
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
 8015a24:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

	/* Complete the message with the function parameters and post it to the
	 daemon task. */
	xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015a26:	f06f 0301 	mvn.w	r3, #1
 8015a2a:	617b      	str	r3, [r7, #20]
	xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	61bb      	str	r3, [r7, #24]
	xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	61fb      	str	r3, [r7, #28]
	xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	623b      	str	r3, [r7, #32]

	xReturn = xQueueSendFromISR(xTimerQueue, &xMessage,
 8015a38:	4b06      	ldr	r3, [pc, #24]	; (8015a54 <xTimerPendFunctionCallFromISR+0x3c>)
 8015a3a:	6818      	ldr	r0, [r3, #0]
 8015a3c:	f107 0114 	add.w	r1, r7, #20
 8015a40:	2300      	movs	r3, #0
 8015a42:	683a      	ldr	r2, [r7, #0]
 8015a44:	f7fe f862 	bl	8013b0c <xQueueGenericSendFromISR>
 8015a48:	6278      	str	r0, [r7, #36]	; 0x24
			pxHigherPriorityTaskWoken);

	tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

	return xReturn;
 8015a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3728      	adds	r7, #40	; 0x28
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	24001cd8 	.word	0x24001cd8

08015a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	3b04      	subs	r3, #4
 8015a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	3b04      	subs	r3, #4
 8015a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	f023 0201 	bic.w	r2, r3, #1
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	3b04      	subs	r3, #4
 8015a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 8015a88:	4a0c      	ldr	r2, [pc, #48]	; (8015abc <pxPortInitialiseStack+0x64>)
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	3b14      	subs	r3, #20
 8015a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 8015a94:	687a      	ldr	r2, [r7, #4]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	3b04      	subs	r3, #4
 8015a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	f06f 0202 	mvn.w	r2, #2
 8015aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	3b20      	subs	r3, #32
 8015aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015aae:	68fb      	ldr	r3, [r7, #12]
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	3714      	adds	r7, #20
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aba:	4770      	bx	lr
 8015abc:	08015ac1 	.word	0x08015ac1

08015ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 8015ac0:	b480      	push	{r7}
 8015ac2:	b085      	sub	sp, #20
 8015ac4:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 8015aca:	4b12      	ldr	r3, [pc, #72]	; (8015b14 <prvTaskExitError+0x54>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ad2:	d00a      	beq.n	8015aea <prvTaskExitError+0x2a>
	__asm volatile
 8015ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad8:	f383 8811 	msr	BASEPRI, r3
 8015adc:	f3bf 8f6f 	isb	sy
 8015ae0:	f3bf 8f4f 	dsb	sy
 8015ae4:	60fb      	str	r3, [r7, #12]
}
 8015ae6:	bf00      	nop
 8015ae8:	e7fe      	b.n	8015ae8 <prvTaskExitError+0x28>
	__asm volatile
 8015aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aee:	f383 8811 	msr	BASEPRI, r3
 8015af2:	f3bf 8f6f 	isb	sy
 8015af6:	f3bf 8f4f 	dsb	sy
 8015afa:	60bb      	str	r3, [r7, #8]
}
 8015afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 8015afe:	bf00      	nop
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d0fc      	beq.n	8015b00 <prvTaskExitError+0x40>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 8015b06:	bf00      	nop
 8015b08:	bf00      	nop
 8015b0a:	3714      	adds	r7, #20
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b12:	4770      	bx	lr
 8015b14:	240000a0 	.word	0x240000a0
	...

08015b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8015b20:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <pxCurrentTCBConst2>)
 8015b22:	6819      	ldr	r1, [r3, #0]
 8015b24:	6808      	ldr	r0, [r1, #0]
 8015b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b2a:	f380 8809 	msr	PSP, r0
 8015b2e:	f3bf 8f6f 	isb	sy
 8015b32:	f04f 0000 	mov.w	r0, #0
 8015b36:	f380 8811 	msr	BASEPRI, r0
 8015b3a:	4770      	bx	lr
 8015b3c:	f3af 8000 	nop.w

08015b40 <pxCurrentTCBConst2>:
 8015b40:	240017a8 	.word	0x240017a8
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8015b44:	bf00      	nop
 8015b46:	bf00      	nop

08015b48 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8015b48:	4808      	ldr	r0, [pc, #32]	; (8015b6c <prvPortStartFirstTask+0x24>)
 8015b4a:	6800      	ldr	r0, [r0, #0]
 8015b4c:	6800      	ldr	r0, [r0, #0]
 8015b4e:	f380 8808 	msr	MSP, r0
 8015b52:	f04f 0000 	mov.w	r0, #0
 8015b56:	f380 8814 	msr	CONTROL, r0
 8015b5a:	b662      	cpsie	i
 8015b5c:	b661      	cpsie	f
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	df00      	svc	0
 8015b68:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 8015b6a:	bf00      	nop
 8015b6c:	e000ed08 	.word	0xe000ed08

08015b70 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b086      	sub	sp, #24
 8015b74:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8015b76:	4b46      	ldr	r3, [pc, #280]	; (8015c90 <xPortStartScheduler+0x120>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	4a46      	ldr	r2, [pc, #280]	; (8015c94 <xPortStartScheduler+0x124>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d10a      	bne.n	8015b96 <xPortStartScheduler+0x26>
	__asm volatile
 8015b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b84:	f383 8811 	msr	BASEPRI, r3
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	f3bf 8f4f 	dsb	sy
 8015b90:	613b      	str	r3, [r7, #16]
}
 8015b92:	bf00      	nop
 8015b94:	e7fe      	b.n	8015b94 <xPortStartScheduler+0x24>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8015b96:	4b3e      	ldr	r3, [pc, #248]	; (8015c90 <xPortStartScheduler+0x120>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4a3f      	ldr	r2, [pc, #252]	; (8015c98 <xPortStartScheduler+0x128>)
 8015b9c:	4293      	cmp	r3, r2
 8015b9e:	d10a      	bne.n	8015bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8015ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba4:	f383 8811 	msr	BASEPRI, r3
 8015ba8:	f3bf 8f6f 	isb	sy
 8015bac:	f3bf 8f4f 	dsb	sy
 8015bb0:	60fb      	str	r3, [r7, #12]
}
 8015bb2:	bf00      	nop
 8015bb4:	e7fe      	b.n	8015bb4 <xPortStartScheduler+0x44>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 8015bb6:	4b39      	ldr	r3, [pc, #228]	; (8015c9c <xPortStartScheduler+0x12c>)
 8015bb8:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	b2db      	uxtb	r3, r3
 8015bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	22ff      	movs	r2, #255	; 0xff
 8015bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	b2db      	uxtb	r3, r3
 8015bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 8015bd0:	78fb      	ldrb	r3, [r7, #3]
 8015bd2:	b2db      	uxtb	r3, r3
 8015bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015bd8:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8015bda:	4b31      	ldr	r3, [pc, #196]	; (8015ca0 <xPortStartScheduler+0x130>)
 8015bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015bde:	4b31      	ldr	r3, [pc, #196]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015be0:	2207      	movs	r2, #7
 8015be2:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8015be4:	e009      	b.n	8015bfa <xPortStartScheduler+0x8a>
			ulMaxPRIGROUPValue--;
 8015be6:	4b2f      	ldr	r3, [pc, #188]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	3b01      	subs	r3, #1
 8015bec:	4a2d      	ldr	r2, [pc, #180]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 8015bf0:	78fb      	ldrb	r3, [r7, #3]
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	b2db      	uxtb	r3, r3
 8015bf8:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8015bfa:	78fb      	ldrb	r3, [r7, #3]
 8015bfc:	b2db      	uxtb	r3, r3
 8015bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c02:	2b80      	cmp	r3, #128	; 0x80
 8015c04:	d0ef      	beq.n	8015be6 <xPortStartScheduler+0x76>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 8015c06:	4b27      	ldr	r3, [pc, #156]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	f1c3 0307 	rsb	r3, r3, #7
 8015c0e:	2b04      	cmp	r3, #4
 8015c10:	d00a      	beq.n	8015c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8015c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c16:	f383 8811 	msr	BASEPRI, r3
 8015c1a:	f3bf 8f6f 	isb	sy
 8015c1e:	f3bf 8f4f 	dsb	sy
 8015c22:	60bb      	str	r3, [r7, #8]
}
 8015c24:	bf00      	nop
 8015c26:	e7fe      	b.n	8015c26 <xPortStartScheduler+0xb6>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015c28:	4b1e      	ldr	r3, [pc, #120]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	021b      	lsls	r3, r3, #8
 8015c2e:	4a1d      	ldr	r2, [pc, #116]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015c32:	4b1c      	ldr	r3, [pc, #112]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c3a:	4a1a      	ldr	r2, [pc, #104]	; (8015ca4 <xPortStartScheduler+0x134>)
 8015c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	b2da      	uxtb	r2, r3
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c46:	4b18      	ldr	r3, [pc, #96]	; (8015ca8 <xPortStartScheduler+0x138>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4a17      	ldr	r2, [pc, #92]	; (8015ca8 <xPortStartScheduler+0x138>)
 8015c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c52:	4b15      	ldr	r3, [pc, #84]	; (8015ca8 <xPortStartScheduler+0x138>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	4a14      	ldr	r2, [pc, #80]	; (8015ca8 <xPortStartScheduler+0x138>)
 8015c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8015c5e:	f000 f8dd 	bl	8015e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c62:	4b12      	ldr	r3, [pc, #72]	; (8015cac <xPortStartScheduler+0x13c>)
 8015c64:	2200      	movs	r2, #0
 8015c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c68:	f000 f8fc 	bl	8015e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8015c6c:	4b10      	ldr	r3, [pc, #64]	; (8015cb0 <xPortStartScheduler+0x140>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	4a0f      	ldr	r2, [pc, #60]	; (8015cb0 <xPortStartScheduler+0x140>)
 8015c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c78:	f7ff ff66 	bl	8015b48 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8015c7c:	f7fe ff7c 	bl	8014b78 <vTaskSwitchContext>
	prvTaskExitError();
 8015c80:	f7ff ff1e 	bl	8015ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c84:	2300      	movs	r3, #0
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3718      	adds	r7, #24
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	e000ed00 	.word	0xe000ed00
 8015c94:	410fc271 	.word	0x410fc271
 8015c98:	410fc270 	.word	0x410fc270
 8015c9c:	e000e400 	.word	0xe000e400
 8015ca0:	24001dd4 	.word	0x24001dd4
 8015ca4:	24001dd8 	.word	0x24001dd8
 8015ca8:	e000ed20 	.word	0xe000ed20
 8015cac:	240000a0 	.word	0x240000a0
 8015cb0:	e000ef34 	.word	0xe000ef34

08015cb4 <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8015cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cbe:	f383 8811 	msr	BASEPRI, r3
 8015cc2:	f3bf 8f6f 	isb	sy
 8015cc6:	f3bf 8f4f 	dsb	sy
 8015cca:	607b      	str	r3, [r7, #4]
}
 8015ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015cce:	4b0f      	ldr	r3, [pc, #60]	; (8015d0c <vPortEnterCritical+0x58>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	4a0d      	ldr	r2, [pc, #52]	; (8015d0c <vPortEnterCritical+0x58>)
 8015cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 8015cd8:	4b0c      	ldr	r3, [pc, #48]	; (8015d0c <vPortEnterCritical+0x58>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d10f      	bne.n	8015d00 <vPortEnterCritical+0x4c>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8015ce0:	4b0b      	ldr	r3, [pc, #44]	; (8015d10 <vPortEnterCritical+0x5c>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d00a      	beq.n	8015d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8015cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cee:	f383 8811 	msr	BASEPRI, r3
 8015cf2:	f3bf 8f6f 	isb	sy
 8015cf6:	f3bf 8f4f 	dsb	sy
 8015cfa:	603b      	str	r3, [r7, #0]
}
 8015cfc:	bf00      	nop
 8015cfe:	e7fe      	b.n	8015cfe <vPortEnterCritical+0x4a>
	}
}
 8015d00:	bf00      	nop
 8015d02:	370c      	adds	r7, #12
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr
 8015d0c:	240000a0 	.word	0x240000a0
 8015d10:	e000ed04 	.word	0xe000ed04

08015d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 8015d14:	b480      	push	{r7}
 8015d16:	b083      	sub	sp, #12
 8015d18:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 8015d1a:	4b12      	ldr	r3, [pc, #72]	; (8015d64 <vPortExitCritical+0x50>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d10a      	bne.n	8015d38 <vPortExitCritical+0x24>
	__asm volatile
 8015d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d26:	f383 8811 	msr	BASEPRI, r3
 8015d2a:	f3bf 8f6f 	isb	sy
 8015d2e:	f3bf 8f4f 	dsb	sy
 8015d32:	607b      	str	r3, [r7, #4]
}
 8015d34:	bf00      	nop
 8015d36:	e7fe      	b.n	8015d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015d38:	4b0a      	ldr	r3, [pc, #40]	; (8015d64 <vPortExitCritical+0x50>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	3b01      	subs	r3, #1
 8015d3e:	4a09      	ldr	r2, [pc, #36]	; (8015d64 <vPortExitCritical+0x50>)
 8015d40:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8015d42:	4b08      	ldr	r3, [pc, #32]	; (8015d64 <vPortExitCritical+0x50>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d105      	bne.n	8015d56 <vPortExitCritical+0x42>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	f383 8811 	msr	BASEPRI, r3
}
 8015d54:	bf00      	nop
		portENABLE_INTERRUPTS();
	}
}
 8015d56:	bf00      	nop
 8015d58:	370c      	adds	r7, #12
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	240000a0 	.word	0x240000a0
	...

08015d70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8015d70:	f3ef 8009 	mrs	r0, PSP
 8015d74:	f3bf 8f6f 	isb	sy
 8015d78:	4b15      	ldr	r3, [pc, #84]	; (8015dd0 <pxCurrentTCBConst>)
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	f01e 0f10 	tst.w	lr, #16
 8015d80:	bf08      	it	eq
 8015d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8a:	6010      	str	r0, [r2, #0]
 8015d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d94:	f380 8811 	msr	BASEPRI, r0
 8015d98:	f3bf 8f4f 	dsb	sy
 8015d9c:	f3bf 8f6f 	isb	sy
 8015da0:	f7fe feea 	bl	8014b78 <vTaskSwitchContext>
 8015da4:	f04f 0000 	mov.w	r0, #0
 8015da8:	f380 8811 	msr	BASEPRI, r0
 8015dac:	bc09      	pop	{r0, r3}
 8015dae:	6819      	ldr	r1, [r3, #0]
 8015db0:	6808      	ldr	r0, [r1, #0]
 8015db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db6:	f01e 0f10 	tst.w	lr, #16
 8015dba:	bf08      	it	eq
 8015dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015dc0:	f380 8809 	msr	PSP, r0
 8015dc4:	f3bf 8f6f 	isb	sy
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	f3af 8000 	nop.w

08015dd0 <pxCurrentTCBConst>:
 8015dd0:	240017a8 	.word	0x240017a8
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015dd4:	bf00      	nop
 8015dd6:	bf00      	nop

08015dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8015dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de2:	f383 8811 	msr	BASEPRI, r3
 8015de6:	f3bf 8f6f 	isb	sy
 8015dea:	f3bf 8f4f 	dsb	sy
 8015dee:	607b      	str	r3, [r7, #4]
}
 8015df0:	bf00      	nop
	 save and then restore the interrupt mask value as its value is already
	 known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8015df2:	f7fe fe07 	bl	8014a04 <xTaskIncrementTick>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d003      	beq.n	8015e04 <xPortSysTickHandler+0x2c>
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dfc:	4b06      	ldr	r3, [pc, #24]	; (8015e18 <xPortSysTickHandler+0x40>)
 8015dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e02:	601a      	str	r2, [r3, #0]
 8015e04:	2300      	movs	r3, #0
 8015e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	f383 8811 	msr	BASEPRI, r3
}
 8015e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015e10:	bf00      	nop
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	e000ed04 	.word	0xe000ed04

08015e1c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 8015e1c:	b480      	push	{r7}
 8015e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015e20:	4b0b      	ldr	r3, [pc, #44]	; (8015e50 <vPortSetupTimerInterrupt+0x34>)
 8015e22:	2200      	movs	r2, #0
 8015e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015e26:	4b0b      	ldr	r3, [pc, #44]	; (8015e54 <vPortSetupTimerInterrupt+0x38>)
 8015e28:	2200      	movs	r2, #0
 8015e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8015e2c:	4b0a      	ldr	r3, [pc, #40]	; (8015e58 <vPortSetupTimerInterrupt+0x3c>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	4a0a      	ldr	r2, [pc, #40]	; (8015e5c <vPortSetupTimerInterrupt+0x40>)
 8015e32:	fba2 2303 	umull	r2, r3, r2, r3
 8015e36:	099b      	lsrs	r3, r3, #6
 8015e38:	4a09      	ldr	r2, [pc, #36]	; (8015e60 <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 8015e3a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8015e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 8015e3e:	4b04      	ldr	r3, [pc, #16]	; (8015e50 <vPortSetupTimerInterrupt+0x34>)
 8015e40:	2207      	movs	r2, #7
 8015e42:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8015e44:	bf00      	nop
 8015e46:	46bd      	mov	sp, r7
 8015e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	e000e010 	.word	0xe000e010
 8015e54:	e000e018 	.word	0xe000e018
 8015e58:	24000090 	.word	0x24000090
 8015e5c:	10624dd3 	.word	0x10624dd3
 8015e60:	e000e014 	.word	0xe000e014

08015e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8015e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e74 <vPortEnableVFP+0x10>
 8015e68:	6801      	ldr	r1, [r0, #0]
 8015e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e6e:	6001      	str	r1, [r0, #0]
 8015e70:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 8015e72:	bf00      	nop
 8015e74:	e000ed88 	.word	0xe000ed88

08015e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e7e:	f3ef 8305 	mrs	r3, IPSR
 8015e82:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2b0f      	cmp	r3, #15
 8015e88:	d914      	bls.n	8015eb4 <vPortValidateInterruptPriority+0x3c>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8015e8a:	4a17      	ldr	r2, [pc, #92]	; (8015ee8 <vPortValidateInterruptPriority+0x70>)
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	4413      	add	r3, r2
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8015e94:	4b15      	ldr	r3, [pc, #84]	; (8015eec <vPortValidateInterruptPriority+0x74>)
 8015e96:	781b      	ldrb	r3, [r3, #0]
 8015e98:	7afa      	ldrb	r2, [r7, #11]
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d20a      	bcs.n	8015eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea2:	f383 8811 	msr	BASEPRI, r3
 8015ea6:	f3bf 8f6f 	isb	sy
 8015eaa:	f3bf 8f4f 	dsb	sy
 8015eae:	607b      	str	r3, [r7, #4]
}
 8015eb0:	bf00      	nop
 8015eb2:	e7fe      	b.n	8015eb2 <vPortValidateInterruptPriority+0x3a>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 8015eb4:	4b0e      	ldr	r3, [pc, #56]	; (8015ef0 <vPortValidateInterruptPriority+0x78>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015ebc:	4b0d      	ldr	r3, [pc, #52]	; (8015ef4 <vPortValidateInterruptPriority+0x7c>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d90a      	bls.n	8015eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec8:	f383 8811 	msr	BASEPRI, r3
 8015ecc:	f3bf 8f6f 	isb	sy
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	603b      	str	r3, [r7, #0]
}
 8015ed6:	bf00      	nop
 8015ed8:	e7fe      	b.n	8015ed8 <vPortValidateInterruptPriority+0x60>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8015eda:	bf00      	nop
 8015edc:	3714      	adds	r7, #20
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee4:	4770      	bx	lr
 8015ee6:	bf00      	nop
 8015ee8:	e000e3f0 	.word	0xe000e3f0
 8015eec:	24001dd4 	.word	0x24001dd4
 8015ef0:	e000ed0c 	.word	0xe000ed0c
 8015ef4:	24001dd8 	.word	0x24001dd8

08015ef8 <pvPortMalloc>:
 space. */
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void* pvPortMalloc(size_t xWantedSize) {
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b08a      	sub	sp, #40	; 0x28
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
	void *pvReturn = NULL;
 8015f00:	2300      	movs	r3, #0
 8015f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015f04:	f7fe fcc2 	bl	801488c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		 initialisation to setup the list of free blocks. */
		if (pxEnd == NULL) {
 8015f08:	4b5b      	ldr	r3, [pc, #364]	; (8016078 <pvPortMalloc+0x180>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d101      	bne.n	8015f14 <pvPortMalloc+0x1c>
			prvHeapInit();
 8015f10:	f000 f920 	bl	8016154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		 set.  The top bit of the block size member of the BlockLink_t structure
		 is used to determine who owns the block - the application or the
		 kernel, so it must be free. */
		if ((xWantedSize & xBlockAllocatedBit) == 0) {
 8015f14:	4b59      	ldr	r3, [pc, #356]	; (801607c <pvPortMalloc+0x184>)
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	4013      	ands	r3, r2
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	f040 8093 	bne.w	8016048 <pvPortMalloc+0x150>
			/* The wanted size is increased so it can contain a BlockLink_t
			 structure in addition to the requested amount of bytes. */
			if (xWantedSize > 0) {
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d01d      	beq.n	8015f64 <pvPortMalloc+0x6c>
				xWantedSize += xHeapStructSize;
 8015f28:	2208      	movs	r2, #8
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				 of bytes. */
				if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f003 0307 	and.w	r3, r3, #7
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d014      	beq.n	8015f64 <pvPortMalloc+0x6c>
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f023 0307 	bic.w	r3, r3, #7
 8015f40:	3308      	adds	r3, #8
 8015f42:	607b      	str	r3, [r7, #4]
							- (xWantedSize & portBYTE_ALIGNMENT_MASK));
					configASSERT(( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f003 0307 	and.w	r3, r3, #7
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d00a      	beq.n	8015f64 <pvPortMalloc+0x6c>
	__asm volatile
 8015f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f52:	f383 8811 	msr	BASEPRI, r3
 8015f56:	f3bf 8f6f 	isb	sy
 8015f5a:	f3bf 8f4f 	dsb	sy
 8015f5e:	617b      	str	r3, [r7, #20]
}
 8015f60:	bf00      	nop
 8015f62:	e7fe      	b.n	8015f62 <pvPortMalloc+0x6a>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}

			if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d06e      	beq.n	8016048 <pvPortMalloc+0x150>
 8015f6a:	4b45      	ldr	r3, [pc, #276]	; (8016080 <pvPortMalloc+0x188>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d869      	bhi.n	8016048 <pvPortMalloc+0x150>
				/* Traverse the list from the start	(lowest address) block until
				 one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f74:	4b43      	ldr	r3, [pc, #268]	; (8016084 <pvPortMalloc+0x18c>)
 8015f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f78:	4b42      	ldr	r3, [pc, #264]	; (8016084 <pvPortMalloc+0x18c>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 8015f7e:	e004      	b.n	8015f8a <pvPortMalloc+0x92>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
					pxPreviousBlock = pxBlock;
 8015f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 8015f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d903      	bls.n	8015f9c <pvPortMalloc+0xa4>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
 8015f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d1f1      	bne.n	8015f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				 was	not found. */
				if (pxBlock != pxEnd) {
 8015f9c:	4b36      	ldr	r3, [pc, #216]	; (8016078 <pvPortMalloc+0x180>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d050      	beq.n	8016048 <pvPortMalloc+0x150>
					/* Return the memory space pointed to - jumping over the
					 BlockLink_t structure at its start. */
					pvReturn =
							(void*) (((uint8_t*) pxPreviousBlock->pxNextFreeBlock)
 8015fa6:	6a3b      	ldr	r3, [r7, #32]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2208      	movs	r2, #8
					pvReturn =
 8015fac:	4413      	add	r3, r2
 8015fae:	61fb      	str	r3, [r7, #28]
									+ xHeapStructSize);

					/* This block is being returned for use so must be taken out
					 of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	6a3b      	ldr	r3, [r7, #32]
 8015fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					 two. */
					if ((pxBlock->xBlockSize - xWantedSize)
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	1ad2      	subs	r2, r2, r3
							> heapMINIMUM_BLOCK_SIZE) {
 8015fc0:	2308      	movs	r3, #8
 8015fc2:	005b      	lsls	r3, r3, #1
					if ((pxBlock->xBlockSize - xWantedSize)
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d91f      	bls.n	8016008 <pvPortMalloc+0x110>
						/* This block is to be split into two.  Create a new
						 block following the number of bytes requested. The void
						 cast is used to prevent byte alignment warnings from the
						 compiler. */
						pxNewBlockLink = (void*) (((uint8_t*) pxBlock)
 8015fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4413      	add	r3, r2
 8015fce:	61bb      	str	r3, [r7, #24]
								+ xWantedSize);
						configASSERT(
 8015fd0:	69bb      	ldr	r3, [r7, #24]
 8015fd2:	f003 0307 	and.w	r3, r3, #7
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00a      	beq.n	8015ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8015fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fde:	f383 8811 	msr	BASEPRI, r3
 8015fe2:	f3bf 8f6f 	isb	sy
 8015fe6:	f3bf 8f4f 	dsb	sy
 8015fea:	613b      	str	r3, [r7, #16]
}
 8015fec:	bf00      	nop
 8015fee:	e7fe      	b.n	8015fee <pvPortMalloc+0xf6>
								( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0);

						/* Calculate the sizes of two blocks split from the
						 single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8015ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff2:	685a      	ldr	r2, [r3, #4]
								- xWantedSize;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	1ad2      	subs	r2, r2, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8015ff8:	69bb      	ldr	r3, [r7, #24]
 8015ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList(pxNewBlockLink);
 8016002:	69b8      	ldr	r0, [r7, #24]
 8016004:	f000 f908 	bl	8016218 <prvInsertBlockIntoFreeList>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016008:	4b1d      	ldr	r3, [pc, #116]	; (8016080 <pvPortMalloc+0x188>)
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	4a1b      	ldr	r2, [pc, #108]	; (8016080 <pvPortMalloc+0x188>)
 8016014:	6013      	str	r3, [r2, #0]

					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 8016016:	4b1a      	ldr	r3, [pc, #104]	; (8016080 <pvPortMalloc+0x188>)
 8016018:	681a      	ldr	r2, [r3, #0]
 801601a:	4b1b      	ldr	r3, [pc, #108]	; (8016088 <pvPortMalloc+0x190>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	429a      	cmp	r2, r3
 8016020:	d203      	bcs.n	801602a <pvPortMalloc+0x132>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016022:	4b17      	ldr	r3, [pc, #92]	; (8016080 <pvPortMalloc+0x188>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4a18      	ldr	r2, [pc, #96]	; (8016088 <pvPortMalloc+0x190>)
 8016028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					 by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602c:	685a      	ldr	r2, [r3, #4]
 801602e:	4b13      	ldr	r3, [pc, #76]	; (801607c <pvPortMalloc+0x184>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	431a      	orrs	r2, r3
 8016034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603a:	2200      	movs	r2, #0
 801603c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801603e:	4b13      	ldr	r3, [pc, #76]	; (801608c <pvPortMalloc+0x194>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	3301      	adds	r3, #1
 8016044:	4a11      	ldr	r2, [pc, #68]	; (801608c <pvPortMalloc+0x194>)
 8016046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	(void) xTaskResumeAll();
 8016048:	f7fe fc2e 	bl	80148a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT(
 801604c:	69fb      	ldr	r3, [r7, #28]
 801604e:	f003 0307 	and.w	r3, r3, #7
 8016052:	2b00      	cmp	r3, #0
 8016054:	d00a      	beq.n	801606c <pvPortMalloc+0x174>
	__asm volatile
 8016056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605a:	f383 8811 	msr	BASEPRI, r3
 801605e:	f3bf 8f6f 	isb	sy
 8016062:	f3bf 8f4f 	dsb	sy
 8016066:	60fb      	str	r3, [r7, #12]
}
 8016068:	bf00      	nop
 801606a:	e7fe      	b.n	801606a <pvPortMalloc+0x172>
			( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0);
	return pvReturn;
 801606c:	69fb      	ldr	r3, [r7, #28]
}
 801606e:	4618      	mov	r0, r3
 8016070:	3728      	adds	r7, #40	; 0x28
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	240059e4 	.word	0x240059e4
 801607c:	240059f8 	.word	0x240059f8
 8016080:	240059e8 	.word	0x240059e8
 8016084:	240059dc 	.word	0x240059dc
 8016088:	240059ec 	.word	0x240059ec
 801608c:	240059f0 	.word	0x240059f0

08016090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv) {
 8016090:	b580      	push	{r7, lr}
 8016092:	b086      	sub	sp, #24
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
	uint8_t *puc = (uint8_t*) pv;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	if (pv != NULL) {
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d04d      	beq.n	801613e <vPortFree+0xae>
		/* The memory being freed will have an BlockLink_t structure immediately
		 before it. */
		puc -= xHeapStructSize;
 80160a2:	2308      	movs	r3, #8
 80160a4:	425b      	negs	r3, r3
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	4413      	add	r3, r2
 80160aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = (void*) puc;
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	685a      	ldr	r2, [r3, #4]
 80160b4:	4b24      	ldr	r3, [pc, #144]	; (8016148 <vPortFree+0xb8>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	4013      	ands	r3, r2
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d10a      	bne.n	80160d4 <vPortFree+0x44>
	__asm volatile
 80160be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c2:	f383 8811 	msr	BASEPRI, r3
 80160c6:	f3bf 8f6f 	isb	sy
 80160ca:	f3bf 8f4f 	dsb	sy
 80160ce:	60fb      	str	r3, [r7, #12]
}
 80160d0:	bf00      	nop
 80160d2:	e7fe      	b.n	80160d2 <vPortFree+0x42>
		configASSERT(pxLink->pxNextFreeBlock == NULL);
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d00a      	beq.n	80160f2 <vPortFree+0x62>
	__asm volatile
 80160dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e0:	f383 8811 	msr	BASEPRI, r3
 80160e4:	f3bf 8f6f 	isb	sy
 80160e8:	f3bf 8f4f 	dsb	sy
 80160ec:	60bb      	str	r3, [r7, #8]
}
 80160ee:	bf00      	nop
 80160f0:	e7fe      	b.n	80160f0 <vPortFree+0x60>

		if ((pxLink->xBlockSize & xBlockAllocatedBit) != 0) {
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	685a      	ldr	r2, [r3, #4]
 80160f6:	4b14      	ldr	r3, [pc, #80]	; (8016148 <vPortFree+0xb8>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4013      	ands	r3, r2
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d01e      	beq.n	801613e <vPortFree+0xae>
			if (pxLink->pxNextFreeBlock == NULL) {
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d11a      	bne.n	801613e <vPortFree+0xae>
				/* The block is being returned to the heap - it is no longer
				 allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	685a      	ldr	r2, [r3, #4]
 801610c:	4b0e      	ldr	r3, [pc, #56]	; (8016148 <vPortFree+0xb8>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	43db      	mvns	r3, r3
 8016112:	401a      	ands	r2, r3
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016118:	f7fe fbb8 	bl	801488c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	685a      	ldr	r2, [r3, #4]
 8016120:	4b0a      	ldr	r3, [pc, #40]	; (801614c <vPortFree+0xbc>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4413      	add	r3, r2
 8016126:	4a09      	ldr	r2, [pc, #36]	; (801614c <vPortFree+0xbc>)
 8016128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 801612a:	6938      	ldr	r0, [r7, #16]
 801612c:	f000 f874 	bl	8016218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016130:	4b07      	ldr	r3, [pc, #28]	; (8016150 <vPortFree+0xc0>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	3301      	adds	r3, #1
 8016136:	4a06      	ldr	r2, [pc, #24]	; (8016150 <vPortFree+0xc0>)
 8016138:	6013      	str	r3, [r2, #0]
				}
				(void) xTaskResumeAll();
 801613a:	f7fe fbb5 	bl	80148a8 <xTaskResumeAll>
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801613e:	bf00      	nop
 8016140:	3718      	adds	r7, #24
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	240059f8 	.word	0x240059f8
 801614c:	240059e8 	.word	0x240059e8
 8016150:	240059f4 	.word	0x240059f4

08016154 <prvHeapInit>:
void vPortInitialiseBlocks(void) {
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit(void) {
 8016154:	b480      	push	{r7}
 8016156:	b085      	sub	sp, #20
 8016158:	af00      	add	r7, sp, #0
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *pucAlignedHeap;
	size_t uxAddress;
	size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801615a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801615e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = (size_t) ucHeap;
 8016160:	4b27      	ldr	r3, [pc, #156]	; (8016200 <prvHeapInit+0xac>)
 8016162:	60fb      	str	r3, [r7, #12]

	if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f003 0307 	and.w	r3, r3, #7
 801616a:	2b00      	cmp	r3, #0
 801616c:	d00c      	beq.n	8016188 <prvHeapInit+0x34>
		uxAddress += ( portBYTE_ALIGNMENT - 1);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3307      	adds	r3, #7
 8016172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f023 0307 	bic.w	r3, r3, #7
 801617a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - (size_t) ucHeap;
 801617c:	68ba      	ldr	r2, [r7, #8]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	4a1f      	ldr	r2, [pc, #124]	; (8016200 <prvHeapInit+0xac>)
 8016184:	4413      	add	r3, r2
 8016186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = (uint8_t*) uxAddress;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	 blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 801618c:	4a1d      	ldr	r2, [pc, #116]	; (8016204 <prvHeapInit+0xb0>)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = (size_t) 0;
 8016192:	4b1c      	ldr	r3, [pc, #112]	; (8016204 <prvHeapInit+0xb0>)
 8016194:	2200      	movs	r2, #0
 8016196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	 at the end of the heap space. */
	uxAddress = ((size_t) pucAlignedHeap) + xTotalHeapSize;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	68ba      	ldr	r2, [r7, #8]
 801619c:	4413      	add	r3, r2
 801619e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80161a0:	2208      	movs	r2, #8
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	1a9b      	subs	r3, r3, r2
 80161a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f023 0307 	bic.w	r3, r3, #7
 80161ae:	60fb      	str	r3, [r7, #12]
	pxEnd = (void*) uxAddress;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	4a15      	ldr	r2, [pc, #84]	; (8016208 <prvHeapInit+0xb4>)
 80161b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80161b6:	4b14      	ldr	r3, [pc, #80]	; (8016208 <prvHeapInit+0xb4>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	2200      	movs	r2, #0
 80161bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80161be:	4b12      	ldr	r3, [pc, #72]	; (8016208 <prvHeapInit+0xb4>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2200      	movs	r2, #0
 80161c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	 entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = (void*) pucAlignedHeap;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - (size_t) pxFirstFreeBlock;
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	68fa      	ldr	r2, [r7, #12]
 80161ce:	1ad2      	subs	r2, r2, r3
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80161d4:	4b0c      	ldr	r3, [pc, #48]	; (8016208 <prvHeapInit+0xb4>)
 80161d6:	681a      	ldr	r2, [r3, #0]
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	4a0a      	ldr	r2, [pc, #40]	; (801620c <prvHeapInit+0xb8>)
 80161e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	4a09      	ldr	r2, [pc, #36]	; (8016210 <prvHeapInit+0xbc>)
 80161ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ((size_t) 1)
 80161ec:	4b09      	ldr	r3, [pc, #36]	; (8016214 <prvHeapInit+0xc0>)
 80161ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161f2:	601a      	str	r2, [r3, #0]
			<< ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
 80161f4:	bf00      	nop
 80161f6:	3714      	adds	r7, #20
 80161f8:	46bd      	mov	sp, r7
 80161fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fe:	4770      	bx	lr
 8016200:	24001ddc 	.word	0x24001ddc
 8016204:	240059dc 	.word	0x240059dc
 8016208:	240059e4 	.word	0x240059e4
 801620c:	240059ec 	.word	0x240059ec
 8016210:	240059e8 	.word	0x240059e8
 8016214:	240059f8 	.word	0x240059f8

08016218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxIterator;
	uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 than the block being inserted. */
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8016220:	4b28      	ldr	r3, [pc, #160]	; (80162c4 <prvInsertBlockIntoFreeList+0xac>)
 8016222:	60fb      	str	r3, [r7, #12]
 8016224:	e002      	b.n	801622c <prvInsertBlockIntoFreeList+0x14>
			pxIterator = pxIterator->pxNextFreeBlock) {
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	60fb      	str	r3, [r7, #12]
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	687a      	ldr	r2, [r7, #4]
 8016232:	429a      	cmp	r2, r3
 8016234:	d8f7      	bhi.n	8016226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxIterator;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	60bb      	str	r3, [r7, #8]
	if ((puc + pxIterator->xBlockSize) == (uint8_t*) pxBlockToInsert) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	68ba      	ldr	r2, [r7, #8]
 8016240:	4413      	add	r3, r2
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	429a      	cmp	r2, r3
 8016246:	d108      	bne.n	801625a <prvInsertBlockIntoFreeList+0x42>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	685a      	ldr	r2, [r3, #4]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	441a      	add	r2, r3
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxBlockToInsert;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	60bb      	str	r3, [r7, #8]
	if ((puc + pxBlockToInsert->xBlockSize)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	68ba      	ldr	r2, [r7, #8]
 8016264:	441a      	add	r2, r3
			== (uint8_t*) pxIterator->pxNextFreeBlock) {
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	681b      	ldr	r3, [r3, #0]
	if ((puc + pxBlockToInsert->xBlockSize)
 801626a:	429a      	cmp	r2, r3
 801626c:	d118      	bne.n	80162a0 <prvInsertBlockIntoFreeList+0x88>
		if (pxIterator->pxNextFreeBlock != pxEnd) {
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	4b15      	ldr	r3, [pc, #84]	; (80162c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	429a      	cmp	r2, r3
 8016278:	d00d      	beq.n	8016296 <prvInsertBlockIntoFreeList+0x7e>
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize +=
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	685a      	ldr	r2, [r3, #4]
					pxIterator->pxNextFreeBlock->xBlockSize;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	685b      	ldr	r3, [r3, #4]
			pxBlockToInsert->xBlockSize +=
 8016284:	441a      	add	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock =
					pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	681a      	ldr	r2, [r3, #0]
			pxBlockToInsert->pxNextFreeBlock =
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	601a      	str	r2, [r3, #0]
 8016294:	e008      	b.n	80162a8 <prvInsertBlockIntoFreeList+0x90>
		} else {
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016296:	4b0c      	ldr	r3, [pc, #48]	; (80162c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	601a      	str	r2, [r3, #0]
 801629e:	e003      	b.n	80162a8 <prvInsertBlockIntoFreeList+0x90>
		}
	} else {
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681a      	ldr	r2, [r3, #0]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 before and the block after, then it's pxNextFreeBlock pointer will have
	 already been set, and should not be set here as that would make it point
	 to itself. */
	if (pxIterator != pxBlockToInsert) {
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d002      	beq.n	80162b6 <prvInsertBlockIntoFreeList+0x9e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162b6:	bf00      	nop
 80162b8:	3714      	adds	r7, #20
 80162ba:	46bd      	mov	sp, r7
 80162bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop
 80162c4:	240059dc 	.word	0x240059dc
 80162c8:	240059e4 	.word	0x240059e4

080162cc <__errno>:
 80162cc:	4b01      	ldr	r3, [pc, #4]	; (80162d4 <__errno+0x8>)
 80162ce:	6818      	ldr	r0, [r3, #0]
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	240000a4 	.word	0x240000a4

080162d8 <__libc_init_array>:
 80162d8:	b570      	push	{r4, r5, r6, lr}
 80162da:	4d0d      	ldr	r5, [pc, #52]	; (8016310 <__libc_init_array+0x38>)
 80162dc:	4c0d      	ldr	r4, [pc, #52]	; (8016314 <__libc_init_array+0x3c>)
 80162de:	1b64      	subs	r4, r4, r5
 80162e0:	10a4      	asrs	r4, r4, #2
 80162e2:	2600      	movs	r6, #0
 80162e4:	42a6      	cmp	r6, r4
 80162e6:	d109      	bne.n	80162fc <__libc_init_array+0x24>
 80162e8:	4d0b      	ldr	r5, [pc, #44]	; (8016318 <__libc_init_array+0x40>)
 80162ea:	4c0c      	ldr	r4, [pc, #48]	; (801631c <__libc_init_array+0x44>)
 80162ec:	f000 fd3c 	bl	8016d68 <_init>
 80162f0:	1b64      	subs	r4, r4, r5
 80162f2:	10a4      	asrs	r4, r4, #2
 80162f4:	2600      	movs	r6, #0
 80162f6:	42a6      	cmp	r6, r4
 80162f8:	d105      	bne.n	8016306 <__libc_init_array+0x2e>
 80162fa:	bd70      	pop	{r4, r5, r6, pc}
 80162fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016300:	4798      	blx	r3
 8016302:	3601      	adds	r6, #1
 8016304:	e7ee      	b.n	80162e4 <__libc_init_array+0xc>
 8016306:	f855 3b04 	ldr.w	r3, [r5], #4
 801630a:	4798      	blx	r3
 801630c:	3601      	adds	r6, #1
 801630e:	e7f2      	b.n	80162f6 <__libc_init_array+0x1e>
 8016310:	080171d0 	.word	0x080171d0
 8016314:	080171d0 	.word	0x080171d0
 8016318:	080171d0 	.word	0x080171d0
 801631c:	080171d4 	.word	0x080171d4

08016320 <malloc>:
 8016320:	4b02      	ldr	r3, [pc, #8]	; (801632c <malloc+0xc>)
 8016322:	4601      	mov	r1, r0
 8016324:	6818      	ldr	r0, [r3, #0]
 8016326:	f000 b88d 	b.w	8016444 <_malloc_r>
 801632a:	bf00      	nop
 801632c:	240000a4 	.word	0x240000a4

08016330 <free>:
 8016330:	4b02      	ldr	r3, [pc, #8]	; (801633c <free+0xc>)
 8016332:	4601      	mov	r1, r0
 8016334:	6818      	ldr	r0, [r3, #0]
 8016336:	f000 b819 	b.w	801636c <_free_r>
 801633a:	bf00      	nop
 801633c:	240000a4 	.word	0x240000a4

08016340 <memcpy>:
 8016340:	440a      	add	r2, r1
 8016342:	4291      	cmp	r1, r2
 8016344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016348:	d100      	bne.n	801634c <memcpy+0xc>
 801634a:	4770      	bx	lr
 801634c:	b510      	push	{r4, lr}
 801634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016356:	4291      	cmp	r1, r2
 8016358:	d1f9      	bne.n	801634e <memcpy+0xe>
 801635a:	bd10      	pop	{r4, pc}

0801635c <memset>:
 801635c:	4402      	add	r2, r0
 801635e:	4603      	mov	r3, r0
 8016360:	4293      	cmp	r3, r2
 8016362:	d100      	bne.n	8016366 <memset+0xa>
 8016364:	4770      	bx	lr
 8016366:	f803 1b01 	strb.w	r1, [r3], #1
 801636a:	e7f9      	b.n	8016360 <memset+0x4>

0801636c <_free_r>:
 801636c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801636e:	2900      	cmp	r1, #0
 8016370:	d044      	beq.n	80163fc <_free_r+0x90>
 8016372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016376:	9001      	str	r0, [sp, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	f1a1 0404 	sub.w	r4, r1, #4
 801637e:	bfb8      	it	lt
 8016380:	18e4      	addlt	r4, r4, r3
 8016382:	f000 fc39 	bl	8016bf8 <__malloc_lock>
 8016386:	4a1e      	ldr	r2, [pc, #120]	; (8016400 <_free_r+0x94>)
 8016388:	9801      	ldr	r0, [sp, #4]
 801638a:	6813      	ldr	r3, [r2, #0]
 801638c:	b933      	cbnz	r3, 801639c <_free_r+0x30>
 801638e:	6063      	str	r3, [r4, #4]
 8016390:	6014      	str	r4, [r2, #0]
 8016392:	b003      	add	sp, #12
 8016394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016398:	f000 bc34 	b.w	8016c04 <__malloc_unlock>
 801639c:	42a3      	cmp	r3, r4
 801639e:	d908      	bls.n	80163b2 <_free_r+0x46>
 80163a0:	6825      	ldr	r5, [r4, #0]
 80163a2:	1961      	adds	r1, r4, r5
 80163a4:	428b      	cmp	r3, r1
 80163a6:	bf01      	itttt	eq
 80163a8:	6819      	ldreq	r1, [r3, #0]
 80163aa:	685b      	ldreq	r3, [r3, #4]
 80163ac:	1949      	addeq	r1, r1, r5
 80163ae:	6021      	streq	r1, [r4, #0]
 80163b0:	e7ed      	b.n	801638e <_free_r+0x22>
 80163b2:	461a      	mov	r2, r3
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	b10b      	cbz	r3, 80163bc <_free_r+0x50>
 80163b8:	42a3      	cmp	r3, r4
 80163ba:	d9fa      	bls.n	80163b2 <_free_r+0x46>
 80163bc:	6811      	ldr	r1, [r2, #0]
 80163be:	1855      	adds	r5, r2, r1
 80163c0:	42a5      	cmp	r5, r4
 80163c2:	d10b      	bne.n	80163dc <_free_r+0x70>
 80163c4:	6824      	ldr	r4, [r4, #0]
 80163c6:	4421      	add	r1, r4
 80163c8:	1854      	adds	r4, r2, r1
 80163ca:	42a3      	cmp	r3, r4
 80163cc:	6011      	str	r1, [r2, #0]
 80163ce:	d1e0      	bne.n	8016392 <_free_r+0x26>
 80163d0:	681c      	ldr	r4, [r3, #0]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	6053      	str	r3, [r2, #4]
 80163d6:	4421      	add	r1, r4
 80163d8:	6011      	str	r1, [r2, #0]
 80163da:	e7da      	b.n	8016392 <_free_r+0x26>
 80163dc:	d902      	bls.n	80163e4 <_free_r+0x78>
 80163de:	230c      	movs	r3, #12
 80163e0:	6003      	str	r3, [r0, #0]
 80163e2:	e7d6      	b.n	8016392 <_free_r+0x26>
 80163e4:	6825      	ldr	r5, [r4, #0]
 80163e6:	1961      	adds	r1, r4, r5
 80163e8:	428b      	cmp	r3, r1
 80163ea:	bf04      	itt	eq
 80163ec:	6819      	ldreq	r1, [r3, #0]
 80163ee:	685b      	ldreq	r3, [r3, #4]
 80163f0:	6063      	str	r3, [r4, #4]
 80163f2:	bf04      	itt	eq
 80163f4:	1949      	addeq	r1, r1, r5
 80163f6:	6021      	streq	r1, [r4, #0]
 80163f8:	6054      	str	r4, [r2, #4]
 80163fa:	e7ca      	b.n	8016392 <_free_r+0x26>
 80163fc:	b003      	add	sp, #12
 80163fe:	bd30      	pop	{r4, r5, pc}
 8016400:	240059fc 	.word	0x240059fc

08016404 <sbrk_aligned>:
 8016404:	b570      	push	{r4, r5, r6, lr}
 8016406:	4e0e      	ldr	r6, [pc, #56]	; (8016440 <sbrk_aligned+0x3c>)
 8016408:	460c      	mov	r4, r1
 801640a:	6831      	ldr	r1, [r6, #0]
 801640c:	4605      	mov	r5, r0
 801640e:	b911      	cbnz	r1, 8016416 <sbrk_aligned+0x12>
 8016410:	f000 f902 	bl	8016618 <_sbrk_r>
 8016414:	6030      	str	r0, [r6, #0]
 8016416:	4621      	mov	r1, r4
 8016418:	4628      	mov	r0, r5
 801641a:	f000 f8fd 	bl	8016618 <_sbrk_r>
 801641e:	1c43      	adds	r3, r0, #1
 8016420:	d00a      	beq.n	8016438 <sbrk_aligned+0x34>
 8016422:	1cc4      	adds	r4, r0, #3
 8016424:	f024 0403 	bic.w	r4, r4, #3
 8016428:	42a0      	cmp	r0, r4
 801642a:	d007      	beq.n	801643c <sbrk_aligned+0x38>
 801642c:	1a21      	subs	r1, r4, r0
 801642e:	4628      	mov	r0, r5
 8016430:	f000 f8f2 	bl	8016618 <_sbrk_r>
 8016434:	3001      	adds	r0, #1
 8016436:	d101      	bne.n	801643c <sbrk_aligned+0x38>
 8016438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801643c:	4620      	mov	r0, r4
 801643e:	bd70      	pop	{r4, r5, r6, pc}
 8016440:	24005a00 	.word	0x24005a00

08016444 <_malloc_r>:
 8016444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016448:	1ccd      	adds	r5, r1, #3
 801644a:	f025 0503 	bic.w	r5, r5, #3
 801644e:	3508      	adds	r5, #8
 8016450:	2d0c      	cmp	r5, #12
 8016452:	bf38      	it	cc
 8016454:	250c      	movcc	r5, #12
 8016456:	2d00      	cmp	r5, #0
 8016458:	4607      	mov	r7, r0
 801645a:	db01      	blt.n	8016460 <_malloc_r+0x1c>
 801645c:	42a9      	cmp	r1, r5
 801645e:	d905      	bls.n	801646c <_malloc_r+0x28>
 8016460:	230c      	movs	r3, #12
 8016462:	603b      	str	r3, [r7, #0]
 8016464:	2600      	movs	r6, #0
 8016466:	4630      	mov	r0, r6
 8016468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801646c:	4e2e      	ldr	r6, [pc, #184]	; (8016528 <_malloc_r+0xe4>)
 801646e:	f000 fbc3 	bl	8016bf8 <__malloc_lock>
 8016472:	6833      	ldr	r3, [r6, #0]
 8016474:	461c      	mov	r4, r3
 8016476:	bb34      	cbnz	r4, 80164c6 <_malloc_r+0x82>
 8016478:	4629      	mov	r1, r5
 801647a:	4638      	mov	r0, r7
 801647c:	f7ff ffc2 	bl	8016404 <sbrk_aligned>
 8016480:	1c43      	adds	r3, r0, #1
 8016482:	4604      	mov	r4, r0
 8016484:	d14d      	bne.n	8016522 <_malloc_r+0xde>
 8016486:	6834      	ldr	r4, [r6, #0]
 8016488:	4626      	mov	r6, r4
 801648a:	2e00      	cmp	r6, #0
 801648c:	d140      	bne.n	8016510 <_malloc_r+0xcc>
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	4631      	mov	r1, r6
 8016492:	4638      	mov	r0, r7
 8016494:	eb04 0803 	add.w	r8, r4, r3
 8016498:	f000 f8be 	bl	8016618 <_sbrk_r>
 801649c:	4580      	cmp	r8, r0
 801649e:	d13a      	bne.n	8016516 <_malloc_r+0xd2>
 80164a0:	6821      	ldr	r1, [r4, #0]
 80164a2:	3503      	adds	r5, #3
 80164a4:	1a6d      	subs	r5, r5, r1
 80164a6:	f025 0503 	bic.w	r5, r5, #3
 80164aa:	3508      	adds	r5, #8
 80164ac:	2d0c      	cmp	r5, #12
 80164ae:	bf38      	it	cc
 80164b0:	250c      	movcc	r5, #12
 80164b2:	4629      	mov	r1, r5
 80164b4:	4638      	mov	r0, r7
 80164b6:	f7ff ffa5 	bl	8016404 <sbrk_aligned>
 80164ba:	3001      	adds	r0, #1
 80164bc:	d02b      	beq.n	8016516 <_malloc_r+0xd2>
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	442b      	add	r3, r5
 80164c2:	6023      	str	r3, [r4, #0]
 80164c4:	e00e      	b.n	80164e4 <_malloc_r+0xa0>
 80164c6:	6822      	ldr	r2, [r4, #0]
 80164c8:	1b52      	subs	r2, r2, r5
 80164ca:	d41e      	bmi.n	801650a <_malloc_r+0xc6>
 80164cc:	2a0b      	cmp	r2, #11
 80164ce:	d916      	bls.n	80164fe <_malloc_r+0xba>
 80164d0:	1961      	adds	r1, r4, r5
 80164d2:	42a3      	cmp	r3, r4
 80164d4:	6025      	str	r5, [r4, #0]
 80164d6:	bf18      	it	ne
 80164d8:	6059      	strne	r1, [r3, #4]
 80164da:	6863      	ldr	r3, [r4, #4]
 80164dc:	bf08      	it	eq
 80164de:	6031      	streq	r1, [r6, #0]
 80164e0:	5162      	str	r2, [r4, r5]
 80164e2:	604b      	str	r3, [r1, #4]
 80164e4:	4638      	mov	r0, r7
 80164e6:	f104 060b 	add.w	r6, r4, #11
 80164ea:	f000 fb8b 	bl	8016c04 <__malloc_unlock>
 80164ee:	f026 0607 	bic.w	r6, r6, #7
 80164f2:	1d23      	adds	r3, r4, #4
 80164f4:	1af2      	subs	r2, r6, r3
 80164f6:	d0b6      	beq.n	8016466 <_malloc_r+0x22>
 80164f8:	1b9b      	subs	r3, r3, r6
 80164fa:	50a3      	str	r3, [r4, r2]
 80164fc:	e7b3      	b.n	8016466 <_malloc_r+0x22>
 80164fe:	6862      	ldr	r2, [r4, #4]
 8016500:	42a3      	cmp	r3, r4
 8016502:	bf0c      	ite	eq
 8016504:	6032      	streq	r2, [r6, #0]
 8016506:	605a      	strne	r2, [r3, #4]
 8016508:	e7ec      	b.n	80164e4 <_malloc_r+0xa0>
 801650a:	4623      	mov	r3, r4
 801650c:	6864      	ldr	r4, [r4, #4]
 801650e:	e7b2      	b.n	8016476 <_malloc_r+0x32>
 8016510:	4634      	mov	r4, r6
 8016512:	6876      	ldr	r6, [r6, #4]
 8016514:	e7b9      	b.n	801648a <_malloc_r+0x46>
 8016516:	230c      	movs	r3, #12
 8016518:	603b      	str	r3, [r7, #0]
 801651a:	4638      	mov	r0, r7
 801651c:	f000 fb72 	bl	8016c04 <__malloc_unlock>
 8016520:	e7a1      	b.n	8016466 <_malloc_r+0x22>
 8016522:	6025      	str	r5, [r4, #0]
 8016524:	e7de      	b.n	80164e4 <_malloc_r+0xa0>
 8016526:	bf00      	nop
 8016528:	240059fc 	.word	0x240059fc

0801652c <_puts_r>:
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	460e      	mov	r6, r1
 8016530:	4605      	mov	r5, r0
 8016532:	b118      	cbz	r0, 801653c <_puts_r+0x10>
 8016534:	6983      	ldr	r3, [r0, #24]
 8016536:	b90b      	cbnz	r3, 801653c <_puts_r+0x10>
 8016538:	f000 fa58 	bl	80169ec <__sinit>
 801653c:	69ab      	ldr	r3, [r5, #24]
 801653e:	68ac      	ldr	r4, [r5, #8]
 8016540:	b913      	cbnz	r3, 8016548 <_puts_r+0x1c>
 8016542:	4628      	mov	r0, r5
 8016544:	f000 fa52 	bl	80169ec <__sinit>
 8016548:	4b2c      	ldr	r3, [pc, #176]	; (80165fc <_puts_r+0xd0>)
 801654a:	429c      	cmp	r4, r3
 801654c:	d120      	bne.n	8016590 <_puts_r+0x64>
 801654e:	686c      	ldr	r4, [r5, #4]
 8016550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016552:	07db      	lsls	r3, r3, #31
 8016554:	d405      	bmi.n	8016562 <_puts_r+0x36>
 8016556:	89a3      	ldrh	r3, [r4, #12]
 8016558:	0598      	lsls	r0, r3, #22
 801655a:	d402      	bmi.n	8016562 <_puts_r+0x36>
 801655c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801655e:	f000 fae3 	bl	8016b28 <__retarget_lock_acquire_recursive>
 8016562:	89a3      	ldrh	r3, [r4, #12]
 8016564:	0719      	lsls	r1, r3, #28
 8016566:	d51d      	bpl.n	80165a4 <_puts_r+0x78>
 8016568:	6923      	ldr	r3, [r4, #16]
 801656a:	b1db      	cbz	r3, 80165a4 <_puts_r+0x78>
 801656c:	3e01      	subs	r6, #1
 801656e:	68a3      	ldr	r3, [r4, #8]
 8016570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016574:	3b01      	subs	r3, #1
 8016576:	60a3      	str	r3, [r4, #8]
 8016578:	bb39      	cbnz	r1, 80165ca <_puts_r+0x9e>
 801657a:	2b00      	cmp	r3, #0
 801657c:	da38      	bge.n	80165f0 <_puts_r+0xc4>
 801657e:	4622      	mov	r2, r4
 8016580:	210a      	movs	r1, #10
 8016582:	4628      	mov	r0, r5
 8016584:	f000 f858 	bl	8016638 <__swbuf_r>
 8016588:	3001      	adds	r0, #1
 801658a:	d011      	beq.n	80165b0 <_puts_r+0x84>
 801658c:	250a      	movs	r5, #10
 801658e:	e011      	b.n	80165b4 <_puts_r+0x88>
 8016590:	4b1b      	ldr	r3, [pc, #108]	; (8016600 <_puts_r+0xd4>)
 8016592:	429c      	cmp	r4, r3
 8016594:	d101      	bne.n	801659a <_puts_r+0x6e>
 8016596:	68ac      	ldr	r4, [r5, #8]
 8016598:	e7da      	b.n	8016550 <_puts_r+0x24>
 801659a:	4b1a      	ldr	r3, [pc, #104]	; (8016604 <_puts_r+0xd8>)
 801659c:	429c      	cmp	r4, r3
 801659e:	bf08      	it	eq
 80165a0:	68ec      	ldreq	r4, [r5, #12]
 80165a2:	e7d5      	b.n	8016550 <_puts_r+0x24>
 80165a4:	4621      	mov	r1, r4
 80165a6:	4628      	mov	r0, r5
 80165a8:	f000 f898 	bl	80166dc <__swsetup_r>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d0dd      	beq.n	801656c <_puts_r+0x40>
 80165b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80165b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165b6:	07da      	lsls	r2, r3, #31
 80165b8:	d405      	bmi.n	80165c6 <_puts_r+0x9a>
 80165ba:	89a3      	ldrh	r3, [r4, #12]
 80165bc:	059b      	lsls	r3, r3, #22
 80165be:	d402      	bmi.n	80165c6 <_puts_r+0x9a>
 80165c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165c2:	f000 fab2 	bl	8016b2a <__retarget_lock_release_recursive>
 80165c6:	4628      	mov	r0, r5
 80165c8:	bd70      	pop	{r4, r5, r6, pc}
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	da04      	bge.n	80165d8 <_puts_r+0xac>
 80165ce:	69a2      	ldr	r2, [r4, #24]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	dc06      	bgt.n	80165e2 <_puts_r+0xb6>
 80165d4:	290a      	cmp	r1, #10
 80165d6:	d004      	beq.n	80165e2 <_puts_r+0xb6>
 80165d8:	6823      	ldr	r3, [r4, #0]
 80165da:	1c5a      	adds	r2, r3, #1
 80165dc:	6022      	str	r2, [r4, #0]
 80165de:	7019      	strb	r1, [r3, #0]
 80165e0:	e7c5      	b.n	801656e <_puts_r+0x42>
 80165e2:	4622      	mov	r2, r4
 80165e4:	4628      	mov	r0, r5
 80165e6:	f000 f827 	bl	8016638 <__swbuf_r>
 80165ea:	3001      	adds	r0, #1
 80165ec:	d1bf      	bne.n	801656e <_puts_r+0x42>
 80165ee:	e7df      	b.n	80165b0 <_puts_r+0x84>
 80165f0:	6823      	ldr	r3, [r4, #0]
 80165f2:	250a      	movs	r5, #10
 80165f4:	1c5a      	adds	r2, r3, #1
 80165f6:	6022      	str	r2, [r4, #0]
 80165f8:	701d      	strb	r5, [r3, #0]
 80165fa:	e7db      	b.n	80165b4 <_puts_r+0x88>
 80165fc:	08017188 	.word	0x08017188
 8016600:	080171a8 	.word	0x080171a8
 8016604:	08017168 	.word	0x08017168

08016608 <puts>:
 8016608:	4b02      	ldr	r3, [pc, #8]	; (8016614 <puts+0xc>)
 801660a:	4601      	mov	r1, r0
 801660c:	6818      	ldr	r0, [r3, #0]
 801660e:	f7ff bf8d 	b.w	801652c <_puts_r>
 8016612:	bf00      	nop
 8016614:	240000a4 	.word	0x240000a4

08016618 <_sbrk_r>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4d06      	ldr	r5, [pc, #24]	; (8016634 <_sbrk_r+0x1c>)
 801661c:	2300      	movs	r3, #0
 801661e:	4604      	mov	r4, r0
 8016620:	4608      	mov	r0, r1
 8016622:	602b      	str	r3, [r5, #0]
 8016624:	f7ed fa12 	bl	8003a4c <_sbrk>
 8016628:	1c43      	adds	r3, r0, #1
 801662a:	d102      	bne.n	8016632 <_sbrk_r+0x1a>
 801662c:	682b      	ldr	r3, [r5, #0]
 801662e:	b103      	cbz	r3, 8016632 <_sbrk_r+0x1a>
 8016630:	6023      	str	r3, [r4, #0]
 8016632:	bd38      	pop	{r3, r4, r5, pc}
 8016634:	24005a08 	.word	0x24005a08

08016638 <__swbuf_r>:
 8016638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801663a:	460e      	mov	r6, r1
 801663c:	4614      	mov	r4, r2
 801663e:	4605      	mov	r5, r0
 8016640:	b118      	cbz	r0, 801664a <__swbuf_r+0x12>
 8016642:	6983      	ldr	r3, [r0, #24]
 8016644:	b90b      	cbnz	r3, 801664a <__swbuf_r+0x12>
 8016646:	f000 f9d1 	bl	80169ec <__sinit>
 801664a:	4b21      	ldr	r3, [pc, #132]	; (80166d0 <__swbuf_r+0x98>)
 801664c:	429c      	cmp	r4, r3
 801664e:	d12b      	bne.n	80166a8 <__swbuf_r+0x70>
 8016650:	686c      	ldr	r4, [r5, #4]
 8016652:	69a3      	ldr	r3, [r4, #24]
 8016654:	60a3      	str	r3, [r4, #8]
 8016656:	89a3      	ldrh	r3, [r4, #12]
 8016658:	071a      	lsls	r2, r3, #28
 801665a:	d52f      	bpl.n	80166bc <__swbuf_r+0x84>
 801665c:	6923      	ldr	r3, [r4, #16]
 801665e:	b36b      	cbz	r3, 80166bc <__swbuf_r+0x84>
 8016660:	6923      	ldr	r3, [r4, #16]
 8016662:	6820      	ldr	r0, [r4, #0]
 8016664:	1ac0      	subs	r0, r0, r3
 8016666:	6963      	ldr	r3, [r4, #20]
 8016668:	b2f6      	uxtb	r6, r6
 801666a:	4283      	cmp	r3, r0
 801666c:	4637      	mov	r7, r6
 801666e:	dc04      	bgt.n	801667a <__swbuf_r+0x42>
 8016670:	4621      	mov	r1, r4
 8016672:	4628      	mov	r0, r5
 8016674:	f000 f926 	bl	80168c4 <_fflush_r>
 8016678:	bb30      	cbnz	r0, 80166c8 <__swbuf_r+0x90>
 801667a:	68a3      	ldr	r3, [r4, #8]
 801667c:	3b01      	subs	r3, #1
 801667e:	60a3      	str	r3, [r4, #8]
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	1c5a      	adds	r2, r3, #1
 8016684:	6022      	str	r2, [r4, #0]
 8016686:	701e      	strb	r6, [r3, #0]
 8016688:	6963      	ldr	r3, [r4, #20]
 801668a:	3001      	adds	r0, #1
 801668c:	4283      	cmp	r3, r0
 801668e:	d004      	beq.n	801669a <__swbuf_r+0x62>
 8016690:	89a3      	ldrh	r3, [r4, #12]
 8016692:	07db      	lsls	r3, r3, #31
 8016694:	d506      	bpl.n	80166a4 <__swbuf_r+0x6c>
 8016696:	2e0a      	cmp	r6, #10
 8016698:	d104      	bne.n	80166a4 <__swbuf_r+0x6c>
 801669a:	4621      	mov	r1, r4
 801669c:	4628      	mov	r0, r5
 801669e:	f000 f911 	bl	80168c4 <_fflush_r>
 80166a2:	b988      	cbnz	r0, 80166c8 <__swbuf_r+0x90>
 80166a4:	4638      	mov	r0, r7
 80166a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166a8:	4b0a      	ldr	r3, [pc, #40]	; (80166d4 <__swbuf_r+0x9c>)
 80166aa:	429c      	cmp	r4, r3
 80166ac:	d101      	bne.n	80166b2 <__swbuf_r+0x7a>
 80166ae:	68ac      	ldr	r4, [r5, #8]
 80166b0:	e7cf      	b.n	8016652 <__swbuf_r+0x1a>
 80166b2:	4b09      	ldr	r3, [pc, #36]	; (80166d8 <__swbuf_r+0xa0>)
 80166b4:	429c      	cmp	r4, r3
 80166b6:	bf08      	it	eq
 80166b8:	68ec      	ldreq	r4, [r5, #12]
 80166ba:	e7ca      	b.n	8016652 <__swbuf_r+0x1a>
 80166bc:	4621      	mov	r1, r4
 80166be:	4628      	mov	r0, r5
 80166c0:	f000 f80c 	bl	80166dc <__swsetup_r>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d0cb      	beq.n	8016660 <__swbuf_r+0x28>
 80166c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80166cc:	e7ea      	b.n	80166a4 <__swbuf_r+0x6c>
 80166ce:	bf00      	nop
 80166d0:	08017188 	.word	0x08017188
 80166d4:	080171a8 	.word	0x080171a8
 80166d8:	08017168 	.word	0x08017168

080166dc <__swsetup_r>:
 80166dc:	4b32      	ldr	r3, [pc, #200]	; (80167a8 <__swsetup_r+0xcc>)
 80166de:	b570      	push	{r4, r5, r6, lr}
 80166e0:	681d      	ldr	r5, [r3, #0]
 80166e2:	4606      	mov	r6, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	b125      	cbz	r5, 80166f2 <__swsetup_r+0x16>
 80166e8:	69ab      	ldr	r3, [r5, #24]
 80166ea:	b913      	cbnz	r3, 80166f2 <__swsetup_r+0x16>
 80166ec:	4628      	mov	r0, r5
 80166ee:	f000 f97d 	bl	80169ec <__sinit>
 80166f2:	4b2e      	ldr	r3, [pc, #184]	; (80167ac <__swsetup_r+0xd0>)
 80166f4:	429c      	cmp	r4, r3
 80166f6:	d10f      	bne.n	8016718 <__swsetup_r+0x3c>
 80166f8:	686c      	ldr	r4, [r5, #4]
 80166fa:	89a3      	ldrh	r3, [r4, #12]
 80166fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016700:	0719      	lsls	r1, r3, #28
 8016702:	d42c      	bmi.n	801675e <__swsetup_r+0x82>
 8016704:	06dd      	lsls	r5, r3, #27
 8016706:	d411      	bmi.n	801672c <__swsetup_r+0x50>
 8016708:	2309      	movs	r3, #9
 801670a:	6033      	str	r3, [r6, #0]
 801670c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016710:	81a3      	strh	r3, [r4, #12]
 8016712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016716:	e03e      	b.n	8016796 <__swsetup_r+0xba>
 8016718:	4b25      	ldr	r3, [pc, #148]	; (80167b0 <__swsetup_r+0xd4>)
 801671a:	429c      	cmp	r4, r3
 801671c:	d101      	bne.n	8016722 <__swsetup_r+0x46>
 801671e:	68ac      	ldr	r4, [r5, #8]
 8016720:	e7eb      	b.n	80166fa <__swsetup_r+0x1e>
 8016722:	4b24      	ldr	r3, [pc, #144]	; (80167b4 <__swsetup_r+0xd8>)
 8016724:	429c      	cmp	r4, r3
 8016726:	bf08      	it	eq
 8016728:	68ec      	ldreq	r4, [r5, #12]
 801672a:	e7e6      	b.n	80166fa <__swsetup_r+0x1e>
 801672c:	0758      	lsls	r0, r3, #29
 801672e:	d512      	bpl.n	8016756 <__swsetup_r+0x7a>
 8016730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016732:	b141      	cbz	r1, 8016746 <__swsetup_r+0x6a>
 8016734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016738:	4299      	cmp	r1, r3
 801673a:	d002      	beq.n	8016742 <__swsetup_r+0x66>
 801673c:	4630      	mov	r0, r6
 801673e:	f7ff fe15 	bl	801636c <_free_r>
 8016742:	2300      	movs	r3, #0
 8016744:	6363      	str	r3, [r4, #52]	; 0x34
 8016746:	89a3      	ldrh	r3, [r4, #12]
 8016748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801674c:	81a3      	strh	r3, [r4, #12]
 801674e:	2300      	movs	r3, #0
 8016750:	6063      	str	r3, [r4, #4]
 8016752:	6923      	ldr	r3, [r4, #16]
 8016754:	6023      	str	r3, [r4, #0]
 8016756:	89a3      	ldrh	r3, [r4, #12]
 8016758:	f043 0308 	orr.w	r3, r3, #8
 801675c:	81a3      	strh	r3, [r4, #12]
 801675e:	6923      	ldr	r3, [r4, #16]
 8016760:	b94b      	cbnz	r3, 8016776 <__swsetup_r+0x9a>
 8016762:	89a3      	ldrh	r3, [r4, #12]
 8016764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801676c:	d003      	beq.n	8016776 <__swsetup_r+0x9a>
 801676e:	4621      	mov	r1, r4
 8016770:	4630      	mov	r0, r6
 8016772:	f000 fa01 	bl	8016b78 <__smakebuf_r>
 8016776:	89a0      	ldrh	r0, [r4, #12]
 8016778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801677c:	f010 0301 	ands.w	r3, r0, #1
 8016780:	d00a      	beq.n	8016798 <__swsetup_r+0xbc>
 8016782:	2300      	movs	r3, #0
 8016784:	60a3      	str	r3, [r4, #8]
 8016786:	6963      	ldr	r3, [r4, #20]
 8016788:	425b      	negs	r3, r3
 801678a:	61a3      	str	r3, [r4, #24]
 801678c:	6923      	ldr	r3, [r4, #16]
 801678e:	b943      	cbnz	r3, 80167a2 <__swsetup_r+0xc6>
 8016790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016794:	d1ba      	bne.n	801670c <__swsetup_r+0x30>
 8016796:	bd70      	pop	{r4, r5, r6, pc}
 8016798:	0781      	lsls	r1, r0, #30
 801679a:	bf58      	it	pl
 801679c:	6963      	ldrpl	r3, [r4, #20]
 801679e:	60a3      	str	r3, [r4, #8]
 80167a0:	e7f4      	b.n	801678c <__swsetup_r+0xb0>
 80167a2:	2000      	movs	r0, #0
 80167a4:	e7f7      	b.n	8016796 <__swsetup_r+0xba>
 80167a6:	bf00      	nop
 80167a8:	240000a4 	.word	0x240000a4
 80167ac:	08017188 	.word	0x08017188
 80167b0:	080171a8 	.word	0x080171a8
 80167b4:	08017168 	.word	0x08017168

080167b8 <__sflush_r>:
 80167b8:	898a      	ldrh	r2, [r1, #12]
 80167ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167be:	4605      	mov	r5, r0
 80167c0:	0710      	lsls	r0, r2, #28
 80167c2:	460c      	mov	r4, r1
 80167c4:	d458      	bmi.n	8016878 <__sflush_r+0xc0>
 80167c6:	684b      	ldr	r3, [r1, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	dc05      	bgt.n	80167d8 <__sflush_r+0x20>
 80167cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	dc02      	bgt.n	80167d8 <__sflush_r+0x20>
 80167d2:	2000      	movs	r0, #0
 80167d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167da:	2e00      	cmp	r6, #0
 80167dc:	d0f9      	beq.n	80167d2 <__sflush_r+0x1a>
 80167de:	2300      	movs	r3, #0
 80167e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167e4:	682f      	ldr	r7, [r5, #0]
 80167e6:	602b      	str	r3, [r5, #0]
 80167e8:	d032      	beq.n	8016850 <__sflush_r+0x98>
 80167ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80167ec:	89a3      	ldrh	r3, [r4, #12]
 80167ee:	075a      	lsls	r2, r3, #29
 80167f0:	d505      	bpl.n	80167fe <__sflush_r+0x46>
 80167f2:	6863      	ldr	r3, [r4, #4]
 80167f4:	1ac0      	subs	r0, r0, r3
 80167f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167f8:	b10b      	cbz	r3, 80167fe <__sflush_r+0x46>
 80167fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167fc:	1ac0      	subs	r0, r0, r3
 80167fe:	2300      	movs	r3, #0
 8016800:	4602      	mov	r2, r0
 8016802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016804:	6a21      	ldr	r1, [r4, #32]
 8016806:	4628      	mov	r0, r5
 8016808:	47b0      	blx	r6
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	89a3      	ldrh	r3, [r4, #12]
 801680e:	d106      	bne.n	801681e <__sflush_r+0x66>
 8016810:	6829      	ldr	r1, [r5, #0]
 8016812:	291d      	cmp	r1, #29
 8016814:	d82c      	bhi.n	8016870 <__sflush_r+0xb8>
 8016816:	4a2a      	ldr	r2, [pc, #168]	; (80168c0 <__sflush_r+0x108>)
 8016818:	40ca      	lsrs	r2, r1
 801681a:	07d6      	lsls	r6, r2, #31
 801681c:	d528      	bpl.n	8016870 <__sflush_r+0xb8>
 801681e:	2200      	movs	r2, #0
 8016820:	6062      	str	r2, [r4, #4]
 8016822:	04d9      	lsls	r1, r3, #19
 8016824:	6922      	ldr	r2, [r4, #16]
 8016826:	6022      	str	r2, [r4, #0]
 8016828:	d504      	bpl.n	8016834 <__sflush_r+0x7c>
 801682a:	1c42      	adds	r2, r0, #1
 801682c:	d101      	bne.n	8016832 <__sflush_r+0x7a>
 801682e:	682b      	ldr	r3, [r5, #0]
 8016830:	b903      	cbnz	r3, 8016834 <__sflush_r+0x7c>
 8016832:	6560      	str	r0, [r4, #84]	; 0x54
 8016834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016836:	602f      	str	r7, [r5, #0]
 8016838:	2900      	cmp	r1, #0
 801683a:	d0ca      	beq.n	80167d2 <__sflush_r+0x1a>
 801683c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016840:	4299      	cmp	r1, r3
 8016842:	d002      	beq.n	801684a <__sflush_r+0x92>
 8016844:	4628      	mov	r0, r5
 8016846:	f7ff fd91 	bl	801636c <_free_r>
 801684a:	2000      	movs	r0, #0
 801684c:	6360      	str	r0, [r4, #52]	; 0x34
 801684e:	e7c1      	b.n	80167d4 <__sflush_r+0x1c>
 8016850:	6a21      	ldr	r1, [r4, #32]
 8016852:	2301      	movs	r3, #1
 8016854:	4628      	mov	r0, r5
 8016856:	47b0      	blx	r6
 8016858:	1c41      	adds	r1, r0, #1
 801685a:	d1c7      	bne.n	80167ec <__sflush_r+0x34>
 801685c:	682b      	ldr	r3, [r5, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d0c4      	beq.n	80167ec <__sflush_r+0x34>
 8016862:	2b1d      	cmp	r3, #29
 8016864:	d001      	beq.n	801686a <__sflush_r+0xb2>
 8016866:	2b16      	cmp	r3, #22
 8016868:	d101      	bne.n	801686e <__sflush_r+0xb6>
 801686a:	602f      	str	r7, [r5, #0]
 801686c:	e7b1      	b.n	80167d2 <__sflush_r+0x1a>
 801686e:	89a3      	ldrh	r3, [r4, #12]
 8016870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016874:	81a3      	strh	r3, [r4, #12]
 8016876:	e7ad      	b.n	80167d4 <__sflush_r+0x1c>
 8016878:	690f      	ldr	r7, [r1, #16]
 801687a:	2f00      	cmp	r7, #0
 801687c:	d0a9      	beq.n	80167d2 <__sflush_r+0x1a>
 801687e:	0793      	lsls	r3, r2, #30
 8016880:	680e      	ldr	r6, [r1, #0]
 8016882:	bf08      	it	eq
 8016884:	694b      	ldreq	r3, [r1, #20]
 8016886:	600f      	str	r7, [r1, #0]
 8016888:	bf18      	it	ne
 801688a:	2300      	movne	r3, #0
 801688c:	eba6 0807 	sub.w	r8, r6, r7
 8016890:	608b      	str	r3, [r1, #8]
 8016892:	f1b8 0f00 	cmp.w	r8, #0
 8016896:	dd9c      	ble.n	80167d2 <__sflush_r+0x1a>
 8016898:	6a21      	ldr	r1, [r4, #32]
 801689a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801689c:	4643      	mov	r3, r8
 801689e:	463a      	mov	r2, r7
 80168a0:	4628      	mov	r0, r5
 80168a2:	47b0      	blx	r6
 80168a4:	2800      	cmp	r0, #0
 80168a6:	dc06      	bgt.n	80168b6 <__sflush_r+0xfe>
 80168a8:	89a3      	ldrh	r3, [r4, #12]
 80168aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168ae:	81a3      	strh	r3, [r4, #12]
 80168b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80168b4:	e78e      	b.n	80167d4 <__sflush_r+0x1c>
 80168b6:	4407      	add	r7, r0
 80168b8:	eba8 0800 	sub.w	r8, r8, r0
 80168bc:	e7e9      	b.n	8016892 <__sflush_r+0xda>
 80168be:	bf00      	nop
 80168c0:	20400001 	.word	0x20400001

080168c4 <_fflush_r>:
 80168c4:	b538      	push	{r3, r4, r5, lr}
 80168c6:	690b      	ldr	r3, [r1, #16]
 80168c8:	4605      	mov	r5, r0
 80168ca:	460c      	mov	r4, r1
 80168cc:	b913      	cbnz	r3, 80168d4 <_fflush_r+0x10>
 80168ce:	2500      	movs	r5, #0
 80168d0:	4628      	mov	r0, r5
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
 80168d4:	b118      	cbz	r0, 80168de <_fflush_r+0x1a>
 80168d6:	6983      	ldr	r3, [r0, #24]
 80168d8:	b90b      	cbnz	r3, 80168de <_fflush_r+0x1a>
 80168da:	f000 f887 	bl	80169ec <__sinit>
 80168de:	4b14      	ldr	r3, [pc, #80]	; (8016930 <_fflush_r+0x6c>)
 80168e0:	429c      	cmp	r4, r3
 80168e2:	d11b      	bne.n	801691c <_fflush_r+0x58>
 80168e4:	686c      	ldr	r4, [r5, #4]
 80168e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d0ef      	beq.n	80168ce <_fflush_r+0xa>
 80168ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168f0:	07d0      	lsls	r0, r2, #31
 80168f2:	d404      	bmi.n	80168fe <_fflush_r+0x3a>
 80168f4:	0599      	lsls	r1, r3, #22
 80168f6:	d402      	bmi.n	80168fe <_fflush_r+0x3a>
 80168f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168fa:	f000 f915 	bl	8016b28 <__retarget_lock_acquire_recursive>
 80168fe:	4628      	mov	r0, r5
 8016900:	4621      	mov	r1, r4
 8016902:	f7ff ff59 	bl	80167b8 <__sflush_r>
 8016906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016908:	07da      	lsls	r2, r3, #31
 801690a:	4605      	mov	r5, r0
 801690c:	d4e0      	bmi.n	80168d0 <_fflush_r+0xc>
 801690e:	89a3      	ldrh	r3, [r4, #12]
 8016910:	059b      	lsls	r3, r3, #22
 8016912:	d4dd      	bmi.n	80168d0 <_fflush_r+0xc>
 8016914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016916:	f000 f908 	bl	8016b2a <__retarget_lock_release_recursive>
 801691a:	e7d9      	b.n	80168d0 <_fflush_r+0xc>
 801691c:	4b05      	ldr	r3, [pc, #20]	; (8016934 <_fflush_r+0x70>)
 801691e:	429c      	cmp	r4, r3
 8016920:	d101      	bne.n	8016926 <_fflush_r+0x62>
 8016922:	68ac      	ldr	r4, [r5, #8]
 8016924:	e7df      	b.n	80168e6 <_fflush_r+0x22>
 8016926:	4b04      	ldr	r3, [pc, #16]	; (8016938 <_fflush_r+0x74>)
 8016928:	429c      	cmp	r4, r3
 801692a:	bf08      	it	eq
 801692c:	68ec      	ldreq	r4, [r5, #12]
 801692e:	e7da      	b.n	80168e6 <_fflush_r+0x22>
 8016930:	08017188 	.word	0x08017188
 8016934:	080171a8 	.word	0x080171a8
 8016938:	08017168 	.word	0x08017168

0801693c <std>:
 801693c:	2300      	movs	r3, #0
 801693e:	b510      	push	{r4, lr}
 8016940:	4604      	mov	r4, r0
 8016942:	e9c0 3300 	strd	r3, r3, [r0]
 8016946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801694a:	6083      	str	r3, [r0, #8]
 801694c:	8181      	strh	r1, [r0, #12]
 801694e:	6643      	str	r3, [r0, #100]	; 0x64
 8016950:	81c2      	strh	r2, [r0, #14]
 8016952:	6183      	str	r3, [r0, #24]
 8016954:	4619      	mov	r1, r3
 8016956:	2208      	movs	r2, #8
 8016958:	305c      	adds	r0, #92	; 0x5c
 801695a:	f7ff fcff 	bl	801635c <memset>
 801695e:	4b05      	ldr	r3, [pc, #20]	; (8016974 <std+0x38>)
 8016960:	6263      	str	r3, [r4, #36]	; 0x24
 8016962:	4b05      	ldr	r3, [pc, #20]	; (8016978 <std+0x3c>)
 8016964:	62a3      	str	r3, [r4, #40]	; 0x28
 8016966:	4b05      	ldr	r3, [pc, #20]	; (801697c <std+0x40>)
 8016968:	62e3      	str	r3, [r4, #44]	; 0x2c
 801696a:	4b05      	ldr	r3, [pc, #20]	; (8016980 <std+0x44>)
 801696c:	6224      	str	r4, [r4, #32]
 801696e:	6323      	str	r3, [r4, #48]	; 0x30
 8016970:	bd10      	pop	{r4, pc}
 8016972:	bf00      	nop
 8016974:	08016c11 	.word	0x08016c11
 8016978:	08016c33 	.word	0x08016c33
 801697c:	08016c6b 	.word	0x08016c6b
 8016980:	08016c8f 	.word	0x08016c8f

08016984 <_cleanup_r>:
 8016984:	4901      	ldr	r1, [pc, #4]	; (801698c <_cleanup_r+0x8>)
 8016986:	f000 b8af 	b.w	8016ae8 <_fwalk_reent>
 801698a:	bf00      	nop
 801698c:	080168c5 	.word	0x080168c5

08016990 <__sfmoreglue>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	2268      	movs	r2, #104	; 0x68
 8016994:	1e4d      	subs	r5, r1, #1
 8016996:	4355      	muls	r5, r2
 8016998:	460e      	mov	r6, r1
 801699a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801699e:	f7ff fd51 	bl	8016444 <_malloc_r>
 80169a2:	4604      	mov	r4, r0
 80169a4:	b140      	cbz	r0, 80169b8 <__sfmoreglue+0x28>
 80169a6:	2100      	movs	r1, #0
 80169a8:	e9c0 1600 	strd	r1, r6, [r0]
 80169ac:	300c      	adds	r0, #12
 80169ae:	60a0      	str	r0, [r4, #8]
 80169b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80169b4:	f7ff fcd2 	bl	801635c <memset>
 80169b8:	4620      	mov	r0, r4
 80169ba:	bd70      	pop	{r4, r5, r6, pc}

080169bc <__sfp_lock_acquire>:
 80169bc:	4801      	ldr	r0, [pc, #4]	; (80169c4 <__sfp_lock_acquire+0x8>)
 80169be:	f000 b8b3 	b.w	8016b28 <__retarget_lock_acquire_recursive>
 80169c2:	bf00      	nop
 80169c4:	24005a05 	.word	0x24005a05

080169c8 <__sfp_lock_release>:
 80169c8:	4801      	ldr	r0, [pc, #4]	; (80169d0 <__sfp_lock_release+0x8>)
 80169ca:	f000 b8ae 	b.w	8016b2a <__retarget_lock_release_recursive>
 80169ce:	bf00      	nop
 80169d0:	24005a05 	.word	0x24005a05

080169d4 <__sinit_lock_acquire>:
 80169d4:	4801      	ldr	r0, [pc, #4]	; (80169dc <__sinit_lock_acquire+0x8>)
 80169d6:	f000 b8a7 	b.w	8016b28 <__retarget_lock_acquire_recursive>
 80169da:	bf00      	nop
 80169dc:	24005a06 	.word	0x24005a06

080169e0 <__sinit_lock_release>:
 80169e0:	4801      	ldr	r0, [pc, #4]	; (80169e8 <__sinit_lock_release+0x8>)
 80169e2:	f000 b8a2 	b.w	8016b2a <__retarget_lock_release_recursive>
 80169e6:	bf00      	nop
 80169e8:	24005a06 	.word	0x24005a06

080169ec <__sinit>:
 80169ec:	b510      	push	{r4, lr}
 80169ee:	4604      	mov	r4, r0
 80169f0:	f7ff fff0 	bl	80169d4 <__sinit_lock_acquire>
 80169f4:	69a3      	ldr	r3, [r4, #24]
 80169f6:	b11b      	cbz	r3, 8016a00 <__sinit+0x14>
 80169f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169fc:	f7ff bff0 	b.w	80169e0 <__sinit_lock_release>
 8016a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016a04:	6523      	str	r3, [r4, #80]	; 0x50
 8016a06:	4b13      	ldr	r3, [pc, #76]	; (8016a54 <__sinit+0x68>)
 8016a08:	4a13      	ldr	r2, [pc, #76]	; (8016a58 <__sinit+0x6c>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016a0e:	42a3      	cmp	r3, r4
 8016a10:	bf04      	itt	eq
 8016a12:	2301      	moveq	r3, #1
 8016a14:	61a3      	streq	r3, [r4, #24]
 8016a16:	4620      	mov	r0, r4
 8016a18:	f000 f820 	bl	8016a5c <__sfp>
 8016a1c:	6060      	str	r0, [r4, #4]
 8016a1e:	4620      	mov	r0, r4
 8016a20:	f000 f81c 	bl	8016a5c <__sfp>
 8016a24:	60a0      	str	r0, [r4, #8]
 8016a26:	4620      	mov	r0, r4
 8016a28:	f000 f818 	bl	8016a5c <__sfp>
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	60e0      	str	r0, [r4, #12]
 8016a30:	2104      	movs	r1, #4
 8016a32:	6860      	ldr	r0, [r4, #4]
 8016a34:	f7ff ff82 	bl	801693c <std>
 8016a38:	68a0      	ldr	r0, [r4, #8]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	2109      	movs	r1, #9
 8016a3e:	f7ff ff7d 	bl	801693c <std>
 8016a42:	68e0      	ldr	r0, [r4, #12]
 8016a44:	2202      	movs	r2, #2
 8016a46:	2112      	movs	r1, #18
 8016a48:	f7ff ff78 	bl	801693c <std>
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	61a3      	str	r3, [r4, #24]
 8016a50:	e7d2      	b.n	80169f8 <__sinit+0xc>
 8016a52:	bf00      	nop
 8016a54:	08017164 	.word	0x08017164
 8016a58:	08016985 	.word	0x08016985

08016a5c <__sfp>:
 8016a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5e:	4607      	mov	r7, r0
 8016a60:	f7ff ffac 	bl	80169bc <__sfp_lock_acquire>
 8016a64:	4b1e      	ldr	r3, [pc, #120]	; (8016ae0 <__sfp+0x84>)
 8016a66:	681e      	ldr	r6, [r3, #0]
 8016a68:	69b3      	ldr	r3, [r6, #24]
 8016a6a:	b913      	cbnz	r3, 8016a72 <__sfp+0x16>
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	f7ff ffbd 	bl	80169ec <__sinit>
 8016a72:	3648      	adds	r6, #72	; 0x48
 8016a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a78:	3b01      	subs	r3, #1
 8016a7a:	d503      	bpl.n	8016a84 <__sfp+0x28>
 8016a7c:	6833      	ldr	r3, [r6, #0]
 8016a7e:	b30b      	cbz	r3, 8016ac4 <__sfp+0x68>
 8016a80:	6836      	ldr	r6, [r6, #0]
 8016a82:	e7f7      	b.n	8016a74 <__sfp+0x18>
 8016a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a88:	b9d5      	cbnz	r5, 8016ac0 <__sfp+0x64>
 8016a8a:	4b16      	ldr	r3, [pc, #88]	; (8016ae4 <__sfp+0x88>)
 8016a8c:	60e3      	str	r3, [r4, #12]
 8016a8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a92:	6665      	str	r5, [r4, #100]	; 0x64
 8016a94:	f000 f847 	bl	8016b26 <__retarget_lock_init_recursive>
 8016a98:	f7ff ff96 	bl	80169c8 <__sfp_lock_release>
 8016a9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016aa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016aa4:	6025      	str	r5, [r4, #0]
 8016aa6:	61a5      	str	r5, [r4, #24]
 8016aa8:	2208      	movs	r2, #8
 8016aaa:	4629      	mov	r1, r5
 8016aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ab0:	f7ff fc54 	bl	801635c <memset>
 8016ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016abc:	4620      	mov	r0, r4
 8016abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ac0:	3468      	adds	r4, #104	; 0x68
 8016ac2:	e7d9      	b.n	8016a78 <__sfp+0x1c>
 8016ac4:	2104      	movs	r1, #4
 8016ac6:	4638      	mov	r0, r7
 8016ac8:	f7ff ff62 	bl	8016990 <__sfmoreglue>
 8016acc:	4604      	mov	r4, r0
 8016ace:	6030      	str	r0, [r6, #0]
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d1d5      	bne.n	8016a80 <__sfp+0x24>
 8016ad4:	f7ff ff78 	bl	80169c8 <__sfp_lock_release>
 8016ad8:	230c      	movs	r3, #12
 8016ada:	603b      	str	r3, [r7, #0]
 8016adc:	e7ee      	b.n	8016abc <__sfp+0x60>
 8016ade:	bf00      	nop
 8016ae0:	08017164 	.word	0x08017164
 8016ae4:	ffff0001 	.word	0xffff0001

08016ae8 <_fwalk_reent>:
 8016ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aec:	4606      	mov	r6, r0
 8016aee:	4688      	mov	r8, r1
 8016af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016af4:	2700      	movs	r7, #0
 8016af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016afa:	f1b9 0901 	subs.w	r9, r9, #1
 8016afe:	d505      	bpl.n	8016b0c <_fwalk_reent+0x24>
 8016b00:	6824      	ldr	r4, [r4, #0]
 8016b02:	2c00      	cmp	r4, #0
 8016b04:	d1f7      	bne.n	8016af6 <_fwalk_reent+0xe>
 8016b06:	4638      	mov	r0, r7
 8016b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b0c:	89ab      	ldrh	r3, [r5, #12]
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d907      	bls.n	8016b22 <_fwalk_reent+0x3a>
 8016b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b16:	3301      	adds	r3, #1
 8016b18:	d003      	beq.n	8016b22 <_fwalk_reent+0x3a>
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	47c0      	blx	r8
 8016b20:	4307      	orrs	r7, r0
 8016b22:	3568      	adds	r5, #104	; 0x68
 8016b24:	e7e9      	b.n	8016afa <_fwalk_reent+0x12>

08016b26 <__retarget_lock_init_recursive>:
 8016b26:	4770      	bx	lr

08016b28 <__retarget_lock_acquire_recursive>:
 8016b28:	4770      	bx	lr

08016b2a <__retarget_lock_release_recursive>:
 8016b2a:	4770      	bx	lr

08016b2c <__swhatbuf_r>:
 8016b2c:	b570      	push	{r4, r5, r6, lr}
 8016b2e:	460e      	mov	r6, r1
 8016b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b34:	2900      	cmp	r1, #0
 8016b36:	b096      	sub	sp, #88	; 0x58
 8016b38:	4614      	mov	r4, r2
 8016b3a:	461d      	mov	r5, r3
 8016b3c:	da08      	bge.n	8016b50 <__swhatbuf_r+0x24>
 8016b3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016b42:	2200      	movs	r2, #0
 8016b44:	602a      	str	r2, [r5, #0]
 8016b46:	061a      	lsls	r2, r3, #24
 8016b48:	d410      	bmi.n	8016b6c <__swhatbuf_r+0x40>
 8016b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b4e:	e00e      	b.n	8016b6e <__swhatbuf_r+0x42>
 8016b50:	466a      	mov	r2, sp
 8016b52:	f000 f8c3 	bl	8016cdc <_fstat_r>
 8016b56:	2800      	cmp	r0, #0
 8016b58:	dbf1      	blt.n	8016b3e <__swhatbuf_r+0x12>
 8016b5a:	9a01      	ldr	r2, [sp, #4]
 8016b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b64:	425a      	negs	r2, r3
 8016b66:	415a      	adcs	r2, r3
 8016b68:	602a      	str	r2, [r5, #0]
 8016b6a:	e7ee      	b.n	8016b4a <__swhatbuf_r+0x1e>
 8016b6c:	2340      	movs	r3, #64	; 0x40
 8016b6e:	2000      	movs	r0, #0
 8016b70:	6023      	str	r3, [r4, #0]
 8016b72:	b016      	add	sp, #88	; 0x58
 8016b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b78 <__smakebuf_r>:
 8016b78:	898b      	ldrh	r3, [r1, #12]
 8016b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b7c:	079d      	lsls	r5, r3, #30
 8016b7e:	4606      	mov	r6, r0
 8016b80:	460c      	mov	r4, r1
 8016b82:	d507      	bpl.n	8016b94 <__smakebuf_r+0x1c>
 8016b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b88:	6023      	str	r3, [r4, #0]
 8016b8a:	6123      	str	r3, [r4, #16]
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	6163      	str	r3, [r4, #20]
 8016b90:	b002      	add	sp, #8
 8016b92:	bd70      	pop	{r4, r5, r6, pc}
 8016b94:	ab01      	add	r3, sp, #4
 8016b96:	466a      	mov	r2, sp
 8016b98:	f7ff ffc8 	bl	8016b2c <__swhatbuf_r>
 8016b9c:	9900      	ldr	r1, [sp, #0]
 8016b9e:	4605      	mov	r5, r0
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	f7ff fc4f 	bl	8016444 <_malloc_r>
 8016ba6:	b948      	cbnz	r0, 8016bbc <__smakebuf_r+0x44>
 8016ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bac:	059a      	lsls	r2, r3, #22
 8016bae:	d4ef      	bmi.n	8016b90 <__smakebuf_r+0x18>
 8016bb0:	f023 0303 	bic.w	r3, r3, #3
 8016bb4:	f043 0302 	orr.w	r3, r3, #2
 8016bb8:	81a3      	strh	r3, [r4, #12]
 8016bba:	e7e3      	b.n	8016b84 <__smakebuf_r+0xc>
 8016bbc:	4b0d      	ldr	r3, [pc, #52]	; (8016bf4 <__smakebuf_r+0x7c>)
 8016bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8016bc0:	89a3      	ldrh	r3, [r4, #12]
 8016bc2:	6020      	str	r0, [r4, #0]
 8016bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bc8:	81a3      	strh	r3, [r4, #12]
 8016bca:	9b00      	ldr	r3, [sp, #0]
 8016bcc:	6163      	str	r3, [r4, #20]
 8016bce:	9b01      	ldr	r3, [sp, #4]
 8016bd0:	6120      	str	r0, [r4, #16]
 8016bd2:	b15b      	cbz	r3, 8016bec <__smakebuf_r+0x74>
 8016bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bd8:	4630      	mov	r0, r6
 8016bda:	f000 f891 	bl	8016d00 <_isatty_r>
 8016bde:	b128      	cbz	r0, 8016bec <__smakebuf_r+0x74>
 8016be0:	89a3      	ldrh	r3, [r4, #12]
 8016be2:	f023 0303 	bic.w	r3, r3, #3
 8016be6:	f043 0301 	orr.w	r3, r3, #1
 8016bea:	81a3      	strh	r3, [r4, #12]
 8016bec:	89a0      	ldrh	r0, [r4, #12]
 8016bee:	4305      	orrs	r5, r0
 8016bf0:	81a5      	strh	r5, [r4, #12]
 8016bf2:	e7cd      	b.n	8016b90 <__smakebuf_r+0x18>
 8016bf4:	08016985 	.word	0x08016985

08016bf8 <__malloc_lock>:
 8016bf8:	4801      	ldr	r0, [pc, #4]	; (8016c00 <__malloc_lock+0x8>)
 8016bfa:	f7ff bf95 	b.w	8016b28 <__retarget_lock_acquire_recursive>
 8016bfe:	bf00      	nop
 8016c00:	24005a04 	.word	0x24005a04

08016c04 <__malloc_unlock>:
 8016c04:	4801      	ldr	r0, [pc, #4]	; (8016c0c <__malloc_unlock+0x8>)
 8016c06:	f7ff bf90 	b.w	8016b2a <__retarget_lock_release_recursive>
 8016c0a:	bf00      	nop
 8016c0c:	24005a04 	.word	0x24005a04

08016c10 <__sread>:
 8016c10:	b510      	push	{r4, lr}
 8016c12:	460c      	mov	r4, r1
 8016c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c18:	f000 f894 	bl	8016d44 <_read_r>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	bfab      	itete	ge
 8016c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c22:	89a3      	ldrhlt	r3, [r4, #12]
 8016c24:	181b      	addge	r3, r3, r0
 8016c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c2a:	bfac      	ite	ge
 8016c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c2e:	81a3      	strhlt	r3, [r4, #12]
 8016c30:	bd10      	pop	{r4, pc}

08016c32 <__swrite>:
 8016c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c36:	461f      	mov	r7, r3
 8016c38:	898b      	ldrh	r3, [r1, #12]
 8016c3a:	05db      	lsls	r3, r3, #23
 8016c3c:	4605      	mov	r5, r0
 8016c3e:	460c      	mov	r4, r1
 8016c40:	4616      	mov	r6, r2
 8016c42:	d505      	bpl.n	8016c50 <__swrite+0x1e>
 8016c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c48:	2302      	movs	r3, #2
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	f000 f868 	bl	8016d20 <_lseek_r>
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c5a:	81a3      	strh	r3, [r4, #12]
 8016c5c:	4632      	mov	r2, r6
 8016c5e:	463b      	mov	r3, r7
 8016c60:	4628      	mov	r0, r5
 8016c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c66:	f000 b817 	b.w	8016c98 <_write_r>

08016c6a <__sseek>:
 8016c6a:	b510      	push	{r4, lr}
 8016c6c:	460c      	mov	r4, r1
 8016c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c72:	f000 f855 	bl	8016d20 <_lseek_r>
 8016c76:	1c43      	adds	r3, r0, #1
 8016c78:	89a3      	ldrh	r3, [r4, #12]
 8016c7a:	bf15      	itete	ne
 8016c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c86:	81a3      	strheq	r3, [r4, #12]
 8016c88:	bf18      	it	ne
 8016c8a:	81a3      	strhne	r3, [r4, #12]
 8016c8c:	bd10      	pop	{r4, pc}

08016c8e <__sclose>:
 8016c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c92:	f000 b813 	b.w	8016cbc <_close_r>
	...

08016c98 <_write_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d07      	ldr	r5, [pc, #28]	; (8016cb8 <_write_r+0x20>)
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	4608      	mov	r0, r1
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	602a      	str	r2, [r5, #0]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f7ec fe7f 	bl	80039aa <_write>
 8016cac:	1c43      	adds	r3, r0, #1
 8016cae:	d102      	bne.n	8016cb6 <_write_r+0x1e>
 8016cb0:	682b      	ldr	r3, [r5, #0]
 8016cb2:	b103      	cbz	r3, 8016cb6 <_write_r+0x1e>
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	24005a08 	.word	0x24005a08

08016cbc <_close_r>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4d06      	ldr	r5, [pc, #24]	; (8016cd8 <_close_r+0x1c>)
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	602b      	str	r3, [r5, #0]
 8016cc8:	f7ec fe8b 	bl	80039e2 <_close>
 8016ccc:	1c43      	adds	r3, r0, #1
 8016cce:	d102      	bne.n	8016cd6 <_close_r+0x1a>
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	b103      	cbz	r3, 8016cd6 <_close_r+0x1a>
 8016cd4:	6023      	str	r3, [r4, #0]
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	24005a08 	.word	0x24005a08

08016cdc <_fstat_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4d07      	ldr	r5, [pc, #28]	; (8016cfc <_fstat_r+0x20>)
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	4608      	mov	r0, r1
 8016ce6:	4611      	mov	r1, r2
 8016ce8:	602b      	str	r3, [r5, #0]
 8016cea:	f7ec fe86 	bl	80039fa <_fstat>
 8016cee:	1c43      	adds	r3, r0, #1
 8016cf0:	d102      	bne.n	8016cf8 <_fstat_r+0x1c>
 8016cf2:	682b      	ldr	r3, [r5, #0]
 8016cf4:	b103      	cbz	r3, 8016cf8 <_fstat_r+0x1c>
 8016cf6:	6023      	str	r3, [r4, #0]
 8016cf8:	bd38      	pop	{r3, r4, r5, pc}
 8016cfa:	bf00      	nop
 8016cfc:	24005a08 	.word	0x24005a08

08016d00 <_isatty_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	4d06      	ldr	r5, [pc, #24]	; (8016d1c <_isatty_r+0x1c>)
 8016d04:	2300      	movs	r3, #0
 8016d06:	4604      	mov	r4, r0
 8016d08:	4608      	mov	r0, r1
 8016d0a:	602b      	str	r3, [r5, #0]
 8016d0c:	f7ec fe85 	bl	8003a1a <_isatty>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	d102      	bne.n	8016d1a <_isatty_r+0x1a>
 8016d14:	682b      	ldr	r3, [r5, #0]
 8016d16:	b103      	cbz	r3, 8016d1a <_isatty_r+0x1a>
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	bd38      	pop	{r3, r4, r5, pc}
 8016d1c:	24005a08 	.word	0x24005a08

08016d20 <_lseek_r>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	4d07      	ldr	r5, [pc, #28]	; (8016d40 <_lseek_r+0x20>)
 8016d24:	4604      	mov	r4, r0
 8016d26:	4608      	mov	r0, r1
 8016d28:	4611      	mov	r1, r2
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	602a      	str	r2, [r5, #0]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	f7ec fe7e 	bl	8003a30 <_lseek>
 8016d34:	1c43      	adds	r3, r0, #1
 8016d36:	d102      	bne.n	8016d3e <_lseek_r+0x1e>
 8016d38:	682b      	ldr	r3, [r5, #0]
 8016d3a:	b103      	cbz	r3, 8016d3e <_lseek_r+0x1e>
 8016d3c:	6023      	str	r3, [r4, #0]
 8016d3e:	bd38      	pop	{r3, r4, r5, pc}
 8016d40:	24005a08 	.word	0x24005a08

08016d44 <_read_r>:
 8016d44:	b538      	push	{r3, r4, r5, lr}
 8016d46:	4d07      	ldr	r5, [pc, #28]	; (8016d64 <_read_r+0x20>)
 8016d48:	4604      	mov	r4, r0
 8016d4a:	4608      	mov	r0, r1
 8016d4c:	4611      	mov	r1, r2
 8016d4e:	2200      	movs	r2, #0
 8016d50:	602a      	str	r2, [r5, #0]
 8016d52:	461a      	mov	r2, r3
 8016d54:	f7ec fe0c 	bl	8003970 <_read>
 8016d58:	1c43      	adds	r3, r0, #1
 8016d5a:	d102      	bne.n	8016d62 <_read_r+0x1e>
 8016d5c:	682b      	ldr	r3, [r5, #0]
 8016d5e:	b103      	cbz	r3, 8016d62 <_read_r+0x1e>
 8016d60:	6023      	str	r3, [r4, #0]
 8016d62:	bd38      	pop	{r3, r4, r5, pc}
 8016d64:	24005a08 	.word	0x24005a08

08016d68 <_init>:
 8016d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d6a:	bf00      	nop
 8016d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d6e:	bc08      	pop	{r3}
 8016d70:	469e      	mov	lr, r3
 8016d72:	4770      	bx	lr

08016d74 <_fini>:
 8016d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d76:	bf00      	nop
 8016d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d7a:	bc08      	pop	{r3}
 8016d7c:	469e      	mov	lr, r3
 8016d7e:	4770      	bx	lr
