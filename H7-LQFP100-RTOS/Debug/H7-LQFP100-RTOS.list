
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017370  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08017610  08017610  00027610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017aa8  08017aa8  00027aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ab0  08017ab0  00027ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017ab4  08017ab4  00027ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08017ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005928  24000120  08017bbc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a48  08017bbc  00035a48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033bb4  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f4  00000000  00000000  00063ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  000693e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004010c  00000000  00000000  0006e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000324c1  00000000  00000000  000ae1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b6a  00000000  00000000  000e0685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002751ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0cc  00000000  00000000  00275240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080175f8 	.word	0x080175f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080175f8 	.word	0x080175f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c00 	.word	0x24000c00

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fefc 	bl	8013414 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e02d      	b.n	800067a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fef1 	bl	8013414 <osEventFlagsSet>
}
 8000632:	e022      	b.n	800067a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d11b      	bne.n	8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2108      	movs	r1, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fee6 	bl	8013414 <osEventFlagsSet>
		if (HK_10_second_counter == 100) {
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b64      	cmp	r3, #100	; 0x64
 8000650:	d108      	bne.n	8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2104      	movs	r1, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fedb 	bl	8013414 <osEventFlagsSet>
			HK_10_second_counter = 0;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		HK_10_second_counter++;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	3301      	adds	r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	e002      	b.n	800067a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		printf("Unknown Timer Interrupt\n");
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8000676:	f016 fc0f 	bl	8016e98 <puts>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000508 	.word	0x24000508
 8000688:	24000c20 	.word	0x24000c20
 800068c:	24000554 	.word	0x24000554
 8000690:	240005a0 	.word	0x240005a0
 8000694:	24000bfe 	.word	0x24000bfe
 8000698:	08017698 	.word	0x08017698

0800069c <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	49f2      	ldr	r1, [pc, #968]	; (8000a70 <HAL_UART_RxCpltCallback+0x3d4>)
 80006a8:	48f2      	ldr	r0, [pc, #968]	; (8000a74 <HAL_UART_RxCpltCallback+0x3d8>)
 80006aa:	f00f ff29 	bl	8010500 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80006ae:	4bf0      	ldr	r3, [pc, #960]	; (8000a70 <HAL_UART_RxCpltCallback+0x3d4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2be0      	cmp	r3, #224	; 0xe0
 80006b8:	f200 8453 	bhi.w	8000f62 <HAL_UART_RxCpltCallback+0x8c6>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <HAL_UART_RxCpltCallback+0x28>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	08000a5d 	.word	0x08000a5d
 80006c8:	08000a9f 	.word	0x08000a9f
 80006cc:	08000b61 	.word	0x08000b61
 80006d0:	08000b97 	.word	0x08000b97
 80006d4:	08000bcb 	.word	0x08000bcb
 80006d8:	08000c01 	.word	0x08000c01
 80006dc:	08000c39 	.word	0x08000c39
 80006e0:	08000c71 	.word	0x08000c71
 80006e4:	08000ca7 	.word	0x08000ca7
 80006e8:	08000cd9 	.word	0x08000cd9
 80006ec:	08000d11 	.word	0x08000d11
 80006f0:	08000d4f 	.word	0x08000d4f
 80006f4:	08000e39 	.word	0x08000e39
 80006f8:	08000e83 	.word	0x08000e83
 80006fc:	08000ee5 	.word	0x08000ee5
 8000700:	08000f0d 	.word	0x08000f0d
 8000704:	08000a49 	.word	0x08000a49
 8000708:	08000a85 	.word	0x08000a85
 800070c:	08000b45 	.word	0x08000b45
 8000710:	08000b7d 	.word	0x08000b7d
 8000714:	08000bb1 	.word	0x08000bb1
 8000718:	08000be5 	.word	0x08000be5
 800071c:	08000c1d 	.word	0x08000c1d
 8000720:	08000c55 	.word	0x08000c55
 8000724:	08000c8d 	.word	0x08000c8d
 8000728:	08000cc1 	.word	0x08000cc1
 800072c:	08000ce9 	.word	0x08000ce9
 8000730:	08000d27 	.word	0x08000d27
 8000734:	08000d65 	.word	0x08000d65
 8000738:	08000e47 	.word	0x08000e47
 800073c:	08000ebd 	.word	0x08000ebd
 8000740:	08000f63 	.word	0x08000f63
 8000744:	08000f63 	.word	0x08000f63
 8000748:	08000f63 	.word	0x08000f63
 800074c:	08000f63 	.word	0x08000f63
 8000750:	08000f63 	.word	0x08000f63
 8000754:	08000f63 	.word	0x08000f63
 8000758:	08000f63 	.word	0x08000f63
 800075c:	08000f63 	.word	0x08000f63
 8000760:	08000f63 	.word	0x08000f63
 8000764:	08000f63 	.word	0x08000f63
 8000768:	08000f63 	.word	0x08000f63
 800076c:	08000f63 	.word	0x08000f63
 8000770:	08000f63 	.word	0x08000f63
 8000774:	08000f63 	.word	0x08000f63
 8000778:	08000f63 	.word	0x08000f63
 800077c:	08000f63 	.word	0x08000f63
 8000780:	08000f63 	.word	0x08000f63
 8000784:	08000f63 	.word	0x08000f63
 8000788:	08000f63 	.word	0x08000f63
 800078c:	08000f63 	.word	0x08000f63
 8000790:	08000f63 	.word	0x08000f63
 8000794:	08000f63 	.word	0x08000f63
 8000798:	08000f63 	.word	0x08000f63
 800079c:	08000f63 	.word	0x08000f63
 80007a0:	08000f63 	.word	0x08000f63
 80007a4:	08000f63 	.word	0x08000f63
 80007a8:	08000f63 	.word	0x08000f63
 80007ac:	08000f63 	.word	0x08000f63
 80007b0:	08000f63 	.word	0x08000f63
 80007b4:	08000f63 	.word	0x08000f63
 80007b8:	08000f63 	.word	0x08000f63
 80007bc:	08000f63 	.word	0x08000f63
 80007c0:	08000f63 	.word	0x08000f63
 80007c4:	08000f63 	.word	0x08000f63
 80007c8:	08000f63 	.word	0x08000f63
 80007cc:	08000f63 	.word	0x08000f63
 80007d0:	08000f63 	.word	0x08000f63
 80007d4:	08000f63 	.word	0x08000f63
 80007d8:	08000f63 	.word	0x08000f63
 80007dc:	08000f63 	.word	0x08000f63
 80007e0:	08000f63 	.word	0x08000f63
 80007e4:	08000f63 	.word	0x08000f63
 80007e8:	08000f63 	.word	0x08000f63
 80007ec:	08000f63 	.word	0x08000f63
 80007f0:	08000f63 	.word	0x08000f63
 80007f4:	08000f63 	.word	0x08000f63
 80007f8:	08000f63 	.word	0x08000f63
 80007fc:	08000f63 	.word	0x08000f63
 8000800:	08000f63 	.word	0x08000f63
 8000804:	08000f63 	.word	0x08000f63
 8000808:	08000f63 	.word	0x08000f63
 800080c:	08000f63 	.word	0x08000f63
 8000810:	08000f63 	.word	0x08000f63
 8000814:	08000f63 	.word	0x08000f63
 8000818:	08000f63 	.word	0x08000f63
 800081c:	08000f63 	.word	0x08000f63
 8000820:	08000f63 	.word	0x08000f63
 8000824:	08000f63 	.word	0x08000f63
 8000828:	08000f63 	.word	0x08000f63
 800082c:	08000f63 	.word	0x08000f63
 8000830:	08000f63 	.word	0x08000f63
 8000834:	08000f63 	.word	0x08000f63
 8000838:	08000f63 	.word	0x08000f63
 800083c:	08000f63 	.word	0x08000f63
 8000840:	08000f63 	.word	0x08000f63
 8000844:	08000f63 	.word	0x08000f63
 8000848:	08000f63 	.word	0x08000f63
 800084c:	08000f63 	.word	0x08000f63
 8000850:	08000f63 	.word	0x08000f63
 8000854:	08000f63 	.word	0x08000f63
 8000858:	08000f63 	.word	0x08000f63
 800085c:	08000f63 	.word	0x08000f63
 8000860:	08000f63 	.word	0x08000f63
 8000864:	08000f63 	.word	0x08000f63
 8000868:	08000f63 	.word	0x08000f63
 800086c:	08000f63 	.word	0x08000f63
 8000870:	08000f63 	.word	0x08000f63
 8000874:	08000f63 	.word	0x08000f63
 8000878:	08000f63 	.word	0x08000f63
 800087c:	08000f63 	.word	0x08000f63
 8000880:	08000f63 	.word	0x08000f63
 8000884:	08000f63 	.word	0x08000f63
 8000888:	08000f63 	.word	0x08000f63
 800088c:	08000f63 	.word	0x08000f63
 8000890:	08000f63 	.word	0x08000f63
 8000894:	08000f63 	.word	0x08000f63
 8000898:	08000f63 	.word	0x08000f63
 800089c:	08000f63 	.word	0x08000f63
 80008a0:	08000f63 	.word	0x08000f63
 80008a4:	08000f63 	.word	0x08000f63
 80008a8:	08000f63 	.word	0x08000f63
 80008ac:	08000f63 	.word	0x08000f63
 80008b0:	08000f63 	.word	0x08000f63
 80008b4:	08000f63 	.word	0x08000f63
 80008b8:	08000f63 	.word	0x08000f63
 80008bc:	08000f63 	.word	0x08000f63
 80008c0:	08000f63 	.word	0x08000f63
 80008c4:	08000f63 	.word	0x08000f63
 80008c8:	08000f63 	.word	0x08000f63
 80008cc:	08000f63 	.word	0x08000f63
 80008d0:	08000f63 	.word	0x08000f63
 80008d4:	08000f63 	.word	0x08000f63
 80008d8:	08000f63 	.word	0x08000f63
 80008dc:	08000f63 	.word	0x08000f63
 80008e0:	08000f63 	.word	0x08000f63
 80008e4:	08000f63 	.word	0x08000f63
 80008e8:	08000f63 	.word	0x08000f63
 80008ec:	08000f63 	.word	0x08000f63
 80008f0:	08000f63 	.word	0x08000f63
 80008f4:	08000f63 	.word	0x08000f63
 80008f8:	08000f63 	.word	0x08000f63
 80008fc:	08000f63 	.word	0x08000f63
 8000900:	08000f63 	.word	0x08000f63
 8000904:	08000f63 	.word	0x08000f63
 8000908:	08000f63 	.word	0x08000f63
 800090c:	08000f63 	.word	0x08000f63
 8000910:	08000f63 	.word	0x08000f63
 8000914:	08000f63 	.word	0x08000f63
 8000918:	08000f63 	.word	0x08000f63
 800091c:	08000f63 	.word	0x08000f63
 8000920:	08000f63 	.word	0x08000f63
 8000924:	08000f63 	.word	0x08000f63
 8000928:	08000f63 	.word	0x08000f63
 800092c:	08000f63 	.word	0x08000f63
 8000930:	08000f63 	.word	0x08000f63
 8000934:	08000f63 	.word	0x08000f63
 8000938:	08000f63 	.word	0x08000f63
 800093c:	08000f63 	.word	0x08000f63
 8000940:	08000f63 	.word	0x08000f63
 8000944:	08000f63 	.word	0x08000f63
 8000948:	08000f63 	.word	0x08000f63
 800094c:	08000f63 	.word	0x08000f63
 8000950:	08000f63 	.word	0x08000f63
 8000954:	08000f63 	.word	0x08000f63
 8000958:	08000f63 	.word	0x08000f63
 800095c:	08000f63 	.word	0x08000f63
 8000960:	08000f63 	.word	0x08000f63
 8000964:	08000f63 	.word	0x08000f63
 8000968:	08000f63 	.word	0x08000f63
 800096c:	08000f63 	.word	0x08000f63
 8000970:	08000f63 	.word	0x08000f63
 8000974:	08000f63 	.word	0x08000f63
 8000978:	08000f63 	.word	0x08000f63
 800097c:	08000f63 	.word	0x08000f63
 8000980:	08000f45 	.word	0x08000f45
 8000984:	08000f63 	.word	0x08000f63
 8000988:	08000f63 	.word	0x08000f63
 800098c:	08000f63 	.word	0x08000f63
 8000990:	08000f63 	.word	0x08000f63
 8000994:	08000f63 	.word	0x08000f63
 8000998:	08000f63 	.word	0x08000f63
 800099c:	08000f63 	.word	0x08000f63
 80009a0:	08000f63 	.word	0x08000f63
 80009a4:	08000f63 	.word	0x08000f63
 80009a8:	08000f63 	.word	0x08000f63
 80009ac:	08000f63 	.word	0x08000f63
 80009b0:	08000f63 	.word	0x08000f63
 80009b4:	08000f63 	.word	0x08000f63
 80009b8:	08000f63 	.word	0x08000f63
 80009bc:	08000f63 	.word	0x08000f63
 80009c0:	08000f4b 	.word	0x08000f4b
 80009c4:	08000f63 	.word	0x08000f63
 80009c8:	08000f63 	.word	0x08000f63
 80009cc:	08000f63 	.word	0x08000f63
 80009d0:	08000f63 	.word	0x08000f63
 80009d4:	08000f63 	.word	0x08000f63
 80009d8:	08000f63 	.word	0x08000f63
 80009dc:	08000f63 	.word	0x08000f63
 80009e0:	08000f63 	.word	0x08000f63
 80009e4:	08000f63 	.word	0x08000f63
 80009e8:	08000f63 	.word	0x08000f63
 80009ec:	08000f63 	.word	0x08000f63
 80009f0:	08000f63 	.word	0x08000f63
 80009f4:	08000f63 	.word	0x08000f63
 80009f8:	08000f63 	.word	0x08000f63
 80009fc:	08000f63 	.word	0x08000f63
 8000a00:	08000f57 	.word	0x08000f57
 8000a04:	08000f33 	.word	0x08000f33
 8000a08:	08000f63 	.word	0x08000f63
 8000a0c:	08000f63 	.word	0x08000f63
 8000a10:	08000f63 	.word	0x08000f63
 8000a14:	08000f63 	.word	0x08000f63
 8000a18:	08000f63 	.word	0x08000f63
 8000a1c:	08000f63 	.word	0x08000f63
 8000a20:	08000f63 	.word	0x08000f63
 8000a24:	08000f63 	.word	0x08000f63
 8000a28:	08000f63 	.word	0x08000f63
 8000a2c:	08000f63 	.word	0x08000f63
 8000a30:	08000f63 	.word	0x08000f63
 8000a34:	08000f63 	.word	0x08000f63
 8000a38:	08000f63 	.word	0x08000f63
 8000a3c:	08000f63 	.word	0x08000f63
 8000a40:	08000f63 	.word	0x08000f63
 8000a44:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a4a:	f016 fa25 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2201      	movs	r2, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fc6f 	bl	8009338 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e28d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a5e:	f016 fa1b 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a64:	2104      	movs	r1, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f008 fc65 	bl	8009338 <HAL_GPIO_WritePin>
		break;
 8000a6e:	e283      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
 8000a70:	24000c24 	.word	0x24000c24
 8000a74:	240005ec 	.word	0x240005ec
 8000a78:	080176b0 	.word	0x080176b0
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	080176b8 	.word	0x080176b8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a84:	48bf      	ldr	r0, [pc, #764]	; (8000d84 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a86:	f016 fa07 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a8a:	4bbf      	ldr	r3, [pc, #764]	; (8000d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fc51 	bl	8009338 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a96:	4bbd      	ldr	r3, [pc, #756]	; (8000d8c <HAL_UART_RxCpltCallback+0x6f0>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
		break;
 8000a9c:	e26c      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a9e:	48bc      	ldr	r0, [pc, #752]	; (8000d90 <HAL_UART_RxCpltCallback+0x6f4>)
 8000aa0:	f016 f9fa 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000aa4:	4bb8      	ldr	r3, [pc, #736]	; (8000d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fc44 	bl	8009338 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ab0:	4bb5      	ldr	r3, [pc, #724]	; (8000d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 fc3e 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000abc:	4bb5      	ldr	r3, [pc, #724]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 fc37 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000aca:	4bb2      	ldr	r3, [pc, #712]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fc30 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ad8:	4bae      	ldr	r3, [pc, #696]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 fc29 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ae6:	4bab      	ldr	r3, [pc, #684]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fc23 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000af2:	4ba8      	ldr	r3, [pc, #672]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	2200      	movs	r2, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f008 fc1d 	bl	8009338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000afe:	4ba5      	ldr	r3, [pc, #660]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	2200      	movs	r2, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f008 fc16 	bl	8009338 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000b0c:	4b9f      	ldr	r3, [pc, #636]	; (8000d8c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b18:	4ba0      	ldr	r3, [pc, #640]	; (8000d9c <HAL_UART_RxCpltCallback+0x700>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b1e:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x704>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b24:	4b9f      	ldr	r3, [pc, #636]	; (8000da4 <HAL_UART_RxCpltCallback+0x708>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b2a:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x70c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b30:	4b9e      	ldr	r3, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x710>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b36:	4b9e      	ldr	r3, [pc, #632]	; (8000db0 <HAL_UART_RxCpltCallback+0x714>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b3c:	4b9d      	ldr	r3, [pc, #628]	; (8000db4 <HAL_UART_RxCpltCallback+0x718>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]

		break;
 8000b42:	e219      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b44:	489c      	ldr	r0, [pc, #624]	; (8000db8 <HAL_UART_RxCpltCallback+0x71c>)
 8000b46:	f016 f9a7 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b4a:	4b92      	ldr	r3, [pc, #584]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b50:	2201      	movs	r2, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f008 fbf0 	bl	8009338 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b58:	4b8f      	ldr	r3, [pc, #572]	; (8000d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		break;
 8000b5e:	e20b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b60:	4896      	ldr	r0, [pc, #600]	; (8000dbc <HAL_UART_RxCpltCallback+0x720>)
 8000b62:	f016 f999 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b66:	4b8b      	ldr	r3, [pc, #556]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 fbe2 	bl	8009338 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b74:	4b88      	ldr	r3, [pc, #544]	; (8000d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
		break;
 8000b7a:	e1fd      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b7c:	4890      	ldr	r0, [pc, #576]	; (8000dc0 <HAL_UART_RxCpltCallback+0x724>)
 8000b7e:	f016 f98b 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b82:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	2201      	movs	r2, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 fbd5 	bl	8009338 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b8e:	4b83      	ldr	r3, [pc, #524]	; (8000d9c <HAL_UART_RxCpltCallback+0x700>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
		break;
 8000b94:	e1f0      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b96:	488b      	ldr	r0, [pc, #556]	; (8000dc4 <HAL_UART_RxCpltCallback+0x728>)
 8000b98:	f016 f97e 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b9c:	4b7d      	ldr	r3, [pc, #500]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 fbc8 	bl	8009338 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000ba8:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <HAL_UART_RxCpltCallback+0x700>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		break;
 8000bae:	e1e3      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000bb0:	4885      	ldr	r0, [pc, #532]	; (8000dc8 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb2:	f016 f971 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bb6:	4b77      	ldr	r3, [pc, #476]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 fbbb 	bl	8009338 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bc2:	4b77      	ldr	r3, [pc, #476]	; (8000da0 <HAL_UART_RxCpltCallback+0x704>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
		break;
 8000bc8:	e1d6      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bca:	4880      	ldr	r0, [pc, #512]	; (8000dcc <HAL_UART_RxCpltCallback+0x730>)
 8000bcc:	f016 f964 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bd0:	4b70      	ldr	r3, [pc, #448]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 fbae 	bl	8009338 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bdc:	4b70      	ldr	r3, [pc, #448]	; (8000da0 <HAL_UART_RxCpltCallback+0x704>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		break;
 8000be2:	e1c9      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000be4:	487a      	ldr	r0, [pc, #488]	; (8000dd0 <HAL_UART_RxCpltCallback+0x734>)
 8000be6:	f016 f957 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bea:	4b6a      	ldr	r3, [pc, #424]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f008 fba0 	bl	8009338 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000bf8:	4b6a      	ldr	r3, [pc, #424]	; (8000da4 <HAL_UART_RxCpltCallback+0x708>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		break;
 8000bfe:	e1bb      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000c00:	4874      	ldr	r0, [pc, #464]	; (8000dd4 <HAL_UART_RxCpltCallback+0x738>)
 8000c02:	f016 f949 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000c06:	4b63      	ldr	r3, [pc, #396]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fb92 	bl	8009338 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c14:	4b63      	ldr	r3, [pc, #396]	; (8000da4 <HAL_UART_RxCpltCallback+0x708>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
		break;
 8000c1a:	e1ad      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c1c:	486e      	ldr	r0, [pc, #440]	; (8000dd8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c1e:	f016 f93b 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fb84 	bl	8009338 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c30:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <HAL_UART_RxCpltCallback+0x70c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
		break;
 8000c36:	e19f      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c38:	4868      	ldr	r0, [pc, #416]	; (8000ddc <HAL_UART_RxCpltCallback+0x740>)
 8000c3a:	f016 f92d 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	2200      	movs	r2, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f008 fb76 	bl	8009338 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_UART_RxCpltCallback+0x70c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
		break;
 8000c52:	e191      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c54:	4862      	ldr	r0, [pc, #392]	; (8000de0 <HAL_UART_RxCpltCallback+0x744>)
 8000c56:	f016 f91f 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	2201      	movs	r2, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f008 fb68 	bl	8009338 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c68:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x714>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		break;
 8000c6e:	e183      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c70:	485c      	ldr	r0, [pc, #368]	; (8000de4 <HAL_UART_RxCpltCallback+0x748>)
 8000c72:	f016 f911 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f008 fb5a 	bl	8009338 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <HAL_UART_RxCpltCallback+0x714>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

		break;
 8000c8a:	e175      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c8c:	4856      	ldr	r0, [pc, #344]	; (8000de8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c8e:	f016 f903 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c92:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	2201      	movs	r2, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 fb4d 	bl	8009338 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c9e:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <HAL_UART_RxCpltCallback+0x718>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
		break;
 8000ca4:	e168      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000ca6:	4851      	ldr	r0, [pc, #324]	; (8000dec <HAL_UART_RxCpltCallback+0x750>)
 8000ca8:	f016 f8f6 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f008 fb40 	bl	8009338 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <HAL_UART_RxCpltCallback+0x718>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		break;
 8000cbe:	e15b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cc0:	484b      	ldr	r0, [pc, #300]	; (8000df0 <HAL_UART_RxCpltCallback+0x754>)
 8000cc2:	f016 f8e9 	bl	8016e98 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2320      	movs	r3, #32
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4849      	ldr	r0, [pc, #292]	; (8000df8 <HAL_UART_RxCpltCallback+0x75c>)
 8000cd2:	f004 ff95 	bl	8005c00 <HAL_DAC_Start_DMA>
		break;
 8000cd6:	e14f      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cd8:	4848      	ldr	r0, [pc, #288]	; (8000dfc <HAL_UART_RxCpltCallback+0x760>)
 8000cda:	f016 f8dd 	bl	8016e98 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4845      	ldr	r0, [pc, #276]	; (8000df8 <HAL_UART_RxCpltCallback+0x75c>)
 8000ce2:	f005 f84d 	bl	8005d80 <HAL_DAC_Stop_DMA>
		break;
 8000ce6:	e147      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000ce8:	4845      	ldr	r0, [pc, #276]	; (8000e00 <HAL_UART_RxCpltCallback+0x764>)
 8000cea:	f016 f8d5 	bl	8016e98 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cee:	210c      	movs	r1, #12
 8000cf0:	4844      	ldr	r0, [pc, #272]	; (8000e04 <HAL_UART_RxCpltCallback+0x768>)
 8000cf2:	f00d ff25 	bl	800eb40 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000cf6:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <HAL_UART_RxCpltCallback+0x76c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f012 fb89 	bl	8013414 <osEventFlagsSet>
		ERPA_ON = 1;
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <HAL_UART_RxCpltCallback+0x770>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000d08:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <HAL_UART_RxCpltCallback+0x774>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		break;
 8000d0e:	e133      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000d10:	4840      	ldr	r0, [pc, #256]	; (8000e14 <HAL_UART_RxCpltCallback+0x778>)
 8000d12:	f016 f8c1 	bl	8016e98 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d16:	210c      	movs	r1, #12
 8000d18:	483a      	ldr	r0, [pc, #232]	; (8000e04 <HAL_UART_RxCpltCallback+0x768>)
 8000d1a:	f00e f86b 	bl	800edf4 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <HAL_UART_RxCpltCallback+0x770>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
		break;
 8000d24:	e128      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d26:	483c      	ldr	r0, [pc, #240]	; (8000e18 <HAL_UART_RxCpltCallback+0x77c>)
 8000d28:	f016 f8b6 	bl	8016e98 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	483b      	ldr	r0, [pc, #236]	; (8000e1c <HAL_UART_RxCpltCallback+0x780>)
 8000d30:	f00d ff06 	bl	800eb40 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <HAL_UART_RxCpltCallback+0x76c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f012 fb6a 	bl	8013414 <osEventFlagsSet>
		PMT_ON = 1;
 8000d40:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <HAL_UART_RxCpltCallback+0x784>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <HAL_UART_RxCpltCallback+0x788>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]
		break;
 8000d4c:	e114      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d4e:	4836      	ldr	r0, [pc, #216]	; (8000e28 <HAL_UART_RxCpltCallback+0x78c>)
 8000d50:	f016 f8a2 	bl	8016e98 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d54:	2100      	movs	r1, #0
 8000d56:	4831      	ldr	r0, [pc, #196]	; (8000e1c <HAL_UART_RxCpltCallback+0x780>)
 8000d58:	f00e f84c 	bl	800edf4 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_UART_RxCpltCallback+0x784>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		break;
 8000d62:	e109      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <HAL_UART_RxCpltCallback+0x790>)
 8000d66:	f016 f897 	bl	8016e98 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_UART_RxCpltCallback+0x76c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f012 fb4f 	bl	8013414 <osEventFlagsSet>
		HK_ON = 1;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_UART_RxCpltCallback+0x794>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_UART_RxCpltCallback+0x798>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
		break;
 8000d82:	e0f9      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
 8000d84:	080176c4 	.word	0x080176c4
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	24000bd8 	.word	0x24000bd8
 8000d90:	080176d0 	.word	0x080176d0
 8000d94:	58020800 	.word	0x58020800
 8000d98:	24000bd9 	.word	0x24000bd9
 8000d9c:	24000bda 	.word	0x24000bda
 8000da0:	24000bdb 	.word	0x24000bdb
 8000da4:	24000bdc 	.word	0x24000bdc
 8000da8:	24000bdd 	.word	0x24000bdd
 8000dac:	24000bde 	.word	0x24000bde
 8000db0:	24000bdf 	.word	0x24000bdf
 8000db4:	24000be0 	.word	0x24000be0
 8000db8:	080176dc 	.word	0x080176dc
 8000dbc:	080176e8 	.word	0x080176e8
 8000dc0:	080176f8 	.word	0x080176f8
 8000dc4:	08017704 	.word	0x08017704
 8000dc8:	08017710 	.word	0x08017710
 8000dcc:	0801771c 	.word	0x0801771c
 8000dd0:	0801772c 	.word	0x0801772c
 8000dd4:	08017738 	.word	0x08017738
 8000dd8:	08017744 	.word	0x08017744
 8000ddc:	08017750 	.word	0x08017750
 8000de0:	0801775c 	.word	0x0801775c
 8000de4:	0801776c 	.word	0x0801776c
 8000de8:	0801777c 	.word	0x0801777c
 8000dec:	08017788 	.word	0x08017788
 8000df0:	08017798 	.word	0x08017798
 8000df4:	2400000c 	.word	0x2400000c
 8000df8:	240002f4 	.word	0x240002f4
 8000dfc:	080177a8 	.word	0x080177a8
 8000e00:	080177b8 	.word	0x080177b8
 8000e04:	24000554 	.word	0x24000554
 8000e08:	24000c20 	.word	0x24000c20
 8000e0c:	24000c1b 	.word	0x24000c1b
 8000e10:	24000c14 	.word	0x24000c14
 8000e14:	080177c0 	.word	0x080177c0
 8000e18:	080177cc 	.word	0x080177cc
 8000e1c:	24000508 	.word	0x24000508
 8000e20:	24000c1a 	.word	0x24000c1a
 8000e24:	24000c10 	.word	0x24000c10
 8000e28:	080177d4 	.word	0x080177d4
 8000e2c:	080177dc 	.word	0x080177dc
 8000e30:	24000c1c 	.word	0x24000c1c
 8000e34:	24000c18 	.word	0x24000c18
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e38:	4851      	ldr	r0, [pc, #324]	; (8000f80 <HAL_UART_RxCpltCallback+0x8e4>)
 8000e3a:	f016 f82d 	bl	8016e98 <puts>
		HK_ON = 0;
 8000e3e:	4b51      	ldr	r3, [pc, #324]	; (8000f84 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e098      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	4850      	ldr	r0, [pc, #320]	; (8000f88 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e48:	f016 f826 	bl	8016e98 <puts>
		if (step < 17) {
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 808a 	bhi.w	8000f6a <HAL_UART_RxCpltCallback+0x8ce>
			step += 2;
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_UART_RxCpltCallback+0x8f4>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4848      	ldr	r0, [pc, #288]	; (8000f94 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e74:	f005 f827 	bl	8005ec6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4846      	ldr	r0, [pc, #280]	; (8000f94 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e7c:	f004 fe68 	bl	8005b50 <HAL_DAC_Start>
		}
		break;
 8000e80:	e073      	b.n	8000f6a <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4845      	ldr	r0, [pc, #276]	; (8000f98 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e84:	f016 f808 	bl	8016e98 <puts>
		if (step > 3) {
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d96e      	bls.n	8000f6e <HAL_UART_RxCpltCallback+0x8d2>
			step -= 2;
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <HAL_UART_RxCpltCallback+0x8f0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <HAL_UART_RxCpltCallback+0x8f4>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4839      	ldr	r0, [pc, #228]	; (8000f94 <HAL_UART_RxCpltCallback+0x8f8>)
 8000eae:	f005 f80a 	bl	8005ec6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4837      	ldr	r0, [pc, #220]	; (8000f94 <HAL_UART_RxCpltCallback+0x8f8>)
 8000eb6:	f004 fe4b 	bl	8005b50 <HAL_DAC_Start>
		}
		break;
 8000eba:	e058      	b.n	8000f6e <HAL_UART_RxCpltCallback+0x8d2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4837      	ldr	r0, [pc, #220]	; (8000f9c <HAL_UART_RxCpltCallback+0x900>)
 8000ebe:	f015 ffeb 	bl	8016e98 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d851      	bhi.n	8000f72 <HAL_UART_RxCpltCallback+0x8d6>
			cadence *= 2;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e046      	b.n	8000f72 <HAL_UART_RxCpltCallback+0x8d6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <HAL_UART_RxCpltCallback+0x908>)
 8000ee6:	f015 ffd7 	bl	8016e98 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d93f      	bls.n	8000f76 <HAL_UART_RxCpltCallback+0x8da>
			cadence /= 2;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_UART_RxCpltCallback+0x904>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e034      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x8da>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <HAL_UART_RxCpltCallback+0x90c>)
 8000f0e:	f015 ffc3 	bl	8016e98 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_UART_RxCpltCallback+0x910>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 fa7b 	bl	8013414 <osEventFlagsSet>
		break;
 8000f1e:	e02b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <HAL_UART_RxCpltCallback+0x914>)
 8000f22:	f015 ffb9 	bl	8016e98 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_UART_RxCpltCallback+0x918>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f014 f818 	bl	8014f60 <xTaskResumeFromISR>
		break;
 8000f30:	e022      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <HAL_UART_RxCpltCallback+0x91c>)
 8000f34:	f015 ffb0 	bl	8016e98 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_UART_RxCpltCallback+0x920>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f014 f80f 	bl	8014f60 <xTaskResumeFromISR>
		break;
 8000f42:	e019      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 f9fa 	bl	800233c <sync>
		break;
 8000f48:	e016      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xBF: {
		xTaskResumeFromISR(Flight_taskHandle);
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_UART_RxCpltCallback+0x924>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f014 f806 	bl	8014f60 <xTaskResumeFromISR>
		break;
 8000f54:	e010      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xCF: {
		xTaskResumeFromISR(UnFlight_taskHandle);
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_UART_RxCpltCallback+0x928>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f014 f800 	bl	8014f60 <xTaskResumeFromISR>
		break;
 8000f60:	e00a      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
	}
	default: {
		printf("Unknown Command\n");
 8000f62:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <HAL_UART_RxCpltCallback+0x92c>)
 8000f64:	f015 ff98 	bl	8016e98 <puts>
		break;
 8000f68:	e006      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f6a:	bf00      	nop
 8000f6c:	e004      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f6e:	bf00      	nop
 8000f70:	e002      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f76:	bf00      	nop
	}
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	080177e4 	.word	0x080177e4
 8000f84:	24000c1c 	.word	0x24000c1c
 8000f88:	080177ec 	.word	0x080177ec
 8000f8c:	24000008 	.word	0x24000008
 8000f90:	2400000c 	.word	0x2400000c
 8000f94:	240002f4 	.word	0x240002f4
 8000f98:	080177f4 	.word	0x080177f4
 8000f9c:	08017800 	.word	0x08017800
 8000fa0:	24000004 	.word	0x24000004
 8000fa4:	0801780c 	.word	0x0801780c
 8000fa8:	08017818 	.word	0x08017818
 8000fac:	24000c20 	.word	0x24000c20
 8000fb0:	08017828 	.word	0x08017828
 8000fb4:	24000704 	.word	0x24000704
 8000fb8:	08017834 	.word	0x08017834
 8000fbc:	24000964 	.word	0x24000964
 8000fc0:	24000bd0 	.word	0x24000bd0
 8000fc4:	24000bd4 	.word	0x24000bd4
 8000fc8:	08017840 	.word	0x08017840

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f003 f82a 	bl	8004028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f8c6 	bl	8001164 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fd8:	f000 f944 	bl	8001264 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 feba 	bl	8001d54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe0:	f000 fe80 	bl	8001ce4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fe4:	f000 fdc8 	bl	8001b78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fe8:	f000 fe14 	bl	8001c14 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fec:	f000 fb50 	bl	8001690 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ff0:	f000 fc46 	bl	8001880 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ff4:	f000 fd4a 	bl	8001a8c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ff8:	f000 fc9a 	bl	8001930 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ffc:	f000 fa84 	bl	8001508 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001000:	f000 f960 	bl	80012c4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001004:	f000 fb12 	bl	800162c <MX_DAC1_Init>
  MX_SPI1_Init();
 8001008:	f000 fbe2 	bl	80017d0 <MX_SPI1_Init>
  MX_RTC_Init();
 800100c:	f000 fb82 	bl	8001714 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001010:	f012 f888 	bl	8013124 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8001014:	2200      	movs	r2, #0
 8001016:	2108      	movs	r1, #8
 8001018:	2080      	movs	r0, #128	; 0x80
 800101a:	f012 faf8 	bl	801360e <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <main+0x114>)
 8001022:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <main+0x118>)
 8001026:	2100      	movs	r1, #0
 8001028:	482f      	ldr	r0, [pc, #188]	; (80010e8 <main+0x11c>)
 800102a:	f012 f8c5 	bl	80131b8 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <main+0x120>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001034:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <main+0x124>)
 8001036:	2100      	movs	r1, #0
 8001038:	482e      	ldr	r0, [pc, #184]	; (80010f4 <main+0x128>)
 800103a:	f012 f8bd 	bl	80131b8 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <main+0x12c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <main+0x130>)
 8001046:	2100      	movs	r1, #0
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <main+0x134>)
 800104a:	f012 f8b5 	bl	80131b8 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <main+0x138>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <main+0x13c>)
 8001056:	2100      	movs	r1, #0
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <main+0x140>)
 800105a:	f012 f8ad 	bl	80131b8 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <main+0x144>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001064:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <main+0x148>)
 8001066:	2100      	movs	r1, #0
 8001068:	482b      	ldr	r0, [pc, #172]	; (8001118 <main+0x14c>)
 800106a:	f012 f8a5 	bl	80131b8 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <main+0x150>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001074:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <main+0x154>)
 8001076:	2100      	movs	r1, #0
 8001078:	482a      	ldr	r0, [pc, #168]	; (8001124 <main+0x158>)
 800107a:	f012 f89d 	bl	80131b8 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <main+0x15c>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <main+0x160>)
 8001086:	2100      	movs	r1, #0
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <main+0x164>)
 800108a:	f012 f895 	bl	80131b8 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <main+0x168>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <main+0x16c>)
 8001096:	2100      	movs	r1, #0
 8001098:	4828      	ldr	r0, [pc, #160]	; (800113c <main+0x170>)
 800109a:	f012 f88d 	bl	80131b8 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <main+0x174>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* creation of Flight_task */
  Flight_taskHandle = osThreadNew(Flight_init, NULL, &Flight_task_attributes);
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <main+0x178>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4827      	ldr	r0, [pc, #156]	; (8001148 <main+0x17c>)
 80010aa:	f012 f885 	bl	80131b8 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <main+0x180>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of UnFlight_task */
  UnFlight_taskHandle = osThreadNew(UnFlight_init, NULL, &UnFlight_task_attributes);
 80010b4:	4a26      	ldr	r2, [pc, #152]	; (8001150 <main+0x184>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4826      	ldr	r0, [pc, #152]	; (8001154 <main+0x188>)
 80010ba:	f012 f87d 	bl	80131b8 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a25      	ldr	r2, [pc, #148]	; (8001158 <main+0x18c>)
 80010c2:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f012 f965 	bl	8013394 <osEventFlagsNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <main+0x190>)
 80010ce:	6013      	str	r3, [r2, #0]
	system_setup();
 80010d0:	f001 f99e 	bl	8002410 <system_setup>
	printf("Starting kernal...\n");
 80010d4:	4822      	ldr	r0, [pc, #136]	; (8001160 <main+0x194>)
 80010d6:	f015 fedf 	bl	8016e98 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010da:	f012 f847 	bl	801316c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010de:	e7fe      	b.n	80010de <main+0x112>
 80010e0:	24000c04 	.word	0x24000c04
 80010e4:	0801789c 	.word	0x0801789c
 80010e8:	08002b81 	.word	0x08002b81
 80010ec:	240006f8 	.word	0x240006f8
 80010f0:	080178c0 	.word	0x080178c0
 80010f4:	08002bc5 	.word	0x08002bc5
 80010f8:	240006fc 	.word	0x240006fc
 80010fc:	080178e4 	.word	0x080178e4
 8001100:	08002c09 	.word	0x08002c09
 8001104:	24000700 	.word	0x24000700
 8001108:	08017908 	.word	0x08017908
 800110c:	08002c4d 	.word	0x08002c4d
 8001110:	24000704 	.word	0x24000704
 8001114:	0801792c 	.word	0x0801792c
 8001118:	08002cf5 	.word	0x08002cf5
 800111c:	24000964 	.word	0x24000964
 8001120:	08017950 	.word	0x08017950
 8001124:	08002d9d 	.word	0x08002d9d
 8001128:	24000bc4 	.word	0x24000bc4
 800112c:	08017974 	.word	0x08017974
 8001130:	08002e55 	.word	0x08002e55
 8001134:	24000bc8 	.word	0x24000bc8
 8001138:	08017998 	.word	0x08017998
 800113c:	08002f4d 	.word	0x08002f4d
 8001140:	24000bcc 	.word	0x24000bcc
 8001144:	080179bc 	.word	0x080179bc
 8001148:	08002f89 	.word	0x08002f89
 800114c:	24000bd0 	.word	0x24000bd0
 8001150:	080179e0 	.word	0x080179e0
 8001154:	080030e1 	.word	0x080030e1
 8001158:	24000bd4 	.word	0x24000bd4
 800115c:	24000c20 	.word	0x24000c20
 8001160:	08017850 	.word	0x08017850

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b09c      	sub	sp, #112	; 0x70
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	224c      	movs	r2, #76	; 0x4c
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f015 fd3a 	bl	8016bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2220      	movs	r2, #32
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f015 fd34 	bl	8016bec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001184:	2002      	movs	r0, #2
 8001186:	f008 ff39 	bl	8009ffc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <SystemClock_Config+0xf8>)
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <SystemClock_Config+0xf8>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	62d3      	str	r3, [r2, #44]	; 0x2c
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <SystemClock_Config+0xf8>)
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <SystemClock_Config+0xfc>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ac:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <SystemClock_Config+0xfc>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <SystemClock_Config+0xfc>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c0:	bf00      	nop
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <SystemClock_Config+0xfc>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ce:	d1f8      	bne.n	80011c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011d0:	2303      	movs	r3, #3
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80011da:	2309      	movs	r3, #9
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011ee:	2320      	movs	r3, #32
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011fe:	2308      	movs	r3, #8
 8001200:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001202:	2300      	movs	r3, #0
 8001204:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4618      	mov	r0, r3
 8001210:	f008 ff2e 	bl	800a070 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800121a:	f001 ffed 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	233f      	movs	r3, #63	; 0x3f
 8001220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2303      	movs	r3, #3
 8001224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f009 fb6e 	bl	800a924 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800124e:	f001 ffd3 	bl	80031f8 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3770      	adds	r7, #112	; 0x70
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	58000400 	.word	0x58000400
 8001260:	58024800 	.word	0x58024800

08001264 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0b0      	sub	sp, #192	; 0xc0
 8001268:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	22c0      	movs	r2, #192	; 0xc0
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f015 fcbb 	bl	8016bec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001282:	2304      	movs	r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001286:	2320      	movs	r3, #32
 8001288:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800128a:	2308      	movs	r3, #8
 800128c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800128e:	2304      	movs	r3, #4
 8001290:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4618      	mov	r0, r3
 80012ac:	f009 ff08 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012b6:	f001 ff9f 	bl	80031f8 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	37c0      	adds	r7, #192	; 0xc0
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012e8:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <MX_ADC1_Init+0x210>)
 80012ea:	4a7b      	ldr	r2, [pc, #492]	; (80014d8 <MX_ADC1_Init+0x214>)
 80012ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ee:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <MX_ADC1_Init+0x210>)
 80012f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <MX_ADC1_Init+0x210>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <MX_ADC1_Init+0x210>)
 80012fe:	2201      	movs	r2, #1
 8001300:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001304:	2204      	movs	r2, #4
 8001306:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001308:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <MX_ADC1_Init+0x210>)
 800130a:	2200      	movs	r2, #0
 800130c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001310:	2201      	movs	r2, #1
 8001312:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001314:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001316:	220b      	movs	r2, #11
 8001318:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <MX_ADC1_Init+0x210>)
 800131c:	2200      	movs	r2, #0
 800131e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001320:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001326:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800132c:	4b69      	ldr	r3, [pc, #420]	; (80014d4 <MX_ADC1_Init+0x210>)
 800132e:	2203      	movs	r2, #3
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001332:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <MX_ADC1_Init+0x210>)
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001340:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001348:	4862      	ldr	r0, [pc, #392]	; (80014d4 <MX_ADC1_Init+0x210>)
 800134a:	f003 f8f9 	bl	8004540 <HAL_ADC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001354:	f001 ff50 	bl	80031f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	485c      	ldr	r0, [pc, #368]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001364:	f004 fa14 	bl	8005790 <HAL_ADCEx_MultiModeConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800136e:	f001 ff43 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <MX_ADC1_Init+0x218>)
 8001374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001376:	2306      	movs	r3, #6
 8001378:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800137a:	2307      	movs	r3, #7
 800137c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800137e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001382:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001384:	2304      	movs	r3, #4
 8001386:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	484f      	ldr	r0, [pc, #316]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001396:	f003 fb57 	bl	8004a48 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013a0:	f001 ff2a 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013a4:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <MX_ADC1_Init+0x21c>)
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013a8:	230c      	movs	r3, #12
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4848      	ldr	r0, [pc, #288]	; (80014d4 <MX_ADC1_Init+0x210>)
 80013b2:	f003 fb49 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80013bc:	f001 ff1c 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <MX_ADC1_Init+0x220>)
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013c4:	2312      	movs	r3, #18
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4841      	ldr	r0, [pc, #260]	; (80014d4 <MX_ADC1_Init+0x210>)
 80013ce:	f003 fb3b 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013d8:	f001 ff0e 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_ADC1_Init+0x224>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013e0:	2318      	movs	r3, #24
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	483a      	ldr	r0, [pc, #232]	; (80014d4 <MX_ADC1_Init+0x210>)
 80013ea:	f003 fb2d 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013f4:	f001 ff00 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <MX_ADC1_Init+0x228>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4833      	ldr	r0, [pc, #204]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001408:	f003 fb1e 	bl	8004a48 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001412:	f001 fef1 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <MX_ADC1_Init+0x22c>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800141a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001426:	f003 fb0f 	bl	8004a48 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001430:	f001 fee2 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <MX_ADC1_Init+0x230>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001438:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4824      	ldr	r0, [pc, #144]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001444:	f003 fb00 	bl	8004a48 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800144e:	f001 fed3 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_ADC1_Init+0x234>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001456:	f44f 7389 	mov.w	r3, #274	; 0x112
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001462:	f003 faf1 	bl	8004a48 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800146c:	f001 fec4 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_ADC1_Init+0x238>)
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001474:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001478:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4815      	ldr	r0, [pc, #84]	; (80014d4 <MX_ADC1_Init+0x210>)
 8001480:	f003 fae2 	bl	8004a48 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800148a:	f001 feb5 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_ADC1_Init+0x23c>)
 8001490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_ADC1_Init+0x210>)
 800149e:	f003 fad3 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80014a8:	f001 fea6 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_ADC1_Init+0x240>)
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014b0:	f240 2306 	movw	r3, #518	; 0x206
 80014b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0x210>)
 80014bc:	f003 fac4 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014c6:	f001 fe97 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400013c 	.word	0x2400013c
 80014d8:	40022000 	.word	0x40022000
 80014dc:	0c900008 	.word	0x0c900008
 80014e0:	10c00010 	.word	0x10c00010
 80014e4:	14f00020 	.word	0x14f00020
 80014e8:	1d500080 	.word	0x1d500080
 80014ec:	21800100 	.word	0x21800100
 80014f0:	25b00200 	.word	0x25b00200
 80014f4:	2a000400 	.word	0x2a000400
 80014f8:	2e300800 	.word	0x2e300800
 80014fc:	3ac04000 	.word	0x3ac04000
 8001500:	3ef08000 	.word	0x3ef08000
 8001504:	47520000 	.word	0x47520000

08001508 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001520:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <MX_ADC3_Init+0x110>)
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <MX_ADC3_Init+0x114>)
 8001524:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <MX_ADC3_Init+0x110>)
 8001528:	2208      	movs	r2, #8
 800152a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800152c:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <MX_ADC3_Init+0x110>)
 800152e:	2201      	movs	r2, #1
 8001530:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <MX_ADC3_Init+0x110>)
 8001534:	2204      	movs	r2, #4
 8001536:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <MX_ADC3_Init+0x110>)
 800153a:	2200      	movs	r2, #0
 800153c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <MX_ADC3_Init+0x110>)
 8001540:	2201      	movs	r2, #1
 8001542:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <MX_ADC3_Init+0x110>)
 8001546:	2204      	movs	r2, #4
 8001548:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <MX_ADC3_Init+0x110>)
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <MX_ADC3_Init+0x110>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <MX_ADC3_Init+0x110>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800155c:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <MX_ADC3_Init+0x110>)
 800155e:	2203      	movs	r2, #3
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_ADC3_Init+0x110>)
 8001564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_ADC3_Init+0x110>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_ADC3_Init+0x110>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001578:	4827      	ldr	r0, [pc, #156]	; (8001618 <MX_ADC3_Init+0x110>)
 800157a:	f002 ffe1 	bl	8004540 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001584:	f001 fe38 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <MX_ADC3_Init+0x118>)
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158c:	2306      	movs	r3, #6
 800158e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001590:	2307      	movs	r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001594:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001598:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_ADC3_Init+0x110>)
 80015ac:	f003 fa4c 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f001 fe1f 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_ADC3_Init+0x11c>)
 80015bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015be:	230c      	movs	r3, #12
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_ADC3_Init+0x110>)
 80015c8:	f003 fa3e 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015d2:	f001 fe11 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015d6:	2301      	movs	r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015da:	2312      	movs	r3, #18
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_ADC3_Init+0x110>)
 80015e4:	f003 fa30 	bl	8004a48 <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ee:	f001 fe03 	bl	80031f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_ADC3_Init+0x120>)
 80015f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f6:	2318      	movs	r3, #24
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_ADC3_Init+0x110>)
 8001600:	f003 fa22 	bl	8004a48 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800160a:	f001 fdf5 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240001a0 	.word	0x240001a0
 800161c:	58026000 	.word	0x58026000
 8001620:	cb840000 	.word	0xcb840000
 8001624:	cfb80000 	.word	0xcfb80000
 8001628:	04300002 	.word	0x04300002

0800162c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2224      	movs	r2, #36	; 0x24
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f015 fad7 	bl	8016bec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_DAC1_Init+0x5c>)
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_DAC1_Init+0x60>)
 8001642:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <MX_DAC1_Init+0x5c>)
 8001646:	f004 fa61 	bl	8005b0c <HAL_DAC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001650:	f001 fdd2 	bl	80031f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001658:	230a      	movs	r3, #10
 800165a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_DAC1_Init+0x5c>)
 8001670:	f004 fc7c 	bl	8005f6c <HAL_DAC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800167a:	f001 fdbd 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	240002f4 	.word	0x240002f4
 800168c:	40007400 	.word	0x40007400

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_I2C1_Init+0x78>)
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <MX_I2C1_Init+0x7c>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x78>)
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <MX_I2C1_Init+0x80>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_I2C1_Init+0x78>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x78>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_I2C1_Init+0x78>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x78>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_I2C1_Init+0x78>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x78>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_I2C1_Init+0x78>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <MX_I2C1_Init+0x78>)
 80016cc:	f007 fe4e 	bl	800936c <HAL_I2C_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d6:	f001 fd8f 	bl	80031f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <MX_I2C1_Init+0x78>)
 80016de:	f008 fb95 	bl	8009e0c <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f001 fd86 	bl	80031f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_I2C1_Init+0x78>)
 80016f0:	f008 fbd7 	bl	8009ea2 <HAL_I2CEx_ConfigDigitalFilter>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f001 fd7d 	bl	80031f8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f008 fc1c 	bl	8009f3c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	24000380 	.word	0x24000380
 800170c:	40005400 	.word	0x40005400
 8001710:	0020081f 	.word	0x0020081f

08001714 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001728:	2300      	movs	r3, #0
 800172a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_RTC_Init+0xb4>)
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <MX_RTC_Init+0xb8>)
 8001730:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_RTC_Init+0xb4>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_RTC_Init+0xb4>)
 800173a:	2263      	movs	r2, #99	; 0x63
 800173c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_RTC_Init+0xb4>)
 8001740:	f242 720f 	movw	r2, #9999	; 0x270f
 8001744:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_RTC_Init+0xb4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_RTC_Init+0xb4>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_RTC_Init+0xb4>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_RTC_Init+0xb4>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <MX_RTC_Init+0xb4>)
 8001760:	f00c f9ac 	bl	800dabc <HAL_RTC_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800176a:	f001 fd45 	bl	80031f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800176e:	2300      	movs	r3, #0
 8001770:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001772:	2300      	movs	r3, #0
 8001774:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	480f      	ldr	r0, [pc, #60]	; (80017c8 <MX_RTC_Init+0xb4>)
 800178a:	f00c fa19 	bl	800dbc0 <HAL_RTC_SetTime>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001794:	f001 fd30 	bl	80031f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001798:	2301      	movs	r3, #1
 800179a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800179c:	2301      	movs	r3, #1
 800179e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	2201      	movs	r2, #1
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <MX_RTC_Init+0xb4>)
 80017b0:	f00c fb00 	bl	800ddb4 <HAL_RTC_SetDate>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80017ba:	f001 fd1d 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	240003d4 	.word	0x240003d4
 80017cc:	58004000 	.word	0x58004000

080017d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <MX_SPI1_Init+0xac>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017ec:	220f      	movs	r2, #15
 80017ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_SPI1_Init+0xa8>)
 80017fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001806:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800180a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_SPI1_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_SPI1_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_SPI1_Init+0xa8>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI1_Init+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_SPI1_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI1_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_SPI1_Init+0xa8>)
 8001864:	f00c fc4c 	bl	800e100 <HAL_SPI_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800186e:	f001 fcc3 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	240003f8 	.word	0x240003f8
 800187c:	40013000 	.word	0x40013000

08001880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_SPI2_Init+0xa8>)
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <MX_SPI2_Init+0xac>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_SPI2_Init+0xa8>)
 800188c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_SPI2_Init+0xa8>)
 8001894:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001898:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <MX_SPI2_Init+0xa8>)
 800189c:	220f      	movs	r2, #15
 800189e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018b6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80018ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_SPI2_Init+0xa8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_SPI2_Init+0xa8>)
 8001902:	2200      	movs	r2, #0
 8001904:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_SPI2_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_SPI2_Init+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_SPI2_Init+0xa8>)
 8001914:	f00c fbf4 	bl	800e100 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800191e:	f001 fc6b 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	24000480 	.word	0x24000480
 800192c:	40003800 	.word	0x40003800

08001930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b09a      	sub	sp, #104	; 0x68
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	222c      	movs	r2, #44	; 0x2c
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f015 f93e 	bl	8016bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001972:	4a45      	ldr	r2, [pc, #276]	; (8001a88 <MX_TIM1_Init+0x158>)
 8001974:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001978:	2231      	movs	r2, #49	; 0x31
 800197a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <MX_TIM1_Init+0x154>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001982:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001984:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <MX_TIM1_Init+0x154>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001990:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800199c:	4839      	ldr	r0, [pc, #228]	; (8001a84 <MX_TIM1_Init+0x154>)
 800199e:	f00d f800 	bl	800e9a2 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f001 fc26 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	4619      	mov	r1, r3
 80019b8:	4832      	ldr	r0, [pc, #200]	; (8001a84 <MX_TIM1_Init+0x154>)
 80019ba:	f00d fd7b 	bl	800f4b4 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019c4:	f001 fc18 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019c8:	482e      	ldr	r0, [pc, #184]	; (8001a84 <MX_TIM1_Init+0x154>)
 80019ca:	f00d faf7 	bl	800efbc <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019d4:	f001 fc10 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4826      	ldr	r0, [pc, #152]	; (8001a84 <MX_TIM1_Init+0x154>)
 80019ec:	f00e fab8 	bl	800ff60 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019f6:	f001 fbff 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80019fe:	f240 13df 	movw	r3, #479	; 0x1df
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001a22:	f00d fc33 	bl	800f28c <HAL_TIM_PWM_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a2c:	f001 fbe4 	bl	80031f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001a66:	f00e fb09 	bl	801007c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a70:	f001 fbc2 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM1_Init+0x154>)
 8001a76:	f001 ff4f 	bl	8003918 <HAL_TIM_MspPostInit>

}
 8001a7a:	bf00      	nop
 8001a7c:	3768      	adds	r7, #104	; 0x68
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000508 	.word	0x24000508
 8001a88:	40010000 	.word	0x40010000

08001a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ac8:	2231      	movs	r2, #49	; 0x31
 8001aca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ad4:	f640 4234 	movw	r2, #3124	; 0xc34
 8001ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ae6:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001ae8:	f00c ff5b 	bl	800e9a2 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001af2:	f001 fb81 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001b04:	f00d fcd6 	bl	800f4b4 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b0e:	f001 fb73 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001b14:	f00d fa52 	bl	800efbc <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b1e:	f001 fb6b 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b22:	2320      	movs	r3, #32
 8001b24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001b32:	f00e fa15 	bl	800ff60 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b3c:	f001 fb5c 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	220c      	movs	r2, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001b58:	f00d fb98 	bl	800f28c <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b62:	f001 fb49 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM2_Init+0xe8>)
 8001b68:	f001 fed6 	bl	8003918 <HAL_TIM_MspPostInit>

}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	; 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24000554 	.word	0x24000554

08001b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <MX_TIM3_Init+0x98>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001b9e:	2263      	movs	r2, #99	; 0x63
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001baa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bbe:	f00c fef0 	bl	800e9a2 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bc8:	f001 fb16 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bda:	f00d fc6b 	bl	800f4b4 <HAL_TIM_ConfigClockSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001be4:	f001 fb08 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bf6:	f00e f9b3 	bl	800ff60 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f001 fafa 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	240005a0 	.word	0x240005a0
 8001c10:	40000400 	.word	0x40000400

08001c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c1a:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <MX_USART1_UART_Init+0xcc>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c20:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5c:	481f      	ldr	r0, [pc, #124]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c5e:	f00e faa9 	bl	80101b4 <HAL_UART_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c68:	f001 fac6 	bl	80031f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	481b      	ldr	r0, [pc, #108]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c70:	f011 f949 	bl	8012f06 <HAL_UARTEx_SetTxFifoThreshold>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c7a:	f001 fabd 	bl	80031f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4816      	ldr	r0, [pc, #88]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c82:	f011 f97e 	bl	8012f82 <HAL_UARTEx_SetRxFifoThreshold>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c8c:	f001 fab4 	bl	80031f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c90:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001c92:	f011 f8ff 	bl	8012e94 <HAL_UARTEx_DisableFifoMode>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c9c:	f001 faac 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001ca0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001ca6:	f011 f96c 	bl	8012f82 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001caa:	480c      	ldr	r0, [pc, #48]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cac:	f011 f8b7 	bl	8012e1e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cb2:	f011 f881 	bl	8012db8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cc4:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <MX_USART1_UART_Init+0xc8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cd4:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	240005ec 	.word	0x240005ec
 8001ce0:	40011000 	.word	0x40011000

08001ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_DMA_Init+0x6c>)
 8001cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <MX_DMA_Init+0x6c>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_DMA_Init+0x6c>)
 8001cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	200b      	movs	r0, #11
 8001d0e:	f003 fed5 	bl	8005abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d12:	200b      	movs	r0, #11
 8001d14:	f003 feec 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	200c      	movs	r0, #12
 8001d1e:	f003 fecd 	bl	8005abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d22:	200c      	movs	r0, #12
 8001d24:	f003 fee4 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2105      	movs	r1, #5
 8001d2c:	200d      	movs	r0, #13
 8001d2e:	f003 fec5 	bl	8005abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d32:	200d      	movs	r0, #13
 8001d34:	f003 fedc 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f003 febd 	bl	8005abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d42:	2010      	movs	r0, #16
 8001d44:	f003 fed4 	bl	8005af0 <HAL_NVIC_EnableIRQ>

}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58024400 	.word	0x58024400

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d88:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_GPIO_Init+0xe8>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001de8:	4815      	ldr	r0, [pc, #84]	; (8001e40 <MX_GPIO_Init+0xec>)
 8001dea:	f007 faa5 	bl	8009338 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2164      	movs	r1, #100	; 0x64
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <MX_GPIO_Init+0xf0>)
 8001df4:	f007 faa0 	bl	8009338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001df8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001dfc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <MX_GPIO_Init+0xec>)
 8001e12:	f007 f8c9 	bl	8008fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e16:	2364      	movs	r3, #100	; 0x64
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_GPIO_Init+0xf0>)
 8001e2e:	f007 f8bb 	bl	8008fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58020800 	.word	0x58020800
 8001e44:	58020400 	.word	0x58020400

08001e48 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e52:	2300      	movs	r3, #0
 8001e54:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	4817      	ldr	r0, [pc, #92]	; (8001ec4 <poll_i2c_sensor+0x7c>)
 8001e68:	f007 fb1c 	bl	80094a4 <HAL_I2C_Master_Transmit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e76:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <poll_i2c_sensor+0x80>)
 8001e78:	f015 f80e 	bl	8016e98 <puts>
 8001e7c:	e01c      	b.n	8001eb8 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	b299      	uxth	r1, r3
 8001e82:	f107 0208 	add.w	r2, r7, #8
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <poll_i2c_sensor+0x7c>)
 8001e90:	f007 fc20 	bl	80096d4 <HAL_I2C_Master_Receive>
 8001e94:	4603      	mov	r3, r0
 8001e96:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e98:	7b7b      	ldrb	r3, [r7, #13]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <poll_i2c_sensor+0x84>)
 8001ea0:	f014 fffa 	bl	8016e98 <puts>
 8001ea4:	e008      	b.n	8001eb8 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001ea6:	7a3b      	ldrb	r3, [r7, #8]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001eac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb0:	7a7a      	ldrb	r2, [r7, #9]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	10db      	asrs	r3, r3, #3
 8001eb6:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001eb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	24000380 	.word	0x24000380
 8001ec8:	08017864 	.word	0x08017864
 8001ecc:	08017874 	.word	0x08017874

08001ed0 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001ed8:	f107 010c 	add.w	r1, r7, #12
 8001edc:	2301      	movs	r3, #1
 8001ede:	2201      	movs	r2, #1
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <receive_pmt_spi+0x44>)
 8001ee2:	f00c fa31 	bl	800e348 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
 8001eec:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <receive_pmt_spi+0x44>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <receive_pmt_spi+0x44>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7bba      	ldrb	r2, [r7, #14]
 8001f02:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	240003f8 	.word	0x240003f8

08001f18 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f20:	f107 010c 	add.w	r1, r7, #12
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	2201      	movs	r2, #1
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <receive_erpa_spi+0x44>)
 8001f2a:	f00c fa0d 	bl	800e348 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f32:	7b7b      	ldrb	r3, [r7, #13]
 8001f34:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <receive_erpa_spi+0x44>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <receive_erpa_spi+0x44>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7bba      	ldrb	r2, [r7, #14]
 8001f4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	24000480 	.word	0x24000480

08001f60 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <receive_erpa_adc+0x20>)
 8001f6a:	885b      	ldrh	r3, [r3, #2]
 8001f6c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	89fa      	ldrh	r2, [r7, #14]
 8001f72:	801a      	strh	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	24000c80 	.word	0x24000c80

08001f84 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f8c:	2390      	movs	r3, #144	; 0x90
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff5a 	bl	8001e48 <poll_i2c_sensor>
 8001f94:	4603      	mov	r3, r0
 8001f96:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f98:	2394      	movs	r3, #148	; 0x94
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff54 	bl	8001e48 <poll_i2c_sensor>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fa4:	2392      	movs	r3, #146	; 0x92
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff4e 	bl	8001e48 <poll_i2c_sensor>
 8001fac:	4603      	mov	r3, r0
 8001fae:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fb0:	2396      	movs	r3, #150	; 0x96
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff48 	bl	8001e48 <poll_i2c_sensor>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	89fa      	ldrh	r2, [r7, #14]
 8001fc0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	89ba      	ldrh	r2, [r7, #12]
 8001fc8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	897a      	ldrh	r2, [r7, #10]
 8001fd0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	893a      	ldrh	r2, [r7, #8]
 8001fd8:	801a      	strh	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <receive_hk_adc1+0xa0>)
 8001fee:	8a9b      	ldrh	r3, [r3, #20]
 8001ff0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <receive_hk_adc1+0xa0>)
 8001ff4:	8a1b      	ldrh	r3, [r3, #16]
 8001ff6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <receive_hk_adc1+0xa0>)
 8001ffa:	899b      	ldrh	r3, [r3, #12]
 8001ffc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <receive_hk_adc1+0xa0>)
 8002000:	8a5b      	ldrh	r3, [r3, #18]
 8002002:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <receive_hk_adc1+0xa0>)
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <receive_hk_adc1+0xa0>)
 800200c:	88db      	ldrh	r3, [r3, #6]
 800200e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <receive_hk_adc1+0xa0>)
 8002012:	89db      	ldrh	r3, [r3, #14]
 8002014:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <receive_hk_adc1+0xa0>)
 8002018:	891b      	ldrh	r3, [r3, #8]
 800201a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <receive_hk_adc1+0xa0>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <receive_hk_adc1+0xa0>)
 8002024:	895b      	ldrh	r3, [r3, #10]
 8002026:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8bfa      	ldrh	r2, [r7, #30]
 800202c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3302      	adds	r3, #2
 8002032:	8bba      	ldrh	r2, [r7, #28]
 8002034:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	8b7a      	ldrh	r2, [r7, #26]
 800203c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3306      	adds	r3, #6
 8002042:	8b3a      	ldrh	r2, [r7, #24]
 8002044:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3308      	adds	r3, #8
 800204a:	8afa      	ldrh	r2, [r7, #22]
 800204c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	330a      	adds	r3, #10
 8002052:	8aba      	ldrh	r2, [r7, #20]
 8002054:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	330c      	adds	r3, #12
 800205a:	8a7a      	ldrh	r2, [r7, #18]
 800205c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	330e      	adds	r3, #14
 8002062:	8a3a      	ldrh	r2, [r7, #16]
 8002064:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3310      	adds	r3, #16
 800206a:	89fa      	ldrh	r2, [r7, #14]
 800206c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3312      	adds	r3, #18
 8002072:	89ba      	ldrh	r2, [r7, #12]
 8002074:	801a      	strh	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	24000c80 	.word	0x24000c80

08002088 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <receive_hk_adc3+0x4c>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <receive_hk_adc3+0x4c>)
 8002098:	885b      	ldrh	r3, [r3, #2]
 800209a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <receive_hk_adc3+0x4c>)
 800209e:	889b      	ldrh	r3, [r3, #4]
 80020a0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <receive_hk_adc3+0x4c>)
 80020a4:	88db      	ldrh	r3, [r3, #6]
 80020a6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	89fa      	ldrh	r2, [r7, #14]
 80020ac:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3302      	adds	r3, #2
 80020b2:	89ba      	ldrh	r2, [r7, #12]
 80020b4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	897a      	ldrh	r2, [r7, #10]
 80020bc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3306      	adds	r3, #6
 80020c2:	893a      	ldrh	r2, [r7, #8]
 80020c4:	801a      	strh	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	24000ca0 	.word	0x24000ca0

080020d8 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <get_current_step+0xc0>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04a      	beq.n	8002184 <get_current_step+0xac>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	da48      	bge.n	8002188 <get_current_step+0xb0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03f      	beq.n	8002180 <get_current_step+0xa8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002106:	4293      	cmp	r3, r2
 8002108:	dc3e      	bgt.n	8002188 <get_current_step+0xb0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002110:	4293      	cmp	r3, r2
 8002112:	d033      	beq.n	800217c <get_current_step+0xa4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800211a:	da35      	bge.n	8002188 <get_current_step+0xb0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002122:	4293      	cmp	r3, r2
 8002124:	d028      	beq.n	8002178 <get_current_step+0xa0>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800212c:	4293      	cmp	r3, r2
 800212e:	dc2b      	bgt.n	8002188 <get_current_step+0xb0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f240 7245 	movw	r2, #1861	; 0x745
 8002136:	4293      	cmp	r3, r2
 8002138:	d01c      	beq.n	8002174 <get_current_step+0x9c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f240 7245 	movw	r2, #1861	; 0x745
 8002140:	4293      	cmp	r3, r2
 8002142:	dc21      	bgt.n	8002188 <get_current_step+0xb0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800214a:	4293      	cmp	r3, r2
 800214c:	d010      	beq.n	8002170 <get_current_step+0x98>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002154:	4293      	cmp	r3, r2
 8002156:	dc17      	bgt.n	8002188 <get_current_step+0xb0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d004      	beq.n	8002168 <get_current_step+0x90>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002164:	d002      	beq.n	800216c <get_current_step+0x94>
 8002166:	e00f      	b.n	8002188 <get_current_step+0xb0>
	case 0:
		return 0;
 8002168:	2300      	movs	r3, #0
 800216a:	e00e      	b.n	800218a <get_current_step+0xb2>
	case 620:
		return 1;
 800216c:	2301      	movs	r3, #1
 800216e:	e00c      	b.n	800218a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002170:	2302      	movs	r3, #2
 8002172:	e00a      	b.n	800218a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002174:	2303      	movs	r3, #3
 8002176:	e008      	b.n	800218a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002178:	2304      	movs	r3, #4
 800217a:	e006      	b.n	800218a <get_current_step+0xb2>
	case 3103:
		return 5;
 800217c:	2305      	movs	r3, #5
 800217e:	e004      	b.n	800218a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002180:	2306      	movs	r3, #6
 8002182:	e002      	b.n	800218a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002184:	2307      	movs	r3, #7
 8002186:	e000      	b.n	800218a <get_current_step+0xb2>
	default:
		return -1;
 8002188:	23ff      	movs	r3, #255	; 0xff
	}
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007400 	.word	0x40007400

0800219c <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 80021a0:	f000 f8f2 	bl	8002388 <send_ACK>

	vTaskSuspendAll();
 80021a4:	f012 ffb4 	bl	8015110 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80021a8:	2101      	movs	r1, #1
 80021aa:	2001      	movs	r0, #1
 80021ac:	f007 feea 	bl	8009f84 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 80021b0:	f7fe ffd8 	bl	8001164 <SystemClock_Config>
	xTaskResumeAll();
 80021b4:	f012 ffba 	bl	801512c <xTaskResumeAll>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d051      	beq.n	8002276 <RTC_SetTime+0xba>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	22ca      	movs	r2, #202	; 0xca
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2253      	movs	r2, #83	; 0x53
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f00b fed8 	bl	800dfa8 <RTC_EnterInitMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d129      	bne.n	8002256 <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2200      	movs	r2, #0
 8002206:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f00b ff3d 	bl	800e08c <RTC_ByteToBcd2>
 8002212:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8002214:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	4618      	mov	r0, r3
 800221c:	f00b ff36 	bl	800e08c <RTC_ByteToBcd2>
 8002220:	4603      	mov	r3, r0
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	789b      	ldrb	r3, [r3, #2]
 800222a:	4618      	mov	r0, r3
 800222c:	f00b ff2e 	bl	800e08c <RTC_ByteToBcd2>
 8002230:	4603      	mov	r3, r0
 8002232:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	78db      	ldrb	r3, [r3, #3]
 800223a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	6939      	ldr	r1, [r7, #16]
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <RTC_SetTime+0xc4>)
 8002248:	400b      	ands	r3, r1
 800224a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f00b fedf 	bl	800e010 <RTC_ExitInitMode>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2020 	strb.w	r2, [r3, #32]
 8002274:	e000      	b.n	8002278 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 8002276:	bf00      	nop

}
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	007f7f7f 	.word	0x007f7f7f

08002284 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	789b      	ldrb	r3, [r3, #2]
 8002298:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	78db      	ldrb	r3, [r3, #3]
 80022a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	791b      	ldrb	r3, [r3, #4]
 80022a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	795b      	ldrb	r3, [r3, #5]
 80022b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	799b      	ldrb	r3, [r3, #6]
 80022b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3307      	adds	r3, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3308      	adds	r3, #8
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80022d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80022dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80022e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80022ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022f0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80022f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022f6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80022f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80022fc:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80022fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002300:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	480b      	ldr	r0, [pc, #44]	; (8002338 <calibrateRTC+0xb4>)
 800230c:	f00b fd52 	bl	800ddb4 <HAL_RTC_SetDate>
 8002310:	4603      	mov	r3, r0
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <calibrateRTC+0x9e>
		Error_Handler();
 800231e:	f000 ff6b 	bl	80031f8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	2200      	movs	r2, #0
 8002328:	4619      	mov	r1, r3
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <calibrateRTC+0xb4>)
 800232c:	f7ff ff46 	bl	80021bc <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	240003d4 	.word	0x240003d4

0800233c <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	send_ACK();
 8002342:	f000 f821 	bl	8002388 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <sync+0x44>)
 8002348:	f00e f9a6 	bl	8010698 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800234c:	2364      	movs	r3, #100	; 0x64
 800234e:	2209      	movs	r2, #9
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <sync+0x48>)
 8002352:	480b      	ldr	r0, [pc, #44]	; (8002380 <sync+0x44>)
 8002354:	f00e f80c 	bl	8010370 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <sync+0x48>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2bff      	cmp	r3, #255	; 0xff
 8002362:	d1f3      	bne.n	800234c <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <sync+0x48>)
 8002366:	f7ff ff8d 	bl	8002284 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	4905      	ldr	r1, [pc, #20]	; (8002384 <sync+0x48>)
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <sync+0x44>)
 8002370:	f00e f8c6 	bl	8010500 <HAL_UART_Receive_IT>

	send_ACK();
 8002374:	f000 f808 	bl	8002388 <send_ACK>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	240005ec 	.word	0x240005ec
 8002384:	24000c24 	.word	0x24000c24

08002388 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <send_ACK+0x1c>)
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002392:	2364      	movs	r3, #100	; 0x64
 8002394:	2201      	movs	r2, #1
 8002396:	4903      	ldr	r1, [pc, #12]	; (80023a4 <send_ACK+0x1c>)
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <send_ACK+0x20>)
 800239a:	f00d ff5b 	bl	8010254 <HAL_UART_Transmit>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24000ca8 	.word	0x24000ca8
 80023a8:	240005ec 	.word	0x240005ec

080023ac <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_UART_TxCpltCallback+0x1c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	24000000 	.word	0x24000000

080023cc <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4618      	mov	r0, r3
 80023de:	f014 fbe7 	bl	8016bb0 <malloc>
 80023e2:	4603      	mov	r3, r0
 80023e4:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f014 fbef 	bl	8016bd0 <memcpy>
	packet.size = size;
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	82bb      	strh	r3, [r7, #20]
	return packet;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002402:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002414:	2100      	movs	r1, #0
 8002416:	481d      	ldr	r0, [pc, #116]	; (800248c <system_setup+0x7c>)
 8002418:	f00c fb92 	bl	800eb40 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 800241c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002420:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002426:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800242a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800242e:	4818      	ldr	r0, [pc, #96]	; (8002490 <system_setup+0x80>)
 8002430:	f003 f94a 	bl	80056c8 <HAL_ADCEx_Calibration_Start>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800243a:	f000 fedd 	bl	80031f8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800243e:	220b      	movs	r2, #11
 8002440:	4914      	ldr	r1, [pc, #80]	; (8002494 <system_setup+0x84>)
 8002442:	4813      	ldr	r0, [pc, #76]	; (8002490 <system_setup+0x80>)
 8002444:	f002 fa1e 	bl	8004884 <HAL_ADC_Start_DMA>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800244e:	f000 fed3 	bl	80031f8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002452:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245a:	480f      	ldr	r0, [pc, #60]	; (8002498 <system_setup+0x88>)
 800245c:	f003 f934 	bl	80056c8 <HAL_ADCEx_Calibration_Start>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002466:	f000 fec7 	bl	80031f8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800246a:	2204      	movs	r2, #4
 800246c:	490b      	ldr	r1, [pc, #44]	; (800249c <system_setup+0x8c>)
 800246e:	480a      	ldr	r0, [pc, #40]	; (8002498 <system_setup+0x88>)
 8002470:	f002 fa08 	bl	8004884 <HAL_ADC_Start_DMA>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800247a:	f000 febd 	bl	80031f8 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800247e:	2201      	movs	r2, #1
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <system_setup+0x90>)
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <system_setup+0x94>)
 8002484:	f00e f83c 	bl	8010500 <HAL_UART_Receive_IT>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	240005a0 	.word	0x240005a0
 8002490:	2400013c 	.word	0x2400013c
 8002494:	24000c80 	.word	0x24000c80
 8002498:	240001a0 	.word	0x240001a0
 800249c:	24000ca0 	.word	0x24000ca0
 80024a0:	24000c24 	.word	0x24000c24
 80024a4:	240005ec 	.word	0x240005ec

080024a8 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <get_uptime+0x88>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <get_uptime+0x8c>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <get_uptime+0x88>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d005      	beq.n	80024d6 <get_uptime+0x2e>
		ms = uptime_millis;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <get_uptime+0x88>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <get_uptime+0x8c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024dc:	fb03 f202 	mul.w	r2, r3, r2
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <get_uptime+0x8c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4914      	ldr	r1, [pc, #80]	; (8002538 <get_uptime+0x90>)
 80024e8:	fba1 1303 	umull	r1, r3, r1, r3
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0e1b      	lsrs	r3, r3, #24
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0c1a      	lsrs	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3301      	adds	r3, #1
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0a1a      	lsrs	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3302      	adds	r3, #2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3303      	adds	r3, #3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	24000c00 	.word	0x24000c00
 8002534:	e000e010 	.word	0xe000e010
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	2200      	movs	r2, #0
 800254a:	4619      	mov	r1, r3
 800254c:	4821      	ldr	r0, [pc, #132]	; (80025d4 <getTimestamp+0x98>)
 800254e:	f00b fbd5 	bl	800dcfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	2200      	movs	r2, #0
 8002558:	4619      	mov	r1, r3
 800255a:	481e      	ldr	r0, [pc, #120]	; (80025d4 <getTimestamp+0x98>)
 800255c:	f00b fcb2 	bl	800dec4 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2264      	movs	r2, #100	; 0x64
 8002564:	fb03 f202 	mul.w	r2, r3, r2
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <getTimestamp+0x9c>)
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3301      	adds	r3, #1
 8002578:	7b7a      	ldrb	r2, [r7, #13]
 800257a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3302      	adds	r3, #2
 8002580:	7bba      	ldrb	r2, [r7, #14]
 8002582:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3303      	adds	r3, #3
 8002588:	7c3a      	ldrb	r2, [r7, #16]
 800258a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	7c7a      	ldrb	r2, [r7, #17]
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3305      	adds	r3, #5
 8002598:	7cba      	ldrb	r2, [r7, #18]
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	0e1a      	lsrs	r2, r3, #24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3306      	adds	r3, #6
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	0c1a      	lsrs	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3307      	adds	r3, #7
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	0a1a      	lsrs	r2, r3, #8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3308      	adds	r3, #8
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3309      	adds	r3, #9
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	240003d4 	.word	0x240003d4
 80025d8:	000f4240 	.word	0x000f4240

080025dc <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80025e2:	bf00      	nop
 80025e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e8:	4833      	ldr	r0, [pc, #204]	; (80026b8 <sample_pmt+0xdc>)
 80025ea:	f006 fe8d 	bl	8009308 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f7      	bne.n	80025e4 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80025f4:	200a      	movs	r0, #10
 80025f6:	f014 fadb 	bl	8016bb0 <malloc>
 80025fa:	4603      	mov	r3, r0
 80025fc:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80025fe:	2002      	movs	r0, #2
 8002600:	f014 fad6 	bl	8016bb0 <malloc>
 8002604:	4603      	mov	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002608:	2004      	movs	r0, #4
 800260a:	f014 fad1 	bl	8016bb0 <malloc>
 800260e:	4603      	mov	r3, r0
 8002610:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff48 	bl	80024a8 <get_uptime>

	receive_pmt_spi(pmt_spi);
 8002618:	6938      	ldr	r0, [r7, #16]
 800261a:	f7ff fc59 	bl	8001ed0 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	22bb      	movs	r2, #187	; 0xbb
 8002622:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	22bb      	movs	r2, #187	; 0xbb
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <sample_pmt+0xe0>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29a      	uxth	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3302      	adds	r3, #2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <sample_pmt+0xe0>)
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3303      	adds	r3, #3
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3304      	adds	r3, #4
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3305      	adds	r3, #5
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	7852      	ldrb	r2, [r2, #1]
 800265a:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3306      	adds	r3, #6
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3307      	adds	r3, #7
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	7852      	ldrb	r2, [r2, #1]
 800266e:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3308      	adds	r3, #8
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	7892      	ldrb	r2, [r2, #2]
 8002678:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3309      	adds	r3, #9
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	78d2      	ldrb	r2, [r2, #3]
 8002682:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	220a      	movs	r2, #10
 8002688:	6979      	ldr	r1, [r7, #20]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fe9e 	bl	80023cc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <sample_pmt+0xe4>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	1d39      	adds	r1, r7, #4
 8002696:	2300      	movs	r3, #0
 8002698:	2200      	movs	r2, #0
 800269a:	f011 f82b 	bl	80136f4 <osMessageQueuePut>
	free(buffer);
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f014 fa8e 	bl	8016bc0 <free>
	free(pmt_spi);
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f014 fa8b 	bl	8016bc0 <free>
	free(uptime);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f014 fa88 	bl	8016bc0 <free>
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58020000 	.word	0x58020000
 80026bc:	24000c10 	.word	0x24000c10
 80026c0:	24000c04 	.word	0x24000c04

080026c4 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80026ca:	bf00      	nop
 80026cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d0:	4848      	ldr	r0, [pc, #288]	; (80027f4 <sample_erpa+0x130>)
 80026d2:	f006 fe19 	bl	8009308 <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f7      	bne.n	80026cc <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80026dc:	200e      	movs	r0, #14
 80026de:	f014 fa67 	bl	8016bb0 <malloc>
 80026e2:	4603      	mov	r3, r0
 80026e4:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80026e6:	2002      	movs	r0, #2
 80026e8:	f014 fa62 	bl	8016bb0 <malloc>
 80026ec:	4603      	mov	r3, r0
 80026ee:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 80026f0:	2002      	movs	r0, #2
 80026f2:	f014 fa5d 	bl	8016bb0 <malloc>
 80026f6:	4603      	mov	r3, r0
 80026f8:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80026fa:	2004      	movs	r0, #4
 80026fc:	f014 fa58 	bl	8016bb0 <malloc>
 8002700:	4603      	mov	r3, r0
 8002702:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002704:	23ff      	movs	r3, #255	; 0xff
 8002706:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002708:	6938      	ldr	r0, [r7, #16]
 800270a:	f7ff fecd 	bl	80024a8 <get_uptime>
	sweep_step = get_current_step();
 800270e:	f7ff fce3 	bl	80020d8 <get_current_step>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 8002716:	69b8      	ldr	r0, [r7, #24]
 8002718:	f7ff fbfe 	bl	8001f18 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff fc1f 	bl	8001f60 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	22aa      	movs	r2, #170	; 0xaa
 8002726:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	22aa      	movs	r2, #170	; 0xaa
 800272e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <sample_erpa+0x134>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1a      	lsrs	r2, r3, #16
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3302      	adds	r3, #2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <sample_erpa+0x134>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0a1a      	lsrs	r2, r3, #8
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3303      	adds	r3, #3
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <sample_erpa+0x134>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3304      	adds	r3, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	3305      	adds	r3, #5
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b29a      	uxth	r2, r3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3306      	adds	r3, #6
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3307      	adds	r3, #7
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3308      	adds	r3, #8
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3309      	adds	r3, #9
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	7852      	ldrb	r2, [r2, #1]
 800278e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	330a      	adds	r3, #10
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	330b      	adds	r3, #11
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	7852      	ldrb	r2, [r2, #1]
 80027a2:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	330c      	adds	r3, #12
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	7892      	ldrb	r2, [r2, #2]
 80027ac:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	330d      	adds	r3, #13
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	78d2      	ldrb	r2, [r2, #3]
 80027b6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	220e      	movs	r2, #14
 80027bc:	69f9      	ldr	r1, [r7, #28]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fe04 	bl	80023cc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <sample_erpa+0x138>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	1d39      	adds	r1, r7, #4
 80027ca:	2300      	movs	r3, #0
 80027cc:	2200      	movs	r2, #0
 80027ce:	f010 ff91 	bl	80136f4 <osMessageQueuePut>
	free(buffer);
 80027d2:	69f8      	ldr	r0, [r7, #28]
 80027d4:	f014 f9f4 	bl	8016bc0 <free>
	free(erpa_spi);
 80027d8:	69b8      	ldr	r0, [r7, #24]
 80027da:	f014 f9f1 	bl	8016bc0 <free>
	free(erpa_adc);
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f014 f9ee 	bl	8016bc0 <free>
	free(uptime);
 80027e4:	6938      	ldr	r0, [r7, #16]
 80027e6:	f014 f9eb 	bl	8016bc0 <free>
}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	58020400 	.word	0x58020400
 80027f8:	24000c14 	.word	0x24000c14
 80027fc:	24000c04 	.word	0x24000c04

08002800 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002806:	2036      	movs	r0, #54	; 0x36
 8002808:	f014 f9d2 	bl	8016bb0 <malloc>
 800280c:	4603      	mov	r3, r0
 800280e:	617b      	str	r3, [r7, #20]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002810:	2008      	movs	r0, #8
 8002812:	f014 f9cd 	bl	8016bb0 <malloc>
 8002816:	4603      	mov	r3, r0
 8002818:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800281a:	200a      	movs	r0, #10
 800281c:	f014 f9c8 	bl	8016bb0 <malloc>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002824:	2004      	movs	r0, #4
 8002826:	f014 f9c3 	bl	8016bb0 <malloc>
 800282a:	4603      	mov	r3, r0
 800282c:	60bb      	str	r3, [r7, #8]

	get_uptime(uptime);
 800282e:	68b8      	ldr	r0, [r7, #8]
 8002830:	f7ff fe3a 	bl	80024a8 <get_uptime>
	getTimestamp(timestamp);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fe81 	bl	800253c <getTimestamp>
	receive_hk_i2c(hk_i2c);
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f7ff fba2 	bl	8001f84 <receive_hk_i2c>


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	22cc      	movs	r2, #204	; 0xcc
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	22cc      	movs	r2, #204	; 0xcc
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800284e:	4ba1      	ldr	r3, [pc, #644]	; (8002ad4 <sample_hk+0x2d4>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3302      	adds	r3, #2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800285e:	4b9d      	ldr	r3, [pc, #628]	; (8002ad4 <sample_hk+0x2d4>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3303      	adds	r3, #3
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800286a:	4b9b      	ldr	r3, [pc, #620]	; (8002ad8 <sample_hk+0x2d8>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29a      	uxth	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3304      	adds	r3, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800287a:	4b97      	ldr	r3, [pc, #604]	; (8002ad8 <sample_hk+0x2d8>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3305      	adds	r3, #5
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002886:	4b95      	ldr	r3, [pc, #596]	; (8002adc <sample_hk+0x2dc>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3306      	adds	r3, #6
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002896:	4b91      	ldr	r3, [pc, #580]	; (8002adc <sample_hk+0x2dc>)
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3307      	adds	r3, #7
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a8:	121a      	asrs	r2, r3, #8
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3308      	adds	r3, #8
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3309      	adds	r3, #9
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3302      	adds	r3, #2
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	121a      	asrs	r2, r3, #8
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	330a      	adds	r3, #10
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	3302      	adds	r3, #2
 80028d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	330b      	adds	r3, #11
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	3304      	adds	r3, #4
 80028e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ea:	121a      	asrs	r2, r3, #8
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	330c      	adds	r3, #12
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3304      	adds	r3, #4
 80028f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	330d      	adds	r3, #13
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3306      	adds	r3, #6
 8002908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290c:	121a      	asrs	r2, r3, #8
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	330e      	adds	r3, #14
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	3306      	adds	r3, #6
 800291a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	330f      	adds	r3, #15
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002926:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <sample_hk+0x2e0>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29a      	uxth	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3310      	adds	r3, #16
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002936:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <sample_hk+0x2e0>)
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3311      	adds	r3, #17
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002942:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <sample_hk+0x2e4>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3312      	adds	r3, #18
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002952:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <sample_hk+0x2e4>)
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3313      	adds	r3, #19
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <sample_hk+0x2e8>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3314      	adds	r3, #20
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 800296e:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <sample_hk+0x2e8>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3315      	adds	r3, #21
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800297a:	4b5c      	ldr	r3, [pc, #368]	; (8002aec <sample_hk+0x2ec>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3316      	adds	r3, #22
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <sample_hk+0x2ec>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3317      	adds	r3, #23
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <sample_hk+0x2f0>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29a      	uxth	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3318      	adds	r3, #24
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 80029a6:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <sample_hk+0x2f0>)
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3319      	adds	r3, #25
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 80029b2:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <sample_hk+0x2f4>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	331a      	adds	r3, #26
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 80029c2:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <sample_hk+0x2f4>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	331b      	adds	r3, #27
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <sample_hk+0x2f8>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	331c      	adds	r3, #28
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <sample_hk+0x2f8>)
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	331d      	adds	r3, #29
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80029ea:	4b44      	ldr	r3, [pc, #272]	; (8002afc <sample_hk+0x2fc>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	331e      	adds	r3, #30
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <sample_hk+0x2fc>)
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	331f      	adds	r3, #31
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <sample_hk+0x300>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3320      	adds	r3, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <sample_hk+0x300>)
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3321      	adds	r3, #33	; 0x21
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <sample_hk+0x304>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3322      	adds	r3, #34	; 0x22
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002a32:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <sample_hk+0x304>)
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3323      	adds	r3, #35	; 0x23
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <sample_hk+0x308>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3324      	adds	r3, #36	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <sample_hk+0x308>)
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3325      	adds	r3, #37	; 0x25
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <sample_hk+0x30c>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3326      	adds	r3, #38	; 0x26
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <sample_hk+0x30c>)
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3327      	adds	r3, #39	; 0x27
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3328      	adds	r3, #40	; 0x28
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3329      	adds	r3, #41	; 0x29
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	7852      	ldrb	r2, [r2, #1]
 8002a88:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	332a      	adds	r3, #42	; 0x2a
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	7892      	ldrb	r2, [r2, #2]
 8002a92:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	332b      	adds	r3, #43	; 0x2b
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	78d2      	ldrb	r2, [r2, #3]
 8002a9c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	332c      	adds	r3, #44	; 0x2c
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	7912      	ldrb	r2, [r2, #4]
 8002aa6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	332d      	adds	r3, #45	; 0x2d
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	7952      	ldrb	r2, [r2, #5]
 8002ab0:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	332e      	adds	r3, #46	; 0x2e
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	7992      	ldrb	r2, [r2, #6]
 8002aba:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	332f      	adds	r3, #47	; 0x2f
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	79d2      	ldrb	r2, [r2, #7]
 8002ac4:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3330      	adds	r3, #48	; 0x30
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	7a12      	ldrb	r2, [r2, #8]
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e01e      	b.n	8002b10 <sample_hk+0x310>
 8002ad2:	bf00      	nop
 8002ad4:	24000c18 	.word	0x24000c18
 8002ad8:	24000be2 	.word	0x24000be2
 8002adc:	24000be4 	.word	0x24000be4
 8002ae0:	24000be6 	.word	0x24000be6
 8002ae4:	24000be8 	.word	0x24000be8
 8002ae8:	24000bea 	.word	0x24000bea
 8002aec:	24000bec 	.word	0x24000bec
 8002af0:	24000bee 	.word	0x24000bee
 8002af4:	24000bf0 	.word	0x24000bf0
 8002af8:	24000bf2 	.word	0x24000bf2
 8002afc:	24000bf4 	.word	0x24000bf4
 8002b00:	24000bf6 	.word	0x24000bf6
 8002b04:	24000bf8 	.word	0x24000bf8
 8002b08:	24000bfa 	.word	0x24000bfa
 8002b0c:	24000bfc 	.word	0x24000bfc
	buffer[49] = timestamp[9];
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3331      	adds	r3, #49	; 0x31
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	7a52      	ldrb	r2, [r2, #9]
 8002b18:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3332      	adds	r3, #50	; 0x32
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3333      	adds	r3, #51	; 0x33
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	7852      	ldrb	r2, [r2, #1]
 8002b2c:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3334      	adds	r3, #52	; 0x34
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	7892      	ldrb	r2, [r2, #2]
 8002b36:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3335      	adds	r3, #53	; 0x35
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	78d2      	ldrb	r2, [r2, #3]
 8002b40:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002b42:	463b      	mov	r3, r7
 8002b44:	2236      	movs	r2, #54	; 0x36
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fc3f 	bl	80023cc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <sample_hk+0x37c>)
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	4639      	mov	r1, r7
 8002b54:	2300      	movs	r3, #0
 8002b56:	2200      	movs	r2, #0
 8002b58:	f010 fdcc 	bl	80136f4 <osMessageQueuePut>

	free(buffer);
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f014 f82f 	bl	8016bc0 <free>
	free(hk_i2c);
 8002b62:	6938      	ldr	r0, [r7, #16]
 8002b64:	f014 f82c 	bl	8016bc0 <free>
	free(timestamp);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f014 f829 	bl	8016bc0 <free>
	free(uptime);
 8002b6e:	68b8      	ldr	r0, [r7, #8]
 8002b70:	f014 f826 	bl	8016bc0 <free>
}
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	24000c04 	.word	0x24000c04

08002b80 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <PMT_init+0x38>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b90:	2200      	movs	r2, #0
 8002b92:	2101      	movs	r1, #1
 8002b94:	f010 fcd5 	bl	8013542 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <PMT_init+0x3c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <PMT_init+0x32>
			sample_pmt();
 8002ba2:	f7ff fd1b 	bl	80025dc <sample_pmt>
			pmt_seq++;
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <PMT_init+0x40>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <PMT_init+0x40>)
 8002bb0:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002bb2:	f010 fb93 	bl	80132dc <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002bb6:	e7e7      	b.n	8002b88 <PMT_init+0x8>
 8002bb8:	24000c20 	.word	0x24000c20
 8002bbc:	24000c1a 	.word	0x24000c1a
 8002bc0:	24000c10 	.word	0x24000c10

08002bc4 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <ERPA_init+0x38>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	f010 fcb3 	bl	8013542 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <ERPA_init+0x3c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <ERPA_init+0x30>
			sample_erpa();
 8002be6:	f7ff fd6d 	bl	80026c4 <sample_erpa>
			erpa_seq++;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <ERPA_init+0x40>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <ERPA_init+0x40>)
 8002bf2:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002bf4:	f010 fb72 	bl	80132dc <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002bf8:	e7e8      	b.n	8002bcc <ERPA_init+0x8>
 8002bfa:	bf00      	nop
 8002bfc:	24000c20 	.word	0x24000c20
 8002c00:	24000c1b 	.word	0x24000c1b
 8002c04:	24000c14 	.word	0x24000c14

08002c08 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HK_init+0x38>)
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	f010 fc91 	bl	8013542 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HK_init+0x3c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HK_init+0x32>
			sample_hk();
 8002c2a:	f7ff fde9 	bl	8002800 <sample_hk>
			hk_seq++;
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HK_init+0x40>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HK_init+0x40>)
 8002c38:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002c3a:	f010 fb4f 	bl	80132dc <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002c3e:	e7e7      	b.n	8002c10 <HK_init+0x8>
 8002c40:	24000c20 	.word	0x24000c20
 8002c44:	24000c1c 	.word	0x24000c1c
 8002c48:	24000c18 	.word	0x24000c18

08002c4c <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <GPIO_on_init+0x9c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f010 fb5f 	bl	801331c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <GPIO_on_init+0xa0>)
 8002c60:	2104      	movs	r1, #4
 8002c62:	2201      	movs	r2, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fb67 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c6a:	2064      	movs	r0, #100	; 0x64
 8002c6c:	f010 fb77 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <GPIO_on_init+0xa0>)
 8002c72:	2120      	movs	r1, #32
 8002c74:	2201      	movs	r2, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f006 fb5e 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	f010 fb6e 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <GPIO_on_init+0xa4>)
 8002c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fb54 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c90:	2064      	movs	r0, #100	; 0x64
 8002c92:	f010 fb64 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <GPIO_on_init+0xa4>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f006 fb4b 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca2:	2064      	movs	r0, #100	; 0x64
 8002ca4:	f010 fb5b 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <GPIO_on_init+0xa4>)
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	2201      	movs	r2, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f006 fb42 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	f010 fb52 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <GPIO_on_init+0xa4>)
 8002cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f006 fb38 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	f010 fb48 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <GPIO_on_init+0xa4>)
 8002cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fb2e 	bl	8009338 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <GPIO_on_init+0x9c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f010 fb1b 	bl	801331c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002ce6:	e7ba      	b.n	8002c5e <GPIO_on_init+0x12>
 8002ce8:	24000704 	.word	0x24000704
 8002cec:	58020400 	.word	0x58020400
 8002cf0:	58020800 	.word	0x58020800

08002cf4 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <GPIO_off_init+0x9c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f010 fb0b 	bl	801331c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <GPIO_off_init+0xa0>)
 8002d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f006 fb12 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d14:	2064      	movs	r0, #100	; 0x64
 8002d16:	f010 fb22 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <GPIO_off_init+0xa0>)
 8002d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fb08 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	f010 fb18 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <GPIO_off_init+0xa0>)
 8002d30:	2140      	movs	r1, #64	; 0x40
 8002d32:	2200      	movs	r2, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f006 faff 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d3a:	2064      	movs	r0, #100	; 0x64
 8002d3c:	f010 fb0f 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <GPIO_off_init+0xa0>)
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f006 faf6 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d4c:	2064      	movs	r0, #100	; 0x64
 8002d4e:	f010 fb06 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <GPIO_off_init+0xa0>)
 8002d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f006 faec 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d60:	2064      	movs	r0, #100	; 0x64
 8002d62:	f010 fafc 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <GPIO_off_init+0xa4>)
 8002d68:	2120      	movs	r1, #32
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f006 fae3 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d72:	2064      	movs	r0, #100	; 0x64
 8002d74:	f010 faf3 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <GPIO_off_init+0xa4>)
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 fada 	bl	8009338 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <GPIO_off_init+0x9c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f010 fac7 	bl	801331c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d8e:	e7ba      	b.n	8002d06 <GPIO_off_init+0x12>
 8002d90:	24000964 	.word	0x24000964
 8002d94:	58020800 	.word	0x58020800
 8002d98:	58020400 	.word	0x58020400

08002d9c <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <UART_TX_init+0xa4>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db4:	2200      	movs	r2, #0
 8002db6:	4923      	ldr	r1, [pc, #140]	; (8002e44 <UART_TX_init+0xa8>)
 8002db8:	f010 fcfc 	bl	80137b4 <osMessageQueueGet>
 8002dbc:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d121      	bne.n	8002e08 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <UART_TX_init+0xa8>)
 8002dc6:	889b      	ldrh	r3, [r3, #4]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd2:	d219      	bcs.n	8002e08 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <UART_TX_init+0xac>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <UART_TX_init+0xa8>)
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <UART_TX_init+0xa8>)
 8002de0:	8892      	ldrh	r2, [r2, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f013 fef4 	bl	8016bd0 <memcpy>
					free(msg.array);
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <UART_TX_init+0xa8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f013 fee7 	bl	8016bc0 <free>
					total_size += msg.size;
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <UART_TX_init+0xa8>)
 8002df4:	889b      	ldrh	r3, [r3, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f240 32b1 	movw	r2, #945	; 0x3b1
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d803      	bhi.n	8002e10 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ce      	beq.n	8002dac <UART_TX_init+0x10>
 8002e0e:	e000      	b.n	8002e12 <UART_TX_init+0x76>
						break;
 8002e10:	bf00      	nop

		if (total_size > 0) {
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <UART_TX_init+0xac>)
 8002e20:	480a      	ldr	r0, [pc, #40]	; (8002e4c <UART_TX_init+0xb0>)
 8002e22:	f00d fbb9 	bl	8010598 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002e26:	e001      	b.n	8002e2c <UART_TX_init+0x90>
				osThreadYield();
 8002e28:	f010 fa58 	bl	80132dc <osThreadYield>
			while (tx_flag == 0) {
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <UART_TX_init+0xb4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f9      	beq.n	8002e28 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <UART_TX_init+0xb4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002e3a:	f010 fa4f 	bl	80132dc <osThreadYield>
		total_size = 0;
 8002e3e:	e7b3      	b.n	8002da8 <UART_TX_init+0xc>
 8002e40:	24000c04 	.word	0x24000c04
 8002e44:	24000c08 	.word	0x24000c08
 8002e48:	24000cac 	.word	0x24000cac
 8002e4c:	240005ec 	.word	0x240005ec
 8002e50:	24000000 	.word	0x24000000

08002e54 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <Voltage_Monitor_init+0xbc>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e64:	2200      	movs	r2, #0
 8002e66:	2108      	movs	r1, #8
 8002e68:	f010 fb6b 	bl	8013542 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002e6c:	2014      	movs	r0, #20
 8002e6e:	f013 fe9f 	bl	8016bb0 <malloc>
 8002e72:	4603      	mov	r3, r0
 8002e74:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002e76:	2008      	movs	r0, #8
 8002e78:	f013 fe9a 	bl	8016bb0 <malloc>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff f8af 	bl	8001fe4 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002e86:	68b8      	ldr	r0, [r7, #8]
 8002e88:	f7ff f8fe 	bl	8002088 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	885a      	ldrh	r2, [r3, #2]
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <Voltage_Monitor_init+0xc0>)
 8002e92:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <Voltage_Monitor_init+0xc4>)
 8002e9a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <Voltage_Monitor_init+0xc8>)
 8002ea2:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	885a      	ldrh	r2, [r3, #2]
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <Voltage_Monitor_init+0xcc>)
 8002eaa:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	889a      	ldrh	r2, [r3, #4]
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <Voltage_Monitor_init+0xd0>)
 8002eb2:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	88da      	ldrh	r2, [r3, #6]
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <Voltage_Monitor_init+0xd4>)
 8002eba:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	899a      	ldrh	r2, [r3, #12]
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <Voltage_Monitor_init+0xd8>)
 8002ec2:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88da      	ldrh	r2, [r3, #6]
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <Voltage_Monitor_init+0xdc>)
 8002eca:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	889a      	ldrh	r2, [r3, #4]
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <Voltage_Monitor_init+0xe0>)
 8002ed2:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	89da      	ldrh	r2, [r3, #14]
 8002ed8:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <Voltage_Monitor_init+0xe4>)
 8002eda:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8a1a      	ldrh	r2, [r3, #16]
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <Voltage_Monitor_init+0xe8>)
 8002ee2:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	891a      	ldrh	r2, [r3, #8]
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <Voltage_Monitor_init+0xec>)
 8002eea:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	895a      	ldrh	r2, [r3, #10]
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <Voltage_Monitor_init+0xf0>)
 8002ef2:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8a5a      	ldrh	r2, [r3, #18]
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <Voltage_Monitor_init+0xf4>)
 8002efa:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f013 fe5f 	bl	8016bc0 <free>
		free(hk_adc3);
 8002f02:	68b8      	ldr	r0, [r7, #8]
 8002f04:	f013 fe5c 	bl	8016bc0 <free>

		osThreadYield();
 8002f08:	f010 f9e8 	bl	80132dc <osThreadYield>
	for (;;) {
 8002f0c:	e7a6      	b.n	8002e5c <Voltage_Monitor_init+0x8>
 8002f0e:	bf00      	nop
 8002f10:	24000c20 	.word	0x24000c20
 8002f14:	24000be2 	.word	0x24000be2
 8002f18:	24000be4 	.word	0x24000be4
 8002f1c:	24000be6 	.word	0x24000be6
 8002f20:	24000be8 	.word	0x24000be8
 8002f24:	24000bea 	.word	0x24000bea
 8002f28:	24000bec 	.word	0x24000bec
 8002f2c:	24000bee 	.word	0x24000bee
 8002f30:	24000bf0 	.word	0x24000bf0
 8002f34:	24000bf2 	.word	0x24000bf2
 8002f38:	24000bf4 	.word	0x24000bf4
 8002f3c:	24000bf6 	.word	0x24000bf6
 8002f40:	24000bf8 	.word	0x24000bf8
 8002f44:	24000bfa 	.word	0x24000bfa
 8002f48:	24000bfc 	.word	0x24000bfc

08002f4c <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <FLAG_init+0x38>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f010 fad1 	bl	8013500 <osEventFlagsGet>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0316 	and.w	r3, r3, #22
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <FLAG_init+0x38>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2116      	movs	r1, #22
 8002f72:	4618      	mov	r0, r3
 8002f74:	f010 fa92 	bl	801349c <osEventFlagsClear>
			enter_stop();
 8002f78:	f7ff f910 	bl	800219c <enter_stop>
		}
		osDelay(1);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f010 f9ee 	bl	801335e <osDelay>
	for (;;) {
 8002f82:	e7e7      	b.n	8002f54 <FLAG_init+0x8>
 8002f84:	24000c20 	.word	0x24000c20

08002f88 <Flight_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Flight_init */
void Flight_init(void *argument)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Flight_init */
	osThreadSuspend(Flight_taskHandle);
 8002f90:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <Flight_init+0x12c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f010 f9c1 	bl	801331c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <Flight_init+0x130>)
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f006 f9c9 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fa6:	2064      	movs	r0, #100	; 0x64
 8002fa8:	f010 f9d9 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <Flight_init+0x130>)
 8002fae:	2120      	movs	r1, #32
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 f9c0 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fb8:	2064      	movs	r0, #100	; 0x64
 8002fba:	f010 f9d0 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <Flight_init+0x134>)
 8002fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f006 f9b6 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fcc:	2064      	movs	r0, #100	; 0x64
 8002fce:	f010 f9c6 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <Flight_init+0x134>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f006 f9ad 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fde:	2064      	movs	r0, #100	; 0x64
 8002fe0:	f010 f9bd 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <Flight_init+0x134>)
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f006 f9a4 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ff0:	2064      	movs	r0, #100	; 0x64
 8002ff2:	f010 f9b4 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <Flight_init+0x134>)
 8002ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 f99a 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003004:	2064      	movs	r0, #100	; 0x64
 8003006:	f010 f9aa 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <Flight_init+0x134>)
 800300c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003010:	2201      	movs	r2, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f006 f990 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(300);
 8003018:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800301c:	f010 f99f 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);// Enable n200v
 8003020:	4b26      	ldr	r3, [pc, #152]	; (80030bc <Flight_init+0x134>)
 8003022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003026:	2201      	movs	r2, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f006 f985 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(300);
 800302e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003032:	f010 f994 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);// Enable n800v
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <Flight_init+0x130>)
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	2201      	movs	r2, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f006 f97b 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(300);
 8003042:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003046:	f010 f98a 	bl	801335e <osDelay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800304a:	b672      	cpsid	i
}
 800304c:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2320      	movs	r3, #32
 8003054:	4a1a      	ldr	r2, [pc, #104]	; (80030c0 <Flight_init+0x138>)
 8003056:	2100      	movs	r1, #0
 8003058:	481a      	ldr	r0, [pc, #104]	; (80030c4 <Flight_init+0x13c>)
 800305a:	f002 fdd1 	bl	8005c00 <HAL_DAC_Start_DMA>
		HK_ON = 1;
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <Flight_init+0x140>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8003064:	210c      	movs	r1, #12
 8003066:	4819      	ldr	r0, [pc, #100]	; (80030cc <Flight_init+0x144>)
 8003068:	f00b fd6a 	bl	800eb40 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <Flight_init+0x148>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 8003072:	2100      	movs	r1, #0
 8003074:	4817      	ldr	r0, [pc, #92]	; (80030d4 <Flight_init+0x14c>)
 8003076:	f00b fd63 	bl	800eb40 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <Flight_init+0x150>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]

		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <Flight_init+0x154>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2104      	movs	r1, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f010 f9c4 	bl	8013414 <osEventFlagsSet>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <Flight_init+0x154>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f010 f9be 	bl	8013414 <osEventFlagsSet>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <Flight_init+0x154>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f010 f9b8 	bl	8013414 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 80030a4:	b662      	cpsie	i
}
 80030a6:	bf00      	nop

		__enable_irq();

		osThreadSuspend(Flight_taskHandle);
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <Flight_init+0x12c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f010 f935 	bl	801331c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80030b2:	e772      	b.n	8002f9a <Flight_init+0x12>
 80030b4:	24000bd0 	.word	0x24000bd0
 80030b8:	58020400 	.word	0x58020400
 80030bc:	58020800 	.word	0x58020800
 80030c0:	2400000c 	.word	0x2400000c
 80030c4:	240002f4 	.word	0x240002f4
 80030c8:	24000c1c 	.word	0x24000c1c
 80030cc:	24000554 	.word	0x24000554
 80030d0:	24000c1b 	.word	0x24000c1b
 80030d4:	24000508 	.word	0x24000508
 80030d8:	24000c1a 	.word	0x24000c1a
 80030dc:	24000c20 	.word	0x24000c20

080030e0 <UnFlight_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UnFlight_init */
void UnFlight_init(void *argument)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UnFlight_init */
	osThreadSuspend(UnFlight_taskHandle);
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <UnFlight_init+0xe0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f010 f915 	bl	801331c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80030f2:	2100      	movs	r1, #0
 80030f4:	4833      	ldr	r0, [pc, #204]	; (80031c4 <UnFlight_init+0xe4>)
 80030f6:	f00b fe7d 	bl	800edf4 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80030fa:	210c      	movs	r1, #12
 80030fc:	4832      	ldr	r0, [pc, #200]	; (80031c8 <UnFlight_init+0xe8>)
 80030fe:	f00b fe79 	bl	800edf4 <HAL_TIM_OC_Stop_IT>
		osDelay(100);
 8003102:	2064      	movs	r0, #100	; 0x64
 8003104:	f010 f92b 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET); // Enable n800v
 8003108:	4b30      	ldr	r3, [pc, #192]	; (80031cc <UnFlight_init+0xec>)
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	2200      	movs	r2, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f006 f912 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003114:	2064      	movs	r0, #100	; 0x64
 8003116:	f010 f922 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET); // Enable n200v
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <UnFlight_init+0xf0>)
 800311c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003120:	2200      	movs	r2, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f006 f908 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003128:	2064      	movs	r0, #100	; 0x64
 800312a:	f010 f918 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v off pc9
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <UnFlight_init+0xf0>)
 8003130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003134:	2200      	movs	r2, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f006 f8fe 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 800313c:	2064      	movs	r0, #100	; 0x64
 800313e:	f010 f90e 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v off pc8
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <UnFlight_init+0xf0>)
 8003144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003148:	2200      	movs	r2, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f006 f8f4 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003150:	2064      	movs	r0, #100	; 0x64
 8003152:	f010 f904 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 off pc6
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <UnFlight_init+0xf0>)
 8003158:	2140      	movs	r1, #64	; 0x40
 800315a:	2200      	movs	r2, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f006 f8eb 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003162:	2064      	movs	r0, #100	; 0x64
 8003164:	f010 f8fb 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v off pc7
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <UnFlight_init+0xf0>)
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	2200      	movs	r2, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f006 f8e2 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f010 f8f2 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 off pc1
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <UnFlight_init+0xf0>)
 800317c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003180:	2200      	movs	r2, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f006 f8d8 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 8003188:	2064      	movs	r0, #100	; 0x64
 800318a:	f010 f8e8 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys off pb5
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <UnFlight_init+0xec>)
 8003190:	2120      	movs	r1, #32
 8003192:	2200      	movs	r2, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f006 f8cf 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 800319a:	2064      	movs	r0, #100	; 0x64
 800319c:	f010 f8df 	bl	801335e <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <UnFlight_init+0xec>)
 80031a2:	2104      	movs	r1, #4
 80031a4:	2200      	movs	r2, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 f8c6 	bl	8009338 <HAL_GPIO_WritePin>
		osDelay(100);
 80031ac:	2064      	movs	r0, #100	; 0x64
 80031ae:	f010 f8d6 	bl	801335e <osDelay>

		osThreadSuspend(UnFlight_taskHandle);
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <UnFlight_init+0xe0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f010 f8b0 	bl	801331c <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80031bc:	e799      	b.n	80030f2 <UnFlight_init+0x12>
 80031be:	bf00      	nop
 80031c0:	24000bd4 	.word	0x24000bd4
 80031c4:	24000508 	.word	0x24000508
 80031c8:	24000554 	.word	0x24000554
 80031cc:	58020400 	.word	0x58020400
 80031d0:	58020800 	.word	0x58020800

080031d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031e6:	f000 ff5b 	bl	80040a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40001000 	.word	0x40001000

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003200:	e7fe      	b.n	8003200 <Error_Handler+0x8>
	...

08003204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_MspInit+0x38>)
 800320c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_MspInit+0x38>)
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_MspInit+0x38>)
 800321c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	210f      	movs	r1, #15
 800322c:	f06f 0001 	mvn.w	r0, #1
 8003230:	f002 fc44 	bl	8005abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	58024400 	.word	0x58024400

08003240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08e      	sub	sp, #56	; 0x38
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7b      	ldr	r2, [pc, #492]	; (800344c <HAL_ADC_MspInit+0x20c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f040 8091 	bne.w	8003386 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003264:	4b7a      	ldr	r3, [pc, #488]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800326a:	4a79      	ldr	r2, [pc, #484]	; (8003450 <HAL_ADC_MspInit+0x210>)
 800326c:	f043 0320 	orr.w	r3, r3, #32
 8003270:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003274:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003288:	4a71      	ldr	r2, [pc, #452]	; (8003450 <HAL_ADC_MspInit+0x210>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003292:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	4a6a      	ldr	r2, [pc, #424]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	4a62      	ldr	r2, [pc, #392]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ce:	4b60      	ldr	r3, [pc, #384]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80032dc:	2333      	movs	r3, #51	; 0x33
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e0:	2303      	movs	r3, #3
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ec:	4619      	mov	r1, r3
 80032ee:	4859      	ldr	r0, [pc, #356]	; (8003454 <HAL_ADC_MspInit+0x214>)
 80032f0:	f005 fe5a 	bl	8008fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80032f4:	23ce      	movs	r3, #206	; 0xce
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f8:	2303      	movs	r3, #3
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	4619      	mov	r1, r3
 8003306:	4854      	ldr	r0, [pc, #336]	; (8003458 <HAL_ADC_MspInit+0x218>)
 8003308:	f005 fe4e 	bl	8008fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800330c:	2303      	movs	r3, #3
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003310:	2303      	movs	r3, #3
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331c:	4619      	mov	r1, r3
 800331e:	484f      	ldr	r0, [pc, #316]	; (800345c <HAL_ADC_MspInit+0x21c>)
 8003320:	f005 fe42 	bl	8008fa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003324:	4b4e      	ldr	r3, [pc, #312]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003326:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_ADC_MspInit+0x224>)
 8003328:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800332a:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800332c:	2209      	movs	r2, #9
 800332e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003336:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800333c:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800333e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003342:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800334c:	4b44      	ldr	r3, [pc, #272]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800334e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003352:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800335c:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003362:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003364:	2200      	movs	r2, #0
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003368:	483d      	ldr	r0, [pc, #244]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800336a:	f002 ffd5 	bl	8006318 <HAL_DMA_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003374:	f7ff ff40 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a39      	ldr	r2, [pc, #228]	; (8003460 <HAL_ADC_MspInit+0x220>)
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_ADC_MspInit+0x220>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003384:	e05e      	b.n	8003444 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_ADC_MspInit+0x228>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d159      	bne.n	8003444 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003390:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003396:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <HAL_ADC_MspInit+0x210>)
 8003398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80033b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_ADC_MspInit+0x210>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033d4:	f000 fe90 	bl	80040f8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80033d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80033dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80033e0:	f000 fe8a 	bl	80040f8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <HAL_ADC_MspInit+0x22c>)
 80033e6:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_ADC_MspInit+0x230>)
 80033e8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_ADC_MspInit+0x22c>)
 80033ec:	2273      	movs	r2, #115	; 0x73
 80033ee:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_ADC_MspInit+0x22c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <HAL_ADC_MspInit+0x22c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_ADC_MspInit+0x22c>)
 80033fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003402:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_ADC_MspInit+0x22c>)
 8003406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_ADC_MspInit+0x22c>)
 800340e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003412:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_ADC_MspInit+0x22c>)
 8003416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_ADC_MspInit+0x22c>)
 800341e:	2200      	movs	r2, #0
 8003420:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_ADC_MspInit+0x22c>)
 8003424:	2200      	movs	r2, #0
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003428:	4810      	ldr	r0, [pc, #64]	; (800346c <HAL_ADC_MspInit+0x22c>)
 800342a:	f002 ff75 	bl	8006318 <HAL_DMA_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003434:	f7ff fee0 	bl	80031f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_ADC_MspInit+0x22c>)
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_ADC_MspInit+0x22c>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003444:	bf00      	nop
 8003446:	3738      	adds	r7, #56	; 0x38
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40022000 	.word	0x40022000
 8003450:	58024400 	.word	0x58024400
 8003454:	58020800 	.word	0x58020800
 8003458:	58020000 	.word	0x58020000
 800345c:	58020400 	.word	0x58020400
 8003460:	24000204 	.word	0x24000204
 8003464:	40020010 	.word	0x40020010
 8003468:	58026000 	.word	0x58026000
 800346c:	2400027c 	.word	0x2400027c
 8003470:	40020028 	.word	0x40020028

08003474 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a34      	ldr	r2, [pc, #208]	; (8003564 <HAL_DAC_MspInit+0xf0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d161      	bne.n	800355a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 8003498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349c:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 800349e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 80034a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	4b2c      	ldr	r3, [pc, #176]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_DAC_MspInit+0xf4>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034d2:	2310      	movs	r3, #16
 80034d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d6:	2303      	movs	r3, #3
 80034d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4619      	mov	r1, r3
 80034e4:	4821      	ldr	r0, [pc, #132]	; (800356c <HAL_DAC_MspInit+0xf8>)
 80034e6:	f005 fd5f 	bl	8008fa8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_DAC_MspInit+0x100>)
 80034ee:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 80034f2:	2243      	movs	r2, #67	; 0x43
 80034f4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003508:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 800350c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003510:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003518:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 800351c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003520:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003524:	2200      	movs	r2, #0
 8003526:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800352e:	4810      	ldr	r0, [pc, #64]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003530:	f002 fef2 	bl	8006318 <HAL_DMA_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800353a:	f7ff fe5d 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_DAC_MspInit+0xfc>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2105      	movs	r1, #5
 800354e:	2036      	movs	r0, #54	; 0x36
 8003550:	f002 fab4 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003554:	2036      	movs	r0, #54	; 0x36
 8003556:	f002 facb 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40007400 	.word	0x40007400
 8003568:	58024400 	.word	0x58024400
 800356c:	58020000 	.word	0x58020000
 8003570:	24000308 	.word	0x24000308
 8003574:	40020088 	.word	0x40020088

08003578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0ba      	sub	sp, #232	; 0xe8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	22c0      	movs	r2, #192	; 0xc0
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f013 fb27 	bl	8016bec <memset>
  if(hi2c->Instance==I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a27      	ldr	r2, [pc, #156]	; (8003640 <HAL_I2C_MspInit+0xc8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d146      	bne.n	8003636 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035a8:	f04f 0208 	mov.w	r2, #8
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ba:	f107 0310 	add.w	r3, r7, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f007 fd7e 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80035ca:	f7ff fe15 	bl	80031f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 80035d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f4:	2312      	movs	r3, #18
 80035f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003606:	2304      	movs	r3, #4
 8003608:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003610:	4619      	mov	r1, r3
 8003612:	480d      	ldr	r0, [pc, #52]	; (8003648 <HAL_I2C_MspInit+0xd0>)
 8003614:	f005 fcc8 	bl	8008fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 800361a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 8003620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_I2C_MspInit+0xcc>)
 800362a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800362e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003636:	bf00      	nop
 8003638:	37e8      	adds	r7, #232	; 0xe8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40005400 	.word	0x40005400
 8003644:	58024400 	.word	0x58024400
 8003648:	58020400 	.word	0x58020400

0800364c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0b2      	sub	sp, #200	; 0xc8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003654:	f107 0308 	add.w	r3, r7, #8
 8003658:	22c0      	movs	r2, #192	; 0xc0
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f013 fac5 	bl	8016bec <memset>
  if(hrtc->Instance==RTC)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <HAL_RTC_MspInit+0x5c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d118      	bne.n	800369e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800366c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RTC_MspInit+0x60>)
 800367a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800367e:	f107 0308 	add.w	r3, r7, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f007 fd1c 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800368e:	f7ff fdb3 	bl	80031f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <HAL_RTC_MspInit+0x64>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <HAL_RTC_MspInit+0x64>)
 8003698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800369e:	bf00      	nop
 80036a0:	37c8      	adds	r7, #200	; 0xc8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	58004000 	.word	0x58004000
 80036ac:	00019300 	.word	0x00019300
 80036b0:	58024400 	.word	0x58024400

080036b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0bc      	sub	sp, #240	; 0xf0
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036cc:	f107 0318 	add.w	r3, r7, #24
 80036d0:	22c0      	movs	r2, #192	; 0xc0
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f013 fa89 	bl	8016bec <memset>
  if(hspi->Instance==SPI1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_SPI_MspInit+0x15c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d145      	bne.n	8003770 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f4:	f107 0318 	add.w	r3, r7, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f007 fce1 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003704:	f7ff fd78 	bl	80031f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003708:	4b42      	ldr	r3, [pc, #264]	; (8003814 <HAL_SPI_MspInit+0x160>)
 800370a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800370e:	4a41      	ldr	r2, [pc, #260]	; (8003814 <HAL_SPI_MspInit+0x160>)
 8003710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003718:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <HAL_SPI_MspInit+0x160>)
 800371a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800371e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_SPI_MspInit+0x160>)
 8003728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372c:	4a39      	ldr	r2, [pc, #228]	; (8003814 <HAL_SPI_MspInit+0x160>)
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_SPI_MspInit+0x160>)
 8003738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003744:	2318      	movs	r3, #24
 8003746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800375c:	2305      	movs	r3, #5
 800375e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003762:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003766:	4619      	mov	r1, r3
 8003768:	482b      	ldr	r0, [pc, #172]	; (8003818 <HAL_SPI_MspInit+0x164>)
 800376a:	f005 fc1d 	bl	8008fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800376e:	e04a      	b.n	8003806 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <HAL_SPI_MspInit+0x168>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d145      	bne.n	8003806 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800377a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003786:	2300      	movs	r3, #0
 8003788:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378a:	f107 0318 	add.w	r3, r7, #24
 800378e:	4618      	mov	r0, r3
 8003790:	f007 fc96 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800379a:	f7ff fd2d 	bl	80031f8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_SPI_MspInit+0x160>)
 80037ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037f4:	2305      	movs	r3, #5
 80037f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	; (8003818 <HAL_SPI_MspInit+0x164>)
 8003802:	f005 fbd1 	bl	8008fa8 <HAL_GPIO_Init>
}
 8003806:	bf00      	nop
 8003808:	37f0      	adds	r7, #240	; 0xf0
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40013000 	.word	0x40013000
 8003814:	58024400 	.word	0x58024400
 8003818:	58020400 	.word	0x58020400
 800381c:	40003800 	.word	0x40003800

08003820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a37      	ldr	r2, [pc, #220]	; (800390c <HAL_TIM_Base_MspInit+0xec>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d12f      	bne.n	8003892 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 8003834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003838:	4a35      	ldr	r2, [pc, #212]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003842:	4b33      	ldr	r3, [pc, #204]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 8003844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	2105      	movs	r1, #5
 8003854:	2018      	movs	r0, #24
 8003856:	f002 f931 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800385a:	2018      	movs	r0, #24
 800385c:	f002 f948 	bl	8005af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2105      	movs	r1, #5
 8003864:	2019      	movs	r0, #25
 8003866:	f002 f929 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800386a:	2019      	movs	r0, #25
 800386c:	f002 f940 	bl	8005af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2105      	movs	r1, #5
 8003874:	201a      	movs	r0, #26
 8003876:	f002 f921 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800387a:	201a      	movs	r0, #26
 800387c:	f002 f938 	bl	8005af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003880:	2200      	movs	r2, #0
 8003882:	2105      	movs	r1, #5
 8003884:	201b      	movs	r0, #27
 8003886:	f002 f919 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800388a:	201b      	movs	r0, #27
 800388c:	f002 f930 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003890:	e038      	b.n	8003904 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389a:	d117      	bne.n	80038cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 800389e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 80038ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2105      	movs	r1, #5
 80038be:	201c      	movs	r0, #28
 80038c0:	f002 f8fc 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038c4:	201c      	movs	r0, #28
 80038c6:	f002 f913 	bl	8005af0 <HAL_NVIC_EnableIRQ>
}
 80038ca:	e01b      	b.n	8003904 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_TIM_Base_MspInit+0xf4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d116      	bne.n	8003904 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 80038d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038dc:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_TIM_Base_MspInit+0xf0>)
 80038e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2105      	movs	r1, #5
 80038f8:	201d      	movs	r0, #29
 80038fa:	f002 f8df 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038fe:	201d      	movs	r0, #29
 8003900:	f002 f8f6 	bl	8005af0 <HAL_NVIC_EnableIRQ>
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40010000 	.word	0x40010000
 8003910:	58024400 	.word	0x58024400
 8003914:	40000400 	.word	0x40000400

08003918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_TIM_MspPostInit+0xb8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d120      	bne.n	800397c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 800393c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 800394c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395e:	2302      	movs	r3, #2
 8003960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800396a:	2301      	movs	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	4818      	ldr	r0, [pc, #96]	; (80039d8 <HAL_TIM_MspPostInit+0xc0>)
 8003976:	f005 fb17 	bl	8008fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800397a:	e024      	b.n	80039c6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d11f      	bne.n	80039c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 8003988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398c:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_TIM_MspPostInit+0xbc>)
 8003998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ba:	f107 0314 	add.w	r3, r7, #20
 80039be:	4619      	mov	r1, r3
 80039c0:	4806      	ldr	r0, [pc, #24]	; (80039dc <HAL_TIM_MspPostInit+0xc4>)
 80039c2:	f005 faf1 	bl	8008fa8 <HAL_GPIO_Init>
}
 80039c6:	bf00      	nop
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	58024400 	.word	0x58024400
 80039d8:	58020000 	.word	0x58020000
 80039dc:	58020400 	.word	0x58020400

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0ba      	sub	sp, #232	; 0xe8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f8:	f107 0310 	add.w	r3, r7, #16
 80039fc:	22c0      	movs	r2, #192	; 0xc0
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f013 f8f3 	bl	8016bec <memset>
  if(huart->Instance==USART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <HAL_UART_MspInit+0x130>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d17b      	bne.n	8003b08 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a10:	f04f 0201 	mov.w	r2, #1
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a1c:	2318      	movs	r3, #24
 8003a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	4618      	mov	r0, r3
 8003a28:	f007 fb4a 	bl	800b0c0 <HAL_RCCEx_PeriphCLKConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a32:	f7ff fbe1 	bl	80031f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3c:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a3e:	f043 0310 	orr.w	r3, r3, #16
 8003a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5a:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_UART_MspInit+0x134>)
 8003a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a96:	4619      	mov	r1, r3
 8003a98:	481f      	ldr	r0, [pc, #124]	; (8003b18 <HAL_UART_MspInit+0x138>)
 8003a9a:	f005 fa85 	bl	8008fa8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_UART_MspInit+0x140>)
 8003aa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003aa6:	222a      	movs	r2, #42	; 0x2a
 8003aa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003aac:	2240      	movs	r2, #64	; 0x40
 8003aae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ac4:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003adc:	480f      	ldr	r0, [pc, #60]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003ade:	f002 fc1b 	bl	8006318 <HAL_DMA_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ae8:	f7ff fb86 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <HAL_UART_MspInit+0x13c>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2105      	movs	r1, #5
 8003afc:	2025      	movs	r0, #37	; 0x25
 8003afe:	f001 ffdd 	bl	8005abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b02:	2025      	movs	r0, #37	; 0x25
 8003b04:	f001 fff4 	bl	8005af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b08:	bf00      	nop
 8003b0a:	37e8      	adds	r7, #232	; 0xe8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40011000 	.word	0x40011000
 8003b14:	58024400 	.word	0x58024400
 8003b18:	58020000 	.word	0x58020000
 8003b1c:	24000680 	.word	0x24000680
 8003b20:	40020040 	.word	0x40020040

08003b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b090      	sub	sp, #64	; 0x40
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d827      	bhi.n	8003b82 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003b32:	2200      	movs	r2, #0
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	2036      	movs	r0, #54	; 0x36
 8003b38:	f001 ffc0 	bl	8005abc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b3c:	2036      	movs	r0, #54	; 0x36
 8003b3e:	f001 ffd7 	bl	8005af0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <HAL_InitTick+0xc4>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_InitTick+0xc8>)
 8003b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_InitTick+0xc8>)
 8003b50:	f043 0310 	orr.w	r3, r3, #16
 8003b54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_InitTick+0xc8>)
 8003b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b66:	f107 0210 	add.w	r2, r7, #16
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f007 fa63 	bl	800b03c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_InitTick+0x6a>
 8003b80:	e001      	b.n	8003b86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e02b      	b.n	8003bde <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b86:	f007 fa2d 	bl	800afe4 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003b8c:	e004      	b.n	8003b98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b8e:	f007 fa29 	bl	800afe4 <HAL_RCC_GetPCLK1Freq>
 8003b92:	4603      	mov	r3, r0
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_InitTick+0xcc>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_InitTick+0xd4>)
 8003baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003bb4:	4a0f      	ldr	r2, [pc, #60]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003bc6:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bc8:	f00a feeb 	bl	800e9a2 <HAL_TIM_Base_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003bd2:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003bd4:	f00a ff3c 	bl	800ea50 <HAL_TIM_Base_Start_IT>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e000      	b.n	8003bde <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3740      	adds	r7, #64	; 0x40
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	24000094 	.word	0x24000094
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	431bde83 	.word	0x431bde83
 8003bf4:	24001094 	.word	0x24001094
 8003bf8:	40001000 	.word	0x40001000

08003bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003c00:	e7fe      	b.n	8003c00 <NMI_Handler+0x4>

08003c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c06:	e7fe      	b.n	8003c06 <HardFault_Handler+0x4>

08003c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <MemManage_Handler+0x4>

08003c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <BusFault_Handler+0x4>

08003c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <UsageFault_Handler+0x4>

08003c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <DMA1_Stream0_IRQHandler+0x10>)
 8003c2e:	f003 fe9d 	bl	800796c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	24000204 	.word	0x24000204

08003c3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <DMA1_Stream1_IRQHandler+0x10>)
 8003c42:	f003 fe93 	bl	800796c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2400027c 	.word	0x2400027c

08003c50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <DMA1_Stream2_IRQHandler+0x10>)
 8003c56:	f003 fe89 	bl	800796c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	24000680 	.word	0x24000680

08003c64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003c68:	4802      	ldr	r0, [pc, #8]	; (8003c74 <DMA1_Stream5_IRQHandler+0x10>)
 8003c6a:	f003 fe7f 	bl	800796c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	24000308 	.word	0x24000308

08003c78 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <TIM1_BRK_IRQHandler+0x10>)
 8003c7e:	f00b f9fe 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	24000508 	.word	0x24000508

08003c8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c90:	4802      	ldr	r0, [pc, #8]	; (8003c9c <TIM1_UP_IRQHandler+0x10>)
 8003c92:	f00b f9f4 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	24000508 	.word	0x24000508

08003ca0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003ca6:	f00b f9ea 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	24000508 	.word	0x24000508

08003cb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <TIM1_CC_IRQHandler+0x10>)
 8003cba:	f00b f9e0 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	24000508 	.word	0x24000508

08003cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <TIM2_IRQHandler+0x10>)
 8003cce:	f00b f9d6 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	24000554 	.word	0x24000554

08003cdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ce0:	4802      	ldr	r0, [pc, #8]	; (8003cec <TIM3_IRQHandler+0x10>)
 8003ce2:	f00b f9cc 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	240005a0 	.word	0x240005a0

08003cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cf4:	4802      	ldr	r0, [pc, #8]	; (8003d00 <USART1_IRQHandler+0x10>)
 8003cf6:	f00c fd85 	bl	8010804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	240005ec 	.word	0x240005ec

08003d04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <TIM6_DAC_IRQHandler+0x20>)
 8003d0a:	791b      	ldrb	r3, [r3, #4]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003d12:	4804      	ldr	r0, [pc, #16]	; (8003d24 <TIM6_DAC_IRQHandler+0x20>)
 8003d14:	f002 f881 	bl	8005e1a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003d18:	4803      	ldr	r0, [pc, #12]	; (8003d28 <TIM6_DAC_IRQHandler+0x24>)
 8003d1a:	f00b f9b0 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	240002f4 	.word	0x240002f4
 8003d28:	24001094 	.word	0x24001094

08003d2c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <ITM_SendChar+0x48>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <ITM_SendChar+0x48>)
 8003d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d40:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <ITM_SendChar+0x4c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <ITM_SendChar+0x4c>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003d4e:	bf00      	nop
 8003d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f8      	beq.n	8003d50 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003d5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	6013      	str	r3, [r2, #0]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000edfc 	.word	0xe000edfc
 8003d78:	e0000e00 	.word	0xe0000e00

08003d7c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e00a      	b.n	8003da4 <_read+0x28>
		*ptr++ = __io_getchar();
 8003d8e:	f3af 8000 	nop.w
 8003d92:	4601      	mov	r1, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	60ba      	str	r2, [r7, #8]
 8003d9a:	b2ca      	uxtb	r2, r1
 8003d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbf0      	blt.n	8003d8e <_read+0x12>
	}

	return len;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e009      	b.n	8003ddc <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ffab 	bl	8003d2c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbf1      	blt.n	8003dc8 <_write+0x12>
	}
	return len;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_close>:

int _close(int file) {
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e16:	605a      	str	r2, [r3, #4]
	return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_isatty>:

int _isatty(int file) {
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <_sbrk+0x64>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <_sbrk+0x68>)
 8003e78:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <_sbrk+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <_sbrk+0x40>
		errno = ENOMEM;
 8003e88:	f012 fe68 	bl	8016b5c <__errno>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	220c      	movs	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e96:	e009      	b.n	8003eac <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <_sbrk+0x64>)
 8003ea8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	24080000 	.word	0x24080000
 8003eb8:	00000400 	.word	0x00000400
 8003ebc:	240010e0 	.word	0x240010e0
 8003ec0:	24005a48 	.word	0x24005a48

08003ec4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003ec8:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <SystemInit+0xe4>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <SystemInit+0xe4>)
 8003ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <SystemInit+0xe8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d807      	bhi.n	8003ef4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <SystemInit+0xe8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 030f 	bic.w	r3, r3, #15
 8003eec:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <SystemInit+0xe8>)
 8003eee:	f043 0307 	orr.w	r3, r3, #7
 8003ef2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <SystemInit+0xec>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <SystemInit+0xec>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <SystemInit+0xec>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <SystemInit+0xec>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4929      	ldr	r1, [pc, #164]	; (8003fb0 <SystemInit+0xec>)
 8003f0c:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <SystemInit+0xf0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <SystemInit+0xe8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003f1e:	4b23      	ldr	r3, [pc, #140]	; (8003fac <SystemInit+0xe8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 030f 	bic.w	r3, r3, #15
 8003f26:	4a21      	ldr	r2, [pc, #132]	; (8003fac <SystemInit+0xe8>)
 8003f28:	f043 0307 	orr.w	r3, r3, #7
 8003f2c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <SystemInit+0xec>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <SystemInit+0xec>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <SystemInit+0xec>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <SystemInit+0xec>)
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <SystemInit+0xf4>)
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <SystemInit+0xec>)
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <SystemInit+0xf8>)
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <SystemInit+0xec>)
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <SystemInit+0xfc>)
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <SystemInit+0xec>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <SystemInit+0xec>)
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <SystemInit+0xfc>)
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <SystemInit+0xec>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <SystemInit+0xec>)
 8003f66:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <SystemInit+0xfc>)
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <SystemInit+0xec>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <SystemInit+0xec>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <SystemInit+0xec>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <SystemInit+0xec>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <SystemInit+0x100>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <SystemInit+0x104>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8e:	d202      	bcs.n	8003f96 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <SystemInit+0x108>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <SystemInit+0x10c>)
 8003f98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	52002000 	.word	0x52002000
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fb8:	02020200 	.word	0x02020200
 8003fbc:	01ff0000 	.word	0x01ff0000
 8003fc0:	01010280 	.word	0x01010280
 8003fc4:	5c001000 	.word	0x5c001000
 8003fc8:	ffff0000 	.word	0xffff0000
 8003fcc:	51008108 	.word	0x51008108
 8003fd0:	52004000 	.word	0x52004000

08003fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800400c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fd8:	f7ff ff74 	bl	8003ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fde:	490d      	ldr	r1, [pc, #52]	; (8004014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe4:	e002      	b.n	8003fec <LoopCopyDataInit>

08003fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fea:	3304      	adds	r3, #4

08003fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff0:	d3f9      	bcc.n	8003fe6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff4:	4c0a      	ldr	r4, [pc, #40]	; (8004020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff8:	e001      	b.n	8003ffe <LoopFillZerobss>

08003ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ffc:	3204      	adds	r2, #4

08003ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004000:	d3fb      	bcc.n	8003ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004002:	f012 fdb1 	bl	8016b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004006:	f7fc ffe1 	bl	8000fcc <main>
  bx  lr
 800400a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800400c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004010:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004014:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8004018:	08017ab8 	.word	0x08017ab8
  ldr r2, =_sbss
 800401c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004020:	24005a48 	.word	0x24005a48

08004024 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004024:	e7fe      	b.n	8004024 <ADC3_IRQHandler>
	...

08004028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800402e:	2003      	movs	r0, #3
 8004030:	f001 fd39 	bl	8005aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004034:	f006 fe2c 	bl	800ac90 <HAL_RCC_GetSysClockFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_Init+0x68>)
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	4913      	ldr	r1, [pc, #76]	; (8004094 <HAL_Init+0x6c>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_Init+0x68>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <HAL_Init+0x6c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_Init+0x70>)
 800406a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_Init+0x74>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004072:	2005      	movs	r0, #5
 8004074:	f7ff fd56 	bl	8003b24 <HAL_InitTick>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e002      	b.n	8004088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004082:	f7ff f8bf 	bl	8003204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	58024400 	.word	0x58024400
 8004094:	08017a04 	.word	0x08017a04
 8004098:	24000090 	.word	0x24000090
 800409c:	2400008c 	.word	0x2400008c

080040a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_IncTick+0x20>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_IncTick+0x24>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_IncTick+0x24>)
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	24000098 	.word	0x24000098
 80040c4:	240010e4 	.word	0x240010e4

080040c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return uwTick;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_GetTick+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	240010e4 	.word	0x240010e4

080040e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_GetREVID+0x14>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0c1b      	lsrs	r3, r3, #16
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	5c001000 	.word	0x5c001000

080040f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	43db      	mvns	r3, r3
 800410a:	401a      	ands	r2, r3
 800410c:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	58000400 	.word	0x58000400

08004124 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3360      	adds	r3, #96	; 0x60
 800419e:	461a      	mov	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	430b      	orrs	r3, r1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	611a      	str	r2, [r3, #16]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3360      	adds	r3, #96	; 0x60
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	601a      	str	r2, [r3, #0]
  }
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3330      	adds	r3, #48	; 0x30
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	211f      	movs	r1, #31
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	401a      	ands	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	f003 011f 	and.w	r1, r3, #31
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	431a      	orrs	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f023 0203 	bic.w	r2, r3, #3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3314      	adds	r3, #20
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0e5b      	lsrs	r3, r3, #25
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0d1b      	lsrs	r3, r3, #20
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2107      	movs	r1, #7
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	401a      	ands	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0d1b      	lsrs	r3, r3, #20
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004348:	43db      	mvns	r3, r3
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f003 0318 	and.w	r3, r3, #24
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004354:	40d9      	lsrs	r1, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	400b      	ands	r3, r1
 800435a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	000fffff 	.word	0x000fffff

08004378 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 031f 	and.w	r3, r3, #31
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6093      	str	r3, [r2, #8]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	5fffffc0 	.word	0x5fffffc0

080043b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043cc:	d101      	bne.n	80043d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <LL_ADC_EnableInternalRegulator+0x24>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	6fffffc0 	.word	0x6fffffc0

08004408 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441c:	d101      	bne.n	8004422 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <LL_ADC_Enable+0x24>)
 800443e:	4013      	ands	r3, r2
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	7fffffc0 	.word	0x7fffffc0

08004458 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <LL_ADC_Disable+0x24>)
 8004466:	4013      	ands	r3, r2
 8004468:	f043 0202 	orr.w	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	7fffffc0 	.word	0x7fffffc0

08004480 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <LL_ADC_IsEnabled+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_IsEnabled+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d101      	bne.n	80044be <LL_ADC_IsDisableOngoing+0x18>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_ADC_IsDisableOngoing+0x1a>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <LL_ADC_REG_StartConversion+0x24>)
 80044da:	4013      	ands	r3, r2
 80044dc:	f043 0204 	orr.w	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	7fffffc0 	.word	0x7fffffc0

080044f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d101      	bne.n	800450c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d101      	bne.n	8004532 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e18f      	b.n	800487a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fe fe69 	bl	8003240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff19 	bl	80043b8 <LL_ADC_IsDeepPowerDownEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff feff 	bl	8004394 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff34 	bl	8004408 <LL_ADC_IsInternalRegulatorEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d114      	bne.n	80045d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff18 	bl	80043e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b0:	4b87      	ldr	r3, [pc, #540]	; (80047d0 <HAL_ADC_Init+0x290>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	4a87      	ldr	r2, [pc, #540]	; (80047d4 <HAL_ADC_Init+0x294>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045c2:	e002      	b.n	80045ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f9      	bne.n	80045c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff17 	bl	8004408 <LL_ADC_IsInternalRegulatorEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff77 	bl	80044f4 <LL_ADC_REG_IsConversionOngoing>
 8004606:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8129 	bne.w	8004868 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8125 	bne.w	8004868 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004626:	f043 0202 	orr.w	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff24 	bl	8004480 <LL_ADC_IsEnabled>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d136      	bne.n	80046ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a65      	ldr	r2, [pc, #404]	; (80047d8 <HAL_ADC_Init+0x298>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_ADC_Init+0x112>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a63      	ldr	r2, [pc, #396]	; (80047dc <HAL_ADC_Init+0x29c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10e      	bne.n	8004670 <HAL_ADC_Init+0x130>
 8004652:	4861      	ldr	r0, [pc, #388]	; (80047d8 <HAL_ADC_Init+0x298>)
 8004654:	f7ff ff14 	bl	8004480 <LL_ADC_IsEnabled>
 8004658:	4604      	mov	r4, r0
 800465a:	4860      	ldr	r0, [pc, #384]	; (80047dc <HAL_ADC_Init+0x29c>)
 800465c:	f7ff ff10 	bl	8004480 <LL_ADC_IsEnabled>
 8004660:	4603      	mov	r3, r0
 8004662:	4323      	orrs	r3, r4
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e008      	b.n	8004682 <HAL_ADC_Init+0x142>
 8004670:	485b      	ldr	r0, [pc, #364]	; (80047e0 <HAL_ADC_Init+0x2a0>)
 8004672:	f7ff ff05 	bl	8004480 <LL_ADC_IsEnabled>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d012      	beq.n	80046ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a53      	ldr	r2, [pc, #332]	; (80047d8 <HAL_ADC_Init+0x298>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_ADC_Init+0x15a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a51      	ldr	r2, [pc, #324]	; (80047dc <HAL_ADC_Init+0x29c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_ADC_Init+0x15e>
 800469a:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_ADC_Init+0x2a4>)
 800469c:	e000      	b.n	80046a0 <HAL_ADC_Init+0x160>
 800469e:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_ADC_Init+0x2a8>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7ff fd3c 	bl	8004124 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046ac:	f7ff fd18 	bl	80040e0 <HAL_GetREVID>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d914      	bls.n	80046e4 <HAL_ADC_Init+0x1a4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d110      	bne.n	80046e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7d5b      	ldrb	r3, [r3, #21]
 80046c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7f1b      	ldrb	r3, [r3, #28]
 80046d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046dc:	f043 030c 	orr.w	r3, r3, #12
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e00d      	b.n	8004700 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7d5b      	ldrb	r3, [r3, #21]
 80046e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7f1b      	ldrb	r3, [r3, #28]
 80046fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7f1b      	ldrb	r3, [r3, #28]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	3b01      	subs	r3, #1
 800470e:	045b      	lsls	r3, r3, #17
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_ADC_Init+0x2ac>)
 800473a:	4013      	ands	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	430b      	orrs	r3, r1
 8004744:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fed2 	bl	80044f4 <LL_ADC_REG_IsConversionOngoing>
 8004750:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fedf 	bl	800451a <LL_ADC_INJ_IsConversionOngoing>
 800475c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d15f      	bne.n	8004824 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d15c      	bne.n	8004824 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7d1b      	ldrb	r3, [r3, #20]
 800476e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <HAL_ADC_Init+0x2b0>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	430b      	orrs	r3, r1
 800478a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004792:	2b01      	cmp	r3, #1
 8004794:	d130      	bne.n	80047f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_ADC_Init+0x2b4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047aa:	3a01      	subs	r2, #1
 80047ac:	0411      	lsls	r1, r2, #16
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047b2:	4311      	orrs	r1, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047be:	430a      	orrs	r2, r1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	611a      	str	r2, [r3, #16]
 80047cc:	e01c      	b.n	8004808 <HAL_ADC_Init+0x2c8>
 80047ce:	bf00      	nop
 80047d0:	2400008c 	.word	0x2400008c
 80047d4:	053e2d63 	.word	0x053e2d63
 80047d8:	40022000 	.word	0x40022000
 80047dc:	40022100 	.word	0x40022100
 80047e0:	58026000 	.word	0x58026000
 80047e4:	40022300 	.word	0x40022300
 80047e8:	58026300 	.word	0x58026300
 80047ec:	fff0c003 	.word	0xfff0c003
 80047f0:	ffffbffc 	.word	0xffffbffc
 80047f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fdec 	bl	80053fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f023 010f 	bic.w	r1, r3, #15
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	1e5a      	subs	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
 8004844:	e007      	b.n	8004856 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 020f 	bic.w	r2, r2, #15
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
 8004866:	e007      	b.n	8004878 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0210 	orr.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a55      	ldr	r2, [pc, #340]	; (80049ec <HAL_ADC_Start_DMA+0x168>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_ADC_Start_DMA+0x20>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <HAL_ADC_Start_DMA+0x16c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_Start_DMA+0x24>
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_ADC_Start_DMA+0x170>)
 80048a6:	e000      	b.n	80048aa <HAL_ADC_Start_DMA+0x26>
 80048a8:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_ADC_Start_DMA+0x174>)
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fd64 	bl	8004378 <LL_ADC_GetMultimode>
 80048b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe1c 	bl	80044f4 <LL_ADC_REG_IsConversionOngoing>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 808c 	bne.w	80049dc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_Start_DMA+0x4e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e087      	b.n	80049e2 <HAL_ADC_Start_DMA+0x15e>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d002      	beq.n	80048ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d170      	bne.n	80049ce <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fc07 	bl	8005100 <ADC_Enable>
 80048f2:	4603      	mov	r3, r0
 80048f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d163      	bne.n	80049c4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_ADC_Start_DMA+0x178>)
 8004902:	4013      	ands	r3, r2
 8004904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <HAL_ADC_Start_DMA+0x16c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d002      	beq.n	800491c <HAL_ADC_Start_DMA+0x98>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	e000      	b.n	800491e <HAL_ADC_Start_DMA+0x9a>
 800491c:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_ADC_Start_DMA+0x168>)
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	4293      	cmp	r3, r2
 8004924:	d002      	beq.n	800492c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f023 0206 	bic.w	r2, r3, #6
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	659a      	str	r2, [r3, #88]	; 0x58
 8004950:	e002      	b.n	8004958 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_ADC_Start_DMA+0x17c>)
 800495e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004964:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_ADC_Start_DMA+0x180>)
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_ADC_Start_DMA+0x184>)
 800496e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	221c      	movs	r2, #28
 8004976:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0210 	orr.w	r2, r2, #16
 800498e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7ff fc89 	bl	80042b2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3340      	adds	r3, #64	; 0x40
 80049aa:	4619      	mov	r1, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f002 f80e 	bl	80069d0 <HAL_DMA_Start_IT>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fd85 	bl	80044cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049c2:	e00d      	b.n	80049e0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049cc:	e008      	b.n	80049e0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049da:	e001      	b.n	80049e0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
 80049de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40022100 	.word	0x40022100
 80049f4:	40022300 	.word	0x40022300
 80049f8:	58026300 	.word	0x58026300
 80049fc:	fffff0fe 	.word	0xfffff0fe
 8004a00:	080052d3 	.word	0x080052d3
 8004a04:	080053ab 	.word	0x080053ab
 8004a08:	080053c7 	.word	0x080053c7

08004a0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b0a1      	sub	sp, #132	; 0x84
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a65      	ldr	r2, [pc, #404]	; (8004bf8 <HAL_ADC_ConfigChannel+0x1b0>)
 8004a62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x2a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e32e      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x688>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fd38 	bl	80044f4 <LL_ADC_REG_IsConversionOngoing>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 8313 	bne.w	80050b2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db2c      	blt.n	8004aee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x6a>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0e9b      	lsrs	r3, r3, #26
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2201      	movs	r2, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	e016      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x98>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004aca:	2320      	movs	r3, #32
 8004acc:	e003      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	69d1      	ldr	r1, [r2, #28]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7ff fbad 	bl	800425a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fcf5 	bl	80044f4 <LL_ADC_REG_IsConversionOngoing>
 8004b0a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fd02 	bl	800451a <LL_ADC_INJ_IsConversionOngoing>
 8004b16:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80b8 	bne.w	8004c90 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 80b4 	bne.w	8004c90 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	461a      	mov	r2, r3
 8004b36:	f7ff fbcf 	bl	80042d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b3a:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <HAL_ADC_ConfigChannel+0x1b4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b46:	d10b      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x118>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	e01d      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x154>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x13e>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	e00a      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x154>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d02c      	beq.n	8004c00 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb4:	f7ff faea 	bl	800418c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6919      	ldr	r1, [r3, #16]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	7e5b      	ldrb	r3, [r3, #25]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d102      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x186>
 8004bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bcc:	e000      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x188>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f7ff fb14 	bl	80041fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6919      	ldr	r1, [r3, #16]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	7e1b      	ldrb	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x1a4>
 8004be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bea:	e000      	b.n	8004bee <HAL_ADC_ConfigChannel+0x1a6>
 8004bec:	2300      	movs	r3, #0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7ff faec 	bl	80041cc <LL_ADC_SetDataRightShift>
 8004bf4:	e04c      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x248>
 8004bf6:	bf00      	nop
 8004bf8:	47ff0000 	.word	0x47ff0000
 8004bfc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d107      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	069b      	lsls	r3, r3, #26
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d107      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c46:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	069b      	lsls	r3, r3, #26
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c6a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	069b      	lsls	r3, r3, #26
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fbf3 	bl	8004480 <LL_ADC_IsEnabled>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 8211 	bne.w	80050c4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7ff fb3e 	bl	8004330 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4aa1      	ldr	r2, [pc, #644]	; (8004f40 <HAL_ADC_ConfigChannel+0x4f8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f040 812e 	bne.w	8004f1c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x2a0>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0e9b      	lsrs	r3, r3, #26
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	bf94      	ite	ls
 8004ce0:	2301      	movls	r3, #1
 8004ce2:	2300      	movhi	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e019      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x2d4>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e003      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	bf94      	ite	ls
 8004d16:	2301      	movls	r3, #1
 8004d18:	2300      	movhi	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d079      	beq.n	8004e14 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x2f4>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	3301      	adds	r3, #1
 8004d34:	069b      	lsls	r3, r3, #26
 8004d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d3a:	e015      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x320>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e003      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	069b      	lsls	r3, r3, #26
 8004d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x340>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	0e9b      	lsrs	r3, r3, #26
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	e017      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x370>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004da0:	2320      	movs	r3, #32
 8004da2:	e003      	b.n	8004dac <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	3301      	adds	r3, #1
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2101      	movs	r1, #1
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	ea42 0103 	orr.w	r1, r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x396>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	051b      	lsls	r3, r3, #20
 8004ddc:	e018      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x3c8>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004df6:	2320      	movs	r3, #32
 8004df8:	e003      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e10:	430b      	orrs	r3, r1
 8004e12:	e07e      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x3e8>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0e9b      	lsrs	r3, r3, #26
 8004e26:	3301      	adds	r3, #1
 8004e28:	069b      	lsls	r3, r3, #26
 8004e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e2e:	e015      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x414>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e003      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	069b      	lsls	r3, r3, #26
 8004e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x434>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0e9b      	lsrs	r3, r3, #26
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7a:	e017      	b.n	8004eac <HAL_ADC_ConfigChannel+0x464>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	61bb      	str	r3, [r7, #24]
  return result;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e94:	2320      	movs	r3, #32
 8004e96:	e003      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	ea42 0103 	orr.w	r1, r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10d      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x490>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f003 021f 	and.w	r2, r3, #31
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	3b1e      	subs	r3, #30
 8004ed0:	051b      	lsls	r3, r3, #20
 8004ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	e01b      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x4c8>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	60fb      	str	r3, [r7, #12]
  return result;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e003      	b.n	8004efc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3301      	adds	r3, #1
 8004efe:	f003 021f 	and.w	r2, r3, #31
 8004f02:	4613      	mov	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	3b1e      	subs	r3, #30
 8004f0a:	051b      	lsls	r3, r3, #20
 8004f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f10:	430b      	orrs	r3, r1
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	6892      	ldr	r2, [r2, #8]
 8004f16:	4619      	mov	r1, r3
 8004f18:	f7ff f9de 	bl	80042d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f280 80cf 	bge.w	80050c4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a06      	ldr	r2, [pc, #24]	; (8004f44 <HAL_ADC_ConfigChannel+0x4fc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_ADC_ConfigChannel+0x4f2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_ADC_ConfigChannel+0x500>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d10a      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x508>
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <HAL_ADC_ConfigChannel+0x504>)
 8004f3c:	e009      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x50a>
 8004f3e:	bf00      	nop
 8004f40:	47ff0000 	.word	0x47ff0000
 8004f44:	40022000 	.word	0x40022000
 8004f48:	40022100 	.word	0x40022100
 8004f4c:	40022300 	.word	0x40022300
 8004f50:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <HAL_ADC_ConfigChannel+0x690>)
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff f90c 	bl	8004170 <LL_ADC_GetCommonPathInternalCh>
 8004f58:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5f      	ldr	r2, [pc, #380]	; (80050dc <HAL_ADC_ConfigChannel+0x694>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_ADC_ConfigChannel+0x526>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5d      	ldr	r2, [pc, #372]	; (80050e0 <HAL_ADC_ConfigChannel+0x698>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10e      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x544>
 8004f6e:	485b      	ldr	r0, [pc, #364]	; (80050dc <HAL_ADC_ConfigChannel+0x694>)
 8004f70:	f7ff fa86 	bl	8004480 <LL_ADC_IsEnabled>
 8004f74:	4604      	mov	r4, r0
 8004f76:	485a      	ldr	r0, [pc, #360]	; (80050e0 <HAL_ADC_ConfigChannel+0x698>)
 8004f78:	f7ff fa82 	bl	8004480 <LL_ADC_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4323      	orrs	r3, r4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e008      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x556>
 8004f8c:	4855      	ldr	r0, [pc, #340]	; (80050e4 <HAL_ADC_ConfigChannel+0x69c>)
 8004f8e:	f7ff fa77 	bl	8004480 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d07d      	beq.n	800509e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a50      	ldr	r2, [pc, #320]	; (80050e8 <HAL_ADC_ConfigChannel+0x6a0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d130      	bne.n	800500e <HAL_ADC_ConfigChannel+0x5c6>
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d12b      	bne.n	800500e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a4a      	ldr	r2, [pc, #296]	; (80050e4 <HAL_ADC_ConfigChannel+0x69c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f040 8081 	bne.w	80050c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a45      	ldr	r2, [pc, #276]	; (80050dc <HAL_ADC_ConfigChannel+0x694>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_ADC_ConfigChannel+0x58e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <HAL_ADC_ConfigChannel+0x698>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x592>
 8004fd6:	4a45      	ldr	r2, [pc, #276]	; (80050ec <HAL_ADC_ConfigChannel+0x6a4>)
 8004fd8:	e000      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x594>
 8004fda:	4a3f      	ldr	r2, [pc, #252]	; (80050d8 <HAL_ADC_ConfigChannel+0x690>)
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7ff f8b0 	bl	800414a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_ADC_ConfigChannel+0x6a8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	4a40      	ldr	r2, [pc, #256]	; (80050f4 <HAL_ADC_ConfigChannel+0x6ac>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ffe:	e002      	b.n	8005006 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3b01      	subs	r3, #1
 8005004:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f9      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800500c:	e05a      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a39      	ldr	r2, [pc, #228]	; (80050f8 <HAL_ADC_ConfigChannel+0x6b0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d11e      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x60e>
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d119      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <HAL_ADC_ConfigChannel+0x69c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d14b      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <HAL_ADC_ConfigChannel+0x694>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <HAL_ADC_ConfigChannel+0x5f8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <HAL_ADC_ConfigChannel+0x698>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_ADC_ConfigChannel+0x5fc>
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <HAL_ADC_ConfigChannel+0x6a4>)
 8005042:	e000      	b.n	8005046 <HAL_ADC_ConfigChannel+0x5fe>
 8005044:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <HAL_ADC_ConfigChannel+0x690>)
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f7ff f87b 	bl	800414a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005054:	e036      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a28      	ldr	r2, [pc, #160]	; (80050fc <HAL_ADC_ConfigChannel+0x6b4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d131      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d12c      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <HAL_ADC_ConfigChannel+0x69c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d127      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_ADC_ConfigChannel+0x694>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x640>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_ADC_ConfigChannel+0x698>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_ADC_ConfigChannel+0x644>
 8005088:	4a18      	ldr	r2, [pc, #96]	; (80050ec <HAL_ADC_ConfigChannel+0x6a4>)
 800508a:	e000      	b.n	800508e <HAL_ADC_ConfigChannel+0x646>
 800508c:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <HAL_ADC_ConfigChannel+0x690>)
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7ff f857 	bl	800414a <LL_ADC_SetCommonPathInternalCh>
 800509c:	e012      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050b0:	e008      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3784      	adds	r7, #132	; 0x84
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	58026300 	.word	0x58026300
 80050dc:	40022000 	.word	0x40022000
 80050e0:	40022100 	.word	0x40022100
 80050e4:	58026000 	.word	0x58026000
 80050e8:	cb840000 	.word	0xcb840000
 80050ec:	40022300 	.word	0x40022300
 80050f0:	2400008c 	.word	0x2400008c
 80050f4:	053e2d63 	.word	0x053e2d63
 80050f8:	c7520000 	.word	0xc7520000
 80050fc:	cfb80000 	.word	0xcfb80000

08005100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff f9b7 	bl	8004480 <LL_ADC_IsEnabled>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d16e      	bne.n	80051f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	4b38      	ldr	r3, [pc, #224]	; (8005200 <ADC_Enable+0x100>)
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f043 0210 	orr.w	r2, r3, #16
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f043 0201 	orr.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e05a      	b.n	80051f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff f972 	bl	8004430 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800514c:	f7fe ffbc 	bl	80040c8 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <ADC_Enable+0x104>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <ADC_Enable+0x66>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a29      	ldr	r2, [pc, #164]	; (8005208 <ADC_Enable+0x108>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <ADC_Enable+0x6a>
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <ADC_Enable+0x10c>)
 8005168:	e000      	b.n	800516c <ADC_Enable+0x6c>
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <ADC_Enable+0x110>)
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f903 	bl	8004378 <LL_ADC_GetMultimode>
 8005172:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	; (8005208 <ADC_Enable+0x108>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d002      	beq.n	8005184 <ADC_Enable+0x84>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	e000      	b.n	8005186 <ADC_Enable+0x86>
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <ADC_Enable+0x104>)
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	4293      	cmp	r3, r2
 800518c:	d02c      	beq.n	80051e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d130      	bne.n	80051f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005194:	e028      	b.n	80051e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f970 	bl	8004480 <LL_ADC_IsEnabled>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff f940 	bl	8004430 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051b0:	f7fe ff8a 	bl	80040c8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d914      	bls.n	80051e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d00d      	beq.n	80051e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0210 	orr.w	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e007      	b.n	80051f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d1cf      	bne.n	8005196 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	8000003f 	.word	0x8000003f
 8005204:	40022000 	.word	0x40022000
 8005208:	40022100 	.word	0x40022100
 800520c:	40022300 	.word	0x40022300
 8005210:	58026300 	.word	0x58026300

08005214 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff f940 	bl	80044a6 <LL_ADC_IsDisableOngoing>
 8005226:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff f927 	bl	8004480 <LL_ADC_IsEnabled>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d047      	beq.n	80052c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d144      	bne.n	80052c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030d 	and.w	r3, r3, #13
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10c      	bne.n	8005266 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff f901 	bl	8004458 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2203      	movs	r2, #3
 800525c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800525e:	f7fe ff33 	bl	80040c8 <HAL_GetTick>
 8005262:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005264:	e029      	b.n	80052ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f043 0210 	orr.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e023      	b.n	80052ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005282:	f7fe ff21 	bl	80040c8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d914      	bls.n	80052ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	f043 0210 	orr.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f043 0201 	orr.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e007      	b.n	80052ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1dc      	bne.n	8005282 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d14b      	bne.n	8005384 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d021      	beq.n	800534a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe ff92 	bl	8004234 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d032      	beq.n	800537c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d12b      	bne.n	800537c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11f      	bne.n	800537c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0201 	orr.w	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
 8005348:	e018      	b.n	800537c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fb45 	bl	8004a0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005382:	e00e      	b.n	80053a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff fb4f 	bl	8004a34 <HAL_ADC_ErrorCallback>
}
 8005396:	e004      	b.n	80053a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff fb31 	bl	8004a20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f043 0204 	orr.w	r2, r3, #4
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff fb21 	bl	8004a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a7a      	ldr	r2, [pc, #488]	; (80055f4 <ADC_ConfigureBoostMode+0x1f8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <ADC_ConfigureBoostMode+0x1c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a79      	ldr	r2, [pc, #484]	; (80055f8 <ADC_ConfigureBoostMode+0x1fc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <ADC_ConfigureBoostMode+0x30>
 8005418:	4b78      	ldr	r3, [pc, #480]	; (80055fc <ADC_ConfigureBoostMode+0x200>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e008      	b.n	800543e <ADC_ConfigureBoostMode+0x42>
 800542c:	4b74      	ldr	r3, [pc, #464]	; (8005600 <ADC_ConfigureBoostMode+0x204>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d01c      	beq.n	800547c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005442:	f005 fd9f 	bl	800af84 <HAL_RCC_GetHCLKFreq>
 8005446:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005450:	d010      	beq.n	8005474 <ADC_ConfigureBoostMode+0x78>
 8005452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005456:	d873      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x144>
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545c:	d002      	beq.n	8005464 <ADC_ConfigureBoostMode+0x68>
 800545e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005462:	d16d      	bne.n	8005540 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	60fb      	str	r3, [r7, #12]
        break;
 8005472:	e068      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	60fb      	str	r3, [r7, #12]
        break;
 800547a:	e064      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800547c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005480:	f04f 0100 	mov.w	r1, #0
 8005484:	f007 f826 	bl	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005488:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005492:	d051      	beq.n	8005538 <ADC_ConfigureBoostMode+0x13c>
 8005494:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005498:	d854      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 800549a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800549e:	d047      	beq.n	8005530 <ADC_ConfigureBoostMode+0x134>
 80054a0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054a4:	d84e      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054aa:	d03d      	beq.n	8005528 <ADC_ConfigureBoostMode+0x12c>
 80054ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054b0:	d848      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b6:	d033      	beq.n	8005520 <ADC_ConfigureBoostMode+0x124>
 80054b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054bc:	d842      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054c2:	d029      	beq.n	8005518 <ADC_ConfigureBoostMode+0x11c>
 80054c4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054c8:	d83c      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054ce:	d01a      	beq.n	8005506 <ADC_ConfigureBoostMode+0x10a>
 80054d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054d4:	d836      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054da:	d014      	beq.n	8005506 <ADC_ConfigureBoostMode+0x10a>
 80054dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054e0:	d830      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e6:	d00e      	beq.n	8005506 <ADC_ConfigureBoostMode+0x10a>
 80054e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ec:	d82a      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054f2:	d008      	beq.n	8005506 <ADC_ConfigureBoostMode+0x10a>
 80054f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054f8:	d824      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x148>
 80054fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054fe:	d002      	beq.n	8005506 <ADC_ConfigureBoostMode+0x10a>
 8005500:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005504:	d11e      	bne.n	8005544 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	0c9b      	lsrs	r3, r3, #18
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	60fb      	str	r3, [r7, #12]
        break;
 8005516:	e016      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	60fb      	str	r3, [r7, #12]
        break;
 800551e:	e012      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	60fb      	str	r3, [r7, #12]
        break;
 8005526:	e00e      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	60fb      	str	r3, [r7, #12]
        break;
 800552e:	e00a      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	09db      	lsrs	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
        break;
 8005536:	e006      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	60fb      	str	r3, [r7, #12]
        break;
 800553e:	e002      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005540:	bf00      	nop
 8005542:	e000      	b.n	8005546 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005544:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005546:	f7fe fdcb 	bl	80040e0 <HAL_GetREVID>
 800554a:	4603      	mov	r3, r0
 800554c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005550:	4293      	cmp	r3, r2
 8005552:	d815      	bhi.n	8005580 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <ADC_ConfigureBoostMode+0x208>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d908      	bls.n	800556e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800556c:	e03e      	b.n	80055ec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800557c:	609a      	str	r2, [r3, #8]
}
 800557e:	e035      	b.n	80055ec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <ADC_ConfigureBoostMode+0x20c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d808      	bhi.n	80055a0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	e025      	b.n	80055ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a1a      	ldr	r2, [pc, #104]	; (800560c <ADC_ConfigureBoostMode+0x210>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d80a      	bhi.n	80055be <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	e016      	b.n	80055ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <ADC_ConfigureBoostMode+0x214>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d80a      	bhi.n	80055dc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d8:	609a      	str	r2, [r3, #8]
}
 80055da:	e007      	b.n	80055ec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40022000 	.word	0x40022000
 80055f8:	40022100 	.word	0x40022100
 80055fc:	40022300 	.word	0x40022300
 8005600:	58026300 	.word	0x58026300
 8005604:	01312d00 	.word	0x01312d00
 8005608:	005f5e10 	.word	0x005f5e10
 800560c:	00bebc20 	.word	0x00bebc20
 8005610:	017d7840 	.word	0x017d7840

08005614 <LL_ADC_IsEnabled>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <LL_ADC_IsEnabled+0x18>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <LL_ADC_IsEnabled+0x1a>
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <LL_ADC_StartCalibration>:
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <LL_ADC_StartCalibration+0x38>)
 800564e:	4013      	ands	r3, r2
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800565c:	430a      	orrs	r2, r1
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	609a      	str	r2, [r3, #8]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	3ffeffc0 	.word	0x3ffeffc0

08005678 <LL_ADC_IsCalibrationOnGoing>:
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568c:	d101      	bne.n	8005692 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <LL_ADC_REG_IsConversionOngoing>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d101      	bne.n	80056b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e04c      	b.n	8005780 <HAL_ADCEx_Calibration_Start+0xb8>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff fd90 	bl	8005214 <ADC_Disable>
 80056f4:	4603      	mov	r3, r0
 80056f6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d135      	bne.n	800576a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005702:	4b21      	ldr	r3, [pc, #132]	; (8005788 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005704:	4013      	ands	r3, r2
 8005706:	f043 0202 	orr.w	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff ff90 	bl	800563c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800571c:	e014      	b.n	8005748 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3301      	adds	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_ADCEx_Calibration_Start+0xc4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d30d      	bcc.n	8005748 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f023 0312 	bic.w	r3, r3, #18
 8005734:	f043 0210 	orr.w	r2, r3, #16
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e01b      	b.n	8005780 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ff93 	bl	8005678 <LL_ADC_IsCalibrationOnGoing>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e2      	bne.n	800571e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
 8005768:	e005      	b.n	8005776 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f043 0210 	orr.w	r2, r3, #16
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ffffeefd 	.word	0xffffeefd
 800578c:	25c3f800 	.word	0x25c3f800

08005790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b09f      	sub	sp, #124	; 0x7c
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0be      	b.n	800592c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057b6:	2300      	movs	r3, #0
 80057b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5c      	ldr	r2, [pc, #368]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d102      	bne.n	80057ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	e001      	b.n	80057d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e09d      	b.n	800592c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ff54 	bl	80056a0 <LL_ADC_REG_IsConversionOngoing>
 80057f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff4e 	bl	80056a0 <LL_ADC_REG_IsConversionOngoing>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d17f      	bne.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800580a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800580c:	2b00      	cmp	r3, #0
 800580e:	d17c      	bne.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a47      	ldr	r2, [pc, #284]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a46      	ldr	r2, [pc, #280]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d101      	bne.n	8005828 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005824:	4b45      	ldr	r3, [pc, #276]	; (800593c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005826:	e000      	b.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800582a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d039      	beq.n	80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	431a      	orrs	r2, r3
 8005842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005844:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3a      	ldr	r2, [pc, #232]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a38      	ldr	r2, [pc, #224]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10e      	bne.n	8005878 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800585a:	4836      	ldr	r0, [pc, #216]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800585c:	f7ff feda 	bl	8005614 <LL_ADC_IsEnabled>
 8005860:	4604      	mov	r4, r0
 8005862:	4835      	ldr	r0, [pc, #212]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005864:	f7ff fed6 	bl	8005614 <LL_ADC_IsEnabled>
 8005868:	4603      	mov	r3, r0
 800586a:	4323      	orrs	r3, r4
 800586c:	2b00      	cmp	r3, #0
 800586e:	bf0c      	ite	eq
 8005870:	2301      	moveq	r3, #1
 8005872:	2300      	movne	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e008      	b.n	800588a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005878:	4832      	ldr	r0, [pc, #200]	; (8005944 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800587a:	f7ff fecb 	bl	8005614 <LL_ADC_IsEnabled>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d047      	beq.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005894:	4013      	ands	r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6811      	ldr	r1, [r2, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	6892      	ldr	r2, [r2, #8]
 800589e:	430a      	orrs	r2, r1
 80058a0:	431a      	orrs	r2, r3
 80058a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058a6:	e03a      	b.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d10e      	bne.n	80058e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80058c8:	481a      	ldr	r0, [pc, #104]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058ca:	f7ff fea3 	bl	8005614 <LL_ADC_IsEnabled>
 80058ce:	4604      	mov	r4, r0
 80058d0:	4819      	ldr	r0, [pc, #100]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058d2:	f7ff fe9f 	bl	8005614 <LL_ADC_IsEnabled>
 80058d6:	4603      	mov	r3, r0
 80058d8:	4323      	orrs	r3, r4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e008      	b.n	80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80058e6:	4817      	ldr	r0, [pc, #92]	; (8005944 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058e8:	f7ff fe94 	bl	8005614 <LL_ADC_IsEnabled>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d010      	beq.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005902:	4013      	ands	r3, r2
 8005904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005906:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005908:	e009      	b.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f043 0220 	orr.w	r2, r3, #32
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800591c:	e000      	b.n	8005920 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800591e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005928:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800592c:	4618      	mov	r0, r3
 800592e:	377c      	adds	r7, #124	; 0x7c
 8005930:	46bd      	mov	sp, r7
 8005932:	bd90      	pop	{r4, r7, pc}
 8005934:	40022000 	.word	0x40022000
 8005938:	40022100 	.word	0x40022100
 800593c:	40022300 	.word	0x40022300
 8005940:	58026300 	.word	0x58026300
 8005944:	58026000 	.word	0x58026000
 8005948:	fffff0e0 	.word	0xfffff0e0

0800594c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <__NVIC_SetPriorityGrouping+0x40>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005968:	4013      	ands	r3, r2
 800596a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <__NVIC_SetPriorityGrouping+0x44>)
 8005976:	4313      	orrs	r3, r2
 8005978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800597a:	4a04      	ldr	r2, [pc, #16]	; (800598c <__NVIC_SetPriorityGrouping+0x40>)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	60d3      	str	r3, [r2, #12]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	e000ed00 	.word	0xe000ed00
 8005990:	05fa0000 	.word	0x05fa0000

08005994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <__NVIC_GetPriorityGrouping+0x18>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f003 0307 	and.w	r3, r3, #7
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	e000ed00 	.word	0xe000ed00

080059b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	db0b      	blt.n	80059da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	f003 021f 	and.w	r2, r3, #31
 80059c8:	4907      	ldr	r1, [pc, #28]	; (80059e8 <__NVIC_EnableIRQ+0x38>)
 80059ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	2001      	movs	r0, #1
 80059d2:	fa00 f202 	lsl.w	r2, r0, r2
 80059d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	e000e100 	.word	0xe000e100

080059ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db0a      	blt.n	8005a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	490c      	ldr	r1, [pc, #48]	; (8005a38 <__NVIC_SetPriority+0x4c>)
 8005a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a14:	e00a      	b.n	8005a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4908      	ldr	r1, [pc, #32]	; (8005a3c <__NVIC_SetPriority+0x50>)
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3b04      	subs	r3, #4
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	440b      	add	r3, r1
 8005a2a:	761a      	strb	r2, [r3, #24]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	e000e100 	.word	0xe000e100
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f1c3 0307 	rsb	r3, r3, #7
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	bf28      	it	cs
 8005a5e:	2304      	movcs	r3, #4
 8005a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3304      	adds	r3, #4
 8005a66:	2b06      	cmp	r3, #6
 8005a68:	d902      	bls.n	8005a70 <NVIC_EncodePriority+0x30>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3b03      	subs	r3, #3
 8005a6e:	e000      	b.n	8005a72 <NVIC_EncodePriority+0x32>
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	401a      	ands	r2, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	43d9      	mvns	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a98:	4313      	orrs	r3, r2
         );
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff ff4c 	bl	800594c <__NVIC_SetPriorityGrouping>
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005aca:	f7ff ff63 	bl	8005994 <__NVIC_GetPriorityGrouping>
 8005ace:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	6978      	ldr	r0, [r7, #20]
 8005ad6:	f7ff ffb3 	bl	8005a40 <NVIC_EncodePriority>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ff82 	bl	80059ec <__NVIC_SetPriority>
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff ff56 	bl	80059b0 <__NVIC_EnableIRQ>
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e014      	b.n	8005b48 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fd fca0 	bl	8003474 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e046      	b.n	8005bf2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	795b      	ldrb	r3, [r3, #5]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_DAC_Start+0x20>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e040      	b.n	8005bf2 <HAL_DAC_Start+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6819      	ldr	r1, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d11d      	bne.n	8005be4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	e014      	b.n	8005be4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2102      	movs	r1, #2
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d107      	bne.n	8005be4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0202 	orr.w	r2, r2, #2
 8005be2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0a2      	b.n	8005d5e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	795b      	ldrb	r3, [r3, #5]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_DAC_Start_DMA+0x24>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e09c      	b.n	8005d5e <HAL_DAC_Start_DMA+0x15e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d129      	bne.n	8005c8a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a4b      	ldr	r2, [pc, #300]	; (8005d68 <HAL_DAC_Start_DMA+0x168>)
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4a4a      	ldr	r2, [pc, #296]	; (8005d6c <HAL_DAC_Start_DMA+0x16c>)
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4a49      	ldr	r2, [pc, #292]	; (8005d70 <HAL_DAC_Start_DMA+0x170>)
 8005c4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c5c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_DAC_Start_DMA+0x6c>
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d005      	beq.n	8005c76 <HAL_DAC_Start_DMA+0x76>
 8005c6a:	e009      	b.n	8005c80 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	613b      	str	r3, [r7, #16]
        break;
 8005c74:	e033      	b.n	8005cde <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	613b      	str	r3, [r7, #16]
        break;
 8005c7e:	e02e      	b.n	8005cde <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3310      	adds	r3, #16
 8005c86:	613b      	str	r3, [r7, #16]
        break;
 8005c88:	e029      	b.n	8005cde <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4a39      	ldr	r2, [pc, #228]	; (8005d74 <HAL_DAC_Start_DMA+0x174>)
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <HAL_DAC_Start_DMA+0x178>)
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <HAL_DAC_Start_DMA+0x17c>)
 8005ca0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_DAC_Start_DMA+0xc0>
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d005      	beq.n	8005cca <HAL_DAC_Start_DMA+0xca>
 8005cbe:	e009      	b.n	8005cd4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	613b      	str	r3, [r7, #16]
        break;
 8005cc8:	e009      	b.n	8005cde <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	613b      	str	r3, [r7, #16]
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	331c      	adds	r3, #28
 8005cda:	613b      	str	r3, [r7, #16]
        break;
 8005cdc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d111      	bne.n	8005d08 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6898      	ldr	r0, [r3, #8]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	f000 fe67 	bl	80069d0 <HAL_DMA_Start_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]
 8005d06:	e010      	b.n	8005d2a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68d8      	ldr	r0, [r3, #12]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	f000 fe55 	bl	80069d0 <HAL_DMA_Start_IT>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6819      	ldr	r1, [r3, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2201      	movs	r2, #1
 8005d44:	409a      	lsls	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e005      	b.n	8005d5c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f043 0204 	orr.w	r2, r3, #4
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	080061f1 	.word	0x080061f1
 8005d6c:	08006213 	.word	0x08006213
 8005d70:	0800622f 	.word	0x0800622f
 8005d74:	080062ad 	.word	0x080062ad
 8005d78:	080062cf 	.word	0x080062cf
 8005d7c:	080062eb 	.word	0x080062eb

08005d80 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e03e      	b.n	8005e12 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43da      	mvns	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	400a      	ands	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43da      	mvns	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	400a      	ands	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10d      	bne.n	8005df0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f863 	bl	8006ea4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e00c      	b.n	8005e0a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 f855 	bl	8006ea4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005e08:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01d      	beq.n	8005e78 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d018      	beq.n	8005e78 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f043 0201 	orr.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f86f 	bl	8005f56 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01d      	beq.n	8005ebe <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d018      	beq.n	8005ebe <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f9ed 	bl	8006298 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b087      	sub	sp, #28
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e015      	b.n	8005f0e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d105      	bne.n	8005efa <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e004      	b.n	8005f04 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4413      	add	r3, r2
 8005f00:	3314      	adds	r3, #20
 8005f02:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	461a      	mov	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_DAC_ConfigChannel+0x1e>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e12a      	b.n	80061e4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	795b      	ldrb	r3, [r3, #5]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_DAC_ConfigChannel+0x2e>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e124      	b.n	80061e4 <HAL_DAC_ConfigChannel+0x278>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d17a      	bne.n	80060a4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005fae:	f7fe f88b 	bl	80040c8 <HAL_GetTick>
 8005fb2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d13d      	bne.n	8006036 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fba:	e018      	b.n	8005fee <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fbc:	f7fe f884 	bl	80040c8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d911      	bls.n	8005fee <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd0:	4b86      	ldr	r3, [pc, #536]	; (80061ec <HAL_DAC_ConfigChannel+0x280>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f043 0208 	orr.w	r2, r3, #8
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0fa      	b.n	80061e4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	4b7d      	ldr	r3, [pc, #500]	; (80061ec <HAL_DAC_ConfigChannel+0x280>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1df      	bne.n	8005fbc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	6992      	ldr	r2, [r2, #24]
 8006004:	641a      	str	r2, [r3, #64]	; 0x40
 8006006:	e020      	b.n	800604a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006008:	f7fe f85e 	bl	80040c8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b01      	cmp	r3, #1
 8006014:	d90f      	bls.n	8006036 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	da0a      	bge.n	8006036 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f043 0208 	orr.w	r2, r3, #8
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2203      	movs	r2, #3
 8006030:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e0d6      	b.n	80061e4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	dbe3      	blt.n	8006008 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	6992      	ldr	r2, [r2, #24]
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	ea02 0103 	and.w	r1, r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	409a      	lsls	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	21ff      	movs	r1, #255	; 0xff
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	43db      	mvns	r3, r3
 800608c:	ea02 0103 	and.w	r1, r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	409a      	lsls	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d11d      	bne.n	80060e8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	221f      	movs	r2, #31
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2207      	movs	r2, #7
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d102      	bne.n	8006112 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	e00f      	b.n	8006132 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d102      	bne.n	8006120 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800611a:	2301      	movs	r3, #1
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	e008      	b.n	8006132 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006128:	2301      	movs	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
 800612c:	e001      	b.n	8006132 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6819      	ldr	r1, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43da      	mvns	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	400a      	ands	r2, r1
 8006178:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	f640 72fe 	movw	r2, #4094	; 0xffe
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	22c0      	movs	r2, #192	; 0xc0
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43da      	mvns	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	400a      	ands	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20008000 	.word	0x20008000

080061f0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff fe8b 	bl	8005f1a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	711a      	strb	r2, [r3, #4]
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fe84 	bl	8005f2e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f043 0204 	orr.w	r2, r3, #4
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fe7a 	bl	8005f42 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	711a      	strb	r2, [r3, #4]
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff ffce 	bl	800625c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	711a      	strb	r2, [r3, #4]
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff ffc7 	bl	8006270 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f043 0204 	orr.w	r2, r3, #4
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ffbd 	bl	8006284 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	711a      	strb	r2, [r3, #4]
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006320:	f7fd fed2 	bl	80040c8 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e316      	b.n	800695e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a66      	ldr	r2, [pc, #408]	; (80064d0 <HAL_DMA_Init+0x1b8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d04a      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a65      	ldr	r2, [pc, #404]	; (80064d4 <HAL_DMA_Init+0x1bc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d045      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a63      	ldr	r2, [pc, #396]	; (80064d8 <HAL_DMA_Init+0x1c0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d040      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a62      	ldr	r2, [pc, #392]	; (80064dc <HAL_DMA_Init+0x1c4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d03b      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a60      	ldr	r2, [pc, #384]	; (80064e0 <HAL_DMA_Init+0x1c8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d036      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a5f      	ldr	r2, [pc, #380]	; (80064e4 <HAL_DMA_Init+0x1cc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d031      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5d      	ldr	r2, [pc, #372]	; (80064e8 <HAL_DMA_Init+0x1d0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d02c      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5c      	ldr	r2, [pc, #368]	; (80064ec <HAL_DMA_Init+0x1d4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d027      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5a      	ldr	r2, [pc, #360]	; (80064f0 <HAL_DMA_Init+0x1d8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d022      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a59      	ldr	r2, [pc, #356]	; (80064f4 <HAL_DMA_Init+0x1dc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d01d      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a57      	ldr	r2, [pc, #348]	; (80064f8 <HAL_DMA_Init+0x1e0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d018      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a56      	ldr	r2, [pc, #344]	; (80064fc <HAL_DMA_Init+0x1e4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a54      	ldr	r2, [pc, #336]	; (8006500 <HAL_DMA_Init+0x1e8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00e      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a53      	ldr	r2, [pc, #332]	; (8006504 <HAL_DMA_Init+0x1ec>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d009      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a51      	ldr	r2, [pc, #324]	; (8006508 <HAL_DMA_Init+0x1f0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_DMA_Init+0xb8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a50      	ldr	r2, [pc, #320]	; (800650c <HAL_DMA_Init+0x1f4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <HAL_DMA_Init+0xbc>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_DMA_Init+0xbe>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 813b 	beq.w	8006652 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a37      	ldr	r2, [pc, #220]	; (80064d0 <HAL_DMA_Init+0x1b8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_Init+0x174>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a36      	ldr	r2, [pc, #216]	; (80064d4 <HAL_DMA_Init+0x1bc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a34      	ldr	r2, [pc, #208]	; (80064d8 <HAL_DMA_Init+0x1c0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_Init+0x174>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a33      	ldr	r2, [pc, #204]	; (80064dc <HAL_DMA_Init+0x1c4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a31      	ldr	r2, [pc, #196]	; (80064e0 <HAL_DMA_Init+0x1c8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_Init+0x174>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <HAL_DMA_Init+0x1cc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <HAL_DMA_Init+0x1d0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <HAL_DMA_Init+0x1d4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_Init+0x174>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2b      	ldr	r2, [pc, #172]	; (80064f0 <HAL_DMA_Init+0x1d8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <HAL_DMA_Init+0x1dc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a28      	ldr	r2, [pc, #160]	; (80064f8 <HAL_DMA_Init+0x1e0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_Init+0x174>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a27      	ldr	r2, [pc, #156]	; (80064fc <HAL_DMA_Init+0x1e4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a25      	ldr	r2, [pc, #148]	; (8006500 <HAL_DMA_Init+0x1e8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_Init+0x174>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_DMA_Init+0x1ec>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_DMA_Init+0x1f0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_Init+0x174>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a21      	ldr	r2, [pc, #132]	; (800650c <HAL_DMA_Init+0x1f4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <HAL_DMA_Init+0x186>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e007      	b.n	80064ae <HAL_DMA_Init+0x196>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064ae:	e02f      	b.n	8006510 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064b0:	f7fd fe0a 	bl	80040c8 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d928      	bls.n	8006510 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e246      	b.n	800695e <HAL_DMA_Init+0x646>
 80064d0:	40020010 	.word	0x40020010
 80064d4:	40020028 	.word	0x40020028
 80064d8:	40020040 	.word	0x40020040
 80064dc:	40020058 	.word	0x40020058
 80064e0:	40020070 	.word	0x40020070
 80064e4:	40020088 	.word	0x40020088
 80064e8:	400200a0 	.word	0x400200a0
 80064ec:	400200b8 	.word	0x400200b8
 80064f0:	40020410 	.word	0x40020410
 80064f4:	40020428 	.word	0x40020428
 80064f8:	40020440 	.word	0x40020440
 80064fc:	40020458 	.word	0x40020458
 8006500:	40020470 	.word	0x40020470
 8006504:	40020488 	.word	0x40020488
 8006508:	400204a0 	.word	0x400204a0
 800650c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1c8      	bne.n	80064b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4b83      	ldr	r3, [pc, #524]	; (8006738 <HAL_DMA_Init+0x420>)
 800652a:	4013      	ands	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006536:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006542:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b04      	cmp	r3, #4
 8006562:	d107      	bne.n	8006574 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4313      	orrs	r3, r2
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006574:	4b71      	ldr	r3, [pc, #452]	; (800673c <HAL_DMA_Init+0x424>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b71      	ldr	r3, [pc, #452]	; (8006740 <HAL_DMA_Init+0x428>)
 800657a:	4013      	ands	r3, r2
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006580:	d328      	bcc.n	80065d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b28      	cmp	r3, #40	; 0x28
 8006588:	d903      	bls.n	8006592 <HAL_DMA_Init+0x27a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b2e      	cmp	r3, #46	; 0x2e
 8006590:	d917      	bls.n	80065c2 <HAL_DMA_Init+0x2aa>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b3e      	cmp	r3, #62	; 0x3e
 8006598:	d903      	bls.n	80065a2 <HAL_DMA_Init+0x28a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b42      	cmp	r3, #66	; 0x42
 80065a0:	d90f      	bls.n	80065c2 <HAL_DMA_Init+0x2aa>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b46      	cmp	r3, #70	; 0x46
 80065a8:	d903      	bls.n	80065b2 <HAL_DMA_Init+0x29a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b48      	cmp	r3, #72	; 0x48
 80065b0:	d907      	bls.n	80065c2 <HAL_DMA_Init+0x2aa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b4e      	cmp	r3, #78	; 0x4e
 80065b8:	d905      	bls.n	80065c6 <HAL_DMA_Init+0x2ae>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b52      	cmp	r3, #82	; 0x52
 80065c0:	d801      	bhi.n	80065c6 <HAL_DMA_Init+0x2ae>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_DMA_Init+0x2b0>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d117      	bne.n	800662e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f002 fb3f 	bl	8008c94 <DMA_CheckFifoParam>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2240      	movs	r2, #64	; 0x40
 8006620:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e197      	b.n	800695e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 fa7a 	bl	8008b30 <DMA_CalcBaseAndBitshift>
 800663c:	4603      	mov	r3, r0
 800663e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	223f      	movs	r2, #63	; 0x3f
 800664a:	409a      	lsls	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	e0cd      	b.n	80067ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3b      	ldr	r2, [pc, #236]	; (8006744 <HAL_DMA_Init+0x42c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d022      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a39      	ldr	r2, [pc, #228]	; (8006748 <HAL_DMA_Init+0x430>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01d      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a38      	ldr	r2, [pc, #224]	; (800674c <HAL_DMA_Init+0x434>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d018      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a36      	ldr	r2, [pc, #216]	; (8006750 <HAL_DMA_Init+0x438>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a35      	ldr	r2, [pc, #212]	; (8006754 <HAL_DMA_Init+0x43c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00e      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a33      	ldr	r2, [pc, #204]	; (8006758 <HAL_DMA_Init+0x440>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a32      	ldr	r2, [pc, #200]	; (800675c <HAL_DMA_Init+0x444>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_DMA_Init+0x38a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a30      	ldr	r2, [pc, #192]	; (8006760 <HAL_DMA_Init+0x448>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d101      	bne.n	80066a6 <HAL_DMA_Init+0x38e>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <HAL_DMA_Init+0x390>
 80066a6:	2300      	movs	r3, #0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8097 	beq.w	80067dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a24      	ldr	r2, [pc, #144]	; (8006744 <HAL_DMA_Init+0x42c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d021      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a22      	ldr	r2, [pc, #136]	; (8006748 <HAL_DMA_Init+0x430>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01c      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_DMA_Init+0x434>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d017      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <HAL_DMA_Init+0x438>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d012      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_DMA_Init+0x43c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00d      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <HAL_DMA_Init+0x440>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d008      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1b      	ldr	r2, [pc, #108]	; (800675c <HAL_DMA_Init+0x444>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <HAL_DMA_Init+0x3e4>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a19      	ldr	r2, [pc, #100]	; (8006760 <HAL_DMA_Init+0x448>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <HAL_DMA_Init+0x44c>)
 800671a:	4013      	ands	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d020      	beq.n	8006768 <HAL_DMA_Init+0x450>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d102      	bne.n	8006734 <HAL_DMA_Init+0x41c>
 800672e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006732:	e01a      	b.n	800676a <HAL_DMA_Init+0x452>
 8006734:	2300      	movs	r3, #0
 8006736:	e018      	b.n	800676a <HAL_DMA_Init+0x452>
 8006738:	fe10803f 	.word	0xfe10803f
 800673c:	5c001000 	.word	0x5c001000
 8006740:	ffff0000 	.word	0xffff0000
 8006744:	58025408 	.word	0x58025408
 8006748:	5802541c 	.word	0x5802541c
 800674c:	58025430 	.word	0x58025430
 8006750:	58025444 	.word	0x58025444
 8006754:	58025458 	.word	0x58025458
 8006758:	5802546c 	.word	0x5802546c
 800675c:	58025480 	.word	0x58025480
 8006760:	58025494 	.word	0x58025494
 8006764:	fffe000f 	.word	0xfffe000f
 8006768:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68d2      	ldr	r2, [r2, #12]
 800676e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006798:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b6e      	ldr	r3, [pc, #440]	; (8006968 <HAL_DMA_Init+0x650>)
 80067b0:	4413      	add	r3, r2
 80067b2:	4a6e      	ldr	r2, [pc, #440]	; (800696c <HAL_DMA_Init+0x654>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	009a      	lsls	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 f9b5 	bl	8008b30 <DMA_CalcBaseAndBitshift>
 80067c6:	4603      	mov	r3, r0
 80067c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2201      	movs	r2, #1
 80067d4:	409a      	lsls	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e008      	b.n	80067ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2203      	movs	r2, #3
 80067e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0b7      	b.n	800695e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5f      	ldr	r2, [pc, #380]	; (8006970 <HAL_DMA_Init+0x658>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d072      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5d      	ldr	r2, [pc, #372]	; (8006974 <HAL_DMA_Init+0x65c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d06d      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a5c      	ldr	r2, [pc, #368]	; (8006978 <HAL_DMA_Init+0x660>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d068      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a5a      	ldr	r2, [pc, #360]	; (800697c <HAL_DMA_Init+0x664>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d063      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a59      	ldr	r2, [pc, #356]	; (8006980 <HAL_DMA_Init+0x668>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d05e      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a57      	ldr	r2, [pc, #348]	; (8006984 <HAL_DMA_Init+0x66c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d059      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a56      	ldr	r2, [pc, #344]	; (8006988 <HAL_DMA_Init+0x670>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d054      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a54      	ldr	r2, [pc, #336]	; (800698c <HAL_DMA_Init+0x674>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d04f      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a53      	ldr	r2, [pc, #332]	; (8006990 <HAL_DMA_Init+0x678>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d04a      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a51      	ldr	r2, [pc, #324]	; (8006994 <HAL_DMA_Init+0x67c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d045      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a50      	ldr	r2, [pc, #320]	; (8006998 <HAL_DMA_Init+0x680>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d040      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4e      	ldr	r2, [pc, #312]	; (800699c <HAL_DMA_Init+0x684>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d03b      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a4d      	ldr	r2, [pc, #308]	; (80069a0 <HAL_DMA_Init+0x688>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d036      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a4b      	ldr	r2, [pc, #300]	; (80069a4 <HAL_DMA_Init+0x68c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d031      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a4a      	ldr	r2, [pc, #296]	; (80069a8 <HAL_DMA_Init+0x690>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d02c      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a48      	ldr	r2, [pc, #288]	; (80069ac <HAL_DMA_Init+0x694>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d027      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a47      	ldr	r2, [pc, #284]	; (80069b0 <HAL_DMA_Init+0x698>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a45      	ldr	r2, [pc, #276]	; (80069b4 <HAL_DMA_Init+0x69c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01d      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a44      	ldr	r2, [pc, #272]	; (80069b8 <HAL_DMA_Init+0x6a0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a42      	ldr	r2, [pc, #264]	; (80069bc <HAL_DMA_Init+0x6a4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a41      	ldr	r2, [pc, #260]	; (80069c0 <HAL_DMA_Init+0x6a8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a3f      	ldr	r2, [pc, #252]	; (80069c4 <HAL_DMA_Init+0x6ac>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3e      	ldr	r2, [pc, #248]	; (80069c8 <HAL_DMA_Init+0x6b0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_DMA_Init+0x5c6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <HAL_DMA_Init+0x6b4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_DMA_Init+0x5ca>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_DMA_Init+0x5cc>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d032      	beq.n	800694e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f002 fa4f 	bl	8008d8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d102      	bne.n	80068fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006910:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d010      	beq.n	800693c <HAL_DMA_Init+0x624>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b08      	cmp	r3, #8
 8006920:	d80c      	bhi.n	800693c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 facc 	bl	8008ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	e008      	b.n	800694e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	a7fdabf8 	.word	0xa7fdabf8
 800696c:	cccccccd 	.word	0xcccccccd
 8006970:	40020010 	.word	0x40020010
 8006974:	40020028 	.word	0x40020028
 8006978:	40020040 	.word	0x40020040
 800697c:	40020058 	.word	0x40020058
 8006980:	40020070 	.word	0x40020070
 8006984:	40020088 	.word	0x40020088
 8006988:	400200a0 	.word	0x400200a0
 800698c:	400200b8 	.word	0x400200b8
 8006990:	40020410 	.word	0x40020410
 8006994:	40020428 	.word	0x40020428
 8006998:	40020440 	.word	0x40020440
 800699c:	40020458 	.word	0x40020458
 80069a0:	40020470 	.word	0x40020470
 80069a4:	40020488 	.word	0x40020488
 80069a8:	400204a0 	.word	0x400204a0
 80069ac:	400204b8 	.word	0x400204b8
 80069b0:	58025408 	.word	0x58025408
 80069b4:	5802541c 	.word	0x5802541c
 80069b8:	58025430 	.word	0x58025430
 80069bc:	58025444 	.word	0x58025444
 80069c0:	58025458 	.word	0x58025458
 80069c4:	5802546c 	.word	0x5802546c
 80069c8:	58025480 	.word	0x58025480
 80069cc:	58025494 	.word	0x58025494

080069d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e226      	b.n	8006e3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_DMA_Start_IT+0x2a>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e21f      	b.n	8006e3a <HAL_DMA_Start_IT+0x46a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	f040 820a 	bne.w	8006e24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a68      	ldr	r2, [pc, #416]	; (8006bc4 <HAL_DMA_Start_IT+0x1f4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d04a      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a66      	ldr	r2, [pc, #408]	; (8006bc8 <HAL_DMA_Start_IT+0x1f8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d045      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a65      	ldr	r2, [pc, #404]	; (8006bcc <HAL_DMA_Start_IT+0x1fc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d040      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a63      	ldr	r2, [pc, #396]	; (8006bd0 <HAL_DMA_Start_IT+0x200>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d03b      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a62      	ldr	r2, [pc, #392]	; (8006bd4 <HAL_DMA_Start_IT+0x204>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d036      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a60      	ldr	r2, [pc, #384]	; (8006bd8 <HAL_DMA_Start_IT+0x208>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d031      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a5f      	ldr	r2, [pc, #380]	; (8006bdc <HAL_DMA_Start_IT+0x20c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d02c      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a5d      	ldr	r2, [pc, #372]	; (8006be0 <HAL_DMA_Start_IT+0x210>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d027      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a5c      	ldr	r2, [pc, #368]	; (8006be4 <HAL_DMA_Start_IT+0x214>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5a      	ldr	r2, [pc, #360]	; (8006be8 <HAL_DMA_Start_IT+0x218>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01d      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a59      	ldr	r2, [pc, #356]	; (8006bec <HAL_DMA_Start_IT+0x21c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d018      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a57      	ldr	r2, [pc, #348]	; (8006bf0 <HAL_DMA_Start_IT+0x220>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a56      	ldr	r2, [pc, #344]	; (8006bf4 <HAL_DMA_Start_IT+0x224>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a54      	ldr	r2, [pc, #336]	; (8006bf8 <HAL_DMA_Start_IT+0x228>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a53      	ldr	r2, [pc, #332]	; (8006bfc <HAL_DMA_Start_IT+0x22c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_DMA_Start_IT+0xee>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a51      	ldr	r2, [pc, #324]	; (8006c00 <HAL_DMA_Start_IT+0x230>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <HAL_DMA_Start_IT+0x100>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e007      	b.n	8006ae0 <HAL_DMA_Start_IT+0x110>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f001 fe76 	bl	80087d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a34      	ldr	r2, [pc, #208]	; (8006bc4 <HAL_DMA_Start_IT+0x1f4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d04a      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <HAL_DMA_Start_IT+0x1f8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d045      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <HAL_DMA_Start_IT+0x1fc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d040      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <HAL_DMA_Start_IT+0x200>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d03b      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <HAL_DMA_Start_IT+0x204>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d036      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <HAL_DMA_Start_IT+0x208>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d031      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <HAL_DMA_Start_IT+0x20c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d02c      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_DMA_Start_IT+0x210>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d027      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <HAL_DMA_Start_IT+0x214>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d022      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <HAL_DMA_Start_IT+0x218>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d01d      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a25      	ldr	r2, [pc, #148]	; (8006bec <HAL_DMA_Start_IT+0x21c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_DMA_Start_IT+0x220>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_DMA_Start_IT+0x224>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_DMA_Start_IT+0x228>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <HAL_DMA_Start_IT+0x22c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_DMA_Start_IT+0x1bc>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <HAL_DMA_Start_IT+0x230>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d101      	bne.n	8006b90 <HAL_DMA_Start_IT+0x1c0>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <HAL_DMA_Start_IT+0x1c2>
 8006b90:	2300      	movs	r3, #0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d036      	beq.n	8006c04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f023 021e 	bic.w	r2, r3, #30
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0216 	orr.w	r2, r2, #22
 8006ba8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d03e      	beq.n	8006c30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0208 	orr.w	r2, r2, #8
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e035      	b.n	8006c30 <HAL_DMA_Start_IT+0x260>
 8006bc4:	40020010 	.word	0x40020010
 8006bc8:	40020028 	.word	0x40020028
 8006bcc:	40020040 	.word	0x40020040
 8006bd0:	40020058 	.word	0x40020058
 8006bd4:	40020070 	.word	0x40020070
 8006bd8:	40020088 	.word	0x40020088
 8006bdc:	400200a0 	.word	0x400200a0
 8006be0:	400200b8 	.word	0x400200b8
 8006be4:	40020410 	.word	0x40020410
 8006be8:	40020428 	.word	0x40020428
 8006bec:	40020440 	.word	0x40020440
 8006bf0:	40020458 	.word	0x40020458
 8006bf4:	40020470 	.word	0x40020470
 8006bf8:	40020488 	.word	0x40020488
 8006bfc:	400204a0 	.word	0x400204a0
 8006c00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020e 	bic.w	r2, r3, #14
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 020a 	orr.w	r2, r2, #10
 8006c16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0204 	orr.w	r2, r2, #4
 8006c2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a83      	ldr	r2, [pc, #524]	; (8006e44 <HAL_DMA_Start_IT+0x474>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d072      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a82      	ldr	r2, [pc, #520]	; (8006e48 <HAL_DMA_Start_IT+0x478>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d06d      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a80      	ldr	r2, [pc, #512]	; (8006e4c <HAL_DMA_Start_IT+0x47c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d068      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7f      	ldr	r2, [pc, #508]	; (8006e50 <HAL_DMA_Start_IT+0x480>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d063      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7d      	ldr	r2, [pc, #500]	; (8006e54 <HAL_DMA_Start_IT+0x484>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d05e      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7c      	ldr	r2, [pc, #496]	; (8006e58 <HAL_DMA_Start_IT+0x488>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d059      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a7a      	ldr	r2, [pc, #488]	; (8006e5c <HAL_DMA_Start_IT+0x48c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d054      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a79      	ldr	r2, [pc, #484]	; (8006e60 <HAL_DMA_Start_IT+0x490>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04f      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a77      	ldr	r2, [pc, #476]	; (8006e64 <HAL_DMA_Start_IT+0x494>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04a      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a76      	ldr	r2, [pc, #472]	; (8006e68 <HAL_DMA_Start_IT+0x498>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d045      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a74      	ldr	r2, [pc, #464]	; (8006e6c <HAL_DMA_Start_IT+0x49c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d040      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a73      	ldr	r2, [pc, #460]	; (8006e70 <HAL_DMA_Start_IT+0x4a0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d03b      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	; (8006e74 <HAL_DMA_Start_IT+0x4a4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d036      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a70      	ldr	r2, [pc, #448]	; (8006e78 <HAL_DMA_Start_IT+0x4a8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d031      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6e      	ldr	r2, [pc, #440]	; (8006e7c <HAL_DMA_Start_IT+0x4ac>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02c      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6d      	ldr	r2, [pc, #436]	; (8006e80 <HAL_DMA_Start_IT+0x4b0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d027      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6b      	ldr	r2, [pc, #428]	; (8006e84 <HAL_DMA_Start_IT+0x4b4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d022      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <HAL_DMA_Start_IT+0x4b8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d01d      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a68      	ldr	r2, [pc, #416]	; (8006e8c <HAL_DMA_Start_IT+0x4bc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a67      	ldr	r2, [pc, #412]	; (8006e90 <HAL_DMA_Start_IT+0x4c0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a65      	ldr	r2, [pc, #404]	; (8006e94 <HAL_DMA_Start_IT+0x4c4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a64      	ldr	r2, [pc, #400]	; (8006e98 <HAL_DMA_Start_IT+0x4c8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a62      	ldr	r2, [pc, #392]	; (8006e9c <HAL_DMA_Start_IT+0x4cc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_DMA_Start_IT+0x350>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a61      	ldr	r2, [pc, #388]	; (8006ea0 <HAL_DMA_Start_IT+0x4d0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_DMA_Start_IT+0x354>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_DMA_Start_IT+0x356>
 8006d24:	2300      	movs	r3, #0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01a      	beq.n	8006d60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <HAL_DMA_Start_IT+0x474>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d04a      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <HAL_DMA_Start_IT+0x478>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d045      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a34      	ldr	r2, [pc, #208]	; (8006e4c <HAL_DMA_Start_IT+0x47c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d040      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <HAL_DMA_Start_IT+0x480>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d03b      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a31      	ldr	r2, [pc, #196]	; (8006e54 <HAL_DMA_Start_IT+0x484>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d036      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a30      	ldr	r2, [pc, #192]	; (8006e58 <HAL_DMA_Start_IT+0x488>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d031      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2e      	ldr	r2, [pc, #184]	; (8006e5c <HAL_DMA_Start_IT+0x48c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d02c      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <HAL_DMA_Start_IT+0x490>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d027      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2b      	ldr	r2, [pc, #172]	; (8006e64 <HAL_DMA_Start_IT+0x494>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d022      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <HAL_DMA_Start_IT+0x498>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d01d      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a28      	ldr	r2, [pc, #160]	; (8006e6c <HAL_DMA_Start_IT+0x49c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d018      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <HAL_DMA_Start_IT+0x4a0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a25      	ldr	r2, [pc, #148]	; (8006e74 <HAL_DMA_Start_IT+0x4a4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00e      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a24      	ldr	r2, [pc, #144]	; (8006e78 <HAL_DMA_Start_IT+0x4a8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d009      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_DMA_Start_IT+0x4ac>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_DMA_Start_IT+0x430>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <HAL_DMA_Start_IT+0x4b0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d108      	bne.n	8006e12 <HAL_DMA_Start_IT+0x442>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e012      	b.n	8006e38 <HAL_DMA_Start_IT+0x468>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e009      	b.n	8006e38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40020010 	.word	0x40020010
 8006e48:	40020028 	.word	0x40020028
 8006e4c:	40020040 	.word	0x40020040
 8006e50:	40020058 	.word	0x40020058
 8006e54:	40020070 	.word	0x40020070
 8006e58:	40020088 	.word	0x40020088
 8006e5c:	400200a0 	.word	0x400200a0
 8006e60:	400200b8 	.word	0x400200b8
 8006e64:	40020410 	.word	0x40020410
 8006e68:	40020428 	.word	0x40020428
 8006e6c:	40020440 	.word	0x40020440
 8006e70:	40020458 	.word	0x40020458
 8006e74:	40020470 	.word	0x40020470
 8006e78:	40020488 	.word	0x40020488
 8006e7c:	400204a0 	.word	0x400204a0
 8006e80:	400204b8 	.word	0x400204b8
 8006e84:	58025408 	.word	0x58025408
 8006e88:	5802541c 	.word	0x5802541c
 8006e8c:	58025430 	.word	0x58025430
 8006e90:	58025444 	.word	0x58025444
 8006e94:	58025458 	.word	0x58025458
 8006e98:	5802546c 	.word	0x5802546c
 8006e9c:	58025480 	.word	0x58025480
 8006ea0:	58025494 	.word	0x58025494

08006ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006eac:	f7fd f90c 	bl	80040c8 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e2dc      	b.n	8007476 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d008      	beq.n	8006eda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2280      	movs	r2, #128	; 0x80
 8006ecc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e2cd      	b.n	8007476 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a76      	ldr	r2, [pc, #472]	; (80070b8 <HAL_DMA_Abort+0x214>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d04a      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a74      	ldr	r2, [pc, #464]	; (80070bc <HAL_DMA_Abort+0x218>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d045      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a73      	ldr	r2, [pc, #460]	; (80070c0 <HAL_DMA_Abort+0x21c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d040      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a71      	ldr	r2, [pc, #452]	; (80070c4 <HAL_DMA_Abort+0x220>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d03b      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a70      	ldr	r2, [pc, #448]	; (80070c8 <HAL_DMA_Abort+0x224>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d036      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6e      	ldr	r2, [pc, #440]	; (80070cc <HAL_DMA_Abort+0x228>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d031      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a6d      	ldr	r2, [pc, #436]	; (80070d0 <HAL_DMA_Abort+0x22c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d02c      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <HAL_DMA_Abort+0x230>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d027      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a6a      	ldr	r2, [pc, #424]	; (80070d8 <HAL_DMA_Abort+0x234>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d022      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_DMA_Abort+0x238>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01d      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a67      	ldr	r2, [pc, #412]	; (80070e0 <HAL_DMA_Abort+0x23c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d018      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a65      	ldr	r2, [pc, #404]	; (80070e4 <HAL_DMA_Abort+0x240>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a64      	ldr	r2, [pc, #400]	; (80070e8 <HAL_DMA_Abort+0x244>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a62      	ldr	r2, [pc, #392]	; (80070ec <HAL_DMA_Abort+0x248>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a61      	ldr	r2, [pc, #388]	; (80070f0 <HAL_DMA_Abort+0x24c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_DMA_Abort+0xd6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5f      	ldr	r2, [pc, #380]	; (80070f4 <HAL_DMA_Abort+0x250>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <HAL_DMA_Abort+0xda>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <HAL_DMA_Abort+0xdc>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 021e 	bic.w	r2, r2, #30
 8006f92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e00a      	b.n	8006fc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 020e 	bic.w	r2, r2, #14
 8006fba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3c      	ldr	r2, [pc, #240]	; (80070b8 <HAL_DMA_Abort+0x214>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d072      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <HAL_DMA_Abort+0x218>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d06d      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a39      	ldr	r2, [pc, #228]	; (80070c0 <HAL_DMA_Abort+0x21c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d068      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a37      	ldr	r2, [pc, #220]	; (80070c4 <HAL_DMA_Abort+0x220>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d063      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a36      	ldr	r2, [pc, #216]	; (80070c8 <HAL_DMA_Abort+0x224>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d05e      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a34      	ldr	r2, [pc, #208]	; (80070cc <HAL_DMA_Abort+0x228>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d059      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a33      	ldr	r2, [pc, #204]	; (80070d0 <HAL_DMA_Abort+0x22c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d054      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a31      	ldr	r2, [pc, #196]	; (80070d4 <HAL_DMA_Abort+0x230>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d04f      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a30      	ldr	r2, [pc, #192]	; (80070d8 <HAL_DMA_Abort+0x234>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d04a      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2e      	ldr	r2, [pc, #184]	; (80070dc <HAL_DMA_Abort+0x238>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d045      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2d      	ldr	r2, [pc, #180]	; (80070e0 <HAL_DMA_Abort+0x23c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d040      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <HAL_DMA_Abort+0x240>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d03b      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2a      	ldr	r2, [pc, #168]	; (80070e8 <HAL_DMA_Abort+0x244>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d036      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a28      	ldr	r2, [pc, #160]	; (80070ec <HAL_DMA_Abort+0x248>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d031      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <HAL_DMA_Abort+0x24c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d02c      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <HAL_DMA_Abort+0x250>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d027      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <HAL_DMA_Abort+0x254>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d022      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a22      	ldr	r2, [pc, #136]	; (80070fc <HAL_DMA_Abort+0x258>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01d      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a21      	ldr	r2, [pc, #132]	; (8007100 <HAL_DMA_Abort+0x25c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d018      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <HAL_DMA_Abort+0x260>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <HAL_DMA_Abort+0x264>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <HAL_DMA_Abort+0x268>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <HAL_DMA_Abort+0x26c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_DMA_Abort+0x20e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_DMA_Abort+0x270>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d132      	bne.n	8007118 <HAL_DMA_Abort+0x274>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e031      	b.n	800711a <HAL_DMA_Abort+0x276>
 80070b6:	bf00      	nop
 80070b8:	40020010 	.word	0x40020010
 80070bc:	40020028 	.word	0x40020028
 80070c0:	40020040 	.word	0x40020040
 80070c4:	40020058 	.word	0x40020058
 80070c8:	40020070 	.word	0x40020070
 80070cc:	40020088 	.word	0x40020088
 80070d0:	400200a0 	.word	0x400200a0
 80070d4:	400200b8 	.word	0x400200b8
 80070d8:	40020410 	.word	0x40020410
 80070dc:	40020428 	.word	0x40020428
 80070e0:	40020440 	.word	0x40020440
 80070e4:	40020458 	.word	0x40020458
 80070e8:	40020470 	.word	0x40020470
 80070ec:	40020488 	.word	0x40020488
 80070f0:	400204a0 	.word	0x400204a0
 80070f4:	400204b8 	.word	0x400204b8
 80070f8:	58025408 	.word	0x58025408
 80070fc:	5802541c 	.word	0x5802541c
 8007100:	58025430 	.word	0x58025430
 8007104:	58025444 	.word	0x58025444
 8007108:	58025458 	.word	0x58025458
 800710c:	5802546c 	.word	0x5802546c
 8007110:	58025480 	.word	0x58025480
 8007114:	58025494 	.word	0x58025494
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800712c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6d      	ldr	r2, [pc, #436]	; (80072e8 <HAL_DMA_Abort+0x444>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d04a      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a6b      	ldr	r2, [pc, #428]	; (80072ec <HAL_DMA_Abort+0x448>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a6a      	ldr	r2, [pc, #424]	; (80072f0 <HAL_DMA_Abort+0x44c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a68      	ldr	r2, [pc, #416]	; (80072f4 <HAL_DMA_Abort+0x450>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d03b      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a67      	ldr	r2, [pc, #412]	; (80072f8 <HAL_DMA_Abort+0x454>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d036      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a65      	ldr	r2, [pc, #404]	; (80072fc <HAL_DMA_Abort+0x458>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d031      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a64      	ldr	r2, [pc, #400]	; (8007300 <HAL_DMA_Abort+0x45c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d02c      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a62      	ldr	r2, [pc, #392]	; (8007304 <HAL_DMA_Abort+0x460>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d027      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a61      	ldr	r2, [pc, #388]	; (8007308 <HAL_DMA_Abort+0x464>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5f      	ldr	r2, [pc, #380]	; (800730c <HAL_DMA_Abort+0x468>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5e      	ldr	r2, [pc, #376]	; (8007310 <HAL_DMA_Abort+0x46c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a5c      	ldr	r2, [pc, #368]	; (8007314 <HAL_DMA_Abort+0x470>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a5b      	ldr	r2, [pc, #364]	; (8007318 <HAL_DMA_Abort+0x474>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a59      	ldr	r2, [pc, #356]	; (800731c <HAL_DMA_Abort+0x478>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a58      	ldr	r2, [pc, #352]	; (8007320 <HAL_DMA_Abort+0x47c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_DMA_Abort+0x32a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a56      	ldr	r2, [pc, #344]	; (8007324 <HAL_DMA_Abort+0x480>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d108      	bne.n	80071e0 <HAL_DMA_Abort+0x33c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e007      	b.n	80071f0 <HAL_DMA_Abort+0x34c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071f0:	e013      	b.n	800721a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071f2:	f7fc ff69 	bl	80040c8 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	d90c      	bls.n	800721a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2203      	movs	r2, #3
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e12d      	b.n	8007476 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a2f      	ldr	r2, [pc, #188]	; (80072e8 <HAL_DMA_Abort+0x444>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d04a      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <HAL_DMA_Abort+0x448>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d045      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <HAL_DMA_Abort+0x44c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d040      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <HAL_DMA_Abort+0x450>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d03b      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <HAL_DMA_Abort+0x454>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d036      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <HAL_DMA_Abort+0x458>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d031      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a26      	ldr	r2, [pc, #152]	; (8007300 <HAL_DMA_Abort+0x45c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d02c      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a24      	ldr	r2, [pc, #144]	; (8007304 <HAL_DMA_Abort+0x460>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d027      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a23      	ldr	r2, [pc, #140]	; (8007308 <HAL_DMA_Abort+0x464>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a21      	ldr	r2, [pc, #132]	; (800730c <HAL_DMA_Abort+0x468>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01d      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a20      	ldr	r2, [pc, #128]	; (8007310 <HAL_DMA_Abort+0x46c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <HAL_DMA_Abort+0x470>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_DMA_Abort+0x474>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1b      	ldr	r2, [pc, #108]	; (800731c <HAL_DMA_Abort+0x478>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <HAL_DMA_Abort+0x47c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_DMA_Abort+0x422>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <HAL_DMA_Abort+0x480>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d101      	bne.n	80072ca <HAL_DMA_Abort+0x426>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <HAL_DMA_Abort+0x428>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02b      	beq.n	8007328 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	223f      	movs	r2, #63	; 0x3f
 80072e0:	409a      	lsls	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	609a      	str	r2, [r3, #8]
 80072e6:	e02a      	b.n	800733e <HAL_DMA_Abort+0x49a>
 80072e8:	40020010 	.word	0x40020010
 80072ec:	40020028 	.word	0x40020028
 80072f0:	40020040 	.word	0x40020040
 80072f4:	40020058 	.word	0x40020058
 80072f8:	40020070 	.word	0x40020070
 80072fc:	40020088 	.word	0x40020088
 8007300:	400200a0 	.word	0x400200a0
 8007304:	400200b8 	.word	0x400200b8
 8007308:	40020410 	.word	0x40020410
 800730c:	40020428 	.word	0x40020428
 8007310:	40020440 	.word	0x40020440
 8007314:	40020458 	.word	0x40020458
 8007318:	40020470 	.word	0x40020470
 800731c:	40020488 	.word	0x40020488
 8007320:	400204a0 	.word	0x400204a0
 8007324:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2201      	movs	r2, #1
 8007338:	409a      	lsls	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4f      	ldr	r2, [pc, #316]	; (8007480 <HAL_DMA_Abort+0x5dc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d072      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a4d      	ldr	r2, [pc, #308]	; (8007484 <HAL_DMA_Abort+0x5e0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d06d      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4c      	ldr	r2, [pc, #304]	; (8007488 <HAL_DMA_Abort+0x5e4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d068      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a4a      	ldr	r2, [pc, #296]	; (800748c <HAL_DMA_Abort+0x5e8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d063      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a49      	ldr	r2, [pc, #292]	; (8007490 <HAL_DMA_Abort+0x5ec>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d05e      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a47      	ldr	r2, [pc, #284]	; (8007494 <HAL_DMA_Abort+0x5f0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d059      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a46      	ldr	r2, [pc, #280]	; (8007498 <HAL_DMA_Abort+0x5f4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d054      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a44      	ldr	r2, [pc, #272]	; (800749c <HAL_DMA_Abort+0x5f8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d04f      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a43      	ldr	r2, [pc, #268]	; (80074a0 <HAL_DMA_Abort+0x5fc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d04a      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a41      	ldr	r2, [pc, #260]	; (80074a4 <HAL_DMA_Abort+0x600>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d045      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a40      	ldr	r2, [pc, #256]	; (80074a8 <HAL_DMA_Abort+0x604>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d040      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a3e      	ldr	r2, [pc, #248]	; (80074ac <HAL_DMA_Abort+0x608>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d03b      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3d      	ldr	r2, [pc, #244]	; (80074b0 <HAL_DMA_Abort+0x60c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d036      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a3b      	ldr	r2, [pc, #236]	; (80074b4 <HAL_DMA_Abort+0x610>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d031      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a3a      	ldr	r2, [pc, #232]	; (80074b8 <HAL_DMA_Abort+0x614>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d02c      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a38      	ldr	r2, [pc, #224]	; (80074bc <HAL_DMA_Abort+0x618>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d027      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a37      	ldr	r2, [pc, #220]	; (80074c0 <HAL_DMA_Abort+0x61c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d022      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a35      	ldr	r2, [pc, #212]	; (80074c4 <HAL_DMA_Abort+0x620>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01d      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a34      	ldr	r2, [pc, #208]	; (80074c8 <HAL_DMA_Abort+0x624>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d018      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a32      	ldr	r2, [pc, #200]	; (80074cc <HAL_DMA_Abort+0x628>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a31      	ldr	r2, [pc, #196]	; (80074d0 <HAL_DMA_Abort+0x62c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00e      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2f      	ldr	r2, [pc, #188]	; (80074d4 <HAL_DMA_Abort+0x630>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_DMA_Abort+0x634>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_DMA_Abort+0x58a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <HAL_DMA_Abort+0x638>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d101      	bne.n	8007432 <HAL_DMA_Abort+0x58e>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <HAL_DMA_Abort+0x590>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d015      	beq.n	8007464 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007440:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007458:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007462:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40020010 	.word	0x40020010
 8007484:	40020028 	.word	0x40020028
 8007488:	40020040 	.word	0x40020040
 800748c:	40020058 	.word	0x40020058
 8007490:	40020070 	.word	0x40020070
 8007494:	40020088 	.word	0x40020088
 8007498:	400200a0 	.word	0x400200a0
 800749c:	400200b8 	.word	0x400200b8
 80074a0:	40020410 	.word	0x40020410
 80074a4:	40020428 	.word	0x40020428
 80074a8:	40020440 	.word	0x40020440
 80074ac:	40020458 	.word	0x40020458
 80074b0:	40020470 	.word	0x40020470
 80074b4:	40020488 	.word	0x40020488
 80074b8:	400204a0 	.word	0x400204a0
 80074bc:	400204b8 	.word	0x400204b8
 80074c0:	58025408 	.word	0x58025408
 80074c4:	5802541c 	.word	0x5802541c
 80074c8:	58025430 	.word	0x58025430
 80074cc:	58025444 	.word	0x58025444
 80074d0:	58025458 	.word	0x58025458
 80074d4:	5802546c 	.word	0x5802546c
 80074d8:	58025480 	.word	0x58025480
 80074dc:	58025494 	.word	0x58025494

080074e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e237      	b.n	8007962 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d004      	beq.n	8007508 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2280      	movs	r2, #128	; 0x80
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e22c      	b.n	8007962 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a5c      	ldr	r2, [pc, #368]	; (8007680 <HAL_DMA_Abort_IT+0x1a0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d04a      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a5b      	ldr	r2, [pc, #364]	; (8007684 <HAL_DMA_Abort_IT+0x1a4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d045      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a59      	ldr	r2, [pc, #356]	; (8007688 <HAL_DMA_Abort_IT+0x1a8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d040      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a58      	ldr	r2, [pc, #352]	; (800768c <HAL_DMA_Abort_IT+0x1ac>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d03b      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a56      	ldr	r2, [pc, #344]	; (8007690 <HAL_DMA_Abort_IT+0x1b0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d036      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a55      	ldr	r2, [pc, #340]	; (8007694 <HAL_DMA_Abort_IT+0x1b4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d031      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a53      	ldr	r2, [pc, #332]	; (8007698 <HAL_DMA_Abort_IT+0x1b8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d02c      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a52      	ldr	r2, [pc, #328]	; (800769c <HAL_DMA_Abort_IT+0x1bc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d027      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a50      	ldr	r2, [pc, #320]	; (80076a0 <HAL_DMA_Abort_IT+0x1c0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d022      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a4f      	ldr	r2, [pc, #316]	; (80076a4 <HAL_DMA_Abort_IT+0x1c4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d01d      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a4d      	ldr	r2, [pc, #308]	; (80076a8 <HAL_DMA_Abort_IT+0x1c8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d018      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a4c      	ldr	r2, [pc, #304]	; (80076ac <HAL_DMA_Abort_IT+0x1cc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a4a      	ldr	r2, [pc, #296]	; (80076b0 <HAL_DMA_Abort_IT+0x1d0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a49      	ldr	r2, [pc, #292]	; (80076b4 <HAL_DMA_Abort_IT+0x1d4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a47      	ldr	r2, [pc, #284]	; (80076b8 <HAL_DMA_Abort_IT+0x1d8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_DMA_Abort_IT+0xc8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a46      	ldr	r2, [pc, #280]	; (80076bc <HAL_DMA_Abort_IT+0x1dc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d101      	bne.n	80075ac <HAL_DMA_Abort_IT+0xcc>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_DMA_Abort_IT+0xce>
 80075ac:	2300      	movs	r3, #0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8086 	beq.w	80076c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2204      	movs	r2, #4
 80075b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2f      	ldr	r2, [pc, #188]	; (8007680 <HAL_DMA_Abort_IT+0x1a0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d04a      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2e      	ldr	r2, [pc, #184]	; (8007684 <HAL_DMA_Abort_IT+0x1a4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d045      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a2c      	ldr	r2, [pc, #176]	; (8007688 <HAL_DMA_Abort_IT+0x1a8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d040      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2b      	ldr	r2, [pc, #172]	; (800768c <HAL_DMA_Abort_IT+0x1ac>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d03b      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a29      	ldr	r2, [pc, #164]	; (8007690 <HAL_DMA_Abort_IT+0x1b0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d036      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a28      	ldr	r2, [pc, #160]	; (8007694 <HAL_DMA_Abort_IT+0x1b4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d031      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a26      	ldr	r2, [pc, #152]	; (8007698 <HAL_DMA_Abort_IT+0x1b8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d02c      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a25      	ldr	r2, [pc, #148]	; (800769c <HAL_DMA_Abort_IT+0x1bc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d027      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a23      	ldr	r2, [pc, #140]	; (80076a0 <HAL_DMA_Abort_IT+0x1c0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d022      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a22      	ldr	r2, [pc, #136]	; (80076a4 <HAL_DMA_Abort_IT+0x1c4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d01d      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <HAL_DMA_Abort_IT+0x1c8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_DMA_Abort_IT+0x1cc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1d      	ldr	r2, [pc, #116]	; (80076b0 <HAL_DMA_Abort_IT+0x1d0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <HAL_DMA_Abort_IT+0x1d4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <HAL_DMA_Abort_IT+0x1d8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_DMA_Abort_IT+0x17c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a19      	ldr	r2, [pc, #100]	; (80076bc <HAL_DMA_Abort_IT+0x1dc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d108      	bne.n	800766e <HAL_DMA_Abort_IT+0x18e>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e178      	b.n	8007960 <HAL_DMA_Abort_IT+0x480>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e16f      	b.n	8007960 <HAL_DMA_Abort_IT+0x480>
 8007680:	40020010 	.word	0x40020010
 8007684:	40020028 	.word	0x40020028
 8007688:	40020040 	.word	0x40020040
 800768c:	40020058 	.word	0x40020058
 8007690:	40020070 	.word	0x40020070
 8007694:	40020088 	.word	0x40020088
 8007698:	400200a0 	.word	0x400200a0
 800769c:	400200b8 	.word	0x400200b8
 80076a0:	40020410 	.word	0x40020410
 80076a4:	40020428 	.word	0x40020428
 80076a8:	40020440 	.word	0x40020440
 80076ac:	40020458 	.word	0x40020458
 80076b0:	40020470 	.word	0x40020470
 80076b4:	40020488 	.word	0x40020488
 80076b8:	400204a0 	.word	0x400204a0
 80076bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 020e 	bic.w	r2, r2, #14
 80076ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a6c      	ldr	r2, [pc, #432]	; (8007888 <HAL_DMA_Abort_IT+0x3a8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d04a      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6b      	ldr	r2, [pc, #428]	; (800788c <HAL_DMA_Abort_IT+0x3ac>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d045      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a69      	ldr	r2, [pc, #420]	; (8007890 <HAL_DMA_Abort_IT+0x3b0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d040      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a68      	ldr	r2, [pc, #416]	; (8007894 <HAL_DMA_Abort_IT+0x3b4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d03b      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a66      	ldr	r2, [pc, #408]	; (8007898 <HAL_DMA_Abort_IT+0x3b8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d036      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a65      	ldr	r2, [pc, #404]	; (800789c <HAL_DMA_Abort_IT+0x3bc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d031      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a63      	ldr	r2, [pc, #396]	; (80078a0 <HAL_DMA_Abort_IT+0x3c0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d02c      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a62      	ldr	r2, [pc, #392]	; (80078a4 <HAL_DMA_Abort_IT+0x3c4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d027      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a60      	ldr	r2, [pc, #384]	; (80078a8 <HAL_DMA_Abort_IT+0x3c8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d022      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a5f      	ldr	r2, [pc, #380]	; (80078ac <HAL_DMA_Abort_IT+0x3cc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d01d      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a5d      	ldr	r2, [pc, #372]	; (80078b0 <HAL_DMA_Abort_IT+0x3d0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d018      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a5c      	ldr	r2, [pc, #368]	; (80078b4 <HAL_DMA_Abort_IT+0x3d4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a5a      	ldr	r2, [pc, #360]	; (80078b8 <HAL_DMA_Abort_IT+0x3d8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a59      	ldr	r2, [pc, #356]	; (80078bc <HAL_DMA_Abort_IT+0x3dc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a57      	ldr	r2, [pc, #348]	; (80078c0 <HAL_DMA_Abort_IT+0x3e0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_DMA_Abort_IT+0x290>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a56      	ldr	r2, [pc, #344]	; (80078c4 <HAL_DMA_Abort_IT+0x3e4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d108      	bne.n	8007782 <HAL_DMA_Abort_IT+0x2a2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e007      	b.n	8007792 <HAL_DMA_Abort_IT+0x2b2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0201 	bic.w	r2, r2, #1
 8007790:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a3c      	ldr	r2, [pc, #240]	; (8007888 <HAL_DMA_Abort_IT+0x3a8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d072      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a3a      	ldr	r2, [pc, #232]	; (800788c <HAL_DMA_Abort_IT+0x3ac>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d06d      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a39      	ldr	r2, [pc, #228]	; (8007890 <HAL_DMA_Abort_IT+0x3b0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d068      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a37      	ldr	r2, [pc, #220]	; (8007894 <HAL_DMA_Abort_IT+0x3b4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d063      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a36      	ldr	r2, [pc, #216]	; (8007898 <HAL_DMA_Abort_IT+0x3b8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d05e      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a34      	ldr	r2, [pc, #208]	; (800789c <HAL_DMA_Abort_IT+0x3bc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d059      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a33      	ldr	r2, [pc, #204]	; (80078a0 <HAL_DMA_Abort_IT+0x3c0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d054      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <HAL_DMA_Abort_IT+0x3c4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04f      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a30      	ldr	r2, [pc, #192]	; (80078a8 <HAL_DMA_Abort_IT+0x3c8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d04a      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2e      	ldr	r2, [pc, #184]	; (80078ac <HAL_DMA_Abort_IT+0x3cc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d045      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2d      	ldr	r2, [pc, #180]	; (80078b0 <HAL_DMA_Abort_IT+0x3d0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d040      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2b      	ldr	r2, [pc, #172]	; (80078b4 <HAL_DMA_Abort_IT+0x3d4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d03b      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <HAL_DMA_Abort_IT+0x3d8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d036      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a28      	ldr	r2, [pc, #160]	; (80078bc <HAL_DMA_Abort_IT+0x3dc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d031      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <HAL_DMA_Abort_IT+0x3e0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d02c      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a25      	ldr	r2, [pc, #148]	; (80078c4 <HAL_DMA_Abort_IT+0x3e4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d027      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a24      	ldr	r2, [pc, #144]	; (80078c8 <HAL_DMA_Abort_IT+0x3e8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d022      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a22      	ldr	r2, [pc, #136]	; (80078cc <HAL_DMA_Abort_IT+0x3ec>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d01d      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a21      	ldr	r2, [pc, #132]	; (80078d0 <HAL_DMA_Abort_IT+0x3f0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d018      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1f      	ldr	r2, [pc, #124]	; (80078d4 <HAL_DMA_Abort_IT+0x3f4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1e      	ldr	r2, [pc, #120]	; (80078d8 <HAL_DMA_Abort_IT+0x3f8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <HAL_DMA_Abort_IT+0x3fc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <HAL_DMA_Abort_IT+0x400>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_DMA_Abort_IT+0x3a2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <HAL_DMA_Abort_IT+0x404>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d132      	bne.n	80078e8 <HAL_DMA_Abort_IT+0x408>
 8007882:	2301      	movs	r3, #1
 8007884:	e031      	b.n	80078ea <HAL_DMA_Abort_IT+0x40a>
 8007886:	bf00      	nop
 8007888:	40020010 	.word	0x40020010
 800788c:	40020028 	.word	0x40020028
 8007890:	40020040 	.word	0x40020040
 8007894:	40020058 	.word	0x40020058
 8007898:	40020070 	.word	0x40020070
 800789c:	40020088 	.word	0x40020088
 80078a0:	400200a0 	.word	0x400200a0
 80078a4:	400200b8 	.word	0x400200b8
 80078a8:	40020410 	.word	0x40020410
 80078ac:	40020428 	.word	0x40020428
 80078b0:	40020440 	.word	0x40020440
 80078b4:	40020458 	.word	0x40020458
 80078b8:	40020470 	.word	0x40020470
 80078bc:	40020488 	.word	0x40020488
 80078c0:	400204a0 	.word	0x400204a0
 80078c4:	400204b8 	.word	0x400204b8
 80078c8:	58025408 	.word	0x58025408
 80078cc:	5802541c 	.word	0x5802541c
 80078d0:	58025430 	.word	0x58025430
 80078d4:	58025444 	.word	0x58025444
 80078d8:	58025458 	.word	0x58025458
 80078dc:	5802546c 	.word	0x5802546c
 80078e0:	58025480 	.word	0x58025480
 80078e4:	58025494 	.word	0x58025494
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d028      	beq.n	8007940 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007902:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2201      	movs	r2, #1
 800790e:	409a      	lsls	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800791c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00c      	beq.n	8007940 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007934:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800793e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007978:	4b67      	ldr	r3, [pc, #412]	; (8007b18 <HAL_DMA_IRQHandler+0x1ac>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a67      	ldr	r2, [pc, #412]	; (8007b1c <HAL_DMA_IRQHandler+0x1b0>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	0a9b      	lsrs	r3, r3, #10
 8007984:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007990:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a5f      	ldr	r2, [pc, #380]	; (8007b20 <HAL_DMA_IRQHandler+0x1b4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d04a      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5d      	ldr	r2, [pc, #372]	; (8007b24 <HAL_DMA_IRQHandler+0x1b8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d045      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a5c      	ldr	r2, [pc, #368]	; (8007b28 <HAL_DMA_IRQHandler+0x1bc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d040      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a5a      	ldr	r2, [pc, #360]	; (8007b2c <HAL_DMA_IRQHandler+0x1c0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d03b      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a59      	ldr	r2, [pc, #356]	; (8007b30 <HAL_DMA_IRQHandler+0x1c4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d036      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a57      	ldr	r2, [pc, #348]	; (8007b34 <HAL_DMA_IRQHandler+0x1c8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d031      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a56      	ldr	r2, [pc, #344]	; (8007b38 <HAL_DMA_IRQHandler+0x1cc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d02c      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a54      	ldr	r2, [pc, #336]	; (8007b3c <HAL_DMA_IRQHandler+0x1d0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d027      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a53      	ldr	r2, [pc, #332]	; (8007b40 <HAL_DMA_IRQHandler+0x1d4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d022      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a51      	ldr	r2, [pc, #324]	; (8007b44 <HAL_DMA_IRQHandler+0x1d8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a50      	ldr	r2, [pc, #320]	; (8007b48 <HAL_DMA_IRQHandler+0x1dc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d018      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a4e      	ldr	r2, [pc, #312]	; (8007b4c <HAL_DMA_IRQHandler+0x1e0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4d      	ldr	r2, [pc, #308]	; (8007b50 <HAL_DMA_IRQHandler+0x1e4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a4b      	ldr	r2, [pc, #300]	; (8007b54 <HAL_DMA_IRQHandler+0x1e8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a4a      	ldr	r2, [pc, #296]	; (8007b58 <HAL_DMA_IRQHandler+0x1ec>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xd2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a48      	ldr	r2, [pc, #288]	; (8007b5c <HAL_DMA_IRQHandler+0x1f0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d101      	bne.n	8007a42 <HAL_DMA_IRQHandler+0xd6>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <HAL_DMA_IRQHandler+0xd8>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 842b 	beq.w	80082a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4e:	f003 031f 	and.w	r3, r3, #31
 8007a52:	2208      	movs	r2, #8
 8007a54:	409a      	lsls	r2, r3
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80a2 	beq.w	8007ba4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2e      	ldr	r2, [pc, #184]	; (8007b20 <HAL_DMA_IRQHandler+0x1b4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d04a      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <HAL_DMA_IRQHandler+0x1b8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d045      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <HAL_DMA_IRQHandler+0x1bc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d040      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <HAL_DMA_IRQHandler+0x1c0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d03b      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <HAL_DMA_IRQHandler+0x1c4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d036      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <HAL_DMA_IRQHandler+0x1c8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d031      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <HAL_DMA_IRQHandler+0x1cc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02c      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a24      	ldr	r2, [pc, #144]	; (8007b3c <HAL_DMA_IRQHandler+0x1d0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d027      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <HAL_DMA_IRQHandler+0x1d4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <HAL_DMA_IRQHandler+0x1d8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01d      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <HAL_DMA_IRQHandler+0x1dc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <HAL_DMA_IRQHandler+0x1e0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <HAL_DMA_IRQHandler+0x1e4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_DMA_IRQHandler+0x1e8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <HAL_DMA_IRQHandler+0x1ec>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <HAL_DMA_IRQHandler+0x194>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_DMA_IRQHandler+0x1f0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d12f      	bne.n	8007b60 <HAL_DMA_IRQHandler+0x1f4>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf14      	ite	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	2300      	moveq	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e02e      	b.n	8007b74 <HAL_DMA_IRQHandler+0x208>
 8007b16:	bf00      	nop
 8007b18:	2400008c 	.word	0x2400008c
 8007b1c:	1b4e81b5 	.word	0x1b4e81b5
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d015      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0204 	bic.w	r2, r2, #4
 8007b86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	2208      	movs	r2, #8
 8007b92:	409a      	lsls	r2, r3
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f043 0201 	orr.w	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d06e      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a69      	ldr	r2, [pc, #420]	; (8007d64 <HAL_DMA_IRQHandler+0x3f8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d04a      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a67      	ldr	r2, [pc, #412]	; (8007d68 <HAL_DMA_IRQHandler+0x3fc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d045      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a66      	ldr	r2, [pc, #408]	; (8007d6c <HAL_DMA_IRQHandler+0x400>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d040      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a64      	ldr	r2, [pc, #400]	; (8007d70 <HAL_DMA_IRQHandler+0x404>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d03b      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a63      	ldr	r2, [pc, #396]	; (8007d74 <HAL_DMA_IRQHandler+0x408>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d036      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a61      	ldr	r2, [pc, #388]	; (8007d78 <HAL_DMA_IRQHandler+0x40c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d031      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a60      	ldr	r2, [pc, #384]	; (8007d7c <HAL_DMA_IRQHandler+0x410>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d02c      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a5e      	ldr	r2, [pc, #376]	; (8007d80 <HAL_DMA_IRQHandler+0x414>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d027      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5d      	ldr	r2, [pc, #372]	; (8007d84 <HAL_DMA_IRQHandler+0x418>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d022      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5b      	ldr	r2, [pc, #364]	; (8007d88 <HAL_DMA_IRQHandler+0x41c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01d      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a5a      	ldr	r2, [pc, #360]	; (8007d8c <HAL_DMA_IRQHandler+0x420>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d018      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a58      	ldr	r2, [pc, #352]	; (8007d90 <HAL_DMA_IRQHandler+0x424>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a57      	ldr	r2, [pc, #348]	; (8007d94 <HAL_DMA_IRQHandler+0x428>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00e      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a55      	ldr	r2, [pc, #340]	; (8007d98 <HAL_DMA_IRQHandler+0x42c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a54      	ldr	r2, [pc, #336]	; (8007d9c <HAL_DMA_IRQHandler+0x430>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d004      	beq.n	8007c5a <HAL_DMA_IRQHandler+0x2ee>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a52      	ldr	r2, [pc, #328]	; (8007da0 <HAL_DMA_IRQHandler+0x434>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d10a      	bne.n	8007c70 <HAL_DMA_IRQHandler+0x304>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bf14      	ite	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	2300      	moveq	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e003      	b.n	8007c78 <HAL_DMA_IRQHandler+0x30c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c90:	f043 0202 	orr.w	r2, r3, #2
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 808f 	beq.w	8007dcc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <HAL_DMA_IRQHandler+0x3f8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04a      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2a      	ldr	r2, [pc, #168]	; (8007d68 <HAL_DMA_IRQHandler+0x3fc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d045      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a29      	ldr	r2, [pc, #164]	; (8007d6c <HAL_DMA_IRQHandler+0x400>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d040      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a27      	ldr	r2, [pc, #156]	; (8007d70 <HAL_DMA_IRQHandler+0x404>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a26      	ldr	r2, [pc, #152]	; (8007d74 <HAL_DMA_IRQHandler+0x408>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d036      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a24      	ldr	r2, [pc, #144]	; (8007d78 <HAL_DMA_IRQHandler+0x40c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d031      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a23      	ldr	r2, [pc, #140]	; (8007d7c <HAL_DMA_IRQHandler+0x410>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02c      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <HAL_DMA_IRQHandler+0x414>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d027      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <HAL_DMA_IRQHandler+0x418>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1e      	ldr	r2, [pc, #120]	; (8007d88 <HAL_DMA_IRQHandler+0x41c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <HAL_DMA_IRQHandler+0x420>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <HAL_DMA_IRQHandler+0x424>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <HAL_DMA_IRQHandler+0x428>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <HAL_DMA_IRQHandler+0x42c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <HAL_DMA_IRQHandler+0x430>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x3e2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <HAL_DMA_IRQHandler+0x434>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d12a      	bne.n	8007da4 <HAL_DMA_IRQHandler+0x438>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf14      	ite	ne
 8007d5c:	2301      	movne	r3, #1
 8007d5e:	2300      	moveq	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	e023      	b.n	8007dac <HAL_DMA_IRQHandler+0x440>
 8007d64:	40020010 	.word	0x40020010
 8007d68:	40020028 	.word	0x40020028
 8007d6c:	40020040 	.word	0x40020040
 8007d70:	40020058 	.word	0x40020058
 8007d74:	40020070 	.word	0x40020070
 8007d78:	40020088 	.word	0x40020088
 8007d7c:	400200a0 	.word	0x400200a0
 8007d80:	400200b8 	.word	0x400200b8
 8007d84:	40020410 	.word	0x40020410
 8007d88:	40020428 	.word	0x40020428
 8007d8c:	40020440 	.word	0x40020440
 8007d90:	40020458 	.word	0x40020458
 8007d94:	40020470 	.word	0x40020470
 8007d98:	40020488 	.word	0x40020488
 8007d9c:	400204a0 	.word	0x400204a0
 8007da0:	400204b8 	.word	0x400204b8
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00d      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2204      	movs	r2, #4
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc4:	f043 0204 	orr.w	r2, r3, #4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80a6 	beq.w	8007f2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a85      	ldr	r2, [pc, #532]	; (8007ffc <HAL_DMA_IRQHandler+0x690>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d04a      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a83      	ldr	r2, [pc, #524]	; (8008000 <HAL_DMA_IRQHandler+0x694>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d045      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a82      	ldr	r2, [pc, #520]	; (8008004 <HAL_DMA_IRQHandler+0x698>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d040      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a80      	ldr	r2, [pc, #512]	; (8008008 <HAL_DMA_IRQHandler+0x69c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d03b      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a7f      	ldr	r2, [pc, #508]	; (800800c <HAL_DMA_IRQHandler+0x6a0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d036      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a7d      	ldr	r2, [pc, #500]	; (8008010 <HAL_DMA_IRQHandler+0x6a4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d031      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a7c      	ldr	r2, [pc, #496]	; (8008014 <HAL_DMA_IRQHandler+0x6a8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d02c      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a7a      	ldr	r2, [pc, #488]	; (8008018 <HAL_DMA_IRQHandler+0x6ac>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d027      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a79      	ldr	r2, [pc, #484]	; (800801c <HAL_DMA_IRQHandler+0x6b0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a77      	ldr	r2, [pc, #476]	; (8008020 <HAL_DMA_IRQHandler+0x6b4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a76      	ldr	r2, [pc, #472]	; (8008024 <HAL_DMA_IRQHandler+0x6b8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a74      	ldr	r2, [pc, #464]	; (8008028 <HAL_DMA_IRQHandler+0x6bc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a73      	ldr	r2, [pc, #460]	; (800802c <HAL_DMA_IRQHandler+0x6c0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a71      	ldr	r2, [pc, #452]	; (8008030 <HAL_DMA_IRQHandler+0x6c4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a70      	ldr	r2, [pc, #448]	; (8008034 <HAL_DMA_IRQHandler+0x6c8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x516>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a6e      	ldr	r2, [pc, #440]	; (8008038 <HAL_DMA_IRQHandler+0x6cc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d10a      	bne.n	8007e98 <HAL_DMA_IRQHandler+0x52c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e009      	b.n	8007eac <HAL_DMA_IRQHandler+0x540>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bf14      	ite	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03e      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2210      	movs	r2, #16
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d018      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d108      	bne.n	8007eee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d024      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
 8007eec:	e01f      	b.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01b      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	e016      	b.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0208 	bic.w	r2, r2, #8
 8007f1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2220      	movs	r2, #32
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8110 	beq.w	8008164 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2c      	ldr	r2, [pc, #176]	; (8007ffc <HAL_DMA_IRQHandler+0x690>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d04a      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2b      	ldr	r2, [pc, #172]	; (8008000 <HAL_DMA_IRQHandler+0x694>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d045      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a29      	ldr	r2, [pc, #164]	; (8008004 <HAL_DMA_IRQHandler+0x698>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d040      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a28      	ldr	r2, [pc, #160]	; (8008008 <HAL_DMA_IRQHandler+0x69c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d03b      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a26      	ldr	r2, [pc, #152]	; (800800c <HAL_DMA_IRQHandler+0x6a0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d036      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a25      	ldr	r2, [pc, #148]	; (8008010 <HAL_DMA_IRQHandler+0x6a4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d031      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a23      	ldr	r2, [pc, #140]	; (8008014 <HAL_DMA_IRQHandler+0x6a8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d02c      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a22      	ldr	r2, [pc, #136]	; (8008018 <HAL_DMA_IRQHandler+0x6ac>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d027      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a20      	ldr	r2, [pc, #128]	; (800801c <HAL_DMA_IRQHandler+0x6b0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d022      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <HAL_DMA_IRQHandler+0x6b4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d01d      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <HAL_DMA_IRQHandler+0x6b8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d018      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1c      	ldr	r2, [pc, #112]	; (8008028 <HAL_DMA_IRQHandler+0x6bc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1a      	ldr	r2, [pc, #104]	; (800802c <HAL_DMA_IRQHandler+0x6c0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00e      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a19      	ldr	r2, [pc, #100]	; (8008030 <HAL_DMA_IRQHandler+0x6c4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d009      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a17      	ldr	r2, [pc, #92]	; (8008034 <HAL_DMA_IRQHandler+0x6c8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x678>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a16      	ldr	r2, [pc, #88]	; (8008038 <HAL_DMA_IRQHandler+0x6cc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d12b      	bne.n	800803c <HAL_DMA_IRQHandler+0x6d0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e02a      	b.n	8008050 <HAL_DMA_IRQHandler+0x6e4>
 8007ffa:	bf00      	nop
 8007ffc:	40020010 	.word	0x40020010
 8008000:	40020028 	.word	0x40020028
 8008004:	40020040 	.word	0x40020040
 8008008:	40020058 	.word	0x40020058
 800800c:	40020070 	.word	0x40020070
 8008010:	40020088 	.word	0x40020088
 8008014:	400200a0 	.word	0x400200a0
 8008018:	400200b8 	.word	0x400200b8
 800801c:	40020410 	.word	0x40020410
 8008020:	40020428 	.word	0x40020428
 8008024:	40020440 	.word	0x40020440
 8008028:	40020458 	.word	0x40020458
 800802c:	40020470 	.word	0x40020470
 8008030:	40020488 	.word	0x40020488
 8008034:	400204a0 	.word	0x400204a0
 8008038:	400204b8 	.word	0x400204b8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	bf14      	ite	ne
 800804a:	2301      	movne	r3, #1
 800804c:	2300      	moveq	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8087 	beq.w	8008164 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2220      	movs	r2, #32
 8008060:	409a      	lsls	r2, r3
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b04      	cmp	r3, #4
 8008070:	d139      	bne.n	80080e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0216 	bic.w	r2, r2, #22
 8008080:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695a      	ldr	r2, [r3, #20]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008090:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d103      	bne.n	80080a2 <HAL_DMA_IRQHandler+0x736>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0208 	bic.w	r2, r2, #8
 80080b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	223f      	movs	r2, #63	; 0x3f
 80080bc:	409a      	lsls	r2, r3
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 834a 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
          }
          return;
 80080e4:	e344      	b.n	8008770 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d018      	beq.n	8008126 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008106:	2b00      	cmp	r3, #0
 8008108:	d02c      	beq.n	8008164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
 8008112:	e027      	b.n	8008164 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d023      	beq.n	8008164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
 8008124:	e01e      	b.n	8008164 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10f      	bne.n	8008154 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0210 	bic.w	r2, r2, #16
 8008142:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8306 	beq.w	800877a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8088 	beq.w	800828c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2204      	movs	r2, #4
 8008180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a7a      	ldr	r2, [pc, #488]	; (8008374 <HAL_DMA_IRQHandler+0xa08>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d04a      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a79      	ldr	r2, [pc, #484]	; (8008378 <HAL_DMA_IRQHandler+0xa0c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d045      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a77      	ldr	r2, [pc, #476]	; (800837c <HAL_DMA_IRQHandler+0xa10>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d040      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a76      	ldr	r2, [pc, #472]	; (8008380 <HAL_DMA_IRQHandler+0xa14>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d03b      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a74      	ldr	r2, [pc, #464]	; (8008384 <HAL_DMA_IRQHandler+0xa18>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d036      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a73      	ldr	r2, [pc, #460]	; (8008388 <HAL_DMA_IRQHandler+0xa1c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d031      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a71      	ldr	r2, [pc, #452]	; (800838c <HAL_DMA_IRQHandler+0xa20>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d02c      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a70      	ldr	r2, [pc, #448]	; (8008390 <HAL_DMA_IRQHandler+0xa24>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d027      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6e      	ldr	r2, [pc, #440]	; (8008394 <HAL_DMA_IRQHandler+0xa28>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d022      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a6d      	ldr	r2, [pc, #436]	; (8008398 <HAL_DMA_IRQHandler+0xa2c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01d      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a6b      	ldr	r2, [pc, #428]	; (800839c <HAL_DMA_IRQHandler+0xa30>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a6a      	ldr	r2, [pc, #424]	; (80083a0 <HAL_DMA_IRQHandler+0xa34>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a68      	ldr	r2, [pc, #416]	; (80083a4 <HAL_DMA_IRQHandler+0xa38>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a67      	ldr	r2, [pc, #412]	; (80083a8 <HAL_DMA_IRQHandler+0xa3c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a65      	ldr	r2, [pc, #404]	; (80083ac <HAL_DMA_IRQHandler+0xa40>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_DMA_IRQHandler+0x8b8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a64      	ldr	r2, [pc, #400]	; (80083b0 <HAL_DMA_IRQHandler+0xa44>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d108      	bne.n	8008236 <HAL_DMA_IRQHandler+0x8ca>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0201 	bic.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e007      	b.n	8008246 <HAL_DMA_IRQHandler+0x8da>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824e:	429a      	cmp	r2, r3
 8008250:	d307      	bcc.n	8008262 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1f2      	bne.n	8008246 <HAL_DMA_IRQHandler+0x8da>
 8008260:	e000      	b.n	8008264 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008262:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2203      	movs	r2, #3
 8008276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800827a:	e003      	b.n	8008284 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8272 	beq.w	800877a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	e26c      	b.n	800877a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a43      	ldr	r2, [pc, #268]	; (80083b4 <HAL_DMA_IRQHandler+0xa48>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d022      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a42      	ldr	r2, [pc, #264]	; (80083b8 <HAL_DMA_IRQHandler+0xa4c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d01d      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a40      	ldr	r2, [pc, #256]	; (80083bc <HAL_DMA_IRQHandler+0xa50>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d018      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3f      	ldr	r2, [pc, #252]	; (80083c0 <HAL_DMA_IRQHandler+0xa54>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d013      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a3d      	ldr	r2, [pc, #244]	; (80083c4 <HAL_DMA_IRQHandler+0xa58>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a3c      	ldr	r2, [pc, #240]	; (80083c8 <HAL_DMA_IRQHandler+0xa5c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a3a      	ldr	r2, [pc, #232]	; (80083cc <HAL_DMA_IRQHandler+0xa60>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_DMA_IRQHandler+0x984>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a39      	ldr	r2, [pc, #228]	; (80083d0 <HAL_DMA_IRQHandler+0xa64>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d101      	bne.n	80082f4 <HAL_DMA_IRQHandler+0x988>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e000      	b.n	80082f6 <HAL_DMA_IRQHandler+0x98a>
 80082f4:	2300      	movs	r3, #0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 823f 	beq.w	800877a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	2204      	movs	r2, #4
 800830e:	409a      	lsls	r2, r3
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4013      	ands	r3, r2
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80cd 	beq.w	80084b4 <HAL_DMA_IRQHandler+0xb48>
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80c7 	beq.w	80084b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2204      	movs	r2, #4
 8008330:	409a      	lsls	r2, r3
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d049      	beq.n	80083d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d109      	bne.n	800835e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8210 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800835c:	e20a      	b.n	8008774 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8206 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008370:	e200      	b.n	8008774 <HAL_DMA_IRQHandler+0xe08>
 8008372:	bf00      	nop
 8008374:	40020010 	.word	0x40020010
 8008378:	40020028 	.word	0x40020028
 800837c:	40020040 	.word	0x40020040
 8008380:	40020058 	.word	0x40020058
 8008384:	40020070 	.word	0x40020070
 8008388:	40020088 	.word	0x40020088
 800838c:	400200a0 	.word	0x400200a0
 8008390:	400200b8 	.word	0x400200b8
 8008394:	40020410 	.word	0x40020410
 8008398:	40020428 	.word	0x40020428
 800839c:	40020440 	.word	0x40020440
 80083a0:	40020458 	.word	0x40020458
 80083a4:	40020470 	.word	0x40020470
 80083a8:	40020488 	.word	0x40020488
 80083ac:	400204a0 	.word	0x400204a0
 80083b0:	400204b8 	.word	0x400204b8
 80083b4:	58025408 	.word	0x58025408
 80083b8:	5802541c 	.word	0x5802541c
 80083bc:	58025430 	.word	0x58025430
 80083c0:	58025444 	.word	0x58025444
 80083c4:	58025458 	.word	0x58025458
 80083c8:	5802546c 	.word	0x5802546c
 80083cc:	58025480 	.word	0x58025480
 80083d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d160      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a7f      	ldr	r2, [pc, #508]	; (80085e0 <HAL_DMA_IRQHandler+0xc74>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d04a      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a7d      	ldr	r2, [pc, #500]	; (80085e4 <HAL_DMA_IRQHandler+0xc78>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d045      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a7c      	ldr	r2, [pc, #496]	; (80085e8 <HAL_DMA_IRQHandler+0xc7c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d040      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a7a      	ldr	r2, [pc, #488]	; (80085ec <HAL_DMA_IRQHandler+0xc80>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d03b      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a79      	ldr	r2, [pc, #484]	; (80085f0 <HAL_DMA_IRQHandler+0xc84>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d036      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a77      	ldr	r2, [pc, #476]	; (80085f4 <HAL_DMA_IRQHandler+0xc88>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d031      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a76      	ldr	r2, [pc, #472]	; (80085f8 <HAL_DMA_IRQHandler+0xc8c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d02c      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a74      	ldr	r2, [pc, #464]	; (80085fc <HAL_DMA_IRQHandler+0xc90>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d027      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a73      	ldr	r2, [pc, #460]	; (8008600 <HAL_DMA_IRQHandler+0xc94>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d022      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a71      	ldr	r2, [pc, #452]	; (8008604 <HAL_DMA_IRQHandler+0xc98>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01d      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a70      	ldr	r2, [pc, #448]	; (8008608 <HAL_DMA_IRQHandler+0xc9c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d018      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a6e      	ldr	r2, [pc, #440]	; (800860c <HAL_DMA_IRQHandler+0xca0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6d      	ldr	r2, [pc, #436]	; (8008610 <HAL_DMA_IRQHandler+0xca4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a6b      	ldr	r2, [pc, #428]	; (8008614 <HAL_DMA_IRQHandler+0xca8>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a6a      	ldr	r2, [pc, #424]	; (8008618 <HAL_DMA_IRQHandler+0xcac>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_DMA_IRQHandler+0xb12>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a68      	ldr	r2, [pc, #416]	; (800861c <HAL_DMA_IRQHandler+0xcb0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <HAL_DMA_IRQHandler+0xb24>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0208 	bic.w	r2, r2, #8
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e007      	b.n	80084a0 <HAL_DMA_IRQHandler+0xb34>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0204 	bic.w	r2, r2, #4
 800849e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8165 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b2:	e15f      	b.n	8008774 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2202      	movs	r2, #2
 80084be:	409a      	lsls	r2, r3
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	4013      	ands	r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80c5 	beq.w	8008654 <HAL_DMA_IRQHandler+0xce8>
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80bf 	beq.w	8008654 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2202      	movs	r2, #2
 80084e0:	409a      	lsls	r2, r3
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d018      	beq.n	8008522 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 813a 	beq.w	8008778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800850c:	e134      	b.n	8008778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 8130 	beq.w	8008778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008520:	e12a      	b.n	8008778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 8089 	bne.w	8008640 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a2b      	ldr	r2, [pc, #172]	; (80085e0 <HAL_DMA_IRQHandler+0xc74>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d04a      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a29      	ldr	r2, [pc, #164]	; (80085e4 <HAL_DMA_IRQHandler+0xc78>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d045      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a28      	ldr	r2, [pc, #160]	; (80085e8 <HAL_DMA_IRQHandler+0xc7c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d040      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a26      	ldr	r2, [pc, #152]	; (80085ec <HAL_DMA_IRQHandler+0xc80>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d03b      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <HAL_DMA_IRQHandler+0xc84>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d036      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a23      	ldr	r2, [pc, #140]	; (80085f4 <HAL_DMA_IRQHandler+0xc88>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d031      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a22      	ldr	r2, [pc, #136]	; (80085f8 <HAL_DMA_IRQHandler+0xc8c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d02c      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a20      	ldr	r2, [pc, #128]	; (80085fc <HAL_DMA_IRQHandler+0xc90>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d027      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <HAL_DMA_IRQHandler+0xc94>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d022      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <HAL_DMA_IRQHandler+0xc98>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01d      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1c      	ldr	r2, [pc, #112]	; (8008608 <HAL_DMA_IRQHandler+0xc9c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d018      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1a      	ldr	r2, [pc, #104]	; (800860c <HAL_DMA_IRQHandler+0xca0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_DMA_IRQHandler+0xca4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00e      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HAL_DMA_IRQHandler+0xca8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d009      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a16      	ldr	r2, [pc, #88]	; (8008618 <HAL_DMA_IRQHandler+0xcac>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d004      	beq.n	80085ce <HAL_DMA_IRQHandler+0xc62>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a14      	ldr	r2, [pc, #80]	; (800861c <HAL_DMA_IRQHandler+0xcb0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d128      	bne.n	8008620 <HAL_DMA_IRQHandler+0xcb4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0214 	bic.w	r2, r2, #20
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e027      	b.n	8008630 <HAL_DMA_IRQHandler+0xcc4>
 80085e0:	40020010 	.word	0x40020010
 80085e4:	40020028 	.word	0x40020028
 80085e8:	40020040 	.word	0x40020040
 80085ec:	40020058 	.word	0x40020058
 80085f0:	40020070 	.word	0x40020070
 80085f4:	40020088 	.word	0x40020088
 80085f8:	400200a0 	.word	0x400200a0
 80085fc:	400200b8 	.word	0x400200b8
 8008600:	40020410 	.word	0x40020410
 8008604:	40020428 	.word	0x40020428
 8008608:	40020440 	.word	0x40020440
 800860c:	40020458 	.word	0x40020458
 8008610:	40020470 	.word	0x40020470
 8008614:	40020488 	.word	0x40020488
 8008618:	400204a0 	.word	0x400204a0
 800861c:	400204b8 	.word	0x400204b8
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 020a 	bic.w	r2, r2, #10
 800862e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8097 	beq.w	8008778 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008652:	e091      	b.n	8008778 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008658:	f003 031f 	and.w	r3, r3, #31
 800865c:	2208      	movs	r2, #8
 800865e:	409a      	lsls	r2, r3
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8088 	beq.w	800877a <HAL_DMA_IRQHandler+0xe0e>
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8082 	beq.w	800877a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a41      	ldr	r2, [pc, #260]	; (8008780 <HAL_DMA_IRQHandler+0xe14>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d04a      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a3f      	ldr	r2, [pc, #252]	; (8008784 <HAL_DMA_IRQHandler+0xe18>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d045      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a3e      	ldr	r2, [pc, #248]	; (8008788 <HAL_DMA_IRQHandler+0xe1c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d040      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a3c      	ldr	r2, [pc, #240]	; (800878c <HAL_DMA_IRQHandler+0xe20>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d03b      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a3b      	ldr	r2, [pc, #236]	; (8008790 <HAL_DMA_IRQHandler+0xe24>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d036      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a39      	ldr	r2, [pc, #228]	; (8008794 <HAL_DMA_IRQHandler+0xe28>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d031      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a38      	ldr	r2, [pc, #224]	; (8008798 <HAL_DMA_IRQHandler+0xe2c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d02c      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a36      	ldr	r2, [pc, #216]	; (800879c <HAL_DMA_IRQHandler+0xe30>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d027      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a35      	ldr	r2, [pc, #212]	; (80087a0 <HAL_DMA_IRQHandler+0xe34>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d022      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a33      	ldr	r2, [pc, #204]	; (80087a4 <HAL_DMA_IRQHandler+0xe38>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01d      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a32      	ldr	r2, [pc, #200]	; (80087a8 <HAL_DMA_IRQHandler+0xe3c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d018      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a30      	ldr	r2, [pc, #192]	; (80087ac <HAL_DMA_IRQHandler+0xe40>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a2f      	ldr	r2, [pc, #188]	; (80087b0 <HAL_DMA_IRQHandler+0xe44>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2d      	ldr	r2, [pc, #180]	; (80087b4 <HAL_DMA_IRQHandler+0xe48>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a2c      	ldr	r2, [pc, #176]	; (80087b8 <HAL_DMA_IRQHandler+0xe4c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_DMA_IRQHandler+0xdaa>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a2a      	ldr	r2, [pc, #168]	; (80087bc <HAL_DMA_IRQHandler+0xe50>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d108      	bne.n	8008728 <HAL_DMA_IRQHandler+0xdbc>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 021c 	bic.w	r2, r2, #28
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e007      	b.n	8008738 <HAL_DMA_IRQHandler+0xdcc>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 020e 	bic.w	r2, r2, #14
 8008736:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873c:	f003 031f 	and.w	r3, r3, #31
 8008740:	2201      	movs	r2, #1
 8008742:	409a      	lsls	r2, r3
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
 800876e:	e004      	b.n	800877a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008770:	bf00      	nop
 8008772:	e002      	b.n	800877a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008774:	bf00      	nop
 8008776:	e000      	b.n	800877a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008778:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800877a:	3728      	adds	r7, #40	; 0x28
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	40020010 	.word	0x40020010
 8008784:	40020028 	.word	0x40020028
 8008788:	40020040 	.word	0x40020040
 800878c:	40020058 	.word	0x40020058
 8008790:	40020070 	.word	0x40020070
 8008794:	40020088 	.word	0x40020088
 8008798:	400200a0 	.word	0x400200a0
 800879c:	400200b8 	.word	0x400200b8
 80087a0:	40020410 	.word	0x40020410
 80087a4:	40020428 	.word	0x40020428
 80087a8:	40020440 	.word	0x40020440
 80087ac:	40020458 	.word	0x40020458
 80087b0:	40020470 	.word	0x40020470
 80087b4:	40020488 	.word	0x40020488
 80087b8:	400204a0 	.word	0x400204a0
 80087bc:	400204b8 	.word	0x400204b8

080087c0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a7f      	ldr	r2, [pc, #508]	; (80089f4 <DMA_SetConfig+0x21c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d072      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a7d      	ldr	r2, [pc, #500]	; (80089f8 <DMA_SetConfig+0x220>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d06d      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a7c      	ldr	r2, [pc, #496]	; (80089fc <DMA_SetConfig+0x224>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d068      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a7a      	ldr	r2, [pc, #488]	; (8008a00 <DMA_SetConfig+0x228>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d063      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a79      	ldr	r2, [pc, #484]	; (8008a04 <DMA_SetConfig+0x22c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d05e      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a77      	ldr	r2, [pc, #476]	; (8008a08 <DMA_SetConfig+0x230>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d059      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a76      	ldr	r2, [pc, #472]	; (8008a0c <DMA_SetConfig+0x234>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d054      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a74      	ldr	r2, [pc, #464]	; (8008a10 <DMA_SetConfig+0x238>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d04f      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a73      	ldr	r2, [pc, #460]	; (8008a14 <DMA_SetConfig+0x23c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d04a      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a71      	ldr	r2, [pc, #452]	; (8008a18 <DMA_SetConfig+0x240>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d045      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a70      	ldr	r2, [pc, #448]	; (8008a1c <DMA_SetConfig+0x244>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d040      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a6e      	ldr	r2, [pc, #440]	; (8008a20 <DMA_SetConfig+0x248>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d03b      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a6d      	ldr	r2, [pc, #436]	; (8008a24 <DMA_SetConfig+0x24c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d036      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a6b      	ldr	r2, [pc, #428]	; (8008a28 <DMA_SetConfig+0x250>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d031      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a6a      	ldr	r2, [pc, #424]	; (8008a2c <DMA_SetConfig+0x254>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d02c      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a68      	ldr	r2, [pc, #416]	; (8008a30 <DMA_SetConfig+0x258>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a67      	ldr	r2, [pc, #412]	; (8008a34 <DMA_SetConfig+0x25c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d022      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a65      	ldr	r2, [pc, #404]	; (8008a38 <DMA_SetConfig+0x260>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01d      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a64      	ldr	r2, [pc, #400]	; (8008a3c <DMA_SetConfig+0x264>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a62      	ldr	r2, [pc, #392]	; (8008a40 <DMA_SetConfig+0x268>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a61      	ldr	r2, [pc, #388]	; (8008a44 <DMA_SetConfig+0x26c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a5f      	ldr	r2, [pc, #380]	; (8008a48 <DMA_SetConfig+0x270>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a5e      	ldr	r2, [pc, #376]	; (8008a4c <DMA_SetConfig+0x274>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <DMA_SetConfig+0x10a>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a5c      	ldr	r2, [pc, #368]	; (8008a50 <DMA_SetConfig+0x278>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <DMA_SetConfig+0x10e>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <DMA_SetConfig+0x110>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00d      	beq.n	8008908 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008906:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a39      	ldr	r2, [pc, #228]	; (80089f4 <DMA_SetConfig+0x21c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d04a      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a38      	ldr	r2, [pc, #224]	; (80089f8 <DMA_SetConfig+0x220>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d045      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a36      	ldr	r2, [pc, #216]	; (80089fc <DMA_SetConfig+0x224>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d040      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a35      	ldr	r2, [pc, #212]	; (8008a00 <DMA_SetConfig+0x228>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d03b      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <DMA_SetConfig+0x22c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d036      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a32      	ldr	r2, [pc, #200]	; (8008a08 <DMA_SetConfig+0x230>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d031      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <DMA_SetConfig+0x234>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d02c      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2f      	ldr	r2, [pc, #188]	; (8008a10 <DMA_SetConfig+0x238>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d027      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <DMA_SetConfig+0x23c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d022      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <DMA_SetConfig+0x240>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d01d      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <DMA_SetConfig+0x244>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d018      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a29      	ldr	r2, [pc, #164]	; (8008a20 <DMA_SetConfig+0x248>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d013      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <DMA_SetConfig+0x24c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00e      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a26      	ldr	r2, [pc, #152]	; (8008a28 <DMA_SetConfig+0x250>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <DMA_SetConfig+0x254>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <DMA_SetConfig+0x1d0>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <DMA_SetConfig+0x258>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d101      	bne.n	80089ac <DMA_SetConfig+0x1d4>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <DMA_SetConfig+0x1d6>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d059      	beq.n	8008a66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	223f      	movs	r2, #63	; 0x3f
 80089bc:	409a      	lsls	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d138      	bne.n	8008a54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089f2:	e086      	b.n	8008b02 <DMA_SetConfig+0x32a>
 80089f4:	40020010 	.word	0x40020010
 80089f8:	40020028 	.word	0x40020028
 80089fc:	40020040 	.word	0x40020040
 8008a00:	40020058 	.word	0x40020058
 8008a04:	40020070 	.word	0x40020070
 8008a08:	40020088 	.word	0x40020088
 8008a0c:	400200a0 	.word	0x400200a0
 8008a10:	400200b8 	.word	0x400200b8
 8008a14:	40020410 	.word	0x40020410
 8008a18:	40020428 	.word	0x40020428
 8008a1c:	40020440 	.word	0x40020440
 8008a20:	40020458 	.word	0x40020458
 8008a24:	40020470 	.word	0x40020470
 8008a28:	40020488 	.word	0x40020488
 8008a2c:	400204a0 	.word	0x400204a0
 8008a30:	400204b8 	.word	0x400204b8
 8008a34:	58025408 	.word	0x58025408
 8008a38:	5802541c 	.word	0x5802541c
 8008a3c:	58025430 	.word	0x58025430
 8008a40:	58025444 	.word	0x58025444
 8008a44:	58025458 	.word	0x58025458
 8008a48:	5802546c 	.word	0x5802546c
 8008a4c:	58025480 	.word	0x58025480
 8008a50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]
}
 8008a64:	e04d      	b.n	8008b02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a29      	ldr	r2, [pc, #164]	; (8008b10 <DMA_SetConfig+0x338>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d022      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a27      	ldr	r2, [pc, #156]	; (8008b14 <DMA_SetConfig+0x33c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a26      	ldr	r2, [pc, #152]	; (8008b18 <DMA_SetConfig+0x340>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a24      	ldr	r2, [pc, #144]	; (8008b1c <DMA_SetConfig+0x344>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a23      	ldr	r2, [pc, #140]	; (8008b20 <DMA_SetConfig+0x348>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a21      	ldr	r2, [pc, #132]	; (8008b24 <DMA_SetConfig+0x34c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <DMA_SetConfig+0x350>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <DMA_SetConfig+0x2de>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <DMA_SetConfig+0x354>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d101      	bne.n	8008aba <DMA_SetConfig+0x2e2>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <DMA_SetConfig+0x2e4>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d020      	beq.n	8008b02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac4:	f003 031f 	and.w	r3, r3, #31
 8008ac8:	2201      	movs	r2, #1
 8008aca:	409a      	lsls	r2, r3
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d108      	bne.n	8008af2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	60da      	str	r2, [r3, #12]
}
 8008af0:	e007      	b.n	8008b02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]
}
 8008b02:	bf00      	nop
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	58025408 	.word	0x58025408
 8008b14:	5802541c 	.word	0x5802541c
 8008b18:	58025430 	.word	0x58025430
 8008b1c:	58025444 	.word	0x58025444
 8008b20:	58025458 	.word	0x58025458
 8008b24:	5802546c 	.word	0x5802546c
 8008b28:	58025480 	.word	0x58025480
 8008b2c:	58025494 	.word	0x58025494

08008b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a42      	ldr	r2, [pc, #264]	; (8008c48 <DMA_CalcBaseAndBitshift+0x118>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d04a      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a41      	ldr	r2, [pc, #260]	; (8008c4c <DMA_CalcBaseAndBitshift+0x11c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d045      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a3f      	ldr	r2, [pc, #252]	; (8008c50 <DMA_CalcBaseAndBitshift+0x120>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d040      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3e      	ldr	r2, [pc, #248]	; (8008c54 <DMA_CalcBaseAndBitshift+0x124>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d03b      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a3c      	ldr	r2, [pc, #240]	; (8008c58 <DMA_CalcBaseAndBitshift+0x128>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d036      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a3b      	ldr	r2, [pc, #236]	; (8008c5c <DMA_CalcBaseAndBitshift+0x12c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d031      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a39      	ldr	r2, [pc, #228]	; (8008c60 <DMA_CalcBaseAndBitshift+0x130>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d02c      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a38      	ldr	r2, [pc, #224]	; (8008c64 <DMA_CalcBaseAndBitshift+0x134>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d027      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a36      	ldr	r2, [pc, #216]	; (8008c68 <DMA_CalcBaseAndBitshift+0x138>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d022      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a35      	ldr	r2, [pc, #212]	; (8008c6c <DMA_CalcBaseAndBitshift+0x13c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d01d      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a33      	ldr	r2, [pc, #204]	; (8008c70 <DMA_CalcBaseAndBitshift+0x140>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d018      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a32      	ldr	r2, [pc, #200]	; (8008c74 <DMA_CalcBaseAndBitshift+0x144>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d013      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a30      	ldr	r2, [pc, #192]	; (8008c78 <DMA_CalcBaseAndBitshift+0x148>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00e      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a2f      	ldr	r2, [pc, #188]	; (8008c7c <DMA_CalcBaseAndBitshift+0x14c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d009      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a2d      	ldr	r2, [pc, #180]	; (8008c80 <DMA_CalcBaseAndBitshift+0x150>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <DMA_CalcBaseAndBitshift+0x154>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d101      	bne.n	8008bdc <DMA_CalcBaseAndBitshift+0xac>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <DMA_CalcBaseAndBitshift+0xae>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d024      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	3b10      	subs	r3, #16
 8008bea:	4a27      	ldr	r2, [pc, #156]	; (8008c88 <DMA_CalcBaseAndBitshift+0x158>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	091b      	lsrs	r3, r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	4a24      	ldr	r2, [pc, #144]	; (8008c8c <DMA_CalcBaseAndBitshift+0x15c>)
 8008bfc:	5cd3      	ldrb	r3, [r2, r3]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d908      	bls.n	8008c1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	4b1f      	ldr	r3, [pc, #124]	; (8008c90 <DMA_CalcBaseAndBitshift+0x160>)
 8008c12:	4013      	ands	r3, r2
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	659a      	str	r2, [r3, #88]	; 0x58
 8008c1a:	e00d      	b.n	8008c38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <DMA_CalcBaseAndBitshift+0x160>)
 8008c24:	4013      	ands	r3, r2
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6593      	str	r3, [r2, #88]	; 0x58
 8008c2a:	e005      	b.n	8008c38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	40020010 	.word	0x40020010
 8008c4c:	40020028 	.word	0x40020028
 8008c50:	40020040 	.word	0x40020040
 8008c54:	40020058 	.word	0x40020058
 8008c58:	40020070 	.word	0x40020070
 8008c5c:	40020088 	.word	0x40020088
 8008c60:	400200a0 	.word	0x400200a0
 8008c64:	400200b8 	.word	0x400200b8
 8008c68:	40020410 	.word	0x40020410
 8008c6c:	40020428 	.word	0x40020428
 8008c70:	40020440 	.word	0x40020440
 8008c74:	40020458 	.word	0x40020458
 8008c78:	40020470 	.word	0x40020470
 8008c7c:	40020488 	.word	0x40020488
 8008c80:	400204a0 	.word	0x400204a0
 8008c84:	400204b8 	.word	0x400204b8
 8008c88:	aaaaaaab 	.word	0xaaaaaaab
 8008c8c:	08017a14 	.word	0x08017a14
 8008c90:	fffffc00 	.word	0xfffffc00

08008c94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d120      	bne.n	8008cea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d858      	bhi.n	8008d62 <DMA_CheckFifoParam+0xce>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <DMA_CheckFifoParam+0x24>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008cc9 	.word	0x08008cc9
 8008cbc:	08008cdb 	.word	0x08008cdb
 8008cc0:	08008cc9 	.word	0x08008cc9
 8008cc4:	08008d63 	.word	0x08008d63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d048      	beq.n	8008d66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cd8:	e045      	b.n	8008d66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ce2:	d142      	bne.n	8008d6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ce8:	e03f      	b.n	8008d6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf2:	d123      	bne.n	8008d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d838      	bhi.n	8008d6e <DMA_CheckFifoParam+0xda>
 8008cfc:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <DMA_CheckFifoParam+0x70>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d1b 	.word	0x08008d1b
 8008d0c:	08008d15 	.word	0x08008d15
 8008d10:	08008d2d 	.word	0x08008d2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
        break;
 8008d18:	e030      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d025      	beq.n	8008d72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d2a:	e022      	b.n	8008d72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d34:	d11f      	bne.n	8008d76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d3a:	e01c      	b.n	8008d76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d902      	bls.n	8008d4a <DMA_CheckFifoParam+0xb6>
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d003      	beq.n	8008d50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d48:	e018      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d4e:	e015      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00e      	beq.n	8008d7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e00b      	b.n	8008d7a <DMA_CheckFifoParam+0xe6>
        break;
 8008d62:	bf00      	nop
 8008d64:	e00a      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        break;
 8008d66:	bf00      	nop
 8008d68:	e008      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        break;
 8008d6a:	bf00      	nop
 8008d6c:	e006      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e004      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        break;
 8008d72:	bf00      	nop
 8008d74:	e002      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
        break;
 8008d76:	bf00      	nop
 8008d78:	e000      	b.n	8008d7c <DMA_CheckFifoParam+0xe8>
    break;
 8008d7a:	bf00      	nop
    }
  }

  return status;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a36      	ldr	r2, [pc, #216]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01d      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a35      	ldr	r2, [pc, #212]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d018      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a33      	ldr	r2, [pc, #204]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d013      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a32      	ldr	r2, [pc, #200]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00e      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a30      	ldr	r2, [pc, #192]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d009      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a2f      	ldr	r2, [pc, #188]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a2d      	ldr	r2, [pc, #180]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d101      	bne.n	8008dee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dee:	2300      	movs	r3, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01a      	beq.n	8008e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	3b08      	subs	r3, #8
 8008dfc:	4a28      	ldr	r2, [pc, #160]	; (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	091b      	lsrs	r3, r3, #4
 8008e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4b26      	ldr	r3, [pc, #152]	; (8008ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a24      	ldr	r2, [pc, #144]	; (8008ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	2201      	movs	r2, #1
 8008e22:	409a      	lsls	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e28:	e024      	b.n	8008e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	3b10      	subs	r3, #16
 8008e32:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e34:	fba2 2303 	umull	r2, r3, r2, r3
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d806      	bhi.n	8008e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d902      	bls.n	8008e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a16      	ldr	r2, [pc, #88]	; (8008ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f003 031f 	and.w	r3, r3, #31
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	409a      	lsls	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	58025408 	.word	0x58025408
 8008e84:	5802541c 	.word	0x5802541c
 8008e88:	58025430 	.word	0x58025430
 8008e8c:	58025444 	.word	0x58025444
 8008e90:	58025458 	.word	0x58025458
 8008e94:	5802546c 	.word	0x5802546c
 8008e98:	58025480 	.word	0x58025480
 8008e9c:	58025494 	.word	0x58025494
 8008ea0:	cccccccd 	.word	0xcccccccd
 8008ea4:	16009600 	.word	0x16009600
 8008ea8:	58025880 	.word	0x58025880
 8008eac:	aaaaaaab 	.word	0xaaaaaaab
 8008eb0:	400204b8 	.word	0x400204b8
 8008eb4:	4002040f 	.word	0x4002040f
 8008eb8:	10008200 	.word	0x10008200
 8008ebc:	40020880 	.word	0x40020880

08008ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d04a      	beq.n	8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d847      	bhi.n	8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a25      	ldr	r2, [pc, #148]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d022      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a24      	ldr	r2, [pc, #144]	; (8008f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d01d      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a22      	ldr	r2, [pc, #136]	; (8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d018      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a21      	ldr	r2, [pc, #132]	; (8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d013      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1f      	ldr	r2, [pc, #124]	; (8008f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00e      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d009      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1c      	ldr	r2, [pc, #112]	; (8008f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d004      	beq.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1b      	ldr	r2, [pc, #108]	; (8008f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d101      	bne.n	8008f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e000      	b.n	8008f32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f30:	2300      	movs	r3, #0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f48:	671a      	str	r2, [r3, #112]	; 0x70
 8008f4a:	e009      	b.n	8008f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	461a      	mov	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a11      	ldr	r2, [pc, #68]	; (8008fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f5e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2201      	movs	r2, #1
 8008f66:	409a      	lsls	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	58025408 	.word	0x58025408
 8008f7c:	5802541c 	.word	0x5802541c
 8008f80:	58025430 	.word	0x58025430
 8008f84:	58025444 	.word	0x58025444
 8008f88:	58025458 	.word	0x58025458
 8008f8c:	5802546c 	.word	0x5802546c
 8008f90:	58025480 	.word	0x58025480
 8008f94:	58025494 	.word	0x58025494
 8008f98:	1600963f 	.word	0x1600963f
 8008f9c:	58025940 	.word	0x58025940
 8008fa0:	1000823f 	.word	0x1000823f
 8008fa4:	40020940 	.word	0x40020940

08008fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b089      	sub	sp, #36	; 0x24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fb6:	4b89      	ldr	r3, [pc, #548]	; (80091dc <HAL_GPIO_Init+0x234>)
 8008fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fba:	e194      	b.n	80092e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc8:	4013      	ands	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8186 	beq.w	80092e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d005      	beq.n	8008fec <HAL_GPIO_Init+0x44>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d130      	bne.n	800904e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	4013      	ands	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4313      	orrs	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009022:	2201      	movs	r2, #1
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43db      	mvns	r3, r3
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4013      	ands	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	091b      	lsrs	r3, r3, #4
 8009038:	f003 0201 	and.w	r2, r3, #1
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	4313      	orrs	r3, r2
 8009046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b03      	cmp	r3, #3
 8009058:	d017      	beq.n	800908a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	2203      	movs	r2, #3
 8009066:	fa02 f303 	lsl.w	r3, r2, r3
 800906a:	43db      	mvns	r3, r3
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	4013      	ands	r3, r2
 8009070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	4313      	orrs	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d123      	bne.n	80090de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	08da      	lsrs	r2, r3, #3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3208      	adds	r2, #8
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	220f      	movs	r2, #15
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	43db      	mvns	r3, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4013      	ands	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	f003 0307 	and.w	r3, r3, #7
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	08da      	lsrs	r2, r3, #3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3208      	adds	r2, #8
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	2203      	movs	r2, #3
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	43db      	mvns	r3, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4013      	ands	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f003 0203 	and.w	r2, r3, #3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	4313      	orrs	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80e0 	beq.w	80092e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009120:	4b2f      	ldr	r3, [pc, #188]	; (80091e0 <HAL_GPIO_Init+0x238>)
 8009122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009126:	4a2e      	ldr	r2, [pc, #184]	; (80091e0 <HAL_GPIO_Init+0x238>)
 8009128:	f043 0302 	orr.w	r3, r3, #2
 800912c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009130:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <HAL_GPIO_Init+0x238>)
 8009132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800913e:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <HAL_GPIO_Init+0x23c>)
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	089b      	lsrs	r3, r3, #2
 8009144:	3302      	adds	r3, #2
 8009146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800914a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	220f      	movs	r2, #15
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	43db      	mvns	r3, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4013      	ands	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a20      	ldr	r2, [pc, #128]	; (80091e8 <HAL_GPIO_Init+0x240>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d052      	beq.n	8009210 <HAL_GPIO_Init+0x268>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1f      	ldr	r2, [pc, #124]	; (80091ec <HAL_GPIO_Init+0x244>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d031      	beq.n	80091d6 <HAL_GPIO_Init+0x22e>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <HAL_GPIO_Init+0x248>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d02b      	beq.n	80091d2 <HAL_GPIO_Init+0x22a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1d      	ldr	r2, [pc, #116]	; (80091f4 <HAL_GPIO_Init+0x24c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d025      	beq.n	80091ce <HAL_GPIO_Init+0x226>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <HAL_GPIO_Init+0x250>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d01f      	beq.n	80091ca <HAL_GPIO_Init+0x222>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a1b      	ldr	r2, [pc, #108]	; (80091fc <HAL_GPIO_Init+0x254>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d019      	beq.n	80091c6 <HAL_GPIO_Init+0x21e>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1a      	ldr	r2, [pc, #104]	; (8009200 <HAL_GPIO_Init+0x258>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d013      	beq.n	80091c2 <HAL_GPIO_Init+0x21a>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a19      	ldr	r2, [pc, #100]	; (8009204 <HAL_GPIO_Init+0x25c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00d      	beq.n	80091be <HAL_GPIO_Init+0x216>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a18      	ldr	r2, [pc, #96]	; (8009208 <HAL_GPIO_Init+0x260>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <HAL_GPIO_Init+0x212>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a17      	ldr	r2, [pc, #92]	; (800920c <HAL_GPIO_Init+0x264>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d101      	bne.n	80091b6 <HAL_GPIO_Init+0x20e>
 80091b2:	2309      	movs	r3, #9
 80091b4:	e02d      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091b6:	230a      	movs	r3, #10
 80091b8:	e02b      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091ba:	2308      	movs	r3, #8
 80091bc:	e029      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091be:	2307      	movs	r3, #7
 80091c0:	e027      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091c2:	2306      	movs	r3, #6
 80091c4:	e025      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091c6:	2305      	movs	r3, #5
 80091c8:	e023      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091ca:	2304      	movs	r3, #4
 80091cc:	e021      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091ce:	2303      	movs	r3, #3
 80091d0:	e01f      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e01d      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e01b      	b.n	8009212 <HAL_GPIO_Init+0x26a>
 80091da:	bf00      	nop
 80091dc:	58000080 	.word	0x58000080
 80091e0:	58024400 	.word	0x58024400
 80091e4:	58000400 	.word	0x58000400
 80091e8:	58020000 	.word	0x58020000
 80091ec:	58020400 	.word	0x58020400
 80091f0:	58020800 	.word	0x58020800
 80091f4:	58020c00 	.word	0x58020c00
 80091f8:	58021000 	.word	0x58021000
 80091fc:	58021400 	.word	0x58021400
 8009200:	58021800 	.word	0x58021800
 8009204:	58021c00 	.word	0x58021c00
 8009208:	58022000 	.word	0x58022000
 800920c:	58022400 	.word	0x58022400
 8009210:	2300      	movs	r3, #0
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	f002 0203 	and.w	r2, r2, #3
 8009218:	0092      	lsls	r2, r2, #2
 800921a:	4093      	lsls	r3, r2
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	4313      	orrs	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009222:	4938      	ldr	r1, [pc, #224]	; (8009304 <HAL_GPIO_Init+0x35c>)
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	089b      	lsrs	r3, r3, #2
 8009228:	3302      	adds	r3, #2
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	43db      	mvns	r3, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4013      	ands	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800925e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	43db      	mvns	r3, r3
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4013      	ands	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	43db      	mvns	r3, r3
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	4013      	ands	r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	43db      	mvns	r3, r3
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	4013      	ands	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3301      	adds	r3, #1
 80092e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f47f ae63 	bne.w	8008fbc <HAL_GPIO_Init+0x14>
  }
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	3724      	adds	r7, #36	; 0x24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	58000400 	.word	0x58000400

08009308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	4013      	ands	r3, r2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009320:	2301      	movs	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e001      	b.n	800932a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	807b      	strh	r3, [r7, #2]
 8009344:	4613      	mov	r3, r2
 8009346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009348:	787b      	ldrb	r3, [r7, #1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800934e:	887a      	ldrh	r2, [r7, #2]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009354:	e003      	b.n	800935e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009356:	887b      	ldrh	r3, [r7, #2]
 8009358:	041a      	lsls	r2, r3, #16
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	619a      	str	r2, [r3, #24]
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e08b      	b.n	8009496 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fa f8f0 	bl	8003578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2224      	movs	r2, #36	; 0x24
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0201 	bic.w	r2, r2, #1
 80093ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d107      	bne.n	80093e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093e2:	609a      	str	r2, [r3, #8]
 80093e4:	e006      	b.n	80093f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d108      	bne.n	800940e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800940a:	605a      	str	r2, [r3, #4]
 800940c:	e007      	b.n	800941e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800941c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6859      	ldr	r1, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <HAL_I2C_Init+0x134>)
 800942a:	430b      	orrs	r3, r1
 800942c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800943c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691a      	ldr	r2, [r3, #16]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69d9      	ldr	r1, [r3, #28]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1a      	ldr	r2, [r3, #32]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	02008000 	.word	0x02008000

080094a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af02      	add	r7, sp, #8
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	461a      	mov	r2, r3
 80094b0:	460b      	mov	r3, r1
 80094b2:	817b      	strh	r3, [r7, #10]
 80094b4:	4613      	mov	r3, r2
 80094b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	f040 80fd 	bne.w	80096c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_I2C_Master_Transmit+0x30>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e0f6      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094dc:	f7fa fdf4 	bl	80040c8 <HAL_GetTick>
 80094e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	2319      	movs	r3, #25
 80094e8:	2201      	movs	r2, #1
 80094ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fa0a 	bl	8009908 <I2C_WaitOnFlagUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e0e1      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2221      	movs	r2, #33	; 0x21
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2210      	movs	r2, #16
 800950a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	893a      	ldrh	r2, [r7, #8]
 800951e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952a:	b29b      	uxth	r3, r3
 800952c:	2bff      	cmp	r3, #255	; 0xff
 800952e:	d906      	bls.n	800953e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	22ff      	movs	r2, #255	; 0xff
 8009534:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	e007      	b.n	800954e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800954c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	d024      	beq.n	80095a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958a:	b2db      	uxtb	r3, r3
 800958c:	3301      	adds	r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	8979      	ldrh	r1, [r7, #10]
 8009592:	4b4e      	ldr	r3, [pc, #312]	; (80096cc <HAL_I2C_Master_Transmit+0x228>)
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fc05 	bl	8009da8 <I2C_TransferConfig>
 800959e:	e066      	b.n	800966e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	8979      	ldrh	r1, [r7, #10]
 80095a8:	4b48      	ldr	r3, [pc, #288]	; (80096cc <HAL_I2C_Master_Transmit+0x228>)
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fbfa 	bl	8009da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80095b4:	e05b      	b.n	800966e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	6a39      	ldr	r1, [r7, #32]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f9fd 	bl	80099ba <I2C_WaitOnTXISFlagUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e07b      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d034      	beq.n	800966e <HAL_I2C_Master_Transmit+0x1ca>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d130      	bne.n	800966e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2200      	movs	r2, #0
 8009614:	2180      	movs	r1, #128	; 0x80
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f976 	bl	8009908 <I2C_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e04d      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962a:	b29b      	uxth	r3, r3
 800962c:	2bff      	cmp	r3, #255	; 0xff
 800962e:	d90e      	bls.n	800964e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	22ff      	movs	r2, #255	; 0xff
 8009634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963a:	b2da      	uxtb	r2, r3
 800963c:	8979      	ldrh	r1, [r7, #10]
 800963e:	2300      	movs	r3, #0
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fbae 	bl	8009da8 <I2C_TransferConfig>
 800964c:	e00f      	b.n	800966e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965c:	b2da      	uxtb	r2, r3
 800965e:	8979      	ldrh	r1, [r7, #10]
 8009660:	2300      	movs	r3, #0
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fb9d 	bl	8009da8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d19e      	bne.n	80095b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	6a39      	ldr	r1, [r7, #32]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f9e3 	bl	8009a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e01a      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2220      	movs	r2, #32
 8009692:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_I2C_Master_Transmit+0x22c>)
 80096a0:	400b      	ands	r3, r1
 80096a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	e000      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80096c0:	2302      	movs	r3, #2
  }
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	80002000 	.word	0x80002000
 80096d0:	fe00e800 	.word	0xfe00e800

080096d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	607a      	str	r2, [r7, #4]
 80096de:	461a      	mov	r2, r3
 80096e0:	460b      	mov	r3, r1
 80096e2:	817b      	strh	r3, [r7, #10]
 80096e4:	4613      	mov	r3, r2
 80096e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	f040 80db 	bne.w	80098ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_I2C_Master_Receive+0x30>
 8009700:	2302      	movs	r3, #2
 8009702:	e0d4      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800970c:	f7fa fcdc 	bl	80040c8 <HAL_GetTick>
 8009710:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	2319      	movs	r3, #25
 8009718:	2201      	movs	r2, #1
 800971a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 f8f2 	bl	8009908 <I2C_WaitOnFlagUntilTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0bf      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2222      	movs	r2, #34	; 0x22
 8009732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2210      	movs	r2, #16
 800973a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	893a      	ldrh	r2, [r7, #8]
 800974e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975a:	b29b      	uxth	r3, r3
 800975c:	2bff      	cmp	r3, #255	; 0xff
 800975e:	d90e      	bls.n	800977e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	22ff      	movs	r2, #255	; 0xff
 8009764:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976a:	b2da      	uxtb	r2, r3
 800976c:	8979      	ldrh	r1, [r7, #10]
 800976e:	4b52      	ldr	r3, [pc, #328]	; (80098b8 <HAL_I2C_Master_Receive+0x1e4>)
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fb16 	bl	8009da8 <I2C_TransferConfig>
 800977c:	e06d      	b.n	800985a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978c:	b2da      	uxtb	r2, r3
 800978e:	8979      	ldrh	r1, [r7, #10]
 8009790:	4b49      	ldr	r3, [pc, #292]	; (80098b8 <HAL_I2C_Master_Receive+0x1e4>)
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fb05 	bl	8009da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800979e:	e05c      	b.n	800985a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	6a39      	ldr	r1, [r7, #32]
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f993 	bl	8009ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e07c      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d034      	beq.n	800985a <HAL_I2C_Master_Receive+0x186>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d130      	bne.n	800985a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	2200      	movs	r2, #0
 8009800:	2180      	movs	r1, #128	; 0x80
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f880 	bl	8009908 <I2C_WaitOnFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e04d      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009816:	b29b      	uxth	r3, r3
 8009818:	2bff      	cmp	r3, #255	; 0xff
 800981a:	d90e      	bls.n	800983a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	22ff      	movs	r2, #255	; 0xff
 8009820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009826:	b2da      	uxtb	r2, r3
 8009828:	8979      	ldrh	r1, [r7, #10]
 800982a:	2300      	movs	r3, #0
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fab8 	bl	8009da8 <I2C_TransferConfig>
 8009838:	e00f      	b.n	800985a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	b2da      	uxtb	r2, r3
 800984a:	8979      	ldrh	r1, [r7, #10]
 800984c:	2300      	movs	r3, #0
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 faa7 	bl	8009da8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d19d      	bne.n	80097a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	6a39      	ldr	r1, [r7, #32]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f8ed 	bl	8009a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e01a      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2220      	movs	r2, #32
 800987e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <HAL_I2C_Master_Receive+0x1e8>)
 800988c:	400b      	ands	r3, r1
 800988e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	e000      	b.n	80098ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80098ac:	2302      	movs	r3, #2
  }
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	80002400 	.word	0x80002400
 80098bc:	fe00e800 	.word	0xfe00e800

080098c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d103      	bne.n	80098de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d007      	beq.n	80098fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	619a      	str	r2, [r3, #24]
  }
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	4613      	mov	r3, r2
 8009916:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009918:	e03b      	b.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f962 	bl	8009be8 <I2C_IsErrorOccurred>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e041      	b.n	80099b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009934:	d02d      	beq.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009936:	f7fa fbc7 	bl	80040c8 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d122      	bne.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699a      	ldr	r2, [r3, #24]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4013      	ands	r3, r2
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	429a      	cmp	r2, r3
 800995a:	bf0c      	ite	eq
 800995c:	2301      	moveq	r3, #1
 800995e:	2300      	movne	r3, #0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	461a      	mov	r2, r3
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	429a      	cmp	r2, r3
 8009968:	d113      	bne.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996e:	f043 0220 	orr.w	r2, r3, #32
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2220      	movs	r2, #32
 800997a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e00f      	b.n	80099b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4013      	ands	r3, r2
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	429a      	cmp	r2, r3
 80099a0:	bf0c      	ite	eq
 80099a2:	2301      	moveq	r3, #1
 80099a4:	2300      	movne	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d0b4      	beq.n	800991a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099c6:	e033      	b.n	8009a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f90b 	bl	8009be8 <I2C_IsErrorOccurred>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e031      	b.n	8009a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e2:	d025      	beq.n	8009a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e4:	f7fa fb70 	bl	80040c8 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d302      	bcc.n	80099fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d11a      	bne.n	8009a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d013      	beq.n	8009a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0c:	f043 0220 	orr.w	r2, r3, #32
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e007      	b.n	8009a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d1c4      	bne.n	80099c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a54:	e02f      	b.n	8009ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f8c4 	bl	8009be8 <I2C_IsErrorOccurred>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e02d      	b.n	8009ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a6a:	f7fa fb2d 	bl	80040c8 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d302      	bcc.n	8009a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d11a      	bne.n	8009ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d013      	beq.n	8009ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	f043 0220 	orr.w	r2, r3, #32
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e007      	b.n	8009ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d1c8      	bne.n	8009a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ae0:	e071      	b.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f87e 	bl	8009be8 <I2C_IsErrorOccurred>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d13b      	bne.n	8009b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d138      	bne.n	8009b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d105      	bne.n	8009b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d121      	bne.n	8009b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2210      	movs	r2, #16
 8009b38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2220      	movs	r2, #32
 8009b46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6859      	ldr	r1, [r3, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009b54:	400b      	ands	r3, r1
 8009b56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	75fb      	strb	r3, [r7, #23]
 8009b74:	e002      	b.n	8009b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b7c:	f7fa faa4 	bl	80040c8 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d119      	bne.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d116      	bne.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d00f      	beq.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009baa:	f043 0220 	orr.w	r2, r3, #32
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d002      	beq.n	8009bda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d083      	beq.n	8009ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	fe00e800 	.word	0xfe00e800

08009be8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f003 0310 	and.w	r3, r3, #16
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d068      	beq.n	8009ce6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2210      	movs	r2, #16
 8009c1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c1c:	e049      	b.n	8009cb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c24:	d045      	beq.n	8009cb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c26:	f7fa fa4f 	bl	80040c8 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d302      	bcc.n	8009c3c <I2C_IsErrorOccurred+0x54>
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d13a      	bne.n	8009cb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5e:	d121      	bne.n	8009ca4 <I2C_IsErrorOccurred+0xbc>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c66:	d01d      	beq.n	8009ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c68:	7cfb      	ldrb	r3, [r7, #19]
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d01a      	beq.n	8009ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c7e:	f7fa fa23 	bl	80040c8 <HAL_GetTick>
 8009c82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c84:	e00e      	b.n	8009ca4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c86:	f7fa fa1f 	bl	80040c8 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b19      	cmp	r3, #25
 8009c92:	d907      	bls.n	8009ca4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	f043 0320 	orr.w	r3, r3, #32
 8009c9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009ca2:	e006      	b.n	8009cb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d1e9      	bne.n	8009c86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d003      	beq.n	8009cc8 <I2C_IsErrorOccurred+0xe0>
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0aa      	beq.n	8009c1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	f043 0304 	orr.w	r3, r3, #4
 8009cde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	f043 0308 	orr.w	r3, r3, #8
 8009d20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01c      	beq.n	8009d96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fdaf 	bl	80098c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6859      	ldr	r1, [r3, #4]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <I2C_IsErrorOccurred+0x1bc>)
 8009d6e:	400b      	ands	r3, r1
 8009d70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3728      	adds	r7, #40	; 0x28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	fe00e800 	.word	0xfe00e800

08009da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	817b      	strh	r3, [r7, #10]
 8009db6:	4613      	mov	r3, r2
 8009db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dba:	897b      	ldrh	r3, [r7, #10]
 8009dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dc0:	7a7b      	ldrb	r3, [r7, #9]
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	0d5b      	lsrs	r3, r3, #21
 8009de2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009de6:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <I2C_TransferConfig+0x60>)
 8009de8:	430b      	orrs	r3, r1
 8009dea:	43db      	mvns	r3, r3
 8009dec:	ea02 0103 	and.w	r1, r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	03ff63ff 	.word	0x03ff63ff

08009e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d138      	bne.n	8009e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e032      	b.n	8009e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2224      	movs	r2, #36	; 0x24
 8009e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0201 	bic.w	r2, r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6819      	ldr	r1, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	e000      	b.n	8009e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e94:	2302      	movs	r3, #2
  }
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	d139      	bne.n	8009f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e033      	b.n	8009f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2224      	movs	r2, #36	; 0x24
 8009ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e000      	b.n	8009f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f2c:	2302      	movs	r3, #2
  }
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
	...

08009f3c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f44:	4b0d      	ldr	r3, [pc, #52]	; (8009f7c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f4a:	4a0c      	ldr	r2, [pc, #48]	; (8009f7c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f4c:	f043 0302 	orr.w	r3, r3, #2
 8009f50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f62:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4906      	ldr	r1, [pc, #24]	; (8009f80 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	604b      	str	r3, [r1, #4]
}
 8009f6e:	bf00      	nop
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	58000400 	.word	0x58000400

08009f84 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009f90:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f023 0201 	bic.w	r2, r3, #1
 8009f98:	4916      	ldr	r1, [pc, #88]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009fa0:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fa6:	f023 0305 	bic.w	r3, r3, #5
 8009faa:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009fac:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	4a10      	ldr	r2, [pc, #64]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fb2:	f023 0302 	bic.w	r3, r3, #2
 8009fb6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	4a0e      	ldr	r2, [pc, #56]	; (8009ff8 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fbe:	f043 0304 	orr.w	r3, r3, #4
 8009fc2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fc4:	f3bf 8f4f 	dsb	sy
}
 8009fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fca:	f3bf 8f6f 	isb	sy
}
 8009fce:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d101      	bne.n	8009fda <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009fd6:	bf30      	wfi
 8009fd8:	e000      	b.n	8009fdc <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009fda:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a05      	ldr	r2, [pc, #20]	; (8009ff8 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fe2:	f023 0304 	bic.w	r3, r3, #4
 8009fe6:	6113      	str	r3, [r2, #16]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	58024800 	.word	0x58024800
 8009ff8:	e000ed00 	.word	0xe000ed00

08009ffc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a004:	4b19      	ldr	r3, [pc, #100]	; (800a06c <HAL_PWREx_ConfigSupply+0x70>)
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d00a      	beq.n	800a026 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a010:	4b16      	ldr	r3, [pc, #88]	; (800a06c <HAL_PWREx_ConfigSupply+0x70>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d001      	beq.n	800a022 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e01f      	b.n	800a062 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	e01d      	b.n	800a062 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a026:	4b11      	ldr	r3, [pc, #68]	; (800a06c <HAL_PWREx_ConfigSupply+0x70>)
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f023 0207 	bic.w	r2, r3, #7
 800a02e:	490f      	ldr	r1, [pc, #60]	; (800a06c <HAL_PWREx_ConfigSupply+0x70>)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4313      	orrs	r3, r2
 800a034:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a036:	f7fa f847 	bl	80040c8 <HAL_GetTick>
 800a03a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a03c:	e009      	b.n	800a052 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a03e:	f7fa f843 	bl	80040c8 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a04c:	d901      	bls.n	800a052 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e007      	b.n	800a062 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a052:	4b06      	ldr	r3, [pc, #24]	; (800a06c <HAL_PWREx_ConfigSupply+0x70>)
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a05a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05e:	d1ee      	bne.n	800a03e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	58024800 	.word	0x58024800

0800a070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08c      	sub	sp, #48	; 0x30
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f000 bc48 	b.w	800a914 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8088 	beq.w	800a1a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a092:	4b99      	ldr	r3, [pc, #612]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a09c:	4b96      	ldr	r3, [pc, #600]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	2b10      	cmp	r3, #16
 800a0a6:	d007      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x48>
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b18      	cmp	r3, #24
 800a0ac:	d111      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x62>
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d10c      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b8:	4b8f      	ldr	r3, [pc, #572]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d06d      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x130>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d169      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f000 bc21 	b.w	800a914 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0da:	d106      	bne.n	800a0ea <HAL_RCC_OscConfig+0x7a>
 800a0dc:	4b86      	ldr	r3, [pc, #536]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a85      	ldr	r2, [pc, #532]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a0e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	e02e      	b.n	800a148 <HAL_RCC_OscConfig+0xd8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10c      	bne.n	800a10c <HAL_RCC_OscConfig+0x9c>
 800a0f2:	4b81      	ldr	r3, [pc, #516]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a80      	ldr	r2, [pc, #512]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a0f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	4b7e      	ldr	r3, [pc, #504]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a7d      	ldr	r2, [pc, #500]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	e01d      	b.n	800a148 <HAL_RCC_OscConfig+0xd8>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a114:	d10c      	bne.n	800a130 <HAL_RCC_OscConfig+0xc0>
 800a116:	4b78      	ldr	r3, [pc, #480]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a77      	ldr	r2, [pc, #476]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a11c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	4b75      	ldr	r3, [pc, #468]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a74      	ldr	r2, [pc, #464]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e00b      	b.n	800a148 <HAL_RCC_OscConfig+0xd8>
 800a130:	4b71      	ldr	r3, [pc, #452]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a70      	ldr	r2, [pc, #448]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	4b6e      	ldr	r3, [pc, #440]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a6d      	ldr	r2, [pc, #436]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d013      	beq.n	800a178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7f9 ffba 	bl	80040c8 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a158:	f7f9 ffb6 	bl	80040c8 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b64      	cmp	r3, #100	; 0x64
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e3d4      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a16a:	4b63      	ldr	r3, [pc, #396]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f0      	beq.n	800a158 <HAL_RCC_OscConfig+0xe8>
 800a176:	e014      	b.n	800a1a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a178:	f7f9 ffa6 	bl	80040c8 <HAL_GetTick>
 800a17c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a17e:	e008      	b.n	800a192 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a180:	f7f9 ffa2 	bl	80040c8 <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	2b64      	cmp	r3, #100	; 0x64
 800a18c:	d901      	bls.n	800a192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e3c0      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a192:	4b59      	ldr	r3, [pc, #356]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f0      	bne.n	800a180 <HAL_RCC_OscConfig+0x110>
 800a19e:	e000      	b.n	800a1a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 80ca 	beq.w	800a344 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1b0:	4b51      	ldr	r3, [pc, #324]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1ba:	4b4f      	ldr	r3, [pc, #316]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d007      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x166>
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	2b18      	cmp	r3, #24
 800a1ca:	d156      	bne.n	800a27a <HAL_RCC_OscConfig+0x20a>
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d151      	bne.n	800a27a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1d6:	4b48      	ldr	r3, [pc, #288]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_RCC_OscConfig+0x17e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e392      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1ee:	4b42      	ldr	r3, [pc, #264]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f023 0219 	bic.w	r2, r3, #25
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	493f      	ldr	r1, [pc, #252]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a200:	f7f9 ff62 	bl	80040c8 <HAL_GetTick>
 800a204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a206:	e008      	b.n	800a21a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a208:	f7f9 ff5e 	bl	80040c8 <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d901      	bls.n	800a21a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e37c      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a21a:	4b37      	ldr	r3, [pc, #220]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0f0      	beq.n	800a208 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a226:	f7f9 ff5b 	bl	80040e0 <HAL_GetREVID>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a230:	4293      	cmp	r3, r2
 800a232:	d817      	bhi.n	800a264 <HAL_RCC_OscConfig+0x1f4>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b40      	cmp	r3, #64	; 0x40
 800a23a:	d108      	bne.n	800a24e <HAL_RCC_OscConfig+0x1de>
 800a23c:	4b2e      	ldr	r3, [pc, #184]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a244:	4a2c      	ldr	r2, [pc, #176]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a24c:	e07a      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24e:	4b2a      	ldr	r3, [pc, #168]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	031b      	lsls	r3, r3, #12
 800a25c:	4926      	ldr	r1, [pc, #152]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a262:	e06f      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a264:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	061b      	lsls	r3, r3, #24
 800a272:	4921      	ldr	r1, [pc, #132]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a274:	4313      	orrs	r3, r2
 800a276:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a278:	e064      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d047      	beq.n	800a312 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a282:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f023 0219 	bic.w	r2, r3, #25
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	491a      	ldr	r1, [pc, #104]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a290:	4313      	orrs	r3, r2
 800a292:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a294:	f7f9 ff18 	bl	80040c8 <HAL_GetTick>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a29c:	f7f9 ff14 	bl	80040c8 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e332      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2ae:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ba:	f7f9 ff11 	bl	80040e0 <HAL_GetREVID>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d819      	bhi.n	800a2fc <HAL_RCC_OscConfig+0x28c>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b40      	cmp	r3, #64	; 0x40
 800a2ce:	d108      	bne.n	800a2e2 <HAL_RCC_OscConfig+0x272>
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2d8:	4a07      	ldr	r2, [pc, #28]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2de:	6053      	str	r3, [r2, #4]
 800a2e0:	e030      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	031b      	lsls	r3, r3, #12
 800a2f0:	4901      	ldr	r1, [pc, #4]	; (800a2f8 <HAL_RCC_OscConfig+0x288>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	604b      	str	r3, [r1, #4]
 800a2f6:	e025      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	4b9a      	ldr	r3, [pc, #616]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	061b      	lsls	r3, r3, #24
 800a30a:	4997      	ldr	r1, [pc, #604]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	604b      	str	r3, [r1, #4]
 800a310:	e018      	b.n	800a344 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a312:	4b95      	ldr	r3, [pc, #596]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a94      	ldr	r2, [pc, #592]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a31e:	f7f9 fed3 	bl	80040c8 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a324:	e008      	b.n	800a338 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a326:	f7f9 fecf 	bl	80040c8 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e2ed      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a338:	4b8b      	ldr	r3, [pc, #556]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f0      	bne.n	800a326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 80a9 	beq.w	800a4a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a352:	4b85      	ldr	r3, [pc, #532]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a35a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a35c:	4b82      	ldr	r3, [pc, #520]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b08      	cmp	r3, #8
 800a366:	d007      	beq.n	800a378 <HAL_RCC_OscConfig+0x308>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	2b18      	cmp	r3, #24
 800a36c:	d13a      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x374>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	2b01      	cmp	r3, #1
 800a376:	d135      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a378:	4b7b      	ldr	r3, [pc, #492]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <HAL_RCC_OscConfig+0x320>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	2b80      	cmp	r3, #128	; 0x80
 800a38a:	d001      	beq.n	800a390 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e2c1      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a390:	f7f9 fea6 	bl	80040e0 <HAL_GetREVID>
 800a394:	4603      	mov	r3, r0
 800a396:	f241 0203 	movw	r2, #4099	; 0x1003
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d817      	bhi.n	800a3ce <HAL_RCC_OscConfig+0x35e>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d108      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x348>
 800a3a6:	4b70      	ldr	r3, [pc, #448]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3ae:	4a6e      	ldr	r2, [pc, #440]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3b6:	e075      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b8:	4b6b      	ldr	r3, [pc, #428]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	069b      	lsls	r3, r3, #26
 800a3c6:	4968      	ldr	r1, [pc, #416]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3cc:	e06a      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3ce:	4b66      	ldr	r3, [pc, #408]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	061b      	lsls	r3, r3, #24
 800a3dc:	4962      	ldr	r1, [pc, #392]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3e2:	e05f      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d042      	beq.n	800a472 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3ec:	4b5e      	ldr	r3, [pc, #376]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a5d      	ldr	r2, [pc, #372]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7f9 fe66 	bl	80040c8 <HAL_GetTick>
 800a3fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a400:	f7f9 fe62 	bl	80040c8 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e280      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a412:	4b55      	ldr	r3, [pc, #340]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0f0      	beq.n	800a400 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a41e:	f7f9 fe5f 	bl	80040e0 <HAL_GetREVID>
 800a422:	4603      	mov	r3, r0
 800a424:	f241 0203 	movw	r2, #4099	; 0x1003
 800a428:	4293      	cmp	r3, r2
 800a42a:	d817      	bhi.n	800a45c <HAL_RCC_OscConfig+0x3ec>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	2b20      	cmp	r3, #32
 800a432:	d108      	bne.n	800a446 <HAL_RCC_OscConfig+0x3d6>
 800a434:	4b4c      	ldr	r3, [pc, #304]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a43c:	4a4a      	ldr	r2, [pc, #296]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a43e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a442:	6053      	str	r3, [r2, #4]
 800a444:	e02e      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
 800a446:	4b48      	ldr	r3, [pc, #288]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	069b      	lsls	r3, r3, #26
 800a454:	4944      	ldr	r1, [pc, #272]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a456:	4313      	orrs	r3, r2
 800a458:	604b      	str	r3, [r1, #4]
 800a45a:	e023      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
 800a45c:	4b42      	ldr	r3, [pc, #264]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	061b      	lsls	r3, r3, #24
 800a46a:	493f      	ldr	r1, [pc, #252]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60cb      	str	r3, [r1, #12]
 800a470:	e018      	b.n	800a4a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a472:	4b3d      	ldr	r3, [pc, #244]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a3c      	ldr	r2, [pc, #240]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a47c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47e:	f7f9 fe23 	bl	80040c8 <HAL_GetTick>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a484:	e008      	b.n	800a498 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a486:	f7f9 fe1f 	bl	80040c8 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b02      	cmp	r3, #2
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e23d      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a498:	4b33      	ldr	r3, [pc, #204]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f0      	bne.n	800a486 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d036      	beq.n	800a51e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d019      	beq.n	800a4ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4b8:	4b2b      	ldr	r3, [pc, #172]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4bc:	4a2a      	ldr	r2, [pc, #168]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c4:	f7f9 fe00 	bl	80040c8 <HAL_GetTick>
 800a4c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4ca:	e008      	b.n	800a4de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4cc:	f7f9 fdfc 	bl	80040c8 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e21a      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4de:	4b22      	ldr	r3, [pc, #136]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0f0      	beq.n	800a4cc <HAL_RCC_OscConfig+0x45c>
 800a4ea:	e018      	b.n	800a51e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4ec:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4f0:	4a1d      	ldr	r2, [pc, #116]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a4f2:	f023 0301 	bic.w	r3, r3, #1
 800a4f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f8:	f7f9 fde6 	bl	80040c8 <HAL_GetTick>
 800a4fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4fe:	e008      	b.n	800a512 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a500:	f7f9 fde2 	bl	80040c8 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d901      	bls.n	800a512 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e200      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f0      	bne.n	800a500 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0320 	and.w	r3, r3, #32
 800a526:	2b00      	cmp	r3, #0
 800a528:	d039      	beq.n	800a59e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01c      	beq.n	800a56c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a532:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a0c      	ldr	r2, [pc, #48]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a53c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a53e:	f7f9 fdc3 	bl	80040c8 <HAL_GetTick>
 800a542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a544:	e008      	b.n	800a558 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a546:	f7f9 fdbf 	bl	80040c8 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	2b02      	cmp	r3, #2
 800a552:	d901      	bls.n	800a558 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e1dd      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a558:	4b03      	ldr	r3, [pc, #12]	; (800a568 <HAL_RCC_OscConfig+0x4f8>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0f0      	beq.n	800a546 <HAL_RCC_OscConfig+0x4d6>
 800a564:	e01b      	b.n	800a59e <HAL_RCC_OscConfig+0x52e>
 800a566:	bf00      	nop
 800a568:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a56c:	4b9b      	ldr	r3, [pc, #620]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a9a      	ldr	r2, [pc, #616]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a576:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a578:	f7f9 fda6 	bl	80040c8 <HAL_GetTick>
 800a57c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a57e:	e008      	b.n	800a592 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a580:	f7f9 fda2 	bl	80040c8 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d901      	bls.n	800a592 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e1c0      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a592:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1f0      	bne.n	800a580 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 8081 	beq.w	800a6ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5ac:	4b8c      	ldr	r3, [pc, #560]	; (800a7e0 <HAL_RCC_OscConfig+0x770>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a8b      	ldr	r2, [pc, #556]	; (800a7e0 <HAL_RCC_OscConfig+0x770>)
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5b8:	f7f9 fd86 	bl	80040c8 <HAL_GetTick>
 800a5bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5be:	e008      	b.n	800a5d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5c0:	f7f9 fd82 	bl	80040c8 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b64      	cmp	r3, #100	; 0x64
 800a5cc:	d901      	bls.n	800a5d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e1a0      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5d2:	4b83      	ldr	r3, [pc, #524]	; (800a7e0 <HAL_RCC_OscConfig+0x770>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0f0      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d106      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x584>
 800a5e6:	4b7d      	ldr	r3, [pc, #500]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	4a7c      	ldr	r2, [pc, #496]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f2:	e02d      	b.n	800a650 <HAL_RCC_OscConfig+0x5e0>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10c      	bne.n	800a616 <HAL_RCC_OscConfig+0x5a6>
 800a5fc:	4b77      	ldr	r3, [pc, #476]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a600:	4a76      	ldr	r2, [pc, #472]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	6713      	str	r3, [r2, #112]	; 0x70
 800a608:	4b74      	ldr	r3, [pc, #464]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60c:	4a73      	ldr	r2, [pc, #460]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a60e:	f023 0304 	bic.w	r3, r3, #4
 800a612:	6713      	str	r3, [r2, #112]	; 0x70
 800a614:	e01c      	b.n	800a650 <HAL_RCC_OscConfig+0x5e0>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d10c      	bne.n	800a638 <HAL_RCC_OscConfig+0x5c8>
 800a61e:	4b6f      	ldr	r3, [pc, #444]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a622:	4a6e      	ldr	r2, [pc, #440]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a624:	f043 0304 	orr.w	r3, r3, #4
 800a628:	6713      	str	r3, [r2, #112]	; 0x70
 800a62a:	4b6c      	ldr	r3, [pc, #432]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62e:	4a6b      	ldr	r2, [pc, #428]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a630:	f043 0301 	orr.w	r3, r3, #1
 800a634:	6713      	str	r3, [r2, #112]	; 0x70
 800a636:	e00b      	b.n	800a650 <HAL_RCC_OscConfig+0x5e0>
 800a638:	4b68      	ldr	r3, [pc, #416]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	4a67      	ldr	r2, [pc, #412]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	6713      	str	r3, [r2, #112]	; 0x70
 800a644:	4b65      	ldr	r3, [pc, #404]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a648:	4a64      	ldr	r2, [pc, #400]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a64a:	f023 0304 	bic.w	r3, r3, #4
 800a64e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d015      	beq.n	800a684 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a658:	f7f9 fd36 	bl	80040c8 <HAL_GetTick>
 800a65c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a65e:	e00a      	b.n	800a676 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a660:	f7f9 fd32 	bl	80040c8 <HAL_GetTick>
 800a664:	4602      	mov	r2, r0
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a66e:	4293      	cmp	r3, r2
 800a670:	d901      	bls.n	800a676 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e14e      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a676:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0ee      	beq.n	800a660 <HAL_RCC_OscConfig+0x5f0>
 800a682:	e014      	b.n	800a6ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a684:	f7f9 fd20 	bl	80040c8 <HAL_GetTick>
 800a688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a68a:	e00a      	b.n	800a6a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a68c:	f7f9 fd1c 	bl	80040c8 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	f241 3288 	movw	r2, #5000	; 0x1388
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e138      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6a2:	4b4e      	ldr	r3, [pc, #312]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1ee      	bne.n	800a68c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 812d 	beq.w	800a912 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6b8:	4b48      	ldr	r3, [pc, #288]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6c0:	2b18      	cmp	r3, #24
 800a6c2:	f000 80bd 	beq.w	800a840 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	f040 809e 	bne.w	800a80c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6d0:	4b42      	ldr	r3, [pc, #264]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a41      	ldr	r2, [pc, #260]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a6d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6dc:	f7f9 fcf4 	bl	80040c8 <HAL_GetTick>
 800a6e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6e2:	e008      	b.n	800a6f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e4:	f7f9 fcf0 	bl	80040c8 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d901      	bls.n	800a6f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e10e      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f6:	4b39      	ldr	r3, [pc, #228]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f0      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a702:	4b36      	ldr	r3, [pc, #216]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a706:	4b37      	ldr	r3, [pc, #220]	; (800a7e4 <HAL_RCC_OscConfig+0x774>)
 800a708:	4013      	ands	r3, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	430a      	orrs	r2, r1
 800a716:	4931      	ldr	r1, [pc, #196]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	628b      	str	r3, [r1, #40]	; 0x28
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a720:	3b01      	subs	r3, #1
 800a722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72a:	3b01      	subs	r3, #1
 800a72c:	025b      	lsls	r3, r3, #9
 800a72e:	b29b      	uxth	r3, r3
 800a730:	431a      	orrs	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	3b01      	subs	r3, #1
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a73e:	431a      	orrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a744:	3b01      	subs	r3, #1
 800a746:	061b      	lsls	r3, r3, #24
 800a748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a74c:	4923      	ldr	r1, [pc, #140]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a752:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	4a21      	ldr	r2, [pc, #132]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a758:	f023 0301 	bic.w	r3, r3, #1
 800a75c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a75e:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a762:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <HAL_RCC_OscConfig+0x778>)
 800a764:	4013      	ands	r3, r2
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a76a:	00d2      	lsls	r2, r2, #3
 800a76c:	491b      	ldr	r1, [pc, #108]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a772:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	f023 020c 	bic.w	r2, r3, #12
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	4917      	ldr	r1, [pc, #92]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a780:	4313      	orrs	r3, r2
 800a782:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a784:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a788:	f023 0202 	bic.w	r2, r3, #2
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a790:	4912      	ldr	r1, [pc, #72]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a792:	4313      	orrs	r3, r2
 800a794:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a796:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a79c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a2:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a6:	4a0d      	ldr	r2, [pc, #52]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7ba:	4b08      	ldr	r3, [pc, #32]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7c0:	f043 0301 	orr.w	r3, r3, #1
 800a7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <HAL_RCC_OscConfig+0x76c>)
 800a7cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7d2:	f7f9 fc79 	bl	80040c8 <HAL_GetTick>
 800a7d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7d8:	e011      	b.n	800a7fe <HAL_RCC_OscConfig+0x78e>
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	58024800 	.word	0x58024800
 800a7e4:	fffffc0c 	.word	0xfffffc0c
 800a7e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7ec:	f7f9 fc6c 	bl	80040c8 <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d901      	bls.n	800a7fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e08a      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7fe:	4b47      	ldr	r3, [pc, #284]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0f0      	beq.n	800a7ec <HAL_RCC_OscConfig+0x77c>
 800a80a:	e082      	b.n	800a912 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a80c:	4b43      	ldr	r3, [pc, #268]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a42      	ldr	r2, [pc, #264]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a818:	f7f9 fc56 	bl	80040c8 <HAL_GetTick>
 800a81c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a820:	f7f9 fc52 	bl	80040c8 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e070      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a832:	4b3a      	ldr	r3, [pc, #232]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f0      	bne.n	800a820 <HAL_RCC_OscConfig+0x7b0>
 800a83e:	e068      	b.n	800a912 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a840:	4b36      	ldr	r3, [pc, #216]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a844:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a846:	4b35      	ldr	r3, [pc, #212]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b01      	cmp	r3, #1
 800a852:	d031      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f003 0203 	and.w	r2, r3, #3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a85e:	429a      	cmp	r2, r3
 800a860:	d12a      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	091b      	lsrs	r3, r3, #4
 800a866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86e:	429a      	cmp	r2, r3
 800a870:	d122      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a87e:	429a      	cmp	r2, r3
 800a880:	d11a      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	0a5b      	lsrs	r3, r3, #9
 800a886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a890:	429a      	cmp	r2, r3
 800a892:	d111      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	0c1b      	lsrs	r3, r3, #16
 800a898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d108      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	0e1b      	lsrs	r3, r3, #24
 800a8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d001      	beq.n	800a8bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e02b      	b.n	800a914 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8bc:	4b17      	ldr	r3, [pc, #92]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c0:	08db      	lsrs	r3, r3, #3
 800a8c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d01f      	beq.n	800a912 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	4a11      	ldr	r2, [pc, #68]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a8d8:	f023 0301 	bic.w	r3, r3, #1
 800a8dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8de:	f7f9 fbf3 	bl	80040c8 <HAL_GetTick>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8e4:	bf00      	nop
 800a8e6:	f7f9 fbef 	bl	80040c8 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d0f9      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <HAL_RCC_OscConfig+0x8b0>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8fe:	00d2      	lsls	r2, r2, #3
 800a900:	4906      	ldr	r1, [pc, #24]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a902:	4313      	orrs	r3, r2
 800a904:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4a04      	ldr	r2, [pc, #16]	; (800a91c <HAL_RCC_OscConfig+0x8ac>)
 800a90c:	f043 0301 	orr.w	r3, r3, #1
 800a910:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3730      	adds	r7, #48	; 0x30
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	58024400 	.word	0x58024400
 800a920:	ffff0007 	.word	0xffff0007

0800a924 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e19c      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a938:	4b8a      	ldr	r3, [pc, #552]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 030f 	and.w	r3, r3, #15
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d910      	bls.n	800a968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a946:	4b87      	ldr	r3, [pc, #540]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f023 020f 	bic.w	r2, r3, #15
 800a94e:	4985      	ldr	r1, [pc, #532]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	4313      	orrs	r3, r2
 800a954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a956:	4b83      	ldr	r3, [pc, #524]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d001      	beq.n	800a968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e184      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	d010      	beq.n	800a996 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	4b7b      	ldr	r3, [pc, #492]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a980:	429a      	cmp	r2, r3
 800a982:	d908      	bls.n	800a996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a984:	4b78      	ldr	r3, [pc, #480]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	4975      	ldr	r1, [pc, #468]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a992:	4313      	orrs	r3, r2
 800a994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d010      	beq.n	800a9c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695a      	ldr	r2, [r3, #20]
 800a9a6:	4b70      	ldr	r3, [pc, #448]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d908      	bls.n	800a9c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9b2:	4b6d      	ldr	r3, [pc, #436]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	496a      	ldr	r1, [pc, #424]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d010      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699a      	ldr	r2, [r3, #24]
 800a9d4:	4b64      	ldr	r3, [pc, #400]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d908      	bls.n	800a9f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9e0:	4b61      	ldr	r3, [pc, #388]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	495e      	ldr	r1, [pc, #376]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d010      	beq.n	800aa20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69da      	ldr	r2, [r3, #28]
 800aa02:	4b59      	ldr	r3, [pc, #356]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d908      	bls.n	800aa20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa0e:	4b56      	ldr	r3, [pc, #344]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	4953      	ldr	r1, [pc, #332]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d010      	beq.n	800aa4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	4b4d      	ldr	r3, [pc, #308]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d908      	bls.n	800aa4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa3c:	4b4a      	ldr	r3, [pc, #296]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f023 020f 	bic.w	r2, r3, #15
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	4947      	ldr	r1, [pc, #284]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d055      	beq.n	800ab06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa5a:	4b43      	ldr	r3, [pc, #268]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4940      	ldr	r1, [pc, #256]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d107      	bne.n	800aa84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa74:	4b3c      	ldr	r3, [pc, #240]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d121      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e0f6      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d107      	bne.n	800aa9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa8c:	4b36      	ldr	r3, [pc, #216]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d115      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0ea      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d107      	bne.n	800aab4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaa4:	4b30      	ldr	r3, [pc, #192]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d109      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e0de      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aab4:	4b2c      	ldr	r3, [pc, #176]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0d6      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aac4:	4b28      	ldr	r3, [pc, #160]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f023 0207 	bic.w	r2, r3, #7
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4925      	ldr	r1, [pc, #148]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aad6:	f7f9 faf7 	bl	80040c8 <HAL_GetTick>
 800aada:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aadc:	e00a      	b.n	800aaf4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aade:	f7f9 faf3 	bl	80040c8 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d901      	bls.n	800aaf4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e0be      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaf4:	4b1c      	ldr	r3, [pc, #112]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d1eb      	bne.n	800aade <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d010      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d208      	bcs.n	800ab34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab22:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	f023 020f 	bic.w	r2, r3, #15
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	490e      	ldr	r1, [pc, #56]	; (800ab68 <HAL_RCC_ClockConfig+0x244>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d214      	bcs.n	800ab6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab42:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f023 020f 	bic.w	r2, r3, #15
 800ab4a:	4906      	ldr	r1, [pc, #24]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab52:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <HAL_RCC_ClockConfig+0x240>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 030f 	and.w	r3, r3, #15
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d005      	beq.n	800ab6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e086      	b.n	800ac72 <HAL_RCC_ClockConfig+0x34e>
 800ab64:	52002000 	.word	0x52002000
 800ab68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d010      	beq.n	800ab9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	4b3f      	ldr	r3, [pc, #252]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d208      	bcs.n	800ab9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab88:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	4939      	ldr	r1, [pc, #228]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0308 	and.w	r3, r3, #8
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d010      	beq.n	800abc8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d208      	bcs.n	800abc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abb6:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	492e      	ldr	r1, [pc, #184]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	4b28      	ldr	r3, [pc, #160]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d208      	bcs.n	800abf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	4922      	ldr	r1, [pc, #136]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d010      	beq.n	800ac24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69da      	ldr	r2, [r3, #28]
 800ac06:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d208      	bcs.n	800ac24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac12:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	4917      	ldr	r1, [pc, #92]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac24:	f000 f834 	bl	800ac90 <HAL_RCC_GetSysClockFreq>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	f003 030f 	and.w	r3, r3, #15
 800ac34:	4912      	ldr	r1, [pc, #72]	; (800ac80 <HAL_RCC_ClockConfig+0x35c>)
 800ac36:	5ccb      	ldrb	r3, [r1, r3]
 800ac38:	f003 031f 	and.w	r3, r3, #31
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac42:	4b0e      	ldr	r3, [pc, #56]	; (800ac7c <HAL_RCC_ClockConfig+0x358>)
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	4a0d      	ldr	r2, [pc, #52]	; (800ac80 <HAL_RCC_ClockConfig+0x35c>)
 800ac4c:	5cd3      	ldrb	r3, [r2, r3]
 800ac4e:	f003 031f 	and.w	r3, r3, #31
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	fa22 f303 	lsr.w	r3, r2, r3
 800ac58:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <HAL_RCC_ClockConfig+0x360>)
 800ac5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac5c:	4a0a      	ldr	r2, [pc, #40]	; (800ac88 <HAL_RCC_ClockConfig+0x364>)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac62:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <HAL_RCC_ClockConfig+0x368>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f8 ff5c 	bl	8003b24 <HAL_InitTick>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	58024400 	.word	0x58024400
 800ac80:	08017a04 	.word	0x08017a04
 800ac84:	24000090 	.word	0x24000090
 800ac88:	2400008c 	.word	0x2400008c
 800ac8c:	24000094 	.word	0x24000094

0800ac90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b089      	sub	sp, #36	; 0x24
 800ac94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac96:	4bb3      	ldr	r3, [pc, #716]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac9e:	2b18      	cmp	r3, #24
 800aca0:	f200 8155 	bhi.w	800af4e <HAL_RCC_GetSysClockFreq+0x2be>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <HAL_RCC_GetSysClockFreq+0x1c>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800ad11 	.word	0x0800ad11
 800acb0:	0800af4f 	.word	0x0800af4f
 800acb4:	0800af4f 	.word	0x0800af4f
 800acb8:	0800af4f 	.word	0x0800af4f
 800acbc:	0800af4f 	.word	0x0800af4f
 800acc0:	0800af4f 	.word	0x0800af4f
 800acc4:	0800af4f 	.word	0x0800af4f
 800acc8:	0800af4f 	.word	0x0800af4f
 800accc:	0800ad37 	.word	0x0800ad37
 800acd0:	0800af4f 	.word	0x0800af4f
 800acd4:	0800af4f 	.word	0x0800af4f
 800acd8:	0800af4f 	.word	0x0800af4f
 800acdc:	0800af4f 	.word	0x0800af4f
 800ace0:	0800af4f 	.word	0x0800af4f
 800ace4:	0800af4f 	.word	0x0800af4f
 800ace8:	0800af4f 	.word	0x0800af4f
 800acec:	0800ad3d 	.word	0x0800ad3d
 800acf0:	0800af4f 	.word	0x0800af4f
 800acf4:	0800af4f 	.word	0x0800af4f
 800acf8:	0800af4f 	.word	0x0800af4f
 800acfc:	0800af4f 	.word	0x0800af4f
 800ad00:	0800af4f 	.word	0x0800af4f
 800ad04:	0800af4f 	.word	0x0800af4f
 800ad08:	0800af4f 	.word	0x0800af4f
 800ad0c:	0800ad43 	.word	0x0800ad43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad10:	4b94      	ldr	r3, [pc, #592]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d009      	beq.n	800ad30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1c:	4b91      	ldr	r3, [pc, #580]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	08db      	lsrs	r3, r3, #3
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	4a90      	ldr	r2, [pc, #576]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad2e:	e111      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad30:	4b8d      	ldr	r3, [pc, #564]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad32:	61bb      	str	r3, [r7, #24]
      break;
 800ad34:	e10e      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad36:	4b8d      	ldr	r3, [pc, #564]	; (800af6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad38:	61bb      	str	r3, [r7, #24]
      break;
 800ad3a:	e10b      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad3c:	4b8c      	ldr	r3, [pc, #560]	; (800af70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad3e:	61bb      	str	r3, [r7, #24]
      break;
 800ad40:	e108      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad42:	4b88      	ldr	r3, [pc, #544]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad4c:	4b85      	ldr	r3, [pc, #532]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad50:	091b      	lsrs	r3, r3, #4
 800ad52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad58:	4b82      	ldr	r3, [pc, #520]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad62:	4b80      	ldr	r3, [pc, #512]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad66:	08db      	lsrs	r3, r3, #3
 800ad68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 80e1 	beq.w	800af48 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	f000 8083 	beq.w	800ae94 <HAL_RCC_GetSysClockFreq+0x204>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	f200 80a1 	bhi.w	800aed8 <HAL_RCC_GetSysClockFreq+0x248>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d003      	beq.n	800ada4 <HAL_RCC_GetSysClockFreq+0x114>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d056      	beq.n	800ae50 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ada2:	e099      	b.n	800aed8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ada4:	4b6f      	ldr	r3, [pc, #444]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d02d      	beq.n	800ae0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adb0:	4b6c      	ldr	r3, [pc, #432]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	08db      	lsrs	r3, r3, #3
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	4a6b      	ldr	r2, [pc, #428]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adbc:	fa22 f303 	lsr.w	r3, r2, r3
 800adc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adea:	ed97 6a02 	vldr	s12, [r7, #8]
 800adee:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae0a:	e087      	b.n	800af1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae16:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1e:	4b51      	ldr	r3, [pc, #324]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae32:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae4e:	e065      	b.n	800af1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae62:	4b40      	ldr	r3, [pc, #256]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae72:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae92:	e043      	b.n	800af1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af80 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea6:	4b2f      	ldr	r3, [pc, #188]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aed6:	e021      	b.n	800af1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800aee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeea:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefa:	ed97 6a02 	vldr	s12, [r7, #8]
 800aefe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af20:	0a5b      	lsrs	r3, r3, #9
 800af22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af26:	3301      	adds	r3, #1
 800af28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	ee07 3a90 	vmov	s15, r3
 800af30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af34:	edd7 6a07 	vldr	s13, [r7, #28]
 800af38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af40:	ee17 3a90 	vmov	r3, s15
 800af44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af46:	e005      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	61bb      	str	r3, [r7, #24]
      break;
 800af4c:	e002      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af4e:	4b07      	ldr	r3, [pc, #28]	; (800af6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af50:	61bb      	str	r3, [r7, #24]
      break;
 800af52:	bf00      	nop
  }

  return sysclockfreq;
 800af54:	69bb      	ldr	r3, [r7, #24]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3724      	adds	r7, #36	; 0x24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	58024400 	.word	0x58024400
 800af68:	03d09000 	.word	0x03d09000
 800af6c:	003d0900 	.word	0x003d0900
 800af70:	017d7840 	.word	0x017d7840
 800af74:	46000000 	.word	0x46000000
 800af78:	4c742400 	.word	0x4c742400
 800af7c:	4a742400 	.word	0x4a742400
 800af80:	4bbebc20 	.word	0x4bbebc20

0800af84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af8a:	f7ff fe81 	bl	800ac90 <HAL_RCC_GetSysClockFreq>
 800af8e:	4602      	mov	r2, r0
 800af90:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	0a1b      	lsrs	r3, r3, #8
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	490f      	ldr	r1, [pc, #60]	; (800afd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800af9c:	5ccb      	ldrb	r3, [r1, r3]
 800af9e:	f003 031f 	and.w	r3, r3, #31
 800afa2:	fa22 f303 	lsr.w	r3, r2, r3
 800afa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afa8:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	f003 030f 	and.w	r3, r3, #15
 800afb0:	4a09      	ldr	r2, [pc, #36]	; (800afd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800afb2:	5cd3      	ldrb	r3, [r2, r3]
 800afb4:	f003 031f 	and.w	r3, r3, #31
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	fa22 f303 	lsr.w	r3, r2, r3
 800afbe:	4a07      	ldr	r2, [pc, #28]	; (800afdc <HAL_RCC_GetHCLKFreq+0x58>)
 800afc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afc2:	4a07      	ldr	r2, [pc, #28]	; (800afe0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800afc8:	4b04      	ldr	r3, [pc, #16]	; (800afdc <HAL_RCC_GetHCLKFreq+0x58>)
 800afca:	681b      	ldr	r3, [r3, #0]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	58024400 	.word	0x58024400
 800afd8:	08017a04 	.word	0x08017a04
 800afdc:	24000090 	.word	0x24000090
 800afe0:	2400008c 	.word	0x2400008c

0800afe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800afe8:	f7ff ffcc 	bl	800af84 <HAL_RCC_GetHCLKFreq>
 800afec:	4602      	mov	r2, r0
 800afee:	4b06      	ldr	r3, [pc, #24]	; (800b008 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	091b      	lsrs	r3, r3, #4
 800aff4:	f003 0307 	and.w	r3, r3, #7
 800aff8:	4904      	ldr	r1, [pc, #16]	; (800b00c <HAL_RCC_GetPCLK1Freq+0x28>)
 800affa:	5ccb      	ldrb	r3, [r1, r3]
 800affc:	f003 031f 	and.w	r3, r3, #31
 800b000:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b004:	4618      	mov	r0, r3
 800b006:	bd80      	pop	{r7, pc}
 800b008:	58024400 	.word	0x58024400
 800b00c:	08017a04 	.word	0x08017a04

0800b010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b014:	f7ff ffb6 	bl	800af84 <HAL_RCC_GetHCLKFreq>
 800b018:	4602      	mov	r2, r0
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	0a1b      	lsrs	r3, r3, #8
 800b020:	f003 0307 	and.w	r3, r3, #7
 800b024:	4904      	ldr	r1, [pc, #16]	; (800b038 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b026:	5ccb      	ldrb	r3, [r1, r3]
 800b028:	f003 031f 	and.w	r3, r3, #31
 800b02c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b030:	4618      	mov	r0, r3
 800b032:	bd80      	pop	{r7, pc}
 800b034:	58024400 	.word	0x58024400
 800b038:	08017a04 	.word	0x08017a04

0800b03c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	223f      	movs	r2, #63	; 0x3f
 800b04a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	f003 0207 	and.w	r2, r3, #7
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b058:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b064:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	f003 020f 	and.w	r2, r3, #15
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b08a:	69db      	ldr	r3, [r3, #28]
 800b08c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <HAL_RCC_GetClockConfig+0x7c>)
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <HAL_RCC_GetClockConfig+0x80>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 020f 	and.w	r2, r3, #15
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	601a      	str	r2, [r3, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	52002000 	.word	0x52002000

0800b0c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0c4:	b0ca      	sub	sp, #296	; 0x128
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	ea54 0305 	orrs.w	r3, r4, r5
 800b0ea:	d049      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0f6:	d02f      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0fc:	d828      	bhi.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b102:	d01a      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b108:	d822      	bhi.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b10e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b112:	d007      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b114:	e01c      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b116:	4bb8      	ldr	r3, [pc, #736]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	4ab7      	ldr	r2, [pc, #732]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b11c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b122:	e01a      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b128:	3308      	adds	r3, #8
 800b12a:	2102      	movs	r1, #2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 fb61 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b132:	4603      	mov	r3, r0
 800b134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b138:	e00f      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	3328      	adds	r3, #40	; 0x28
 800b140:	2102      	movs	r1, #2
 800b142:	4618      	mov	r0, r3
 800b144:	f002 fc08 	bl	800d958 <RCCEx_PLL3_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b14e:	e004      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b156:	e000      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b162:	4ba5      	ldr	r3, [pc, #660]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b166:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b170:	4aa1      	ldr	r2, [pc, #644]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b172:	430b      	orrs	r3, r1
 800b174:	6513      	str	r3, [r2, #80]	; 0x50
 800b176:	e003      	b.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b17c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b18c:	f04f 0900 	mov.w	r9, #0
 800b190:	ea58 0309 	orrs.w	r3, r8, r9
 800b194:	d047      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d82a      	bhi.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b1bd 	.word	0x0800b1bd
 800b1ac:	0800b1cb 	.word	0x0800b1cb
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b1ff 	.word	0x0800b1ff
 800b1b8:	0800b1ff 	.word	0x0800b1ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1bc:	4b8e      	ldr	r3, [pc, #568]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	4a8d      	ldr	r2, [pc, #564]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1c8:	e01a      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f002 fb0e 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1de:	e00f      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e4:	3328      	adds	r3, #40	; 0x28
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f002 fbb5 	bl	800d958 <RCCEx_PLL3_Config>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1f4:	e004      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1fc:	e000      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b208:	4b7b      	ldr	r3, [pc, #492]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20c:	f023 0107 	bic.w	r1, r3, #7
 800b210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b216:	4a78      	ldr	r2, [pc, #480]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b218:	430b      	orrs	r3, r1
 800b21a:	6513      	str	r3, [r2, #80]	; 0x50
 800b21c:	e003      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b232:	f04f 0b00 	mov.w	fp, #0
 800b236:	ea5a 030b 	orrs.w	r3, sl, fp
 800b23a:	d04c      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b246:	d030      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24c:	d829      	bhi.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b24e:	2bc0      	cmp	r3, #192	; 0xc0
 800b250:	d02d      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b252:	2bc0      	cmp	r3, #192	; 0xc0
 800b254:	d825      	bhi.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b256:	2b80      	cmp	r3, #128	; 0x80
 800b258:	d018      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b25a:	2b80      	cmp	r3, #128	; 0x80
 800b25c:	d821      	bhi.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b262:	2b40      	cmp	r3, #64	; 0x40
 800b264:	d007      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b266:	e01c      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b268:	4b63      	ldr	r3, [pc, #396]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a62      	ldr	r2, [pc, #392]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b274:	e01c      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	3308      	adds	r3, #8
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f002 fab8 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b28a:	e011      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b290:	3328      	adds	r3, #40	; 0x28
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f002 fb5f 	bl	800d958 <RCCEx_PLL3_Config>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b2a0:	e006      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a8:	e002      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b2b8:	4b4f      	ldr	r3, [pc, #316]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c6:	4a4c      	ldr	r2, [pc, #304]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b2cc:	e003      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	d053      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b302:	d035      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b308:	d82e      	bhi.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b30a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b30e:	d031      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b310:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b314:	d828      	bhi.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b31a:	d01a      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b31c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b320:	d822      	bhi.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b32a:	d007      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b32c:	e01c      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32e:	4b32      	ldr	r3, [pc, #200]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	4a31      	ldr	r2, [pc, #196]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b33a:	e01c      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b340:	3308      	adds	r3, #8
 800b342:	2100      	movs	r1, #0
 800b344:	4618      	mov	r0, r3
 800b346:	f002 fa55 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b350:	e011      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b356:	3328      	adds	r3, #40	; 0x28
 800b358:	2100      	movs	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f002 fafc 	bl	800d958 <RCCEx_PLL3_Config>
 800b360:	4603      	mov	r3, r0
 800b362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b366:	e006      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b36e:	e002      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b370:	bf00      	nop
 800b372:	e000      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b37e:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b382:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b38e:	4a1a      	ldr	r2, [pc, #104]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6593      	str	r3, [r2, #88]	; 0x58
 800b394:	e003      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b39a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b3aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	d056      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3ca:	d038      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3d0:	d831      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3d6:	d034      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3dc:	d82b      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3e2:	d01d      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3e8:	d825      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d006      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3f2:	d00a      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3f4:	e01f      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3f6:	bf00      	nop
 800b3f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3fc:	4ba2      	ldr	r3, [pc, #648]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	4aa1      	ldr	r2, [pc, #644]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b408:	e01c      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b40e:	3308      	adds	r3, #8
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f002 f9ee 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b41e:	e011      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b424:	3328      	adds	r3, #40	; 0x28
 800b426:	2100      	movs	r1, #0
 800b428:	4618      	mov	r0, r3
 800b42a:	f002 fa95 	bl	800d958 <RCCEx_PLL3_Config>
 800b42e:	4603      	mov	r3, r0
 800b430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b434:	e006      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b43c:	e002      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b442:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10b      	bne.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b44c:	4b8e      	ldr	r3, [pc, #568]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b450:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b45c:	4a8a      	ldr	r2, [pc, #552]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b45e:	430b      	orrs	r3, r1
 800b460:	6593      	str	r3, [r2, #88]	; 0x58
 800b462:	e003      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b47c:	2300      	movs	r3, #0
 800b47e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b482:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b486:	460b      	mov	r3, r1
 800b488:	4313      	orrs	r3, r2
 800b48a:	d03a      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b492:	2b30      	cmp	r3, #48	; 0x30
 800b494:	d01f      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b496:	2b30      	cmp	r3, #48	; 0x30
 800b498:	d819      	bhi.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b49a:	2b20      	cmp	r3, #32
 800b49c:	d00c      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d815      	bhi.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d019      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b4a6:	2b10      	cmp	r3, #16
 800b4a8:	d111      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4aa:	4b77      	ldr	r3, [pc, #476]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	4a76      	ldr	r2, [pc, #472]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4b6:	e011      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	3308      	adds	r3, #8
 800b4be:	2102      	movs	r1, #2
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f002 f997 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4cc:	e006      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4d4:	e002      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4e4:	4b68      	ldr	r3, [pc, #416]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f2:	4a65      	ldr	r2, [pc, #404]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4f8:	e003      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b50e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b512:	2300      	movs	r3, #0
 800b514:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b518:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4313      	orrs	r3, r2
 800b520:	d051      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b52c:	d035      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b52e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b532:	d82e      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b534:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b538:	d031      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b53a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b53e:	d828      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b544:	d01a      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b54a:	d822      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d007      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b556:	e01c      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b558:	4b4b      	ldr	r3, [pc, #300]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4a4a      	ldr	r2, [pc, #296]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b564:	e01c      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56a:	3308      	adds	r3, #8
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f002 f940 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b57a:	e011      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b580:	3328      	adds	r3, #40	; 0x28
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f002 f9e7 	bl	800d958 <RCCEx_PLL3_Config>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b590:	e006      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b598:	e002      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b59a:	bf00      	nop
 800b59c:	e000      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b59e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5a8:	4b37      	ldr	r3, [pc, #220]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5b6:	4a34      	ldr	r2, [pc, #208]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b5bc:	e003      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	d056      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5f0:	d033      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5f6:	d82c      	bhi.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5fc:	d02f      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b602:	d826      	bhi.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b608:	d02b      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b60a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b60e:	d820      	bhi.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b614:	d012      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b61a:	d81a      	bhi.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d022      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b624:	d115      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62a:	3308      	adds	r3, #8
 800b62c:	2101      	movs	r1, #1
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 f8e0 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b63a:	e015      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b640:	3328      	adds	r3, #40	; 0x28
 800b642:	2101      	movs	r1, #1
 800b644:	4618      	mov	r0, r3
 800b646:	f002 f987 	bl	800d958 <RCCEx_PLL3_Config>
 800b64a:	4603      	mov	r3, r0
 800b64c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b650:	e00a      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b658:	e006      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65a:	bf00      	nop
 800b65c:	e004      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65e:	bf00      	nop
 800b660:	e002      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10d      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b670:	4b05      	ldr	r3, [pc, #20]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b674:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b67e:	4a02      	ldr	r2, [pc, #8]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b680:	430b      	orrs	r3, r1
 800b682:	6513      	str	r3, [r2, #80]	; 0x50
 800b684:	e006      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b686:	bf00      	nop
 800b688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b6a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	d055      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6c0:	d033      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6c6:	d82c      	bhi.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6cc:	d02f      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d2:	d826      	bhi.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d8:	d02b      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6de:	d820      	bhi.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e4:	d012      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ea:	d81a      	bhi.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d022      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6f4:	d115      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	4618      	mov	r0, r3
 800b700:	f002 f878 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b704:	4603      	mov	r3, r0
 800b706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b70a:	e015      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b710:	3328      	adds	r3, #40	; 0x28
 800b712:	2101      	movs	r1, #1
 800b714:	4618      	mov	r0, r3
 800b716:	f002 f91f 	bl	800d958 <RCCEx_PLL3_Config>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b720:	e00a      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b728:	e006      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72a:	bf00      	nop
 800b72c:	e004      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72e:	bf00      	nop
 800b730:	e002      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b732:	bf00      	nop
 800b734:	e000      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b736:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10b      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b740:	4ba3      	ldr	r3, [pc, #652]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b750:	4a9f      	ldr	r2, [pc, #636]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b752:	430b      	orrs	r3, r1
 800b754:	6593      	str	r3, [r2, #88]	; 0x58
 800b756:	e003      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b75c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b76c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b770:	2300      	movs	r3, #0
 800b772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b77a:	460b      	mov	r3, r1
 800b77c:	4313      	orrs	r3, r2
 800b77e:	d037      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b78a:	d00e      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b790:	d816      	bhi.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d018      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b79a:	d111      	bne.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79c:	4b8c      	ldr	r3, [pc, #560]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	4a8b      	ldr	r2, [pc, #556]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00f      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 f81e 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7be:	e004      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7c6:	e000      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7d2:	4b7f      	ldr	r3, [pc, #508]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e0:	4a7b      	ldr	r2, [pc, #492]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e6:	e003      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b800:	2300      	movs	r3, #0
 800b802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b806:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4313      	orrs	r3, r2
 800b80e:	d039      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b816:	2b03      	cmp	r3, #3
 800b818:	d81c      	bhi.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b81a:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b85d 	.word	0x0800b85d
 800b824:	0800b831 	.word	0x0800b831
 800b828:	0800b83f 	.word	0x0800b83f
 800b82c:	0800b85d 	.word	0x0800b85d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b830:	4b67      	ldr	r3, [pc, #412]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	4a66      	ldr	r2, [pc, #408]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b83a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b83c:	e00f      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b842:	3308      	adds	r3, #8
 800b844:	2102      	movs	r1, #2
 800b846:	4618      	mov	r0, r3
 800b848:	f001 ffd4 	bl	800d7f4 <RCCEx_PLL2_Config>
 800b84c:	4603      	mov	r3, r0
 800b84e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b852:	e004      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b85a:	e000      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b85e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10a      	bne.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b866:	4b5a      	ldr	r3, [pc, #360]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b86a:	f023 0103 	bic.w	r1, r3, #3
 800b86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b874:	4a56      	ldr	r2, [pc, #344]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b876:	430b      	orrs	r3, r1
 800b878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b87a:	e003      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b894:	2300      	movs	r3, #0
 800b896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b89a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	f000 809f 	beq.w	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8a6:	4b4b      	ldr	r3, [pc, #300]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a4a      	ldr	r2, [pc, #296]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8b2:	f7f8 fc09 	bl	80040c8 <HAL_GetTick>
 800b8b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8ba:	e00b      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8bc:	f7f8 fc04 	bl	80040c8 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	2b64      	cmp	r3, #100	; 0x64
 800b8ca:	d903      	bls.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8d2:	e005      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8d4:	4b3f      	ldr	r3, [pc, #252]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d0ed      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d179      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8e8:	4b39      	ldr	r3, [pc, #228]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8f4:	4053      	eors	r3, r2
 800b8f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d015      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8fe:	4b34      	ldr	r3, [pc, #208]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b90a:	4b31      	ldr	r3, [pc, #196]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90e:	4a30      	ldr	r2, [pc, #192]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b914:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b916:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91a:	4a2d      	ldr	r2, [pc, #180]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b920:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b922:	4a2b      	ldr	r2, [pc, #172]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b924:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b928:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b936:	d118      	bne.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7f8 fbc6 	bl	80040c8 <HAL_GetTick>
 800b93c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b940:	e00d      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b942:	f7f8 fbc1 	bl	80040c8 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b94c:	1ad2      	subs	r2, r2, r3
 800b94e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b952:	429a      	cmp	r2, r3
 800b954:	d903      	bls.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b95c:	e005      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b95e:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b962:	f003 0302 	and.w	r3, r3, #2
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0eb      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b96a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d129      	bne.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b97e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b982:	d10e      	bne.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b984:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b994:	091a      	lsrs	r2, r3, #4
 800b996:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b998:	4013      	ands	r3, r2
 800b99a:	4a0d      	ldr	r2, [pc, #52]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b99c:	430b      	orrs	r3, r1
 800b99e:	6113      	str	r3, [r2, #16]
 800b9a0:	e005      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	4a0a      	ldr	r2, [pc, #40]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9ac:	6113      	str	r3, [r2, #16]
 800b9ae:	4b08      	ldr	r3, [pc, #32]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9be:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b9c4:	e00e      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9ce:	e009      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9d0:	58024400 	.word	0x58024400
 800b9d4:	58024800 	.word	0x58024800
 800b9d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f002 0301 	and.w	r3, r2, #1
 800b9f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f000 8089 	beq.w	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba0c:	2b28      	cmp	r3, #40	; 0x28
 800ba0e:	d86b      	bhi.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ba10:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba16:	bf00      	nop
 800ba18:	0800baf1 	.word	0x0800baf1
 800ba1c:	0800bae9 	.word	0x0800bae9
 800ba20:	0800bae9 	.word	0x0800bae9
 800ba24:	0800bae9 	.word	0x0800bae9
 800ba28:	0800bae9 	.word	0x0800bae9
 800ba2c:	0800bae9 	.word	0x0800bae9
 800ba30:	0800bae9 	.word	0x0800bae9
 800ba34:	0800bae9 	.word	0x0800bae9
 800ba38:	0800babd 	.word	0x0800babd
 800ba3c:	0800bae9 	.word	0x0800bae9
 800ba40:	0800bae9 	.word	0x0800bae9
 800ba44:	0800bae9 	.word	0x0800bae9
 800ba48:	0800bae9 	.word	0x0800bae9
 800ba4c:	0800bae9 	.word	0x0800bae9
 800ba50:	0800bae9 	.word	0x0800bae9
 800ba54:	0800bae9 	.word	0x0800bae9
 800ba58:	0800bad3 	.word	0x0800bad3
 800ba5c:	0800bae9 	.word	0x0800bae9
 800ba60:	0800bae9 	.word	0x0800bae9
 800ba64:	0800bae9 	.word	0x0800bae9
 800ba68:	0800bae9 	.word	0x0800bae9
 800ba6c:	0800bae9 	.word	0x0800bae9
 800ba70:	0800bae9 	.word	0x0800bae9
 800ba74:	0800bae9 	.word	0x0800bae9
 800ba78:	0800baf1 	.word	0x0800baf1
 800ba7c:	0800bae9 	.word	0x0800bae9
 800ba80:	0800bae9 	.word	0x0800bae9
 800ba84:	0800bae9 	.word	0x0800bae9
 800ba88:	0800bae9 	.word	0x0800bae9
 800ba8c:	0800bae9 	.word	0x0800bae9
 800ba90:	0800bae9 	.word	0x0800bae9
 800ba94:	0800bae9 	.word	0x0800bae9
 800ba98:	0800baf1 	.word	0x0800baf1
 800ba9c:	0800bae9 	.word	0x0800bae9
 800baa0:	0800bae9 	.word	0x0800bae9
 800baa4:	0800bae9 	.word	0x0800bae9
 800baa8:	0800bae9 	.word	0x0800bae9
 800baac:	0800bae9 	.word	0x0800bae9
 800bab0:	0800bae9 	.word	0x0800bae9
 800bab4:	0800bae9 	.word	0x0800bae9
 800bab8:	0800baf1 	.word	0x0800baf1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800babc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac0:	3308      	adds	r3, #8
 800bac2:	2101      	movs	r1, #1
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 fe95 	bl	800d7f4 <RCCEx_PLL2_Config>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bad0:	e00f      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad6:	3328      	adds	r3, #40	; 0x28
 800bad8:	2101      	movs	r1, #1
 800bada:	4618      	mov	r0, r3
 800badc:	f001 ff3c 	bl	800d958 <RCCEx_PLL3_Config>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bae6:	e004      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baee:	e000      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800baf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bafa:	4bbf      	ldr	r3, [pc, #764]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb08:	4abb      	ldr	r2, [pc, #748]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	6553      	str	r3, [r2, #84]	; 0x54
 800bb0e:	e003      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f002 0302 	and.w	r3, r2, #2
 800bb24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb32:	460b      	mov	r3, r1
 800bb34:	4313      	orrs	r3, r2
 800bb36:	d041      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	d824      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb95 	.word	0x0800bb95
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb77 	.word	0x0800bb77
 800bb54:	0800bb95 	.word	0x0800bb95
 800bb58:	0800bb95 	.word	0x0800bb95
 800bb5c:	0800bb95 	.word	0x0800bb95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb64:	3308      	adds	r3, #8
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 fe43 	bl	800d7f4 <RCCEx_PLL2_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb74:	e00f      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7a:	3328      	adds	r3, #40	; 0x28
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f001 feea 	bl	800d958 <RCCEx_PLL3_Config>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb8a:	e004      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb92:	e000      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb9e:	4b96      	ldr	r3, [pc, #600]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba2:	f023 0107 	bic.w	r1, r3, #7
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbac:	4a92      	ldr	r2, [pc, #584]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	6553      	str	r3, [r2, #84]	; 0x54
 800bbb2:	e003      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f002 0304 	and.w	r3, r2, #4
 800bbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	d044      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbe4:	2b05      	cmp	r3, #5
 800bbe6:	d825      	bhi.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbe8:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc3d 	.word	0x0800bc3d
 800bbf4:	0800bc09 	.word	0x0800bc09
 800bbf8:	0800bc1f 	.word	0x0800bc1f
 800bbfc:	0800bc3d 	.word	0x0800bc3d
 800bc00:	0800bc3d 	.word	0x0800bc3d
 800bc04:	0800bc3d 	.word	0x0800bc3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	2101      	movs	r1, #1
 800bc10:	4618      	mov	r0, r3
 800bc12:	f001 fdef 	bl	800d7f4 <RCCEx_PLL2_Config>
 800bc16:	4603      	mov	r3, r0
 800bc18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc1c:	e00f      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc22:	3328      	adds	r3, #40	; 0x28
 800bc24:	2101      	movs	r1, #1
 800bc26:	4618      	mov	r0, r3
 800bc28:	f001 fe96 	bl	800d958 <RCCEx_PLL3_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc32:	e004      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc3a:	e000      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10b      	bne.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc46:	4b6c      	ldr	r3, [pc, #432]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4a:	f023 0107 	bic.w	r1, r3, #7
 800bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc56:	4a68      	ldr	r2, [pc, #416]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	6593      	str	r3, [r2, #88]	; 0x58
 800bc5c:	e003      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f002 0320 	and.w	r3, r2, #32
 800bc72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc76:	2300      	movs	r3, #0
 800bc78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc80:	460b      	mov	r3, r1
 800bc82:	4313      	orrs	r3, r2
 800bc84:	d055      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc92:	d033      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc98:	d82c      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc9e:	d02f      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca4:	d826      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcaa:	d02b      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bcac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcb0:	d820      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb6:	d012      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bcb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcbc:	d81a      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d022      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bcc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc6:	d115      	bne.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bccc:	3308      	adds	r3, #8
 800bcce:	2100      	movs	r1, #0
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 fd8f 	bl	800d7f4 <RCCEx_PLL2_Config>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcdc:	e015      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce2:	3328      	adds	r3, #40	; 0x28
 800bce4:	2102      	movs	r1, #2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 fe36 	bl	800d958 <RCCEx_PLL3_Config>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcf2:	e00a      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcfa:	e006      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcfc:	bf00      	nop
 800bcfe:	e004      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10b      	bne.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd12:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd22:	4a35      	ldr	r2, [pc, #212]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd24:	430b      	orrs	r3, r1
 800bd26:	6553      	str	r3, [r2, #84]	; 0x54
 800bd28:	e003      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd42:	2300      	movs	r3, #0
 800bd44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	d058      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd5e:	d033      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd64:	d82c      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd6a:	d02f      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd70:	d826      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd76:	d02b      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd7c:	d820      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd82:	d012      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd88:	d81a      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d022      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd92:	d115      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd98:	3308      	adds	r3, #8
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f001 fd29 	bl	800d7f4 <RCCEx_PLL2_Config>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bda8:	e015      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdae:	3328      	adds	r3, #40	; 0x28
 800bdb0:	2102      	movs	r1, #2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fdd0 	bl	800d958 <RCCEx_PLL3_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bdbe:	e00a      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdc6:	e006      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc8:	bf00      	nop
 800bdca:	e004      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdcc:	bf00      	nop
 800bdce:	e002      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdd0:	bf00      	nop
 800bdd2:	e000      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10e      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdee:	4a02      	ldr	r2, [pc, #8]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdf0:	430b      	orrs	r3, r1
 800bdf2:	6593      	str	r3, [r2, #88]	; 0x58
 800bdf4:	e006      	b.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bdf6:	bf00      	nop
 800bdf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800be10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be14:	2300      	movs	r3, #0
 800be16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be1e:	460b      	mov	r3, r1
 800be20:	4313      	orrs	r3, r2
 800be22:	d055      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be30:	d033      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be36:	d82c      	bhi.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be3c:	d02f      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be42:	d826      	bhi.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be48:	d02b      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be4e:	d820      	bhi.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be54:	d012      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be5a:	d81a      	bhi.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d022      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be64:	d115      	bne.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6a:	3308      	adds	r3, #8
 800be6c:	2100      	movs	r1, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 fcc0 	bl	800d7f4 <RCCEx_PLL2_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be7a:	e015      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be80:	3328      	adds	r3, #40	; 0x28
 800be82:	2102      	movs	r1, #2
 800be84:	4618      	mov	r0, r3
 800be86:	f001 fd67 	bl	800d958 <RCCEx_PLL3_Config>
 800be8a:	4603      	mov	r3, r0
 800be8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be90:	e00a      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be98:	e006      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9a:	bf00      	nop
 800be9c:	e004      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9e:	bf00      	nop
 800bea0:	e002      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bea2:	bf00      	nop
 800bea4:	e000      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10b      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800beb0:	4ba1      	ldr	r3, [pc, #644]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800beb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bec0:	4a9d      	ldr	r2, [pc, #628]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bec2:	430b      	orrs	r3, r1
 800bec4:	6593      	str	r3, [r2, #88]	; 0x58
 800bec6:	e003      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800becc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f002 0308 	and.w	r3, r2, #8
 800bedc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bee6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800beea:	460b      	mov	r3, r1
 800beec:	4313      	orrs	r3, r2
 800beee:	d01e      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befc:	d10c      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	3328      	adds	r3, #40	; 0x28
 800bf04:	2102      	movs	r1, #2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 fd26 	bl	800d958 <RCCEx_PLL3_Config>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf18:	4b87      	ldr	r3, [pc, #540]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf28:	4a83      	ldr	r2, [pc, #524]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f002 0310 	and.w	r3, r2, #16
 800bf3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	d01e      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5a:	d10c      	bne.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf60:	3328      	adds	r3, #40	; 0x28
 800bf62:	2102      	movs	r1, #2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f001 fcf7 	bl	800d958 <RCCEx_PLL3_Config>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf76:	4b70      	ldr	r3, [pc, #448]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf86:	4a6c      	ldr	r2, [pc, #432]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfa2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d03e      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb8:	d022      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bfba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfbe:	d81b      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc8:	d00b      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfca:	e015      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 fc0d 	bl	800d7f4 <RCCEx_PLL2_Config>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfe0:	e00f      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	3328      	adds	r3, #40	; 0x28
 800bfe8:	2102      	movs	r1, #2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fcb4 	bl	800d958 <RCCEx_PLL3_Config>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bff6:	e004      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bffe:	e000      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c000:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c00a:	4b4b      	ldr	r3, [pc, #300]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c01a:	4a47      	ldr	r2, [pc, #284]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c01c:	430b      	orrs	r3, r1
 800c01e:	6593      	str	r3, [r2, #88]	; 0x58
 800c020:	e003      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c036:	67bb      	str	r3, [r7, #120]	; 0x78
 800c038:	2300      	movs	r3, #0
 800c03a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c03c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c040:	460b      	mov	r3, r1
 800c042:	4313      	orrs	r3, r2
 800c044:	d03b      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c052:	d01f      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c058:	d818      	bhi.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c05e:	d003      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c064:	d007      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c066:	e011      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c068:	4b33      	ldr	r3, [pc, #204]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	4a32      	ldr	r2, [pc, #200]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c074:	e00f      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07a:	3328      	adds	r3, #40	; 0x28
 800c07c:	2101      	movs	r1, #1
 800c07e:	4618      	mov	r0, r3
 800c080:	f001 fc6a 	bl	800d958 <RCCEx_PLL3_Config>
 800c084:	4603      	mov	r3, r0
 800c086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c08a:	e004      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c092:	e000      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c094:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10b      	bne.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c09e:	4b26      	ldr	r3, [pc, #152]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ae:	4a22      	ldr	r2, [pc, #136]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	6553      	str	r3, [r2, #84]	; 0x54
 800c0b4:	e003      	b.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0ca:	673b      	str	r3, [r7, #112]	; 0x70
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	677b      	str	r3, [r7, #116]	; 0x74
 800c0d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	d034      	beq.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0e8:	d007      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0ea:	e011      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0ec:	4b12      	ldr	r3, [pc, #72]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	4a11      	ldr	r2, [pc, #68]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0f8:	e00e      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0fe:	3308      	adds	r3, #8
 800c100:	2102      	movs	r1, #2
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fb76 	bl	800d7f4 <RCCEx_PLL2_Config>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c10e:	e003      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c116:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10d      	bne.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c120:	4b05      	ldr	r3, [pc, #20]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c12e:	4a02      	ldr	r2, [pc, #8]	; (800c138 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c130:	430b      	orrs	r3, r1
 800c132:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c134:	e006      	b.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c136:	bf00      	nop
 800c138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c13c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c150:	66bb      	str	r3, [r7, #104]	; 0x68
 800c152:	2300      	movs	r3, #0
 800c154:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c156:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c15a:	460b      	mov	r3, r1
 800c15c:	4313      	orrs	r3, r2
 800c15e:	d00c      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c164:	3328      	adds	r3, #40	; 0x28
 800c166:	2102      	movs	r1, #2
 800c168:	4618      	mov	r0, r3
 800c16a:	f001 fbf5 	bl	800d958 <RCCEx_PLL3_Config>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c186:	663b      	str	r3, [r7, #96]	; 0x60
 800c188:	2300      	movs	r3, #0
 800c18a:	667b      	str	r3, [r7, #100]	; 0x64
 800c18c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c190:	460b      	mov	r3, r1
 800c192:	4313      	orrs	r3, r2
 800c194:	d038      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c19e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1a2:	d018      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c1a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1a8:	d811      	bhi.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ae:	d014      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b4:	d80b      	bhi.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1be:	d106      	bne.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1c0:	4bc3      	ldr	r3, [pc, #780]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	4ac2      	ldr	r2, [pc, #776]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1cc:	e008      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1d4:	e004      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1d6:	bf00      	nop
 800c1d8:	e002      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1da:	bf00      	nop
 800c1dc:	e000      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10b      	bne.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1e8:	4bb9      	ldr	r3, [pc, #740]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f8:	4ab5      	ldr	r2, [pc, #724]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1fa:	430b      	orrs	r3, r1
 800c1fc:	6553      	str	r3, [r2, #84]	; 0x54
 800c1fe:	e003      	b.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c214:	65bb      	str	r3, [r7, #88]	; 0x58
 800c216:	2300      	movs	r3, #0
 800c218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c21a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c21e:	460b      	mov	r3, r1
 800c220:	4313      	orrs	r3, r2
 800c222:	d009      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c224:	4baa      	ldr	r3, [pc, #680]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c232:	4aa7      	ldr	r2, [pc, #668]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c234:	430b      	orrs	r3, r1
 800c236:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c244:	653b      	str	r3, [r7, #80]	; 0x50
 800c246:	2300      	movs	r3, #0
 800c248:	657b      	str	r3, [r7, #84]	; 0x54
 800c24a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c24e:	460b      	mov	r3, r1
 800c250:	4313      	orrs	r3, r2
 800c252:	d00a      	beq.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c254:	4b9e      	ldr	r3, [pc, #632]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c260:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c264:	4a9a      	ldr	r2, [pc, #616]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c266:	430b      	orrs	r3, r1
 800c268:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c276:	64bb      	str	r3, [r7, #72]	; 0x48
 800c278:	2300      	movs	r3, #0
 800c27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c27c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c280:	460b      	mov	r3, r1
 800c282:	4313      	orrs	r3, r2
 800c284:	d009      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c286:	4b92      	ldr	r3, [pc, #584]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c294:	4a8e      	ldr	r2, [pc, #568]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c296:	430b      	orrs	r3, r1
 800c298:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	d00e      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2b6:	4b86      	ldr	r3, [pc, #536]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	4a85      	ldr	r2, [pc, #532]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2c0:	6113      	str	r3, [r2, #16]
 800c2c2:	4b83      	ldr	r3, [pc, #524]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2c4:	6919      	ldr	r1, [r3, #16]
 800c2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2ce:	4a80      	ldr	r2, [pc, #512]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2d0:	430b      	orrs	r3, r1
 800c2d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	d009      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2f0:	4b77      	ldr	r3, [pc, #476]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fe:	4a74      	ldr	r2, [pc, #464]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c300:	430b      	orrs	r3, r1
 800c302:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c310:	633b      	str	r3, [r7, #48]	; 0x30
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
 800c316:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c31a:	460b      	mov	r3, r1
 800c31c:	4313      	orrs	r3, r2
 800c31e:	d00a      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c320:	4b6b      	ldr	r3, [pc, #428]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c324:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c330:	4a67      	ldr	r2, [pc, #412]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	2100      	movs	r1, #0
 800c340:	62b9      	str	r1, [r7, #40]	; 0x28
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c348:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c34c:	460b      	mov	r3, r1
 800c34e:	4313      	orrs	r3, r2
 800c350:	d011      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c356:	3308      	adds	r3, #8
 800c358:	2100      	movs	r1, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f001 fa4a 	bl	800d7f4 <RCCEx_PLL2_Config>
 800c360:	4603      	mov	r3, r0
 800c362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	2100      	movs	r1, #0
 800c380:	6239      	str	r1, [r7, #32]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	627b      	str	r3, [r7, #36]	; 0x24
 800c388:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c38c:	460b      	mov	r3, r1
 800c38e:	4313      	orrs	r3, r2
 800c390:	d011      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c396:	3308      	adds	r3, #8
 800c398:	2101      	movs	r1, #1
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 fa2a 	bl	800d7f4 <RCCEx_PLL2_Config>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d003      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	2100      	movs	r1, #0
 800c3c0:	61b9      	str	r1, [r7, #24]
 800c3c2:	f003 0304 	and.w	r3, r3, #4
 800c3c6:	61fb      	str	r3, [r7, #28]
 800c3c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	d011      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	2102      	movs	r1, #2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f001 fa0a 	bl	800d7f4 <RCCEx_PLL2_Config>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	2100      	movs	r1, #0
 800c400:	6139      	str	r1, [r7, #16]
 800c402:	f003 0308 	and.w	r3, r3, #8
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c40c:	460b      	mov	r3, r1
 800c40e:	4313      	orrs	r3, r2
 800c410:	d011      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c416:	3328      	adds	r3, #40	; 0x28
 800c418:	2100      	movs	r1, #0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f001 fa9c 	bl	800d958 <RCCEx_PLL3_Config>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	2100      	movs	r1, #0
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	f003 0310 	and.w	r3, r3, #16
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c44c:	460b      	mov	r3, r1
 800c44e:	4313      	orrs	r3, r2
 800c450:	d011      	beq.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c456:	3328      	adds	r3, #40	; 0x28
 800c458:	2101      	movs	r1, #1
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fa7c 	bl	800d958 <RCCEx_PLL3_Config>
 800c460:	4603      	mov	r3, r0
 800c462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c46e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	2100      	movs	r1, #0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	607b      	str	r3, [r7, #4]
 800c488:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c48c:	460b      	mov	r3, r1
 800c48e:	4313      	orrs	r3, r2
 800c490:	d011      	beq.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c496:	3328      	adds	r3, #40	; 0x28
 800c498:	2102      	movs	r1, #2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 fa5c 	bl	800d958 <RCCEx_PLL3_Config>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c4b6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e000      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d0:	58024400 	.word	0x58024400

0800c4d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b090      	sub	sp, #64	; 0x40
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	f040 8094 	bne.w	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4ec:	4b9e      	ldr	r3, [pc, #632]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f0:	f003 0307 	and.w	r3, r3, #7
 800c4f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	f200 8087 	bhi.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4fe:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c504:	0800c519 	.word	0x0800c519
 800c508:	0800c541 	.word	0x0800c541
 800c50c:	0800c569 	.word	0x0800c569
 800c510:	0800c605 	.word	0x0800c605
 800c514:	0800c591 	.word	0x0800c591
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c518:	4b93      	ldr	r3, [pc, #588]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c524:	d108      	bne.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f001 f810 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c534:	f000 bd45 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c538:	2300      	movs	r3, #0
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53c:	f000 bd41 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c540:	4b89      	ldr	r3, [pc, #548]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c54c:	d108      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54e:	f107 0318 	add.w	r3, r7, #24
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fd54 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55c:	f000 bd31 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c564:	f000 bd2d 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c568:	4b7f      	ldr	r3, [pc, #508]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c574:	d108      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c576:	f107 030c 	add.w	r3, r7, #12
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 fe94 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c584:	f000 bd1d 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58c:	f000 bd19 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c590:	4b75      	ldr	r3, [pc, #468]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c598:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c59a:	4b73      	ldr	r3, [pc, #460]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0304 	and.w	r3, r3, #4
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d10c      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d109      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ac:	4b6e      	ldr	r3, [pc, #440]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	08db      	lsrs	r3, r3, #3
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	4a6d      	ldr	r2, [pc, #436]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5be:	e01f      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5c0:	4b69      	ldr	r3, [pc, #420]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5cc:	d106      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5d4:	d102      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5d6:	4b66      	ldr	r3, [pc, #408]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5da:	e011      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5dc:	4b62      	ldr	r3, [pc, #392]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e8:	d106      	bne.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f0:	d102      	bne.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5f2:	4b60      	ldr	r3, [pc, #384]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f6:	e003      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5fc:	f000 bce1 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c600:	f000 bcdf 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c604:	4b5c      	ldr	r3, [pc, #368]	; (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	f000 bcdb 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	f000 bcd7 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c618:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c61c:	430b      	orrs	r3, r1
 800c61e:	f040 80ad 	bne.w	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c622:	4b51      	ldr	r3, [pc, #324]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c626:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c632:	d056      	beq.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c63a:	f200 8090 	bhi.w	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	2bc0      	cmp	r3, #192	; 0xc0
 800c642:	f000 8088 	beq.w	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2bc0      	cmp	r3, #192	; 0xc0
 800c64a:	f200 8088 	bhi.w	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b80      	cmp	r3, #128	; 0x80
 800c652:	d032      	beq.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	2b80      	cmp	r3, #128	; 0x80
 800c658:	f200 8081 	bhi.w	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2b40      	cmp	r3, #64	; 0x40
 800c666:	d014      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c668:	e079      	b.n	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c66a:	4b3f      	ldr	r3, [pc, #252]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c676:	d108      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 ff67 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c686:	f000 bc9c 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68e:	f000 bc98 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c692:	4b35      	ldr	r3, [pc, #212]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c69e:	d108      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a0:	f107 0318 	add.w	r3, r7, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fcab 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ae:	f000 bc88 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b6:	f000 bc84 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6ba:	4b2b      	ldr	r3, [pc, #172]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c6:	d108      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fdeb 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d6:	f000 bc74 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6de:	f000 bc70 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6e2:	4b21      	ldr	r3, [pc, #132]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6ec:	4b1e      	ldr	r3, [pc, #120]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 0304 	and.w	r3, r3, #4
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d10c      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6fe:	4b1a      	ldr	r3, [pc, #104]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	08db      	lsrs	r3, r3, #3
 800c704:	f003 0303 	and.w	r3, r3, #3
 800c708:	4a18      	ldr	r2, [pc, #96]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c70a:	fa22 f303 	lsr.w	r3, r2, r3
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e01f      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71e:	d106      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c726:	d102      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c728:	4b11      	ldr	r3, [pc, #68]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e011      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c72e:	4b0e      	ldr	r3, [pc, #56]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c73a:	d106      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c742:	d102      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c744:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c748:	e003      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c74e:	f000 bc38 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c752:	f000 bc36 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c756:	4b08      	ldr	r3, [pc, #32]	; (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	f000 bc32 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c762:	f000 bc2e 	b.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c766:	bf00      	nop
 800c768:	58024400 	.word	0x58024400
 800c76c:	03d09000 	.word	0x03d09000
 800c770:	003d0900 	.word	0x003d0900
 800c774:	017d7840 	.word	0x017d7840
 800c778:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c77c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c780:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c784:	430b      	orrs	r3, r1
 800c786:	f040 809c 	bne.w	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c78a:	4b9e      	ldr	r3, [pc, #632]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c792:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c79a:	d054      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7a2:	f200 808b 	bhi.w	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7ac:	f000 8083 	beq.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7b6:	f200 8081 	bhi.w	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c0:	d02f      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c8:	d878      	bhi.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7d6:	d012      	beq.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7d8:	e070      	b.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7da:	4b8a      	ldr	r3, [pc, #552]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7e6:	d107      	bne.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 feaf 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f6:	e3e4      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fc:	e3e1      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7fe:	4b81      	ldr	r3, [pc, #516]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c80a:	d107      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80c:	f107 0318 	add.w	r3, r7, #24
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fbf5 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81a:	e3d2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e3cf      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c822:	4b78      	ldr	r3, [pc, #480]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c82a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c82e:	d107      	bne.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c830:	f107 030c 	add.w	r3, r7, #12
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fd37 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83e:	e3c0      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c844:	e3bd      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c846:	4b6f      	ldr	r3, [pc, #444]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c850:	4b6c      	ldr	r3, [pc, #432]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d10c      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d109      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c862:	4b68      	ldr	r3, [pc, #416]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	08db      	lsrs	r3, r3, #3
 800c868:	f003 0303 	and.w	r3, r3, #3
 800c86c:	4a66      	ldr	r2, [pc, #408]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c86e:	fa22 f303 	lsr.w	r3, r2, r3
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c874:	e01e      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c876:	4b63      	ldr	r3, [pc, #396]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c882:	d106      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c88a:	d102      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c88c:	4b5f      	ldr	r3, [pc, #380]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	e010      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c892:	4b5c      	ldr	r3, [pc, #368]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c89a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c89e:	d106      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a6:	d102      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a8:	4b59      	ldr	r3, [pc, #356]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ac:	e002      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8b2:	e386      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8b4:	e385      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b6:	4b57      	ldr	r3, [pc, #348]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ba:	e382      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	e37f      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	f040 80a7 	bne.w	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8d0:	4b4c      	ldr	r3, [pc, #304]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8e0:	d055      	beq.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8e8:	f200 8096 	bhi.w	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8f2:	f000 8084 	beq.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8fc:	f200 808c 	bhi.w	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c906:	d030      	beq.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c90e:	f200 8083 	bhi.w	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	2b00      	cmp	r3, #0
 800c916:	d004      	beq.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c91e:	d012      	beq.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c920:	e07a      	b.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c922:	4b38      	ldr	r3, [pc, #224]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c92a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c92e:	d107      	bne.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c934:	4618      	mov	r0, r3
 800c936:	f000 fe0b 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c93e:	e340      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c944:	e33d      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c946:	4b2f      	ldr	r3, [pc, #188]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c94e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c952:	d107      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c954:	f107 0318 	add.w	r3, r7, #24
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 fb51 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c962:	e32e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	e32b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c96a:	4b26      	ldr	r3, [pc, #152]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c976:	d107      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c978:	f107 030c 	add.w	r3, r7, #12
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 fc93 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c986:	e31c      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c98c:	e319      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c98e:	4b1d      	ldr	r3, [pc, #116]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c992:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c996:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c998:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d10c      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d109      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9aa:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	08db      	lsrs	r3, r3, #3
 800c9b0:	f003 0303 	and.w	r3, r3, #3
 800c9b4:	4a14      	ldr	r2, [pc, #80]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9bc:	e01e      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9be:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ca:	d106      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9d2:	d102      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d8:	e010      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9da:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e6:	d106      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ee:	d102      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f4:	e002      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9fa:	e2e2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9fc:	e2e1      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9fe:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca02:	e2de      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca04:	58024400 	.word	0x58024400
 800ca08:	03d09000 	.word	0x03d09000
 800ca0c:	003d0900 	.word	0x003d0900
 800ca10:	017d7840 	.word	0x017d7840
 800ca14:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca1c:	e2d1      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca22:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca26:	430b      	orrs	r3, r1
 800ca28:	f040 809c 	bne.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca2c:	4b93      	ldr	r3, [pc, #588]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca30:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca3c:	d054      	beq.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca44:	f200 808b 	bhi.w	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca4e:	f000 8083 	beq.w	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca58:	f200 8081 	bhi.w	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca62:	d02f      	beq.n	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca6a:	d878      	bhi.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d004      	beq.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca78:	d012      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca7a:	e070      	b.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca7c:	4b7f      	ldr	r3, [pc, #508]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca88:	d107      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fd5e 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca98:	e293      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9e:	e290      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caa0:	4b76      	ldr	r3, [pc, #472]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caac:	d107      	bne.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caae:	f107 0318 	add.w	r3, r7, #24
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 faa4 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cabc:	e281      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac2:	e27e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cac4:	4b6d      	ldr	r3, [pc, #436]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad0:	d107      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad2:	f107 030c 	add.w	r3, r7, #12
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 fbe6 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cae0:	e26f      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae6:	e26c      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae8:	4b64      	ldr	r3, [pc, #400]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caf0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caf2:	4b62      	ldr	r3, [pc, #392]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0304 	and.w	r3, r3, #4
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	d10c      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb04:	4b5d      	ldr	r3, [pc, #372]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	08db      	lsrs	r3, r3, #3
 800cb0a:	f003 0303 	and.w	r3, r3, #3
 800cb0e:	4a5c      	ldr	r2, [pc, #368]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb10:	fa22 f303 	lsr.w	r3, r2, r3
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb16:	e01e      	b.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb18:	4b58      	ldr	r3, [pc, #352]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb24:	d106      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb2c:	d102      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb2e:	4b55      	ldr	r3, [pc, #340]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb32:	e010      	b.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb34:	4b51      	ldr	r3, [pc, #324]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb40:	d106      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb48:	d102      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb4a:	4b4f      	ldr	r3, [pc, #316]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4e:	e002      	b.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb54:	e235      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb56:	e234      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb58:	4b4c      	ldr	r3, [pc, #304]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5c:	e231      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb62:	e22e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb68:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	f040 808f 	bne.w	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb72:	4b42      	ldr	r3, [pc, #264]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb76:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb7a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb82:	d06b      	beq.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb8a:	d874      	bhi.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb92:	d056      	beq.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb9a:	d86c      	bhi.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cba2:	d03b      	beq.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbaa:	d864      	bhi.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbb2:	d021      	beq.n	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbba:	d85c      	bhi.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d004      	beq.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbca:	e054      	b.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbcc:	f7fe fa0a 	bl	800afe4 <HAL_RCC_GetPCLK1Freq>
 800cbd0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbd2:	e1f6      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbd4:	4b29      	ldr	r3, [pc, #164]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbe0:	d107      	bne.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe2:	f107 0318 	add.w	r3, r7, #24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 fa0a 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf0:	e1e7      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf6:	e1e4      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbf8:	4b20      	ldr	r3, [pc, #128]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc04:	d107      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc06:	f107 030c 	add.w	r3, r7, #12
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 fb4c 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc14:	e1d5      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1a:	e1d2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc1c:	4b17      	ldr	r3, [pc, #92]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b04      	cmp	r3, #4
 800cc26:	d109      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc28:	4b14      	ldr	r3, [pc, #80]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	08db      	lsrs	r3, r3, #3
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	4a13      	ldr	r2, [pc, #76]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc34:	fa22 f303 	lsr.w	r3, r2, r3
 800cc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc3a:	e1c2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc40:	e1bf      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc42:	4b0e      	ldr	r3, [pc, #56]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc4e:	d102      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc50:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc54:	e1b5      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5a:	e1b2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc5c:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc68:	d102      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc6a:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6e:	e1a8      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc74:	e1a5      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc7a:	e1a2      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc7c:	58024400 	.word	0x58024400
 800cc80:	03d09000 	.word	0x03d09000
 800cc84:	003d0900 	.word	0x003d0900
 800cc88:	017d7840 	.word	0x017d7840
 800cc8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc94:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	d173      	bne.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc9c:	4b9c      	ldr	r3, [pc, #624]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cca4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccac:	d02f      	beq.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccb4:	d863      	bhi.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d004      	beq.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc2:	d012      	beq.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ccc4:	e05b      	b.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccc6:	4b92      	ldr	r3, [pc, #584]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccd2:	d107      	bne.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccd4:	f107 0318 	add.w	r3, r7, #24
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f991 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce2:	e16e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce8:	e16b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccea:	4b89      	ldr	r3, [pc, #548]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccf6:	d107      	bne.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccf8:	f107 030c 	add.w	r3, r7, #12
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fad3 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd06:	e15c      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0c:	e159      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd0e:	4b80      	ldr	r3, [pc, #512]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd18:	4b7d      	ldr	r3, [pc, #500]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d10c      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d109      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd2a:	4b79      	ldr	r3, [pc, #484]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	08db      	lsrs	r3, r3, #3
 800cd30:	f003 0303 	and.w	r3, r3, #3
 800cd34:	4a77      	ldr	r2, [pc, #476]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd36:	fa22 f303 	lsr.w	r3, r2, r3
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd3c:	e01e      	b.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd3e:	4b74      	ldr	r3, [pc, #464]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd4a:	d106      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd52:	d102      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd54:	4b70      	ldr	r3, [pc, #448]	; (800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd58:	e010      	b.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd5a:	4b6d      	ldr	r3, [pc, #436]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd66:	d106      	bne.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6e:	d102      	bne.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd70:	4b6a      	ldr	r3, [pc, #424]	; (800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd74:	e002      	b.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd7a:	e122      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd7c:	e121      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd82:	e11e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd88:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd8c:	430b      	orrs	r3, r1
 800cd8e:	d133      	bne.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd90:	4b5f      	ldr	r3, [pc, #380]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda6:	d012      	beq.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cda8:	e023      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdaa:	4b59      	ldr	r3, [pc, #356]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdb6:	d107      	bne.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fbc7 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc6:	e0fc      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e0f9      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdce:	4b50      	ldr	r3, [pc, #320]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdda:	d107      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cddc:	f107 0318 	add.w	r3, r7, #24
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 f90d 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdea:	e0ea      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf0:	e0e7      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf6:	e0e4      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdfc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ce00:	430b      	orrs	r3, r1
 800ce02:	f040 808d 	bne.w	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce06:	4b42      	ldr	r3, [pc, #264]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce0a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ce0e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce16:	d06b      	beq.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce1e:	d874      	bhi.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce26:	d056      	beq.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce2e:	d86c      	bhi.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce36:	d03b      	beq.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce3e:	d864      	bhi.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce46:	d021      	beq.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce4e:	d85c      	bhi.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d004      	beq.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce5c:	d004      	beq.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce5e:	e054      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce60:	f000 f8b8 	bl	800cfd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce66:	e0ac      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce68:	4b29      	ldr	r3, [pc, #164]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce74:	d107      	bne.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce76:	f107 0318 	add.w	r3, r7, #24
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f8c0 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce84:	e09d      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce8a:	e09a      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce8c:	4b20      	ldr	r3, [pc, #128]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce98:	d107      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce9a:	f107 030c 	add.w	r3, r7, #12
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 fa02 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea8:	e08b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceae:	e088      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ceb0:	4b17      	ldr	r3, [pc, #92]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0304 	and.w	r3, r3, #4
 800ceb8:	2b04      	cmp	r3, #4
 800ceba:	d109      	bne.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cebc:	4b14      	ldr	r3, [pc, #80]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	08db      	lsrs	r3, r3, #3
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	4a13      	ldr	r2, [pc, #76]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cec8:	fa22 f303 	lsr.w	r3, r2, r3
 800cecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cece:	e078      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced4:	e075      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ced6:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee2:	d102      	bne.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cee4:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee8:	e06b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceee:	e068      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cef0:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cefc:	d102      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cefe:	4b07      	ldr	r3, [pc, #28]	; (800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf02:	e05e      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf08:	e05b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0e:	e058      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf10:	58024400 	.word	0x58024400
 800cf14:	03d09000 	.word	0x03d09000
 800cf18:	003d0900 	.word	0x003d0900
 800cf1c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf24:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf28:	430b      	orrs	r3, r1
 800cf2a:	d148      	bne.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf2c:	4b27      	ldr	r3, [pc, #156]	; (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf3c:	d02a      	beq.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf44:	d838      	bhi.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d004      	beq.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf52:	d00d      	beq.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf54:	e030      	b.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf56:	4b1d      	ldr	r3, [pc, #116]	; (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf62:	d102      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf64:	4b1a      	ldr	r3, [pc, #104]	; (800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf68:	e02b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf6e:	e028      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf70:	4b16      	ldr	r3, [pc, #88]	; (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf7c:	d107      	bne.n	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fae4 	bl	800d550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf8c:	e019      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf92:	e016      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf94:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfa0:	d107      	bne.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa2:	f107 0318 	add.w	r3, r7, #24
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f82a 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb0:	e007      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb6:	e004      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfbc:	e001      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3740      	adds	r7, #64	; 0x40
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	58024400 	.word	0x58024400
 800cfd0:	017d7840 	.word	0x017d7840

0800cfd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfd8:	f7fd ffd4 	bl	800af84 <HAL_RCC_GetHCLKFreq>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfe0:	6a1b      	ldr	r3, [r3, #32]
 800cfe2:	091b      	lsrs	r3, r3, #4
 800cfe4:	f003 0307 	and.w	r3, r3, #7
 800cfe8:	4904      	ldr	r1, [pc, #16]	; (800cffc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfea:	5ccb      	ldrb	r3, [r1, r3]
 800cfec:	f003 031f 	and.w	r3, r3, #31
 800cff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	58024400 	.word	0x58024400
 800cffc:	08017a04 	.word	0x08017a04

0800d000 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d000:	b480      	push	{r7}
 800d002:	b089      	sub	sp, #36	; 0x24
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d008:	4ba1      	ldr	r3, [pc, #644]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00c:	f003 0303 	and.w	r3, r3, #3
 800d010:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d012:	4b9f      	ldr	r3, [pc, #636]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d016:	0b1b      	lsrs	r3, r3, #12
 800d018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d01c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d01e:	4b9c      	ldr	r3, [pc, #624]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	091b      	lsrs	r3, r3, #4
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d02a:	4b99      	ldr	r3, [pc, #612]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02e:	08db      	lsrs	r3, r3, #3
 800d030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 8111 	beq.w	800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b02      	cmp	r3, #2
 800d052:	f000 8083 	beq.w	800d15c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	f200 80a1 	bhi.w	800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d056      	beq.n	800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d06a:	e099      	b.n	800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d06c:	4b88      	ldr	r3, [pc, #544]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 0320 	and.w	r3, r3, #32
 800d074:	2b00      	cmp	r3, #0
 800d076:	d02d      	beq.n	800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d078:	4b85      	ldr	r3, [pc, #532]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	08db      	lsrs	r3, r3, #3
 800d07e:	f003 0303 	and.w	r3, r3, #3
 800d082:	4a84      	ldr	r2, [pc, #528]	; (800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d084:	fa22 f303 	lsr.w	r3, r2, r3
 800d088:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	ee07 3a90 	vmov	s15, r3
 800d090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a2:	4b7b      	ldr	r3, [pc, #492]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0aa:	ee07 3a90 	vmov	s15, r3
 800d0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0d2:	e087      	b.n	800d1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d29c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0e6:	4b6a      	ldr	r3, [pc, #424]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d116:	e065      	b.n	800d1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d12a:	4b59      	ldr	r3, [pc, #356]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d132:	ee07 3a90 	vmov	s15, r3
 800d136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d13a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d13e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d14a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d15a:	e043      	b.n	800d1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	ee07 3a90 	vmov	s15, r3
 800d162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d16e:	4b48      	ldr	r3, [pc, #288]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d182:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d18e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d19e:	e021      	b.n	800d1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1b2:	4b37      	ldr	r3, [pc, #220]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1e4:	4b2a      	ldr	r3, [pc, #168]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e8:	0a5b      	lsrs	r3, r3, #9
 800d1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20a:	ee17 2a90 	vmov	r2, s15
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d212:	4b1f      	ldr	r3, [pc, #124]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d216:	0c1b      	lsrs	r3, r3, #16
 800d218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21c:	ee07 3a90 	vmov	s15, r3
 800d220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d238:	ee17 2a90 	vmov	r2, s15
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d244:	0e1b      	lsrs	r3, r3, #24
 800d246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d266:	ee17 2a90 	vmov	r2, s15
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d26e:	e008      	b.n	800d282 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	609a      	str	r2, [r3, #8]
}
 800d282:	bf00      	nop
 800d284:	3724      	adds	r7, #36	; 0x24
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	58024400 	.word	0x58024400
 800d294:	03d09000 	.word	0x03d09000
 800d298:	46000000 	.word	0x46000000
 800d29c:	4c742400 	.word	0x4c742400
 800d2a0:	4a742400 	.word	0x4a742400
 800d2a4:	4bbebc20 	.word	0x4bbebc20

0800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b089      	sub	sp, #36	; 0x24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2b0:	4ba1      	ldr	r3, [pc, #644]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d2ba:	4b9f      	ldr	r3, [pc, #636]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2be:	0d1b      	lsrs	r3, r3, #20
 800d2c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2c6:	4b9c      	ldr	r3, [pc, #624]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	0a1b      	lsrs	r3, r3, #8
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2d2:	4b99      	ldr	r3, [pc, #612]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d6:	08db      	lsrs	r3, r3, #3
 800d2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	fb02 f303 	mul.w	r3, r2, r3
 800d2e2:	ee07 3a90 	vmov	s15, r3
 800d2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 8111 	beq.w	800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	f000 8083 	beq.w	800d404 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	2b02      	cmp	r3, #2
 800d302:	f200 80a1 	bhi.w	800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d056      	beq.n	800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d312:	e099      	b.n	800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d314:	4b88      	ldr	r3, [pc, #544]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 0320 	and.w	r3, r3, #32
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d02d      	beq.n	800d37c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d320:	4b85      	ldr	r3, [pc, #532]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	08db      	lsrs	r3, r3, #3
 800d326:	f003 0303 	and.w	r3, r3, #3
 800d32a:	4a84      	ldr	r2, [pc, #528]	; (800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d32c:	fa22 f303 	lsr.w	r3, r2, r3
 800d330:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	ee07 3a90 	vmov	s15, r3
 800d338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d34a:	4b7b      	ldr	r3, [pc, #492]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d376:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d37a:	e087      	b.n	800d48c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	ee07 3a90 	vmov	s15, r3
 800d382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d386:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d544 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d38e:	4b6a      	ldr	r3, [pc, #424]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d39e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3be:	e065      	b.n	800d48c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	ee07 3a90 	vmov	s15, r3
 800d3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3d2:	4b59      	ldr	r3, [pc, #356]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3da:	ee07 3a90 	vmov	s15, r3
 800d3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d402:	e043      	b.n	800d48c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	ee07 3a90 	vmov	s15, r3
 800d40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d416:	4b48      	ldr	r3, [pc, #288]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41e:	ee07 3a90 	vmov	s15, r3
 800d422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d426:	ed97 6a03 	vldr	s12, [r7, #12]
 800d42a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d446:	e021      	b.n	800d48c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	ee07 3a90 	vmov	s15, r3
 800d44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d452:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d45a:	4b37      	ldr	r3, [pc, #220]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d462:	ee07 3a90 	vmov	s15, r3
 800d466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d46a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d46e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d47a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d48a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d48c:	4b2a      	ldr	r3, [pc, #168]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d490:	0a5b      	lsrs	r3, r3, #9
 800d492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b2:	ee17 2a90 	vmov	r2, s15
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d4ba:	4b1f      	ldr	r3, [pc, #124]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c4:	ee07 3a90 	vmov	s15, r3
 800d4c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4e0:	ee17 2a90 	vmov	r2, s15
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4e8:	4b13      	ldr	r3, [pc, #76]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	0e1b      	lsrs	r3, r3, #24
 800d4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d502:	edd7 6a07 	vldr	s13, [r7, #28]
 800d506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50e:	ee17 2a90 	vmov	r2, s15
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d516:	e008      	b.n	800d52a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	609a      	str	r2, [r3, #8]
}
 800d52a:	bf00      	nop
 800d52c:	3724      	adds	r7, #36	; 0x24
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	58024400 	.word	0x58024400
 800d53c:	03d09000 	.word	0x03d09000
 800d540:	46000000 	.word	0x46000000
 800d544:	4c742400 	.word	0x4c742400
 800d548:	4a742400 	.word	0x4a742400
 800d54c:	4bbebc20 	.word	0x4bbebc20

0800d550 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d550:	b480      	push	{r7}
 800d552:	b089      	sub	sp, #36	; 0x24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d558:	4ba0      	ldr	r3, [pc, #640]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55c:	f003 0303 	and.w	r3, r3, #3
 800d560:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d562:	4b9e      	ldr	r3, [pc, #632]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d566:	091b      	lsrs	r3, r3, #4
 800d568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d56c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d56e:	4b9b      	ldr	r3, [pc, #620]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d578:	4b98      	ldr	r3, [pc, #608]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57c:	08db      	lsrs	r3, r3, #3
 800d57e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	fb02 f303 	mul.w	r3, r2, r3
 800d588:	ee07 3a90 	vmov	s15, r3
 800d58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d590:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 8111 	beq.w	800d7be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	f000 8083 	beq.w	800d6aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	f200 80a1 	bhi.w	800d6ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d056      	beq.n	800d666 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d5b8:	e099      	b.n	800d6ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5ba:	4b88      	ldr	r3, [pc, #544]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 0320 	and.w	r3, r3, #32
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d02d      	beq.n	800d622 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5c6:	4b85      	ldr	r3, [pc, #532]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	08db      	lsrs	r3, r3, #3
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	4a83      	ldr	r2, [pc, #524]	; (800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	ee07 3a90 	vmov	s15, r3
 800d5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	ee07 3a90 	vmov	s15, r3
 800d5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f0:	4b7a      	ldr	r3, [pc, #488]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d600:	ed97 6a03 	vldr	s12, [r7, #12]
 800d604:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d620:	e087      	b.n	800d732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	ee07 3a90 	vmov	s15, r3
 800d628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d634:	4b69      	ldr	r3, [pc, #420]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63c:	ee07 3a90 	vmov	s15, r3
 800d640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d644:	ed97 6a03 	vldr	s12, [r7, #12]
 800d648:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d64c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d660:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d664:	e065      	b.n	800d732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	ee07 3a90 	vmov	s15, r3
 800d66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d670:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d678:	4b58      	ldr	r3, [pc, #352]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d680:	ee07 3a90 	vmov	s15, r3
 800d684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d688:	ed97 6a03 	vldr	s12, [r7, #12]
 800d68c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d69c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6a8:	e043      	b.n	800d732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	ee07 3a90 	vmov	s15, r3
 800d6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6bc:	4b47      	ldr	r3, [pc, #284]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c4:	ee07 3a90 	vmov	s15, r3
 800d6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6ec:	e021      	b.n	800d732 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	ee07 3a90 	vmov	s15, r3
 800d6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d700:	4b36      	ldr	r3, [pc, #216]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d708:	ee07 3a90 	vmov	s15, r3
 800d70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d710:	ed97 6a03 	vldr	s12, [r7, #12]
 800d714:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d730:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d732:	4b2a      	ldr	r3, [pc, #168]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d736:	0a5b      	lsrs	r3, r3, #9
 800d738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73c:	ee07 3a90 	vmov	s15, r3
 800d740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d758:	ee17 2a90 	vmov	r2, s15
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d760:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d764:	0c1b      	lsrs	r3, r3, #16
 800d766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d76a:	ee07 3a90 	vmov	s15, r3
 800d76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d786:	ee17 2a90 	vmov	r2, s15
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	0e1b      	lsrs	r3, r3, #24
 800d794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d798:	ee07 3a90 	vmov	s15, r3
 800d79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7b4:	ee17 2a90 	vmov	r2, s15
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7bc:	e008      	b.n	800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	609a      	str	r2, [r3, #8]
}
 800d7d0:	bf00      	nop
 800d7d2:	3724      	adds	r7, #36	; 0x24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	58024400 	.word	0x58024400
 800d7e0:	03d09000 	.word	0x03d09000
 800d7e4:	46000000 	.word	0x46000000
 800d7e8:	4c742400 	.word	0x4c742400
 800d7ec:	4a742400 	.word	0x4a742400
 800d7f0:	4bbebc20 	.word	0x4bbebc20

0800d7f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d802:	4b53      	ldr	r3, [pc, #332]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d806:	f003 0303 	and.w	r3, r3, #3
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d101      	bne.n	800d812 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e099      	b.n	800d946 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d812:	4b4f      	ldr	r3, [pc, #316]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a4e      	ldr	r2, [pc, #312]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d818:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d81c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d81e:	f7f6 fc53 	bl	80040c8 <HAL_GetTick>
 800d822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d824:	e008      	b.n	800d838 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d826:	f7f6 fc4f 	bl	80040c8 <HAL_GetTick>
 800d82a:	4602      	mov	r2, r0
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	2b02      	cmp	r3, #2
 800d832:	d901      	bls.n	800d838 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e086      	b.n	800d946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d838:	4b45      	ldr	r3, [pc, #276]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1f0      	bne.n	800d826 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d844:	4b42      	ldr	r3, [pc, #264]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d848:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	031b      	lsls	r3, r3, #12
 800d852:	493f      	ldr	r1, [pc, #252]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d854:	4313      	orrs	r3, r2
 800d856:	628b      	str	r3, [r1, #40]	; 0x28
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	3b01      	subs	r3, #1
 800d868:	025b      	lsls	r3, r3, #9
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	431a      	orrs	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	3b01      	subs	r3, #1
 800d874:	041b      	lsls	r3, r3, #16
 800d876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d87a:	431a      	orrs	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	3b01      	subs	r3, #1
 800d882:	061b      	lsls	r3, r3, #24
 800d884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d888:	4931      	ldr	r1, [pc, #196]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d88a:	4313      	orrs	r3, r2
 800d88c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d88e:	4b30      	ldr	r3, [pc, #192]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	492d      	ldr	r1, [pc, #180]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d89c:	4313      	orrs	r3, r2
 800d89e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d8a0:	4b2b      	ldr	r3, [pc, #172]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a4:	f023 0220 	bic.w	r2, r3, #32
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	699b      	ldr	r3, [r3, #24]
 800d8ac:	4928      	ldr	r1, [pc, #160]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d8b2:	4b27      	ldr	r3, [pc, #156]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b6:	4a26      	ldr	r2, [pc, #152]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8b8:	f023 0310 	bic.w	r3, r3, #16
 800d8bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8be:	4b24      	ldr	r3, [pc, #144]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8c2:	4b24      	ldr	r3, [pc, #144]	; (800d954 <RCCEx_PLL2_Config+0x160>)
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	69d2      	ldr	r2, [r2, #28]
 800d8ca:	00d2      	lsls	r2, r2, #3
 800d8cc:	4920      	ldr	r1, [pc, #128]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8d2:	4b1f      	ldr	r3, [pc, #124]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d6:	4a1e      	ldr	r2, [pc, #120]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8d8:	f043 0310 	orr.w	r3, r3, #16
 800d8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d106      	bne.n	800d8f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8e4:	4b1a      	ldr	r3, [pc, #104]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e8:	4a19      	ldr	r2, [pc, #100]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8f0:	e00f      	b.n	800d912 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d106      	bne.n	800d906 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8f8:	4b15      	ldr	r3, [pc, #84]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	4a14      	ldr	r2, [pc, #80]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d902:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d904:	e005      	b.n	800d912 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d906:	4b12      	ldr	r3, [pc, #72]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	4a11      	ldr	r2, [pc, #68]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d90c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d912:	4b0f      	ldr	r3, [pc, #60]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a0e      	ldr	r2, [pc, #56]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d91c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d91e:	f7f6 fbd3 	bl	80040c8 <HAL_GetTick>
 800d922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d924:	e008      	b.n	800d938 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d926:	f7f6 fbcf 	bl	80040c8 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	2b02      	cmp	r3, #2
 800d932:	d901      	bls.n	800d938 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d934:	2303      	movs	r3, #3
 800d936:	e006      	b.n	800d946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d938:	4b05      	ldr	r3, [pc, #20]	; (800d950 <RCCEx_PLL2_Config+0x15c>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0f0      	beq.n	800d926 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d944:	7bfb      	ldrb	r3, [r7, #15]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	58024400 	.word	0x58024400
 800d954:	ffff0007 	.word	0xffff0007

0800d958 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d966:	4b53      	ldr	r3, [pc, #332]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	2b03      	cmp	r3, #3
 800d970:	d101      	bne.n	800d976 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e099      	b.n	800daaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d976:	4b4f      	ldr	r3, [pc, #316]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a4e      	ldr	r2, [pc, #312]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d97c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d982:	f7f6 fba1 	bl	80040c8 <HAL_GetTick>
 800d986:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d988:	e008      	b.n	800d99c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d98a:	f7f6 fb9d 	bl	80040c8 <HAL_GetTick>
 800d98e:	4602      	mov	r2, r0
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	2b02      	cmp	r3, #2
 800d996:	d901      	bls.n	800d99c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	e086      	b.n	800daaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d99c:	4b45      	ldr	r3, [pc, #276]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1f0      	bne.n	800d98a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9a8:	4b42      	ldr	r3, [pc, #264]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	051b      	lsls	r3, r3, #20
 800d9b6:	493f      	ldr	r1, [pc, #252]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	025b      	lsls	r3, r3, #9
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	041b      	lsls	r3, r3, #16
 800d9da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	061b      	lsls	r3, r3, #24
 800d9e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9ec:	4931      	ldr	r1, [pc, #196]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9f2:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	492d      	ldr	r1, [pc, #180]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da00:	4313      	orrs	r3, r2
 800da02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da04:	4b2b      	ldr	r3, [pc, #172]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	4928      	ldr	r1, [pc, #160]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da12:	4313      	orrs	r3, r2
 800da14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da16:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1a:	4a26      	ldr	r2, [pc, #152]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da22:	4b24      	ldr	r3, [pc, #144]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da26:	4b24      	ldr	r3, [pc, #144]	; (800dab8 <RCCEx_PLL3_Config+0x160>)
 800da28:	4013      	ands	r3, r2
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	69d2      	ldr	r2, [r2, #28]
 800da2e:	00d2      	lsls	r2, r2, #3
 800da30:	4920      	ldr	r1, [pc, #128]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da32:	4313      	orrs	r3, r2
 800da34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da36:	4b1f      	ldr	r3, [pc, #124]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	4a1e      	ldr	r2, [pc, #120]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da48:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	4a19      	ldr	r2, [pc, #100]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da54:	e00f      	b.n	800da76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d106      	bne.n	800da6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da5c:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da60:	4a14      	ldr	r2, [pc, #80]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da68:	e005      	b.n	800da76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da6a:	4b12      	ldr	r3, [pc, #72]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	4a11      	ldr	r2, [pc, #68]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da76:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a0e      	ldr	r2, [pc, #56]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da82:	f7f6 fb21 	bl	80040c8 <HAL_GetTick>
 800da86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da88:	e008      	b.n	800da9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da8a:	f7f6 fb1d 	bl	80040c8 <HAL_GetTick>
 800da8e:	4602      	mov	r2, r0
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	2b02      	cmp	r3, #2
 800da96:	d901      	bls.n	800da9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	e006      	b.n	800daaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da9c:	4b05      	ldr	r3, [pc, #20]	; (800dab4 <RCCEx_PLL3_Config+0x15c>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d0f0      	beq.n	800da8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	58024400 	.word	0x58024400
 800dab8:	ffff0007 	.word	0xffff0007

0800dabc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d071      	beq.n	800dbb2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d106      	bne.n	800dae8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7f5 fdb2 	bl	800364c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	f003 0310 	and.w	r3, r3, #16
 800dafa:	2b10      	cmp	r3, #16
 800dafc:	d050      	beq.n	800dba0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	22ca      	movs	r2, #202	; 0xca
 800db04:	625a      	str	r2, [r3, #36]	; 0x24
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2253      	movs	r2, #83	; 0x53
 800db0c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fa4a 	bl	800dfa8 <RTC_EnterInitMode>
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d124      	bne.n	800db68 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	6899      	ldr	r1, [r3, #8]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	4b24      	ldr	r3, [pc, #144]	; (800dbbc <HAL_RTC_Init+0x100>)
 800db2a:	400b      	ands	r3, r1
 800db2c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6899      	ldr	r1, [r3, #8]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	431a      	orrs	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	430a      	orrs	r2, r1
 800db4a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	0419      	lsls	r1, r3, #16
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	430a      	orrs	r2, r1
 800db5c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fa56 	bl	800e010 <RTC_ExitInitMode>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d113      	bne.n	800db96 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f022 0203 	bic.w	r2, r2, #3
 800db7c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	69da      	ldr	r2, [r3, #28]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	430a      	orrs	r2, r1
 800db94:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	22ff      	movs	r2, #255	; 0xff
 800db9c:	625a      	str	r2, [r3, #36]	; 0x24
 800db9e:	e001      	b.n	800dba4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d103      	bne.n	800dbb2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	ff8fffbf 	.word	0xff8fffbf

0800dbc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d101      	bne.n	800dbda <HAL_RTC_SetTime+0x1a>
 800dbd6:	2302      	movs	r3, #2
 800dbd8:	e089      	b.n	800dcee <HAL_RTC_SetTime+0x12e>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	22ca      	movs	r2, #202	; 0xca
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2253      	movs	r2, #83	; 0x53
 800dbf8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 f9d4 	bl	800dfa8 <RTC_EnterInitMode>
 800dc00:	4603      	mov	r3, r0
 800dc02:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dc04:	7cfb      	ldrb	r3, [r7, #19]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d161      	bne.n	800dcce <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d126      	bne.n	800dc5e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2200      	movs	r2, #0
 800dc22:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fa2f 	bl	800e08c <RTC_ByteToBcd2>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	785b      	ldrb	r3, [r3, #1]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 fa28 	bl	800e08c <RTC_ByteToBcd2>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc40:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	789b      	ldrb	r3, [r3, #2]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 fa20 	bl	800e08c <RTC_ByteToBcd2>
 800dc4c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc4e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	78db      	ldrb	r3, [r3, #3]
 800dc56:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	617b      	str	r3, [r7, #20]
 800dc5c:	e018      	b.n	800dc90 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	785b      	ldrb	r3, [r3, #1]
 800dc7c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc7e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc84:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	78db      	ldrb	r3, [r3, #3]
 800dc8a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6979      	ldr	r1, [r7, #20]
 800dc96:	4b18      	ldr	r3, [pc, #96]	; (800dcf8 <HAL_RTC_SetTime+0x138>)
 800dc98:	400b      	ands	r3, r1
 800dc9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dcaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6899      	ldr	r1, [r3, #8]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	431a      	orrs	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 f9a3 	bl	800e010 <RTC_ExitInitMode>
 800dcca:	4603      	mov	r3, r0
 800dccc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	22ff      	movs	r2, #255	; 0xff
 800dcd4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcd6:	7cfb      	ldrb	r3, [r7, #19]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dcec:	7cfb      	ldrb	r3, [r7, #19]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd90      	pop	{r4, r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	007f7f7f 	.word	0x007f7f7f

0800dcfc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	4b22      	ldr	r3, [pc, #136]	; (800ddb0 <HAL_RTC_GetTime+0xb4>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	0c1b      	lsrs	r3, r3, #16
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	0a1b      	lsrs	r3, r3, #8
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	0d9b      	lsrs	r3, r3, #22
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d11a      	bne.n	800dda6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 f9a9 	bl	800e0cc <RTC_Bcd2ToByte>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	785b      	ldrb	r3, [r3, #1]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f000 f9a0 	bl	800e0cc <RTC_Bcd2ToByte>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	789b      	ldrb	r3, [r3, #2]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 f997 	bl	800e0cc <RTC_Bcd2ToByte>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	461a      	mov	r2, r3
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3718      	adds	r7, #24
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	007f7f7f 	.word	0x007f7f7f

0800ddb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ddb4:	b590      	push	{r4, r7, lr}
 800ddb6:	b087      	sub	sp, #28
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d101      	bne.n	800ddce <HAL_RTC_SetDate+0x1a>
 800ddca:	2302      	movs	r3, #2
 800ddcc:	e073      	b.n	800deb6 <HAL_RTC_SetDate+0x102>
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2202      	movs	r2, #2
 800ddda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10e      	bne.n	800de02 <HAL_RTC_SetDate+0x4e>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	785b      	ldrb	r3, [r3, #1]
 800dde8:	f003 0310 	and.w	r3, r3, #16
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	f023 0310 	bic.w	r3, r3, #16
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	330a      	adds	r3, #10
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d11c      	bne.n	800de42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	78db      	ldrb	r3, [r3, #3]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f93d 	bl	800e08c <RTC_ByteToBcd2>
 800de12:	4603      	mov	r3, r0
 800de14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	785b      	ldrb	r3, [r3, #1]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 f936 	bl	800e08c <RTC_ByteToBcd2>
 800de20:	4603      	mov	r3, r0
 800de22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	789b      	ldrb	r3, [r3, #2]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 f92e 	bl	800e08c <RTC_ByteToBcd2>
 800de30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de3c:	4313      	orrs	r3, r2
 800de3e:	617b      	str	r3, [r7, #20]
 800de40:	e00e      	b.n	800de60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	78db      	ldrb	r3, [r3, #3]
 800de46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	785b      	ldrb	r3, [r3, #1]
 800de4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de5c:	4313      	orrs	r3, r2
 800de5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	22ca      	movs	r2, #202	; 0xca
 800de66:	625a      	str	r2, [r3, #36]	; 0x24
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2253      	movs	r2, #83	; 0x53
 800de6e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f000 f899 	bl	800dfa8 <RTC_EnterInitMode>
 800de76:	4603      	mov	r3, r0
 800de78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de7a:	7cfb      	ldrb	r3, [r7, #19]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	6979      	ldr	r1, [r7, #20]
 800de86:	4b0e      	ldr	r3, [pc, #56]	; (800dec0 <HAL_RTC_SetDate+0x10c>)
 800de88:	400b      	ands	r3, r1
 800de8a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 f8bf 	bl	800e010 <RTC_ExitInitMode>
 800de92:	4603      	mov	r3, r0
 800de94:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	22ff      	movs	r2, #255	; 0xff
 800de9c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de9e:	7cfb      	ldrb	r3, [r7, #19]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d103      	bne.n	800deac <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800deb4:	7cfb      	ldrb	r3, [r7, #19]


}
 800deb6:	4618      	mov	r0, r3
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	bd90      	pop	{r4, r7, pc}
 800debe:	bf00      	nop
 800dec0:	00ffff3f 	.word	0x00ffff3f

0800dec4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	4b21      	ldr	r3, [pc, #132]	; (800df5c <HAL_RTC_GetDate+0x98>)
 800ded8:	4013      	ands	r3, r2
 800deda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	0c1b      	lsrs	r3, r3, #16
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	0a1b      	lsrs	r3, r3, #8
 800deea:	b2db      	uxtb	r3, r3
 800deec:	f003 031f 	and.w	r3, r3, #31
 800def0:	b2da      	uxtb	r2, r3
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800defe:	b2da      	uxtb	r2, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	0b5b      	lsrs	r3, r3, #13
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0307 	and.w	r3, r3, #7
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d11a      	bne.n	800df50 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	78db      	ldrb	r3, [r3, #3]
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 f8d4 	bl	800e0cc <RTC_Bcd2ToByte>
 800df24:	4603      	mov	r3, r0
 800df26:	461a      	mov	r2, r3
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	785b      	ldrb	r3, [r3, #1]
 800df30:	4618      	mov	r0, r3
 800df32:	f000 f8cb 	bl	800e0cc <RTC_Bcd2ToByte>
 800df36:	4603      	mov	r3, r0
 800df38:	461a      	mov	r2, r3
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	789b      	ldrb	r3, [r3, #2]
 800df42:	4618      	mov	r0, r3
 800df44:	f000 f8c2 	bl	800e0cc <RTC_Bcd2ToByte>
 800df48:	4603      	mov	r3, r0
 800df4a:	461a      	mov	r2, r3
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	00ffff3f 	.word	0x00ffff3f

0800df60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a0d      	ldr	r2, [pc, #52]	; (800dfa4 <HAL_RTC_WaitForSynchro+0x44>)
 800df6e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800df70:	f7f6 f8aa 	bl	80040c8 <HAL_GetTick>
 800df74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df76:	e009      	b.n	800df8c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df78:	f7f6 f8a6 	bl	80040c8 <HAL_GetTick>
 800df7c:	4602      	mov	r2, r0
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df86:	d901      	bls.n	800df8c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e007      	b.n	800df9c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b00      	cmp	r3, #0
 800df98:	d0ee      	beq.n	800df78 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	0003ff5f 	.word	0x0003ff5f

0800dfa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d120      	bne.n	800e004 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dfcc:	f7f6 f87c 	bl	80040c8 <HAL_GetTick>
 800dfd0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfd2:	e00d      	b.n	800dff0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfd4:	f7f6 f878 	bl	80040c8 <HAL_GetTick>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfe2:	d905      	bls.n	800dff0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2203      	movs	r2, #3
 800dfec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <RTC_EnterInitMode+0x5c>
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
 800e000:	2b03      	cmp	r3, #3
 800e002:	d1e7      	bne.n	800dfd4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e004:	7bfb      	ldrb	r3, [r7, #15]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e01c:	4b1a      	ldr	r3, [pc, #104]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	4a19      	ldr	r2, [pc, #100]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e026:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e028:	4b17      	ldr	r3, [pc, #92]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	f003 0320 	and.w	r3, r3, #32
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10c      	bne.n	800e04e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ff93 	bl	800df60 <HAL_RTC_WaitForSynchro>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d01e      	beq.n	800e07e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2203      	movs	r2, #3
 800e044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e048:	2303      	movs	r3, #3
 800e04a:	73fb      	strb	r3, [r7, #15]
 800e04c:	e017      	b.n	800e07e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e04e:	4b0e      	ldr	r3, [pc, #56]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	4a0d      	ldr	r2, [pc, #52]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e054:	f023 0320 	bic.w	r3, r3, #32
 800e058:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff ff80 	bl	800df60 <HAL_RTC_WaitForSynchro>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d005      	beq.n	800e072 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2203      	movs	r2, #3
 800e06a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e072:	4b05      	ldr	r3, [pc, #20]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	4a04      	ldr	r2, [pc, #16]	; (800e088 <RTC_ExitInitMode+0x78>)
 800e078:	f043 0320 	orr.w	r3, r3, #32
 800e07c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	58004000 	.word	0x58004000

0800e08c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	4603      	mov	r3, r0
 800e094:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e09e:	e005      	b.n	800e0ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	3b0a      	subs	r3, #10
 800e0aa:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e0ac:	7afb      	ldrb	r3, [r7, #11]
 800e0ae:	2b09      	cmp	r3, #9
 800e0b0:	d8f6      	bhi.n	800e0a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	011b      	lsls	r3, r3, #4
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	b2db      	uxtb	r3, r3
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e0d6:	79fb      	ldrb	r3, [r7, #7]
 800e0d8:	091b      	lsrs	r3, r3, #4
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	461a      	mov	r2, r3
 800e0de:	0092      	lsls	r2, r2, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	f003 030f 	and.w	r3, r3, #15
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b2db      	uxtb	r3, r3
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e10f      	b.n	800e332 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a87      	ldr	r2, [pc, #540]	; (800e33c <HAL_SPI_Init+0x23c>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d00f      	beq.n	800e142 <HAL_SPI_Init+0x42>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a86      	ldr	r2, [pc, #536]	; (800e340 <HAL_SPI_Init+0x240>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d00a      	beq.n	800e142 <HAL_SPI_Init+0x42>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a84      	ldr	r2, [pc, #528]	; (800e344 <HAL_SPI_Init+0x244>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d005      	beq.n	800e142 <HAL_SPI_Init+0x42>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	2b0f      	cmp	r3, #15
 800e13c:	d901      	bls.n	800e142 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e0f7      	b.n	800e332 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fc12 	bl	800e96c <SPI_GetPacketSize>
 800e148:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a7b      	ldr	r2, [pc, #492]	; (800e33c <HAL_SPI_Init+0x23c>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d00c      	beq.n	800e16e <HAL_SPI_Init+0x6e>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a79      	ldr	r2, [pc, #484]	; (800e340 <HAL_SPI_Init+0x240>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d007      	beq.n	800e16e <HAL_SPI_Init+0x6e>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a78      	ldr	r2, [pc, #480]	; (800e344 <HAL_SPI_Init+0x244>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d002      	beq.n	800e16e <HAL_SPI_Init+0x6e>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2b08      	cmp	r3, #8
 800e16c:	d811      	bhi.n	800e192 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e172:	4a72      	ldr	r2, [pc, #456]	; (800e33c <HAL_SPI_Init+0x23c>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d009      	beq.n	800e18c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a70      	ldr	r2, [pc, #448]	; (800e340 <HAL_SPI_Init+0x240>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d004      	beq.n	800e18c <HAL_SPI_Init+0x8c>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a6f      	ldr	r2, [pc, #444]	; (800e344 <HAL_SPI_Init+0x244>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d104      	bne.n	800e196 <HAL_SPI_Init+0x96>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d901      	bls.n	800e196 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e0cd      	b.n	800e332 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7f5 fa82 	bl	80036b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f022 0201 	bic.w	r2, r2, #1
 800e1c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1dc:	d119      	bne.n	800e212 <HAL_SPI_Init+0x112>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1e6:	d103      	bne.n	800e1f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d008      	beq.n	800e202 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10c      	bne.n	800e212 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e200:	d107      	bne.n	800e212 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e210:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00f      	beq.n	800e23e <HAL_SPI_Init+0x13e>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	2b06      	cmp	r3, #6
 800e224:	d90b      	bls.n	800e23e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	430a      	orrs	r2, r1
 800e23a:	601a      	str	r2, [r3, #0]
 800e23c:	e007      	b.n	800e24e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e24c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	69da      	ldr	r2, [r3, #28]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e256:	431a      	orrs	r2, r3
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e260:	ea42 0103 	orr.w	r1, r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68da      	ldr	r2, [r3, #12]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	430a      	orrs	r2, r1
 800e26e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e278:	431a      	orrs	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27e:	431a      	orrs	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	431a      	orrs	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	431a      	orrs	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	695b      	ldr	r3, [r3, #20]
 800e290:	431a      	orrs	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	431a      	orrs	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	431a      	orrs	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	431a      	orrs	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2ae:	ea42 0103 	orr.w	r1, r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d113      	bne.n	800e2ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f022 0201 	bic.w	r2, r2, #1
 800e2fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00a      	beq.n	800e320 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	430a      	orrs	r2, r1
 800e31e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	40013000 	.word	0x40013000
 800e340:	40003800 	.word	0x40003800
 800e344:	40003c00 	.word	0x40003c00

0800e348 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b088      	sub	sp, #32
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	603b      	str	r3, [r7, #0]
 800e354:	4613      	mov	r3, r2
 800e356:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35c:	095b      	lsrs	r3, r3, #5
 800e35e:	b29b      	uxth	r3, r3
 800e360:	3301      	adds	r3, #1
 800e362:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3330      	adds	r3, #48	; 0x30
 800e36a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e36c:	f7f5 feac 	bl	80040c8 <HAL_GetTick>
 800e370:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d001      	beq.n	800e382 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e37e:	2302      	movs	r3, #2
 800e380:	e250      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <HAL_SPI_Receive+0x46>
 800e388:	88fb      	ldrh	r3, [r7, #6]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	e248      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d101      	bne.n	800e3a0 <HAL_SPI_Receive+0x58>
 800e39c:	2302      	movs	r3, #2
 800e39e:	e241      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	88fa      	ldrh	r2, [r7, #6]
 800e3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	88fa      	ldrh	r2, [r7, #6]
 800e3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e3f8:	d108      	bne.n	800e40c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	e009      	b.n	800e420 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e41e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	4b95      	ldr	r3, [pc, #596]	; (800e67c <HAL_SPI_Receive+0x334>)
 800e428:	4013      	ands	r3, r2
 800e42a:	88f9      	ldrh	r1, [r7, #6]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	6812      	ldr	r2, [r2, #0]
 800e430:	430b      	orrs	r3, r1
 800e432:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f042 0201 	orr.w	r2, r2, #1
 800e442:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e44c:	d107      	bne.n	800e45e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e45c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	2b0f      	cmp	r3, #15
 800e464:	d96c      	bls.n	800e540 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e466:	e064      	b.n	800e532 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d114      	bne.n	800e4a8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e486:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e488:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48e:	1d1a      	adds	r2, r3, #4
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	3b01      	subs	r3, #1
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4a6:	e044      	b.n	800e532 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	8bfa      	ldrh	r2, [r7, #30]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d919      	bls.n	800e4ea <HAL_SPI_Receive+0x1a2>
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d014      	beq.n	800e4ea <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d0:	1d1a      	adds	r2, r3, #4
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4e8:	e023      	b.n	800e532 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ea:	f7f5 fded 	bl	80040c8 <HAL_GetTick>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d803      	bhi.n	800e502 <HAL_SPI_Receive+0x1ba>
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e500:	d102      	bne.n	800e508 <HAL_SPI_Receive+0x1c0>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d114      	bne.n	800e532 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f98f 	bl	800e82c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e178      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e538:	b29b      	uxth	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d194      	bne.n	800e468 <HAL_SPI_Receive+0x120>
 800e53e:	e15e      	b.n	800e7fe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	2b07      	cmp	r3, #7
 800e546:	f240 8153 	bls.w	800e7f0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e54a:	e08f      	b.n	800e66c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d114      	bne.n	800e58c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	8812      	ldrh	r2, [r2, #0]
 800e56a:	b292      	uxth	r2, r2
 800e56c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e572:	1c9a      	adds	r2, r3, #2
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e58a:	e06f      	b.n	800e66c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e592:	b29b      	uxth	r3, r3
 800e594:	8bfa      	ldrh	r2, [r7, #30]
 800e596:	429a      	cmp	r2, r3
 800e598:	d924      	bls.n	800e5e4 <HAL_SPI_Receive+0x29c>
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d01f      	beq.n	800e5e4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a8:	69ba      	ldr	r2, [r7, #24]
 800e5aa:	8812      	ldrh	r2, [r2, #0]
 800e5ac:	b292      	uxth	r2, r2
 800e5ae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5b4:	1c9a      	adds	r2, r3, #2
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5be:	69ba      	ldr	r2, [r7, #24]
 800e5c0:	8812      	ldrh	r2, [r2, #0]
 800e5c2:	b292      	uxth	r2, r2
 800e5c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ca:	1c9a      	adds	r2, r3, #2
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	3b02      	subs	r3, #2
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5e2:	e043      	b.n	800e66c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d119      	bne.n	800e624 <HAL_SPI_Receive+0x2dc>
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d014      	beq.n	800e624 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5fe:	69ba      	ldr	r2, [r7, #24]
 800e600:	8812      	ldrh	r2, [r2, #0]
 800e602:	b292      	uxth	r2, r2
 800e604:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60a:	1c9a      	adds	r2, r3, #2
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e616:	b29b      	uxth	r3, r3
 800e618:	3b01      	subs	r3, #1
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e622:	e023      	b.n	800e66c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e624:	f7f5 fd50 	bl	80040c8 <HAL_GetTick>
 800e628:	4602      	mov	r2, r0
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	429a      	cmp	r2, r3
 800e632:	d803      	bhi.n	800e63c <HAL_SPI_Receive+0x2f4>
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63a:	d102      	bne.n	800e642 <HAL_SPI_Receive+0x2fa>
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d114      	bne.n	800e66c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f000 f8f2 	bl	800e82c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e64e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e668:	2303      	movs	r3, #3
 800e66a:	e0db      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e672:	b29b      	uxth	r3, r3
 800e674:	2b00      	cmp	r3, #0
 800e676:	f47f af69 	bne.w	800e54c <HAL_SPI_Receive+0x204>
 800e67a:	e0c0      	b.n	800e7fe <HAL_SPI_Receive+0x4b6>
 800e67c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	f003 0301 	and.w	r3, r3, #1
 800e692:	2b01      	cmp	r3, #1
 800e694:	d117      	bne.n	800e6c6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a2:	7812      	ldrb	r2, [r2, #0]
 800e6a4:	b2d2      	uxtb	r2, r2
 800e6a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6c4:	e094      	b.n	800e7f0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	8bfa      	ldrh	r2, [r7, #30]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d946      	bls.n	800e762 <HAL_SPI_Receive+0x41a>
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d041      	beq.n	800e762 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ea:	7812      	ldrb	r2, [r2, #0]
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	b2d2      	uxtb	r2, r2
 800e70a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e710:	1c5a      	adds	r2, r3, #1
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	7812      	ldrb	r2, [r2, #0]
 800e724:	b2d2      	uxtb	r2, r2
 800e726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e73e:	7812      	ldrb	r2, [r2, #0]
 800e740:	b2d2      	uxtb	r2, r2
 800e742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e754:	b29b      	uxth	r3, r3
 800e756:	3b04      	subs	r3, #4
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e760:	e046      	b.n	800e7f0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e768:	b29b      	uxth	r3, r3
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	d81c      	bhi.n	800e7a8 <HAL_SPI_Receive+0x460>
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e784:	7812      	ldrb	r2, [r2, #0]
 800e786:	b2d2      	uxtb	r2, r2
 800e788:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	3b01      	subs	r3, #1
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7a6:	e023      	b.n	800e7f0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7a8:	f7f5 fc8e 	bl	80040c8 <HAL_GetTick>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d803      	bhi.n	800e7c0 <HAL_SPI_Receive+0x478>
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7be:	d102      	bne.n	800e7c6 <HAL_SPI_Receive+0x47e>
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d114      	bne.n	800e7f0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f000 f830 	bl	800e82c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e019      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f47f af41 	bne.w	800e680 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f000 f814 	bl	800e82c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2201      	movs	r2, #1
 800e808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	e000      	b.n	800e824 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e822:	2300      	movs	r3, #0
  }
}
 800e824:	4618      	mov	r0, r3
 800e826:	3720      	adds	r7, #32
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	695b      	ldr	r3, [r3, #20]
 800e83a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	699a      	ldr	r2, [r3, #24]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f042 0208 	orr.w	r2, r2, #8
 800e84a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699a      	ldr	r2, [r3, #24]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f042 0210 	orr.w	r2, r2, #16
 800e85a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f022 0201 	bic.w	r2, r2, #1
 800e86a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6919      	ldr	r1, [r3, #16]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4b3c      	ldr	r3, [pc, #240]	; (800e968 <SPI_CloseTransfer+0x13c>)
 800e878:	400b      	ands	r3, r1
 800e87a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	689a      	ldr	r2, [r3, #8]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e88a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b04      	cmp	r3, #4
 800e896:	d014      	beq.n	800e8c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00f      	beq.n	800e8c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	699a      	ldr	r2, [r3, #24]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f042 0220 	orr.w	r2, r2, #32
 800e8c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b03      	cmp	r3, #3
 800e8cc:	d014      	beq.n	800e8f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00f      	beq.n	800e8f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8de:	f043 0204 	orr.w	r2, r3, #4
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00f      	beq.n	800e922 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e908:	f043 0201 	orr.w	r2, r3, #1
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	699a      	ldr	r2, [r3, #24]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e920:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00f      	beq.n	800e94c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e932:	f043 0208 	orr.w	r2, r3, #8
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	699a      	ldr	r2, [r3, #24]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e94a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e95c:	bf00      	nop
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	fffffc90 	.word	0xfffffc90

0800e96c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e978:	095b      	lsrs	r3, r3, #5
 800e97a:	3301      	adds	r3, #1
 800e97c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	3301      	adds	r3, #1
 800e984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	3307      	adds	r3, #7
 800e98a:	08db      	lsrs	r3, r3, #3
 800e98c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	fb02 f303 	mul.w	r3, r2, r3
}
 800e996:	4618      	mov	r0, r3
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e049      	b.n	800ea48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d106      	bne.n	800e9ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7f4 ff29 	bl	8003820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2202      	movs	r2, #2
 800e9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4619      	mov	r1, r3
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	f000 fe7d 	bl	800f6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2201      	movs	r2, #1
 800ea02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2201      	movs	r2, #1
 800ea12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d001      	beq.n	800ea68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	e054      	b.n	800eb12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2202      	movs	r2, #2
 800ea6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f042 0201 	orr.w	r2, r2, #1
 800ea7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a26      	ldr	r2, [pc, #152]	; (800eb20 <HAL_TIM_Base_Start_IT+0xd0>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d022      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea92:	d01d      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a22      	ldr	r2, [pc, #136]	; (800eb24 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d018      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a21      	ldr	r2, [pc, #132]	; (800eb28 <HAL_TIM_Base_Start_IT+0xd8>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d013      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a1f      	ldr	r2, [pc, #124]	; (800eb2c <HAL_TIM_Base_Start_IT+0xdc>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d00e      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a1e      	ldr	r2, [pc, #120]	; (800eb30 <HAL_TIM_Base_Start_IT+0xe0>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d009      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a1c      	ldr	r2, [pc, #112]	; (800eb34 <HAL_TIM_Base_Start_IT+0xe4>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d004      	beq.n	800ead0 <HAL_TIM_Base_Start_IT+0x80>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a1b      	ldr	r2, [pc, #108]	; (800eb38 <HAL_TIM_Base_Start_IT+0xe8>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d115      	bne.n	800eafc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	689a      	ldr	r2, [r3, #8]
 800ead6:	4b19      	ldr	r3, [pc, #100]	; (800eb3c <HAL_TIM_Base_Start_IT+0xec>)
 800ead8:	4013      	ands	r3, r2
 800eada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2b06      	cmp	r3, #6
 800eae0:	d015      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0xbe>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae8:	d011      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f042 0201 	orr.w	r2, r2, #1
 800eaf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eafa:	e008      	b.n	800eb0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f042 0201 	orr.w	r2, r2, #1
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	e000      	b.n	800eb10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb10:	2300      	movs	r3, #0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3714      	adds	r7, #20
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	40010000 	.word	0x40010000
 800eb24:	40000400 	.word	0x40000400
 800eb28:	40000800 	.word	0x40000800
 800eb2c:	40000c00 	.word	0x40000c00
 800eb30:	40010400 	.word	0x40010400
 800eb34:	40001800 	.word	0x40001800
 800eb38:	40014000 	.word	0x40014000
 800eb3c:	00010007 	.word	0x00010007

0800eb40 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d109      	bne.n	800eb68 <HAL_TIM_OC_Start_IT+0x28>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	bf14      	ite	ne
 800eb60:	2301      	movne	r3, #1
 800eb62:	2300      	moveq	r3, #0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	e03c      	b.n	800ebe2 <HAL_TIM_OC_Start_IT+0xa2>
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	d109      	bne.n	800eb82 <HAL_TIM_OC_Start_IT+0x42>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	bf14      	ite	ne
 800eb7a:	2301      	movne	r3, #1
 800eb7c:	2300      	moveq	r3, #0
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	e02f      	b.n	800ebe2 <HAL_TIM_OC_Start_IT+0xa2>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b08      	cmp	r3, #8
 800eb86:	d109      	bne.n	800eb9c <HAL_TIM_OC_Start_IT+0x5c>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	bf14      	ite	ne
 800eb94:	2301      	movne	r3, #1
 800eb96:	2300      	moveq	r3, #0
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	e022      	b.n	800ebe2 <HAL_TIM_OC_Start_IT+0xa2>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	2b0c      	cmp	r3, #12
 800eba0:	d109      	bne.n	800ebb6 <HAL_TIM_OC_Start_IT+0x76>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	bf14      	ite	ne
 800ebae:	2301      	movne	r3, #1
 800ebb0:	2300      	moveq	r3, #0
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	e015      	b.n	800ebe2 <HAL_TIM_OC_Start_IT+0xa2>
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b10      	cmp	r3, #16
 800ebba:	d109      	bne.n	800ebd0 <HAL_TIM_OC_Start_IT+0x90>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	bf14      	ite	ne
 800ebc8:	2301      	movne	r3, #1
 800ebca:	2300      	moveq	r3, #0
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	e008      	b.n	800ebe2 <HAL_TIM_OC_Start_IT+0xa2>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	bf14      	ite	ne
 800ebdc:	2301      	movne	r3, #1
 800ebde:	2300      	moveq	r3, #0
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e0ec      	b.n	800edc4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <HAL_TIM_OC_Start_IT+0xba>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebf8:	e023      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x102>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d104      	bne.n	800ec0a <HAL_TIM_OC_Start_IT+0xca>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2202      	movs	r2, #2
 800ec04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec08:	e01b      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x102>
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	2b08      	cmp	r3, #8
 800ec0e:	d104      	bne.n	800ec1a <HAL_TIM_OC_Start_IT+0xda>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec18:	e013      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x102>
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	2b0c      	cmp	r3, #12
 800ec1e:	d104      	bne.n	800ec2a <HAL_TIM_OC_Start_IT+0xea>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2202      	movs	r2, #2
 800ec24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec28:	e00b      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x102>
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2b10      	cmp	r3, #16
 800ec2e:	d104      	bne.n	800ec3a <HAL_TIM_OC_Start_IT+0xfa>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2202      	movs	r2, #2
 800ec34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec38:	e003      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x102>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2202      	movs	r2, #2
 800ec3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b0c      	cmp	r3, #12
 800ec46:	d841      	bhi.n	800eccc <HAL_TIM_OC_Start_IT+0x18c>
 800ec48:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <HAL_TIM_OC_Start_IT+0x110>)
 800ec4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4e:	bf00      	nop
 800ec50:	0800ec85 	.word	0x0800ec85
 800ec54:	0800eccd 	.word	0x0800eccd
 800ec58:	0800eccd 	.word	0x0800eccd
 800ec5c:	0800eccd 	.word	0x0800eccd
 800ec60:	0800ec97 	.word	0x0800ec97
 800ec64:	0800eccd 	.word	0x0800eccd
 800ec68:	0800eccd 	.word	0x0800eccd
 800ec6c:	0800eccd 	.word	0x0800eccd
 800ec70:	0800eca9 	.word	0x0800eca9
 800ec74:	0800eccd 	.word	0x0800eccd
 800ec78:	0800eccd 	.word	0x0800eccd
 800ec7c:	0800eccd 	.word	0x0800eccd
 800ec80:	0800ecbb 	.word	0x0800ecbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f042 0202 	orr.w	r2, r2, #2
 800ec92:	60da      	str	r2, [r3, #12]
      break;
 800ec94:	e01d      	b.n	800ecd2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68da      	ldr	r2, [r3, #12]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f042 0204 	orr.w	r2, r2, #4
 800eca4:	60da      	str	r2, [r3, #12]
      break;
 800eca6:	e014      	b.n	800ecd2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68da      	ldr	r2, [r3, #12]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f042 0208 	orr.w	r2, r2, #8
 800ecb6:	60da      	str	r2, [r3, #12]
      break;
 800ecb8:	e00b      	b.n	800ecd2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68da      	ldr	r2, [r3, #12]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f042 0210 	orr.w	r2, r2, #16
 800ecc8:	60da      	str	r2, [r3, #12]
      break;
 800ecca:	e002      	b.n	800ecd2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd0:	bf00      	nop
  }

  if (status == HAL_OK)
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d174      	bne.n	800edc2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f001 f917 	bl	800ff14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a38      	ldr	r2, [pc, #224]	; (800edcc <HAL_TIM_OC_Start_IT+0x28c>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d013      	beq.n	800ed18 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a36      	ldr	r2, [pc, #216]	; (800edd0 <HAL_TIM_OC_Start_IT+0x290>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d00e      	beq.n	800ed18 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a35      	ldr	r2, [pc, #212]	; (800edd4 <HAL_TIM_OC_Start_IT+0x294>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d009      	beq.n	800ed18 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a33      	ldr	r2, [pc, #204]	; (800edd8 <HAL_TIM_OC_Start_IT+0x298>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d004      	beq.n	800ed18 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a32      	ldr	r2, [pc, #200]	; (800eddc <HAL_TIM_OC_Start_IT+0x29c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d101      	bne.n	800ed1c <HAL_TIM_OC_Start_IT+0x1dc>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e000      	b.n	800ed1e <HAL_TIM_OC_Start_IT+0x1de>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d007      	beq.n	800ed32 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a25      	ldr	r2, [pc, #148]	; (800edcc <HAL_TIM_OC_Start_IT+0x28c>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d022      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed44:	d01d      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a25      	ldr	r2, [pc, #148]	; (800ede0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d018      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a23      	ldr	r2, [pc, #140]	; (800ede4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d013      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a22      	ldr	r2, [pc, #136]	; (800ede8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d00e      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a19      	ldr	r2, [pc, #100]	; (800edd0 <HAL_TIM_OC_Start_IT+0x290>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d009      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a1e      	ldr	r2, [pc, #120]	; (800edec <HAL_TIM_OC_Start_IT+0x2ac>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d004      	beq.n	800ed82 <HAL_TIM_OC_Start_IT+0x242>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a15      	ldr	r2, [pc, #84]	; (800edd4 <HAL_TIM_OC_Start_IT+0x294>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d115      	bne.n	800edae <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	4b19      	ldr	r3, [pc, #100]	; (800edf0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2b06      	cmp	r3, #6
 800ed92:	d015      	beq.n	800edc0 <HAL_TIM_OC_Start_IT+0x280>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed9a:	d011      	beq.n	800edc0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f042 0201 	orr.w	r2, r2, #1
 800edaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edac:	e008      	b.n	800edc0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f042 0201 	orr.w	r2, r2, #1
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	e000      	b.n	800edc2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edc0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	40010000 	.word	0x40010000
 800edd0:	40010400 	.word	0x40010400
 800edd4:	40014000 	.word	0x40014000
 800edd8:	40014400 	.word	0x40014400
 800eddc:	40014800 	.word	0x40014800
 800ede0:	40000400 	.word	0x40000400
 800ede4:	40000800 	.word	0x40000800
 800ede8:	40000c00 	.word	0x40000c00
 800edec:	40001800 	.word	0x40001800
 800edf0:	00010007 	.word	0x00010007

0800edf4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b0c      	cmp	r3, #12
 800ee06:	d841      	bhi.n	800ee8c <HAL_TIM_OC_Stop_IT+0x98>
 800ee08:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ee0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0e:	bf00      	nop
 800ee10:	0800ee45 	.word	0x0800ee45
 800ee14:	0800ee8d 	.word	0x0800ee8d
 800ee18:	0800ee8d 	.word	0x0800ee8d
 800ee1c:	0800ee8d 	.word	0x0800ee8d
 800ee20:	0800ee57 	.word	0x0800ee57
 800ee24:	0800ee8d 	.word	0x0800ee8d
 800ee28:	0800ee8d 	.word	0x0800ee8d
 800ee2c:	0800ee8d 	.word	0x0800ee8d
 800ee30:	0800ee69 	.word	0x0800ee69
 800ee34:	0800ee8d 	.word	0x0800ee8d
 800ee38:	0800ee8d 	.word	0x0800ee8d
 800ee3c:	0800ee8d 	.word	0x0800ee8d
 800ee40:	0800ee7b 	.word	0x0800ee7b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68da      	ldr	r2, [r3, #12]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f022 0202 	bic.w	r2, r2, #2
 800ee52:	60da      	str	r2, [r3, #12]
      break;
 800ee54:	e01d      	b.n	800ee92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	68da      	ldr	r2, [r3, #12]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f022 0204 	bic.w	r2, r2, #4
 800ee64:	60da      	str	r2, [r3, #12]
      break;
 800ee66:	e014      	b.n	800ee92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68da      	ldr	r2, [r3, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f022 0208 	bic.w	r2, r2, #8
 800ee76:	60da      	str	r2, [r3, #12]
      break;
 800ee78:	e00b      	b.n	800ee92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68da      	ldr	r2, [r3, #12]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f022 0210 	bic.w	r2, r2, #16
 800ee88:	60da      	str	r2, [r3, #12]
      break;
 800ee8a:	e002      	b.n	800ee92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee90:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f040 8081 	bne.w	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f836 	bl	800ff14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a3e      	ldr	r2, [pc, #248]	; (800efa8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <HAL_TIM_OC_Stop_IT+0xe6>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a3d      	ldr	r2, [pc, #244]	; (800efac <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00e      	beq.n	800eeda <HAL_TIM_OC_Stop_IT+0xe6>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a3b      	ldr	r2, [pc, #236]	; (800efb0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d009      	beq.n	800eeda <HAL_TIM_OC_Stop_IT+0xe6>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a3a      	ldr	r2, [pc, #232]	; (800efb4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d004      	beq.n	800eeda <HAL_TIM_OC_Stop_IT+0xe6>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a38      	ldr	r2, [pc, #224]	; (800efb8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d101      	bne.n	800eede <HAL_TIM_OC_Stop_IT+0xea>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <HAL_TIM_OC_Stop_IT+0xec>
 800eede:	2300      	movs	r3, #0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d017      	beq.n	800ef14 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6a1a      	ldr	r2, [r3, #32]
 800eeea:	f241 1311 	movw	r3, #4369	; 0x1111
 800eeee:	4013      	ands	r3, r2
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10f      	bne.n	800ef14 <HAL_TIM_OC_Stop_IT+0x120>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6a1a      	ldr	r2, [r3, #32]
 800eefa:	f240 4344 	movw	r3, #1092	; 0x444
 800eefe:	4013      	ands	r3, r2
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d107      	bne.n	800ef14 <HAL_TIM_OC_Stop_IT+0x120>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	6a1a      	ldr	r2, [r3, #32]
 800ef1a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef1e:	4013      	ands	r3, r2
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d10f      	bne.n	800ef44 <HAL_TIM_OC_Stop_IT+0x150>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	6a1a      	ldr	r2, [r3, #32]
 800ef2a:	f240 4344 	movw	r3, #1092	; 0x444
 800ef2e:	4013      	ands	r3, r2
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d107      	bne.n	800ef44 <HAL_TIM_OC_Stop_IT+0x150>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f022 0201 	bic.w	r2, r2, #1
 800ef42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d104      	bne.n	800ef54 <HAL_TIM_OC_Stop_IT+0x160>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef52:	e023      	b.n	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2b04      	cmp	r3, #4
 800ef58:	d104      	bne.n	800ef64 <HAL_TIM_OC_Stop_IT+0x170>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef62:	e01b      	b.n	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	2b08      	cmp	r3, #8
 800ef68:	d104      	bne.n	800ef74 <HAL_TIM_OC_Stop_IT+0x180>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef72:	e013      	b.n	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b0c      	cmp	r3, #12
 800ef78:	d104      	bne.n	800ef84 <HAL_TIM_OC_Stop_IT+0x190>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef82:	e00b      	b.n	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b10      	cmp	r3, #16
 800ef88:	d104      	bne.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef92:	e003      	b.n	800ef9c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	40010000 	.word	0x40010000
 800efac:	40010400 	.word	0x40010400
 800efb0:	40014000 	.word	0x40014000
 800efb4:	40014400 	.word	0x40014400
 800efb8:	40014800 	.word	0x40014800

0800efbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d101      	bne.n	800efce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e049      	b.n	800f062 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f841 	bl	800f06a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f000 fb70 	bl	800f6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b083      	sub	sp, #12
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f072:	bf00      	nop
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d020      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01b      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f06f 0202 	mvn.w	r2, #2
 800f0b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	699b      	ldr	r3, [r3, #24]
 800f0c0:	f003 0303 	and.w	r3, r3, #3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d003      	beq.n	800f0d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 faeb 	bl	800f6a4 <HAL_TIM_IC_CaptureCallback>
 800f0ce:	e005      	b.n	800f0dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7f1 fa95 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 faee 	bl	800f6b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f003 0304 	and.w	r3, r3, #4
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d020      	beq.n	800f12e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f003 0304 	and.w	r3, r3, #4
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01b      	beq.n	800f12e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f06f 0204 	mvn.w	r2, #4
 800f0fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2202      	movs	r2, #2
 800f104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fac5 	bl	800f6a4 <HAL_TIM_IC_CaptureCallback>
 800f11a:	e005      	b.n	800f128 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7f1 fa6f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fac8 	bl	800f6b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f003 0308 	and.w	r3, r3, #8
 800f134:	2b00      	cmp	r3, #0
 800f136:	d020      	beq.n	800f17a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f003 0308 	and.w	r3, r3, #8
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d01b      	beq.n	800f17a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f06f 0208 	mvn.w	r2, #8
 800f14a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2204      	movs	r2, #4
 800f150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	69db      	ldr	r3, [r3, #28]
 800f158:	f003 0303 	and.w	r3, r3, #3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fa9f 	bl	800f6a4 <HAL_TIM_IC_CaptureCallback>
 800f166:	e005      	b.n	800f174 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7f1 fa49 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 faa2 	bl	800f6b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f003 0310 	and.w	r3, r3, #16
 800f180:	2b00      	cmp	r3, #0
 800f182:	d020      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f003 0310 	and.w	r3, r3, #16
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d01b      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f06f 0210 	mvn.w	r2, #16
 800f196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2208      	movs	r2, #8
 800f19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	69db      	ldr	r3, [r3, #28]
 800f1a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d003      	beq.n	800f1b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fa79 	bl	800f6a4 <HAL_TIM_IC_CaptureCallback>
 800f1b2:	e005      	b.n	800f1c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7f1 fa23 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fa7c 	bl	800f6b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00c      	beq.n	800f1ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d007      	beq.n	800f1ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f06f 0201 	mvn.w	r2, #1
 800f1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7f3 fff5 	bl	80031d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d104      	bne.n	800f1fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00c      	beq.n	800f218 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f204:	2b00      	cmp	r3, #0
 800f206:	d007      	beq.n	800f218 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 ffba 	bl	801018c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00c      	beq.n	800f23c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d007      	beq.n	800f23c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 ffb2 	bl	80101a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00c      	beq.n	800f260 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 fa36 	bl	800f6cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f003 0320 	and.w	r3, r3, #32
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00c      	beq.n	800f284 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f003 0320 	and.w	r3, r3, #32
 800f270:	2b00      	cmp	r3, #0
 800f272:	d007      	beq.n	800f284 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f06f 0220 	mvn.w	r2, #32
 800f27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 ff7a 	bl	8010178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f298:	2300      	movs	r3, #0
 800f29a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d101      	bne.n	800f2aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f2a6:	2302      	movs	r3, #2
 800f2a8:	e0ff      	b.n	800f4aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b14      	cmp	r3, #20
 800f2b6:	f200 80f0 	bhi.w	800f49a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2ba:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c0:	0800f315 	.word	0x0800f315
 800f2c4:	0800f49b 	.word	0x0800f49b
 800f2c8:	0800f49b 	.word	0x0800f49b
 800f2cc:	0800f49b 	.word	0x0800f49b
 800f2d0:	0800f355 	.word	0x0800f355
 800f2d4:	0800f49b 	.word	0x0800f49b
 800f2d8:	0800f49b 	.word	0x0800f49b
 800f2dc:	0800f49b 	.word	0x0800f49b
 800f2e0:	0800f397 	.word	0x0800f397
 800f2e4:	0800f49b 	.word	0x0800f49b
 800f2e8:	0800f49b 	.word	0x0800f49b
 800f2ec:	0800f49b 	.word	0x0800f49b
 800f2f0:	0800f3d7 	.word	0x0800f3d7
 800f2f4:	0800f49b 	.word	0x0800f49b
 800f2f8:	0800f49b 	.word	0x0800f49b
 800f2fc:	0800f49b 	.word	0x0800f49b
 800f300:	0800f419 	.word	0x0800f419
 800f304:	0800f49b 	.word	0x0800f49b
 800f308:	0800f49b 	.word	0x0800f49b
 800f30c:	0800f49b 	.word	0x0800f49b
 800f310:	0800f459 	.word	0x0800f459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68b9      	ldr	r1, [r7, #8]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 fa86 	bl	800f82c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	699a      	ldr	r2, [r3, #24]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f042 0208 	orr.w	r2, r2, #8
 800f32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	699a      	ldr	r2, [r3, #24]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f022 0204 	bic.w	r2, r2, #4
 800f33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6999      	ldr	r1, [r3, #24]
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	691a      	ldr	r2, [r3, #16]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	430a      	orrs	r2, r1
 800f350:	619a      	str	r2, [r3, #24]
      break;
 800f352:	e0a5      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 faf6 	bl	800f94c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	699a      	ldr	r2, [r3, #24]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6999      	ldr	r1, [r3, #24]
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	021a      	lsls	r2, r3, #8
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	430a      	orrs	r2, r1
 800f392:	619a      	str	r2, [r3, #24]
      break;
 800f394:	e084      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68b9      	ldr	r1, [r7, #8]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 fb5f 	bl	800fa60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	69da      	ldr	r2, [r3, #28]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f042 0208 	orr.w	r2, r2, #8
 800f3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69da      	ldr	r2, [r3, #28]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f022 0204 	bic.w	r2, r2, #4
 800f3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	69d9      	ldr	r1, [r3, #28]
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	691a      	ldr	r2, [r3, #16]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	61da      	str	r2, [r3, #28]
      break;
 800f3d4:	e064      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 fbc7 	bl	800fb70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69da      	ldr	r2, [r3, #28]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	69da      	ldr	r2, [r3, #28]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	69d9      	ldr	r1, [r3, #28]
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	021a      	lsls	r2, r3, #8
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	430a      	orrs	r2, r1
 800f414:	61da      	str	r2, [r3, #28]
      break;
 800f416:	e043      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fc10 	bl	800fc44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f042 0208 	orr.w	r2, r2, #8
 800f432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f022 0204 	bic.w	r2, r2, #4
 800f442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	691a      	ldr	r2, [r3, #16]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	430a      	orrs	r2, r1
 800f454:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f456:	e023      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	68b9      	ldr	r1, [r7, #8]
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fc54 	bl	800fd0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	021a      	lsls	r2, r3, #8
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	430a      	orrs	r2, r1
 800f496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f498:	e002      	b.n	800f4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f49a:	2301      	movs	r3, #1
 800f49c:	75fb      	strb	r3, [r7, #23]
      break;
 800f49e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3718      	adds	r7, #24
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop

0800f4b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d101      	bne.n	800f4d0 <HAL_TIM_ConfigClockSource+0x1c>
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	e0dc      	b.n	800f68a <HAL_TIM_ConfigClockSource+0x1d6>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2202      	movs	r2, #2
 800f4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4b6a      	ldr	r3, [pc, #424]	; (800f694 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a64      	ldr	r2, [pc, #400]	; (800f698 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f506:	4293      	cmp	r3, r2
 800f508:	f000 80a9 	beq.w	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f50c:	4a62      	ldr	r2, [pc, #392]	; (800f698 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	f200 80ae 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f514:	4a61      	ldr	r2, [pc, #388]	; (800f69c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f516:	4293      	cmp	r3, r2
 800f518:	f000 80a1 	beq.w	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f51c:	4a5f      	ldr	r2, [pc, #380]	; (800f69c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	f200 80a6 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f524:	4a5e      	ldr	r2, [pc, #376]	; (800f6a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f526:	4293      	cmp	r3, r2
 800f528:	f000 8099 	beq.w	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f52c:	4a5c      	ldr	r2, [pc, #368]	; (800f6a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	f200 809e 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f534:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f538:	f000 8091 	beq.w	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f53c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f540:	f200 8096 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f548:	f000 8089 	beq.w	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f54c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f550:	f200 808e 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f558:	d03e      	beq.n	800f5d8 <HAL_TIM_ConfigClockSource+0x124>
 800f55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f55e:	f200 8087 	bhi.w	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f566:	f000 8086 	beq.w	800f676 <HAL_TIM_ConfigClockSource+0x1c2>
 800f56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f56e:	d87f      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f570:	2b70      	cmp	r3, #112	; 0x70
 800f572:	d01a      	beq.n	800f5aa <HAL_TIM_ConfigClockSource+0xf6>
 800f574:	2b70      	cmp	r3, #112	; 0x70
 800f576:	d87b      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f578:	2b60      	cmp	r3, #96	; 0x60
 800f57a:	d050      	beq.n	800f61e <HAL_TIM_ConfigClockSource+0x16a>
 800f57c:	2b60      	cmp	r3, #96	; 0x60
 800f57e:	d877      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f580:	2b50      	cmp	r3, #80	; 0x50
 800f582:	d03c      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0x14a>
 800f584:	2b50      	cmp	r3, #80	; 0x50
 800f586:	d873      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f588:	2b40      	cmp	r3, #64	; 0x40
 800f58a:	d058      	beq.n	800f63e <HAL_TIM_ConfigClockSource+0x18a>
 800f58c:	2b40      	cmp	r3, #64	; 0x40
 800f58e:	d86f      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f590:	2b30      	cmp	r3, #48	; 0x30
 800f592:	d064      	beq.n	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f594:	2b30      	cmp	r3, #48	; 0x30
 800f596:	d86b      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d060      	beq.n	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f59c:	2b20      	cmp	r3, #32
 800f59e:	d867      	bhi.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d05c      	beq.n	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a4:	2b10      	cmp	r3, #16
 800f5a6:	d05a      	beq.n	800f65e <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a8:	e062      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6818      	ldr	r0, [r3, #0]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	6899      	ldr	r1, [r3, #8]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	f000 fc8b 	bl	800fed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	609a      	str	r2, [r3, #8]
      break;
 800f5d6:	e04f      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6818      	ldr	r0, [r3, #0]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	6899      	ldr	r1, [r3, #8]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	f000 fc74 	bl	800fed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	689a      	ldr	r2, [r3, #8]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5fa:	609a      	str	r2, [r3, #8]
      break;
 800f5fc:	e03c      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6818      	ldr	r0, [r3, #0]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	6859      	ldr	r1, [r3, #4]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	461a      	mov	r2, r3
 800f60c:	f000 fbe4 	bl	800fdd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2150      	movs	r1, #80	; 0x50
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fc3e 	bl	800fe98 <TIM_ITRx_SetConfig>
      break;
 800f61c:	e02c      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6818      	ldr	r0, [r3, #0]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	6859      	ldr	r1, [r3, #4]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	461a      	mov	r2, r3
 800f62c:	f000 fc03 	bl	800fe36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2160      	movs	r1, #96	; 0x60
 800f636:	4618      	mov	r0, r3
 800f638:	f000 fc2e 	bl	800fe98 <TIM_ITRx_SetConfig>
      break;
 800f63c:	e01c      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	6859      	ldr	r1, [r3, #4]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	461a      	mov	r2, r3
 800f64c:	f000 fbc4 	bl	800fdd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2140      	movs	r1, #64	; 0x40
 800f656:	4618      	mov	r0, r3
 800f658:	f000 fc1e 	bl	800fe98 <TIM_ITRx_SetConfig>
      break;
 800f65c:	e00c      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4619      	mov	r1, r3
 800f668:	4610      	mov	r0, r2
 800f66a:	f000 fc15 	bl	800fe98 <TIM_ITRx_SetConfig>
      break;
 800f66e:	e003      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f670:	2301      	movs	r3, #1
 800f672:	73fb      	strb	r3, [r7, #15]
      break;
 800f674:	e000      	b.n	800f678 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f688:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	ffceff88 	.word	0xffceff88
 800f698:	00100040 	.word	0x00100040
 800f69c:	00100030 	.word	0x00100030
 800f6a0:	00100020 	.word	0x00100020

0800f6a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4a46      	ldr	r2, [pc, #280]	; (800f80c <TIM_Base_SetConfig+0x12c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d013      	beq.n	800f720 <TIM_Base_SetConfig+0x40>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6fe:	d00f      	beq.n	800f720 <TIM_Base_SetConfig+0x40>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a43      	ldr	r2, [pc, #268]	; (800f810 <TIM_Base_SetConfig+0x130>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d00b      	beq.n	800f720 <TIM_Base_SetConfig+0x40>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a42      	ldr	r2, [pc, #264]	; (800f814 <TIM_Base_SetConfig+0x134>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d007      	beq.n	800f720 <TIM_Base_SetConfig+0x40>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a41      	ldr	r2, [pc, #260]	; (800f818 <TIM_Base_SetConfig+0x138>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d003      	beq.n	800f720 <TIM_Base_SetConfig+0x40>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a40      	ldr	r2, [pc, #256]	; (800f81c <TIM_Base_SetConfig+0x13c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d108      	bne.n	800f732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	4313      	orrs	r3, r2
 800f730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a35      	ldr	r2, [pc, #212]	; (800f80c <TIM_Base_SetConfig+0x12c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d01f      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f740:	d01b      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a32      	ldr	r2, [pc, #200]	; (800f810 <TIM_Base_SetConfig+0x130>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d017      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a31      	ldr	r2, [pc, #196]	; (800f814 <TIM_Base_SetConfig+0x134>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d013      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a30      	ldr	r2, [pc, #192]	; (800f818 <TIM_Base_SetConfig+0x138>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d00f      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a2f      	ldr	r2, [pc, #188]	; (800f81c <TIM_Base_SetConfig+0x13c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d00b      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a2e      	ldr	r2, [pc, #184]	; (800f820 <TIM_Base_SetConfig+0x140>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d007      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4a2d      	ldr	r2, [pc, #180]	; (800f824 <TIM_Base_SetConfig+0x144>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d003      	beq.n	800f77a <TIM_Base_SetConfig+0x9a>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a2c      	ldr	r2, [pc, #176]	; (800f828 <TIM_Base_SetConfig+0x148>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d108      	bne.n	800f78c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	695b      	ldr	r3, [r3, #20]
 800f796:	4313      	orrs	r3, r2
 800f798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	689a      	ldr	r2, [r3, #8]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a16      	ldr	r2, [pc, #88]	; (800f80c <TIM_Base_SetConfig+0x12c>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d00f      	beq.n	800f7d8 <TIM_Base_SetConfig+0xf8>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a18      	ldr	r2, [pc, #96]	; (800f81c <TIM_Base_SetConfig+0x13c>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d00b      	beq.n	800f7d8 <TIM_Base_SetConfig+0xf8>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a17      	ldr	r2, [pc, #92]	; (800f820 <TIM_Base_SetConfig+0x140>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d007      	beq.n	800f7d8 <TIM_Base_SetConfig+0xf8>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a16      	ldr	r2, [pc, #88]	; (800f824 <TIM_Base_SetConfig+0x144>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d003      	beq.n	800f7d8 <TIM_Base_SetConfig+0xf8>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a15      	ldr	r2, [pc, #84]	; (800f828 <TIM_Base_SetConfig+0x148>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d103      	bne.n	800f7e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	691a      	ldr	r2, [r3, #16]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d105      	bne.n	800f7fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	f023 0201 	bic.w	r2, r3, #1
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	611a      	str	r2, [r3, #16]
  }
}
 800f7fe:	bf00      	nop
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	40010000 	.word	0x40010000
 800f810:	40000400 	.word	0x40000400
 800f814:	40000800 	.word	0x40000800
 800f818:	40000c00 	.word	0x40000c00
 800f81c:	40010400 	.word	0x40010400
 800f820:	40014000 	.word	0x40014000
 800f824:	40014400 	.word	0x40014400
 800f828:	40014800 	.word	0x40014800

0800f82c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	f023 0201 	bic.w	r2, r3, #1
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	4b37      	ldr	r3, [pc, #220]	; (800f934 <TIM_OC1_SetConfig+0x108>)
 800f858:	4013      	ands	r3, r2
 800f85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f023 0303 	bic.w	r3, r3, #3
 800f862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	f023 0302 	bic.w	r3, r3, #2
 800f874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a2d      	ldr	r2, [pc, #180]	; (800f938 <TIM_OC1_SetConfig+0x10c>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d00f      	beq.n	800f8a8 <TIM_OC1_SetConfig+0x7c>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a2c      	ldr	r2, [pc, #176]	; (800f93c <TIM_OC1_SetConfig+0x110>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d00b      	beq.n	800f8a8 <TIM_OC1_SetConfig+0x7c>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a2b      	ldr	r2, [pc, #172]	; (800f940 <TIM_OC1_SetConfig+0x114>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d007      	beq.n	800f8a8 <TIM_OC1_SetConfig+0x7c>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a2a      	ldr	r2, [pc, #168]	; (800f944 <TIM_OC1_SetConfig+0x118>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d003      	beq.n	800f8a8 <TIM_OC1_SetConfig+0x7c>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a29      	ldr	r2, [pc, #164]	; (800f948 <TIM_OC1_SetConfig+0x11c>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d10c      	bne.n	800f8c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	f023 0308 	bic.w	r3, r3, #8
 800f8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f023 0304 	bic.w	r3, r3, #4
 800f8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a1c      	ldr	r2, [pc, #112]	; (800f938 <TIM_OC1_SetConfig+0x10c>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d00f      	beq.n	800f8ea <TIM_OC1_SetConfig+0xbe>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a1b      	ldr	r2, [pc, #108]	; (800f93c <TIM_OC1_SetConfig+0x110>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d00b      	beq.n	800f8ea <TIM_OC1_SetConfig+0xbe>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a1a      	ldr	r2, [pc, #104]	; (800f940 <TIM_OC1_SetConfig+0x114>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d007      	beq.n	800f8ea <TIM_OC1_SetConfig+0xbe>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4a19      	ldr	r2, [pc, #100]	; (800f944 <TIM_OC1_SetConfig+0x118>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d003      	beq.n	800f8ea <TIM_OC1_SetConfig+0xbe>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4a18      	ldr	r2, [pc, #96]	; (800f948 <TIM_OC1_SetConfig+0x11c>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d111      	bne.n	800f90e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	695b      	ldr	r3, [r3, #20]
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	4313      	orrs	r3, r2
 800f902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	693a      	ldr	r2, [r7, #16]
 800f912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	697a      	ldr	r2, [r7, #20]
 800f926:	621a      	str	r2, [r3, #32]
}
 800f928:	bf00      	nop
 800f92a:	371c      	adds	r7, #28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	fffeff8f 	.word	0xfffeff8f
 800f938:	40010000 	.word	0x40010000
 800f93c:	40010400 	.word	0x40010400
 800f940:	40014000 	.word	0x40014000
 800f944:	40014400 	.word	0x40014400
 800f948:	40014800 	.word	0x40014800

0800f94c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b087      	sub	sp, #28
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	f023 0210 	bic.w	r2, r3, #16
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	699b      	ldr	r3, [r3, #24]
 800f972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	4b34      	ldr	r3, [pc, #208]	; (800fa48 <TIM_OC2_SetConfig+0xfc>)
 800f978:	4013      	ands	r3, r2
 800f97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	021b      	lsls	r3, r3, #8
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	f023 0320 	bic.w	r3, r3, #32
 800f996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	011b      	lsls	r3, r3, #4
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a29      	ldr	r2, [pc, #164]	; (800fa4c <TIM_OC2_SetConfig+0x100>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d003      	beq.n	800f9b4 <TIM_OC2_SetConfig+0x68>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a28      	ldr	r2, [pc, #160]	; (800fa50 <TIM_OC2_SetConfig+0x104>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d10d      	bne.n	800f9d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	011b      	lsls	r3, r3, #4
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a1e      	ldr	r2, [pc, #120]	; (800fa4c <TIM_OC2_SetConfig+0x100>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d00f      	beq.n	800f9f8 <TIM_OC2_SetConfig+0xac>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a1d      	ldr	r2, [pc, #116]	; (800fa50 <TIM_OC2_SetConfig+0x104>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d00b      	beq.n	800f9f8 <TIM_OC2_SetConfig+0xac>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a1c      	ldr	r2, [pc, #112]	; (800fa54 <TIM_OC2_SetConfig+0x108>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d007      	beq.n	800f9f8 <TIM_OC2_SetConfig+0xac>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a1b      	ldr	r2, [pc, #108]	; (800fa58 <TIM_OC2_SetConfig+0x10c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d003      	beq.n	800f9f8 <TIM_OC2_SetConfig+0xac>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a1a      	ldr	r2, [pc, #104]	; (800fa5c <TIM_OC2_SetConfig+0x110>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d113      	bne.n	800fa20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	695b      	ldr	r3, [r3, #20]
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	4313      	orrs	r3, r2
 800fa12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	699b      	ldr	r3, [r3, #24]
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	693a      	ldr	r2, [r7, #16]
 800fa24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	621a      	str	r2, [r3, #32]
}
 800fa3a:	bf00      	nop
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	feff8fff 	.word	0xfeff8fff
 800fa4c:	40010000 	.word	0x40010000
 800fa50:	40010400 	.word	0x40010400
 800fa54:	40014000 	.word	0x40014000
 800fa58:	40014400 	.word	0x40014400
 800fa5c:	40014800 	.word	0x40014800

0800fa60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b087      	sub	sp, #28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6a1b      	ldr	r3, [r3, #32]
 800fa6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a1b      	ldr	r3, [r3, #32]
 800fa74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	69db      	ldr	r3, [r3, #28]
 800fa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	4b33      	ldr	r3, [pc, #204]	; (800fb58 <TIM_OC3_SetConfig+0xf8>)
 800fa8c:	4013      	ands	r3, r2
 800fa8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f023 0303 	bic.w	r3, r3, #3
 800fa96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800faa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	689b      	ldr	r3, [r3, #8]
 800faae:	021b      	lsls	r3, r3, #8
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a28      	ldr	r2, [pc, #160]	; (800fb5c <TIM_OC3_SetConfig+0xfc>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d003      	beq.n	800fac6 <TIM_OC3_SetConfig+0x66>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a27      	ldr	r2, [pc, #156]	; (800fb60 <TIM_OC3_SetConfig+0x100>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d10d      	bne.n	800fae2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800facc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	021b      	lsls	r3, r3, #8
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	4313      	orrs	r3, r2
 800fad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a1d      	ldr	r2, [pc, #116]	; (800fb5c <TIM_OC3_SetConfig+0xfc>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d00f      	beq.n	800fb0a <TIM_OC3_SetConfig+0xaa>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a1c      	ldr	r2, [pc, #112]	; (800fb60 <TIM_OC3_SetConfig+0x100>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d00b      	beq.n	800fb0a <TIM_OC3_SetConfig+0xaa>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4a1b      	ldr	r2, [pc, #108]	; (800fb64 <TIM_OC3_SetConfig+0x104>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d007      	beq.n	800fb0a <TIM_OC3_SetConfig+0xaa>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a1a      	ldr	r2, [pc, #104]	; (800fb68 <TIM_OC3_SetConfig+0x108>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d003      	beq.n	800fb0a <TIM_OC3_SetConfig+0xaa>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4a19      	ldr	r2, [pc, #100]	; (800fb6c <TIM_OC3_SetConfig+0x10c>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d113      	bne.n	800fb32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	695b      	ldr	r3, [r3, #20]
 800fb1e:	011b      	lsls	r3, r3, #4
 800fb20:	693a      	ldr	r2, [r7, #16]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	011b      	lsls	r3, r3, #4
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	685a      	ldr	r2, [r3, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	621a      	str	r2, [r3, #32]
}
 800fb4c:	bf00      	nop
 800fb4e:	371c      	adds	r7, #28
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	fffeff8f 	.word	0xfffeff8f
 800fb5c:	40010000 	.word	0x40010000
 800fb60:	40010400 	.word	0x40010400
 800fb64:	40014000 	.word	0x40014000
 800fb68:	40014400 	.word	0x40014400
 800fb6c:	40014800 	.word	0x40014800

0800fb70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b087      	sub	sp, #28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6a1b      	ldr	r3, [r3, #32]
 800fb7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a1b      	ldr	r3, [r3, #32]
 800fb84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <TIM_OC4_SetConfig+0xbc>)
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	021b      	lsls	r3, r3, #8
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	031b      	lsls	r3, r3, #12
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a19      	ldr	r2, [pc, #100]	; (800fc30 <TIM_OC4_SetConfig+0xc0>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d00f      	beq.n	800fbf0 <TIM_OC4_SetConfig+0x80>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a18      	ldr	r2, [pc, #96]	; (800fc34 <TIM_OC4_SetConfig+0xc4>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d00b      	beq.n	800fbf0 <TIM_OC4_SetConfig+0x80>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a17      	ldr	r2, [pc, #92]	; (800fc38 <TIM_OC4_SetConfig+0xc8>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d007      	beq.n	800fbf0 <TIM_OC4_SetConfig+0x80>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a16      	ldr	r2, [pc, #88]	; (800fc3c <TIM_OC4_SetConfig+0xcc>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d003      	beq.n	800fbf0 <TIM_OC4_SetConfig+0x80>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a15      	ldr	r2, [pc, #84]	; (800fc40 <TIM_OC4_SetConfig+0xd0>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d109      	bne.n	800fc04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	019b      	lsls	r3, r3, #6
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685a      	ldr	r2, [r3, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	621a      	str	r2, [r3, #32]
}
 800fc1e:	bf00      	nop
 800fc20:	371c      	adds	r7, #28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	feff8fff 	.word	0xfeff8fff
 800fc30:	40010000 	.word	0x40010000
 800fc34:	40010400 	.word	0x40010400
 800fc38:	40014000 	.word	0x40014000
 800fc3c:	40014400 	.word	0x40014400
 800fc40:	40014800 	.word	0x40014800

0800fc44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b087      	sub	sp, #28
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a1b      	ldr	r3, [r3, #32]
 800fc58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4b21      	ldr	r3, [pc, #132]	; (800fcf4 <TIM_OC5_SetConfig+0xb0>)
 800fc70:	4013      	ands	r3, r2
 800fc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	041b      	lsls	r3, r3, #16
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a18      	ldr	r2, [pc, #96]	; (800fcf8 <TIM_OC5_SetConfig+0xb4>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00f      	beq.n	800fcba <TIM_OC5_SetConfig+0x76>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a17      	ldr	r2, [pc, #92]	; (800fcfc <TIM_OC5_SetConfig+0xb8>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d00b      	beq.n	800fcba <TIM_OC5_SetConfig+0x76>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a16      	ldr	r2, [pc, #88]	; (800fd00 <TIM_OC5_SetConfig+0xbc>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d007      	beq.n	800fcba <TIM_OC5_SetConfig+0x76>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a15      	ldr	r2, [pc, #84]	; (800fd04 <TIM_OC5_SetConfig+0xc0>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d003      	beq.n	800fcba <TIM_OC5_SetConfig+0x76>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a14      	ldr	r2, [pc, #80]	; (800fd08 <TIM_OC5_SetConfig+0xc4>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d109      	bne.n	800fcce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	021b      	lsls	r3, r3, #8
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	4313      	orrs	r3, r2
 800fccc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68fa      	ldr	r2, [r7, #12]
 800fcd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	621a      	str	r2, [r3, #32]
}
 800fce8:	bf00      	nop
 800fcea:	371c      	adds	r7, #28
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	fffeff8f 	.word	0xfffeff8f
 800fcf8:	40010000 	.word	0x40010000
 800fcfc:	40010400 	.word	0x40010400
 800fd00:	40014000 	.word	0x40014000
 800fd04:	40014400 	.word	0x40014400
 800fd08:	40014800 	.word	0x40014800

0800fd0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b087      	sub	sp, #28
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a1b      	ldr	r3, [r3, #32]
 800fd1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a1b      	ldr	r3, [r3, #32]
 800fd20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <TIM_OC6_SetConfig+0xb4>)
 800fd38:	4013      	ands	r3, r2
 800fd3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	021b      	lsls	r3, r3, #8
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	051b      	lsls	r3, r3, #20
 800fd56:	693a      	ldr	r2, [r7, #16]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a19      	ldr	r2, [pc, #100]	; (800fdc4 <TIM_OC6_SetConfig+0xb8>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d00f      	beq.n	800fd84 <TIM_OC6_SetConfig+0x78>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a18      	ldr	r2, [pc, #96]	; (800fdc8 <TIM_OC6_SetConfig+0xbc>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d00b      	beq.n	800fd84 <TIM_OC6_SetConfig+0x78>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a17      	ldr	r2, [pc, #92]	; (800fdcc <TIM_OC6_SetConfig+0xc0>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d007      	beq.n	800fd84 <TIM_OC6_SetConfig+0x78>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a16      	ldr	r2, [pc, #88]	; (800fdd0 <TIM_OC6_SetConfig+0xc4>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d003      	beq.n	800fd84 <TIM_OC6_SetConfig+0x78>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a15      	ldr	r2, [pc, #84]	; (800fdd4 <TIM_OC6_SetConfig+0xc8>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d109      	bne.n	800fd98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	029b      	lsls	r3, r3, #10
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	68fa      	ldr	r2, [r7, #12]
 800fda2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	693a      	ldr	r2, [r7, #16]
 800fdb0:	621a      	str	r2, [r3, #32]
}
 800fdb2:	bf00      	nop
 800fdb4:	371c      	adds	r7, #28
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	feff8fff 	.word	0xfeff8fff
 800fdc4:	40010000 	.word	0x40010000
 800fdc8:	40010400 	.word	0x40010400
 800fdcc:	40014000 	.word	0x40014000
 800fdd0:	40014400 	.word	0x40014400
 800fdd4:	40014800 	.word	0x40014800

0800fdd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6a1b      	ldr	r3, [r3, #32]
 800fde8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	f023 0201 	bic.w	r2, r3, #1
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	699b      	ldr	r3, [r3, #24]
 800fdfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	011b      	lsls	r3, r3, #4
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f023 030a 	bic.w	r3, r3, #10
 800fe14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe16:	697a      	ldr	r2, [r7, #20]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	697a      	ldr	r2, [r7, #20]
 800fe28:	621a      	str	r2, [r3, #32]
}
 800fe2a:	bf00      	nop
 800fe2c:	371c      	adds	r7, #28
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr

0800fe36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe36:	b480      	push	{r7}
 800fe38:	b087      	sub	sp, #28
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	60f8      	str	r0, [r7, #12]
 800fe3e:	60b9      	str	r1, [r7, #8]
 800fe40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	f023 0210 	bic.w	r2, r3, #16
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	699b      	ldr	r3, [r3, #24]
 800fe58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	031b      	lsls	r3, r3, #12
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	693a      	ldr	r2, [r7, #16]
 800fe82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	621a      	str	r2, [r3, #32]
}
 800fe8a:	bf00      	nop
 800fe8c:	371c      	adds	r7, #28
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
	...

0800fe98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <TIM_ITRx_SetConfig+0x38>)
 800feac:	4013      	ands	r3, r2
 800feae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	4313      	orrs	r3, r2
 800feb6:	f043 0307 	orr.w	r3, r3, #7
 800feba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	609a      	str	r2, [r3, #8]
}
 800fec2:	bf00      	nop
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	ffcfff8f 	.word	0xffcfff8f

0800fed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b087      	sub	sp, #28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	689b      	ldr	r3, [r3, #8]
 800fee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	021a      	lsls	r2, r3, #8
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	431a      	orrs	r2, r3
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	609a      	str	r2, [r3, #8]
}
 800ff08:	bf00      	nop
 800ff0a:	371c      	adds	r7, #28
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b087      	sub	sp, #28
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	f003 031f 	and.w	r3, r3, #31
 800ff26:	2201      	movs	r2, #1
 800ff28:	fa02 f303 	lsl.w	r3, r2, r3
 800ff2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6a1a      	ldr	r2, [r3, #32]
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	43db      	mvns	r3, r3
 800ff36:	401a      	ands	r2, r3
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a1a      	ldr	r2, [r3, #32]
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	f003 031f 	and.w	r3, r3, #31
 800ff46:	6879      	ldr	r1, [r7, #4]
 800ff48:	fa01 f303 	lsl.w	r3, r1, r3
 800ff4c:	431a      	orrs	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	621a      	str	r2, [r3, #32]
}
 800ff52:	bf00      	nop
 800ff54:	371c      	adds	r7, #28
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
	...

0800ff60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d101      	bne.n	800ff78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff74:	2302      	movs	r3, #2
 800ff76:	e06d      	b.n	8010054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2202      	movs	r2, #2
 800ff84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a30      	ldr	r2, [pc, #192]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d004      	beq.n	800ffac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a2f      	ldr	r2, [pc, #188]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d108      	bne.n	800ffbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a20      	ldr	r2, [pc, #128]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d022      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffea:	d01d      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a1d      	ldr	r2, [pc, #116]	; (8010068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d018      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a1c      	ldr	r2, [pc, #112]	; (801006c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d013      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a1a      	ldr	r2, [pc, #104]	; (8010070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d00e      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a15      	ldr	r2, [pc, #84]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d009      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a16      	ldr	r2, [pc, #88]	; (8010074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d004      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a15      	ldr	r2, [pc, #84]	; (8010078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d10c      	bne.n	8010042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801002e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	4313      	orrs	r3, r2
 8010038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010052:	2300      	movs	r3, #0
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	40010000 	.word	0x40010000
 8010064:	40010400 	.word	0x40010400
 8010068:	40000400 	.word	0x40000400
 801006c:	40000800 	.word	0x40000800
 8010070:	40000c00 	.word	0x40000c00
 8010074:	40001800 	.word	0x40001800
 8010078:	40014000 	.word	0x40014000

0801007c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010086:	2300      	movs	r3, #0
 8010088:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010090:	2b01      	cmp	r3, #1
 8010092:	d101      	bne.n	8010098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010094:	2302      	movs	r3, #2
 8010096:	e065      	b.n	8010164 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	4313      	orrs	r3, r2
 80100ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	695b      	ldr	r3, [r3, #20]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	699b      	ldr	r3, [r3, #24]
 801010c:	041b      	lsls	r3, r3, #16
 801010e:	4313      	orrs	r3, r2
 8010110:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a16      	ldr	r2, [pc, #88]	; (8010170 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d004      	beq.n	8010126 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a14      	ldr	r2, [pc, #80]	; (8010174 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d115      	bne.n	8010152 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010130:	051b      	lsls	r3, r3, #20
 8010132:	4313      	orrs	r3, r2
 8010134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	69db      	ldr	r3, [r3, #28]
 8010140:	4313      	orrs	r3, r2
 8010142:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	4313      	orrs	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3714      	adds	r7, #20
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	40010000 	.word	0x40010000
 8010174:	40010400 	.word	0x40010400

08010178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d101      	bne.n	80101c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101c2:	2301      	movs	r3, #1
 80101c4:	e042      	b.n	801024c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d106      	bne.n	80101de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7f3 fc01 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2224      	movs	r2, #36	; 0x24
 80101e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f022 0201 	bic.w	r2, r2, #1
 80101f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f001 fc42 	bl	8011a88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fed7 	bl	8010fb8 <UART_SetConfig>
 801020a:	4603      	mov	r3, r0
 801020c:	2b01      	cmp	r3, #1
 801020e:	d101      	bne.n	8010214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010210:	2301      	movs	r3, #1
 8010212:	e01b      	b.n	801024c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	689a      	ldr	r2, [r3, #8]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f042 0201 	orr.w	r2, r2, #1
 8010242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f001 fcc1 	bl	8011bcc <UART_CheckIdleState>
 801024a:	4603      	mov	r3, r0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08a      	sub	sp, #40	; 0x28
 8010258:	af02      	add	r7, sp, #8
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	4613      	mov	r3, r2
 8010262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801026a:	2b20      	cmp	r3, #32
 801026c:	d17b      	bne.n	8010366 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d002      	beq.n	801027a <HAL_UART_Transmit+0x26>
 8010274:	88fb      	ldrh	r3, [r7, #6]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	e074      	b.n	8010368 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2221      	movs	r2, #33	; 0x21
 801028a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801028e:	f7f3 ff1b 	bl	80040c8 <HAL_GetTick>
 8010292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	88fa      	ldrh	r2, [r7, #6]
 8010298:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	88fa      	ldrh	r2, [r7, #6]
 80102a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102ac:	d108      	bne.n	80102c0 <HAL_UART_Transmit+0x6c>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d104      	bne.n	80102c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80102b6:	2300      	movs	r3, #0
 80102b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	61bb      	str	r3, [r7, #24]
 80102be:	e003      	b.n	80102c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102c8:	e030      	b.n	801032c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2200      	movs	r2, #0
 80102d2:	2180      	movs	r1, #128	; 0x80
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f001 fd23 	bl	8011d20 <UART_WaitOnFlagUntilTimeout>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d005      	beq.n	80102ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2220      	movs	r2, #32
 80102e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80102e8:	2303      	movs	r3, #3
 80102ea:	e03d      	b.n	8010368 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10b      	bne.n	801030a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010300:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	3302      	adds	r3, #2
 8010306:	61bb      	str	r3, [r7, #24]
 8010308:	e007      	b.n	801031a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	781a      	ldrb	r2, [r3, #0]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	3301      	adds	r3, #1
 8010318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010320:	b29b      	uxth	r3, r3
 8010322:	3b01      	subs	r3, #1
 8010324:	b29a      	uxth	r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010332:	b29b      	uxth	r3, r3
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1c8      	bne.n	80102ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	2200      	movs	r2, #0
 8010340:	2140      	movs	r1, #64	; 0x40
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f001 fcec 	bl	8011d20 <UART_WaitOnFlagUntilTimeout>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d005      	beq.n	801035a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2220      	movs	r2, #32
 8010352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010356:	2303      	movs	r3, #3
 8010358:	e006      	b.n	8010368 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2220      	movs	r2, #32
 801035e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	e000      	b.n	8010368 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010366:	2302      	movs	r3, #2
  }
}
 8010368:	4618      	mov	r0, r3
 801036a:	3720      	adds	r7, #32
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	; 0x28
 8010374:	af02      	add	r7, sp, #8
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	603b      	str	r3, [r7, #0]
 801037c:	4613      	mov	r3, r2
 801037e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010386:	2b20      	cmp	r3, #32
 8010388:	f040 80b5 	bne.w	80104f6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d002      	beq.n	8010398 <HAL_UART_Receive+0x28>
 8010392:	88fb      	ldrh	r3, [r7, #6]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d101      	bne.n	801039c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010398:	2301      	movs	r3, #1
 801039a:	e0ad      	b.n	80104f8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2200      	movs	r2, #0
 80103a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2222      	movs	r2, #34	; 0x22
 80103a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2200      	movs	r2, #0
 80103b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103b2:	f7f3 fe89 	bl	80040c8 <HAL_GetTick>
 80103b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	88fa      	ldrh	r2, [r7, #6]
 80103bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	88fa      	ldrh	r2, [r7, #6]
 80103c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103d0:	d10e      	bne.n	80103f0 <HAL_UART_Receive+0x80>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d105      	bne.n	80103e6 <HAL_UART_Receive+0x76>
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103e4:	e02d      	b.n	8010442 <HAL_UART_Receive+0xd2>
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	22ff      	movs	r2, #255	; 0xff
 80103ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103ee:	e028      	b.n	8010442 <HAL_UART_Receive+0xd2>
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d10d      	bne.n	8010414 <HAL_UART_Receive+0xa4>
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d104      	bne.n	801040a <HAL_UART_Receive+0x9a>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	22ff      	movs	r2, #255	; 0xff
 8010404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010408:	e01b      	b.n	8010442 <HAL_UART_Receive+0xd2>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	227f      	movs	r2, #127	; 0x7f
 801040e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010412:	e016      	b.n	8010442 <HAL_UART_Receive+0xd2>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801041c:	d10d      	bne.n	801043a <HAL_UART_Receive+0xca>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d104      	bne.n	8010430 <HAL_UART_Receive+0xc0>
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	227f      	movs	r2, #127	; 0x7f
 801042a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801042e:	e008      	b.n	8010442 <HAL_UART_Receive+0xd2>
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	223f      	movs	r2, #63	; 0x3f
 8010434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010438:	e003      	b.n	8010442 <HAL_UART_Receive+0xd2>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010448:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	689b      	ldr	r3, [r3, #8]
 801044e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010452:	d108      	bne.n	8010466 <HAL_UART_Receive+0xf6>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	691b      	ldr	r3, [r3, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d104      	bne.n	8010466 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801045c:	2300      	movs	r3, #0
 801045e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	61bb      	str	r3, [r7, #24]
 8010464:	e003      	b.n	801046e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801046a:	2300      	movs	r3, #0
 801046c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801046e:	e036      	b.n	80104de <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2200      	movs	r2, #0
 8010478:	2120      	movs	r1, #32
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f001 fc50 	bl	8011d20 <UART_WaitOnFlagUntilTimeout>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d005      	beq.n	8010492 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2220      	movs	r2, #32
 801048a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801048e:	2303      	movs	r3, #3
 8010490:	e032      	b.n	80104f8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10c      	bne.n	80104b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049e:	b29a      	uxth	r2, r3
 80104a0:	8a7b      	ldrh	r3, [r7, #18]
 80104a2:	4013      	ands	r3, r2
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	3302      	adds	r3, #2
 80104ae:	61bb      	str	r3, [r7, #24]
 80104b0:	e00c      	b.n	80104cc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	8a7b      	ldrh	r3, [r7, #18]
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	4013      	ands	r3, r2
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	3301      	adds	r3, #1
 80104ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	3b01      	subs	r3, #1
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1c2      	bne.n	8010470 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2220      	movs	r2, #32
 80104ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e000      	b.n	80104f8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80104f6:	2302      	movs	r3, #2
  }
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08a      	sub	sp, #40	; 0x28
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010514:	2b20      	cmp	r3, #32
 8010516:	d137      	bne.n	8010588 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d002      	beq.n	8010524 <HAL_UART_Receive_IT+0x24>
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d101      	bne.n	8010528 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e030      	b.n	801058a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2200      	movs	r2, #0
 801052c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a18      	ldr	r2, [pc, #96]	; (8010594 <HAL_UART_Receive_IT+0x94>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d01f      	beq.n	8010578 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010542:	2b00      	cmp	r3, #0
 8010544:	d018      	beq.n	8010578 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	e853 3f00 	ldrex	r3, [r3]
 8010552:	613b      	str	r3, [r7, #16]
   return(result);
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801055a:	627b      	str	r3, [r7, #36]	; 0x24
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	461a      	mov	r2, r3
 8010562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010564:	623b      	str	r3, [r7, #32]
 8010566:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010568:	69f9      	ldr	r1, [r7, #28]
 801056a:	6a3a      	ldr	r2, [r7, #32]
 801056c:	e841 2300 	strex	r3, r2, [r1]
 8010570:	61bb      	str	r3, [r7, #24]
   return(result);
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1e6      	bne.n	8010546 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010578:	88fb      	ldrh	r3, [r7, #6]
 801057a:	461a      	mov	r2, r3
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f001 fc3c 	bl	8011dfc <UART_Start_Receive_IT>
 8010584:	4603      	mov	r3, r0
 8010586:	e000      	b.n	801058a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010588:	2302      	movs	r3, #2
  }
}
 801058a:	4618      	mov	r0, r3
 801058c:	3728      	adds	r7, #40	; 0x28
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	58000c00 	.word	0x58000c00

08010598 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	4613      	mov	r3, r2
 80105a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ac:	2b20      	cmp	r3, #32
 80105ae:	d167      	bne.n	8010680 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <HAL_UART_Transmit_DMA+0x24>
 80105b6:	88fb      	ldrh	r3, [r7, #6]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	e060      	b.n	8010682 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	88fa      	ldrh	r2, [r7, #6]
 80105ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	88fa      	ldrh	r2, [r7, #6]
 80105d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2221      	movs	r2, #33	; 0x21
 80105e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d028      	beq.n	8010640 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105f2:	4a26      	ldr	r2, [pc, #152]	; (801068c <HAL_UART_Transmit_DMA+0xf4>)
 80105f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105fa:	4a25      	ldr	r2, [pc, #148]	; (8010690 <HAL_UART_Transmit_DMA+0xf8>)
 80105fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010602:	4a24      	ldr	r2, [pc, #144]	; (8010694 <HAL_UART_Transmit_DMA+0xfc>)
 8010604:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801060a:	2200      	movs	r2, #0
 801060c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010616:	4619      	mov	r1, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	3328      	adds	r3, #40	; 0x28
 801061e:	461a      	mov	r2, r3
 8010620:	88fb      	ldrh	r3, [r7, #6]
 8010622:	f7f6 f9d5 	bl	80069d0 <HAL_DMA_Start_IT>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d009      	beq.n	8010640 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2210      	movs	r2, #16
 8010630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2220      	movs	r2, #32
 8010638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801063c:	2301      	movs	r3, #1
 801063e:	e020      	b.n	8010682 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2240      	movs	r2, #64	; 0x40
 8010646:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3308      	adds	r3, #8
 801064e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	e853 3f00 	ldrex	r3, [r3]
 8010656:	613b      	str	r3, [r7, #16]
   return(result);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065e:	627b      	str	r3, [r7, #36]	; 0x24
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	3308      	adds	r3, #8
 8010666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010668:	623a      	str	r2, [r7, #32]
 801066a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066c:	69f9      	ldr	r1, [r7, #28]
 801066e:	6a3a      	ldr	r2, [r7, #32]
 8010670:	e841 2300 	strex	r3, r2, [r1]
 8010674:	61bb      	str	r3, [r7, #24]
   return(result);
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1e5      	bne.n	8010648 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801067c:	2300      	movs	r3, #0
 801067e:	e000      	b.n	8010682 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010680:	2302      	movs	r3, #2
  }
}
 8010682:	4618      	mov	r0, r3
 8010684:	3728      	adds	r7, #40	; 0x28
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	08012191 	.word	0x08012191
 8010690:	08012227 	.word	0x08012227
 8010694:	08012243 	.word	0x08012243

08010698 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b09a      	sub	sp, #104	; 0x68
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a8:	e853 3f00 	ldrex	r3, [r3]
 80106ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80106ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106b4:	667b      	str	r3, [r7, #100]	; 0x64
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	461a      	mov	r2, r3
 80106bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106be:	657b      	str	r3, [r7, #84]	; 0x54
 80106c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106c6:	e841 2300 	strex	r3, r2, [r1]
 80106ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80106cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1e6      	bne.n	80106a0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	3308      	adds	r3, #8
 80106d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106dc:	e853 3f00 	ldrex	r3, [r3]
 80106e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106e4:	4b46      	ldr	r3, [pc, #280]	; (8010800 <HAL_UART_AbortReceive+0x168>)
 80106e6:	4013      	ands	r3, r2
 80106e8:	663b      	str	r3, [r7, #96]	; 0x60
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3308      	adds	r3, #8
 80106f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106f2:	643a      	str	r2, [r7, #64]	; 0x40
 80106f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106fa:	e841 2300 	strex	r3, r2, [r1]
 80106fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1e5      	bne.n	80106d2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801070a:	2b01      	cmp	r3, #1
 801070c:	d118      	bne.n	8010740 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	e853 3f00 	ldrex	r3, [r3]
 801071a:	61fb      	str	r3, [r7, #28]
   return(result);
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	f023 0310 	bic.w	r3, r3, #16
 8010722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801072c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801072e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010734:	e841 2300 	strex	r3, r2, [r1]
 8010738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1e6      	bne.n	801070e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801074a:	2b40      	cmp	r3, #64	; 0x40
 801074c:	d13b      	bne.n	80107c6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3308      	adds	r3, #8
 8010754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	60bb      	str	r3, [r7, #8]
   return(result);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010764:	65bb      	str	r3, [r7, #88]	; 0x58
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	3308      	adds	r3, #8
 801076c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801076e:	61ba      	str	r2, [r7, #24]
 8010770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	6979      	ldr	r1, [r7, #20]
 8010774:	69ba      	ldr	r2, [r7, #24]
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	613b      	str	r3, [r7, #16]
   return(result);
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e5      	bne.n	801074e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01c      	beq.n	80107c6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010792:	2200      	movs	r2, #0
 8010794:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801079c:	4618      	mov	r0, r3
 801079e:	f7f6 fb81 	bl	8006ea4 <HAL_DMA_Abort>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00e      	beq.n	80107c6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7f8 f806 	bl	80087c0 <HAL_DMA_GetError>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b20      	cmp	r3, #32
 80107b8:	d105      	bne.n	80107c6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2210      	movs	r2, #16
 80107be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e017      	b.n	80107f6 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	220f      	movs	r2, #15
 80107d4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	699a      	ldr	r2, [r3, #24]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f042 0208 	orr.w	r2, r2, #8
 80107e4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2220      	movs	r2, #32
 80107ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3768      	adds	r7, #104	; 0x68
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	effffffe 	.word	0xeffffffe

08010804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b0ba      	sub	sp, #232	; 0xe8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801082a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801082e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010832:	4013      	ands	r3, r2
 8010834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801083c:	2b00      	cmp	r3, #0
 801083e:	d11b      	bne.n	8010878 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010844:	f003 0320 	and.w	r3, r3, #32
 8010848:	2b00      	cmp	r3, #0
 801084a:	d015      	beq.n	8010878 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801084c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010850:	f003 0320 	and.w	r3, r3, #32
 8010854:	2b00      	cmp	r3, #0
 8010856:	d105      	bne.n	8010864 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010860:	2b00      	cmp	r3, #0
 8010862:	d009      	beq.n	8010878 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 8377 	beq.w	8010f5c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	4798      	blx	r3
      }
      return;
 8010876:	e371      	b.n	8010f5c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 8123 	beq.w	8010ac8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010882:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010886:	4b8d      	ldr	r3, [pc, #564]	; (8010abc <HAL_UART_IRQHandler+0x2b8>)
 8010888:	4013      	ands	r3, r2
 801088a:	2b00      	cmp	r3, #0
 801088c:	d106      	bne.n	801089c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801088e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010892:	4b8b      	ldr	r3, [pc, #556]	; (8010ac0 <HAL_UART_IRQHandler+0x2bc>)
 8010894:	4013      	ands	r3, r2
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 8116 	beq.w	8010ac8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801089c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108a0:	f003 0301 	and.w	r3, r3, #1
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d011      	beq.n	80108cc <HAL_UART_IRQHandler+0xc8>
 80108a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00b      	beq.n	80108cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2201      	movs	r2, #1
 80108ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108c2:	f043 0201 	orr.w	r2, r3, #1
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108d0:	f003 0302 	and.w	r3, r3, #2
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d011      	beq.n	80108fc <HAL_UART_IRQHandler+0xf8>
 80108d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00b      	beq.n	80108fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2202      	movs	r2, #2
 80108ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108f2:	f043 0204 	orr.w	r2, r3, #4
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010900:	f003 0304 	and.w	r3, r3, #4
 8010904:	2b00      	cmp	r3, #0
 8010906:	d011      	beq.n	801092c <HAL_UART_IRQHandler+0x128>
 8010908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00b      	beq.n	801092c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2204      	movs	r2, #4
 801091a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010922:	f043 0202 	orr.w	r2, r3, #2
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801092c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010930:	f003 0308 	and.w	r3, r3, #8
 8010934:	2b00      	cmp	r3, #0
 8010936:	d017      	beq.n	8010968 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801093c:	f003 0320 	and.w	r3, r3, #32
 8010940:	2b00      	cmp	r3, #0
 8010942:	d105      	bne.n	8010950 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010944:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010948:	4b5c      	ldr	r3, [pc, #368]	; (8010abc <HAL_UART_IRQHandler+0x2b8>)
 801094a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00b      	beq.n	8010968 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2208      	movs	r2, #8
 8010956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801095e:	f043 0208 	orr.w	r2, r3, #8
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801096c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010970:	2b00      	cmp	r3, #0
 8010972:	d012      	beq.n	801099a <HAL_UART_IRQHandler+0x196>
 8010974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00c      	beq.n	801099a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010990:	f043 0220 	orr.w	r2, r3, #32
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 82dd 	beq.w	8010f60 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80109a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109aa:	f003 0320 	and.w	r3, r3, #32
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d013      	beq.n	80109da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109b6:	f003 0320 	and.w	r3, r3, #32
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d007      	beq.n	80109da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d003      	beq.n	80109da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	689b      	ldr	r3, [r3, #8]
 80109ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ee:	2b40      	cmp	r3, #64	; 0x40
 80109f0:	d005      	beq.n	80109fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d054      	beq.n	8010aa8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f001 fb60 	bl	80120c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a0e:	2b40      	cmp	r3, #64	; 0x40
 8010a10:	d146      	bne.n	8010aa0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3308      	adds	r3, #8
 8010a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a20:	e853 3f00 	ldrex	r3, [r3]
 8010a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3308      	adds	r3, #8
 8010a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a4e:	e841 2300 	strex	r3, r2, [r1]
 8010a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1d9      	bne.n	8010a12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d017      	beq.n	8010a98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6e:	4a15      	ldr	r2, [pc, #84]	; (8010ac4 <HAL_UART_IRQHandler+0x2c0>)
 8010a70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f6 fd31 	bl	80074e0 <HAL_DMA_Abort_IT>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d019      	beq.n	8010ab8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010a92:	4610      	mov	r0, r2
 8010a94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a96:	e00f      	b.n	8010ab8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 fa77 	bl	8010f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a9e:	e00b      	b.n	8010ab8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 fa73 	bl	8010f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aa6:	e007      	b.n	8010ab8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 fa6f 	bl	8010f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010ab6:	e253      	b.n	8010f60 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ab8:	bf00      	nop
    return;
 8010aba:	e251      	b.n	8010f60 <HAL_UART_IRQHandler+0x75c>
 8010abc:	10000001 	.word	0x10000001
 8010ac0:	04000120 	.word	0x04000120
 8010ac4:	080122c3 	.word	0x080122c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	f040 81e7 	bne.w	8010ea0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ad6:	f003 0310 	and.w	r3, r3, #16
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 81e0 	beq.w	8010ea0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ae4:	f003 0310 	and.w	r3, r3, #16
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f000 81d9 	beq.w	8010ea0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2210      	movs	r2, #16
 8010af4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b00:	2b40      	cmp	r3, #64	; 0x40
 8010b02:	f040 8151 	bne.w	8010da8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a96      	ldr	r2, [pc, #600]	; (8010d68 <HAL_UART_IRQHandler+0x564>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d068      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a93      	ldr	r2, [pc, #588]	; (8010d6c <HAL_UART_IRQHandler+0x568>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d061      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a91      	ldr	r2, [pc, #580]	; (8010d70 <HAL_UART_IRQHandler+0x56c>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d05a      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a8e      	ldr	r2, [pc, #568]	; (8010d74 <HAL_UART_IRQHandler+0x570>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d053      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a8c      	ldr	r2, [pc, #560]	; (8010d78 <HAL_UART_IRQHandler+0x574>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d04c      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a89      	ldr	r2, [pc, #548]	; (8010d7c <HAL_UART_IRQHandler+0x578>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d045      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a87      	ldr	r2, [pc, #540]	; (8010d80 <HAL_UART_IRQHandler+0x57c>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d03e      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a84      	ldr	r2, [pc, #528]	; (8010d84 <HAL_UART_IRQHandler+0x580>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d037      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a82      	ldr	r2, [pc, #520]	; (8010d88 <HAL_UART_IRQHandler+0x584>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d030      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a7f      	ldr	r2, [pc, #508]	; (8010d8c <HAL_UART_IRQHandler+0x588>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d029      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a7d      	ldr	r2, [pc, #500]	; (8010d90 <HAL_UART_IRQHandler+0x58c>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d022      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a7a      	ldr	r2, [pc, #488]	; (8010d94 <HAL_UART_IRQHandler+0x590>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d01b      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a78      	ldr	r2, [pc, #480]	; (8010d98 <HAL_UART_IRQHandler+0x594>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d014      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a75      	ldr	r2, [pc, #468]	; (8010d9c <HAL_UART_IRQHandler+0x598>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d00d      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4a73      	ldr	r2, [pc, #460]	; (8010da0 <HAL_UART_IRQHandler+0x59c>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d006      	beq.n	8010be6 <HAL_UART_IRQHandler+0x3e2>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a70      	ldr	r2, [pc, #448]	; (8010da4 <HAL_UART_IRQHandler+0x5a0>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d106      	bne.n	8010bf4 <HAL_UART_IRQHandler+0x3f0>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	e005      	b.n	8010c00 <HAL_UART_IRQHandler+0x3fc>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f000 81ab 	beq.w	8010f64 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	f080 81a3 	bcs.w	8010f64 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c2e:	69db      	ldr	r3, [r3, #28]
 8010c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c34:	f000 8087 	beq.w	8010d46 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c44:	e853 3f00 	ldrex	r3, [r3]
 8010c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010c66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010c72:	e841 2300 	strex	r3, r2, [r1]
 8010c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1da      	bne.n	8010c38 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3308      	adds	r3, #8
 8010c88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c8c:	e853 3f00 	ldrex	r3, [r3]
 8010c90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c94:	f023 0301 	bic.w	r3, r3, #1
 8010c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ca6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010caa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010cb2:	e841 2300 	strex	r3, r2, [r1]
 8010cb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1e1      	bne.n	8010c82 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3308      	adds	r3, #8
 8010cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010ce2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ce4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ce8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010cea:	e841 2300 	strex	r3, r2, [r1]
 8010cee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e3      	bne.n	8010cbe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2220      	movs	r2, #32
 8010cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2200      	movs	r2, #0
 8010d02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0c:	e853 3f00 	ldrex	r3, [r3]
 8010d10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d14:	f023 0310 	bic.w	r3, r3, #16
 8010d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	461a      	mov	r2, r3
 8010d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d26:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d2e:	e841 2300 	strex	r3, r2, [r1]
 8010d32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1e4      	bne.n	8010d04 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f6 f8af 	bl	8006ea4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2202      	movs	r2, #2
 8010d4a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4619      	mov	r1, r3
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 f91d 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d66:	e0fd      	b.n	8010f64 <HAL_UART_IRQHandler+0x760>
 8010d68:	40020010 	.word	0x40020010
 8010d6c:	40020028 	.word	0x40020028
 8010d70:	40020040 	.word	0x40020040
 8010d74:	40020058 	.word	0x40020058
 8010d78:	40020070 	.word	0x40020070
 8010d7c:	40020088 	.word	0x40020088
 8010d80:	400200a0 	.word	0x400200a0
 8010d84:	400200b8 	.word	0x400200b8
 8010d88:	40020410 	.word	0x40020410
 8010d8c:	40020428 	.word	0x40020428
 8010d90:	40020440 	.word	0x40020440
 8010d94:	40020458 	.word	0x40020458
 8010d98:	40020470 	.word	0x40020470
 8010d9c:	40020488 	.word	0x40020488
 8010da0:	400204a0 	.word	0x400204a0
 8010da4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 80cf 	beq.w	8010f68 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010dca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f000 80ca 	beq.w	8010f68 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ddc:	e853 3f00 	ldrex	r3, [r3]
 8010de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	461a      	mov	r2, r3
 8010df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010df6:	647b      	str	r3, [r7, #68]	; 0x44
 8010df8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010dfe:	e841 2300 	strex	r3, r2, [r1]
 8010e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e4      	bne.n	8010dd4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3308      	adds	r3, #8
 8010e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e14:	e853 3f00 	ldrex	r3, [r3]
 8010e18:	623b      	str	r3, [r7, #32]
   return(result);
 8010e1a:	6a3a      	ldr	r2, [r7, #32]
 8010e1c:	4b55      	ldr	r3, [pc, #340]	; (8010f74 <HAL_UART_IRQHandler+0x770>)
 8010e1e:	4013      	ands	r3, r2
 8010e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	3308      	adds	r3, #8
 8010e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8010e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e36:	e841 2300 	strex	r3, r2, [r1]
 8010e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1e3      	bne.n	8010e0a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2220      	movs	r2, #32
 8010e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2200      	movs	r2, #0
 8010e54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	e853 3f00 	ldrex	r3, [r3]
 8010e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f023 0310 	bic.w	r3, r3, #16
 8010e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	461a      	mov	r2, r3
 8010e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e7c:	69b9      	ldr	r1, [r7, #24]
 8010e7e:	69fa      	ldr	r2, [r7, #28]
 8010e80:	e841 2300 	strex	r3, r2, [r1]
 8010e84:	617b      	str	r3, [r7, #20]
   return(result);
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1e4      	bne.n	8010e56 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2202      	movs	r2, #2
 8010e90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f881 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e9e:	e063      	b.n	8010f68 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00e      	beq.n	8010eca <HAL_UART_IRQHandler+0x6c6>
 8010eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d008      	beq.n	8010eca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f001 ff5a 	bl	8012d7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ec8:	e051      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d014      	beq.n	8010f00 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d105      	bne.n	8010eee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d008      	beq.n	8010f00 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d03a      	beq.n	8010f6c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	4798      	blx	r3
    }
    return;
 8010efe:	e035      	b.n	8010f6c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d009      	beq.n	8010f20 <HAL_UART_IRQHandler+0x71c>
 8010f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d003      	beq.n	8010f20 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 f9e8 	bl	80122ee <UART_EndTransmit_IT>
    return;
 8010f1e:	e026      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d009      	beq.n	8010f40 <HAL_UART_IRQHandler+0x73c>
 8010f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d003      	beq.n	8010f40 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 ff33 	bl	8012da4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f3e:	e016      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d010      	beq.n	8010f6e <HAL_UART_IRQHandler+0x76a>
 8010f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	da0c      	bge.n	8010f6e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f001 ff1b 	bl	8012d90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f5a:	e008      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
      return;
 8010f5c:	bf00      	nop
 8010f5e:	e006      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
    return;
 8010f60:	bf00      	nop
 8010f62:	e004      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
      return;
 8010f64:	bf00      	nop
 8010f66:	e002      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
      return;
 8010f68:	bf00      	nop
 8010f6a:	e000      	b.n	8010f6e <HAL_UART_IRQHandler+0x76a>
    return;
 8010f6c:	bf00      	nop
  }
}
 8010f6e:	37e8      	adds	r7, #232	; 0xe8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	effffffe 	.word	0xeffffffe

08010f78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010fbc:	b092      	sub	sp, #72	; 0x48
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	689a      	ldr	r2, [r3, #8]
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	691b      	ldr	r3, [r3, #16]
 8010fd0:	431a      	orrs	r2, r3
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	431a      	orrs	r2, r3
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	69db      	ldr	r3, [r3, #28]
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	4bbe      	ldr	r3, [pc, #760]	; (80112e0 <UART_SetConfig+0x328>)
 8010fe8:	4013      	ands	r3, r2
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	6812      	ldr	r2, [r2, #0]
 8010fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ff0:	430b      	orrs	r3, r1
 8010ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	68da      	ldr	r2, [r3, #12]
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	430a      	orrs	r2, r1
 8011008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	699b      	ldr	r3, [r3, #24]
 801100e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4ab3      	ldr	r2, [pc, #716]	; (80112e4 <UART_SetConfig+0x32c>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d004      	beq.n	8011024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011020:	4313      	orrs	r3, r2
 8011022:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689a      	ldr	r2, [r3, #8]
 801102a:	4baf      	ldr	r3, [pc, #700]	; (80112e8 <UART_SetConfig+0x330>)
 801102c:	4013      	ands	r3, r2
 801102e:	697a      	ldr	r2, [r7, #20]
 8011030:	6812      	ldr	r2, [r2, #0]
 8011032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011034:	430b      	orrs	r3, r1
 8011036:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	f023 010f 	bic.w	r1, r3, #15
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	430a      	orrs	r2, r1
 801104c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	4aa6      	ldr	r2, [pc, #664]	; (80112ec <UART_SetConfig+0x334>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d177      	bne.n	8011148 <UART_SetConfig+0x190>
 8011058:	4ba5      	ldr	r3, [pc, #660]	; (80112f0 <UART_SetConfig+0x338>)
 801105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801105c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011060:	2b28      	cmp	r3, #40	; 0x28
 8011062:	d86d      	bhi.n	8011140 <UART_SetConfig+0x188>
 8011064:	a201      	add	r2, pc, #4	; (adr r2, 801106c <UART_SetConfig+0xb4>)
 8011066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106a:	bf00      	nop
 801106c:	08011111 	.word	0x08011111
 8011070:	08011141 	.word	0x08011141
 8011074:	08011141 	.word	0x08011141
 8011078:	08011141 	.word	0x08011141
 801107c:	08011141 	.word	0x08011141
 8011080:	08011141 	.word	0x08011141
 8011084:	08011141 	.word	0x08011141
 8011088:	08011141 	.word	0x08011141
 801108c:	08011119 	.word	0x08011119
 8011090:	08011141 	.word	0x08011141
 8011094:	08011141 	.word	0x08011141
 8011098:	08011141 	.word	0x08011141
 801109c:	08011141 	.word	0x08011141
 80110a0:	08011141 	.word	0x08011141
 80110a4:	08011141 	.word	0x08011141
 80110a8:	08011141 	.word	0x08011141
 80110ac:	08011121 	.word	0x08011121
 80110b0:	08011141 	.word	0x08011141
 80110b4:	08011141 	.word	0x08011141
 80110b8:	08011141 	.word	0x08011141
 80110bc:	08011141 	.word	0x08011141
 80110c0:	08011141 	.word	0x08011141
 80110c4:	08011141 	.word	0x08011141
 80110c8:	08011141 	.word	0x08011141
 80110cc:	08011129 	.word	0x08011129
 80110d0:	08011141 	.word	0x08011141
 80110d4:	08011141 	.word	0x08011141
 80110d8:	08011141 	.word	0x08011141
 80110dc:	08011141 	.word	0x08011141
 80110e0:	08011141 	.word	0x08011141
 80110e4:	08011141 	.word	0x08011141
 80110e8:	08011141 	.word	0x08011141
 80110ec:	08011131 	.word	0x08011131
 80110f0:	08011141 	.word	0x08011141
 80110f4:	08011141 	.word	0x08011141
 80110f8:	08011141 	.word	0x08011141
 80110fc:	08011141 	.word	0x08011141
 8011100:	08011141 	.word	0x08011141
 8011104:	08011141 	.word	0x08011141
 8011108:	08011141 	.word	0x08011141
 801110c:	08011139 	.word	0x08011139
 8011110:	2301      	movs	r3, #1
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011116:	e222      	b.n	801155e <UART_SetConfig+0x5a6>
 8011118:	2304      	movs	r3, #4
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e21e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011120:	2308      	movs	r3, #8
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e21a      	b.n	801155e <UART_SetConfig+0x5a6>
 8011128:	2310      	movs	r3, #16
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e216      	b.n	801155e <UART_SetConfig+0x5a6>
 8011130:	2320      	movs	r3, #32
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e212      	b.n	801155e <UART_SetConfig+0x5a6>
 8011138:	2340      	movs	r3, #64	; 0x40
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e20e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011140:	2380      	movs	r3, #128	; 0x80
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e20a      	b.n	801155e <UART_SetConfig+0x5a6>
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4a69      	ldr	r2, [pc, #420]	; (80112f4 <UART_SetConfig+0x33c>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d130      	bne.n	80111b4 <UART_SetConfig+0x1fc>
 8011152:	4b67      	ldr	r3, [pc, #412]	; (80112f0 <UART_SetConfig+0x338>)
 8011154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011156:	f003 0307 	and.w	r3, r3, #7
 801115a:	2b05      	cmp	r3, #5
 801115c:	d826      	bhi.n	80111ac <UART_SetConfig+0x1f4>
 801115e:	a201      	add	r2, pc, #4	; (adr r2, 8011164 <UART_SetConfig+0x1ac>)
 8011160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011164:	0801117d 	.word	0x0801117d
 8011168:	08011185 	.word	0x08011185
 801116c:	0801118d 	.word	0x0801118d
 8011170:	08011195 	.word	0x08011195
 8011174:	0801119d 	.word	0x0801119d
 8011178:	080111a5 	.word	0x080111a5
 801117c:	2300      	movs	r3, #0
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e1ec      	b.n	801155e <UART_SetConfig+0x5a6>
 8011184:	2304      	movs	r3, #4
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e1e8      	b.n	801155e <UART_SetConfig+0x5a6>
 801118c:	2308      	movs	r3, #8
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e1e4      	b.n	801155e <UART_SetConfig+0x5a6>
 8011194:	2310      	movs	r3, #16
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e1e0      	b.n	801155e <UART_SetConfig+0x5a6>
 801119c:	2320      	movs	r3, #32
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e1dc      	b.n	801155e <UART_SetConfig+0x5a6>
 80111a4:	2340      	movs	r3, #64	; 0x40
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e1d8      	b.n	801155e <UART_SetConfig+0x5a6>
 80111ac:	2380      	movs	r3, #128	; 0x80
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e1d4      	b.n	801155e <UART_SetConfig+0x5a6>
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a4f      	ldr	r2, [pc, #316]	; (80112f8 <UART_SetConfig+0x340>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d130      	bne.n	8011220 <UART_SetConfig+0x268>
 80111be:	4b4c      	ldr	r3, [pc, #304]	; (80112f0 <UART_SetConfig+0x338>)
 80111c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111c2:	f003 0307 	and.w	r3, r3, #7
 80111c6:	2b05      	cmp	r3, #5
 80111c8:	d826      	bhi.n	8011218 <UART_SetConfig+0x260>
 80111ca:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <UART_SetConfig+0x218>)
 80111cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d0:	080111e9 	.word	0x080111e9
 80111d4:	080111f1 	.word	0x080111f1
 80111d8:	080111f9 	.word	0x080111f9
 80111dc:	08011201 	.word	0x08011201
 80111e0:	08011209 	.word	0x08011209
 80111e4:	08011211 	.word	0x08011211
 80111e8:	2300      	movs	r3, #0
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e1b6      	b.n	801155e <UART_SetConfig+0x5a6>
 80111f0:	2304      	movs	r3, #4
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e1b2      	b.n	801155e <UART_SetConfig+0x5a6>
 80111f8:	2308      	movs	r3, #8
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e1ae      	b.n	801155e <UART_SetConfig+0x5a6>
 8011200:	2310      	movs	r3, #16
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e1aa      	b.n	801155e <UART_SetConfig+0x5a6>
 8011208:	2320      	movs	r3, #32
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e1a6      	b.n	801155e <UART_SetConfig+0x5a6>
 8011210:	2340      	movs	r3, #64	; 0x40
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e1a2      	b.n	801155e <UART_SetConfig+0x5a6>
 8011218:	2380      	movs	r3, #128	; 0x80
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e19e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4a35      	ldr	r2, [pc, #212]	; (80112fc <UART_SetConfig+0x344>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d130      	bne.n	801128c <UART_SetConfig+0x2d4>
 801122a:	4b31      	ldr	r3, [pc, #196]	; (80112f0 <UART_SetConfig+0x338>)
 801122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801122e:	f003 0307 	and.w	r3, r3, #7
 8011232:	2b05      	cmp	r3, #5
 8011234:	d826      	bhi.n	8011284 <UART_SetConfig+0x2cc>
 8011236:	a201      	add	r2, pc, #4	; (adr r2, 801123c <UART_SetConfig+0x284>)
 8011238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123c:	08011255 	.word	0x08011255
 8011240:	0801125d 	.word	0x0801125d
 8011244:	08011265 	.word	0x08011265
 8011248:	0801126d 	.word	0x0801126d
 801124c:	08011275 	.word	0x08011275
 8011250:	0801127d 	.word	0x0801127d
 8011254:	2300      	movs	r3, #0
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e180      	b.n	801155e <UART_SetConfig+0x5a6>
 801125c:	2304      	movs	r3, #4
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e17c      	b.n	801155e <UART_SetConfig+0x5a6>
 8011264:	2308      	movs	r3, #8
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e178      	b.n	801155e <UART_SetConfig+0x5a6>
 801126c:	2310      	movs	r3, #16
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e174      	b.n	801155e <UART_SetConfig+0x5a6>
 8011274:	2320      	movs	r3, #32
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e170      	b.n	801155e <UART_SetConfig+0x5a6>
 801127c:	2340      	movs	r3, #64	; 0x40
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e16c      	b.n	801155e <UART_SetConfig+0x5a6>
 8011284:	2380      	movs	r3, #128	; 0x80
 8011286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128a:	e168      	b.n	801155e <UART_SetConfig+0x5a6>
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	4a1b      	ldr	r2, [pc, #108]	; (8011300 <UART_SetConfig+0x348>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d142      	bne.n	801131c <UART_SetConfig+0x364>
 8011296:	4b16      	ldr	r3, [pc, #88]	; (80112f0 <UART_SetConfig+0x338>)
 8011298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801129a:	f003 0307 	and.w	r3, r3, #7
 801129e:	2b05      	cmp	r3, #5
 80112a0:	d838      	bhi.n	8011314 <UART_SetConfig+0x35c>
 80112a2:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <UART_SetConfig+0x2f0>)
 80112a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a8:	080112c1 	.word	0x080112c1
 80112ac:	080112c9 	.word	0x080112c9
 80112b0:	080112d1 	.word	0x080112d1
 80112b4:	080112d9 	.word	0x080112d9
 80112b8:	08011305 	.word	0x08011305
 80112bc:	0801130d 	.word	0x0801130d
 80112c0:	2300      	movs	r3, #0
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e14a      	b.n	801155e <UART_SetConfig+0x5a6>
 80112c8:	2304      	movs	r3, #4
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e146      	b.n	801155e <UART_SetConfig+0x5a6>
 80112d0:	2308      	movs	r3, #8
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e142      	b.n	801155e <UART_SetConfig+0x5a6>
 80112d8:	2310      	movs	r3, #16
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e13e      	b.n	801155e <UART_SetConfig+0x5a6>
 80112e0:	cfff69f3 	.word	0xcfff69f3
 80112e4:	58000c00 	.word	0x58000c00
 80112e8:	11fff4ff 	.word	0x11fff4ff
 80112ec:	40011000 	.word	0x40011000
 80112f0:	58024400 	.word	0x58024400
 80112f4:	40004400 	.word	0x40004400
 80112f8:	40004800 	.word	0x40004800
 80112fc:	40004c00 	.word	0x40004c00
 8011300:	40005000 	.word	0x40005000
 8011304:	2320      	movs	r3, #32
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e128      	b.n	801155e <UART_SetConfig+0x5a6>
 801130c:	2340      	movs	r3, #64	; 0x40
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e124      	b.n	801155e <UART_SetConfig+0x5a6>
 8011314:	2380      	movs	r3, #128	; 0x80
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131a:	e120      	b.n	801155e <UART_SetConfig+0x5a6>
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4acb      	ldr	r2, [pc, #812]	; (8011650 <UART_SetConfig+0x698>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d176      	bne.n	8011414 <UART_SetConfig+0x45c>
 8011326:	4bcb      	ldr	r3, [pc, #812]	; (8011654 <UART_SetConfig+0x69c>)
 8011328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801132a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801132e:	2b28      	cmp	r3, #40	; 0x28
 8011330:	d86c      	bhi.n	801140c <UART_SetConfig+0x454>
 8011332:	a201      	add	r2, pc, #4	; (adr r2, 8011338 <UART_SetConfig+0x380>)
 8011334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011338:	080113dd 	.word	0x080113dd
 801133c:	0801140d 	.word	0x0801140d
 8011340:	0801140d 	.word	0x0801140d
 8011344:	0801140d 	.word	0x0801140d
 8011348:	0801140d 	.word	0x0801140d
 801134c:	0801140d 	.word	0x0801140d
 8011350:	0801140d 	.word	0x0801140d
 8011354:	0801140d 	.word	0x0801140d
 8011358:	080113e5 	.word	0x080113e5
 801135c:	0801140d 	.word	0x0801140d
 8011360:	0801140d 	.word	0x0801140d
 8011364:	0801140d 	.word	0x0801140d
 8011368:	0801140d 	.word	0x0801140d
 801136c:	0801140d 	.word	0x0801140d
 8011370:	0801140d 	.word	0x0801140d
 8011374:	0801140d 	.word	0x0801140d
 8011378:	080113ed 	.word	0x080113ed
 801137c:	0801140d 	.word	0x0801140d
 8011380:	0801140d 	.word	0x0801140d
 8011384:	0801140d 	.word	0x0801140d
 8011388:	0801140d 	.word	0x0801140d
 801138c:	0801140d 	.word	0x0801140d
 8011390:	0801140d 	.word	0x0801140d
 8011394:	0801140d 	.word	0x0801140d
 8011398:	080113f5 	.word	0x080113f5
 801139c:	0801140d 	.word	0x0801140d
 80113a0:	0801140d 	.word	0x0801140d
 80113a4:	0801140d 	.word	0x0801140d
 80113a8:	0801140d 	.word	0x0801140d
 80113ac:	0801140d 	.word	0x0801140d
 80113b0:	0801140d 	.word	0x0801140d
 80113b4:	0801140d 	.word	0x0801140d
 80113b8:	080113fd 	.word	0x080113fd
 80113bc:	0801140d 	.word	0x0801140d
 80113c0:	0801140d 	.word	0x0801140d
 80113c4:	0801140d 	.word	0x0801140d
 80113c8:	0801140d 	.word	0x0801140d
 80113cc:	0801140d 	.word	0x0801140d
 80113d0:	0801140d 	.word	0x0801140d
 80113d4:	0801140d 	.word	0x0801140d
 80113d8:	08011405 	.word	0x08011405
 80113dc:	2301      	movs	r3, #1
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e0bc      	b.n	801155e <UART_SetConfig+0x5a6>
 80113e4:	2304      	movs	r3, #4
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e0b8      	b.n	801155e <UART_SetConfig+0x5a6>
 80113ec:	2308      	movs	r3, #8
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e0b4      	b.n	801155e <UART_SetConfig+0x5a6>
 80113f4:	2310      	movs	r3, #16
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fa:	e0b0      	b.n	801155e <UART_SetConfig+0x5a6>
 80113fc:	2320      	movs	r3, #32
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e0ac      	b.n	801155e <UART_SetConfig+0x5a6>
 8011404:	2340      	movs	r3, #64	; 0x40
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e0a8      	b.n	801155e <UART_SetConfig+0x5a6>
 801140c:	2380      	movs	r3, #128	; 0x80
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e0a4      	b.n	801155e <UART_SetConfig+0x5a6>
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4a8f      	ldr	r2, [pc, #572]	; (8011658 <UART_SetConfig+0x6a0>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d130      	bne.n	8011480 <UART_SetConfig+0x4c8>
 801141e:	4b8d      	ldr	r3, [pc, #564]	; (8011654 <UART_SetConfig+0x69c>)
 8011420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011422:	f003 0307 	and.w	r3, r3, #7
 8011426:	2b05      	cmp	r3, #5
 8011428:	d826      	bhi.n	8011478 <UART_SetConfig+0x4c0>
 801142a:	a201      	add	r2, pc, #4	; (adr r2, 8011430 <UART_SetConfig+0x478>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	08011449 	.word	0x08011449
 8011434:	08011451 	.word	0x08011451
 8011438:	08011459 	.word	0x08011459
 801143c:	08011461 	.word	0x08011461
 8011440:	08011469 	.word	0x08011469
 8011444:	08011471 	.word	0x08011471
 8011448:	2300      	movs	r3, #0
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144e:	e086      	b.n	801155e <UART_SetConfig+0x5a6>
 8011450:	2304      	movs	r3, #4
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e082      	b.n	801155e <UART_SetConfig+0x5a6>
 8011458:	2308      	movs	r3, #8
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e07e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011460:	2310      	movs	r3, #16
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011466:	e07a      	b.n	801155e <UART_SetConfig+0x5a6>
 8011468:	2320      	movs	r3, #32
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e076      	b.n	801155e <UART_SetConfig+0x5a6>
 8011470:	2340      	movs	r3, #64	; 0x40
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e072      	b.n	801155e <UART_SetConfig+0x5a6>
 8011478:	2380      	movs	r3, #128	; 0x80
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e06e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4a75      	ldr	r2, [pc, #468]	; (801165c <UART_SetConfig+0x6a4>)
 8011486:	4293      	cmp	r3, r2
 8011488:	d130      	bne.n	80114ec <UART_SetConfig+0x534>
 801148a:	4b72      	ldr	r3, [pc, #456]	; (8011654 <UART_SetConfig+0x69c>)
 801148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801148e:	f003 0307 	and.w	r3, r3, #7
 8011492:	2b05      	cmp	r3, #5
 8011494:	d826      	bhi.n	80114e4 <UART_SetConfig+0x52c>
 8011496:	a201      	add	r2, pc, #4	; (adr r2, 801149c <UART_SetConfig+0x4e4>)
 8011498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801149c:	080114b5 	.word	0x080114b5
 80114a0:	080114bd 	.word	0x080114bd
 80114a4:	080114c5 	.word	0x080114c5
 80114a8:	080114cd 	.word	0x080114cd
 80114ac:	080114d5 	.word	0x080114d5
 80114b0:	080114dd 	.word	0x080114dd
 80114b4:	2300      	movs	r3, #0
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e050      	b.n	801155e <UART_SetConfig+0x5a6>
 80114bc:	2304      	movs	r3, #4
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e04c      	b.n	801155e <UART_SetConfig+0x5a6>
 80114c4:	2308      	movs	r3, #8
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ca:	e048      	b.n	801155e <UART_SetConfig+0x5a6>
 80114cc:	2310      	movs	r3, #16
 80114ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d2:	e044      	b.n	801155e <UART_SetConfig+0x5a6>
 80114d4:	2320      	movs	r3, #32
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e040      	b.n	801155e <UART_SetConfig+0x5a6>
 80114dc:	2340      	movs	r3, #64	; 0x40
 80114de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e2:	e03c      	b.n	801155e <UART_SetConfig+0x5a6>
 80114e4:	2380      	movs	r3, #128	; 0x80
 80114e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ea:	e038      	b.n	801155e <UART_SetConfig+0x5a6>
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a5b      	ldr	r2, [pc, #364]	; (8011660 <UART_SetConfig+0x6a8>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d130      	bne.n	8011558 <UART_SetConfig+0x5a0>
 80114f6:	4b57      	ldr	r3, [pc, #348]	; (8011654 <UART_SetConfig+0x69c>)
 80114f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114fa:	f003 0307 	and.w	r3, r3, #7
 80114fe:	2b05      	cmp	r3, #5
 8011500:	d826      	bhi.n	8011550 <UART_SetConfig+0x598>
 8011502:	a201      	add	r2, pc, #4	; (adr r2, 8011508 <UART_SetConfig+0x550>)
 8011504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011508:	08011521 	.word	0x08011521
 801150c:	08011529 	.word	0x08011529
 8011510:	08011531 	.word	0x08011531
 8011514:	08011539 	.word	0x08011539
 8011518:	08011541 	.word	0x08011541
 801151c:	08011549 	.word	0x08011549
 8011520:	2302      	movs	r3, #2
 8011522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011526:	e01a      	b.n	801155e <UART_SetConfig+0x5a6>
 8011528:	2304      	movs	r3, #4
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152e:	e016      	b.n	801155e <UART_SetConfig+0x5a6>
 8011530:	2308      	movs	r3, #8
 8011532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011536:	e012      	b.n	801155e <UART_SetConfig+0x5a6>
 8011538:	2310      	movs	r3, #16
 801153a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153e:	e00e      	b.n	801155e <UART_SetConfig+0x5a6>
 8011540:	2320      	movs	r3, #32
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e00a      	b.n	801155e <UART_SetConfig+0x5a6>
 8011548:	2340      	movs	r3, #64	; 0x40
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e006      	b.n	801155e <UART_SetConfig+0x5a6>
 8011550:	2380      	movs	r3, #128	; 0x80
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e002      	b.n	801155e <UART_SetConfig+0x5a6>
 8011558:	2380      	movs	r3, #128	; 0x80
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a3f      	ldr	r2, [pc, #252]	; (8011660 <UART_SetConfig+0x6a8>)
 8011564:	4293      	cmp	r3, r2
 8011566:	f040 80f8 	bne.w	801175a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801156a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801156e:	2b20      	cmp	r3, #32
 8011570:	dc46      	bgt.n	8011600 <UART_SetConfig+0x648>
 8011572:	2b02      	cmp	r3, #2
 8011574:	f2c0 8082 	blt.w	801167c <UART_SetConfig+0x6c4>
 8011578:	3b02      	subs	r3, #2
 801157a:	2b1e      	cmp	r3, #30
 801157c:	d87e      	bhi.n	801167c <UART_SetConfig+0x6c4>
 801157e:	a201      	add	r2, pc, #4	; (adr r2, 8011584 <UART_SetConfig+0x5cc>)
 8011580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011584:	08011607 	.word	0x08011607
 8011588:	0801167d 	.word	0x0801167d
 801158c:	0801160f 	.word	0x0801160f
 8011590:	0801167d 	.word	0x0801167d
 8011594:	0801167d 	.word	0x0801167d
 8011598:	0801167d 	.word	0x0801167d
 801159c:	0801161f 	.word	0x0801161f
 80115a0:	0801167d 	.word	0x0801167d
 80115a4:	0801167d 	.word	0x0801167d
 80115a8:	0801167d 	.word	0x0801167d
 80115ac:	0801167d 	.word	0x0801167d
 80115b0:	0801167d 	.word	0x0801167d
 80115b4:	0801167d 	.word	0x0801167d
 80115b8:	0801167d 	.word	0x0801167d
 80115bc:	0801162f 	.word	0x0801162f
 80115c0:	0801167d 	.word	0x0801167d
 80115c4:	0801167d 	.word	0x0801167d
 80115c8:	0801167d 	.word	0x0801167d
 80115cc:	0801167d 	.word	0x0801167d
 80115d0:	0801167d 	.word	0x0801167d
 80115d4:	0801167d 	.word	0x0801167d
 80115d8:	0801167d 	.word	0x0801167d
 80115dc:	0801167d 	.word	0x0801167d
 80115e0:	0801167d 	.word	0x0801167d
 80115e4:	0801167d 	.word	0x0801167d
 80115e8:	0801167d 	.word	0x0801167d
 80115ec:	0801167d 	.word	0x0801167d
 80115f0:	0801167d 	.word	0x0801167d
 80115f4:	0801167d 	.word	0x0801167d
 80115f8:	0801167d 	.word	0x0801167d
 80115fc:	0801166f 	.word	0x0801166f
 8011600:	2b40      	cmp	r3, #64	; 0x40
 8011602:	d037      	beq.n	8011674 <UART_SetConfig+0x6bc>
 8011604:	e03a      	b.n	801167c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011606:	f7fb fce5 	bl	800cfd4 <HAL_RCCEx_GetD3PCLK1Freq>
 801160a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801160c:	e03c      	b.n	8011688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011612:	4618      	mov	r0, r3
 8011614:	f7fb fcf4 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801161c:	e034      	b.n	8011688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801161e:	f107 0318 	add.w	r3, r7, #24
 8011622:	4618      	mov	r0, r3
 8011624:	f7fb fe40 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801162c:	e02c      	b.n	8011688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801162e:	4b09      	ldr	r3, [pc, #36]	; (8011654 <UART_SetConfig+0x69c>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f003 0320 	and.w	r3, r3, #32
 8011636:	2b00      	cmp	r3, #0
 8011638:	d016      	beq.n	8011668 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801163a:	4b06      	ldr	r3, [pc, #24]	; (8011654 <UART_SetConfig+0x69c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	08db      	lsrs	r3, r3, #3
 8011640:	f003 0303 	and.w	r3, r3, #3
 8011644:	4a07      	ldr	r2, [pc, #28]	; (8011664 <UART_SetConfig+0x6ac>)
 8011646:	fa22 f303 	lsr.w	r3, r2, r3
 801164a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801164c:	e01c      	b.n	8011688 <UART_SetConfig+0x6d0>
 801164e:	bf00      	nop
 8011650:	40011400 	.word	0x40011400
 8011654:	58024400 	.word	0x58024400
 8011658:	40007800 	.word	0x40007800
 801165c:	40007c00 	.word	0x40007c00
 8011660:	58000c00 	.word	0x58000c00
 8011664:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011668:	4b9d      	ldr	r3, [pc, #628]	; (80118e0 <UART_SetConfig+0x928>)
 801166a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166c:	e00c      	b.n	8011688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801166e:	4b9d      	ldr	r3, [pc, #628]	; (80118e4 <UART_SetConfig+0x92c>)
 8011670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011672:	e009      	b.n	8011688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801167a:	e005      	b.n	8011688 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801167c:	2300      	movs	r3, #0
 801167e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011680:	2301      	movs	r3, #1
 8011682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011686:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 81de 	beq.w	8011a4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011694:	4a94      	ldr	r2, [pc, #592]	; (80118e8 <UART_SetConfig+0x930>)
 8011696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801169a:	461a      	mov	r2, r3
 801169c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801169e:	fbb3 f3f2 	udiv	r3, r3, r2
 80116a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	685a      	ldr	r2, [r3, #4]
 80116a8:	4613      	mov	r3, r2
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	4413      	add	r3, r2
 80116ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d305      	bcc.n	80116c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80116ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116bc:	429a      	cmp	r2, r3
 80116be:	d903      	bls.n	80116c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80116c0:	2301      	movs	r3, #1
 80116c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116c6:	e1c1      	b.n	8011a4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ca:	2200      	movs	r2, #0
 80116cc:	60bb      	str	r3, [r7, #8]
 80116ce:	60fa      	str	r2, [r7, #12]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	4a84      	ldr	r2, [pc, #528]	; (80118e8 <UART_SetConfig+0x930>)
 80116d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116da:	b29b      	uxth	r3, r3
 80116dc:	2200      	movs	r2, #0
 80116de:	603b      	str	r3, [r7, #0]
 80116e0:	607a      	str	r2, [r7, #4]
 80116e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80116ea:	f7ee fdf9 	bl	80002e0 <__aeabi_uldivmod>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	4610      	mov	r0, r2
 80116f4:	4619      	mov	r1, r3
 80116f6:	f04f 0200 	mov.w	r2, #0
 80116fa:	f04f 0300 	mov.w	r3, #0
 80116fe:	020b      	lsls	r3, r1, #8
 8011700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011704:	0202      	lsls	r2, r0, #8
 8011706:	6979      	ldr	r1, [r7, #20]
 8011708:	6849      	ldr	r1, [r1, #4]
 801170a:	0849      	lsrs	r1, r1, #1
 801170c:	2000      	movs	r0, #0
 801170e:	460c      	mov	r4, r1
 8011710:	4605      	mov	r5, r0
 8011712:	eb12 0804 	adds.w	r8, r2, r4
 8011716:	eb43 0905 	adc.w	r9, r3, r5
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	469a      	mov	sl, r3
 8011722:	4693      	mov	fp, r2
 8011724:	4652      	mov	r2, sl
 8011726:	465b      	mov	r3, fp
 8011728:	4640      	mov	r0, r8
 801172a:	4649      	mov	r1, r9
 801172c:	f7ee fdd8 	bl	80002e0 <__aeabi_uldivmod>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	4613      	mov	r3, r2
 8011736:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801173e:	d308      	bcc.n	8011752 <UART_SetConfig+0x79a>
 8011740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011746:	d204      	bcs.n	8011752 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801174e:	60da      	str	r2, [r3, #12]
 8011750:	e17c      	b.n	8011a4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011752:	2301      	movs	r3, #1
 8011754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011758:	e178      	b.n	8011a4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	69db      	ldr	r3, [r3, #28]
 801175e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011762:	f040 80c5 	bne.w	80118f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011766:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801176a:	2b20      	cmp	r3, #32
 801176c:	dc48      	bgt.n	8011800 <UART_SetConfig+0x848>
 801176e:	2b00      	cmp	r3, #0
 8011770:	db7b      	blt.n	801186a <UART_SetConfig+0x8b2>
 8011772:	2b20      	cmp	r3, #32
 8011774:	d879      	bhi.n	801186a <UART_SetConfig+0x8b2>
 8011776:	a201      	add	r2, pc, #4	; (adr r2, 801177c <UART_SetConfig+0x7c4>)
 8011778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801177c:	08011807 	.word	0x08011807
 8011780:	0801180f 	.word	0x0801180f
 8011784:	0801186b 	.word	0x0801186b
 8011788:	0801186b 	.word	0x0801186b
 801178c:	08011817 	.word	0x08011817
 8011790:	0801186b 	.word	0x0801186b
 8011794:	0801186b 	.word	0x0801186b
 8011798:	0801186b 	.word	0x0801186b
 801179c:	08011827 	.word	0x08011827
 80117a0:	0801186b 	.word	0x0801186b
 80117a4:	0801186b 	.word	0x0801186b
 80117a8:	0801186b 	.word	0x0801186b
 80117ac:	0801186b 	.word	0x0801186b
 80117b0:	0801186b 	.word	0x0801186b
 80117b4:	0801186b 	.word	0x0801186b
 80117b8:	0801186b 	.word	0x0801186b
 80117bc:	08011837 	.word	0x08011837
 80117c0:	0801186b 	.word	0x0801186b
 80117c4:	0801186b 	.word	0x0801186b
 80117c8:	0801186b 	.word	0x0801186b
 80117cc:	0801186b 	.word	0x0801186b
 80117d0:	0801186b 	.word	0x0801186b
 80117d4:	0801186b 	.word	0x0801186b
 80117d8:	0801186b 	.word	0x0801186b
 80117dc:	0801186b 	.word	0x0801186b
 80117e0:	0801186b 	.word	0x0801186b
 80117e4:	0801186b 	.word	0x0801186b
 80117e8:	0801186b 	.word	0x0801186b
 80117ec:	0801186b 	.word	0x0801186b
 80117f0:	0801186b 	.word	0x0801186b
 80117f4:	0801186b 	.word	0x0801186b
 80117f8:	0801186b 	.word	0x0801186b
 80117fc:	0801185d 	.word	0x0801185d
 8011800:	2b40      	cmp	r3, #64	; 0x40
 8011802:	d02e      	beq.n	8011862 <UART_SetConfig+0x8aa>
 8011804:	e031      	b.n	801186a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011806:	f7f9 fbed 	bl	800afe4 <HAL_RCC_GetPCLK1Freq>
 801180a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801180c:	e033      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801180e:	f7f9 fbff 	bl	800b010 <HAL_RCC_GetPCLK2Freq>
 8011812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011814:	e02f      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801181a:	4618      	mov	r0, r3
 801181c:	f7fb fbf0 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011824:	e027      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011826:	f107 0318 	add.w	r3, r7, #24
 801182a:	4618      	mov	r0, r3
 801182c:	f7fb fd3c 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011834:	e01f      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011836:	4b2d      	ldr	r3, [pc, #180]	; (80118ec <UART_SetConfig+0x934>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f003 0320 	and.w	r3, r3, #32
 801183e:	2b00      	cmp	r3, #0
 8011840:	d009      	beq.n	8011856 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011842:	4b2a      	ldr	r3, [pc, #168]	; (80118ec <UART_SetConfig+0x934>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	08db      	lsrs	r3, r3, #3
 8011848:	f003 0303 	and.w	r3, r3, #3
 801184c:	4a24      	ldr	r2, [pc, #144]	; (80118e0 <UART_SetConfig+0x928>)
 801184e:	fa22 f303 	lsr.w	r3, r2, r3
 8011852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011854:	e00f      	b.n	8011876 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011856:	4b22      	ldr	r3, [pc, #136]	; (80118e0 <UART_SetConfig+0x928>)
 8011858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801185a:	e00c      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801185c:	4b21      	ldr	r3, [pc, #132]	; (80118e4 <UART_SetConfig+0x92c>)
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011860:	e009      	b.n	8011876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011868:	e005      	b.n	8011876 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801186a:	2300      	movs	r3, #0
 801186c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011878:	2b00      	cmp	r3, #0
 801187a:	f000 80e7 	beq.w	8011a4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	4a19      	ldr	r2, [pc, #100]	; (80118e8 <UART_SetConfig+0x930>)
 8011884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011888:	461a      	mov	r2, r3
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011890:	005a      	lsls	r2, r3, #1
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	085b      	lsrs	r3, r3, #1
 8011898:	441a      	add	r2, r3
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	2b0f      	cmp	r3, #15
 80118a8:	d916      	bls.n	80118d8 <UART_SetConfig+0x920>
 80118aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118b0:	d212      	bcs.n	80118d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	f023 030f 	bic.w	r3, r3, #15
 80118ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118be:	085b      	lsrs	r3, r3, #1
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	f003 0307 	and.w	r3, r3, #7
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80118ca:	4313      	orrs	r3, r2
 80118cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80118d4:	60da      	str	r2, [r3, #12]
 80118d6:	e0b9      	b.n	8011a4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80118d8:	2301      	movs	r3, #1
 80118da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118de:	e0b5      	b.n	8011a4c <UART_SetConfig+0xa94>
 80118e0:	03d09000 	.word	0x03d09000
 80118e4:	003d0900 	.word	0x003d0900
 80118e8:	08017a1c 	.word	0x08017a1c
 80118ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80118f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118f4:	2b20      	cmp	r3, #32
 80118f6:	dc49      	bgt.n	801198c <UART_SetConfig+0x9d4>
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	db7c      	blt.n	80119f6 <UART_SetConfig+0xa3e>
 80118fc:	2b20      	cmp	r3, #32
 80118fe:	d87a      	bhi.n	80119f6 <UART_SetConfig+0xa3e>
 8011900:	a201      	add	r2, pc, #4	; (adr r2, 8011908 <UART_SetConfig+0x950>)
 8011902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011906:	bf00      	nop
 8011908:	08011993 	.word	0x08011993
 801190c:	0801199b 	.word	0x0801199b
 8011910:	080119f7 	.word	0x080119f7
 8011914:	080119f7 	.word	0x080119f7
 8011918:	080119a3 	.word	0x080119a3
 801191c:	080119f7 	.word	0x080119f7
 8011920:	080119f7 	.word	0x080119f7
 8011924:	080119f7 	.word	0x080119f7
 8011928:	080119b3 	.word	0x080119b3
 801192c:	080119f7 	.word	0x080119f7
 8011930:	080119f7 	.word	0x080119f7
 8011934:	080119f7 	.word	0x080119f7
 8011938:	080119f7 	.word	0x080119f7
 801193c:	080119f7 	.word	0x080119f7
 8011940:	080119f7 	.word	0x080119f7
 8011944:	080119f7 	.word	0x080119f7
 8011948:	080119c3 	.word	0x080119c3
 801194c:	080119f7 	.word	0x080119f7
 8011950:	080119f7 	.word	0x080119f7
 8011954:	080119f7 	.word	0x080119f7
 8011958:	080119f7 	.word	0x080119f7
 801195c:	080119f7 	.word	0x080119f7
 8011960:	080119f7 	.word	0x080119f7
 8011964:	080119f7 	.word	0x080119f7
 8011968:	080119f7 	.word	0x080119f7
 801196c:	080119f7 	.word	0x080119f7
 8011970:	080119f7 	.word	0x080119f7
 8011974:	080119f7 	.word	0x080119f7
 8011978:	080119f7 	.word	0x080119f7
 801197c:	080119f7 	.word	0x080119f7
 8011980:	080119f7 	.word	0x080119f7
 8011984:	080119f7 	.word	0x080119f7
 8011988:	080119e9 	.word	0x080119e9
 801198c:	2b40      	cmp	r3, #64	; 0x40
 801198e:	d02e      	beq.n	80119ee <UART_SetConfig+0xa36>
 8011990:	e031      	b.n	80119f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011992:	f7f9 fb27 	bl	800afe4 <HAL_RCC_GetPCLK1Freq>
 8011996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011998:	e033      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801199a:	f7f9 fb39 	bl	800b010 <HAL_RCC_GetPCLK2Freq>
 801199e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119a0:	e02f      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fb fb2a 	bl	800d000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b0:	e027      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119b2:	f107 0318 	add.w	r3, r7, #24
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fb fc76 	bl	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c0:	e01f      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119c2:	4b2d      	ldr	r3, [pc, #180]	; (8011a78 <UART_SetConfig+0xac0>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f003 0320 	and.w	r3, r3, #32
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d009      	beq.n	80119e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119ce:	4b2a      	ldr	r3, [pc, #168]	; (8011a78 <UART_SetConfig+0xac0>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	08db      	lsrs	r3, r3, #3
 80119d4:	f003 0303 	and.w	r3, r3, #3
 80119d8:	4a28      	ldr	r2, [pc, #160]	; (8011a7c <UART_SetConfig+0xac4>)
 80119da:	fa22 f303 	lsr.w	r3, r2, r3
 80119de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119e0:	e00f      	b.n	8011a02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80119e2:	4b26      	ldr	r3, [pc, #152]	; (8011a7c <UART_SetConfig+0xac4>)
 80119e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119e6:	e00c      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119e8:	4b25      	ldr	r3, [pc, #148]	; (8011a80 <UART_SetConfig+0xac8>)
 80119ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ec:	e009      	b.n	8011a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119f4:	e005      	b.n	8011a02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80119f6:	2300      	movs	r3, #0
 80119f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119fa:	2301      	movs	r3, #1
 80119fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a00:	bf00      	nop
    }

    if (pclk != 0U)
 8011a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d021      	beq.n	8011a4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0c:	4a1d      	ldr	r2, [pc, #116]	; (8011a84 <UART_SetConfig+0xacc>)
 8011a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a12:	461a      	mov	r2, r3
 8011a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	085b      	lsrs	r3, r3, #1
 8011a20:	441a      	add	r2, r3
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2e:	2b0f      	cmp	r3, #15
 8011a30:	d909      	bls.n	8011a46 <UART_SetConfig+0xa8e>
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a38:	d205      	bcs.n	8011a46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	60da      	str	r2, [r3, #12]
 8011a44:	e002      	b.n	8011a4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	2200      	movs	r2, #0
 8011a66:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011a68:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3748      	adds	r7, #72	; 0x48
 8011a70:	46bd      	mov	sp, r7
 8011a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a76:	bf00      	nop
 8011a78:	58024400 	.word	0x58024400
 8011a7c:	03d09000 	.word	0x03d09000
 8011a80:	003d0900 	.word	0x003d0900
 8011a84:	08017a1c 	.word	0x08017a1c

08011a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a94:	f003 0308 	and.w	r3, r3, #8
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00a      	beq.n	8011ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	430a      	orrs	r2, r1
 8011ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ab6:	f003 0301 	and.w	r3, r3, #1
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00a      	beq.n	8011ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	430a      	orrs	r2, r1
 8011ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ad8:	f003 0302 	and.w	r3, r3, #2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00a      	beq.n	8011af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	430a      	orrs	r2, r1
 8011af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afa:	f003 0304 	and.w	r3, r3, #4
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00a      	beq.n	8011b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	430a      	orrs	r2, r1
 8011b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b1c:	f003 0310 	and.w	r3, r3, #16
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	430a      	orrs	r2, r1
 8011b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b3e:	f003 0320 	and.w	r3, r3, #32
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00a      	beq.n	8011b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	430a      	orrs	r2, r1
 8011b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d01a      	beq.n	8011b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	430a      	orrs	r2, r1
 8011b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b86:	d10a      	bne.n	8011b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	430a      	orrs	r2, r1
 8011b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00a      	beq.n	8011bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	430a      	orrs	r2, r1
 8011bbe:	605a      	str	r2, [r3, #4]
  }
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b098      	sub	sp, #96	; 0x60
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011bdc:	f7f2 fa74 	bl	80040c8 <HAL_GetTick>
 8011be0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f003 0308 	and.w	r3, r3, #8
 8011bec:	2b08      	cmp	r3, #8
 8011bee:	d12f      	bne.n	8011c50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bf4:	9300      	str	r3, [sp, #0]
 8011bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 f88e 	bl	8011d20 <UART_WaitOnFlagUntilTimeout>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d022      	beq.n	8011c50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	e853 3f00 	ldrex	r3, [r3]
 8011c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	461a      	mov	r2, r3
 8011c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c28:	647b      	str	r3, [r7, #68]	; 0x44
 8011c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c30:	e841 2300 	strex	r3, r2, [r1]
 8011c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1e6      	bne.n	8011c0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2220      	movs	r2, #32
 8011c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2200      	movs	r2, #0
 8011c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	e063      	b.n	8011d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	2b04      	cmp	r3, #4
 8011c5c:	d149      	bne.n	8011cf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011c5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c66:	2200      	movs	r2, #0
 8011c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 f857 	bl	8011d20 <UART_WaitOnFlagUntilTimeout>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d03c      	beq.n	8011cf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	e853 3f00 	ldrex	r3, [r3]
 8011c84:	623b      	str	r3, [r7, #32]
   return(result);
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	461a      	mov	r2, r3
 8011c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c96:	633b      	str	r3, [r7, #48]	; 0x30
 8011c98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c9e:	e841 2300 	strex	r3, r2, [r1]
 8011ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1e6      	bne.n	8011c78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3308      	adds	r3, #8
 8011cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	e853 3f00 	ldrex	r3, [r3]
 8011cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f023 0301 	bic.w	r3, r3, #1
 8011cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	3308      	adds	r3, #8
 8011cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cca:	61fa      	str	r2, [r7, #28]
 8011ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cce:	69b9      	ldr	r1, [r7, #24]
 8011cd0:	69fa      	ldr	r2, [r7, #28]
 8011cd2:	e841 2300 	strex	r3, r2, [r1]
 8011cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1e5      	bne.n	8011caa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2220      	movs	r2, #32
 8011ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011cee:	2303      	movs	r3, #3
 8011cf0:	e012      	b.n	8011d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2220      	movs	r2, #32
 8011cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2220      	movs	r2, #32
 8011cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3758      	adds	r7, #88	; 0x58
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	603b      	str	r3, [r7, #0]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d30:	e04f      	b.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d38:	d04b      	beq.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d3a:	f7f2 f9c5 	bl	80040c8 <HAL_GetTick>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	69ba      	ldr	r2, [r7, #24]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d302      	bcc.n	8011d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d101      	bne.n	8011d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011d50:	2303      	movs	r3, #3
 8011d52:	e04e      	b.n	8011df2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f003 0304 	and.w	r3, r3, #4
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d037      	beq.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2b80      	cmp	r3, #128	; 0x80
 8011d66:	d034      	beq.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	2b40      	cmp	r3, #64	; 0x40
 8011d6c:	d031      	beq.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	69db      	ldr	r3, [r3, #28]
 8011d74:	f003 0308 	and.w	r3, r3, #8
 8011d78:	2b08      	cmp	r3, #8
 8011d7a:	d110      	bne.n	8011d9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2208      	movs	r2, #8
 8011d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f000 f99d 	bl	80120c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2208      	movs	r2, #8
 8011d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2200      	movs	r2, #0
 8011d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e029      	b.n	8011df2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	69db      	ldr	r3, [r3, #28]
 8011da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011dac:	d111      	bne.n	8011dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	f000 f983 	bl	80120c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2220      	movs	r2, #32
 8011dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011dce:	2303      	movs	r3, #3
 8011dd0:	e00f      	b.n	8011df2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	69da      	ldr	r2, [r3, #28]
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	4013      	ands	r3, r2
 8011ddc:	68ba      	ldr	r2, [r7, #8]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	bf0c      	ite	eq
 8011de2:	2301      	moveq	r3, #1
 8011de4:	2300      	movne	r3, #0
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	461a      	mov	r2, r3
 8011dea:	79fb      	ldrb	r3, [r7, #7]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d0a0      	beq.n	8011d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b0a3      	sub	sp, #140	; 0x8c
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	4613      	mov	r3, r2
 8011e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	68ba      	ldr	r2, [r7, #8]
 8011e0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	88fa      	ldrh	r2, [r7, #6]
 8011e14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	88fa      	ldrh	r2, [r7, #6]
 8011e1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2200      	movs	r2, #0
 8011e24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e2e:	d10e      	bne.n	8011e4e <UART_Start_Receive_IT+0x52>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d105      	bne.n	8011e44 <UART_Start_Receive_IT+0x48>
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011e3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e42:	e02d      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	22ff      	movs	r2, #255	; 0xff
 8011e48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e4c:	e028      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	689b      	ldr	r3, [r3, #8]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10d      	bne.n	8011e72 <UART_Start_Receive_IT+0x76>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	691b      	ldr	r3, [r3, #16]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d104      	bne.n	8011e68 <UART_Start_Receive_IT+0x6c>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	22ff      	movs	r2, #255	; 0xff
 8011e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e66:	e01b      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	227f      	movs	r2, #127	; 0x7f
 8011e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e70:	e016      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	689b      	ldr	r3, [r3, #8]
 8011e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e7a:	d10d      	bne.n	8011e98 <UART_Start_Receive_IT+0x9c>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	691b      	ldr	r3, [r3, #16]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d104      	bne.n	8011e8e <UART_Start_Receive_IT+0x92>
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	227f      	movs	r2, #127	; 0x7f
 8011e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e8c:	e008      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	223f      	movs	r2, #63	; 0x3f
 8011e92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e96:	e003      	b.n	8011ea0 <UART_Start_Receive_IT+0xa4>
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2222      	movs	r2, #34	; 0x22
 8011eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011eba:	e853 3f00 	ldrex	r3, [r3]
 8011ebe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ec2:	f043 0301 	orr.w	r3, r3, #1
 8011ec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ed4:	673a      	str	r2, [r7, #112]	; 0x70
 8011ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011eda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011edc:	e841 2300 	strex	r3, r2, [r1]
 8011ee0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1e3      	bne.n	8011eb0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ef0:	d14f      	bne.n	8011f92 <UART_Start_Receive_IT+0x196>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ef8:	88fa      	ldrh	r2, [r7, #6]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d349      	bcc.n	8011f92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f06:	d107      	bne.n	8011f18 <UART_Start_Receive_IT+0x11c>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d103      	bne.n	8011f18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4a47      	ldr	r2, [pc, #284]	; (8012030 <UART_Start_Receive_IT+0x234>)
 8011f14:	675a      	str	r2, [r3, #116]	; 0x74
 8011f16:	e002      	b.n	8011f1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4a46      	ldr	r2, [pc, #280]	; (8012034 <UART_Start_Receive_IT+0x238>)
 8011f1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d01a      	beq.n	8011f5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f2e:	e853 3f00 	ldrex	r3, [r3]
 8011f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	461a      	mov	r2, r3
 8011f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f50:	e841 2300 	strex	r3, r2, [r1]
 8011f54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1e4      	bne.n	8011f26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3308      	adds	r3, #8
 8011f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f66:	e853 3f00 	ldrex	r3, [r3]
 8011f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	3308      	adds	r3, #8
 8011f7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8011f7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f84:	e841 2300 	strex	r3, r2, [r1]
 8011f88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1e5      	bne.n	8011f5c <UART_Start_Receive_IT+0x160>
 8011f90:	e046      	b.n	8012020 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f9a:	d107      	bne.n	8011fac <UART_Start_Receive_IT+0x1b0>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	691b      	ldr	r3, [r3, #16]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d103      	bne.n	8011fac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	4a24      	ldr	r2, [pc, #144]	; (8012038 <UART_Start_Receive_IT+0x23c>)
 8011fa8:	675a      	str	r2, [r3, #116]	; 0x74
 8011faa:	e002      	b.n	8011fb2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4a23      	ldr	r2, [pc, #140]	; (801203c <UART_Start_Receive_IT+0x240>)
 8011fb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d019      	beq.n	8011fee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc2:	e853 3f00 	ldrex	r3, [r3]
 8011fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011fce:	677b      	str	r3, [r7, #116]	; 0x74
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8011fda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fe0:	e841 2300 	strex	r3, r2, [r1]
 8011fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d1e6      	bne.n	8011fba <UART_Start_Receive_IT+0x1be>
 8011fec:	e018      	b.n	8012020 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	e853 3f00 	ldrex	r3, [r3]
 8011ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	f043 0320 	orr.w	r3, r3, #32
 8012002:	67bb      	str	r3, [r7, #120]	; 0x78
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801200c:	623b      	str	r3, [r7, #32]
 801200e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012010:	69f9      	ldr	r1, [r7, #28]
 8012012:	6a3a      	ldr	r2, [r7, #32]
 8012014:	e841 2300 	strex	r3, r2, [r1]
 8012018:	61bb      	str	r3, [r7, #24]
   return(result);
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1e6      	bne.n	8011fee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	378c      	adds	r7, #140	; 0x8c
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	08012a15 	.word	0x08012a15
 8012034:	080126b5 	.word	0x080126b5
 8012038:	080124fd 	.word	0x080124fd
 801203c:	08012345 	.word	0x08012345

08012040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012040:	b480      	push	{r7}
 8012042:	b08f      	sub	sp, #60	; 0x3c
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801204e:	6a3b      	ldr	r3, [r7, #32]
 8012050:	e853 3f00 	ldrex	r3, [r3]
 8012054:	61fb      	str	r3, [r7, #28]
   return(result);
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801205c:	637b      	str	r3, [r7, #52]	; 0x34
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	461a      	mov	r2, r3
 8012064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012068:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801206e:	e841 2300 	strex	r3, r2, [r1]
 8012072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1e6      	bne.n	8012048 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	3308      	adds	r3, #8
 8012080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	e853 3f00 	ldrex	r3, [r3]
 8012088:	60bb      	str	r3, [r7, #8]
   return(result);
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012090:	633b      	str	r3, [r7, #48]	; 0x30
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3308      	adds	r3, #8
 8012098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801209a:	61ba      	str	r2, [r7, #24]
 801209c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801209e:	6979      	ldr	r1, [r7, #20]
 80120a0:	69ba      	ldr	r2, [r7, #24]
 80120a2:	e841 2300 	strex	r3, r2, [r1]
 80120a6:	613b      	str	r3, [r7, #16]
   return(result);
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1e5      	bne.n	801207a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2220      	movs	r2, #32
 80120b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80120b6:	bf00      	nop
 80120b8:	373c      	adds	r7, #60	; 0x3c
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
	...

080120c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b095      	sub	sp, #84	; 0x54
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d4:	e853 3f00 	ldrex	r3, [r3]
 80120d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80120da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	461a      	mov	r2, r3
 80120e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ea:	643b      	str	r3, [r7, #64]	; 0x40
 80120ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120f2:	e841 2300 	strex	r3, r2, [r1]
 80120f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d1e6      	bne.n	80120cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	3308      	adds	r3, #8
 8012104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	e853 3f00 	ldrex	r3, [r3]
 801210c:	61fb      	str	r3, [r7, #28]
   return(result);
 801210e:	69fa      	ldr	r2, [r7, #28]
 8012110:	4b1e      	ldr	r3, [pc, #120]	; (801218c <UART_EndRxTransfer+0xc8>)
 8012112:	4013      	ands	r3, r2
 8012114:	64bb      	str	r3, [r7, #72]	; 0x48
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	3308      	adds	r3, #8
 801211c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801211e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012126:	e841 2300 	strex	r3, r2, [r1]
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1e5      	bne.n	80120fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012136:	2b01      	cmp	r3, #1
 8012138:	d118      	bne.n	801216c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	e853 3f00 	ldrex	r3, [r3]
 8012146:	60bb      	str	r3, [r7, #8]
   return(result);
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	f023 0310 	bic.w	r3, r3, #16
 801214e:	647b      	str	r3, [r7, #68]	; 0x44
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	461a      	mov	r2, r3
 8012156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012158:	61bb      	str	r3, [r7, #24]
 801215a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215c:	6979      	ldr	r1, [r7, #20]
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	e841 2300 	strex	r3, r2, [r1]
 8012164:	613b      	str	r3, [r7, #16]
   return(result);
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1e6      	bne.n	801213a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2220      	movs	r2, #32
 8012170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012180:	bf00      	nop
 8012182:	3754      	adds	r7, #84	; 0x54
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr
 801218c:	effffffe 	.word	0xeffffffe

08012190 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b090      	sub	sp, #64	; 0x40
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	69db      	ldr	r3, [r3, #28]
 80121a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121a6:	d037      	beq.n	8012218 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80121a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121aa:	2200      	movs	r2, #0
 80121ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80121b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	3308      	adds	r3, #8
 80121b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ba:	e853 3f00 	ldrex	r3, [r3]
 80121be:	623b      	str	r3, [r7, #32]
   return(result);
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80121c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	3308      	adds	r3, #8
 80121ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121d0:	633a      	str	r2, [r7, #48]	; 0x30
 80121d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121d8:	e841 2300 	strex	r3, r2, [r1]
 80121dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1e5      	bne.n	80121b0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	e853 3f00 	ldrex	r3, [r3]
 80121f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f8:	637b      	str	r3, [r7, #52]	; 0x34
 80121fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	461a      	mov	r2, r3
 8012200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012202:	61fb      	str	r3, [r7, #28]
 8012204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012206:	69b9      	ldr	r1, [r7, #24]
 8012208:	69fa      	ldr	r2, [r7, #28]
 801220a:	e841 2300 	strex	r3, r2, [r1]
 801220e:	617b      	str	r3, [r7, #20]
   return(result);
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d1e6      	bne.n	80121e4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012216:	e002      	b.n	801221e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012218:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801221a:	f7f0 f8c7 	bl	80023ac <HAL_UART_TxCpltCallback>
}
 801221e:	bf00      	nop
 8012220:	3740      	adds	r7, #64	; 0x40
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b084      	sub	sp, #16
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012232:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f7fe fe9f 	bl	8010f78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801223a:	bf00      	nop
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}

08012242 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b086      	sub	sp, #24
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801224e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012256:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801225e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801226a:	2b80      	cmp	r3, #128	; 0x80
 801226c:	d109      	bne.n	8012282 <UART_DMAError+0x40>
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	2b21      	cmp	r3, #33	; 0x21
 8012272:	d106      	bne.n	8012282 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2200      	movs	r2, #0
 8012278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801227c:	6978      	ldr	r0, [r7, #20]
 801227e:	f7ff fedf 	bl	8012040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801228c:	2b40      	cmp	r3, #64	; 0x40
 801228e:	d109      	bne.n	80122a4 <UART_DMAError+0x62>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b22      	cmp	r3, #34	; 0x22
 8012294:	d106      	bne.n	80122a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	2200      	movs	r2, #0
 801229a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801229e:	6978      	ldr	r0, [r7, #20]
 80122a0:	f7ff ff10 	bl	80120c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122aa:	f043 0210 	orr.w	r2, r3, #16
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122b4:	6978      	ldr	r0, [r7, #20]
 80122b6:	f7fe fe69 	bl	8010f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122ba:	bf00      	nop
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b084      	sub	sp, #16
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2200      	movs	r2, #0
 80122dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7fe fe53 	bl	8010f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122e6:	bf00      	nop
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b088      	sub	sp, #32
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	e853 3f00 	ldrex	r3, [r3]
 8012302:	60bb      	str	r3, [r7, #8]
   return(result);
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801230a:	61fb      	str	r3, [r7, #28]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	461a      	mov	r2, r3
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	61bb      	str	r3, [r7, #24]
 8012316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012318:	6979      	ldr	r1, [r7, #20]
 801231a:	69ba      	ldr	r2, [r7, #24]
 801231c:	e841 2300 	strex	r3, r2, [r1]
 8012320:	613b      	str	r3, [r7, #16]
   return(result);
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1e6      	bne.n	80122f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2220      	movs	r2, #32
 801232c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7f0 f838 	bl	80023ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801233c:	bf00      	nop
 801233e:	3720      	adds	r7, #32
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b09c      	sub	sp, #112	; 0x70
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012352:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801235c:	2b22      	cmp	r3, #34	; 0x22
 801235e:	f040 80be 	bne.w	80124de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012368:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801236c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012370:	b2d9      	uxtb	r1, r3
 8012372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012376:	b2da      	uxtb	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801237c:	400a      	ands	r2, r1
 801237e:	b2d2      	uxtb	r2, r2
 8012380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012392:	b29b      	uxth	r3, r3
 8012394:	3b01      	subs	r3, #1
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f040 80a1 	bne.w	80124ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	e853 3f00 	ldrex	r3, [r3]
 80123b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80123ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	461a      	mov	r2, r3
 80123c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80123cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123d2:	e841 2300 	strex	r3, r2, [r1]
 80123d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d1e6      	bne.n	80123ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	3308      	adds	r3, #8
 80123e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e8:	e853 3f00 	ldrex	r3, [r3]
 80123ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f0:	f023 0301 	bic.w	r3, r3, #1
 80123f4:	667b      	str	r3, [r7, #100]	; 0x64
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	3308      	adds	r3, #8
 80123fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123fe:	647a      	str	r2, [r7, #68]	; 0x44
 8012400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012406:	e841 2300 	strex	r3, r2, [r1]
 801240a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240e:	2b00      	cmp	r3, #0
 8012410:	d1e5      	bne.n	80123de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2220      	movs	r2, #32
 8012416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2200      	movs	r2, #0
 8012424:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a33      	ldr	r2, [pc, #204]	; (80124f8 <UART_RxISR_8BIT+0x1b4>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d01f      	beq.n	8012470 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801243a:	2b00      	cmp	r3, #0
 801243c:	d018      	beq.n	8012470 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	e853 3f00 	ldrex	r3, [r3]
 801244a:	623b      	str	r3, [r7, #32]
   return(result);
 801244c:	6a3b      	ldr	r3, [r7, #32]
 801244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012452:	663b      	str	r3, [r7, #96]	; 0x60
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	461a      	mov	r2, r3
 801245a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801245c:	633b      	str	r3, [r7, #48]	; 0x30
 801245e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012464:	e841 2300 	strex	r3, r2, [r1]
 8012468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1e6      	bne.n	801243e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012474:	2b01      	cmp	r3, #1
 8012476:	d12e      	bne.n	80124d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2200      	movs	r2, #0
 801247c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	e853 3f00 	ldrex	r3, [r3]
 801248a:	60fb      	str	r3, [r7, #12]
   return(result);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f023 0310 	bic.w	r3, r3, #16
 8012492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	461a      	mov	r2, r3
 801249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801249c:	61fb      	str	r3, [r7, #28]
 801249e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124a0:	69b9      	ldr	r1, [r7, #24]
 80124a2:	69fa      	ldr	r2, [r7, #28]
 80124a4:	e841 2300 	strex	r3, r2, [r1]
 80124a8:	617b      	str	r3, [r7, #20]
   return(result);
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d1e6      	bne.n	801247e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	69db      	ldr	r3, [r3, #28]
 80124b6:	f003 0310 	and.w	r3, r3, #16
 80124ba:	2b10      	cmp	r3, #16
 80124bc:	d103      	bne.n	80124c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2210      	movs	r2, #16
 80124c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124cc:	4619      	mov	r1, r3
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7fe fd66 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124d4:	e00b      	b.n	80124ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7ee f8e0 	bl	800069c <HAL_UART_RxCpltCallback>
}
 80124dc:	e007      	b.n	80124ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	699a      	ldr	r2, [r3, #24]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f042 0208 	orr.w	r2, r2, #8
 80124ec:	619a      	str	r2, [r3, #24]
}
 80124ee:	bf00      	nop
 80124f0:	3770      	adds	r7, #112	; 0x70
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	58000c00 	.word	0x58000c00

080124fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b09c      	sub	sp, #112	; 0x70
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801250a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012514:	2b22      	cmp	r3, #34	; 0x22
 8012516:	f040 80be 	bne.w	8012696 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012528:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801252a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801252e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012532:	4013      	ands	r3, r2
 8012534:	b29a      	uxth	r2, r3
 8012536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012538:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801253e:	1c9a      	adds	r2, r3, #2
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801254a:	b29b      	uxth	r3, r3
 801254c:	3b01      	subs	r3, #1
 801254e:	b29a      	uxth	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801255c:	b29b      	uxth	r3, r3
 801255e:	2b00      	cmp	r3, #0
 8012560:	f040 80a1 	bne.w	80126a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801256c:	e853 3f00 	ldrex	r3, [r3]
 8012570:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012578:	667b      	str	r3, [r7, #100]	; 0x64
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	461a      	mov	r2, r3
 8012580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012582:	657b      	str	r3, [r7, #84]	; 0x54
 8012584:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801258a:	e841 2300 	strex	r3, r2, [r1]
 801258e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1e6      	bne.n	8012564 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3308      	adds	r3, #8
 801259c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a0:	e853 3f00 	ldrex	r3, [r3]
 80125a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80125a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a8:	f023 0301 	bic.w	r3, r3, #1
 80125ac:	663b      	str	r3, [r7, #96]	; 0x60
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	3308      	adds	r3, #8
 80125b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125b6:	643a      	str	r2, [r7, #64]	; 0x40
 80125b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125be:	e841 2300 	strex	r3, r2, [r1]
 80125c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1e5      	bne.n	8012596 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2220      	movs	r2, #32
 80125ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4a33      	ldr	r2, [pc, #204]	; (80126b0 <UART_RxISR_16BIT+0x1b4>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d01f      	beq.n	8012628 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d018      	beq.n	8012628 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	e853 3f00 	ldrex	r3, [r3]
 8012602:	61fb      	str	r3, [r7, #28]
   return(result);
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801260a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	461a      	mov	r2, r3
 8012612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012616:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801261c:	e841 2300 	strex	r3, r2, [r1]
 8012620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1e6      	bne.n	80125f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262c:	2b01      	cmp	r3, #1
 801262e:	d12e      	bne.n	801268e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	e853 3f00 	ldrex	r3, [r3]
 8012642:	60bb      	str	r3, [r7, #8]
   return(result);
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	f023 0310 	bic.w	r3, r3, #16
 801264a:	65bb      	str	r3, [r7, #88]	; 0x58
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	461a      	mov	r2, r3
 8012652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012654:	61bb      	str	r3, [r7, #24]
 8012656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012658:	6979      	ldr	r1, [r7, #20]
 801265a:	69ba      	ldr	r2, [r7, #24]
 801265c:	e841 2300 	strex	r3, r2, [r1]
 8012660:	613b      	str	r3, [r7, #16]
   return(result);
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1e6      	bne.n	8012636 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	69db      	ldr	r3, [r3, #28]
 801266e:	f003 0310 	and.w	r3, r3, #16
 8012672:	2b10      	cmp	r3, #16
 8012674:	d103      	bne.n	801267e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2210      	movs	r2, #16
 801267c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012684:	4619      	mov	r1, r3
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7fe fc8a 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801268c:	e00b      	b.n	80126a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ee f804 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8012694:	e007      	b.n	80126a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	699a      	ldr	r2, [r3, #24]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f042 0208 	orr.w	r2, r2, #8
 80126a4:	619a      	str	r2, [r3, #24]
}
 80126a6:	bf00      	nop
 80126a8:	3770      	adds	r7, #112	; 0x70
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	58000c00 	.word	0x58000c00

080126b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b0ac      	sub	sp, #176	; 0xb0
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	69db      	ldr	r3, [r3, #28]
 80126cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126ea:	2b22      	cmp	r3, #34	; 0x22
 80126ec:	f040 8180 	bne.w	80129f0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126fa:	e123      	b.n	8012944 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012702:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012706:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801270a:	b2d9      	uxtb	r1, r3
 801270c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012710:	b2da      	uxtb	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012716:	400a      	ands	r2, r1
 8012718:	b2d2      	uxtb	r2, r2
 801271a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012720:	1c5a      	adds	r2, r3, #1
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801272c:	b29b      	uxth	r3, r3
 801272e:	3b01      	subs	r3, #1
 8012730:	b29a      	uxth	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	69db      	ldr	r3, [r3, #28]
 801273e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012746:	f003 0307 	and.w	r3, r3, #7
 801274a:	2b00      	cmp	r3, #0
 801274c:	d053      	beq.n	80127f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012752:	f003 0301 	and.w	r3, r3, #1
 8012756:	2b00      	cmp	r3, #0
 8012758:	d011      	beq.n	801277e <UART_RxISR_8BIT_FIFOEN+0xca>
 801275a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00b      	beq.n	801277e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2201      	movs	r2, #1
 801276c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012774:	f043 0201 	orr.w	r2, r3, #1
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801277e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012782:	f003 0302 	and.w	r3, r3, #2
 8012786:	2b00      	cmp	r3, #0
 8012788:	d011      	beq.n	80127ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 801278a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801278e:	f003 0301 	and.w	r3, r3, #1
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00b      	beq.n	80127ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2202      	movs	r2, #2
 801279c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a4:	f043 0204 	orr.w	r2, r3, #4
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127b2:	f003 0304 	and.w	r3, r3, #4
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d011      	beq.n	80127de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80127ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d00b      	beq.n	80127de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2204      	movs	r2, #4
 80127cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127d4:	f043 0202 	orr.w	r2, r3, #2
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d006      	beq.n	80127f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7fe fbcf 	bl	8010f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	f040 80a0 	bne.w	8012944 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801280c:	e853 3f00 	ldrex	r3, [r3]
 8012810:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	461a      	mov	r2, r3
 8012822:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012828:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801282c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801282e:	e841 2300 	strex	r3, r2, [r1]
 8012832:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012836:	2b00      	cmp	r3, #0
 8012838:	d1e4      	bne.n	8012804 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	3308      	adds	r3, #8
 8012840:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012844:	e853 3f00 	ldrex	r3, [r3]
 8012848:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801284a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801284c:	4b6e      	ldr	r3, [pc, #440]	; (8012a08 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801284e:	4013      	ands	r3, r2
 8012850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	3308      	adds	r3, #8
 801285a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801285e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012860:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012862:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012864:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012866:	e841 2300 	strex	r3, r2, [r1]
 801286a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801286c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1e3      	bne.n	801283a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2220      	movs	r2, #32
 8012876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2200      	movs	r2, #0
 8012884:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a60      	ldr	r2, [pc, #384]	; (8012a0c <UART_RxISR_8BIT_FIFOEN+0x358>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d021      	beq.n	80128d4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801289a:	2b00      	cmp	r3, #0
 801289c:	d01a      	beq.n	80128d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128a6:	e853 3f00 	ldrex	r3, [r3]
 80128aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80128ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80128b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	461a      	mov	r2, r3
 80128bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128c0:	657b      	str	r3, [r7, #84]	; 0x54
 80128c2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128c8:	e841 2300 	strex	r3, r2, [r1]
 80128cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d1e4      	bne.n	801289e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d130      	bne.n	801293e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2200      	movs	r2, #0
 80128e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ea:	e853 3f00 	ldrex	r3, [r3]
 80128ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f2:	f023 0310 	bic.w	r3, r3, #16
 80128f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012904:	643b      	str	r3, [r7, #64]	; 0x40
 8012906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801290a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801290c:	e841 2300 	strex	r3, r2, [r1]
 8012910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1e4      	bne.n	80128e2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	69db      	ldr	r3, [r3, #28]
 801291e:	f003 0310 	and.w	r3, r3, #16
 8012922:	2b10      	cmp	r3, #16
 8012924:	d103      	bne.n	801292e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	2210      	movs	r2, #16
 801292c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012934:	4619      	mov	r1, r3
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7fe fb32 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
 801293c:	e002      	b.n	8012944 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7ed feac 	bl	800069c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012944:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012948:	2b00      	cmp	r3, #0
 801294a:	d006      	beq.n	801295a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012950:	f003 0320 	and.w	r3, r3, #32
 8012954:	2b00      	cmp	r3, #0
 8012956:	f47f aed1 	bne.w	80126fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012960:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012964:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012968:	2b00      	cmp	r3, #0
 801296a:	d049      	beq.n	8012a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012972:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012976:	429a      	cmp	r2, r3
 8012978:	d242      	bcs.n	8012a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012982:	6a3b      	ldr	r3, [r7, #32]
 8012984:	e853 3f00 	ldrex	r3, [r3]
 8012988:	61fb      	str	r3, [r7, #28]
   return(result);
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3308      	adds	r3, #8
 801299a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801299e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80129a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129a6:	e841 2300 	strex	r3, r2, [r1]
 80129aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1e3      	bne.n	801297a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	4a16      	ldr	r2, [pc, #88]	; (8012a10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80129b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	e853 3f00 	ldrex	r3, [r3]
 80129c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	f043 0320 	orr.w	r3, r3, #32
 80129cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	461a      	mov	r2, r3
 80129d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129da:	61bb      	str	r3, [r7, #24]
 80129dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129de:	6979      	ldr	r1, [r7, #20]
 80129e0:	69ba      	ldr	r2, [r7, #24]
 80129e2:	e841 2300 	strex	r3, r2, [r1]
 80129e6:	613b      	str	r3, [r7, #16]
   return(result);
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1e4      	bne.n	80129b8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129ee:	e007      	b.n	8012a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	699a      	ldr	r2, [r3, #24]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	f042 0208 	orr.w	r2, r2, #8
 80129fe:	619a      	str	r2, [r3, #24]
}
 8012a00:	bf00      	nop
 8012a02:	37b0      	adds	r7, #176	; 0xb0
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	effffffe 	.word	0xeffffffe
 8012a0c:	58000c00 	.word	0x58000c00
 8012a10:	08012345 	.word	0x08012345

08012a14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b0ae      	sub	sp, #184	; 0xb8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a22:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	69db      	ldr	r3, [r3, #28]
 8012a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a4a:	2b22      	cmp	r3, #34	; 0x22
 8012a4c:	f040 8184 	bne.w	8012d58 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a56:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a5a:	e127      	b.n	8012cac <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a62:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012a6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012a72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012a76:	4013      	ands	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012a7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a84:	1c9a      	adds	r2, r3, #2
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	3b01      	subs	r3, #1
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	69db      	ldr	r3, [r3, #28]
 8012aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012aaa:	f003 0307 	and.w	r3, r3, #7
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d053      	beq.n	8012b5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d011      	beq.n	8012ae2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00b      	beq.n	8012ae2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2201      	movs	r2, #1
 8012ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ad8:	f043 0201 	orr.w	r2, r3, #1
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012ae6:	f003 0302 	and.w	r3, r3, #2
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d011      	beq.n	8012b12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012af2:	f003 0301 	and.w	r3, r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00b      	beq.n	8012b12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2202      	movs	r2, #2
 8012b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b08:	f043 0204 	orr.w	r2, r3, #4
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b16:	f003 0304 	and.w	r3, r3, #4
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d011      	beq.n	8012b42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d00b      	beq.n	8012b42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2204      	movs	r2, #4
 8012b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b38:	f043 0202 	orr.w	r2, r3, #2
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d006      	beq.n	8012b5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7fe fa1d 	bl	8010f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f040 80a2 	bne.w	8012cac <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b70:	e853 3f00 	ldrex	r3, [r3]
 8012b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	461a      	mov	r2, r3
 8012b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b96:	e841 2300 	strex	r3, r2, [r1]
 8012b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1e2      	bne.n	8012b68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	3308      	adds	r3, #8
 8012ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bac:	e853 3f00 	ldrex	r3, [r3]
 8012bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012bb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012bb4:	4b6e      	ldr	r3, [pc, #440]	; (8012d70 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	3308      	adds	r3, #8
 8012bc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012bce:	e841 2300 	strex	r3, r2, [r1]
 8012bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1e3      	bne.n	8012ba2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2220      	movs	r2, #32
 8012bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2200      	movs	r2, #0
 8012bec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a60      	ldr	r2, [pc, #384]	; (8012d74 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d021      	beq.n	8012c3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d01a      	beq.n	8012c3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c0e:	e853 3f00 	ldrex	r3, [r3]
 8012c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	461a      	mov	r2, r3
 8012c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c30:	e841 2300 	strex	r3, r2, [r1]
 8012c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d1e4      	bne.n	8012c06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	d130      	bne.n	8012ca6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c52:	e853 3f00 	ldrex	r3, [r3]
 8012c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c5a:	f023 0310 	bic.w	r3, r3, #16
 8012c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	461a      	mov	r2, r3
 8012c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8012c6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c74:	e841 2300 	strex	r3, r2, [r1]
 8012c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d1e4      	bne.n	8012c4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	69db      	ldr	r3, [r3, #28]
 8012c86:	f003 0310 	and.w	r3, r3, #16
 8012c8a:	2b10      	cmp	r3, #16
 8012c8c:	d103      	bne.n	8012c96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2210      	movs	r2, #16
 8012c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7fe f97e 	bl	8010fa0 <HAL_UARTEx_RxEventCallback>
 8012ca4:	e002      	b.n	8012cac <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f7ed fcf8 	bl	800069c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012cac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d006      	beq.n	8012cc2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012cb8:	f003 0320 	and.w	r3, r3, #32
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f47f aecd 	bne.w	8012a5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cc8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012ccc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d049      	beq.n	8012d68 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d242      	bcs.n	8012d68 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	3308      	adds	r3, #8
 8012ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cec:	e853 3f00 	ldrex	r3, [r3]
 8012cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3308      	adds	r3, #8
 8012d02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012d06:	633a      	str	r2, [r7, #48]	; 0x30
 8012d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0e:	e841 2300 	strex	r3, r2, [r1]
 8012d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d1e3      	bne.n	8012ce2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4a16      	ldr	r2, [pc, #88]	; (8012d78 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012d1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	e853 3f00 	ldrex	r3, [r3]
 8012d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f043 0320 	orr.w	r3, r3, #32
 8012d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d42:	61fb      	str	r3, [r7, #28]
 8012d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d46:	69b9      	ldr	r1, [r7, #24]
 8012d48:	69fa      	ldr	r2, [r7, #28]
 8012d4a:	e841 2300 	strex	r3, r2, [r1]
 8012d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1e4      	bne.n	8012d20 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d56:	e007      	b.n	8012d68 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	699a      	ldr	r2, [r3, #24]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f042 0208 	orr.w	r2, r2, #8
 8012d66:	619a      	str	r2, [r3, #24]
}
 8012d68:	bf00      	nop
 8012d6a:	37b8      	adds	r7, #184	; 0xb8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	effffffe 	.word	0xeffffffe
 8012d74:	58000c00 	.word	0x58000c00
 8012d78:	080124fd 	.word	0x080124fd

08012d7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012d84:	bf00      	nop
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d98:	bf00      	nop
 8012d9a:	370c      	adds	r7, #12
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr

08012da4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012dac:	bf00      	nop
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b089      	sub	sp, #36	; 0x24
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d101      	bne.n	8012dce <HAL_UARTEx_EnableStopMode+0x16>
 8012dca:	2302      	movs	r3, #2
 8012dcc:	e021      	b.n	8012e12 <HAL_UARTEx_EnableStopMode+0x5a>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	e853 3f00 	ldrex	r3, [r3]
 8012de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	f043 0302 	orr.w	r3, r3, #2
 8012dea:	61fb      	str	r3, [r7, #28]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	461a      	mov	r2, r3
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	61bb      	str	r3, [r7, #24]
 8012df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df8:	6979      	ldr	r1, [r7, #20]
 8012dfa:	69ba      	ldr	r2, [r7, #24]
 8012dfc:	e841 2300 	strex	r3, r2, [r1]
 8012e00:	613b      	str	r3, [r7, #16]
   return(result);
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1e6      	bne.n	8012dd6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3724      	adds	r7, #36	; 0x24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b084      	sub	sp, #16
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d101      	bne.n	8012e34 <HAL_UARTEx_EnableFifoMode+0x16>
 8012e30:	2302      	movs	r3, #2
 8012e32:	e02b      	b.n	8012e8c <HAL_UARTEx_EnableFifoMode+0x6e>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2201      	movs	r2, #1
 8012e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2224      	movs	r2, #36	; 0x24
 8012e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f022 0201 	bic.w	r2, r2, #1
 8012e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012e6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f000 f8c3 	bl	8013000 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2220      	movs	r2, #32
 8012e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3710      	adds	r7, #16
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d101      	bne.n	8012eaa <HAL_UARTEx_DisableFifoMode+0x16>
 8012ea6:	2302      	movs	r3, #2
 8012ea8:	e027      	b.n	8012efa <HAL_UARTEx_DisableFifoMode+0x66>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2201      	movs	r2, #1
 8012eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2224      	movs	r2, #36	; 0x24
 8012eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f022 0201 	bic.w	r2, r2, #1
 8012ed0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ed8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2220      	movs	r2, #32
 8012eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ef8:	2300      	movs	r3, #0
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3714      	adds	r7, #20
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f06:	b580      	push	{r7, lr}
 8012f08:	b084      	sub	sp, #16
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
 8012f0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d101      	bne.n	8012f1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012f1a:	2302      	movs	r3, #2
 8012f1c:	e02d      	b.n	8012f7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2201      	movs	r2, #1
 8012f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2224      	movs	r2, #36	; 0x24
 8012f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f022 0201 	bic.w	r2, r2, #1
 8012f44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	689b      	ldr	r3, [r3, #8]
 8012f4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	683a      	ldr	r2, [r7, #0]
 8012f56:	430a      	orrs	r2, r1
 8012f58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 f850 	bl	8013000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	68fa      	ldr	r2, [r7, #12]
 8012f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2220      	movs	r2, #32
 8012f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f78:	2300      	movs	r3, #0
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f92:	2b01      	cmp	r3, #1
 8012f94:	d101      	bne.n	8012f9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f96:	2302      	movs	r3, #2
 8012f98:	e02d      	b.n	8012ff6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2224      	movs	r2, #36	; 0x24
 8012fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	f022 0201 	bic.w	r2, r2, #1
 8012fc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	683a      	ldr	r2, [r7, #0]
 8012fd2:	430a      	orrs	r2, r1
 8012fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f000 f812 	bl	8013000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	68fa      	ldr	r2, [r7, #12]
 8012fe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2220      	movs	r2, #32
 8012fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801300c:	2b00      	cmp	r3, #0
 801300e:	d108      	bne.n	8013022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2201      	movs	r2, #1
 8013014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2201      	movs	r2, #1
 801301c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013020:	e031      	b.n	8013086 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013022:	2310      	movs	r3, #16
 8013024:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013026:	2310      	movs	r3, #16
 8013028:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	0e5b      	lsrs	r3, r3, #25
 8013032:	b2db      	uxtb	r3, r3
 8013034:	f003 0307 	and.w	r3, r3, #7
 8013038:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	689b      	ldr	r3, [r3, #8]
 8013040:	0f5b      	lsrs	r3, r3, #29
 8013042:	b2db      	uxtb	r3, r3
 8013044:	f003 0307 	and.w	r3, r3, #7
 8013048:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801304a:	7bbb      	ldrb	r3, [r7, #14]
 801304c:	7b3a      	ldrb	r2, [r7, #12]
 801304e:	4911      	ldr	r1, [pc, #68]	; (8013094 <UARTEx_SetNbDataToProcess+0x94>)
 8013050:	5c8a      	ldrb	r2, [r1, r2]
 8013052:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013056:	7b3a      	ldrb	r2, [r7, #12]
 8013058:	490f      	ldr	r1, [pc, #60]	; (8013098 <UARTEx_SetNbDataToProcess+0x98>)
 801305a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801305c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013068:	7bfb      	ldrb	r3, [r7, #15]
 801306a:	7b7a      	ldrb	r2, [r7, #13]
 801306c:	4909      	ldr	r1, [pc, #36]	; (8013094 <UARTEx_SetNbDataToProcess+0x94>)
 801306e:	5c8a      	ldrb	r2, [r1, r2]
 8013070:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013074:	7b7a      	ldrb	r2, [r7, #13]
 8013076:	4908      	ldr	r1, [pc, #32]	; (8013098 <UARTEx_SetNbDataToProcess+0x98>)
 8013078:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801307a:	fb93 f3f2 	sdiv	r3, r3, r2
 801307e:	b29a      	uxth	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013086:	bf00      	nop
 8013088:	3714      	adds	r7, #20
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	08017a34 	.word	0x08017a34
 8013098:	08017a3c 	.word	0x08017a3c

0801309c <__NVIC_SetPriority>:
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	6039      	str	r1, [r7, #0]
 80130a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80130a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	db0a      	blt.n	80130c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	b2da      	uxtb	r2, r3
 80130b4:	490c      	ldr	r1, [pc, #48]	; (80130e8 <__NVIC_SetPriority+0x4c>)
 80130b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130ba:	0112      	lsls	r2, r2, #4
 80130bc:	b2d2      	uxtb	r2, r2
 80130be:	440b      	add	r3, r1
 80130c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80130c4:	e00a      	b.n	80130dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	b2da      	uxtb	r2, r3
 80130ca:	4908      	ldr	r1, [pc, #32]	; (80130ec <__NVIC_SetPriority+0x50>)
 80130cc:	88fb      	ldrh	r3, [r7, #6]
 80130ce:	f003 030f 	and.w	r3, r3, #15
 80130d2:	3b04      	subs	r3, #4
 80130d4:	0112      	lsls	r2, r2, #4
 80130d6:	b2d2      	uxtb	r2, r2
 80130d8:	440b      	add	r3, r1
 80130da:	761a      	strb	r2, [r3, #24]
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	e000e100 	.word	0xe000e100
 80130ec:	e000ed00 	.word	0xe000ed00

080130f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80130f0:	b580      	push	{r7, lr}
 80130f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80130f4:	4b05      	ldr	r3, [pc, #20]	; (801310c <SysTick_Handler+0x1c>)
 80130f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80130f8:	f002 fc92 	bl	8015a20 <xTaskGetSchedulerState>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d001      	beq.n	8013106 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013102:	f003 fab1 	bl	8016668 <xPortSysTickHandler>
  }
}
 8013106:	bf00      	nop
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	e000e010 	.word	0xe000e010

08013110 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013110:	b580      	push	{r7, lr}
 8013112:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013114:	2100      	movs	r1, #0
 8013116:	f06f 0004 	mvn.w	r0, #4
 801311a:	f7ff ffbf 	bl	801309c <__NVIC_SetPriority>
#endif
}
 801311e:	bf00      	nop
 8013120:	bd80      	pop	{r7, pc}
	...

08013124 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801312a:	f3ef 8305 	mrs	r3, IPSR
 801312e:	603b      	str	r3, [r7, #0]
  return(result);
 8013130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013132:	2b00      	cmp	r3, #0
 8013134:	d003      	beq.n	801313e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013136:	f06f 0305 	mvn.w	r3, #5
 801313a:	607b      	str	r3, [r7, #4]
 801313c:	e00c      	b.n	8013158 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801313e:	4b0a      	ldr	r3, [pc, #40]	; (8013168 <osKernelInitialize+0x44>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d105      	bne.n	8013152 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013146:	4b08      	ldr	r3, [pc, #32]	; (8013168 <osKernelInitialize+0x44>)
 8013148:	2201      	movs	r2, #1
 801314a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801314c:	2300      	movs	r3, #0
 801314e:	607b      	str	r3, [r7, #4]
 8013150:	e002      	b.n	8013158 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013156:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013158:	687b      	ldr	r3, [r7, #4]
}
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop
 8013168:	240010e8 	.word	0x240010e8

0801316c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013172:	f3ef 8305 	mrs	r3, IPSR
 8013176:	603b      	str	r3, [r7, #0]
  return(result);
 8013178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801317a:	2b00      	cmp	r3, #0
 801317c:	d003      	beq.n	8013186 <osKernelStart+0x1a>
    stat = osErrorISR;
 801317e:	f06f 0305 	mvn.w	r3, #5
 8013182:	607b      	str	r3, [r7, #4]
 8013184:	e010      	b.n	80131a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013186:	4b0b      	ldr	r3, [pc, #44]	; (80131b4 <osKernelStart+0x48>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d109      	bne.n	80131a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801318e:	f7ff ffbf 	bl	8013110 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013192:	4b08      	ldr	r3, [pc, #32]	; (80131b4 <osKernelStart+0x48>)
 8013194:	2202      	movs	r2, #2
 8013196:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013198:	f001 ff54 	bl	8015044 <vTaskStartScheduler>
      stat = osOK;
 801319c:	2300      	movs	r3, #0
 801319e:	607b      	str	r3, [r7, #4]
 80131a0:	e002      	b.n	80131a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80131a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80131a8:	687b      	ldr	r3, [r7, #4]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	240010e8 	.word	0x240010e8

080131b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b08e      	sub	sp, #56	; 0x38
 80131bc:	af04      	add	r7, sp, #16
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80131c4:	2300      	movs	r3, #0
 80131c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131c8:	f3ef 8305 	mrs	r3, IPSR
 80131cc:	617b      	str	r3, [r7, #20]
  return(result);
 80131ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d17e      	bne.n	80132d2 <osThreadNew+0x11a>
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d07b      	beq.n	80132d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80131da:	2380      	movs	r3, #128	; 0x80
 80131dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80131de:	2318      	movs	r3, #24
 80131e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80131e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d045      	beq.n	801327e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d002      	beq.n	8013200 <osThreadNew+0x48>
        name = attr->name;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	699b      	ldr	r3, [r3, #24]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d002      	beq.n	801320e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d008      	beq.n	8013226 <osThreadNew+0x6e>
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	2b38      	cmp	r3, #56	; 0x38
 8013218:	d805      	bhi.n	8013226 <osThreadNew+0x6e>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	f003 0301 	and.w	r3, r3, #1
 8013222:	2b00      	cmp	r3, #0
 8013224:	d001      	beq.n	801322a <osThreadNew+0x72>
        return (NULL);
 8013226:	2300      	movs	r3, #0
 8013228:	e054      	b.n	80132d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	695b      	ldr	r3, [r3, #20]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d003      	beq.n	801323a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	695b      	ldr	r3, [r3, #20]
 8013236:	089b      	lsrs	r3, r3, #2
 8013238:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00e      	beq.n	8013260 <osThreadNew+0xa8>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	68db      	ldr	r3, [r3, #12]
 8013246:	2b5b      	cmp	r3, #91	; 0x5b
 8013248:	d90a      	bls.n	8013260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801324e:	2b00      	cmp	r3, #0
 8013250:	d006      	beq.n	8013260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	695b      	ldr	r3, [r3, #20]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d002      	beq.n	8013260 <osThreadNew+0xa8>
        mem = 1;
 801325a:	2301      	movs	r3, #1
 801325c:	61bb      	str	r3, [r7, #24]
 801325e:	e010      	b.n	8013282 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10c      	bne.n	8013282 <osThreadNew+0xca>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d108      	bne.n	8013282 <osThreadNew+0xca>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d104      	bne.n	8013282 <osThreadNew+0xca>
          mem = 0;
 8013278:	2300      	movs	r3, #0
 801327a:	61bb      	str	r3, [r7, #24]
 801327c:	e001      	b.n	8013282 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801327e:	2300      	movs	r3, #0
 8013280:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013282:	69bb      	ldr	r3, [r7, #24]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d110      	bne.n	80132aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013290:	9202      	str	r2, [sp, #8]
 8013292:	9301      	str	r3, [sp, #4]
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	6a3a      	ldr	r2, [r7, #32]
 801329c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f001 fbe0 	bl	8014a64 <xTaskCreateStatic>
 80132a4:	4603      	mov	r3, r0
 80132a6:	613b      	str	r3, [r7, #16]
 80132a8:	e013      	b.n	80132d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d110      	bne.n	80132d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80132b0:	6a3b      	ldr	r3, [r7, #32]
 80132b2:	b29a      	uxth	r2, r3
 80132b4:	f107 0310 	add.w	r3, r7, #16
 80132b8:	9301      	str	r3, [sp, #4]
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	9300      	str	r3, [sp, #0]
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f001 fc2b 	bl	8014b1e <xTaskCreate>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d001      	beq.n	80132d2 <osThreadNew+0x11a>
            hTask = NULL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132d2:	693b      	ldr	r3, [r7, #16]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3728      	adds	r7, #40	; 0x28
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132e2:	f3ef 8305 	mrs	r3, IPSR
 80132e6:	603b      	str	r3, [r7, #0]
  return(result);
 80132e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d003      	beq.n	80132f6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80132ee:	f06f 0305 	mvn.w	r3, #5
 80132f2:	607b      	str	r3, [r7, #4]
 80132f4:	e009      	b.n	801330a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80132f6:	2300      	movs	r3, #0
 80132f8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80132fa:	4b07      	ldr	r3, [pc, #28]	; (8013318 <osThreadYield+0x3c>)
 80132fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013300:	601a      	str	r2, [r3, #0]
 8013302:	f3bf 8f4f 	dsb	sy
 8013306:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801330a:	687b      	ldr	r3, [r7, #4]
}
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	e000ed04 	.word	0xe000ed04

0801331c <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013328:	f3ef 8305 	mrs	r3, IPSR
 801332c:	60fb      	str	r3, [r7, #12]
  return(result);
 801332e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013330:	2b00      	cmp	r3, #0
 8013332:	d003      	beq.n	801333c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013334:	f06f 0305 	mvn.w	r3, #5
 8013338:	617b      	str	r3, [r7, #20]
 801333a:	e00b      	b.n	8013354 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d103      	bne.n	801334a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013342:	f06f 0303 	mvn.w	r3, #3
 8013346:	617b      	str	r3, [r7, #20]
 8013348:	e004      	b.n	8013354 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801334a:	2300      	movs	r3, #0
 801334c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801334e:	6938      	ldr	r0, [r7, #16]
 8013350:	f001 fd5e 	bl	8014e10 <vTaskSuspend>
  }

  return (stat);
 8013354:	697b      	ldr	r3, [r7, #20]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3718      	adds	r7, #24
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801335e:	b580      	push	{r7, lr}
 8013360:	b084      	sub	sp, #16
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013366:	f3ef 8305 	mrs	r3, IPSR
 801336a:	60bb      	str	r3, [r7, #8]
  return(result);
 801336c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801336e:	2b00      	cmp	r3, #0
 8013370:	d003      	beq.n	801337a <osDelay+0x1c>
    stat = osErrorISR;
 8013372:	f06f 0305 	mvn.w	r3, #5
 8013376:	60fb      	str	r3, [r7, #12]
 8013378:	e007      	b.n	801338a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801337a:	2300      	movs	r3, #0
 801337c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <osDelay+0x2c>
      vTaskDelay(ticks);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f001 fd0f 	bl	8014da8 <vTaskDelay>
    }
  }

  return (stat);
 801338a:	68fb      	ldr	r3, [r7, #12]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3710      	adds	r7, #16
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801339c:	2300      	movs	r3, #0
 801339e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133a0:	f3ef 8305 	mrs	r3, IPSR
 80133a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80133a6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d12d      	bne.n	8013408 <osEventFlagsNew+0x74>
    mem = -1;
 80133ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133b0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d015      	beq.n	80133e4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d006      	beq.n	80133ce <osEventFlagsNew+0x3a>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	2b1f      	cmp	r3, #31
 80133c6:	d902      	bls.n	80133ce <osEventFlagsNew+0x3a>
        mem = 1;
 80133c8:	2301      	movs	r3, #1
 80133ca:	613b      	str	r3, [r7, #16]
 80133cc:	e00c      	b.n	80133e8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d108      	bne.n	80133e8 <osEventFlagsNew+0x54>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d104      	bne.n	80133e8 <osEventFlagsNew+0x54>
          mem = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	613b      	str	r3, [r7, #16]
 80133e2:	e001      	b.n	80133e8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80133e4:	2300      	movs	r3, #0
 80133e6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d106      	bne.n	80133fc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	689b      	ldr	r3, [r3, #8]
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 fa70 	bl	80138d8 <xEventGroupCreateStatic>
 80133f8:	6178      	str	r0, [r7, #20]
 80133fa:	e005      	b.n	8013408 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d102      	bne.n	8013408 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013402:	f000 faa0 	bl	8013946 <xEventGroupCreate>
 8013406:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013408:	697b      	ldr	r3, [r7, #20]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3718      	adds	r7, #24
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
	...

08013414 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013414:	b580      	push	{r7, lr}
 8013416:	b086      	sub	sp, #24
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d004      	beq.n	8013432 <osEventFlagsSet+0x1e>
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801342e:	2b00      	cmp	r3, #0
 8013430:	d003      	beq.n	801343a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013432:	f06f 0303 	mvn.w	r3, #3
 8013436:	617b      	str	r3, [r7, #20]
 8013438:	e028      	b.n	801348c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801343a:	f3ef 8305 	mrs	r3, IPSR
 801343e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013440:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013442:	2b00      	cmp	r3, #0
 8013444:	d01d      	beq.n	8013482 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013446:	2300      	movs	r3, #0
 8013448:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801344a:	f107 0308 	add.w	r3, r7, #8
 801344e:	461a      	mov	r2, r3
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	6938      	ldr	r0, [r7, #16]
 8013454:	f000 fc98 	bl	8013d88 <xEventGroupSetBitsFromISR>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d103      	bne.n	8013466 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801345e:	f06f 0302 	mvn.w	r3, #2
 8013462:	617b      	str	r3, [r7, #20]
 8013464:	e012      	b.n	801348c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d00d      	beq.n	801348c <osEventFlagsSet+0x78>
 8013470:	4b09      	ldr	r3, [pc, #36]	; (8013498 <osEventFlagsSet+0x84>)
 8013472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013476:	601a      	str	r2, [r3, #0]
 8013478:	f3bf 8f4f 	dsb	sy
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	e004      	b.n	801348c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013482:	6839      	ldr	r1, [r7, #0]
 8013484:	6938      	ldr	r0, [r7, #16]
 8013486:	f000 fbb7 	bl	8013bf8 <xEventGroupSetBits>
 801348a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801348c:	697b      	ldr	r3, [r7, #20]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	e000ed04 	.word	0xe000ed04

0801349c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d004      	beq.n	80134ba <osEventFlagsClear+0x1e>
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d003      	beq.n	80134c2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80134ba:	f06f 0303 	mvn.w	r3, #3
 80134be:	617b      	str	r3, [r7, #20]
 80134c0:	e019      	b.n	80134f6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134c2:	f3ef 8305 	mrs	r3, IPSR
 80134c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80134c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d00e      	beq.n	80134ec <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80134ce:	6938      	ldr	r0, [r7, #16]
 80134d0:	f000 fb6e 	bl	8013bb0 <xEventGroupGetBitsFromISR>
 80134d4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80134d6:	6839      	ldr	r1, [r7, #0]
 80134d8:	6938      	ldr	r0, [r7, #16]
 80134da:	f000 fb55 	bl	8013b88 <xEventGroupClearBitsFromISR>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d108      	bne.n	80134f6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80134e4:	f06f 0302 	mvn.w	r3, #2
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	e004      	b.n	80134f6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6938      	ldr	r0, [r7, #16]
 80134f0:	f000 fb12 	bl	8013b18 <xEventGroupClearBits>
 80134f4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80134f6:	697b      	ldr	r3, [r7, #20]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3718      	adds	r7, #24
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d102      	bne.n	8013518 <osEventFlagsGet+0x18>
    rflags = 0U;
 8013512:	2300      	movs	r3, #0
 8013514:	617b      	str	r3, [r7, #20]
 8013516:	e00f      	b.n	8013538 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013518:	f3ef 8305 	mrs	r3, IPSR
 801351c:	60fb      	str	r3, [r7, #12]
  return(result);
 801351e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013520:	2b00      	cmp	r3, #0
 8013522:	d004      	beq.n	801352e <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013524:	6938      	ldr	r0, [r7, #16]
 8013526:	f000 fb43 	bl	8013bb0 <xEventGroupGetBitsFromISR>
 801352a:	6178      	str	r0, [r7, #20]
 801352c:	e004      	b.n	8013538 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 801352e:	2100      	movs	r1, #0
 8013530:	6938      	ldr	r0, [r7, #16]
 8013532:	f000 faf1 	bl	8013b18 <xEventGroupClearBits>
 8013536:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013538:	697b      	ldr	r3, [r7, #20]
}
 801353a:	4618      	mov	r0, r3
 801353c:	3718      	adds	r7, #24
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}

08013542 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013542:	b580      	push	{r7, lr}
 8013544:	b08c      	sub	sp, #48	; 0x30
 8013546:	af02      	add	r7, sp, #8
 8013548:	60f8      	str	r0, [r7, #12]
 801354a:	60b9      	str	r1, [r7, #8]
 801354c:	607a      	str	r2, [r7, #4]
 801354e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d004      	beq.n	8013564 <osEventFlagsWait+0x22>
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013560:	2b00      	cmp	r3, #0
 8013562:	d003      	beq.n	801356c <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013564:	f06f 0303 	mvn.w	r3, #3
 8013568:	61fb      	str	r3, [r7, #28]
 801356a:	e04b      	b.n	8013604 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801356c:	f3ef 8305 	mrs	r3, IPSR
 8013570:	617b      	str	r3, [r7, #20]
  return(result);
 8013572:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013574:	2b00      	cmp	r3, #0
 8013576:	d003      	beq.n	8013580 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013578:	f06f 0305 	mvn.w	r3, #5
 801357c:	61fb      	str	r3, [r7, #28]
 801357e:	e041      	b.n	8013604 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f003 0301 	and.w	r3, r3, #1
 8013586:	2b00      	cmp	r3, #0
 8013588:	d002      	beq.n	8013590 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801358a:	2301      	movs	r3, #1
 801358c:	627b      	str	r3, [r7, #36]	; 0x24
 801358e:	e001      	b.n	8013594 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013590:	2300      	movs	r3, #0
 8013592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f003 0302 	and.w	r3, r3, #2
 801359a:	2b00      	cmp	r3, #0
 801359c:	d002      	beq.n	80135a4 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801359e:	2300      	movs	r3, #0
 80135a0:	623b      	str	r3, [r7, #32]
 80135a2:	e001      	b.n	80135a8 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80135a4:	2301      	movs	r3, #1
 80135a6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ae:	6a3a      	ldr	r2, [r7, #32]
 80135b0:	68b9      	ldr	r1, [r7, #8]
 80135b2:	69b8      	ldr	r0, [r7, #24]
 80135b4:	f000 f9e2 	bl	801397c <xEventGroupWaitBits>
 80135b8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d010      	beq.n	80135e6 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80135c4:	68ba      	ldr	r2, [r7, #8]
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	4013      	ands	r3, r2
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d019      	beq.n	8013604 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d003      	beq.n	80135de <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80135d6:	f06f 0301 	mvn.w	r3, #1
 80135da:	61fb      	str	r3, [r7, #28]
 80135dc:	e012      	b.n	8013604 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135de:	f06f 0302 	mvn.w	r3, #2
 80135e2:	61fb      	str	r3, [r7, #28]
 80135e4:	e00e      	b.n	8013604 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	4013      	ands	r3, r2
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d109      	bne.n	8013604 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d003      	beq.n	80135fe <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80135f6:	f06f 0301 	mvn.w	r3, #1
 80135fa:	61fb      	str	r3, [r7, #28]
 80135fc:	e002      	b.n	8013604 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135fe:	f06f 0302 	mvn.w	r3, #2
 8013602:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013604:	69fb      	ldr	r3, [r7, #28]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3728      	adds	r7, #40	; 0x28
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801360e:	b580      	push	{r7, lr}
 8013610:	b08a      	sub	sp, #40	; 0x28
 8013612:	af02      	add	r7, sp, #8
 8013614:	60f8      	str	r0, [r7, #12]
 8013616:	60b9      	str	r1, [r7, #8]
 8013618:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801361a:	2300      	movs	r3, #0
 801361c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801361e:	f3ef 8305 	mrs	r3, IPSR
 8013622:	613b      	str	r3, [r7, #16]
  return(result);
 8013624:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013626:	2b00      	cmp	r3, #0
 8013628:	d15f      	bne.n	80136ea <osMessageQueueNew+0xdc>
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d05c      	beq.n	80136ea <osMessageQueueNew+0xdc>
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d059      	beq.n	80136ea <osMessageQueueNew+0xdc>
    mem = -1;
 8013636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801363a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d029      	beq.n	8013696 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d012      	beq.n	8013670 <osMessageQueueNew+0x62>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	2b4f      	cmp	r3, #79	; 0x4f
 8013650:	d90e      	bls.n	8013670 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00a      	beq.n	8013670 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	695a      	ldr	r2, [r3, #20]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	68b9      	ldr	r1, [r7, #8]
 8013662:	fb01 f303 	mul.w	r3, r1, r3
 8013666:	429a      	cmp	r2, r3
 8013668:	d302      	bcc.n	8013670 <osMessageQueueNew+0x62>
        mem = 1;
 801366a:	2301      	movs	r3, #1
 801366c:	61bb      	str	r3, [r7, #24]
 801366e:	e014      	b.n	801369a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d110      	bne.n	801369a <osMessageQueueNew+0x8c>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10c      	bne.n	801369a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013684:	2b00      	cmp	r3, #0
 8013686:	d108      	bne.n	801369a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	695b      	ldr	r3, [r3, #20]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d104      	bne.n	801369a <osMessageQueueNew+0x8c>
          mem = 0;
 8013690:	2300      	movs	r3, #0
 8013692:	61bb      	str	r3, [r7, #24]
 8013694:	e001      	b.n	801369a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013696:	2300      	movs	r3, #0
 8013698:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d10b      	bne.n	80136b8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	691a      	ldr	r2, [r3, #16]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	689b      	ldr	r3, [r3, #8]
 80136a8:	2100      	movs	r1, #0
 80136aa:	9100      	str	r1, [sp, #0]
 80136ac:	68b9      	ldr	r1, [r7, #8]
 80136ae:	68f8      	ldr	r0, [r7, #12]
 80136b0:	f000 fc9a 	bl	8013fe8 <xQueueGenericCreateStatic>
 80136b4:	61f8      	str	r0, [r7, #28]
 80136b6:	e008      	b.n	80136ca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d105      	bne.n	80136ca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80136be:	2200      	movs	r2, #0
 80136c0:	68b9      	ldr	r1, [r7, #8]
 80136c2:	68f8      	ldr	r0, [r7, #12]
 80136c4:	f000 fd08 	bl	80140d8 <xQueueGenericCreate>
 80136c8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00c      	beq.n	80136ea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d003      	beq.n	80136de <osMessageQueueNew+0xd0>
        name = attr->name;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	617b      	str	r3, [r7, #20]
 80136dc:	e001      	b.n	80136e2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80136de:	2300      	movs	r3, #0
 80136e0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80136e2:	6979      	ldr	r1, [r7, #20]
 80136e4:	69f8      	ldr	r0, [r7, #28]
 80136e6:	f001 f95f 	bl	80149a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80136ea:	69fb      	ldr	r3, [r7, #28]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3720      	adds	r7, #32
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	603b      	str	r3, [r7, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013708:	2300      	movs	r3, #0
 801370a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801370c:	f3ef 8305 	mrs	r3, IPSR
 8013710:	617b      	str	r3, [r7, #20]
  return(result);
 8013712:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013714:	2b00      	cmp	r3, #0
 8013716:	d028      	beq.n	801376a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <osMessageQueuePut+0x36>
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d002      	beq.n	801372a <osMessageQueuePut+0x36>
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801372a:	f06f 0303 	mvn.w	r3, #3
 801372e:	61fb      	str	r3, [r7, #28]
 8013730:	e038      	b.n	80137a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013736:	f107 0210 	add.w	r2, r7, #16
 801373a:	2300      	movs	r3, #0
 801373c:	68b9      	ldr	r1, [r7, #8]
 801373e:	69b8      	ldr	r0, [r7, #24]
 8013740:	f000 fe26 	bl	8014390 <xQueueGenericSendFromISR>
 8013744:	4603      	mov	r3, r0
 8013746:	2b01      	cmp	r3, #1
 8013748:	d003      	beq.n	8013752 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801374a:	f06f 0302 	mvn.w	r3, #2
 801374e:	61fb      	str	r3, [r7, #28]
 8013750:	e028      	b.n	80137a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d025      	beq.n	80137a4 <osMessageQueuePut+0xb0>
 8013758:	4b15      	ldr	r3, [pc, #84]	; (80137b0 <osMessageQueuePut+0xbc>)
 801375a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801375e:	601a      	str	r2, [r3, #0]
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	f3bf 8f6f 	isb	sy
 8013768:	e01c      	b.n	80137a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <osMessageQueuePut+0x82>
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d103      	bne.n	801377e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013776:	f06f 0303 	mvn.w	r3, #3
 801377a:	61fb      	str	r3, [r7, #28]
 801377c:	e012      	b.n	80137a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801377e:	2300      	movs	r3, #0
 8013780:	683a      	ldr	r2, [r7, #0]
 8013782:	68b9      	ldr	r1, [r7, #8]
 8013784:	69b8      	ldr	r0, [r7, #24]
 8013786:	f000 fd05 	bl	8014194 <xQueueGenericSend>
 801378a:	4603      	mov	r3, r0
 801378c:	2b01      	cmp	r3, #1
 801378e:	d009      	beq.n	80137a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d003      	beq.n	801379e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013796:	f06f 0301 	mvn.w	r3, #1
 801379a:	61fb      	str	r3, [r7, #28]
 801379c:	e002      	b.n	80137a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801379e:	f06f 0302 	mvn.w	r3, #2
 80137a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80137a4:	69fb      	ldr	r3, [r7, #28]
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3720      	adds	r7, #32
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	bf00      	nop
 80137b0:	e000ed04 	.word	0xe000ed04

080137b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b088      	sub	sp, #32
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80137c6:	2300      	movs	r3, #0
 80137c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137ca:	f3ef 8305 	mrs	r3, IPSR
 80137ce:	617b      	str	r3, [r7, #20]
  return(result);
 80137d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d028      	beq.n	8013828 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d005      	beq.n	80137e8 <osMessageQueueGet+0x34>
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d002      	beq.n	80137e8 <osMessageQueueGet+0x34>
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d003      	beq.n	80137f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80137e8:	f06f 0303 	mvn.w	r3, #3
 80137ec:	61fb      	str	r3, [r7, #28]
 80137ee:	e037      	b.n	8013860 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80137f0:	2300      	movs	r3, #0
 80137f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80137f4:	f107 0310 	add.w	r3, r7, #16
 80137f8:	461a      	mov	r2, r3
 80137fa:	68b9      	ldr	r1, [r7, #8]
 80137fc:	69b8      	ldr	r0, [r7, #24]
 80137fe:	f000 ff43 	bl	8014688 <xQueueReceiveFromISR>
 8013802:	4603      	mov	r3, r0
 8013804:	2b01      	cmp	r3, #1
 8013806:	d003      	beq.n	8013810 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013808:	f06f 0302 	mvn.w	r3, #2
 801380c:	61fb      	str	r3, [r7, #28]
 801380e:	e027      	b.n	8013860 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d024      	beq.n	8013860 <osMessageQueueGet+0xac>
 8013816:	4b15      	ldr	r3, [pc, #84]	; (801386c <osMessageQueueGet+0xb8>)
 8013818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	f3bf 8f4f 	dsb	sy
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	e01b      	b.n	8013860 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d002      	beq.n	8013834 <osMessageQueueGet+0x80>
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d103      	bne.n	801383c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013834:	f06f 0303 	mvn.w	r3, #3
 8013838:	61fb      	str	r3, [r7, #28]
 801383a:	e011      	b.n	8013860 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801383c:	683a      	ldr	r2, [r7, #0]
 801383e:	68b9      	ldr	r1, [r7, #8]
 8013840:	69b8      	ldr	r0, [r7, #24]
 8013842:	f000 fe41 	bl	80144c8 <xQueueReceive>
 8013846:	4603      	mov	r3, r0
 8013848:	2b01      	cmp	r3, #1
 801384a:	d009      	beq.n	8013860 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d003      	beq.n	801385a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013852:	f06f 0301 	mvn.w	r3, #1
 8013856:	61fb      	str	r3, [r7, #28]
 8013858:	e002      	b.n	8013860 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801385a:	f06f 0302 	mvn.w	r3, #2
 801385e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013860:	69fb      	ldr	r3, [r7, #28]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3720      	adds	r7, #32
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	e000ed04 	.word	0xe000ed04

08013870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013870:	b480      	push	{r7}
 8013872:	b085      	sub	sp, #20
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	4a07      	ldr	r2, [pc, #28]	; (801389c <vApplicationGetIdleTaskMemory+0x2c>)
 8013880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	4a06      	ldr	r2, [pc, #24]	; (80138a0 <vApplicationGetIdleTaskMemory+0x30>)
 8013886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2280      	movs	r2, #128	; 0x80
 801388c:	601a      	str	r2, [r3, #0]
}
 801388e:	bf00      	nop
 8013890:	3714      	adds	r7, #20
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop
 801389c:	240010ec 	.word	0x240010ec
 80138a0:	24001148 	.word	0x24001148

080138a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	4a07      	ldr	r2, [pc, #28]	; (80138d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80138b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	4a06      	ldr	r2, [pc, #24]	; (80138d4 <vApplicationGetTimerTaskMemory+0x30>)
 80138ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138c2:	601a      	str	r2, [r3, #0]
}
 80138c4:	bf00      	nop
 80138c6:	3714      	adds	r7, #20
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr
 80138d0:	24001348 	.word	0x24001348
 80138d4:	240013a4 	.word	0x240013a4

080138d8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b086      	sub	sp, #24
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d10a      	bne.n	80138fc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80138f8:	bf00      	nop
 80138fa:	e7fe      	b.n	80138fa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80138fc:	2320      	movs	r3, #32
 80138fe:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	2b20      	cmp	r3, #32
 8013904:	d00a      	beq.n	801391c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	60fb      	str	r3, [r7, #12]
}
 8013918:	bf00      	nop
 801391a:	e7fe      	b.n	801391a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00a      	beq.n	801393c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	2200      	movs	r2, #0
 801392a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	3304      	adds	r3, #4
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fa3d 	bl	8013db0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	2201      	movs	r2, #1
 801393a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801393c:	697b      	ldr	r3, [r7, #20]
	}
 801393e:	4618      	mov	r0, r3
 8013940:	3718      	adds	r7, #24
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013946:	b580      	push	{r7, lr}
 8013948:	b082      	sub	sp, #8
 801394a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801394c:	2020      	movs	r0, #32
 801394e:	f002 ff1b 	bl	8016788 <pvPortMalloc>
 8013952:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00a      	beq.n	8013970 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2200      	movs	r2, #0
 801395e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	3304      	adds	r3, #4
 8013964:	4618      	mov	r0, r3
 8013966:	f000 fa23 	bl	8013db0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013970:	687b      	ldr	r3, [r7, #4]
	}
 8013972:	4618      	mov	r0, r3
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
	...

0801397c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b090      	sub	sp, #64	; 0x40
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013992:	2300      	movs	r3, #0
 8013994:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10a      	bne.n	80139b2 <xEventGroupWaitBits+0x36>
	__asm volatile
 801399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	623b      	str	r3, [r7, #32]
}
 80139ae:	bf00      	nop
 80139b0:	e7fe      	b.n	80139b0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80139bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c0:	f383 8811 	msr	BASEPRI, r3
 80139c4:	f3bf 8f6f 	isb	sy
 80139c8:	f3bf 8f4f 	dsb	sy
 80139cc:	61fb      	str	r3, [r7, #28]
}
 80139ce:	bf00      	nop
 80139d0:	e7fe      	b.n	80139d0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10a      	bne.n	80139ee <xEventGroupWaitBits+0x72>
	__asm volatile
 80139d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139dc:	f383 8811 	msr	BASEPRI, r3
 80139e0:	f3bf 8f6f 	isb	sy
 80139e4:	f3bf 8f4f 	dsb	sy
 80139e8:	61bb      	str	r3, [r7, #24]
}
 80139ea:	bf00      	nop
 80139ec:	e7fe      	b.n	80139ec <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139ee:	f002 f817 	bl	8015a20 <xTaskGetSchedulerState>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d102      	bne.n	80139fe <xEventGroupWaitBits+0x82>
 80139f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d101      	bne.n	8013a02 <xEventGroupWaitBits+0x86>
 80139fe:	2301      	movs	r3, #1
 8013a00:	e000      	b.n	8013a04 <xEventGroupWaitBits+0x88>
 8013a02:	2300      	movs	r3, #0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10a      	bne.n	8013a1e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0c:	f383 8811 	msr	BASEPRI, r3
 8013a10:	f3bf 8f6f 	isb	sy
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	617b      	str	r3, [r7, #20]
}
 8013a1a:	bf00      	nop
 8013a1c:	e7fe      	b.n	8013a1c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013a1e:	f001 fb77 	bl	8015110 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	68b9      	ldr	r1, [r7, #8]
 8013a2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a2e:	f000 f988 	bl	8013d42 <prvTestWaitCondition>
 8013a32:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d00e      	beq.n	8013a58 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d028      	beq.n	8013a9a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	43db      	mvns	r3, r3
 8013a50:	401a      	ands	r2, r3
 8013a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	e020      	b.n	8013a9a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d104      	bne.n	8013a68 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a60:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013a62:	2301      	movs	r3, #1
 8013a64:	633b      	str	r3, [r7, #48]	; 0x30
 8013a66:	e018      	b.n	8013a9a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d003      	beq.n	8013a76 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a74:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d003      	beq.n	8013a84 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a82:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a86:	1d18      	adds	r0, r3, #4
 8013a88:	68ba      	ldr	r2, [r7, #8]
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a90:	4619      	mov	r1, r3
 8013a92:	f001 fd3d 	bl	8015510 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013a96:	2300      	movs	r3, #0
 8013a98:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013a9a:	f001 fb47 	bl	801512c <xTaskResumeAll>
 8013a9e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d031      	beq.n	8013b0a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d107      	bne.n	8013abc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013aac:	4b19      	ldr	r3, [pc, #100]	; (8013b14 <xEventGroupWaitBits+0x198>)
 8013aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ab2:	601a      	str	r2, [r3, #0]
 8013ab4:	f3bf 8f4f 	dsb	sy
 8013ab8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013abc:	f002 f83c 	bl	8015b38 <uxTaskResetEventItemValue>
 8013ac0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d11a      	bne.n	8013b02 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013acc:	f002 fd3a 	bl	8016544 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013ad6:	683a      	ldr	r2, [r7, #0]
 8013ad8:	68b9      	ldr	r1, [r7, #8]
 8013ada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013adc:	f000 f931 	bl	8013d42 <prvTestWaitCondition>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d009      	beq.n	8013afa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d006      	beq.n	8013afa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	43db      	mvns	r3, r3
 8013af4:	401a      	ands	r2, r3
 8013af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013afa:	2301      	movs	r3, #1
 8013afc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013afe:	f002 fd51 	bl	80165a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b08:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3740      	adds	r7, #64	; 0x40
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	e000ed04 	.word	0xe000ed04

08013b18 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b086      	sub	sp, #24
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10a      	bne.n	8013b42 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b30:	f383 8811 	msr	BASEPRI, r3
 8013b34:	f3bf 8f6f 	isb	sy
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	60fb      	str	r3, [r7, #12]
}
 8013b3e:	bf00      	nop
 8013b40:	e7fe      	b.n	8013b40 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00a      	beq.n	8013b62 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	f383 8811 	msr	BASEPRI, r3
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	60bb      	str	r3, [r7, #8]
}
 8013b5e:	bf00      	nop
 8013b60:	e7fe      	b.n	8013b60 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013b62:	f002 fcef 	bl	8016544 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	43db      	mvns	r3, r3
 8013b74:	401a      	ands	r2, r3
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013b7a:	f002 fd13 	bl	80165a4 <vPortExitCritical>

	return uxReturn;
 8013b7e:	693b      	ldr	r3, [r7, #16]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3718      	adds	r7, #24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013b92:	2300      	movs	r3, #0
 8013b94:	683a      	ldr	r2, [r7, #0]
 8013b96:	6879      	ldr	r1, [r7, #4]
 8013b98:	4804      	ldr	r0, [pc, #16]	; (8013bac <xEventGroupClearBitsFromISR+0x24>)
 8013b9a:	f002 fb87 	bl	80162ac <xTimerPendFunctionCallFromISR>
 8013b9e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	08013d29 	.word	0x08013d29

08013bb0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b089      	sub	sp, #36	; 0x24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013bbc:	f3ef 8211 	mrs	r2, BASEPRI
 8013bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc4:	f383 8811 	msr	BASEPRI, r3
 8013bc8:	f3bf 8f6f 	isb	sy
 8013bcc:	f3bf 8f4f 	dsb	sy
 8013bd0:	60fa      	str	r2, [r7, #12]
 8013bd2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bd6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	617b      	str	r3, [r7, #20]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013be8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013bea:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013bec:	4618      	mov	r0, r3
 8013bee:	3724      	adds	r7, #36	; 0x24
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b08e      	sub	sp, #56	; 0x38
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013c02:	2300      	movs	r3, #0
 8013c04:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d10a      	bne.n	8013c2a <xEventGroupSetBits+0x32>
	__asm volatile
 8013c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c18:	f383 8811 	msr	BASEPRI, r3
 8013c1c:	f3bf 8f6f 	isb	sy
 8013c20:	f3bf 8f4f 	dsb	sy
 8013c24:	613b      	str	r3, [r7, #16]
}
 8013c26:	bf00      	nop
 8013c28:	e7fe      	b.n	8013c28 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00a      	beq.n	8013c4a <xEventGroupSetBits+0x52>
	__asm volatile
 8013c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	60fb      	str	r3, [r7, #12]
}
 8013c46:	bf00      	nop
 8013c48:	e7fe      	b.n	8013c48 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	3308      	adds	r3, #8
 8013c54:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013c56:	f001 fa5b 	bl	8015110 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	431a      	orrs	r2, r3
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013c6c:	e03c      	b.n	8013ce8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c84:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c8c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d108      	bne.n	8013caa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	4013      	ands	r3, r2
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d00b      	beq.n	8013cbc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ca8:	e008      	b.n	8013cbc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	69ba      	ldr	r2, [r7, #24]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d101      	bne.n	8013cbc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013cb8:	2301      	movs	r3, #1
 8013cba:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d010      	beq.n	8013ce4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d003      	beq.n	8013cd4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	4313      	orrs	r3, r2
 8013cd2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013cdc:	4619      	mov	r1, r3
 8013cde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ce0:	f001 fce2 	bl	80156a8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cea:	6a3b      	ldr	r3, [r7, #32]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d1be      	bne.n	8013c6e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf6:	43db      	mvns	r3, r3
 8013cf8:	401a      	ands	r2, r3
 8013cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013cfe:	f001 fa15 	bl	801512c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	681b      	ldr	r3, [r3, #0]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3738      	adds	r7, #56	; 0x38
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b082      	sub	sp, #8
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d18:	6839      	ldr	r1, [r7, #0]
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff ff6c 	bl	8013bf8 <xEventGroupSetBits>
}
 8013d20:	bf00      	nop
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d32:	6839      	ldr	r1, [r7, #0]
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff feef 	bl	8013b18 <xEventGroupClearBits>
}
 8013d3a:	bf00      	nop
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013d42:	b480      	push	{r7}
 8013d44:	b087      	sub	sp, #28
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	60f8      	str	r0, [r7, #12]
 8013d4a:	60b9      	str	r1, [r7, #8]
 8013d4c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d107      	bne.n	8013d68 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00a      	beq.n	8013d78 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d62:	2301      	movs	r3, #1
 8013d64:	617b      	str	r3, [r7, #20]
 8013d66:	e007      	b.n	8013d78 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	4013      	ands	r3, r2
 8013d6e:	68ba      	ldr	r2, [r7, #8]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d101      	bne.n	8013d78 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d74:	2301      	movs	r3, #1
 8013d76:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013d78:	697b      	ldr	r3, [r7, #20]
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	371c      	adds	r7, #28
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr
	...

08013d88 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	68ba      	ldr	r2, [r7, #8]
 8013d98:	68f9      	ldr	r1, [r7, #12]
 8013d9a:	4804      	ldr	r0, [pc, #16]	; (8013dac <xEventGroupSetBitsFromISR+0x24>)
 8013d9c:	f002 fa86 	bl	80162ac <xTimerPendFunctionCallFromISR>
 8013da0:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013da2:	697b      	ldr	r3, [r7, #20]
	}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3718      	adds	r7, #24
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	08013d0f 	.word	0x08013d0f

08013db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f103 0208 	add.w	r2, r3, #8
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f103 0208 	add.w	r2, r3, #8
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f103 0208 	add.w	r2, r3, #8
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2200      	movs	r2, #0
 8013de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013de4:	bf00      	nop
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013dfe:	bf00      	nop
 8013e00:	370c      	adds	r7, #12
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr

08013e0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e0a:	b480      	push	{r7}
 8013e0c:	b085      	sub	sp, #20
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	689a      	ldr	r2, [r3, #8]
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	1c5a      	adds	r2, r3, #1
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	601a      	str	r2, [r3, #0]
}
 8013e46:	bf00      	nop
 8013e48:	3714      	adds	r7, #20
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr

08013e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e52:	b480      	push	{r7}
 8013e54:	b085      	sub	sp, #20
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	6078      	str	r0, [r7, #4]
 8013e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e68:	d103      	bne.n	8013e72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	60fb      	str	r3, [r7, #12]
 8013e70:	e00c      	b.n	8013e8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	3308      	adds	r3, #8
 8013e76:	60fb      	str	r3, [r7, #12]
 8013e78:	e002      	b.n	8013e80 <vListInsert+0x2e>
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	60fb      	str	r3, [r7, #12]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d2f6      	bcs.n	8013e7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	685a      	ldr	r2, [r3, #4]
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	683a      	ldr	r2, [r7, #0]
 8013e9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	683a      	ldr	r2, [r7, #0]
 8013ea6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	1c5a      	adds	r2, r3, #1
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	601a      	str	r2, [r3, #0]
}
 8013eb8:	bf00      	nop
 8013eba:	3714      	adds	r7, #20
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	6892      	ldr	r2, [r2, #8]
 8013eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	6852      	ldr	r2, [r2, #4]
 8013ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	687a      	ldr	r2, [r7, #4]
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d103      	bne.n	8013ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	689a      	ldr	r2, [r3, #8]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	1e5a      	subs	r2, r3, #1
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3714      	adds	r7, #20
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <xQueueGenericReset+0x2a>
	__asm volatile
 8013f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f30:	f383 8811 	msr	BASEPRI, r3
 8013f34:	f3bf 8f6f 	isb	sy
 8013f38:	f3bf 8f4f 	dsb	sy
 8013f3c:	60bb      	str	r3, [r7, #8]
}
 8013f3e:	bf00      	nop
 8013f40:	e7fe      	b.n	8013f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013f42:	f002 faff 	bl	8016544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f4e:	68f9      	ldr	r1, [r7, #12]
 8013f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f52:	fb01 f303 	mul.w	r3, r1, r3
 8013f56:	441a      	add	r2, r3
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	681a      	ldr	r2, [r3, #0]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f72:	3b01      	subs	r3, #1
 8013f74:	68f9      	ldr	r1, [r7, #12]
 8013f76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f78:	fb01 f303 	mul.w	r3, r1, r3
 8013f7c:	441a      	add	r2, r3
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	22ff      	movs	r2, #255	; 0xff
 8013f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	22ff      	movs	r2, #255	; 0xff
 8013f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d114      	bne.n	8013fc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	691b      	ldr	r3, [r3, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d01a      	beq.n	8013fd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	3310      	adds	r3, #16
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f001 fb1b 	bl	80155e0 <xTaskRemoveFromEventList>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d012      	beq.n	8013fd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013fb0:	4b0c      	ldr	r3, [pc, #48]	; (8013fe4 <xQueueGenericReset+0xcc>)
 8013fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fb6:	601a      	str	r2, [r3, #0]
 8013fb8:	f3bf 8f4f 	dsb	sy
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	e009      	b.n	8013fd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	3310      	adds	r3, #16
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7ff fef2 	bl	8013db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	3324      	adds	r3, #36	; 0x24
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7ff feed 	bl	8013db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013fd6:	f002 fae5 	bl	80165a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013fda:	2301      	movs	r3, #1
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	e000ed04 	.word	0xe000ed04

08013fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08e      	sub	sp, #56	; 0x38
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10a      	bne.n	8014012 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d10a      	bne.n	801402e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401c:	f383 8811 	msr	BASEPRI, r3
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	627b      	str	r3, [r7, #36]	; 0x24
}
 801402a:	bf00      	nop
 801402c:	e7fe      	b.n	801402c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d002      	beq.n	801403a <xQueueGenericCreateStatic+0x52>
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d001      	beq.n	801403e <xQueueGenericCreateStatic+0x56>
 801403a:	2301      	movs	r3, #1
 801403c:	e000      	b.n	8014040 <xQueueGenericCreateStatic+0x58>
 801403e:	2300      	movs	r3, #0
 8014040:	2b00      	cmp	r3, #0
 8014042:	d10a      	bne.n	801405a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014048:	f383 8811 	msr	BASEPRI, r3
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	623b      	str	r3, [r7, #32]
}
 8014056:	bf00      	nop
 8014058:	e7fe      	b.n	8014058 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <xQueueGenericCreateStatic+0x7e>
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d101      	bne.n	801406a <xQueueGenericCreateStatic+0x82>
 8014066:	2301      	movs	r3, #1
 8014068:	e000      	b.n	801406c <xQueueGenericCreateStatic+0x84>
 801406a:	2300      	movs	r3, #0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10a      	bne.n	8014086 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014074:	f383 8811 	msr	BASEPRI, r3
 8014078:	f3bf 8f6f 	isb	sy
 801407c:	f3bf 8f4f 	dsb	sy
 8014080:	61fb      	str	r3, [r7, #28]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014086:	2350      	movs	r3, #80	; 0x50
 8014088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	2b50      	cmp	r3, #80	; 0x50
 801408e:	d00a      	beq.n	80140a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014094:	f383 8811 	msr	BASEPRI, r3
 8014098:	f3bf 8f6f 	isb	sy
 801409c:	f3bf 8f4f 	dsb	sy
 80140a0:	61bb      	str	r3, [r7, #24]
}
 80140a2:	bf00      	nop
 80140a4:	e7fe      	b.n	80140a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80140a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d00d      	beq.n	80140ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b4:	2201      	movs	r2, #1
 80140b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80140ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80140be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c0:	9300      	str	r3, [sp, #0]
 80140c2:	4613      	mov	r3, r2
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	68b9      	ldr	r1, [r7, #8]
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	f000 f83f 	bl	801414c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3730      	adds	r7, #48	; 0x30
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b08a      	sub	sp, #40	; 0x28
 80140dc:	af02      	add	r7, sp, #8
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	4613      	mov	r3, r2
 80140e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d10a      	bne.n	8014102 <xQueueGenericCreate+0x2a>
	__asm volatile
 80140ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f0:	f383 8811 	msr	BASEPRI, r3
 80140f4:	f3bf 8f6f 	isb	sy
 80140f8:	f3bf 8f4f 	dsb	sy
 80140fc:	613b      	str	r3, [r7, #16]
}
 80140fe:	bf00      	nop
 8014100:	e7fe      	b.n	8014100 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	68ba      	ldr	r2, [r7, #8]
 8014106:	fb02 f303 	mul.w	r3, r2, r3
 801410a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	3350      	adds	r3, #80	; 0x50
 8014110:	4618      	mov	r0, r3
 8014112:	f002 fb39 	bl	8016788 <pvPortMalloc>
 8014116:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d011      	beq.n	8014142 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	3350      	adds	r3, #80	; 0x50
 8014126:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	2200      	movs	r2, #0
 801412c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014130:	79fa      	ldrb	r2, [r7, #7]
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	4613      	mov	r3, r2
 8014138:	697a      	ldr	r2, [r7, #20]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f000 f805 	bl	801414c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014142:	69bb      	ldr	r3, [r7, #24]
	}
 8014144:	4618      	mov	r0, r3
 8014146:	3720      	adds	r7, #32
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b084      	sub	sp, #16
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
 8014158:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d103      	bne.n	8014168 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	69ba      	ldr	r2, [r7, #24]
 8014164:	601a      	str	r2, [r3, #0]
 8014166:	e002      	b.n	801416e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	68ba      	ldr	r2, [r7, #8]
 8014178:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801417a:	2101      	movs	r1, #1
 801417c:	69b8      	ldr	r0, [r7, #24]
 801417e:	f7ff fecb 	bl	8013f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	78fa      	ldrb	r2, [r7, #3]
 8014186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801418a:	bf00      	nop
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
	...

08014194 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b08e      	sub	sp, #56	; 0x38
 8014198:	af00      	add	r7, sp, #0
 801419a:	60f8      	str	r0, [r7, #12]
 801419c:	60b9      	str	r1, [r7, #8]
 801419e:	607a      	str	r2, [r7, #4]
 80141a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80141a2:	2300      	movs	r3, #0
 80141a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80141aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d10a      	bne.n	80141c6 <xQueueGenericSend+0x32>
	__asm volatile
 80141b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b4:	f383 8811 	msr	BASEPRI, r3
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	f3bf 8f4f 	dsb	sy
 80141c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141c2:	bf00      	nop
 80141c4:	e7fe      	b.n	80141c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d103      	bne.n	80141d4 <xQueueGenericSend+0x40>
 80141cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d101      	bne.n	80141d8 <xQueueGenericSend+0x44>
 80141d4:	2301      	movs	r3, #1
 80141d6:	e000      	b.n	80141da <xQueueGenericSend+0x46>
 80141d8:	2300      	movs	r3, #0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d10a      	bne.n	80141f4 <xQueueGenericSend+0x60>
	__asm volatile
 80141de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e2:	f383 8811 	msr	BASEPRI, r3
 80141e6:	f3bf 8f6f 	isb	sy
 80141ea:	f3bf 8f4f 	dsb	sy
 80141ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141f0:	bf00      	nop
 80141f2:	e7fe      	b.n	80141f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	2b02      	cmp	r3, #2
 80141f8:	d103      	bne.n	8014202 <xQueueGenericSend+0x6e>
 80141fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d101      	bne.n	8014206 <xQueueGenericSend+0x72>
 8014202:	2301      	movs	r3, #1
 8014204:	e000      	b.n	8014208 <xQueueGenericSend+0x74>
 8014206:	2300      	movs	r3, #0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d10a      	bne.n	8014222 <xQueueGenericSend+0x8e>
	__asm volatile
 801420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014210:	f383 8811 	msr	BASEPRI, r3
 8014214:	f3bf 8f6f 	isb	sy
 8014218:	f3bf 8f4f 	dsb	sy
 801421c:	623b      	str	r3, [r7, #32]
}
 801421e:	bf00      	nop
 8014220:	e7fe      	b.n	8014220 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014222:	f001 fbfd 	bl	8015a20 <xTaskGetSchedulerState>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d102      	bne.n	8014232 <xQueueGenericSend+0x9e>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <xQueueGenericSend+0xa2>
 8014232:	2301      	movs	r3, #1
 8014234:	e000      	b.n	8014238 <xQueueGenericSend+0xa4>
 8014236:	2300      	movs	r3, #0
 8014238:	2b00      	cmp	r3, #0
 801423a:	d10a      	bne.n	8014252 <xQueueGenericSend+0xbe>
	__asm volatile
 801423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014240:	f383 8811 	msr	BASEPRI, r3
 8014244:	f3bf 8f6f 	isb	sy
 8014248:	f3bf 8f4f 	dsb	sy
 801424c:	61fb      	str	r3, [r7, #28]
}
 801424e:	bf00      	nop
 8014250:	e7fe      	b.n	8014250 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014252:	f002 f977 	bl	8016544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801425e:	429a      	cmp	r2, r3
 8014260:	d302      	bcc.n	8014268 <xQueueGenericSend+0xd4>
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	2b02      	cmp	r3, #2
 8014266:	d129      	bne.n	80142bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014268:	683a      	ldr	r2, [r7, #0]
 801426a:	68b9      	ldr	r1, [r7, #8]
 801426c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801426e:	f000 fa8b 	bl	8014788 <prvCopyDataToQueue>
 8014272:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014278:	2b00      	cmp	r3, #0
 801427a:	d010      	beq.n	801429e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427e:	3324      	adds	r3, #36	; 0x24
 8014280:	4618      	mov	r0, r3
 8014282:	f001 f9ad 	bl	80155e0 <xTaskRemoveFromEventList>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d013      	beq.n	80142b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801428c:	4b3f      	ldr	r3, [pc, #252]	; (801438c <xQueueGenericSend+0x1f8>)
 801428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014292:	601a      	str	r2, [r3, #0]
 8014294:	f3bf 8f4f 	dsb	sy
 8014298:	f3bf 8f6f 	isb	sy
 801429c:	e00a      	b.n	80142b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d007      	beq.n	80142b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80142a4:	4b39      	ldr	r3, [pc, #228]	; (801438c <xQueueGenericSend+0x1f8>)
 80142a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142aa:	601a      	str	r2, [r3, #0]
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80142b4:	f002 f976 	bl	80165a4 <vPortExitCritical>
				return pdPASS;
 80142b8:	2301      	movs	r3, #1
 80142ba:	e063      	b.n	8014384 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d103      	bne.n	80142ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80142c2:	f002 f96f 	bl	80165a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80142c6:	2300      	movs	r3, #0
 80142c8:	e05c      	b.n	8014384 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d106      	bne.n	80142de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142d0:	f107 0314 	add.w	r3, r7, #20
 80142d4:	4618      	mov	r0, r3
 80142d6:	f001 fa49 	bl	801576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142da:	2301      	movs	r3, #1
 80142dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142de:	f002 f961 	bl	80165a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142e2:	f000 ff15 	bl	8015110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142e6:	f002 f92d 	bl	8016544 <vPortEnterCritical>
 80142ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142f0:	b25b      	sxtb	r3, r3
 80142f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142f6:	d103      	bne.n	8014300 <xQueueGenericSend+0x16c>
 80142f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fa:	2200      	movs	r2, #0
 80142fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014306:	b25b      	sxtb	r3, r3
 8014308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801430c:	d103      	bne.n	8014316 <xQueueGenericSend+0x182>
 801430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014310:	2200      	movs	r2, #0
 8014312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014316:	f002 f945 	bl	80165a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801431a:	1d3a      	adds	r2, r7, #4
 801431c:	f107 0314 	add.w	r3, r7, #20
 8014320:	4611      	mov	r1, r2
 8014322:	4618      	mov	r0, r3
 8014324:	f001 fa38 	bl	8015798 <xTaskCheckForTimeOut>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d124      	bne.n	8014378 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801432e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014330:	f000 fb22 	bl	8014978 <prvIsQueueFull>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d018      	beq.n	801436c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	3310      	adds	r3, #16
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	4611      	mov	r1, r2
 8014342:	4618      	mov	r0, r3
 8014344:	f001 f8c0 	bl	80154c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801434a:	f000 faad 	bl	80148a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801434e:	f000 feed 	bl	801512c <xTaskResumeAll>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	f47f af7c 	bne.w	8014252 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801435a:	4b0c      	ldr	r3, [pc, #48]	; (801438c <xQueueGenericSend+0x1f8>)
 801435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014360:	601a      	str	r2, [r3, #0]
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	f3bf 8f6f 	isb	sy
 801436a:	e772      	b.n	8014252 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801436c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801436e:	f000 fa9b 	bl	80148a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014372:	f000 fedb 	bl	801512c <xTaskResumeAll>
 8014376:	e76c      	b.n	8014252 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801437a:	f000 fa95 	bl	80148a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801437e:	f000 fed5 	bl	801512c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014384:	4618      	mov	r0, r3
 8014386:	3738      	adds	r7, #56	; 0x38
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	e000ed04 	.word	0xe000ed04

08014390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b090      	sub	sp, #64	; 0x40
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80143a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d10a      	bne.n	80143be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80143a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ac:	f383 8811 	msr	BASEPRI, r3
 80143b0:	f3bf 8f6f 	isb	sy
 80143b4:	f3bf 8f4f 	dsb	sy
 80143b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143ba:	bf00      	nop
 80143bc:	e7fe      	b.n	80143bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d103      	bne.n	80143cc <xQueueGenericSendFromISR+0x3c>
 80143c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d101      	bne.n	80143d0 <xQueueGenericSendFromISR+0x40>
 80143cc:	2301      	movs	r3, #1
 80143ce:	e000      	b.n	80143d2 <xQueueGenericSendFromISR+0x42>
 80143d0:	2300      	movs	r3, #0
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10a      	bne.n	80143ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80143d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143da:	f383 8811 	msr	BASEPRI, r3
 80143de:	f3bf 8f6f 	isb	sy
 80143e2:	f3bf 8f4f 	dsb	sy
 80143e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143e8:	bf00      	nop
 80143ea:	e7fe      	b.n	80143ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	2b02      	cmp	r3, #2
 80143f0:	d103      	bne.n	80143fa <xQueueGenericSendFromISR+0x6a>
 80143f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143f6:	2b01      	cmp	r3, #1
 80143f8:	d101      	bne.n	80143fe <xQueueGenericSendFromISR+0x6e>
 80143fa:	2301      	movs	r3, #1
 80143fc:	e000      	b.n	8014400 <xQueueGenericSendFromISR+0x70>
 80143fe:	2300      	movs	r3, #0
 8014400:	2b00      	cmp	r3, #0
 8014402:	d10a      	bne.n	801441a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	623b      	str	r3, [r7, #32]
}
 8014416:	bf00      	nop
 8014418:	e7fe      	b.n	8014418 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801441a:	f002 f975 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 801441e:	f3ef 8211 	mrs	r2, BASEPRI
 8014422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014426:	f383 8811 	msr	BASEPRI, r3
 801442a:	f3bf 8f6f 	isb	sy
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	61fa      	str	r2, [r7, #28]
 8014434:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8014436:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014438:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014442:	429a      	cmp	r2, r3
 8014444:	d302      	bcc.n	801444c <xQueueGenericSendFromISR+0xbc>
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	2b02      	cmp	r3, #2
 801444a:	d12f      	bne.n	80144ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801444e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801445a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801445c:	683a      	ldr	r2, [r7, #0]
 801445e:	68b9      	ldr	r1, [r7, #8]
 8014460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014462:	f000 f991 	bl	8014788 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014466:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801446a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801446e:	d112      	bne.n	8014496 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014474:	2b00      	cmp	r3, #0
 8014476:	d016      	beq.n	80144a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801447a:	3324      	adds	r3, #36	; 0x24
 801447c:	4618      	mov	r0, r3
 801447e:	f001 f8af 	bl	80155e0 <xTaskRemoveFromEventList>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00e      	beq.n	80144a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d00b      	beq.n	80144a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2201      	movs	r2, #1
 8014492:	601a      	str	r2, [r3, #0]
 8014494:	e007      	b.n	80144a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801449a:	3301      	adds	r3, #1
 801449c:	b2db      	uxtb	r3, r3
 801449e:	b25a      	sxtb	r2, r3
 80144a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80144a6:	2301      	movs	r3, #1
 80144a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80144aa:	e001      	b.n	80144b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80144ac:	2300      	movs	r3, #0
 80144ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144b2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	f383 8811 	msr	BASEPRI, r3
}
 80144ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3740      	adds	r7, #64	; 0x40
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}
	...

080144c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b08c      	sub	sp, #48	; 0x30
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80144d4:	2300      	movs	r3, #0
 80144d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d10a      	bne.n	80144f8 <xQueueReceive+0x30>
	__asm volatile
 80144e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e6:	f383 8811 	msr	BASEPRI, r3
 80144ea:	f3bf 8f6f 	isb	sy
 80144ee:	f3bf 8f4f 	dsb	sy
 80144f2:	623b      	str	r3, [r7, #32]
}
 80144f4:	bf00      	nop
 80144f6:	e7fe      	b.n	80144f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d103      	bne.n	8014506 <xQueueReceive+0x3e>
 80144fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014502:	2b00      	cmp	r3, #0
 8014504:	d101      	bne.n	801450a <xQueueReceive+0x42>
 8014506:	2301      	movs	r3, #1
 8014508:	e000      	b.n	801450c <xQueueReceive+0x44>
 801450a:	2300      	movs	r3, #0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10a      	bne.n	8014526 <xQueueReceive+0x5e>
	__asm volatile
 8014510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014514:	f383 8811 	msr	BASEPRI, r3
 8014518:	f3bf 8f6f 	isb	sy
 801451c:	f3bf 8f4f 	dsb	sy
 8014520:	61fb      	str	r3, [r7, #28]
}
 8014522:	bf00      	nop
 8014524:	e7fe      	b.n	8014524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014526:	f001 fa7b 	bl	8015a20 <xTaskGetSchedulerState>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d102      	bne.n	8014536 <xQueueReceive+0x6e>
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d101      	bne.n	801453a <xQueueReceive+0x72>
 8014536:	2301      	movs	r3, #1
 8014538:	e000      	b.n	801453c <xQueueReceive+0x74>
 801453a:	2300      	movs	r3, #0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d10a      	bne.n	8014556 <xQueueReceive+0x8e>
	__asm volatile
 8014540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014544:	f383 8811 	msr	BASEPRI, r3
 8014548:	f3bf 8f6f 	isb	sy
 801454c:	f3bf 8f4f 	dsb	sy
 8014550:	61bb      	str	r3, [r7, #24]
}
 8014552:	bf00      	nop
 8014554:	e7fe      	b.n	8014554 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014556:	f001 fff5 	bl	8016544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801455e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014562:	2b00      	cmp	r3, #0
 8014564:	d01f      	beq.n	80145a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014566:	68b9      	ldr	r1, [r7, #8]
 8014568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801456a:	f000 f977 	bl	801485c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014570:	1e5a      	subs	r2, r3, #1
 8014572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	691b      	ldr	r3, [r3, #16]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00f      	beq.n	801459e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014580:	3310      	adds	r3, #16
 8014582:	4618      	mov	r0, r3
 8014584:	f001 f82c 	bl	80155e0 <xTaskRemoveFromEventList>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d007      	beq.n	801459e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801458e:	4b3d      	ldr	r3, [pc, #244]	; (8014684 <xQueueReceive+0x1bc>)
 8014590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014594:	601a      	str	r2, [r3, #0]
 8014596:	f3bf 8f4f 	dsb	sy
 801459a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801459e:	f002 f801 	bl	80165a4 <vPortExitCritical>
				return pdPASS;
 80145a2:	2301      	movs	r3, #1
 80145a4:	e069      	b.n	801467a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d103      	bne.n	80145b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145ac:	f001 fffa 	bl	80165a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80145b0:	2300      	movs	r3, #0
 80145b2:	e062      	b.n	801467a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d106      	bne.n	80145c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145ba:	f107 0310 	add.w	r3, r7, #16
 80145be:	4618      	mov	r0, r3
 80145c0:	f001 f8d4 	bl	801576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145c4:	2301      	movs	r3, #1
 80145c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145c8:	f001 ffec 	bl	80165a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145cc:	f000 fda0 	bl	8015110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145d0:	f001 ffb8 	bl	8016544 <vPortEnterCritical>
 80145d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145da:	b25b      	sxtb	r3, r3
 80145dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e0:	d103      	bne.n	80145ea <xQueueReceive+0x122>
 80145e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e4:	2200      	movs	r2, #0
 80145e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145f0:	b25b      	sxtb	r3, r3
 80145f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145f6:	d103      	bne.n	8014600 <xQueueReceive+0x138>
 80145f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145fa:	2200      	movs	r2, #0
 80145fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014600:	f001 ffd0 	bl	80165a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014604:	1d3a      	adds	r2, r7, #4
 8014606:	f107 0310 	add.w	r3, r7, #16
 801460a:	4611      	mov	r1, r2
 801460c:	4618      	mov	r0, r3
 801460e:	f001 f8c3 	bl	8015798 <xTaskCheckForTimeOut>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d123      	bne.n	8014660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801461a:	f000 f997 	bl	801494c <prvIsQueueEmpty>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d017      	beq.n	8014654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014626:	3324      	adds	r3, #36	; 0x24
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	4611      	mov	r1, r2
 801462c:	4618      	mov	r0, r3
 801462e:	f000 ff4b 	bl	80154c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014634:	f000 f938 	bl	80148a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014638:	f000 fd78 	bl	801512c <xTaskResumeAll>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d189      	bne.n	8014556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014642:	4b10      	ldr	r3, [pc, #64]	; (8014684 <xQueueReceive+0x1bc>)
 8014644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014648:	601a      	str	r2, [r3, #0]
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	e780      	b.n	8014556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014656:	f000 f927 	bl	80148a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801465a:	f000 fd67 	bl	801512c <xTaskResumeAll>
 801465e:	e77a      	b.n	8014556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014662:	f000 f921 	bl	80148a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014666:	f000 fd61 	bl	801512c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801466a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801466c:	f000 f96e 	bl	801494c <prvIsQueueEmpty>
 8014670:	4603      	mov	r3, r0
 8014672:	2b00      	cmp	r3, #0
 8014674:	f43f af6f 	beq.w	8014556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801467a:	4618      	mov	r0, r3
 801467c:	3730      	adds	r7, #48	; 0x30
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	e000ed04 	.word	0xe000ed04

08014688 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08e      	sub	sp, #56	; 0x38
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469a:	2b00      	cmp	r3, #0
 801469c:	d10a      	bne.n	80146b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	623b      	str	r3, [r7, #32]
}
 80146b0:	bf00      	nop
 80146b2:	e7fe      	b.n	80146b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d103      	bne.n	80146c2 <xQueueReceiveFromISR+0x3a>
 80146ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d101      	bne.n	80146c6 <xQueueReceiveFromISR+0x3e>
 80146c2:	2301      	movs	r3, #1
 80146c4:	e000      	b.n	80146c8 <xQueueReceiveFromISR+0x40>
 80146c6:	2300      	movs	r3, #0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d10a      	bne.n	80146e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80146cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d0:	f383 8811 	msr	BASEPRI, r3
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	f3bf 8f4f 	dsb	sy
 80146dc:	61fb      	str	r3, [r7, #28]
}
 80146de:	bf00      	nop
 80146e0:	e7fe      	b.n	80146e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146e2:	f002 f811 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 80146e6:	f3ef 8211 	mrs	r2, BASEPRI
 80146ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ee:	f383 8811 	msr	BASEPRI, r3
 80146f2:	f3bf 8f6f 	isb	sy
 80146f6:	f3bf 8f4f 	dsb	sy
 80146fa:	61ba      	str	r2, [r7, #24]
 80146fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014706:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470a:	2b00      	cmp	r3, #0
 801470c:	d02f      	beq.n	801476e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014718:	68b9      	ldr	r1, [r7, #8]
 801471a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801471c:	f000 f89e 	bl	801485c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014722:	1e5a      	subs	r2, r3, #1
 8014724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014726:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801472c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014730:	d112      	bne.n	8014758 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d016      	beq.n	8014768 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473c:	3310      	adds	r3, #16
 801473e:	4618      	mov	r0, r3
 8014740:	f000 ff4e 	bl	80155e0 <xTaskRemoveFromEventList>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d00e      	beq.n	8014768 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00b      	beq.n	8014768 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2201      	movs	r2, #1
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	e007      	b.n	8014768 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801475c:	3301      	adds	r3, #1
 801475e:	b2db      	uxtb	r3, r3
 8014760:	b25a      	sxtb	r2, r3
 8014762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014768:	2301      	movs	r3, #1
 801476a:	637b      	str	r3, [r7, #52]	; 0x34
 801476c:	e001      	b.n	8014772 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801476e:	2300      	movs	r3, #0
 8014770:	637b      	str	r3, [r7, #52]	; 0x34
 8014772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014774:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	f383 8811 	msr	BASEPRI, r3
}
 801477c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014780:	4618      	mov	r0, r3
 8014782:	3738      	adds	r7, #56	; 0x38
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014794:	2300      	movs	r3, #0
 8014796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801479c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d10d      	bne.n	80147c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d14d      	bne.n	801484a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f001 f952 	bl	8015a5c <xTaskPriorityDisinherit>
 80147b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2200      	movs	r2, #0
 80147be:	609a      	str	r2, [r3, #8]
 80147c0:	e043      	b.n	801484a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d119      	bne.n	80147fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6858      	ldr	r0, [r3, #4]
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d0:	461a      	mov	r2, r3
 80147d2:	68b9      	ldr	r1, [r7, #8]
 80147d4:	f002 f9fc 	bl	8016bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	685a      	ldr	r2, [r3, #4]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e0:	441a      	add	r2, r3
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	689b      	ldr	r3, [r3, #8]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d32b      	bcc.n	801484a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	605a      	str	r2, [r3, #4]
 80147fa:	e026      	b.n	801484a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	68d8      	ldr	r0, [r3, #12]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014804:	461a      	mov	r2, r3
 8014806:	68b9      	ldr	r1, [r7, #8]
 8014808:	f002 f9e2 	bl	8016bd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	68da      	ldr	r2, [r3, #12]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014814:	425b      	negs	r3, r3
 8014816:	441a      	add	r2, r3
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	68da      	ldr	r2, [r3, #12]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	429a      	cmp	r2, r3
 8014826:	d207      	bcs.n	8014838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	689a      	ldr	r2, [r3, #8]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014830:	425b      	negs	r3, r3
 8014832:	441a      	add	r2, r3
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b02      	cmp	r3, #2
 801483c:	d105      	bne.n	801484a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d002      	beq.n	801484a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	3b01      	subs	r3, #1
 8014848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	1c5a      	adds	r2, r3, #1
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014852:	697b      	ldr	r3, [r7, #20]
}
 8014854:	4618      	mov	r0, r3
 8014856:	3718      	adds	r7, #24
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486a:	2b00      	cmp	r3, #0
 801486c:	d018      	beq.n	80148a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68da      	ldr	r2, [r3, #12]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014876:	441a      	add	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	68da      	ldr	r2, [r3, #12]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	689b      	ldr	r3, [r3, #8]
 8014884:	429a      	cmp	r2, r3
 8014886:	d303      	bcc.n	8014890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	68d9      	ldr	r1, [r3, #12]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014898:	461a      	mov	r2, r3
 801489a:	6838      	ldr	r0, [r7, #0]
 801489c:	f002 f998 	bl	8016bd0 <memcpy>
	}
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148b0:	f001 fe48 	bl	8016544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148bc:	e011      	b.n	80148e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d012      	beq.n	80148ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	3324      	adds	r3, #36	; 0x24
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 fe88 	bl	80155e0 <xTaskRemoveFromEventList>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d001      	beq.n	80148da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148d6:	f000 ffc1 	bl	801585c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148da:	7bfb      	ldrb	r3, [r7, #15]
 80148dc:	3b01      	subs	r3, #1
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	dce9      	bgt.n	80148be <prvUnlockQueue+0x16>
 80148ea:	e000      	b.n	80148ee <prvUnlockQueue+0x46>
					break;
 80148ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	22ff      	movs	r2, #255	; 0xff
 80148f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80148f6:	f001 fe55 	bl	80165a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148fa:	f001 fe23 	bl	8016544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014906:	e011      	b.n	801492c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	691b      	ldr	r3, [r3, #16]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d012      	beq.n	8014936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	3310      	adds	r3, #16
 8014914:	4618      	mov	r0, r3
 8014916:	f000 fe63 	bl	80155e0 <xTaskRemoveFromEventList>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014920:	f000 ff9c 	bl	801585c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014924:	7bbb      	ldrb	r3, [r7, #14]
 8014926:	3b01      	subs	r3, #1
 8014928:	b2db      	uxtb	r3, r3
 801492a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801492c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014930:	2b00      	cmp	r3, #0
 8014932:	dce9      	bgt.n	8014908 <prvUnlockQueue+0x60>
 8014934:	e000      	b.n	8014938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	22ff      	movs	r2, #255	; 0xff
 801493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014940:	f001 fe30 	bl	80165a4 <vPortExitCritical>
}
 8014944:	bf00      	nop
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014954:	f001 fdf6 	bl	8016544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801495c:	2b00      	cmp	r3, #0
 801495e:	d102      	bne.n	8014966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014960:	2301      	movs	r3, #1
 8014962:	60fb      	str	r3, [r7, #12]
 8014964:	e001      	b.n	801496a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014966:	2300      	movs	r3, #0
 8014968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801496a:	f001 fe1b 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 801496e:	68fb      	ldr	r3, [r7, #12]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014980:	f001 fde0 	bl	8016544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801498c:	429a      	cmp	r2, r3
 801498e:	d102      	bne.n	8014996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014990:	2301      	movs	r3, #1
 8014992:	60fb      	str	r3, [r7, #12]
 8014994:	e001      	b.n	801499a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014996:	2300      	movs	r3, #0
 8014998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801499a:	f001 fe03 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 801499e:	68fb      	ldr	r3, [r7, #12]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80149a8:	b480      	push	{r7}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149b2:	2300      	movs	r3, #0
 80149b4:	60fb      	str	r3, [r7, #12]
 80149b6:	e014      	b.n	80149e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80149b8:	4a0f      	ldr	r2, [pc, #60]	; (80149f8 <vQueueAddToRegistry+0x50>)
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d10b      	bne.n	80149dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80149c4:	490c      	ldr	r1, [pc, #48]	; (80149f8 <vQueueAddToRegistry+0x50>)
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80149ce:	4a0a      	ldr	r2, [pc, #40]	; (80149f8 <vQueueAddToRegistry+0x50>)
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	4413      	add	r3, r2
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80149da:	e006      	b.n	80149ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	3301      	adds	r3, #1
 80149e0:	60fb      	str	r3, [r7, #12]
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2b07      	cmp	r3, #7
 80149e6:	d9e7      	bls.n	80149b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80149e8:	bf00      	nop
 80149ea:	bf00      	nop
 80149ec:	3714      	adds	r7, #20
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
 80149f6:	bf00      	nop
 80149f8:	240017a4 	.word	0x240017a4

080149fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014a0c:	f001 fd9a 	bl	8016544 <vPortEnterCritical>
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a16:	b25b      	sxtb	r3, r3
 8014a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a1c:	d103      	bne.n	8014a26 <vQueueWaitForMessageRestricted+0x2a>
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	2200      	movs	r2, #0
 8014a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a2c:	b25b      	sxtb	r3, r3
 8014a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a32:	d103      	bne.n	8014a3c <vQueueWaitForMessageRestricted+0x40>
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	2200      	movs	r2, #0
 8014a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a3c:	f001 fdb2 	bl	80165a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d106      	bne.n	8014a56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	3324      	adds	r3, #36	; 0x24
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	68b9      	ldr	r1, [r7, #8]
 8014a50:	4618      	mov	r0, r3
 8014a52:	f000 fd99 	bl	8015588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014a56:	6978      	ldr	r0, [r7, #20]
 8014a58:	f7ff ff26 	bl	80148a8 <prvUnlockQueue>
	}
 8014a5c:	bf00      	nop
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b08e      	sub	sp, #56	; 0x38
 8014a68:	af04      	add	r7, sp, #16
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
 8014a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10a      	bne.n	8014a8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8014a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7c:	f383 8811 	msr	BASEPRI, r3
 8014a80:	f3bf 8f6f 	isb	sy
 8014a84:	f3bf 8f4f 	dsb	sy
 8014a88:	623b      	str	r3, [r7, #32]
}
 8014a8a:	bf00      	nop
 8014a8c:	e7fe      	b.n	8014a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d10a      	bne.n	8014aaa <xTaskCreateStatic+0x46>
	__asm volatile
 8014a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a98:	f383 8811 	msr	BASEPRI, r3
 8014a9c:	f3bf 8f6f 	isb	sy
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	61fb      	str	r3, [r7, #28]
}
 8014aa6:	bf00      	nop
 8014aa8:	e7fe      	b.n	8014aa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014aaa:	235c      	movs	r3, #92	; 0x5c
 8014aac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	2b5c      	cmp	r3, #92	; 0x5c
 8014ab2:	d00a      	beq.n	8014aca <xTaskCreateStatic+0x66>
	__asm volatile
 8014ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab8:	f383 8811 	msr	BASEPRI, r3
 8014abc:	f3bf 8f6f 	isb	sy
 8014ac0:	f3bf 8f4f 	dsb	sy
 8014ac4:	61bb      	str	r3, [r7, #24]
}
 8014ac6:	bf00      	nop
 8014ac8:	e7fe      	b.n	8014ac8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014aca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d01e      	beq.n	8014b10 <xTaskCreateStatic+0xac>
 8014ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d01b      	beq.n	8014b10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae4:	2202      	movs	r2, #2
 8014ae6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014aea:	2300      	movs	r3, #0
 8014aec:	9303      	str	r3, [sp, #12]
 8014aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	f107 0314 	add.w	r3, r7, #20
 8014af6:	9301      	str	r3, [sp, #4]
 8014af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afa:	9300      	str	r3, [sp, #0]
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	68b9      	ldr	r1, [r7, #8]
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f000 f850 	bl	8014ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b0a:	f000 f8dd 	bl	8014cc8 <prvAddNewTaskToReadyList>
 8014b0e:	e001      	b.n	8014b14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014b10:	2300      	movs	r3, #0
 8014b12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014b14:	697b      	ldr	r3, [r7, #20]
	}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3728      	adds	r7, #40	; 0x28
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b08c      	sub	sp, #48	; 0x30
 8014b22:	af04      	add	r7, sp, #16
 8014b24:	60f8      	str	r0, [r7, #12]
 8014b26:	60b9      	str	r1, [r7, #8]
 8014b28:	603b      	str	r3, [r7, #0]
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014b2e:	88fb      	ldrh	r3, [r7, #6]
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	4618      	mov	r0, r3
 8014b34:	f001 fe28 	bl	8016788 <pvPortMalloc>
 8014b38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00e      	beq.n	8014b5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014b40:	205c      	movs	r0, #92	; 0x5c
 8014b42:	f001 fe21 	bl	8016788 <pvPortMalloc>
 8014b46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d003      	beq.n	8014b56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	697a      	ldr	r2, [r7, #20]
 8014b52:	631a      	str	r2, [r3, #48]	; 0x30
 8014b54:	e005      	b.n	8014b62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b56:	6978      	ldr	r0, [r7, #20]
 8014b58:	f001 fee2 	bl	8016920 <vPortFree>
 8014b5c:	e001      	b.n	8014b62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b62:	69fb      	ldr	r3, [r7, #28]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d017      	beq.n	8014b98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014b70:	88fa      	ldrh	r2, [r7, #6]
 8014b72:	2300      	movs	r3, #0
 8014b74:	9303      	str	r3, [sp, #12]
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	9302      	str	r3, [sp, #8]
 8014b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7c:	9301      	str	r3, [sp, #4]
 8014b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	68b9      	ldr	r1, [r7, #8]
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f000 f80e 	bl	8014ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b8c:	69f8      	ldr	r0, [r7, #28]
 8014b8e:	f000 f89b 	bl	8014cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b92:	2301      	movs	r3, #1
 8014b94:	61bb      	str	r3, [r7, #24]
 8014b96:	e002      	b.n	8014b9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3720      	adds	r7, #32
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b088      	sub	sp, #32
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	009b      	lsls	r3, r3, #2
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	21a5      	movs	r1, #165	; 0xa5
 8014bc2:	f002 f813 	bl	8016bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bca:	6879      	ldr	r1, [r7, #4]
 8014bcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014bd0:	440b      	add	r3, r1
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	4413      	add	r3, r2
 8014bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	f023 0307 	bic.w	r3, r3, #7
 8014bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014be0:	69bb      	ldr	r3, [r7, #24]
 8014be2:	f003 0307 	and.w	r3, r3, #7
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00a      	beq.n	8014c00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	617b      	str	r3, [r7, #20]
}
 8014bfc:	bf00      	nop
 8014bfe:	e7fe      	b.n	8014bfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d01f      	beq.n	8014c46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c06:	2300      	movs	r3, #0
 8014c08:	61fb      	str	r3, [r7, #28]
 8014c0a:	e012      	b.n	8014c32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	4413      	add	r3, r2
 8014c12:	7819      	ldrb	r1, [r3, #0]
 8014c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	4413      	add	r3, r2
 8014c1a:	3334      	adds	r3, #52	; 0x34
 8014c1c:	460a      	mov	r2, r1
 8014c1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	69fb      	ldr	r3, [r7, #28]
 8014c24:	4413      	add	r3, r2
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d006      	beq.n	8014c3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	61fb      	str	r3, [r7, #28]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	2b0f      	cmp	r3, #15
 8014c36:	d9e9      	bls.n	8014c0c <prvInitialiseNewTask+0x64>
 8014c38:	e000      	b.n	8014c3c <prvInitialiseNewTask+0x94>
			{
				break;
 8014c3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c44:	e003      	b.n	8014c4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c48:	2200      	movs	r2, #0
 8014c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c50:	2b37      	cmp	r3, #55	; 0x37
 8014c52:	d901      	bls.n	8014c58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c54:	2337      	movs	r3, #55	; 0x37
 8014c56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	2200      	movs	r2, #0
 8014c68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7ff f8be 	bl	8013df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c76:	3318      	adds	r3, #24
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff f8b9 	bl	8013df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c96:	2200      	movs	r2, #0
 8014c98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	68f9      	ldr	r1, [r7, #12]
 8014ca6:	69b8      	ldr	r0, [r7, #24]
 8014ca8:	f001 fb20 	bl	80162ec <pxPortInitialiseStack>
 8014cac:	4602      	mov	r2, r0
 8014cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cbe:	bf00      	nop
 8014cc0:	3720      	adds	r7, #32
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
	...

08014cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014cd0:	f001 fc38 	bl	8016544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014cd4:	4b2d      	ldr	r3, [pc, #180]	; (8014d8c <prvAddNewTaskToReadyList+0xc4>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	4a2c      	ldr	r2, [pc, #176]	; (8014d8c <prvAddNewTaskToReadyList+0xc4>)
 8014cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014cde:	4b2c      	ldr	r3, [pc, #176]	; (8014d90 <prvAddNewTaskToReadyList+0xc8>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d109      	bne.n	8014cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014ce6:	4a2a      	ldr	r2, [pc, #168]	; (8014d90 <prvAddNewTaskToReadyList+0xc8>)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014cec:	4b27      	ldr	r3, [pc, #156]	; (8014d8c <prvAddNewTaskToReadyList+0xc4>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d110      	bne.n	8014d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014cf4:	f000 fdd6 	bl	80158a4 <prvInitialiseTaskLists>
 8014cf8:	e00d      	b.n	8014d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014cfa:	4b26      	ldr	r3, [pc, #152]	; (8014d94 <prvAddNewTaskToReadyList+0xcc>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d109      	bne.n	8014d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014d02:	4b23      	ldr	r3, [pc, #140]	; (8014d90 <prvAddNewTaskToReadyList+0xc8>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d802      	bhi.n	8014d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014d10:	4a1f      	ldr	r2, [pc, #124]	; (8014d90 <prvAddNewTaskToReadyList+0xc8>)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014d16:	4b20      	ldr	r3, [pc, #128]	; (8014d98 <prvAddNewTaskToReadyList+0xd0>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	4a1e      	ldr	r2, [pc, #120]	; (8014d98 <prvAddNewTaskToReadyList+0xd0>)
 8014d1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014d20:	4b1d      	ldr	r3, [pc, #116]	; (8014d98 <prvAddNewTaskToReadyList+0xd0>)
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d2c:	4b1b      	ldr	r3, [pc, #108]	; (8014d9c <prvAddNewTaskToReadyList+0xd4>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d903      	bls.n	8014d3c <prvAddNewTaskToReadyList+0x74>
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d38:	4a18      	ldr	r2, [pc, #96]	; (8014d9c <prvAddNewTaskToReadyList+0xd4>)
 8014d3a:	6013      	str	r3, [r2, #0]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d40:	4613      	mov	r3, r2
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	4413      	add	r3, r2
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	4a15      	ldr	r2, [pc, #84]	; (8014da0 <prvAddNewTaskToReadyList+0xd8>)
 8014d4a:	441a      	add	r2, r3
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	3304      	adds	r3, #4
 8014d50:	4619      	mov	r1, r3
 8014d52:	4610      	mov	r0, r2
 8014d54:	f7ff f859 	bl	8013e0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d58:	f001 fc24 	bl	80165a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d5c:	4b0d      	ldr	r3, [pc, #52]	; (8014d94 <prvAddNewTaskToReadyList+0xcc>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d00e      	beq.n	8014d82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d64:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <prvAddNewTaskToReadyList+0xc8>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d207      	bcs.n	8014d82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d72:	4b0c      	ldr	r3, [pc, #48]	; (8014da4 <prvAddNewTaskToReadyList+0xdc>)
 8014d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d78:	601a      	str	r2, [r3, #0]
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d82:	bf00      	nop
 8014d84:	3708      	adds	r7, #8
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	24001cb8 	.word	0x24001cb8
 8014d90:	240017e4 	.word	0x240017e4
 8014d94:	24001cc4 	.word	0x24001cc4
 8014d98:	24001cd4 	.word	0x24001cd4
 8014d9c:	24001cc0 	.word	0x24001cc0
 8014da0:	240017e8 	.word	0x240017e8
 8014da4:	e000ed04 	.word	0xe000ed04

08014da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014db0:	2300      	movs	r3, #0
 8014db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d017      	beq.n	8014dea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014dba:	4b13      	ldr	r3, [pc, #76]	; (8014e08 <vTaskDelay+0x60>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d00a      	beq.n	8014dd8 <vTaskDelay+0x30>
	__asm volatile
 8014dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc6:	f383 8811 	msr	BASEPRI, r3
 8014dca:	f3bf 8f6f 	isb	sy
 8014dce:	f3bf 8f4f 	dsb	sy
 8014dd2:	60bb      	str	r3, [r7, #8]
}
 8014dd4:	bf00      	nop
 8014dd6:	e7fe      	b.n	8014dd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014dd8:	f000 f99a 	bl	8015110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014ddc:	2100      	movs	r1, #0
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f000 fec2 	bl	8015b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014de4:	f000 f9a2 	bl	801512c <xTaskResumeAll>
 8014de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d107      	bne.n	8014e00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014df0:	4b06      	ldr	r3, [pc, #24]	; (8014e0c <vTaskDelay+0x64>)
 8014df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014df6:	601a      	str	r2, [r3, #0]
 8014df8:	f3bf 8f4f 	dsb	sy
 8014dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e00:	bf00      	nop
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	24001ce0 	.word	0x24001ce0
 8014e0c:	e000ed04 	.word	0xe000ed04

08014e10 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014e18:	f001 fb94 	bl	8016544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d102      	bne.n	8014e28 <vTaskSuspend+0x18>
 8014e22:	4b30      	ldr	r3, [pc, #192]	; (8014ee4 <vTaskSuspend+0xd4>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	e000      	b.n	8014e2a <vTaskSuspend+0x1a>
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	3304      	adds	r3, #4
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff f847 	bl	8013ec4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d004      	beq.n	8014e48 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	3318      	adds	r3, #24
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff f83e 	bl	8013ec4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	3304      	adds	r3, #4
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	4826      	ldr	r0, [pc, #152]	; (8014ee8 <vTaskSuspend+0xd8>)
 8014e50:	f7fe ffdb 	bl	8013e0a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d103      	bne.n	8014e68 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2200      	movs	r2, #0
 8014e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014e68:	f001 fb9c 	bl	80165a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014e6c:	4b1f      	ldr	r3, [pc, #124]	; (8014eec <vTaskSuspend+0xdc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d005      	beq.n	8014e80 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014e74:	f001 fb66 	bl	8016544 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014e78:	f000 fdb2 	bl	80159e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014e7c:	f001 fb92 	bl	80165a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014e80:	4b18      	ldr	r3, [pc, #96]	; (8014ee4 <vTaskSuspend+0xd4>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d127      	bne.n	8014eda <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014e8a:	4b18      	ldr	r3, [pc, #96]	; (8014eec <vTaskSuspend+0xdc>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d017      	beq.n	8014ec2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014e92:	4b17      	ldr	r3, [pc, #92]	; (8014ef0 <vTaskSuspend+0xe0>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00a      	beq.n	8014eb0 <vTaskSuspend+0xa0>
	__asm volatile
 8014e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9e:	f383 8811 	msr	BASEPRI, r3
 8014ea2:	f3bf 8f6f 	isb	sy
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	60bb      	str	r3, [r7, #8]
}
 8014eac:	bf00      	nop
 8014eae:	e7fe      	b.n	8014eae <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014eb0:	4b10      	ldr	r3, [pc, #64]	; (8014ef4 <vTaskSuspend+0xe4>)
 8014eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eb6:	601a      	str	r2, [r3, #0]
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ec0:	e00b      	b.n	8014eda <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014ec2:	4b09      	ldr	r3, [pc, #36]	; (8014ee8 <vTaskSuspend+0xd8>)
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	4b0c      	ldr	r3, [pc, #48]	; (8014ef8 <vTaskSuspend+0xe8>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d103      	bne.n	8014ed6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014ece:	4b05      	ldr	r3, [pc, #20]	; (8014ee4 <vTaskSuspend+0xd4>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	601a      	str	r2, [r3, #0]
	}
 8014ed4:	e001      	b.n	8014eda <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014ed6:	f000 fa99 	bl	801540c <vTaskSwitchContext>
	}
 8014eda:	bf00      	nop
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	240017e4 	.word	0x240017e4
 8014ee8:	24001ca4 	.word	0x24001ca4
 8014eec:	24001cc4 	.word	0x24001cc4
 8014ef0:	24001ce0 	.word	0x24001ce0
 8014ef4:	e000ed04 	.word	0xe000ed04
 8014ef8:	24001cb8 	.word	0x24001cb8

08014efc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014efc:	b480      	push	{r7}
 8014efe:	b087      	sub	sp, #28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014f04:	2300      	movs	r3, #0
 8014f06:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10a      	bne.n	8014f28 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f16:	f383 8811 	msr	BASEPRI, r3
 8014f1a:	f3bf 8f6f 	isb	sy
 8014f1e:	f3bf 8f4f 	dsb	sy
 8014f22:	60fb      	str	r3, [r7, #12]
}
 8014f24:	bf00      	nop
 8014f26:	e7fe      	b.n	8014f26 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	695b      	ldr	r3, [r3, #20]
 8014f2c:	4a0a      	ldr	r2, [pc, #40]	; (8014f58 <prvTaskIsTaskSuspended+0x5c>)
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	d10a      	bne.n	8014f48 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f36:	4a09      	ldr	r2, [pc, #36]	; (8014f5c <prvTaskIsTaskSuspended+0x60>)
 8014f38:	4293      	cmp	r3, r2
 8014f3a:	d005      	beq.n	8014f48 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014f44:	2301      	movs	r3, #1
 8014f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f48:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	371c      	adds	r7, #28
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	24001ca4 	.word	0x24001ca4
 8014f5c:	24001c78 	.word	0x24001c78

08014f60 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b08a      	sub	sp, #40	; 0x28
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d10a      	bne.n	8014f8c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7a:	f383 8811 	msr	BASEPRI, r3
 8014f7e:	f3bf 8f6f 	isb	sy
 8014f82:	f3bf 8f4f 	dsb	sy
 8014f86:	61bb      	str	r3, [r7, #24]
}
 8014f88:	bf00      	nop
 8014f8a:	e7fe      	b.n	8014f8a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f8c:	f001 fbbc 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 8014f90:	f3ef 8211 	mrs	r2, BASEPRI
 8014f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f98:	f383 8811 	msr	BASEPRI, r3
 8014f9c:	f3bf 8f6f 	isb	sy
 8014fa0:	f3bf 8f4f 	dsb	sy
 8014fa4:	617a      	str	r2, [r7, #20]
 8014fa6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014fa8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014faa:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014fac:	6a38      	ldr	r0, [r7, #32]
 8014fae:	f7ff ffa5 	bl	8014efc <prvTaskIsTaskSuspended>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d030      	beq.n	801501a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fb8:	4b1d      	ldr	r3, [pc, #116]	; (8015030 <xTaskResumeFromISR+0xd0>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d126      	bne.n	801500e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc4:	4b1b      	ldr	r3, [pc, #108]	; (8015034 <xTaskResumeFromISR+0xd4>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d301      	bcc.n	8014fd2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014fce:	2301      	movs	r3, #1
 8014fd0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fd2:	6a3b      	ldr	r3, [r7, #32]
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7fe ff74 	bl	8013ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
 8014fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe0:	4b15      	ldr	r3, [pc, #84]	; (8015038 <xTaskResumeFromISR+0xd8>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d903      	bls.n	8014ff0 <xTaskResumeFromISR+0x90>
 8014fe8:	6a3b      	ldr	r3, [r7, #32]
 8014fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fec:	4a12      	ldr	r2, [pc, #72]	; (8015038 <xTaskResumeFromISR+0xd8>)
 8014fee:	6013      	str	r3, [r2, #0]
 8014ff0:	6a3b      	ldr	r3, [r7, #32]
 8014ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	4413      	add	r3, r2
 8014ffa:	009b      	lsls	r3, r3, #2
 8014ffc:	4a0f      	ldr	r2, [pc, #60]	; (801503c <xTaskResumeFromISR+0xdc>)
 8014ffe:	441a      	add	r2, r3
 8015000:	6a3b      	ldr	r3, [r7, #32]
 8015002:	3304      	adds	r3, #4
 8015004:	4619      	mov	r1, r3
 8015006:	4610      	mov	r0, r2
 8015008:	f7fe feff 	bl	8013e0a <vListInsertEnd>
 801500c:	e005      	b.n	801501a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801500e:	6a3b      	ldr	r3, [r7, #32]
 8015010:	3318      	adds	r3, #24
 8015012:	4619      	mov	r1, r3
 8015014:	480a      	ldr	r0, [pc, #40]	; (8015040 <xTaskResumeFromISR+0xe0>)
 8015016:	f7fe fef8 	bl	8013e0a <vListInsertEnd>
 801501a:	69fb      	ldr	r3, [r7, #28]
 801501c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	f383 8811 	msr	BASEPRI, r3
}
 8015024:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8015026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015028:	4618      	mov	r0, r3
 801502a:	3728      	adds	r7, #40	; 0x28
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	24001ce0 	.word	0x24001ce0
 8015034:	240017e4 	.word	0x240017e4
 8015038:	24001cc0 	.word	0x24001cc0
 801503c:	240017e8 	.word	0x240017e8
 8015040:	24001c78 	.word	0x24001c78

08015044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b08a      	sub	sp, #40	; 0x28
 8015048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801504a:	2300      	movs	r3, #0
 801504c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801504e:	2300      	movs	r3, #0
 8015050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015052:	463a      	mov	r2, r7
 8015054:	1d39      	adds	r1, r7, #4
 8015056:	f107 0308 	add.w	r3, r7, #8
 801505a:	4618      	mov	r0, r3
 801505c:	f7fe fc08 	bl	8013870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015060:	6839      	ldr	r1, [r7, #0]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	68ba      	ldr	r2, [r7, #8]
 8015066:	9202      	str	r2, [sp, #8]
 8015068:	9301      	str	r3, [sp, #4]
 801506a:	2300      	movs	r3, #0
 801506c:	9300      	str	r3, [sp, #0]
 801506e:	2300      	movs	r3, #0
 8015070:	460a      	mov	r2, r1
 8015072:	4921      	ldr	r1, [pc, #132]	; (80150f8 <vTaskStartScheduler+0xb4>)
 8015074:	4821      	ldr	r0, [pc, #132]	; (80150fc <vTaskStartScheduler+0xb8>)
 8015076:	f7ff fcf5 	bl	8014a64 <xTaskCreateStatic>
 801507a:	4603      	mov	r3, r0
 801507c:	4a20      	ldr	r2, [pc, #128]	; (8015100 <vTaskStartScheduler+0xbc>)
 801507e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015080:	4b1f      	ldr	r3, [pc, #124]	; (8015100 <vTaskStartScheduler+0xbc>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d002      	beq.n	801508e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015088:	2301      	movs	r3, #1
 801508a:	617b      	str	r3, [r7, #20]
 801508c:	e001      	b.n	8015092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801508e:	2300      	movs	r3, #0
 8015090:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d102      	bne.n	801509e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015098:	f000 fdba 	bl	8015c10 <xTimerCreateTimerTask>
 801509c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d116      	bne.n	80150d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80150a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a8:	f383 8811 	msr	BASEPRI, r3
 80150ac:	f3bf 8f6f 	isb	sy
 80150b0:	f3bf 8f4f 	dsb	sy
 80150b4:	613b      	str	r3, [r7, #16]
}
 80150b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80150b8:	4b12      	ldr	r3, [pc, #72]	; (8015104 <vTaskStartScheduler+0xc0>)
 80150ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80150c0:	4b11      	ldr	r3, [pc, #68]	; (8015108 <vTaskStartScheduler+0xc4>)
 80150c2:	2201      	movs	r2, #1
 80150c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80150c6:	4b11      	ldr	r3, [pc, #68]	; (801510c <vTaskStartScheduler+0xc8>)
 80150c8:	2200      	movs	r2, #0
 80150ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80150cc:	f001 f998 	bl	8016400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80150d0:	e00e      	b.n	80150f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150d8:	d10a      	bne.n	80150f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80150da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150de:	f383 8811 	msr	BASEPRI, r3
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	f3bf 8f4f 	dsb	sy
 80150ea:	60fb      	str	r3, [r7, #12]
}
 80150ec:	bf00      	nop
 80150ee:	e7fe      	b.n	80150ee <vTaskStartScheduler+0xaa>
}
 80150f0:	bf00      	nop
 80150f2:	3718      	adds	r7, #24
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	08017884 	.word	0x08017884
 80150fc:	08015875 	.word	0x08015875
 8015100:	24001cdc 	.word	0x24001cdc
 8015104:	24001cd8 	.word	0x24001cd8
 8015108:	24001cc4 	.word	0x24001cc4
 801510c:	24001cbc 	.word	0x24001cbc

08015110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015110:	b480      	push	{r7}
 8015112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015114:	4b04      	ldr	r3, [pc, #16]	; (8015128 <vTaskSuspendAll+0x18>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	3301      	adds	r3, #1
 801511a:	4a03      	ldr	r2, [pc, #12]	; (8015128 <vTaskSuspendAll+0x18>)
 801511c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801511e:	bf00      	nop
 8015120:	46bd      	mov	sp, r7
 8015122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015126:	4770      	bx	lr
 8015128:	24001ce0 	.word	0x24001ce0

0801512c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b084      	sub	sp, #16
 8015130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015132:	2300      	movs	r3, #0
 8015134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015136:	2300      	movs	r3, #0
 8015138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801513a:	4b42      	ldr	r3, [pc, #264]	; (8015244 <xTaskResumeAll+0x118>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d10a      	bne.n	8015158 <xTaskResumeAll+0x2c>
	__asm volatile
 8015142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015146:	f383 8811 	msr	BASEPRI, r3
 801514a:	f3bf 8f6f 	isb	sy
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	603b      	str	r3, [r7, #0]
}
 8015154:	bf00      	nop
 8015156:	e7fe      	b.n	8015156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015158:	f001 f9f4 	bl	8016544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801515c:	4b39      	ldr	r3, [pc, #228]	; (8015244 <xTaskResumeAll+0x118>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	3b01      	subs	r3, #1
 8015162:	4a38      	ldr	r2, [pc, #224]	; (8015244 <xTaskResumeAll+0x118>)
 8015164:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015166:	4b37      	ldr	r3, [pc, #220]	; (8015244 <xTaskResumeAll+0x118>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d162      	bne.n	8015234 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801516e:	4b36      	ldr	r3, [pc, #216]	; (8015248 <xTaskResumeAll+0x11c>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d05e      	beq.n	8015234 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015176:	e02f      	b.n	80151d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015178:	4b34      	ldr	r3, [pc, #208]	; (801524c <xTaskResumeAll+0x120>)
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	3318      	adds	r3, #24
 8015184:	4618      	mov	r0, r3
 8015186:	f7fe fe9d 	bl	8013ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	3304      	adds	r3, #4
 801518e:	4618      	mov	r0, r3
 8015190:	f7fe fe98 	bl	8013ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015198:	4b2d      	ldr	r3, [pc, #180]	; (8015250 <xTaskResumeAll+0x124>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	429a      	cmp	r2, r3
 801519e:	d903      	bls.n	80151a8 <xTaskResumeAll+0x7c>
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151a4:	4a2a      	ldr	r2, [pc, #168]	; (8015250 <xTaskResumeAll+0x124>)
 80151a6:	6013      	str	r3, [r2, #0]
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ac:	4613      	mov	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4413      	add	r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	4a27      	ldr	r2, [pc, #156]	; (8015254 <xTaskResumeAll+0x128>)
 80151b6:	441a      	add	r2, r3
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	3304      	adds	r3, #4
 80151bc:	4619      	mov	r1, r3
 80151be:	4610      	mov	r0, r2
 80151c0:	f7fe fe23 	bl	8013e0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c8:	4b23      	ldr	r3, [pc, #140]	; (8015258 <xTaskResumeAll+0x12c>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d302      	bcc.n	80151d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80151d2:	4b22      	ldr	r3, [pc, #136]	; (801525c <xTaskResumeAll+0x130>)
 80151d4:	2201      	movs	r2, #1
 80151d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80151d8:	4b1c      	ldr	r3, [pc, #112]	; (801524c <xTaskResumeAll+0x120>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1cb      	bne.n	8015178 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d001      	beq.n	80151ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80151e6:	f000 fbfb 	bl	80159e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80151ea:	4b1d      	ldr	r3, [pc, #116]	; (8015260 <xTaskResumeAll+0x134>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d010      	beq.n	8015218 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80151f6:	f000 f847 	bl	8015288 <xTaskIncrementTick>
 80151fa:	4603      	mov	r3, r0
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d002      	beq.n	8015206 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015200:	4b16      	ldr	r3, [pc, #88]	; (801525c <xTaskResumeAll+0x130>)
 8015202:	2201      	movs	r2, #1
 8015204:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	3b01      	subs	r3, #1
 801520a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d1f1      	bne.n	80151f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015212:	4b13      	ldr	r3, [pc, #76]	; (8015260 <xTaskResumeAll+0x134>)
 8015214:	2200      	movs	r2, #0
 8015216:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015218:	4b10      	ldr	r3, [pc, #64]	; (801525c <xTaskResumeAll+0x130>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d009      	beq.n	8015234 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015220:	2301      	movs	r3, #1
 8015222:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015224:	4b0f      	ldr	r3, [pc, #60]	; (8015264 <xTaskResumeAll+0x138>)
 8015226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801522a:	601a      	str	r2, [r3, #0]
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015234:	f001 f9b6 	bl	80165a4 <vPortExitCritical>

	return xAlreadyYielded;
 8015238:	68bb      	ldr	r3, [r7, #8]
}
 801523a:	4618      	mov	r0, r3
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	24001ce0 	.word	0x24001ce0
 8015248:	24001cb8 	.word	0x24001cb8
 801524c:	24001c78 	.word	0x24001c78
 8015250:	24001cc0 	.word	0x24001cc0
 8015254:	240017e8 	.word	0x240017e8
 8015258:	240017e4 	.word	0x240017e4
 801525c:	24001ccc 	.word	0x24001ccc
 8015260:	24001cc8 	.word	0x24001cc8
 8015264:	e000ed04 	.word	0xe000ed04

08015268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801526e:	4b05      	ldr	r3, [pc, #20]	; (8015284 <xTaskGetTickCount+0x1c>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015274:	687b      	ldr	r3, [r7, #4]
}
 8015276:	4618      	mov	r0, r3
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	24001cbc 	.word	0x24001cbc

08015288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b086      	sub	sp, #24
 801528c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801528e:	2300      	movs	r3, #0
 8015290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015292:	4b53      	ldr	r3, [pc, #332]	; (80153e0 <xTaskIncrementTick+0x158>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	f040 8095 	bne.w	80153c6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801529c:	4b51      	ldr	r3, [pc, #324]	; (80153e4 <xTaskIncrementTick+0x15c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	3301      	adds	r3, #1
 80152a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80152a4:	4a4f      	ldr	r2, [pc, #316]	; (80153e4 <xTaskIncrementTick+0x15c>)
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d120      	bne.n	80152f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80152b0:	4b4d      	ldr	r3, [pc, #308]	; (80153e8 <xTaskIncrementTick+0x160>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d00a      	beq.n	80152d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80152ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152be:	f383 8811 	msr	BASEPRI, r3
 80152c2:	f3bf 8f6f 	isb	sy
 80152c6:	f3bf 8f4f 	dsb	sy
 80152ca:	603b      	str	r3, [r7, #0]
}
 80152cc:	bf00      	nop
 80152ce:	e7fe      	b.n	80152ce <xTaskIncrementTick+0x46>
 80152d0:	4b45      	ldr	r3, [pc, #276]	; (80153e8 <xTaskIncrementTick+0x160>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	60fb      	str	r3, [r7, #12]
 80152d6:	4b45      	ldr	r3, [pc, #276]	; (80153ec <xTaskIncrementTick+0x164>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	4a43      	ldr	r2, [pc, #268]	; (80153e8 <xTaskIncrementTick+0x160>)
 80152dc:	6013      	str	r3, [r2, #0]
 80152de:	4a43      	ldr	r2, [pc, #268]	; (80153ec <xTaskIncrementTick+0x164>)
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6013      	str	r3, [r2, #0]
 80152e4:	4b42      	ldr	r3, [pc, #264]	; (80153f0 <xTaskIncrementTick+0x168>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	3301      	adds	r3, #1
 80152ea:	4a41      	ldr	r2, [pc, #260]	; (80153f0 <xTaskIncrementTick+0x168>)
 80152ec:	6013      	str	r3, [r2, #0]
 80152ee:	f000 fb77 	bl	80159e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80152f2:	4b40      	ldr	r3, [pc, #256]	; (80153f4 <xTaskIncrementTick+0x16c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	693a      	ldr	r2, [r7, #16]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d349      	bcc.n	8015390 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152fc:	4b3a      	ldr	r3, [pc, #232]	; (80153e8 <xTaskIncrementTick+0x160>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d104      	bne.n	8015310 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015306:	4b3b      	ldr	r3, [pc, #236]	; (80153f4 <xTaskIncrementTick+0x16c>)
 8015308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801530c:	601a      	str	r2, [r3, #0]
					break;
 801530e:	e03f      	b.n	8015390 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015310:	4b35      	ldr	r3, [pc, #212]	; (80153e8 <xTaskIncrementTick+0x160>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015320:	693a      	ldr	r2, [r7, #16]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	429a      	cmp	r2, r3
 8015326:	d203      	bcs.n	8015330 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015328:	4a32      	ldr	r2, [pc, #200]	; (80153f4 <xTaskIncrementTick+0x16c>)
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801532e:	e02f      	b.n	8015390 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	3304      	adds	r3, #4
 8015334:	4618      	mov	r0, r3
 8015336:	f7fe fdc5 	bl	8013ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801533e:	2b00      	cmp	r3, #0
 8015340:	d004      	beq.n	801534c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	3318      	adds	r3, #24
 8015346:	4618      	mov	r0, r3
 8015348:	f7fe fdbc 	bl	8013ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015350:	4b29      	ldr	r3, [pc, #164]	; (80153f8 <xTaskIncrementTick+0x170>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	429a      	cmp	r2, r3
 8015356:	d903      	bls.n	8015360 <xTaskIncrementTick+0xd8>
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801535c:	4a26      	ldr	r2, [pc, #152]	; (80153f8 <xTaskIncrementTick+0x170>)
 801535e:	6013      	str	r3, [r2, #0]
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015364:	4613      	mov	r3, r2
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	4413      	add	r3, r2
 801536a:	009b      	lsls	r3, r3, #2
 801536c:	4a23      	ldr	r2, [pc, #140]	; (80153fc <xTaskIncrementTick+0x174>)
 801536e:	441a      	add	r2, r3
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	3304      	adds	r3, #4
 8015374:	4619      	mov	r1, r3
 8015376:	4610      	mov	r0, r2
 8015378:	f7fe fd47 	bl	8013e0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015380:	4b1f      	ldr	r3, [pc, #124]	; (8015400 <xTaskIncrementTick+0x178>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015386:	429a      	cmp	r2, r3
 8015388:	d3b8      	bcc.n	80152fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801538a:	2301      	movs	r3, #1
 801538c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801538e:	e7b5      	b.n	80152fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015390:	4b1b      	ldr	r3, [pc, #108]	; (8015400 <xTaskIncrementTick+0x178>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015396:	4919      	ldr	r1, [pc, #100]	; (80153fc <xTaskIncrementTick+0x174>)
 8015398:	4613      	mov	r3, r2
 801539a:	009b      	lsls	r3, r3, #2
 801539c:	4413      	add	r3, r2
 801539e:	009b      	lsls	r3, r3, #2
 80153a0:	440b      	add	r3, r1
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d901      	bls.n	80153ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80153a8:	2301      	movs	r3, #1
 80153aa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80153ac:	4b15      	ldr	r3, [pc, #84]	; (8015404 <xTaskIncrementTick+0x17c>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d101      	bne.n	80153b8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80153b4:	f7eb f916 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80153b8:	4b13      	ldr	r3, [pc, #76]	; (8015408 <xTaskIncrementTick+0x180>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d009      	beq.n	80153d4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80153c0:	2301      	movs	r3, #1
 80153c2:	617b      	str	r3, [r7, #20]
 80153c4:	e006      	b.n	80153d4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80153c6:	4b0f      	ldr	r3, [pc, #60]	; (8015404 <xTaskIncrementTick+0x17c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	3301      	adds	r3, #1
 80153cc:	4a0d      	ldr	r2, [pc, #52]	; (8015404 <xTaskIncrementTick+0x17c>)
 80153ce:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80153d0:	f7eb f908 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80153d4:	697b      	ldr	r3, [r7, #20]
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3718      	adds	r7, #24
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	24001ce0 	.word	0x24001ce0
 80153e4:	24001cbc 	.word	0x24001cbc
 80153e8:	24001c70 	.word	0x24001c70
 80153ec:	24001c74 	.word	0x24001c74
 80153f0:	24001cd0 	.word	0x24001cd0
 80153f4:	24001cd8 	.word	0x24001cd8
 80153f8:	24001cc0 	.word	0x24001cc0
 80153fc:	240017e8 	.word	0x240017e8
 8015400:	240017e4 	.word	0x240017e4
 8015404:	24001cc8 	.word	0x24001cc8
 8015408:	24001ccc 	.word	0x24001ccc

0801540c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801540c:	b480      	push	{r7}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015412:	4b28      	ldr	r3, [pc, #160]	; (80154b4 <vTaskSwitchContext+0xa8>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d003      	beq.n	8015422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801541a:	4b27      	ldr	r3, [pc, #156]	; (80154b8 <vTaskSwitchContext+0xac>)
 801541c:	2201      	movs	r2, #1
 801541e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015420:	e041      	b.n	80154a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015422:	4b25      	ldr	r3, [pc, #148]	; (80154b8 <vTaskSwitchContext+0xac>)
 8015424:	2200      	movs	r2, #0
 8015426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015428:	4b24      	ldr	r3, [pc, #144]	; (80154bc <vTaskSwitchContext+0xb0>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	60fb      	str	r3, [r7, #12]
 801542e:	e010      	b.n	8015452 <vTaskSwitchContext+0x46>
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d10a      	bne.n	801544c <vTaskSwitchContext+0x40>
	__asm volatile
 8015436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543a:	f383 8811 	msr	BASEPRI, r3
 801543e:	f3bf 8f6f 	isb	sy
 8015442:	f3bf 8f4f 	dsb	sy
 8015446:	607b      	str	r3, [r7, #4]
}
 8015448:	bf00      	nop
 801544a:	e7fe      	b.n	801544a <vTaskSwitchContext+0x3e>
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	3b01      	subs	r3, #1
 8015450:	60fb      	str	r3, [r7, #12]
 8015452:	491b      	ldr	r1, [pc, #108]	; (80154c0 <vTaskSwitchContext+0xb4>)
 8015454:	68fa      	ldr	r2, [r7, #12]
 8015456:	4613      	mov	r3, r2
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4413      	add	r3, r2
 801545c:	009b      	lsls	r3, r3, #2
 801545e:	440b      	add	r3, r1
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0e4      	beq.n	8015430 <vTaskSwitchContext+0x24>
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	4613      	mov	r3, r2
 801546a:	009b      	lsls	r3, r3, #2
 801546c:	4413      	add	r3, r2
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	4a13      	ldr	r2, [pc, #76]	; (80154c0 <vTaskSwitchContext+0xb4>)
 8015472:	4413      	add	r3, r2
 8015474:	60bb      	str	r3, [r7, #8]
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	685a      	ldr	r2, [r3, #4]
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	605a      	str	r2, [r3, #4]
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	685a      	ldr	r2, [r3, #4]
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	3308      	adds	r3, #8
 8015488:	429a      	cmp	r2, r3
 801548a:	d104      	bne.n	8015496 <vTaskSwitchContext+0x8a>
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	685a      	ldr	r2, [r3, #4]
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	605a      	str	r2, [r3, #4]
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	4a09      	ldr	r2, [pc, #36]	; (80154c4 <vTaskSwitchContext+0xb8>)
 801549e:	6013      	str	r3, [r2, #0]
 80154a0:	4a06      	ldr	r2, [pc, #24]	; (80154bc <vTaskSwitchContext+0xb0>)
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6013      	str	r3, [r2, #0]
}
 80154a6:	bf00      	nop
 80154a8:	3714      	adds	r7, #20
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr
 80154b2:	bf00      	nop
 80154b4:	24001ce0 	.word	0x24001ce0
 80154b8:	24001ccc 	.word	0x24001ccc
 80154bc:	24001cc0 	.word	0x24001cc0
 80154c0:	240017e8 	.word	0x240017e8
 80154c4:	240017e4 	.word	0x240017e4

080154c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d10a      	bne.n	80154ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80154d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154dc:	f383 8811 	msr	BASEPRI, r3
 80154e0:	f3bf 8f6f 	isb	sy
 80154e4:	f3bf 8f4f 	dsb	sy
 80154e8:	60fb      	str	r3, [r7, #12]
}
 80154ea:	bf00      	nop
 80154ec:	e7fe      	b.n	80154ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154ee:	4b07      	ldr	r3, [pc, #28]	; (801550c <vTaskPlaceOnEventList+0x44>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	3318      	adds	r3, #24
 80154f4:	4619      	mov	r1, r3
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7fe fcab 	bl	8013e52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80154fc:	2101      	movs	r1, #1
 80154fe:	6838      	ldr	r0, [r7, #0]
 8015500:	f000 fb32 	bl	8015b68 <prvAddCurrentTaskToDelayedList>
}
 8015504:	bf00      	nop
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	240017e4 	.word	0x240017e4

08015510 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d10a      	bne.n	8015538 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015526:	f383 8811 	msr	BASEPRI, r3
 801552a:	f3bf 8f6f 	isb	sy
 801552e:	f3bf 8f4f 	dsb	sy
 8015532:	617b      	str	r3, [r7, #20]
}
 8015534:	bf00      	nop
 8015536:	e7fe      	b.n	8015536 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015538:	4b11      	ldr	r3, [pc, #68]	; (8015580 <vTaskPlaceOnUnorderedEventList+0x70>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10a      	bne.n	8015556 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015544:	f383 8811 	msr	BASEPRI, r3
 8015548:	f3bf 8f6f 	isb	sy
 801554c:	f3bf 8f4f 	dsb	sy
 8015550:	613b      	str	r3, [r7, #16]
}
 8015552:	bf00      	nop
 8015554:	e7fe      	b.n	8015554 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015556:	4b0b      	ldr	r3, [pc, #44]	; (8015584 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	68ba      	ldr	r2, [r7, #8]
 801555c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015560:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015562:	4b08      	ldr	r3, [pc, #32]	; (8015584 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	3318      	adds	r3, #24
 8015568:	4619      	mov	r1, r3
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f7fe fc4d 	bl	8013e0a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015570:	2101      	movs	r1, #1
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f000 faf8 	bl	8015b68 <prvAddCurrentTaskToDelayedList>
}
 8015578:	bf00      	nop
 801557a:	3718      	adds	r7, #24
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	24001ce0 	.word	0x24001ce0
 8015584:	240017e4 	.word	0x240017e4

08015588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015588:	b580      	push	{r7, lr}
 801558a:	b086      	sub	sp, #24
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d10a      	bne.n	80155b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	617b      	str	r3, [r7, #20]
}
 80155ac:	bf00      	nop
 80155ae:	e7fe      	b.n	80155ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80155b0:	4b0a      	ldr	r3, [pc, #40]	; (80155dc <vTaskPlaceOnEventListRestricted+0x54>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	3318      	adds	r3, #24
 80155b6:	4619      	mov	r1, r3
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f7fe fc26 	bl	8013e0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d002      	beq.n	80155ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80155c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80155ca:	6879      	ldr	r1, [r7, #4]
 80155cc:	68b8      	ldr	r0, [r7, #8]
 80155ce:	f000 facb 	bl	8015b68 <prvAddCurrentTaskToDelayedList>
	}
 80155d2:	bf00      	nop
 80155d4:	3718      	adds	r7, #24
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	240017e4 	.word	0x240017e4

080155e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d10a      	bne.n	801560c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80155f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fa:	f383 8811 	msr	BASEPRI, r3
 80155fe:	f3bf 8f6f 	isb	sy
 8015602:	f3bf 8f4f 	dsb	sy
 8015606:	60fb      	str	r3, [r7, #12]
}
 8015608:	bf00      	nop
 801560a:	e7fe      	b.n	801560a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	3318      	adds	r3, #24
 8015610:	4618      	mov	r0, r3
 8015612:	f7fe fc57 	bl	8013ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015616:	4b1e      	ldr	r3, [pc, #120]	; (8015690 <xTaskRemoveFromEventList+0xb0>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d11d      	bne.n	801565a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	3304      	adds	r3, #4
 8015622:	4618      	mov	r0, r3
 8015624:	f7fe fc4e 	bl	8013ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801562c:	4b19      	ldr	r3, [pc, #100]	; (8015694 <xTaskRemoveFromEventList+0xb4>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	429a      	cmp	r2, r3
 8015632:	d903      	bls.n	801563c <xTaskRemoveFromEventList+0x5c>
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015638:	4a16      	ldr	r2, [pc, #88]	; (8015694 <xTaskRemoveFromEventList+0xb4>)
 801563a:	6013      	str	r3, [r2, #0]
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015640:	4613      	mov	r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4a13      	ldr	r2, [pc, #76]	; (8015698 <xTaskRemoveFromEventList+0xb8>)
 801564a:	441a      	add	r2, r3
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	3304      	adds	r3, #4
 8015650:	4619      	mov	r1, r3
 8015652:	4610      	mov	r0, r2
 8015654:	f7fe fbd9 	bl	8013e0a <vListInsertEnd>
 8015658:	e005      	b.n	8015666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	3318      	adds	r3, #24
 801565e:	4619      	mov	r1, r3
 8015660:	480e      	ldr	r0, [pc, #56]	; (801569c <xTaskRemoveFromEventList+0xbc>)
 8015662:	f7fe fbd2 	bl	8013e0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801566a:	4b0d      	ldr	r3, [pc, #52]	; (80156a0 <xTaskRemoveFromEventList+0xc0>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015670:	429a      	cmp	r2, r3
 8015672:	d905      	bls.n	8015680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015674:	2301      	movs	r3, #1
 8015676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015678:	4b0a      	ldr	r3, [pc, #40]	; (80156a4 <xTaskRemoveFromEventList+0xc4>)
 801567a:	2201      	movs	r2, #1
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	e001      	b.n	8015684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015680:	2300      	movs	r3, #0
 8015682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015684:	697b      	ldr	r3, [r7, #20]
}
 8015686:	4618      	mov	r0, r3
 8015688:	3718      	adds	r7, #24
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
 801568e:	bf00      	nop
 8015690:	24001ce0 	.word	0x24001ce0
 8015694:	24001cc0 	.word	0x24001cc0
 8015698:	240017e8 	.word	0x240017e8
 801569c:	24001c78 	.word	0x24001c78
 80156a0:	240017e4 	.word	0x240017e4
 80156a4:	24001ccc 	.word	0x24001ccc

080156a8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b086      	sub	sp, #24
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80156b2:	4b29      	ldr	r3, [pc, #164]	; (8015758 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d10a      	bne.n	80156d0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80156ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156be:	f383 8811 	msr	BASEPRI, r3
 80156c2:	f3bf 8f6f 	isb	sy
 80156c6:	f3bf 8f4f 	dsb	sy
 80156ca:	613b      	str	r3, [r7, #16]
}
 80156cc:	bf00      	nop
 80156ce:	e7fe      	b.n	80156ce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d10a      	bne.n	80156fc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80156e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ea:	f383 8811 	msr	BASEPRI, r3
 80156ee:	f3bf 8f6f 	isb	sy
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	60fb      	str	r3, [r7, #12]
}
 80156f8:	bf00      	nop
 80156fa:	e7fe      	b.n	80156fa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7fe fbe1 	bl	8013ec4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	3304      	adds	r3, #4
 8015706:	4618      	mov	r0, r3
 8015708:	f7fe fbdc 	bl	8013ec4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015710:	4b12      	ldr	r3, [pc, #72]	; (801575c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	429a      	cmp	r2, r3
 8015716:	d903      	bls.n	8015720 <vTaskRemoveFromUnorderedEventList+0x78>
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801571c:	4a0f      	ldr	r2, [pc, #60]	; (801575c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801571e:	6013      	str	r3, [r2, #0]
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015724:	4613      	mov	r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	4413      	add	r3, r2
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	4a0c      	ldr	r2, [pc, #48]	; (8015760 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801572e:	441a      	add	r2, r3
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	3304      	adds	r3, #4
 8015734:	4619      	mov	r1, r3
 8015736:	4610      	mov	r0, r2
 8015738:	f7fe fb67 	bl	8013e0a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015740:	4b08      	ldr	r3, [pc, #32]	; (8015764 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015746:	429a      	cmp	r2, r3
 8015748:	d902      	bls.n	8015750 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801574a:	4b07      	ldr	r3, [pc, #28]	; (8015768 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801574c:	2201      	movs	r2, #1
 801574e:	601a      	str	r2, [r3, #0]
	}
}
 8015750:	bf00      	nop
 8015752:	3718      	adds	r7, #24
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	24001ce0 	.word	0x24001ce0
 801575c:	24001cc0 	.word	0x24001cc0
 8015760:	240017e8 	.word	0x240017e8
 8015764:	240017e4 	.word	0x240017e4
 8015768:	24001ccc 	.word	0x24001ccc

0801576c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015774:	4b06      	ldr	r3, [pc, #24]	; (8015790 <vTaskInternalSetTimeOutState+0x24>)
 8015776:	681a      	ldr	r2, [r3, #0]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801577c:	4b05      	ldr	r3, [pc, #20]	; (8015794 <vTaskInternalSetTimeOutState+0x28>)
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	605a      	str	r2, [r3, #4]
}
 8015784:	bf00      	nop
 8015786:	370c      	adds	r7, #12
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr
 8015790:	24001cd0 	.word	0x24001cd0
 8015794:	24001cbc 	.word	0x24001cbc

08015798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b088      	sub	sp, #32
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d10a      	bne.n	80157be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80157a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ac:	f383 8811 	msr	BASEPRI, r3
 80157b0:	f3bf 8f6f 	isb	sy
 80157b4:	f3bf 8f4f 	dsb	sy
 80157b8:	613b      	str	r3, [r7, #16]
}
 80157ba:	bf00      	nop
 80157bc:	e7fe      	b.n	80157bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d10a      	bne.n	80157da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80157c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c8:	f383 8811 	msr	BASEPRI, r3
 80157cc:	f3bf 8f6f 	isb	sy
 80157d0:	f3bf 8f4f 	dsb	sy
 80157d4:	60fb      	str	r3, [r7, #12]
}
 80157d6:	bf00      	nop
 80157d8:	e7fe      	b.n	80157d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80157da:	f000 feb3 	bl	8016544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80157de:	4b1d      	ldr	r3, [pc, #116]	; (8015854 <xTaskCheckForTimeOut+0xbc>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	69ba      	ldr	r2, [r7, #24]
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157f6:	d102      	bne.n	80157fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80157f8:	2300      	movs	r3, #0
 80157fa:	61fb      	str	r3, [r7, #28]
 80157fc:	e023      	b.n	8015846 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	4b15      	ldr	r3, [pc, #84]	; (8015858 <xTaskCheckForTimeOut+0xc0>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	429a      	cmp	r2, r3
 8015808:	d007      	beq.n	801581a <xTaskCheckForTimeOut+0x82>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	685b      	ldr	r3, [r3, #4]
 801580e:	69ba      	ldr	r2, [r7, #24]
 8015810:	429a      	cmp	r2, r3
 8015812:	d302      	bcc.n	801581a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015814:	2301      	movs	r3, #1
 8015816:	61fb      	str	r3, [r7, #28]
 8015818:	e015      	b.n	8015846 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	697a      	ldr	r2, [r7, #20]
 8015820:	429a      	cmp	r2, r3
 8015822:	d20b      	bcs.n	801583c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	681a      	ldr	r2, [r3, #0]
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	1ad2      	subs	r2, r2, r3
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7ff ff9b 	bl	801576c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015836:	2300      	movs	r3, #0
 8015838:	61fb      	str	r3, [r7, #28]
 801583a:	e004      	b.n	8015846 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2200      	movs	r2, #0
 8015840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015842:	2301      	movs	r3, #1
 8015844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015846:	f000 fead 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 801584a:	69fb      	ldr	r3, [r7, #28]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3720      	adds	r7, #32
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	24001cbc 	.word	0x24001cbc
 8015858:	24001cd0 	.word	0x24001cd0

0801585c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801585c:	b480      	push	{r7}
 801585e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015860:	4b03      	ldr	r3, [pc, #12]	; (8015870 <vTaskMissedYield+0x14>)
 8015862:	2201      	movs	r2, #1
 8015864:	601a      	str	r2, [r3, #0]
}
 8015866:	bf00      	nop
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr
 8015870:	24001ccc 	.word	0x24001ccc

08015874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801587c:	f000 f852 	bl	8015924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015880:	4b06      	ldr	r3, [pc, #24]	; (801589c <prvIdleTask+0x28>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b01      	cmp	r3, #1
 8015886:	d9f9      	bls.n	801587c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015888:	4b05      	ldr	r3, [pc, #20]	; (80158a0 <prvIdleTask+0x2c>)
 801588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801588e:	601a      	str	r2, [r3, #0]
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015898:	e7f0      	b.n	801587c <prvIdleTask+0x8>
 801589a:	bf00      	nop
 801589c:	240017e8 	.word	0x240017e8
 80158a0:	e000ed04 	.word	0xe000ed04

080158a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158aa:	2300      	movs	r3, #0
 80158ac:	607b      	str	r3, [r7, #4]
 80158ae:	e00c      	b.n	80158ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	4613      	mov	r3, r2
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	4413      	add	r3, r2
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	4a12      	ldr	r2, [pc, #72]	; (8015904 <prvInitialiseTaskLists+0x60>)
 80158bc:	4413      	add	r3, r2
 80158be:	4618      	mov	r0, r3
 80158c0:	f7fe fa76 	bl	8013db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3301      	adds	r3, #1
 80158c8:	607b      	str	r3, [r7, #4]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2b37      	cmp	r3, #55	; 0x37
 80158ce:	d9ef      	bls.n	80158b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80158d0:	480d      	ldr	r0, [pc, #52]	; (8015908 <prvInitialiseTaskLists+0x64>)
 80158d2:	f7fe fa6d 	bl	8013db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80158d6:	480d      	ldr	r0, [pc, #52]	; (801590c <prvInitialiseTaskLists+0x68>)
 80158d8:	f7fe fa6a 	bl	8013db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80158dc:	480c      	ldr	r0, [pc, #48]	; (8015910 <prvInitialiseTaskLists+0x6c>)
 80158de:	f7fe fa67 	bl	8013db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80158e2:	480c      	ldr	r0, [pc, #48]	; (8015914 <prvInitialiseTaskLists+0x70>)
 80158e4:	f7fe fa64 	bl	8013db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80158e8:	480b      	ldr	r0, [pc, #44]	; (8015918 <prvInitialiseTaskLists+0x74>)
 80158ea:	f7fe fa61 	bl	8013db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80158ee:	4b0b      	ldr	r3, [pc, #44]	; (801591c <prvInitialiseTaskLists+0x78>)
 80158f0:	4a05      	ldr	r2, [pc, #20]	; (8015908 <prvInitialiseTaskLists+0x64>)
 80158f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80158f4:	4b0a      	ldr	r3, [pc, #40]	; (8015920 <prvInitialiseTaskLists+0x7c>)
 80158f6:	4a05      	ldr	r2, [pc, #20]	; (801590c <prvInitialiseTaskLists+0x68>)
 80158f8:	601a      	str	r2, [r3, #0]
}
 80158fa:	bf00      	nop
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	240017e8 	.word	0x240017e8
 8015908:	24001c48 	.word	0x24001c48
 801590c:	24001c5c 	.word	0x24001c5c
 8015910:	24001c78 	.word	0x24001c78
 8015914:	24001c8c 	.word	0x24001c8c
 8015918:	24001ca4 	.word	0x24001ca4
 801591c:	24001c70 	.word	0x24001c70
 8015920:	24001c74 	.word	0x24001c74

08015924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801592a:	e019      	b.n	8015960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801592c:	f000 fe0a 	bl	8016544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015930:	4b10      	ldr	r3, [pc, #64]	; (8015974 <prvCheckTasksWaitingTermination+0x50>)
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	68db      	ldr	r3, [r3, #12]
 8015936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	3304      	adds	r3, #4
 801593c:	4618      	mov	r0, r3
 801593e:	f7fe fac1 	bl	8013ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015942:	4b0d      	ldr	r3, [pc, #52]	; (8015978 <prvCheckTasksWaitingTermination+0x54>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	3b01      	subs	r3, #1
 8015948:	4a0b      	ldr	r2, [pc, #44]	; (8015978 <prvCheckTasksWaitingTermination+0x54>)
 801594a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801594c:	4b0b      	ldr	r3, [pc, #44]	; (801597c <prvCheckTasksWaitingTermination+0x58>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	3b01      	subs	r3, #1
 8015952:	4a0a      	ldr	r2, [pc, #40]	; (801597c <prvCheckTasksWaitingTermination+0x58>)
 8015954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015956:	f000 fe25 	bl	80165a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 f810 	bl	8015980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015960:	4b06      	ldr	r3, [pc, #24]	; (801597c <prvCheckTasksWaitingTermination+0x58>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d1e1      	bne.n	801592c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015968:	bf00      	nop
 801596a:	bf00      	nop
 801596c:	3708      	adds	r7, #8
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop
 8015974:	24001c8c 	.word	0x24001c8c
 8015978:	24001cb8 	.word	0x24001cb8
 801597c:	24001ca0 	.word	0x24001ca0

08015980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015980:	b580      	push	{r7, lr}
 8015982:	b084      	sub	sp, #16
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801598e:	2b00      	cmp	r3, #0
 8015990:	d108      	bne.n	80159a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015996:	4618      	mov	r0, r3
 8015998:	f000 ffc2 	bl	8016920 <vPortFree>
				vPortFree( pxTCB );
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f000 ffbf 	bl	8016920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80159a2:	e018      	b.n	80159d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d103      	bne.n	80159b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 ffb6 	bl	8016920 <vPortFree>
	}
 80159b4:	e00f      	b.n	80159d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159bc:	2b02      	cmp	r3, #2
 80159be:	d00a      	beq.n	80159d6 <prvDeleteTCB+0x56>
	__asm volatile
 80159c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c4:	f383 8811 	msr	BASEPRI, r3
 80159c8:	f3bf 8f6f 	isb	sy
 80159cc:	f3bf 8f4f 	dsb	sy
 80159d0:	60fb      	str	r3, [r7, #12]
}
 80159d2:	bf00      	nop
 80159d4:	e7fe      	b.n	80159d4 <prvDeleteTCB+0x54>
	}
 80159d6:	bf00      	nop
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
	...

080159e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80159e0:	b480      	push	{r7}
 80159e2:	b083      	sub	sp, #12
 80159e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159e6:	4b0c      	ldr	r3, [pc, #48]	; (8015a18 <prvResetNextTaskUnblockTime+0x38>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d104      	bne.n	80159fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80159f0:	4b0a      	ldr	r3, [pc, #40]	; (8015a1c <prvResetNextTaskUnblockTime+0x3c>)
 80159f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80159f8:	e008      	b.n	8015a0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159fa:	4b07      	ldr	r3, [pc, #28]	; (8015a18 <prvResetNextTaskUnblockTime+0x38>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	4a04      	ldr	r2, [pc, #16]	; (8015a1c <prvResetNextTaskUnblockTime+0x3c>)
 8015a0a:	6013      	str	r3, [r2, #0]
}
 8015a0c:	bf00      	nop
 8015a0e:	370c      	adds	r7, #12
 8015a10:	46bd      	mov	sp, r7
 8015a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a16:	4770      	bx	lr
 8015a18:	24001c70 	.word	0x24001c70
 8015a1c:	24001cd8 	.word	0x24001cd8

08015a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a26:	4b0b      	ldr	r3, [pc, #44]	; (8015a54 <xTaskGetSchedulerState+0x34>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d102      	bne.n	8015a34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a2e:	2301      	movs	r3, #1
 8015a30:	607b      	str	r3, [r7, #4]
 8015a32:	e008      	b.n	8015a46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a34:	4b08      	ldr	r3, [pc, #32]	; (8015a58 <xTaskGetSchedulerState+0x38>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d102      	bne.n	8015a42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a3c:	2302      	movs	r3, #2
 8015a3e:	607b      	str	r3, [r7, #4]
 8015a40:	e001      	b.n	8015a46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a42:	2300      	movs	r3, #0
 8015a44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a46:	687b      	ldr	r3, [r7, #4]
	}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	370c      	adds	r7, #12
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a52:	4770      	bx	lr
 8015a54:	24001cc4 	.word	0x24001cc4
 8015a58:	24001ce0 	.word	0x24001ce0

08015a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b086      	sub	sp, #24
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d056      	beq.n	8015b20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015a72:	4b2e      	ldr	r3, [pc, #184]	; (8015b2c <xTaskPriorityDisinherit+0xd0>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	693a      	ldr	r2, [r7, #16]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d00a      	beq.n	8015a92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	60fb      	str	r3, [r7, #12]
}
 8015a8e:	bf00      	nop
 8015a90:	e7fe      	b.n	8015a90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d10a      	bne.n	8015ab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	60bb      	str	r3, [r7, #8]
}
 8015aac:	bf00      	nop
 8015aae:	e7fe      	b.n	8015aae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ab4:	1e5a      	subs	r2, r3, #1
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d02c      	beq.n	8015b20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d128      	bne.n	8015b20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	3304      	adds	r3, #4
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fe f9f6 	bl	8013ec4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015af0:	4b0f      	ldr	r3, [pc, #60]	; (8015b30 <xTaskPriorityDisinherit+0xd4>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d903      	bls.n	8015b00 <xTaskPriorityDisinherit+0xa4>
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015afc:	4a0c      	ldr	r2, [pc, #48]	; (8015b30 <xTaskPriorityDisinherit+0xd4>)
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b04:	4613      	mov	r3, r2
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	4413      	add	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4a09      	ldr	r2, [pc, #36]	; (8015b34 <xTaskPriorityDisinherit+0xd8>)
 8015b0e:	441a      	add	r2, r3
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	3304      	adds	r3, #4
 8015b14:	4619      	mov	r1, r3
 8015b16:	4610      	mov	r0, r2
 8015b18:	f7fe f977 	bl	8013e0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b20:	697b      	ldr	r3, [r7, #20]
	}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3718      	adds	r7, #24
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	240017e4 	.word	0x240017e4
 8015b30:	24001cc0 	.word	0x24001cc0
 8015b34:	240017e8 	.word	0x240017e8

08015b38 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015b3e:	4b09      	ldr	r3, [pc, #36]	; (8015b64 <uxTaskResetEventItemValue+0x2c>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	699b      	ldr	r3, [r3, #24]
 8015b44:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b46:	4b07      	ldr	r3, [pc, #28]	; (8015b64 <uxTaskResetEventItemValue+0x2c>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b4c:	4b05      	ldr	r3, [pc, #20]	; (8015b64 <uxTaskResetEventItemValue+0x2c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015b54:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015b56:	687b      	ldr	r3, [r7, #4]
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	370c      	adds	r7, #12
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b62:	4770      	bx	lr
 8015b64:	240017e4 	.word	0x240017e4

08015b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015b72:	4b21      	ldr	r3, [pc, #132]	; (8015bf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b78:	4b20      	ldr	r3, [pc, #128]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fe f9a0 	bl	8013ec4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b8a:	d10a      	bne.n	8015ba2 <prvAddCurrentTaskToDelayedList+0x3a>
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d007      	beq.n	8015ba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b92:	4b1a      	ldr	r3, [pc, #104]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	3304      	adds	r3, #4
 8015b98:	4619      	mov	r1, r3
 8015b9a:	4819      	ldr	r0, [pc, #100]	; (8015c00 <prvAddCurrentTaskToDelayedList+0x98>)
 8015b9c:	f7fe f935 	bl	8013e0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015ba0:	e026      	b.n	8015bf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015ba2:	68fa      	ldr	r2, [r7, #12]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015baa:	4b14      	ldr	r3, [pc, #80]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	68ba      	ldr	r2, [r7, #8]
 8015bb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015bb2:	68ba      	ldr	r2, [r7, #8]
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d209      	bcs.n	8015bce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bba:	4b12      	ldr	r3, [pc, #72]	; (8015c04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	4b0f      	ldr	r3, [pc, #60]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	3304      	adds	r3, #4
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	f7fe f943 	bl	8013e52 <vListInsert>
}
 8015bcc:	e010      	b.n	8015bf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bce:	4b0e      	ldr	r3, [pc, #56]	; (8015c08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	4b0a      	ldr	r3, [pc, #40]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	3304      	adds	r3, #4
 8015bd8:	4619      	mov	r1, r3
 8015bda:	4610      	mov	r0, r2
 8015bdc:	f7fe f939 	bl	8013e52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015be0:	4b0a      	ldr	r3, [pc, #40]	; (8015c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	68ba      	ldr	r2, [r7, #8]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d202      	bcs.n	8015bf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015bea:	4a08      	ldr	r2, [pc, #32]	; (8015c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	6013      	str	r3, [r2, #0]
}
 8015bf0:	bf00      	nop
 8015bf2:	3710      	adds	r7, #16
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	24001cbc 	.word	0x24001cbc
 8015bfc:	240017e4 	.word	0x240017e4
 8015c00:	24001ca4 	.word	0x24001ca4
 8015c04:	24001c74 	.word	0x24001c74
 8015c08:	24001c70 	.word	0x24001c70
 8015c0c:	24001cd8 	.word	0x24001cd8

08015c10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b08a      	sub	sp, #40	; 0x28
 8015c14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015c16:	2300      	movs	r3, #0
 8015c18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015c1a:	f000 fb07 	bl	801622c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015c1e:	4b1c      	ldr	r3, [pc, #112]	; (8015c90 <xTimerCreateTimerTask+0x80>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d021      	beq.n	8015c6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015c26:	2300      	movs	r3, #0
 8015c28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015c2e:	1d3a      	adds	r2, r7, #4
 8015c30:	f107 0108 	add.w	r1, r7, #8
 8015c34:	f107 030c 	add.w	r3, r7, #12
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7fd fe33 	bl	80138a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015c3e:	6879      	ldr	r1, [r7, #4]
 8015c40:	68bb      	ldr	r3, [r7, #8]
 8015c42:	68fa      	ldr	r2, [r7, #12]
 8015c44:	9202      	str	r2, [sp, #8]
 8015c46:	9301      	str	r3, [sp, #4]
 8015c48:	2302      	movs	r3, #2
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	460a      	mov	r2, r1
 8015c50:	4910      	ldr	r1, [pc, #64]	; (8015c94 <xTimerCreateTimerTask+0x84>)
 8015c52:	4811      	ldr	r0, [pc, #68]	; (8015c98 <xTimerCreateTimerTask+0x88>)
 8015c54:	f7fe ff06 	bl	8014a64 <xTaskCreateStatic>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	4a10      	ldr	r2, [pc, #64]	; (8015c9c <xTimerCreateTimerTask+0x8c>)
 8015c5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015c5e:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <xTimerCreateTimerTask+0x8c>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d001      	beq.n	8015c6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015c66:	2301      	movs	r3, #1
 8015c68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d10a      	bne.n	8015c86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c74:	f383 8811 	msr	BASEPRI, r3
 8015c78:	f3bf 8f6f 	isb	sy
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	613b      	str	r3, [r7, #16]
}
 8015c82:	bf00      	nop
 8015c84:	e7fe      	b.n	8015c84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015c86:	697b      	ldr	r3, [r7, #20]
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3718      	adds	r7, #24
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	24001d14 	.word	0x24001d14
 8015c94:	0801788c 	.word	0x0801788c
 8015c98:	08015dd5 	.word	0x08015dd5
 8015c9c:	24001d18 	.word	0x24001d18

08015ca0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b08a      	sub	sp, #40	; 0x28
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d10a      	bne.n	8015cce <xTimerGenericCommand+0x2e>
	__asm volatile
 8015cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cbc:	f383 8811 	msr	BASEPRI, r3
 8015cc0:	f3bf 8f6f 	isb	sy
 8015cc4:	f3bf 8f4f 	dsb	sy
 8015cc8:	623b      	str	r3, [r7, #32]
}
 8015cca:	bf00      	nop
 8015ccc:	e7fe      	b.n	8015ccc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015cce:	4b1a      	ldr	r3, [pc, #104]	; (8015d38 <xTimerGenericCommand+0x98>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d02a      	beq.n	8015d2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	2b05      	cmp	r3, #5
 8015ce6:	dc18      	bgt.n	8015d1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015ce8:	f7ff fe9a 	bl	8015a20 <xTaskGetSchedulerState>
 8015cec:	4603      	mov	r3, r0
 8015cee:	2b02      	cmp	r3, #2
 8015cf0:	d109      	bne.n	8015d06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015cf2:	4b11      	ldr	r3, [pc, #68]	; (8015d38 <xTimerGenericCommand+0x98>)
 8015cf4:	6818      	ldr	r0, [r3, #0]
 8015cf6:	f107 0110 	add.w	r1, r7, #16
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cfe:	f7fe fa49 	bl	8014194 <xQueueGenericSend>
 8015d02:	6278      	str	r0, [r7, #36]	; 0x24
 8015d04:	e012      	b.n	8015d2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015d06:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <xTimerGenericCommand+0x98>)
 8015d08:	6818      	ldr	r0, [r3, #0]
 8015d0a:	f107 0110 	add.w	r1, r7, #16
 8015d0e:	2300      	movs	r3, #0
 8015d10:	2200      	movs	r2, #0
 8015d12:	f7fe fa3f 	bl	8014194 <xQueueGenericSend>
 8015d16:	6278      	str	r0, [r7, #36]	; 0x24
 8015d18:	e008      	b.n	8015d2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d1a:	4b07      	ldr	r3, [pc, #28]	; (8015d38 <xTimerGenericCommand+0x98>)
 8015d1c:	6818      	ldr	r0, [r3, #0]
 8015d1e:	f107 0110 	add.w	r1, r7, #16
 8015d22:	2300      	movs	r3, #0
 8015d24:	683a      	ldr	r2, [r7, #0]
 8015d26:	f7fe fb33 	bl	8014390 <xQueueGenericSendFromISR>
 8015d2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3728      	adds	r7, #40	; 0x28
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	24001d14 	.word	0x24001d14

08015d3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b088      	sub	sp, #32
 8015d40:	af02      	add	r7, sp, #8
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d46:	4b22      	ldr	r3, [pc, #136]	; (8015dd0 <prvProcessExpiredTimer+0x94>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	68db      	ldr	r3, [r3, #12]
 8015d4c:	68db      	ldr	r3, [r3, #12]
 8015d4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	3304      	adds	r3, #4
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fe f8b5 	bl	8013ec4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d60:	f003 0304 	and.w	r3, r3, #4
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d022      	beq.n	8015dae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	699a      	ldr	r2, [r3, #24]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	18d1      	adds	r1, r2, r3
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	683a      	ldr	r2, [r7, #0]
 8015d74:	6978      	ldr	r0, [r7, #20]
 8015d76:	f000 f8d1 	bl	8015f1c <prvInsertTimerInActiveList>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d01f      	beq.n	8015dc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015d80:	2300      	movs	r3, #0
 8015d82:	9300      	str	r3, [sp, #0]
 8015d84:	2300      	movs	r3, #0
 8015d86:	687a      	ldr	r2, [r7, #4]
 8015d88:	2100      	movs	r1, #0
 8015d8a:	6978      	ldr	r0, [r7, #20]
 8015d8c:	f7ff ff88 	bl	8015ca0 <xTimerGenericCommand>
 8015d90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d113      	bne.n	8015dc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d9c:	f383 8811 	msr	BASEPRI, r3
 8015da0:	f3bf 8f6f 	isb	sy
 8015da4:	f3bf 8f4f 	dsb	sy
 8015da8:	60fb      	str	r3, [r7, #12]
}
 8015daa:	bf00      	nop
 8015dac:	e7fe      	b.n	8015dac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015db4:	f023 0301 	bic.w	r3, r3, #1
 8015db8:	b2da      	uxtb	r2, r3
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	6a1b      	ldr	r3, [r3, #32]
 8015dc4:	6978      	ldr	r0, [r7, #20]
 8015dc6:	4798      	blx	r3
}
 8015dc8:	bf00      	nop
 8015dca:	3718      	adds	r7, #24
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	24001d0c 	.word	0x24001d0c

08015dd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015ddc:	f107 0308 	add.w	r3, r7, #8
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 f857 	bl	8015e94 <prvGetNextExpireTime>
 8015de6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	4619      	mov	r1, r3
 8015dec:	68f8      	ldr	r0, [r7, #12]
 8015dee:	f000 f803 	bl	8015df8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015df2:	f000 f8d5 	bl	8015fa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015df6:	e7f1      	b.n	8015ddc <prvTimerTask+0x8>

08015df8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015e02:	f7ff f985 	bl	8015110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e06:	f107 0308 	add.w	r3, r7, #8
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f000 f866 	bl	8015edc <prvSampleTimeNow>
 8015e10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d130      	bne.n	8015e7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10a      	bne.n	8015e34 <prvProcessTimerOrBlockTask+0x3c>
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d806      	bhi.n	8015e34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015e26:	f7ff f981 	bl	801512c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015e2a:	68f9      	ldr	r1, [r7, #12]
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f7ff ff85 	bl	8015d3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015e32:	e024      	b.n	8015e7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d008      	beq.n	8015e4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015e3a:	4b13      	ldr	r3, [pc, #76]	; (8015e88 <prvProcessTimerOrBlockTask+0x90>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d101      	bne.n	8015e48 <prvProcessTimerOrBlockTask+0x50>
 8015e44:	2301      	movs	r3, #1
 8015e46:	e000      	b.n	8015e4a <prvProcessTimerOrBlockTask+0x52>
 8015e48:	2300      	movs	r3, #0
 8015e4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015e4c:	4b0f      	ldr	r3, [pc, #60]	; (8015e8c <prvProcessTimerOrBlockTask+0x94>)
 8015e4e:	6818      	ldr	r0, [r3, #0]
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	1ad3      	subs	r3, r2, r3
 8015e56:	683a      	ldr	r2, [r7, #0]
 8015e58:	4619      	mov	r1, r3
 8015e5a:	f7fe fdcf 	bl	80149fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015e5e:	f7ff f965 	bl	801512c <xTaskResumeAll>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d10a      	bne.n	8015e7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015e68:	4b09      	ldr	r3, [pc, #36]	; (8015e90 <prvProcessTimerOrBlockTask+0x98>)
 8015e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e6e:	601a      	str	r2, [r3, #0]
 8015e70:	f3bf 8f4f 	dsb	sy
 8015e74:	f3bf 8f6f 	isb	sy
}
 8015e78:	e001      	b.n	8015e7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015e7a:	f7ff f957 	bl	801512c <xTaskResumeAll>
}
 8015e7e:	bf00      	nop
 8015e80:	3710      	adds	r7, #16
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	24001d10 	.word	0x24001d10
 8015e8c:	24001d14 	.word	0x24001d14
 8015e90:	e000ed04 	.word	0xe000ed04

08015e94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015e94:	b480      	push	{r7}
 8015e96:	b085      	sub	sp, #20
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e9c:	4b0e      	ldr	r3, [pc, #56]	; (8015ed8 <prvGetNextExpireTime+0x44>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <prvGetNextExpireTime+0x16>
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	e000      	b.n	8015eac <prvGetNextExpireTime+0x18>
 8015eaa:	2200      	movs	r2, #0
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d105      	bne.n	8015ec4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015eb8:	4b07      	ldr	r3, [pc, #28]	; (8015ed8 <prvGetNextExpireTime+0x44>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	e001      	b.n	8015ec8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3714      	adds	r7, #20
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop
 8015ed8:	24001d0c 	.word	0x24001d0c

08015edc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015ee4:	f7ff f9c0 	bl	8015268 <xTaskGetTickCount>
 8015ee8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015eea:	4b0b      	ldr	r3, [pc, #44]	; (8015f18 <prvSampleTimeNow+0x3c>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	68fa      	ldr	r2, [r7, #12]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d205      	bcs.n	8015f00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015ef4:	f000 f936 	bl	8016164 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2201      	movs	r2, #1
 8015efc:	601a      	str	r2, [r3, #0]
 8015efe:	e002      	b.n	8015f06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2200      	movs	r2, #0
 8015f04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015f06:	4a04      	ldr	r2, [pc, #16]	; (8015f18 <prvSampleTimeNow+0x3c>)
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3710      	adds	r7, #16
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	24001d1c 	.word	0x24001d1c

08015f1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b086      	sub	sp, #24
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	607a      	str	r2, [r7, #4]
 8015f28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	68ba      	ldr	r2, [r7, #8]
 8015f32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d812      	bhi.n	8015f68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	1ad2      	subs	r2, r2, r3
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	699b      	ldr	r3, [r3, #24]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d302      	bcc.n	8015f56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015f50:	2301      	movs	r3, #1
 8015f52:	617b      	str	r3, [r7, #20]
 8015f54:	e01b      	b.n	8015f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015f56:	4b10      	ldr	r3, [pc, #64]	; (8015f98 <prvInsertTimerInActiveList+0x7c>)
 8015f58:	681a      	ldr	r2, [r3, #0]
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	3304      	adds	r3, #4
 8015f5e:	4619      	mov	r1, r3
 8015f60:	4610      	mov	r0, r2
 8015f62:	f7fd ff76 	bl	8013e52 <vListInsert>
 8015f66:	e012      	b.n	8015f8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d206      	bcs.n	8015f7e <prvInsertTimerInActiveList+0x62>
 8015f70:	68ba      	ldr	r2, [r7, #8]
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d302      	bcc.n	8015f7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	617b      	str	r3, [r7, #20]
 8015f7c:	e007      	b.n	8015f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f7e:	4b07      	ldr	r3, [pc, #28]	; (8015f9c <prvInsertTimerInActiveList+0x80>)
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	3304      	adds	r3, #4
 8015f86:	4619      	mov	r1, r3
 8015f88:	4610      	mov	r0, r2
 8015f8a:	f7fd ff62 	bl	8013e52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015f8e:	697b      	ldr	r3, [r7, #20]
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	3718      	adds	r7, #24
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}
 8015f98:	24001d10 	.word	0x24001d10
 8015f9c:	24001d0c 	.word	0x24001d0c

08015fa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b08e      	sub	sp, #56	; 0x38
 8015fa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fa6:	e0ca      	b.n	801613e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	da18      	bge.n	8015fe0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015fae:	1d3b      	adds	r3, r7, #4
 8015fb0:	3304      	adds	r3, #4
 8015fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d10a      	bne.n	8015fd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fbe:	f383 8811 	msr	BASEPRI, r3
 8015fc2:	f3bf 8f6f 	isb	sy
 8015fc6:	f3bf 8f4f 	dsb	sy
 8015fca:	61fb      	str	r3, [r7, #28]
}
 8015fcc:	bf00      	nop
 8015fce:	e7fe      	b.n	8015fce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd6:	6850      	ldr	r0, [r2, #4]
 8015fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fda:	6892      	ldr	r2, [r2, #8]
 8015fdc:	4611      	mov	r1, r2
 8015fde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f2c0 80aa 	blt.w	801613c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fee:	695b      	ldr	r3, [r3, #20]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d004      	beq.n	8015ffe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7fd ff63 	bl	8013ec4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ffe:	463b      	mov	r3, r7
 8016000:	4618      	mov	r0, r3
 8016002:	f7ff ff6b 	bl	8015edc <prvSampleTimeNow>
 8016006:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b09      	cmp	r3, #9
 801600c:	f200 8097 	bhi.w	801613e <prvProcessReceivedCommands+0x19e>
 8016010:	a201      	add	r2, pc, #4	; (adr r2, 8016018 <prvProcessReceivedCommands+0x78>)
 8016012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016016:	bf00      	nop
 8016018:	08016041 	.word	0x08016041
 801601c:	08016041 	.word	0x08016041
 8016020:	08016041 	.word	0x08016041
 8016024:	080160b5 	.word	0x080160b5
 8016028:	080160c9 	.word	0x080160c9
 801602c:	08016113 	.word	0x08016113
 8016030:	08016041 	.word	0x08016041
 8016034:	08016041 	.word	0x08016041
 8016038:	080160b5 	.word	0x080160b5
 801603c:	080160c9 	.word	0x080160c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016046:	f043 0301 	orr.w	r3, r3, #1
 801604a:	b2da      	uxtb	r2, r3
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016052:	68ba      	ldr	r2, [r7, #8]
 8016054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016056:	699b      	ldr	r3, [r3, #24]
 8016058:	18d1      	adds	r1, r2, r3
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801605e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016060:	f7ff ff5c 	bl	8015f1c <prvInsertTimerInActiveList>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	d069      	beq.n	801613e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606c:	6a1b      	ldr	r3, [r3, #32]
 801606e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016070:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016078:	f003 0304 	and.w	r3, r3, #4
 801607c:	2b00      	cmp	r3, #0
 801607e:	d05e      	beq.n	801613e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016080:	68ba      	ldr	r2, [r7, #8]
 8016082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016084:	699b      	ldr	r3, [r3, #24]
 8016086:	441a      	add	r2, r3
 8016088:	2300      	movs	r3, #0
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	2300      	movs	r3, #0
 801608e:	2100      	movs	r1, #0
 8016090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016092:	f7ff fe05 	bl	8015ca0 <xTimerGenericCommand>
 8016096:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016098:	6a3b      	ldr	r3, [r7, #32]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d14f      	bne.n	801613e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a2:	f383 8811 	msr	BASEPRI, r3
 80160a6:	f3bf 8f6f 	isb	sy
 80160aa:	f3bf 8f4f 	dsb	sy
 80160ae:	61bb      	str	r3, [r7, #24]
}
 80160b0:	bf00      	nop
 80160b2:	e7fe      	b.n	80160b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160ba:	f023 0301 	bic.w	r3, r3, #1
 80160be:	b2da      	uxtb	r2, r3
 80160c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80160c6:	e03a      	b.n	801613e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80160c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160ce:	f043 0301 	orr.w	r3, r3, #1
 80160d2:	b2da      	uxtb	r2, r3
 80160d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80160da:	68ba      	ldr	r2, [r7, #8]
 80160dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e2:	699b      	ldr	r3, [r3, #24]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d10a      	bne.n	80160fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80160e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ec:	f383 8811 	msr	BASEPRI, r3
 80160f0:	f3bf 8f6f 	isb	sy
 80160f4:	f3bf 8f4f 	dsb	sy
 80160f8:	617b      	str	r3, [r7, #20]
}
 80160fa:	bf00      	nop
 80160fc:	e7fe      	b.n	80160fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016100:	699a      	ldr	r2, [r3, #24]
 8016102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016104:	18d1      	adds	r1, r2, r3
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801610a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801610c:	f7ff ff06 	bl	8015f1c <prvInsertTimerInActiveList>
					break;
 8016110:	e015      	b.n	801613e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016118:	f003 0302 	and.w	r3, r3, #2
 801611c:	2b00      	cmp	r3, #0
 801611e:	d103      	bne.n	8016128 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016122:	f000 fbfd 	bl	8016920 <vPortFree>
 8016126:	e00a      	b.n	801613e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801612e:	f023 0301 	bic.w	r3, r3, #1
 8016132:	b2da      	uxtb	r2, r3
 8016134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801613a:	e000      	b.n	801613e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801613c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801613e:	4b08      	ldr	r3, [pc, #32]	; (8016160 <prvProcessReceivedCommands+0x1c0>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	1d39      	adds	r1, r7, #4
 8016144:	2200      	movs	r2, #0
 8016146:	4618      	mov	r0, r3
 8016148:	f7fe f9be 	bl	80144c8 <xQueueReceive>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	f47f af2a 	bne.w	8015fa8 <prvProcessReceivedCommands+0x8>
	}
}
 8016154:	bf00      	nop
 8016156:	bf00      	nop
 8016158:	3730      	adds	r7, #48	; 0x30
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	24001d14 	.word	0x24001d14

08016164 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801616a:	e048      	b.n	80161fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801616c:	4b2d      	ldr	r3, [pc, #180]	; (8016224 <prvSwitchTimerLists+0xc0>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	68db      	ldr	r3, [r3, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016176:	4b2b      	ldr	r3, [pc, #172]	; (8016224 <prvSwitchTimerLists+0xc0>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	68db      	ldr	r3, [r3, #12]
 801617e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	3304      	adds	r3, #4
 8016184:	4618      	mov	r0, r3
 8016186:	f7fd fe9d 	bl	8013ec4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6a1b      	ldr	r3, [r3, #32]
 801618e:	68f8      	ldr	r0, [r7, #12]
 8016190:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016198:	f003 0304 	and.w	r3, r3, #4
 801619c:	2b00      	cmp	r3, #0
 801619e:	d02e      	beq.n	80161fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	699b      	ldr	r3, [r3, #24]
 80161a4:	693a      	ldr	r2, [r7, #16]
 80161a6:	4413      	add	r3, r2
 80161a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d90e      	bls.n	80161d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161be:	4b19      	ldr	r3, [pc, #100]	; (8016224 <prvSwitchTimerLists+0xc0>)
 80161c0:	681a      	ldr	r2, [r3, #0]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	3304      	adds	r3, #4
 80161c6:	4619      	mov	r1, r3
 80161c8:	4610      	mov	r0, r2
 80161ca:	f7fd fe42 	bl	8013e52 <vListInsert>
 80161ce:	e016      	b.n	80161fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161d0:	2300      	movs	r3, #0
 80161d2:	9300      	str	r3, [sp, #0]
 80161d4:	2300      	movs	r3, #0
 80161d6:	693a      	ldr	r2, [r7, #16]
 80161d8:	2100      	movs	r1, #0
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	f7ff fd60 	bl	8015ca0 <xTimerGenericCommand>
 80161e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d10a      	bne.n	80161fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80161e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	603b      	str	r3, [r7, #0]
}
 80161fa:	bf00      	nop
 80161fc:	e7fe      	b.n	80161fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80161fe:	4b09      	ldr	r3, [pc, #36]	; (8016224 <prvSwitchTimerLists+0xc0>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d1b1      	bne.n	801616c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016208:	4b06      	ldr	r3, [pc, #24]	; (8016224 <prvSwitchTimerLists+0xc0>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801620e:	4b06      	ldr	r3, [pc, #24]	; (8016228 <prvSwitchTimerLists+0xc4>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	4a04      	ldr	r2, [pc, #16]	; (8016224 <prvSwitchTimerLists+0xc0>)
 8016214:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016216:	4a04      	ldr	r2, [pc, #16]	; (8016228 <prvSwitchTimerLists+0xc4>)
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	6013      	str	r3, [r2, #0]
}
 801621c:	bf00      	nop
 801621e:	3718      	adds	r7, #24
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	24001d0c 	.word	0x24001d0c
 8016228:	24001d10 	.word	0x24001d10

0801622c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016232:	f000 f987 	bl	8016544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016236:	4b15      	ldr	r3, [pc, #84]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d120      	bne.n	8016280 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801623e:	4814      	ldr	r0, [pc, #80]	; (8016290 <prvCheckForValidListAndQueue+0x64>)
 8016240:	f7fd fdb6 	bl	8013db0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016244:	4813      	ldr	r0, [pc, #76]	; (8016294 <prvCheckForValidListAndQueue+0x68>)
 8016246:	f7fd fdb3 	bl	8013db0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801624a:	4b13      	ldr	r3, [pc, #76]	; (8016298 <prvCheckForValidListAndQueue+0x6c>)
 801624c:	4a10      	ldr	r2, [pc, #64]	; (8016290 <prvCheckForValidListAndQueue+0x64>)
 801624e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016250:	4b12      	ldr	r3, [pc, #72]	; (801629c <prvCheckForValidListAndQueue+0x70>)
 8016252:	4a10      	ldr	r2, [pc, #64]	; (8016294 <prvCheckForValidListAndQueue+0x68>)
 8016254:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016256:	2300      	movs	r3, #0
 8016258:	9300      	str	r3, [sp, #0]
 801625a:	4b11      	ldr	r3, [pc, #68]	; (80162a0 <prvCheckForValidListAndQueue+0x74>)
 801625c:	4a11      	ldr	r2, [pc, #68]	; (80162a4 <prvCheckForValidListAndQueue+0x78>)
 801625e:	2110      	movs	r1, #16
 8016260:	200a      	movs	r0, #10
 8016262:	f7fd fec1 	bl	8013fe8 <xQueueGenericCreateStatic>
 8016266:	4603      	mov	r3, r0
 8016268:	4a08      	ldr	r2, [pc, #32]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 801626a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801626c:	4b07      	ldr	r3, [pc, #28]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d005      	beq.n	8016280 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016274:	4b05      	ldr	r3, [pc, #20]	; (801628c <prvCheckForValidListAndQueue+0x60>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	490b      	ldr	r1, [pc, #44]	; (80162a8 <prvCheckForValidListAndQueue+0x7c>)
 801627a:	4618      	mov	r0, r3
 801627c:	f7fe fb94 	bl	80149a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016280:	f000 f990 	bl	80165a4 <vPortExitCritical>
}
 8016284:	bf00      	nop
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	24001d14 	.word	0x24001d14
 8016290:	24001ce4 	.word	0x24001ce4
 8016294:	24001cf8 	.word	0x24001cf8
 8016298:	24001d0c 	.word	0x24001d0c
 801629c:	24001d10 	.word	0x24001d10
 80162a0:	24001dc0 	.word	0x24001dc0
 80162a4:	24001d20 	.word	0x24001d20
 80162a8:	08017894 	.word	0x08017894

080162ac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
 80162b8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80162ba:	f06f 0301 	mvn.w	r3, #1
 80162be:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80162c4:	68bb      	ldr	r3, [r7, #8]
 80162c6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162cc:	4b06      	ldr	r3, [pc, #24]	; (80162e8 <xTimerPendFunctionCallFromISR+0x3c>)
 80162ce:	6818      	ldr	r0, [r3, #0]
 80162d0:	f107 0114 	add.w	r1, r7, #20
 80162d4:	2300      	movs	r3, #0
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	f7fe f85a 	bl	8014390 <xQueueGenericSendFromISR>
 80162dc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80162de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3728      	adds	r7, #40	; 0x28
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	24001d14 	.word	0x24001d14

080162ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80162ec:	b480      	push	{r7}
 80162ee:	b085      	sub	sp, #20
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	3b04      	subs	r3, #4
 80162fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	3b04      	subs	r3, #4
 801630a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	f023 0201 	bic.w	r2, r3, #1
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	3b04      	subs	r3, #4
 801631a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801631c:	4a0c      	ldr	r2, [pc, #48]	; (8016350 <pxPortInitialiseStack+0x64>)
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	3b14      	subs	r3, #20
 8016326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016328:	687a      	ldr	r2, [r7, #4]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	3b04      	subs	r3, #4
 8016332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f06f 0202 	mvn.w	r2, #2
 801633a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	3b20      	subs	r3, #32
 8016340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016342:	68fb      	ldr	r3, [r7, #12]
}
 8016344:	4618      	mov	r0, r3
 8016346:	3714      	adds	r7, #20
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr
 8016350:	08016355 	.word	0x08016355

08016354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016354:	b480      	push	{r7}
 8016356:	b085      	sub	sp, #20
 8016358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801635a:	2300      	movs	r3, #0
 801635c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801635e:	4b12      	ldr	r3, [pc, #72]	; (80163a8 <prvTaskExitError+0x54>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016366:	d00a      	beq.n	801637e <prvTaskExitError+0x2a>
	__asm volatile
 8016368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801636c:	f383 8811 	msr	BASEPRI, r3
 8016370:	f3bf 8f6f 	isb	sy
 8016374:	f3bf 8f4f 	dsb	sy
 8016378:	60fb      	str	r3, [r7, #12]
}
 801637a:	bf00      	nop
 801637c:	e7fe      	b.n	801637c <prvTaskExitError+0x28>
	__asm volatile
 801637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016382:	f383 8811 	msr	BASEPRI, r3
 8016386:	f3bf 8f6f 	isb	sy
 801638a:	f3bf 8f4f 	dsb	sy
 801638e:	60bb      	str	r3, [r7, #8]
}
 8016390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016392:	bf00      	nop
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d0fc      	beq.n	8016394 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801639a:	bf00      	nop
 801639c:	bf00      	nop
 801639e:	3714      	adds	r7, #20
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr
 80163a8:	2400009c 	.word	0x2400009c
 80163ac:	00000000 	.word	0x00000000

080163b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80163b0:	4b07      	ldr	r3, [pc, #28]	; (80163d0 <pxCurrentTCBConst2>)
 80163b2:	6819      	ldr	r1, [r3, #0]
 80163b4:	6808      	ldr	r0, [r1, #0]
 80163b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ba:	f380 8809 	msr	PSP, r0
 80163be:	f3bf 8f6f 	isb	sy
 80163c2:	f04f 0000 	mov.w	r0, #0
 80163c6:	f380 8811 	msr	BASEPRI, r0
 80163ca:	4770      	bx	lr
 80163cc:	f3af 8000 	nop.w

080163d0 <pxCurrentTCBConst2>:
 80163d0:	240017e4 	.word	0x240017e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80163d4:	bf00      	nop
 80163d6:	bf00      	nop

080163d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80163d8:	4808      	ldr	r0, [pc, #32]	; (80163fc <prvPortStartFirstTask+0x24>)
 80163da:	6800      	ldr	r0, [r0, #0]
 80163dc:	6800      	ldr	r0, [r0, #0]
 80163de:	f380 8808 	msr	MSP, r0
 80163e2:	f04f 0000 	mov.w	r0, #0
 80163e6:	f380 8814 	msr	CONTROL, r0
 80163ea:	b662      	cpsie	i
 80163ec:	b661      	cpsie	f
 80163ee:	f3bf 8f4f 	dsb	sy
 80163f2:	f3bf 8f6f 	isb	sy
 80163f6:	df00      	svc	0
 80163f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80163fa:	bf00      	nop
 80163fc:	e000ed08 	.word	0xe000ed08

08016400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b086      	sub	sp, #24
 8016404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016406:	4b46      	ldr	r3, [pc, #280]	; (8016520 <xPortStartScheduler+0x120>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4a46      	ldr	r2, [pc, #280]	; (8016524 <xPortStartScheduler+0x124>)
 801640c:	4293      	cmp	r3, r2
 801640e:	d10a      	bne.n	8016426 <xPortStartScheduler+0x26>
	__asm volatile
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	613b      	str	r3, [r7, #16]
}
 8016422:	bf00      	nop
 8016424:	e7fe      	b.n	8016424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016426:	4b3e      	ldr	r3, [pc, #248]	; (8016520 <xPortStartScheduler+0x120>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a3f      	ldr	r2, [pc, #252]	; (8016528 <xPortStartScheduler+0x128>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d10a      	bne.n	8016446 <xPortStartScheduler+0x46>
	__asm volatile
 8016430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016434:	f383 8811 	msr	BASEPRI, r3
 8016438:	f3bf 8f6f 	isb	sy
 801643c:	f3bf 8f4f 	dsb	sy
 8016440:	60fb      	str	r3, [r7, #12]
}
 8016442:	bf00      	nop
 8016444:	e7fe      	b.n	8016444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016446:	4b39      	ldr	r3, [pc, #228]	; (801652c <xPortStartScheduler+0x12c>)
 8016448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801644a:	697b      	ldr	r3, [r7, #20]
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	b2db      	uxtb	r3, r3
 8016450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	22ff      	movs	r2, #255	; 0xff
 8016456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	b2db      	uxtb	r3, r3
 801645e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016460:	78fb      	ldrb	r3, [r7, #3]
 8016462:	b2db      	uxtb	r3, r3
 8016464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016468:	b2da      	uxtb	r2, r3
 801646a:	4b31      	ldr	r3, [pc, #196]	; (8016530 <xPortStartScheduler+0x130>)
 801646c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801646e:	4b31      	ldr	r3, [pc, #196]	; (8016534 <xPortStartScheduler+0x134>)
 8016470:	2207      	movs	r2, #7
 8016472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016474:	e009      	b.n	801648a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016476:	4b2f      	ldr	r3, [pc, #188]	; (8016534 <xPortStartScheduler+0x134>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	3b01      	subs	r3, #1
 801647c:	4a2d      	ldr	r2, [pc, #180]	; (8016534 <xPortStartScheduler+0x134>)
 801647e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016480:	78fb      	ldrb	r3, [r7, #3]
 8016482:	b2db      	uxtb	r3, r3
 8016484:	005b      	lsls	r3, r3, #1
 8016486:	b2db      	uxtb	r3, r3
 8016488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801648a:	78fb      	ldrb	r3, [r7, #3]
 801648c:	b2db      	uxtb	r3, r3
 801648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016492:	2b80      	cmp	r3, #128	; 0x80
 8016494:	d0ef      	beq.n	8016476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016496:	4b27      	ldr	r3, [pc, #156]	; (8016534 <xPortStartScheduler+0x134>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	f1c3 0307 	rsb	r3, r3, #7
 801649e:	2b04      	cmp	r3, #4
 80164a0:	d00a      	beq.n	80164b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80164a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a6:	f383 8811 	msr	BASEPRI, r3
 80164aa:	f3bf 8f6f 	isb	sy
 80164ae:	f3bf 8f4f 	dsb	sy
 80164b2:	60bb      	str	r3, [r7, #8]
}
 80164b4:	bf00      	nop
 80164b6:	e7fe      	b.n	80164b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80164b8:	4b1e      	ldr	r3, [pc, #120]	; (8016534 <xPortStartScheduler+0x134>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	021b      	lsls	r3, r3, #8
 80164be:	4a1d      	ldr	r2, [pc, #116]	; (8016534 <xPortStartScheduler+0x134>)
 80164c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80164c2:	4b1c      	ldr	r3, [pc, #112]	; (8016534 <xPortStartScheduler+0x134>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80164ca:	4a1a      	ldr	r2, [pc, #104]	; (8016534 <xPortStartScheduler+0x134>)
 80164cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80164d6:	4b18      	ldr	r3, [pc, #96]	; (8016538 <xPortStartScheduler+0x138>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4a17      	ldr	r2, [pc, #92]	; (8016538 <xPortStartScheduler+0x138>)
 80164dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80164e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80164e2:	4b15      	ldr	r3, [pc, #84]	; (8016538 <xPortStartScheduler+0x138>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	4a14      	ldr	r2, [pc, #80]	; (8016538 <xPortStartScheduler+0x138>)
 80164e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80164ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80164ee:	f000 f8dd 	bl	80166ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80164f2:	4b12      	ldr	r3, [pc, #72]	; (801653c <xPortStartScheduler+0x13c>)
 80164f4:	2200      	movs	r2, #0
 80164f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80164f8:	f000 f8fc 	bl	80166f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80164fc:	4b10      	ldr	r3, [pc, #64]	; (8016540 <xPortStartScheduler+0x140>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a0f      	ldr	r2, [pc, #60]	; (8016540 <xPortStartScheduler+0x140>)
 8016502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016508:	f7ff ff66 	bl	80163d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801650c:	f7fe ff7e 	bl	801540c <vTaskSwitchContext>
	prvTaskExitError();
 8016510:	f7ff ff20 	bl	8016354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016514:	2300      	movs	r3, #0
}
 8016516:	4618      	mov	r0, r3
 8016518:	3718      	adds	r7, #24
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	e000ed00 	.word	0xe000ed00
 8016524:	410fc271 	.word	0x410fc271
 8016528:	410fc270 	.word	0x410fc270
 801652c:	e000e400 	.word	0xe000e400
 8016530:	24001e10 	.word	0x24001e10
 8016534:	24001e14 	.word	0x24001e14
 8016538:	e000ed20 	.word	0xe000ed20
 801653c:	2400009c 	.word	0x2400009c
 8016540:	e000ef34 	.word	0xe000ef34

08016544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
	__asm volatile
 801654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654e:	f383 8811 	msr	BASEPRI, r3
 8016552:	f3bf 8f6f 	isb	sy
 8016556:	f3bf 8f4f 	dsb	sy
 801655a:	607b      	str	r3, [r7, #4]
}
 801655c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801655e:	4b0f      	ldr	r3, [pc, #60]	; (801659c <vPortEnterCritical+0x58>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	3301      	adds	r3, #1
 8016564:	4a0d      	ldr	r2, [pc, #52]	; (801659c <vPortEnterCritical+0x58>)
 8016566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016568:	4b0c      	ldr	r3, [pc, #48]	; (801659c <vPortEnterCritical+0x58>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d10f      	bne.n	8016590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016570:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <vPortEnterCritical+0x5c>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	b2db      	uxtb	r3, r3
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00a      	beq.n	8016590 <vPortEnterCritical+0x4c>
	__asm volatile
 801657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801657e:	f383 8811 	msr	BASEPRI, r3
 8016582:	f3bf 8f6f 	isb	sy
 8016586:	f3bf 8f4f 	dsb	sy
 801658a:	603b      	str	r3, [r7, #0]
}
 801658c:	bf00      	nop
 801658e:	e7fe      	b.n	801658e <vPortEnterCritical+0x4a>
	}
}
 8016590:	bf00      	nop
 8016592:	370c      	adds	r7, #12
 8016594:	46bd      	mov	sp, r7
 8016596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659a:	4770      	bx	lr
 801659c:	2400009c 	.word	0x2400009c
 80165a0:	e000ed04 	.word	0xe000ed04

080165a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80165aa:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <vPortExitCritical+0x50>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10a      	bne.n	80165c8 <vPortExitCritical+0x24>
	__asm volatile
 80165b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b6:	f383 8811 	msr	BASEPRI, r3
 80165ba:	f3bf 8f6f 	isb	sy
 80165be:	f3bf 8f4f 	dsb	sy
 80165c2:	607b      	str	r3, [r7, #4]
}
 80165c4:	bf00      	nop
 80165c6:	e7fe      	b.n	80165c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80165c8:	4b0a      	ldr	r3, [pc, #40]	; (80165f4 <vPortExitCritical+0x50>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	4a09      	ldr	r2, [pc, #36]	; (80165f4 <vPortExitCritical+0x50>)
 80165d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80165d2:	4b08      	ldr	r3, [pc, #32]	; (80165f4 <vPortExitCritical+0x50>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d105      	bne.n	80165e6 <vPortExitCritical+0x42>
 80165da:	2300      	movs	r3, #0
 80165dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	f383 8811 	msr	BASEPRI, r3
}
 80165e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80165e6:	bf00      	nop
 80165e8:	370c      	adds	r7, #12
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr
 80165f2:	bf00      	nop
 80165f4:	2400009c 	.word	0x2400009c
	...

08016600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016600:	f3ef 8009 	mrs	r0, PSP
 8016604:	f3bf 8f6f 	isb	sy
 8016608:	4b15      	ldr	r3, [pc, #84]	; (8016660 <pxCurrentTCBConst>)
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	f01e 0f10 	tst.w	lr, #16
 8016610:	bf08      	it	eq
 8016612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661a:	6010      	str	r0, [r2, #0]
 801661c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016624:	f380 8811 	msr	BASEPRI, r0
 8016628:	f3bf 8f4f 	dsb	sy
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f7fe feec 	bl	801540c <vTaskSwitchContext>
 8016634:	f04f 0000 	mov.w	r0, #0
 8016638:	f380 8811 	msr	BASEPRI, r0
 801663c:	bc09      	pop	{r0, r3}
 801663e:	6819      	ldr	r1, [r3, #0]
 8016640:	6808      	ldr	r0, [r1, #0]
 8016642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016646:	f01e 0f10 	tst.w	lr, #16
 801664a:	bf08      	it	eq
 801664c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016650:	f380 8809 	msr	PSP, r0
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	f3af 8000 	nop.w

08016660 <pxCurrentTCBConst>:
 8016660:	240017e4 	.word	0x240017e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016664:	bf00      	nop
 8016666:	bf00      	nop

08016668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
	__asm volatile
 801666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016672:	f383 8811 	msr	BASEPRI, r3
 8016676:	f3bf 8f6f 	isb	sy
 801667a:	f3bf 8f4f 	dsb	sy
 801667e:	607b      	str	r3, [r7, #4]
}
 8016680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016682:	f7fe fe01 	bl	8015288 <xTaskIncrementTick>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d003      	beq.n	8016694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801668c:	4b06      	ldr	r3, [pc, #24]	; (80166a8 <xPortSysTickHandler+0x40>)
 801668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	2300      	movs	r3, #0
 8016696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	f383 8811 	msr	BASEPRI, r3
}
 801669e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80166a0:	bf00      	nop
 80166a2:	3708      	adds	r7, #8
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	e000ed04 	.word	0xe000ed04

080166ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80166ac:	b480      	push	{r7}
 80166ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80166b0:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <vPortSetupTimerInterrupt+0x34>)
 80166b2:	2200      	movs	r2, #0
 80166b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80166b6:	4b0b      	ldr	r3, [pc, #44]	; (80166e4 <vPortSetupTimerInterrupt+0x38>)
 80166b8:	2200      	movs	r2, #0
 80166ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80166bc:	4b0a      	ldr	r3, [pc, #40]	; (80166e8 <vPortSetupTimerInterrupt+0x3c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4a0a      	ldr	r2, [pc, #40]	; (80166ec <vPortSetupTimerInterrupt+0x40>)
 80166c2:	fba2 2303 	umull	r2, r3, r2, r3
 80166c6:	099b      	lsrs	r3, r3, #6
 80166c8:	4a09      	ldr	r2, [pc, #36]	; (80166f0 <vPortSetupTimerInterrupt+0x44>)
 80166ca:	3b01      	subs	r3, #1
 80166cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80166ce:	4b04      	ldr	r3, [pc, #16]	; (80166e0 <vPortSetupTimerInterrupt+0x34>)
 80166d0:	2207      	movs	r2, #7
 80166d2:	601a      	str	r2, [r3, #0]
}
 80166d4:	bf00      	nop
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop
 80166e0:	e000e010 	.word	0xe000e010
 80166e4:	e000e018 	.word	0xe000e018
 80166e8:	2400008c 	.word	0x2400008c
 80166ec:	10624dd3 	.word	0x10624dd3
 80166f0:	e000e014 	.word	0xe000e014

080166f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80166f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016704 <vPortEnableVFP+0x10>
 80166f8:	6801      	ldr	r1, [r0, #0]
 80166fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80166fe:	6001      	str	r1, [r0, #0]
 8016700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016702:	bf00      	nop
 8016704:	e000ed88 	.word	0xe000ed88

08016708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801670e:	f3ef 8305 	mrs	r3, IPSR
 8016712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2b0f      	cmp	r3, #15
 8016718:	d914      	bls.n	8016744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801671a:	4a17      	ldr	r2, [pc, #92]	; (8016778 <vPortValidateInterruptPriority+0x70>)
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	4413      	add	r3, r2
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016724:	4b15      	ldr	r3, [pc, #84]	; (801677c <vPortValidateInterruptPriority+0x74>)
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	7afa      	ldrb	r2, [r7, #11]
 801672a:	429a      	cmp	r2, r3
 801672c:	d20a      	bcs.n	8016744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016732:	f383 8811 	msr	BASEPRI, r3
 8016736:	f3bf 8f6f 	isb	sy
 801673a:	f3bf 8f4f 	dsb	sy
 801673e:	607b      	str	r3, [r7, #4]
}
 8016740:	bf00      	nop
 8016742:	e7fe      	b.n	8016742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016744:	4b0e      	ldr	r3, [pc, #56]	; (8016780 <vPortValidateInterruptPriority+0x78>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801674c:	4b0d      	ldr	r3, [pc, #52]	; (8016784 <vPortValidateInterruptPriority+0x7c>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	429a      	cmp	r2, r3
 8016752:	d90a      	bls.n	801676a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016758:	f383 8811 	msr	BASEPRI, r3
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f3bf 8f4f 	dsb	sy
 8016764:	603b      	str	r3, [r7, #0]
}
 8016766:	bf00      	nop
 8016768:	e7fe      	b.n	8016768 <vPortValidateInterruptPriority+0x60>
	}
 801676a:	bf00      	nop
 801676c:	3714      	adds	r7, #20
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	e000e3f0 	.word	0xe000e3f0
 801677c:	24001e10 	.word	0x24001e10
 8016780:	e000ed0c 	.word	0xe000ed0c
 8016784:	24001e14 	.word	0x24001e14

08016788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b08a      	sub	sp, #40	; 0x28
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016790:	2300      	movs	r3, #0
 8016792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016794:	f7fe fcbc 	bl	8015110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016798:	4b5b      	ldr	r3, [pc, #364]	; (8016908 <pvPortMalloc+0x180>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d101      	bne.n	80167a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80167a0:	f000 f920 	bl	80169e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80167a4:	4b59      	ldr	r3, [pc, #356]	; (801690c <pvPortMalloc+0x184>)
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4013      	ands	r3, r2
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f040 8093 	bne.w	80168d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d01d      	beq.n	80167f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80167b8:	2208      	movs	r2, #8
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4413      	add	r3, r2
 80167be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f003 0307 	and.w	r3, r3, #7
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d014      	beq.n	80167f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f023 0307 	bic.w	r3, r3, #7
 80167d0:	3308      	adds	r3, #8
 80167d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f003 0307 	and.w	r3, r3, #7
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d00a      	beq.n	80167f4 <pvPortMalloc+0x6c>
	__asm volatile
 80167de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e2:	f383 8811 	msr	BASEPRI, r3
 80167e6:	f3bf 8f6f 	isb	sy
 80167ea:	f3bf 8f4f 	dsb	sy
 80167ee:	617b      	str	r3, [r7, #20]
}
 80167f0:	bf00      	nop
 80167f2:	e7fe      	b.n	80167f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d06e      	beq.n	80168d8 <pvPortMalloc+0x150>
 80167fa:	4b45      	ldr	r3, [pc, #276]	; (8016910 <pvPortMalloc+0x188>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	429a      	cmp	r2, r3
 8016802:	d869      	bhi.n	80168d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016804:	4b43      	ldr	r3, [pc, #268]	; (8016914 <pvPortMalloc+0x18c>)
 8016806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016808:	4b42      	ldr	r3, [pc, #264]	; (8016914 <pvPortMalloc+0x18c>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801680e:	e004      	b.n	801681a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	429a      	cmp	r2, r3
 8016822:	d903      	bls.n	801682c <pvPortMalloc+0xa4>
 8016824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d1f1      	bne.n	8016810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801682c:	4b36      	ldr	r3, [pc, #216]	; (8016908 <pvPortMalloc+0x180>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016832:	429a      	cmp	r2, r3
 8016834:	d050      	beq.n	80168d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016836:	6a3b      	ldr	r3, [r7, #32]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2208      	movs	r2, #8
 801683c:	4413      	add	r3, r2
 801683e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016842:	681a      	ldr	r2, [r3, #0]
 8016844:	6a3b      	ldr	r3, [r7, #32]
 8016846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684a:	685a      	ldr	r2, [r3, #4]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	1ad2      	subs	r2, r2, r3
 8016850:	2308      	movs	r3, #8
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	429a      	cmp	r2, r3
 8016856:	d91f      	bls.n	8016898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4413      	add	r3, r2
 801685e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	f003 0307 	and.w	r3, r3, #7
 8016866:	2b00      	cmp	r3, #0
 8016868:	d00a      	beq.n	8016880 <pvPortMalloc+0xf8>
	__asm volatile
 801686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801686e:	f383 8811 	msr	BASEPRI, r3
 8016872:	f3bf 8f6f 	isb	sy
 8016876:	f3bf 8f4f 	dsb	sy
 801687a:	613b      	str	r3, [r7, #16]
}
 801687c:	bf00      	nop
 801687e:	e7fe      	b.n	801687e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016882:	685a      	ldr	r2, [r3, #4]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	1ad2      	subs	r2, r2, r3
 8016888:	69bb      	ldr	r3, [r7, #24]
 801688a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016892:	69b8      	ldr	r0, [r7, #24]
 8016894:	f000 f908 	bl	8016aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016898:	4b1d      	ldr	r3, [pc, #116]	; (8016910 <pvPortMalloc+0x188>)
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	4a1b      	ldr	r2, [pc, #108]	; (8016910 <pvPortMalloc+0x188>)
 80168a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80168a6:	4b1a      	ldr	r3, [pc, #104]	; (8016910 <pvPortMalloc+0x188>)
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	4b1b      	ldr	r3, [pc, #108]	; (8016918 <pvPortMalloc+0x190>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d203      	bcs.n	80168ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80168b2:	4b17      	ldr	r3, [pc, #92]	; (8016910 <pvPortMalloc+0x188>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	4a18      	ldr	r2, [pc, #96]	; (8016918 <pvPortMalloc+0x190>)
 80168b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80168ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168bc:	685a      	ldr	r2, [r3, #4]
 80168be:	4b13      	ldr	r3, [pc, #76]	; (801690c <pvPortMalloc+0x184>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	431a      	orrs	r2, r3
 80168c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	2200      	movs	r2, #0
 80168cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80168ce:	4b13      	ldr	r3, [pc, #76]	; (801691c <pvPortMalloc+0x194>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	3301      	adds	r3, #1
 80168d4:	4a11      	ldr	r2, [pc, #68]	; (801691c <pvPortMalloc+0x194>)
 80168d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80168d8:	f7fe fc28 	bl	801512c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	f003 0307 	and.w	r3, r3, #7
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00a      	beq.n	80168fc <pvPortMalloc+0x174>
	__asm volatile
 80168e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	60fb      	str	r3, [r7, #12]
}
 80168f8:	bf00      	nop
 80168fa:	e7fe      	b.n	80168fa <pvPortMalloc+0x172>
	return pvReturn;
 80168fc:	69fb      	ldr	r3, [r7, #28]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3728      	adds	r7, #40	; 0x28
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	24005a20 	.word	0x24005a20
 801690c:	24005a34 	.word	0x24005a34
 8016910:	24005a24 	.word	0x24005a24
 8016914:	24005a18 	.word	0x24005a18
 8016918:	24005a28 	.word	0x24005a28
 801691c:	24005a2c 	.word	0x24005a2c

08016920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d04d      	beq.n	80169ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016932:	2308      	movs	r3, #8
 8016934:	425b      	negs	r3, r3
 8016936:	697a      	ldr	r2, [r7, #20]
 8016938:	4413      	add	r3, r2
 801693a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	685a      	ldr	r2, [r3, #4]
 8016944:	4b24      	ldr	r3, [pc, #144]	; (80169d8 <vPortFree+0xb8>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4013      	ands	r3, r2
 801694a:	2b00      	cmp	r3, #0
 801694c:	d10a      	bne.n	8016964 <vPortFree+0x44>
	__asm volatile
 801694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016952:	f383 8811 	msr	BASEPRI, r3
 8016956:	f3bf 8f6f 	isb	sy
 801695a:	f3bf 8f4f 	dsb	sy
 801695e:	60fb      	str	r3, [r7, #12]
}
 8016960:	bf00      	nop
 8016962:	e7fe      	b.n	8016962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00a      	beq.n	8016982 <vPortFree+0x62>
	__asm volatile
 801696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016970:	f383 8811 	msr	BASEPRI, r3
 8016974:	f3bf 8f6f 	isb	sy
 8016978:	f3bf 8f4f 	dsb	sy
 801697c:	60bb      	str	r3, [r7, #8]
}
 801697e:	bf00      	nop
 8016980:	e7fe      	b.n	8016980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016982:	693b      	ldr	r3, [r7, #16]
 8016984:	685a      	ldr	r2, [r3, #4]
 8016986:	4b14      	ldr	r3, [pc, #80]	; (80169d8 <vPortFree+0xb8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4013      	ands	r3, r2
 801698c:	2b00      	cmp	r3, #0
 801698e:	d01e      	beq.n	80169ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d11a      	bne.n	80169ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <vPortFree+0xb8>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	43db      	mvns	r3, r3
 80169a2:	401a      	ands	r2, r3
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80169a8:	f7fe fbb2 	bl	8015110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	685a      	ldr	r2, [r3, #4]
 80169b0:	4b0a      	ldr	r3, [pc, #40]	; (80169dc <vPortFree+0xbc>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4413      	add	r3, r2
 80169b6:	4a09      	ldr	r2, [pc, #36]	; (80169dc <vPortFree+0xbc>)
 80169b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80169ba:	6938      	ldr	r0, [r7, #16]
 80169bc:	f000 f874 	bl	8016aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80169c0:	4b07      	ldr	r3, [pc, #28]	; (80169e0 <vPortFree+0xc0>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	3301      	adds	r3, #1
 80169c6:	4a06      	ldr	r2, [pc, #24]	; (80169e0 <vPortFree+0xc0>)
 80169c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80169ca:	f7fe fbaf 	bl	801512c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80169ce:	bf00      	nop
 80169d0:	3718      	adds	r7, #24
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	24005a34 	.word	0x24005a34
 80169dc:	24005a24 	.word	0x24005a24
 80169e0:	24005a30 	.word	0x24005a30

080169e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80169ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80169ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80169f0:	4b27      	ldr	r3, [pc, #156]	; (8016a90 <prvHeapInit+0xac>)
 80169f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d00c      	beq.n	8016a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	3307      	adds	r3, #7
 8016a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f023 0307 	bic.w	r3, r3, #7
 8016a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016a0c:	68ba      	ldr	r2, [r7, #8]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	4a1f      	ldr	r2, [pc, #124]	; (8016a90 <prvHeapInit+0xac>)
 8016a14:	4413      	add	r3, r2
 8016a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016a1c:	4a1d      	ldr	r2, [pc, #116]	; (8016a94 <prvHeapInit+0xb0>)
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016a22:	4b1c      	ldr	r3, [pc, #112]	; (8016a94 <prvHeapInit+0xb0>)
 8016a24:	2200      	movs	r2, #0
 8016a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	68ba      	ldr	r2, [r7, #8]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016a30:	2208      	movs	r2, #8
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	f023 0307 	bic.w	r3, r3, #7
 8016a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	4a15      	ldr	r2, [pc, #84]	; (8016a98 <prvHeapInit+0xb4>)
 8016a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016a46:	4b14      	ldr	r3, [pc, #80]	; (8016a98 <prvHeapInit+0xb4>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016a4e:	4b12      	ldr	r3, [pc, #72]	; (8016a98 <prvHeapInit+0xb4>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2200      	movs	r2, #0
 8016a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	68fa      	ldr	r2, [r7, #12]
 8016a5e:	1ad2      	subs	r2, r2, r3
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016a64:	4b0c      	ldr	r3, [pc, #48]	; (8016a98 <prvHeapInit+0xb4>)
 8016a66:	681a      	ldr	r2, [r3, #0]
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	4a0a      	ldr	r2, [pc, #40]	; (8016a9c <prvHeapInit+0xb8>)
 8016a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	685b      	ldr	r3, [r3, #4]
 8016a78:	4a09      	ldr	r2, [pc, #36]	; (8016aa0 <prvHeapInit+0xbc>)
 8016a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016a7c:	4b09      	ldr	r3, [pc, #36]	; (8016aa4 <prvHeapInit+0xc0>)
 8016a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016a82:	601a      	str	r2, [r3, #0]
}
 8016a84:	bf00      	nop
 8016a86:	3714      	adds	r7, #20
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr
 8016a90:	24001e18 	.word	0x24001e18
 8016a94:	24005a18 	.word	0x24005a18
 8016a98:	24005a20 	.word	0x24005a20
 8016a9c:	24005a28 	.word	0x24005a28
 8016aa0:	24005a24 	.word	0x24005a24
 8016aa4:	24005a34 	.word	0x24005a34

08016aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ab0:	4b28      	ldr	r3, [pc, #160]	; (8016b54 <prvInsertBlockIntoFreeList+0xac>)
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	e002      	b.n	8016abc <prvInsertBlockIntoFreeList+0x14>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	60fb      	str	r3, [r7, #12]
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d8f7      	bhi.n	8016ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	68ba      	ldr	r2, [r7, #8]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d108      	bne.n	8016aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	685a      	ldr	r2, [r3, #4]
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	441a      	add	r2, r3
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	68ba      	ldr	r2, [r7, #8]
 8016af4:	441a      	add	r2, r3
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d118      	bne.n	8016b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	4b15      	ldr	r3, [pc, #84]	; (8016b58 <prvInsertBlockIntoFreeList+0xb0>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d00d      	beq.n	8016b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	441a      	add	r2, r3
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	601a      	str	r2, [r3, #0]
 8016b24:	e008      	b.n	8016b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016b26:	4b0c      	ldr	r3, [pc, #48]	; (8016b58 <prvInsertBlockIntoFreeList+0xb0>)
 8016b28:	681a      	ldr	r2, [r3, #0]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	601a      	str	r2, [r3, #0]
 8016b2e:	e003      	b.n	8016b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016b38:	68fa      	ldr	r2, [r7, #12]
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d002      	beq.n	8016b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	687a      	ldr	r2, [r7, #4]
 8016b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016b46:	bf00      	nop
 8016b48:	3714      	adds	r7, #20
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b50:	4770      	bx	lr
 8016b52:	bf00      	nop
 8016b54:	24005a18 	.word	0x24005a18
 8016b58:	24005a20 	.word	0x24005a20

08016b5c <__errno>:
 8016b5c:	4b01      	ldr	r3, [pc, #4]	; (8016b64 <__errno+0x8>)
 8016b5e:	6818      	ldr	r0, [r3, #0]
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	240000a0 	.word	0x240000a0

08016b68 <__libc_init_array>:
 8016b68:	b570      	push	{r4, r5, r6, lr}
 8016b6a:	4d0d      	ldr	r5, [pc, #52]	; (8016ba0 <__libc_init_array+0x38>)
 8016b6c:	4c0d      	ldr	r4, [pc, #52]	; (8016ba4 <__libc_init_array+0x3c>)
 8016b6e:	1b64      	subs	r4, r4, r5
 8016b70:	10a4      	asrs	r4, r4, #2
 8016b72:	2600      	movs	r6, #0
 8016b74:	42a6      	cmp	r6, r4
 8016b76:	d109      	bne.n	8016b8c <__libc_init_array+0x24>
 8016b78:	4d0b      	ldr	r5, [pc, #44]	; (8016ba8 <__libc_init_array+0x40>)
 8016b7a:	4c0c      	ldr	r4, [pc, #48]	; (8016bac <__libc_init_array+0x44>)
 8016b7c:	f000 fd3c 	bl	80175f8 <_init>
 8016b80:	1b64      	subs	r4, r4, r5
 8016b82:	10a4      	asrs	r4, r4, #2
 8016b84:	2600      	movs	r6, #0
 8016b86:	42a6      	cmp	r6, r4
 8016b88:	d105      	bne.n	8016b96 <__libc_init_array+0x2e>
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b90:	4798      	blx	r3
 8016b92:	3601      	adds	r6, #1
 8016b94:	e7ee      	b.n	8016b74 <__libc_init_array+0xc>
 8016b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b9a:	4798      	blx	r3
 8016b9c:	3601      	adds	r6, #1
 8016b9e:	e7f2      	b.n	8016b86 <__libc_init_array+0x1e>
 8016ba0:	08017ab0 	.word	0x08017ab0
 8016ba4:	08017ab0 	.word	0x08017ab0
 8016ba8:	08017ab0 	.word	0x08017ab0
 8016bac:	08017ab4 	.word	0x08017ab4

08016bb0 <malloc>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <malloc+0xc>)
 8016bb2:	4601      	mov	r1, r0
 8016bb4:	6818      	ldr	r0, [r3, #0]
 8016bb6:	f000 b88d 	b.w	8016cd4 <_malloc_r>
 8016bba:	bf00      	nop
 8016bbc:	240000a0 	.word	0x240000a0

08016bc0 <free>:
 8016bc0:	4b02      	ldr	r3, [pc, #8]	; (8016bcc <free+0xc>)
 8016bc2:	4601      	mov	r1, r0
 8016bc4:	6818      	ldr	r0, [r3, #0]
 8016bc6:	f000 b819 	b.w	8016bfc <_free_r>
 8016bca:	bf00      	nop
 8016bcc:	240000a0 	.word	0x240000a0

08016bd0 <memcpy>:
 8016bd0:	440a      	add	r2, r1
 8016bd2:	4291      	cmp	r1, r2
 8016bd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016bd8:	d100      	bne.n	8016bdc <memcpy+0xc>
 8016bda:	4770      	bx	lr
 8016bdc:	b510      	push	{r4, lr}
 8016bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016be6:	4291      	cmp	r1, r2
 8016be8:	d1f9      	bne.n	8016bde <memcpy+0xe>
 8016bea:	bd10      	pop	{r4, pc}

08016bec <memset>:
 8016bec:	4402      	add	r2, r0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d100      	bne.n	8016bf6 <memset+0xa>
 8016bf4:	4770      	bx	lr
 8016bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bfa:	e7f9      	b.n	8016bf0 <memset+0x4>

08016bfc <_free_r>:
 8016bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bfe:	2900      	cmp	r1, #0
 8016c00:	d044      	beq.n	8016c8c <_free_r+0x90>
 8016c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c06:	9001      	str	r0, [sp, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8016c0e:	bfb8      	it	lt
 8016c10:	18e4      	addlt	r4, r4, r3
 8016c12:	f000 fc39 	bl	8017488 <__malloc_lock>
 8016c16:	4a1e      	ldr	r2, [pc, #120]	; (8016c90 <_free_r+0x94>)
 8016c18:	9801      	ldr	r0, [sp, #4]
 8016c1a:	6813      	ldr	r3, [r2, #0]
 8016c1c:	b933      	cbnz	r3, 8016c2c <_free_r+0x30>
 8016c1e:	6063      	str	r3, [r4, #4]
 8016c20:	6014      	str	r4, [r2, #0]
 8016c22:	b003      	add	sp, #12
 8016c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c28:	f000 bc34 	b.w	8017494 <__malloc_unlock>
 8016c2c:	42a3      	cmp	r3, r4
 8016c2e:	d908      	bls.n	8016c42 <_free_r+0x46>
 8016c30:	6825      	ldr	r5, [r4, #0]
 8016c32:	1961      	adds	r1, r4, r5
 8016c34:	428b      	cmp	r3, r1
 8016c36:	bf01      	itttt	eq
 8016c38:	6819      	ldreq	r1, [r3, #0]
 8016c3a:	685b      	ldreq	r3, [r3, #4]
 8016c3c:	1949      	addeq	r1, r1, r5
 8016c3e:	6021      	streq	r1, [r4, #0]
 8016c40:	e7ed      	b.n	8016c1e <_free_r+0x22>
 8016c42:	461a      	mov	r2, r3
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	b10b      	cbz	r3, 8016c4c <_free_r+0x50>
 8016c48:	42a3      	cmp	r3, r4
 8016c4a:	d9fa      	bls.n	8016c42 <_free_r+0x46>
 8016c4c:	6811      	ldr	r1, [r2, #0]
 8016c4e:	1855      	adds	r5, r2, r1
 8016c50:	42a5      	cmp	r5, r4
 8016c52:	d10b      	bne.n	8016c6c <_free_r+0x70>
 8016c54:	6824      	ldr	r4, [r4, #0]
 8016c56:	4421      	add	r1, r4
 8016c58:	1854      	adds	r4, r2, r1
 8016c5a:	42a3      	cmp	r3, r4
 8016c5c:	6011      	str	r1, [r2, #0]
 8016c5e:	d1e0      	bne.n	8016c22 <_free_r+0x26>
 8016c60:	681c      	ldr	r4, [r3, #0]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	6053      	str	r3, [r2, #4]
 8016c66:	4421      	add	r1, r4
 8016c68:	6011      	str	r1, [r2, #0]
 8016c6a:	e7da      	b.n	8016c22 <_free_r+0x26>
 8016c6c:	d902      	bls.n	8016c74 <_free_r+0x78>
 8016c6e:	230c      	movs	r3, #12
 8016c70:	6003      	str	r3, [r0, #0]
 8016c72:	e7d6      	b.n	8016c22 <_free_r+0x26>
 8016c74:	6825      	ldr	r5, [r4, #0]
 8016c76:	1961      	adds	r1, r4, r5
 8016c78:	428b      	cmp	r3, r1
 8016c7a:	bf04      	itt	eq
 8016c7c:	6819      	ldreq	r1, [r3, #0]
 8016c7e:	685b      	ldreq	r3, [r3, #4]
 8016c80:	6063      	str	r3, [r4, #4]
 8016c82:	bf04      	itt	eq
 8016c84:	1949      	addeq	r1, r1, r5
 8016c86:	6021      	streq	r1, [r4, #0]
 8016c88:	6054      	str	r4, [r2, #4]
 8016c8a:	e7ca      	b.n	8016c22 <_free_r+0x26>
 8016c8c:	b003      	add	sp, #12
 8016c8e:	bd30      	pop	{r4, r5, pc}
 8016c90:	24005a38 	.word	0x24005a38

08016c94 <sbrk_aligned>:
 8016c94:	b570      	push	{r4, r5, r6, lr}
 8016c96:	4e0e      	ldr	r6, [pc, #56]	; (8016cd0 <sbrk_aligned+0x3c>)
 8016c98:	460c      	mov	r4, r1
 8016c9a:	6831      	ldr	r1, [r6, #0]
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	b911      	cbnz	r1, 8016ca6 <sbrk_aligned+0x12>
 8016ca0:	f000 f902 	bl	8016ea8 <_sbrk_r>
 8016ca4:	6030      	str	r0, [r6, #0]
 8016ca6:	4621      	mov	r1, r4
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f000 f8fd 	bl	8016ea8 <_sbrk_r>
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	d00a      	beq.n	8016cc8 <sbrk_aligned+0x34>
 8016cb2:	1cc4      	adds	r4, r0, #3
 8016cb4:	f024 0403 	bic.w	r4, r4, #3
 8016cb8:	42a0      	cmp	r0, r4
 8016cba:	d007      	beq.n	8016ccc <sbrk_aligned+0x38>
 8016cbc:	1a21      	subs	r1, r4, r0
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	f000 f8f2 	bl	8016ea8 <_sbrk_r>
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	d101      	bne.n	8016ccc <sbrk_aligned+0x38>
 8016cc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016ccc:	4620      	mov	r0, r4
 8016cce:	bd70      	pop	{r4, r5, r6, pc}
 8016cd0:	24005a3c 	.word	0x24005a3c

08016cd4 <_malloc_r>:
 8016cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd8:	1ccd      	adds	r5, r1, #3
 8016cda:	f025 0503 	bic.w	r5, r5, #3
 8016cde:	3508      	adds	r5, #8
 8016ce0:	2d0c      	cmp	r5, #12
 8016ce2:	bf38      	it	cc
 8016ce4:	250c      	movcc	r5, #12
 8016ce6:	2d00      	cmp	r5, #0
 8016ce8:	4607      	mov	r7, r0
 8016cea:	db01      	blt.n	8016cf0 <_malloc_r+0x1c>
 8016cec:	42a9      	cmp	r1, r5
 8016cee:	d905      	bls.n	8016cfc <_malloc_r+0x28>
 8016cf0:	230c      	movs	r3, #12
 8016cf2:	603b      	str	r3, [r7, #0]
 8016cf4:	2600      	movs	r6, #0
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cfc:	4e2e      	ldr	r6, [pc, #184]	; (8016db8 <_malloc_r+0xe4>)
 8016cfe:	f000 fbc3 	bl	8017488 <__malloc_lock>
 8016d02:	6833      	ldr	r3, [r6, #0]
 8016d04:	461c      	mov	r4, r3
 8016d06:	bb34      	cbnz	r4, 8016d56 <_malloc_r+0x82>
 8016d08:	4629      	mov	r1, r5
 8016d0a:	4638      	mov	r0, r7
 8016d0c:	f7ff ffc2 	bl	8016c94 <sbrk_aligned>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	4604      	mov	r4, r0
 8016d14:	d14d      	bne.n	8016db2 <_malloc_r+0xde>
 8016d16:	6834      	ldr	r4, [r6, #0]
 8016d18:	4626      	mov	r6, r4
 8016d1a:	2e00      	cmp	r6, #0
 8016d1c:	d140      	bne.n	8016da0 <_malloc_r+0xcc>
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	4631      	mov	r1, r6
 8016d22:	4638      	mov	r0, r7
 8016d24:	eb04 0803 	add.w	r8, r4, r3
 8016d28:	f000 f8be 	bl	8016ea8 <_sbrk_r>
 8016d2c:	4580      	cmp	r8, r0
 8016d2e:	d13a      	bne.n	8016da6 <_malloc_r+0xd2>
 8016d30:	6821      	ldr	r1, [r4, #0]
 8016d32:	3503      	adds	r5, #3
 8016d34:	1a6d      	subs	r5, r5, r1
 8016d36:	f025 0503 	bic.w	r5, r5, #3
 8016d3a:	3508      	adds	r5, #8
 8016d3c:	2d0c      	cmp	r5, #12
 8016d3e:	bf38      	it	cc
 8016d40:	250c      	movcc	r5, #12
 8016d42:	4629      	mov	r1, r5
 8016d44:	4638      	mov	r0, r7
 8016d46:	f7ff ffa5 	bl	8016c94 <sbrk_aligned>
 8016d4a:	3001      	adds	r0, #1
 8016d4c:	d02b      	beq.n	8016da6 <_malloc_r+0xd2>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	442b      	add	r3, r5
 8016d52:	6023      	str	r3, [r4, #0]
 8016d54:	e00e      	b.n	8016d74 <_malloc_r+0xa0>
 8016d56:	6822      	ldr	r2, [r4, #0]
 8016d58:	1b52      	subs	r2, r2, r5
 8016d5a:	d41e      	bmi.n	8016d9a <_malloc_r+0xc6>
 8016d5c:	2a0b      	cmp	r2, #11
 8016d5e:	d916      	bls.n	8016d8e <_malloc_r+0xba>
 8016d60:	1961      	adds	r1, r4, r5
 8016d62:	42a3      	cmp	r3, r4
 8016d64:	6025      	str	r5, [r4, #0]
 8016d66:	bf18      	it	ne
 8016d68:	6059      	strne	r1, [r3, #4]
 8016d6a:	6863      	ldr	r3, [r4, #4]
 8016d6c:	bf08      	it	eq
 8016d6e:	6031      	streq	r1, [r6, #0]
 8016d70:	5162      	str	r2, [r4, r5]
 8016d72:	604b      	str	r3, [r1, #4]
 8016d74:	4638      	mov	r0, r7
 8016d76:	f104 060b 	add.w	r6, r4, #11
 8016d7a:	f000 fb8b 	bl	8017494 <__malloc_unlock>
 8016d7e:	f026 0607 	bic.w	r6, r6, #7
 8016d82:	1d23      	adds	r3, r4, #4
 8016d84:	1af2      	subs	r2, r6, r3
 8016d86:	d0b6      	beq.n	8016cf6 <_malloc_r+0x22>
 8016d88:	1b9b      	subs	r3, r3, r6
 8016d8a:	50a3      	str	r3, [r4, r2]
 8016d8c:	e7b3      	b.n	8016cf6 <_malloc_r+0x22>
 8016d8e:	6862      	ldr	r2, [r4, #4]
 8016d90:	42a3      	cmp	r3, r4
 8016d92:	bf0c      	ite	eq
 8016d94:	6032      	streq	r2, [r6, #0]
 8016d96:	605a      	strne	r2, [r3, #4]
 8016d98:	e7ec      	b.n	8016d74 <_malloc_r+0xa0>
 8016d9a:	4623      	mov	r3, r4
 8016d9c:	6864      	ldr	r4, [r4, #4]
 8016d9e:	e7b2      	b.n	8016d06 <_malloc_r+0x32>
 8016da0:	4634      	mov	r4, r6
 8016da2:	6876      	ldr	r6, [r6, #4]
 8016da4:	e7b9      	b.n	8016d1a <_malloc_r+0x46>
 8016da6:	230c      	movs	r3, #12
 8016da8:	603b      	str	r3, [r7, #0]
 8016daa:	4638      	mov	r0, r7
 8016dac:	f000 fb72 	bl	8017494 <__malloc_unlock>
 8016db0:	e7a1      	b.n	8016cf6 <_malloc_r+0x22>
 8016db2:	6025      	str	r5, [r4, #0]
 8016db4:	e7de      	b.n	8016d74 <_malloc_r+0xa0>
 8016db6:	bf00      	nop
 8016db8:	24005a38 	.word	0x24005a38

08016dbc <_puts_r>:
 8016dbc:	b570      	push	{r4, r5, r6, lr}
 8016dbe:	460e      	mov	r6, r1
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	b118      	cbz	r0, 8016dcc <_puts_r+0x10>
 8016dc4:	6983      	ldr	r3, [r0, #24]
 8016dc6:	b90b      	cbnz	r3, 8016dcc <_puts_r+0x10>
 8016dc8:	f000 fa58 	bl	801727c <__sinit>
 8016dcc:	69ab      	ldr	r3, [r5, #24]
 8016dce:	68ac      	ldr	r4, [r5, #8]
 8016dd0:	b913      	cbnz	r3, 8016dd8 <_puts_r+0x1c>
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f000 fa52 	bl	801727c <__sinit>
 8016dd8:	4b2c      	ldr	r3, [pc, #176]	; (8016e8c <_puts_r+0xd0>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d120      	bne.n	8016e20 <_puts_r+0x64>
 8016dde:	686c      	ldr	r4, [r5, #4]
 8016de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016de2:	07db      	lsls	r3, r3, #31
 8016de4:	d405      	bmi.n	8016df2 <_puts_r+0x36>
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	0598      	lsls	r0, r3, #22
 8016dea:	d402      	bmi.n	8016df2 <_puts_r+0x36>
 8016dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dee:	f000 fae3 	bl	80173b8 <__retarget_lock_acquire_recursive>
 8016df2:	89a3      	ldrh	r3, [r4, #12]
 8016df4:	0719      	lsls	r1, r3, #28
 8016df6:	d51d      	bpl.n	8016e34 <_puts_r+0x78>
 8016df8:	6923      	ldr	r3, [r4, #16]
 8016dfa:	b1db      	cbz	r3, 8016e34 <_puts_r+0x78>
 8016dfc:	3e01      	subs	r6, #1
 8016dfe:	68a3      	ldr	r3, [r4, #8]
 8016e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016e04:	3b01      	subs	r3, #1
 8016e06:	60a3      	str	r3, [r4, #8]
 8016e08:	bb39      	cbnz	r1, 8016e5a <_puts_r+0x9e>
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	da38      	bge.n	8016e80 <_puts_r+0xc4>
 8016e0e:	4622      	mov	r2, r4
 8016e10:	210a      	movs	r1, #10
 8016e12:	4628      	mov	r0, r5
 8016e14:	f000 f858 	bl	8016ec8 <__swbuf_r>
 8016e18:	3001      	adds	r0, #1
 8016e1a:	d011      	beq.n	8016e40 <_puts_r+0x84>
 8016e1c:	250a      	movs	r5, #10
 8016e1e:	e011      	b.n	8016e44 <_puts_r+0x88>
 8016e20:	4b1b      	ldr	r3, [pc, #108]	; (8016e90 <_puts_r+0xd4>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d101      	bne.n	8016e2a <_puts_r+0x6e>
 8016e26:	68ac      	ldr	r4, [r5, #8]
 8016e28:	e7da      	b.n	8016de0 <_puts_r+0x24>
 8016e2a:	4b1a      	ldr	r3, [pc, #104]	; (8016e94 <_puts_r+0xd8>)
 8016e2c:	429c      	cmp	r4, r3
 8016e2e:	bf08      	it	eq
 8016e30:	68ec      	ldreq	r4, [r5, #12]
 8016e32:	e7d5      	b.n	8016de0 <_puts_r+0x24>
 8016e34:	4621      	mov	r1, r4
 8016e36:	4628      	mov	r0, r5
 8016e38:	f000 f898 	bl	8016f6c <__swsetup_r>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d0dd      	beq.n	8016dfc <_puts_r+0x40>
 8016e40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e46:	07da      	lsls	r2, r3, #31
 8016e48:	d405      	bmi.n	8016e56 <_puts_r+0x9a>
 8016e4a:	89a3      	ldrh	r3, [r4, #12]
 8016e4c:	059b      	lsls	r3, r3, #22
 8016e4e:	d402      	bmi.n	8016e56 <_puts_r+0x9a>
 8016e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e52:	f000 fab2 	bl	80173ba <__retarget_lock_release_recursive>
 8016e56:	4628      	mov	r0, r5
 8016e58:	bd70      	pop	{r4, r5, r6, pc}
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	da04      	bge.n	8016e68 <_puts_r+0xac>
 8016e5e:	69a2      	ldr	r2, [r4, #24]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	dc06      	bgt.n	8016e72 <_puts_r+0xb6>
 8016e64:	290a      	cmp	r1, #10
 8016e66:	d004      	beq.n	8016e72 <_puts_r+0xb6>
 8016e68:	6823      	ldr	r3, [r4, #0]
 8016e6a:	1c5a      	adds	r2, r3, #1
 8016e6c:	6022      	str	r2, [r4, #0]
 8016e6e:	7019      	strb	r1, [r3, #0]
 8016e70:	e7c5      	b.n	8016dfe <_puts_r+0x42>
 8016e72:	4622      	mov	r2, r4
 8016e74:	4628      	mov	r0, r5
 8016e76:	f000 f827 	bl	8016ec8 <__swbuf_r>
 8016e7a:	3001      	adds	r0, #1
 8016e7c:	d1bf      	bne.n	8016dfe <_puts_r+0x42>
 8016e7e:	e7df      	b.n	8016e40 <_puts_r+0x84>
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	250a      	movs	r5, #10
 8016e84:	1c5a      	adds	r2, r3, #1
 8016e86:	6022      	str	r2, [r4, #0]
 8016e88:	701d      	strb	r5, [r3, #0]
 8016e8a:	e7db      	b.n	8016e44 <_puts_r+0x88>
 8016e8c:	08017a68 	.word	0x08017a68
 8016e90:	08017a88 	.word	0x08017a88
 8016e94:	08017a48 	.word	0x08017a48

08016e98 <puts>:
 8016e98:	4b02      	ldr	r3, [pc, #8]	; (8016ea4 <puts+0xc>)
 8016e9a:	4601      	mov	r1, r0
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	f7ff bf8d 	b.w	8016dbc <_puts_r>
 8016ea2:	bf00      	nop
 8016ea4:	240000a0 	.word	0x240000a0

08016ea8 <_sbrk_r>:
 8016ea8:	b538      	push	{r3, r4, r5, lr}
 8016eaa:	4d06      	ldr	r5, [pc, #24]	; (8016ec4 <_sbrk_r+0x1c>)
 8016eac:	2300      	movs	r3, #0
 8016eae:	4604      	mov	r4, r0
 8016eb0:	4608      	mov	r0, r1
 8016eb2:	602b      	str	r3, [r5, #0]
 8016eb4:	f7ec ffd0 	bl	8003e58 <_sbrk>
 8016eb8:	1c43      	adds	r3, r0, #1
 8016eba:	d102      	bne.n	8016ec2 <_sbrk_r+0x1a>
 8016ebc:	682b      	ldr	r3, [r5, #0]
 8016ebe:	b103      	cbz	r3, 8016ec2 <_sbrk_r+0x1a>
 8016ec0:	6023      	str	r3, [r4, #0]
 8016ec2:	bd38      	pop	{r3, r4, r5, pc}
 8016ec4:	24005a44 	.word	0x24005a44

08016ec8 <__swbuf_r>:
 8016ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eca:	460e      	mov	r6, r1
 8016ecc:	4614      	mov	r4, r2
 8016ece:	4605      	mov	r5, r0
 8016ed0:	b118      	cbz	r0, 8016eda <__swbuf_r+0x12>
 8016ed2:	6983      	ldr	r3, [r0, #24]
 8016ed4:	b90b      	cbnz	r3, 8016eda <__swbuf_r+0x12>
 8016ed6:	f000 f9d1 	bl	801727c <__sinit>
 8016eda:	4b21      	ldr	r3, [pc, #132]	; (8016f60 <__swbuf_r+0x98>)
 8016edc:	429c      	cmp	r4, r3
 8016ede:	d12b      	bne.n	8016f38 <__swbuf_r+0x70>
 8016ee0:	686c      	ldr	r4, [r5, #4]
 8016ee2:	69a3      	ldr	r3, [r4, #24]
 8016ee4:	60a3      	str	r3, [r4, #8]
 8016ee6:	89a3      	ldrh	r3, [r4, #12]
 8016ee8:	071a      	lsls	r2, r3, #28
 8016eea:	d52f      	bpl.n	8016f4c <__swbuf_r+0x84>
 8016eec:	6923      	ldr	r3, [r4, #16]
 8016eee:	b36b      	cbz	r3, 8016f4c <__swbuf_r+0x84>
 8016ef0:	6923      	ldr	r3, [r4, #16]
 8016ef2:	6820      	ldr	r0, [r4, #0]
 8016ef4:	1ac0      	subs	r0, r0, r3
 8016ef6:	6963      	ldr	r3, [r4, #20]
 8016ef8:	b2f6      	uxtb	r6, r6
 8016efa:	4283      	cmp	r3, r0
 8016efc:	4637      	mov	r7, r6
 8016efe:	dc04      	bgt.n	8016f0a <__swbuf_r+0x42>
 8016f00:	4621      	mov	r1, r4
 8016f02:	4628      	mov	r0, r5
 8016f04:	f000 f926 	bl	8017154 <_fflush_r>
 8016f08:	bb30      	cbnz	r0, 8016f58 <__swbuf_r+0x90>
 8016f0a:	68a3      	ldr	r3, [r4, #8]
 8016f0c:	3b01      	subs	r3, #1
 8016f0e:	60a3      	str	r3, [r4, #8]
 8016f10:	6823      	ldr	r3, [r4, #0]
 8016f12:	1c5a      	adds	r2, r3, #1
 8016f14:	6022      	str	r2, [r4, #0]
 8016f16:	701e      	strb	r6, [r3, #0]
 8016f18:	6963      	ldr	r3, [r4, #20]
 8016f1a:	3001      	adds	r0, #1
 8016f1c:	4283      	cmp	r3, r0
 8016f1e:	d004      	beq.n	8016f2a <__swbuf_r+0x62>
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	07db      	lsls	r3, r3, #31
 8016f24:	d506      	bpl.n	8016f34 <__swbuf_r+0x6c>
 8016f26:	2e0a      	cmp	r6, #10
 8016f28:	d104      	bne.n	8016f34 <__swbuf_r+0x6c>
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f000 f911 	bl	8017154 <_fflush_r>
 8016f32:	b988      	cbnz	r0, 8016f58 <__swbuf_r+0x90>
 8016f34:	4638      	mov	r0, r7
 8016f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f38:	4b0a      	ldr	r3, [pc, #40]	; (8016f64 <__swbuf_r+0x9c>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d101      	bne.n	8016f42 <__swbuf_r+0x7a>
 8016f3e:	68ac      	ldr	r4, [r5, #8]
 8016f40:	e7cf      	b.n	8016ee2 <__swbuf_r+0x1a>
 8016f42:	4b09      	ldr	r3, [pc, #36]	; (8016f68 <__swbuf_r+0xa0>)
 8016f44:	429c      	cmp	r4, r3
 8016f46:	bf08      	it	eq
 8016f48:	68ec      	ldreq	r4, [r5, #12]
 8016f4a:	e7ca      	b.n	8016ee2 <__swbuf_r+0x1a>
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f000 f80c 	bl	8016f6c <__swsetup_r>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d0cb      	beq.n	8016ef0 <__swbuf_r+0x28>
 8016f58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f5c:	e7ea      	b.n	8016f34 <__swbuf_r+0x6c>
 8016f5e:	bf00      	nop
 8016f60:	08017a68 	.word	0x08017a68
 8016f64:	08017a88 	.word	0x08017a88
 8016f68:	08017a48 	.word	0x08017a48

08016f6c <__swsetup_r>:
 8016f6c:	4b32      	ldr	r3, [pc, #200]	; (8017038 <__swsetup_r+0xcc>)
 8016f6e:	b570      	push	{r4, r5, r6, lr}
 8016f70:	681d      	ldr	r5, [r3, #0]
 8016f72:	4606      	mov	r6, r0
 8016f74:	460c      	mov	r4, r1
 8016f76:	b125      	cbz	r5, 8016f82 <__swsetup_r+0x16>
 8016f78:	69ab      	ldr	r3, [r5, #24]
 8016f7a:	b913      	cbnz	r3, 8016f82 <__swsetup_r+0x16>
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f000 f97d 	bl	801727c <__sinit>
 8016f82:	4b2e      	ldr	r3, [pc, #184]	; (801703c <__swsetup_r+0xd0>)
 8016f84:	429c      	cmp	r4, r3
 8016f86:	d10f      	bne.n	8016fa8 <__swsetup_r+0x3c>
 8016f88:	686c      	ldr	r4, [r5, #4]
 8016f8a:	89a3      	ldrh	r3, [r4, #12]
 8016f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f90:	0719      	lsls	r1, r3, #28
 8016f92:	d42c      	bmi.n	8016fee <__swsetup_r+0x82>
 8016f94:	06dd      	lsls	r5, r3, #27
 8016f96:	d411      	bmi.n	8016fbc <__swsetup_r+0x50>
 8016f98:	2309      	movs	r3, #9
 8016f9a:	6033      	str	r3, [r6, #0]
 8016f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016fa0:	81a3      	strh	r3, [r4, #12]
 8016fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fa6:	e03e      	b.n	8017026 <__swsetup_r+0xba>
 8016fa8:	4b25      	ldr	r3, [pc, #148]	; (8017040 <__swsetup_r+0xd4>)
 8016faa:	429c      	cmp	r4, r3
 8016fac:	d101      	bne.n	8016fb2 <__swsetup_r+0x46>
 8016fae:	68ac      	ldr	r4, [r5, #8]
 8016fb0:	e7eb      	b.n	8016f8a <__swsetup_r+0x1e>
 8016fb2:	4b24      	ldr	r3, [pc, #144]	; (8017044 <__swsetup_r+0xd8>)
 8016fb4:	429c      	cmp	r4, r3
 8016fb6:	bf08      	it	eq
 8016fb8:	68ec      	ldreq	r4, [r5, #12]
 8016fba:	e7e6      	b.n	8016f8a <__swsetup_r+0x1e>
 8016fbc:	0758      	lsls	r0, r3, #29
 8016fbe:	d512      	bpl.n	8016fe6 <__swsetup_r+0x7a>
 8016fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fc2:	b141      	cbz	r1, 8016fd6 <__swsetup_r+0x6a>
 8016fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fc8:	4299      	cmp	r1, r3
 8016fca:	d002      	beq.n	8016fd2 <__swsetup_r+0x66>
 8016fcc:	4630      	mov	r0, r6
 8016fce:	f7ff fe15 	bl	8016bfc <_free_r>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8016fd6:	89a3      	ldrh	r3, [r4, #12]
 8016fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fdc:	81a3      	strh	r3, [r4, #12]
 8016fde:	2300      	movs	r3, #0
 8016fe0:	6063      	str	r3, [r4, #4]
 8016fe2:	6923      	ldr	r3, [r4, #16]
 8016fe4:	6023      	str	r3, [r4, #0]
 8016fe6:	89a3      	ldrh	r3, [r4, #12]
 8016fe8:	f043 0308 	orr.w	r3, r3, #8
 8016fec:	81a3      	strh	r3, [r4, #12]
 8016fee:	6923      	ldr	r3, [r4, #16]
 8016ff0:	b94b      	cbnz	r3, 8017006 <__swsetup_r+0x9a>
 8016ff2:	89a3      	ldrh	r3, [r4, #12]
 8016ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ffc:	d003      	beq.n	8017006 <__swsetup_r+0x9a>
 8016ffe:	4621      	mov	r1, r4
 8017000:	4630      	mov	r0, r6
 8017002:	f000 fa01 	bl	8017408 <__smakebuf_r>
 8017006:	89a0      	ldrh	r0, [r4, #12]
 8017008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801700c:	f010 0301 	ands.w	r3, r0, #1
 8017010:	d00a      	beq.n	8017028 <__swsetup_r+0xbc>
 8017012:	2300      	movs	r3, #0
 8017014:	60a3      	str	r3, [r4, #8]
 8017016:	6963      	ldr	r3, [r4, #20]
 8017018:	425b      	negs	r3, r3
 801701a:	61a3      	str	r3, [r4, #24]
 801701c:	6923      	ldr	r3, [r4, #16]
 801701e:	b943      	cbnz	r3, 8017032 <__swsetup_r+0xc6>
 8017020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017024:	d1ba      	bne.n	8016f9c <__swsetup_r+0x30>
 8017026:	bd70      	pop	{r4, r5, r6, pc}
 8017028:	0781      	lsls	r1, r0, #30
 801702a:	bf58      	it	pl
 801702c:	6963      	ldrpl	r3, [r4, #20]
 801702e:	60a3      	str	r3, [r4, #8]
 8017030:	e7f4      	b.n	801701c <__swsetup_r+0xb0>
 8017032:	2000      	movs	r0, #0
 8017034:	e7f7      	b.n	8017026 <__swsetup_r+0xba>
 8017036:	bf00      	nop
 8017038:	240000a0 	.word	0x240000a0
 801703c:	08017a68 	.word	0x08017a68
 8017040:	08017a88 	.word	0x08017a88
 8017044:	08017a48 	.word	0x08017a48

08017048 <__sflush_r>:
 8017048:	898a      	ldrh	r2, [r1, #12]
 801704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801704e:	4605      	mov	r5, r0
 8017050:	0710      	lsls	r0, r2, #28
 8017052:	460c      	mov	r4, r1
 8017054:	d458      	bmi.n	8017108 <__sflush_r+0xc0>
 8017056:	684b      	ldr	r3, [r1, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	dc05      	bgt.n	8017068 <__sflush_r+0x20>
 801705c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801705e:	2b00      	cmp	r3, #0
 8017060:	dc02      	bgt.n	8017068 <__sflush_r+0x20>
 8017062:	2000      	movs	r0, #0
 8017064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801706a:	2e00      	cmp	r6, #0
 801706c:	d0f9      	beq.n	8017062 <__sflush_r+0x1a>
 801706e:	2300      	movs	r3, #0
 8017070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017074:	682f      	ldr	r7, [r5, #0]
 8017076:	602b      	str	r3, [r5, #0]
 8017078:	d032      	beq.n	80170e0 <__sflush_r+0x98>
 801707a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	075a      	lsls	r2, r3, #29
 8017080:	d505      	bpl.n	801708e <__sflush_r+0x46>
 8017082:	6863      	ldr	r3, [r4, #4]
 8017084:	1ac0      	subs	r0, r0, r3
 8017086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017088:	b10b      	cbz	r3, 801708e <__sflush_r+0x46>
 801708a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801708c:	1ac0      	subs	r0, r0, r3
 801708e:	2300      	movs	r3, #0
 8017090:	4602      	mov	r2, r0
 8017092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017094:	6a21      	ldr	r1, [r4, #32]
 8017096:	4628      	mov	r0, r5
 8017098:	47b0      	blx	r6
 801709a:	1c43      	adds	r3, r0, #1
 801709c:	89a3      	ldrh	r3, [r4, #12]
 801709e:	d106      	bne.n	80170ae <__sflush_r+0x66>
 80170a0:	6829      	ldr	r1, [r5, #0]
 80170a2:	291d      	cmp	r1, #29
 80170a4:	d82c      	bhi.n	8017100 <__sflush_r+0xb8>
 80170a6:	4a2a      	ldr	r2, [pc, #168]	; (8017150 <__sflush_r+0x108>)
 80170a8:	40ca      	lsrs	r2, r1
 80170aa:	07d6      	lsls	r6, r2, #31
 80170ac:	d528      	bpl.n	8017100 <__sflush_r+0xb8>
 80170ae:	2200      	movs	r2, #0
 80170b0:	6062      	str	r2, [r4, #4]
 80170b2:	04d9      	lsls	r1, r3, #19
 80170b4:	6922      	ldr	r2, [r4, #16]
 80170b6:	6022      	str	r2, [r4, #0]
 80170b8:	d504      	bpl.n	80170c4 <__sflush_r+0x7c>
 80170ba:	1c42      	adds	r2, r0, #1
 80170bc:	d101      	bne.n	80170c2 <__sflush_r+0x7a>
 80170be:	682b      	ldr	r3, [r5, #0]
 80170c0:	b903      	cbnz	r3, 80170c4 <__sflush_r+0x7c>
 80170c2:	6560      	str	r0, [r4, #84]	; 0x54
 80170c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170c6:	602f      	str	r7, [r5, #0]
 80170c8:	2900      	cmp	r1, #0
 80170ca:	d0ca      	beq.n	8017062 <__sflush_r+0x1a>
 80170cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170d0:	4299      	cmp	r1, r3
 80170d2:	d002      	beq.n	80170da <__sflush_r+0x92>
 80170d4:	4628      	mov	r0, r5
 80170d6:	f7ff fd91 	bl	8016bfc <_free_r>
 80170da:	2000      	movs	r0, #0
 80170dc:	6360      	str	r0, [r4, #52]	; 0x34
 80170de:	e7c1      	b.n	8017064 <__sflush_r+0x1c>
 80170e0:	6a21      	ldr	r1, [r4, #32]
 80170e2:	2301      	movs	r3, #1
 80170e4:	4628      	mov	r0, r5
 80170e6:	47b0      	blx	r6
 80170e8:	1c41      	adds	r1, r0, #1
 80170ea:	d1c7      	bne.n	801707c <__sflush_r+0x34>
 80170ec:	682b      	ldr	r3, [r5, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d0c4      	beq.n	801707c <__sflush_r+0x34>
 80170f2:	2b1d      	cmp	r3, #29
 80170f4:	d001      	beq.n	80170fa <__sflush_r+0xb2>
 80170f6:	2b16      	cmp	r3, #22
 80170f8:	d101      	bne.n	80170fe <__sflush_r+0xb6>
 80170fa:	602f      	str	r7, [r5, #0]
 80170fc:	e7b1      	b.n	8017062 <__sflush_r+0x1a>
 80170fe:	89a3      	ldrh	r3, [r4, #12]
 8017100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017104:	81a3      	strh	r3, [r4, #12]
 8017106:	e7ad      	b.n	8017064 <__sflush_r+0x1c>
 8017108:	690f      	ldr	r7, [r1, #16]
 801710a:	2f00      	cmp	r7, #0
 801710c:	d0a9      	beq.n	8017062 <__sflush_r+0x1a>
 801710e:	0793      	lsls	r3, r2, #30
 8017110:	680e      	ldr	r6, [r1, #0]
 8017112:	bf08      	it	eq
 8017114:	694b      	ldreq	r3, [r1, #20]
 8017116:	600f      	str	r7, [r1, #0]
 8017118:	bf18      	it	ne
 801711a:	2300      	movne	r3, #0
 801711c:	eba6 0807 	sub.w	r8, r6, r7
 8017120:	608b      	str	r3, [r1, #8]
 8017122:	f1b8 0f00 	cmp.w	r8, #0
 8017126:	dd9c      	ble.n	8017062 <__sflush_r+0x1a>
 8017128:	6a21      	ldr	r1, [r4, #32]
 801712a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801712c:	4643      	mov	r3, r8
 801712e:	463a      	mov	r2, r7
 8017130:	4628      	mov	r0, r5
 8017132:	47b0      	blx	r6
 8017134:	2800      	cmp	r0, #0
 8017136:	dc06      	bgt.n	8017146 <__sflush_r+0xfe>
 8017138:	89a3      	ldrh	r3, [r4, #12]
 801713a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801713e:	81a3      	strh	r3, [r4, #12]
 8017140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017144:	e78e      	b.n	8017064 <__sflush_r+0x1c>
 8017146:	4407      	add	r7, r0
 8017148:	eba8 0800 	sub.w	r8, r8, r0
 801714c:	e7e9      	b.n	8017122 <__sflush_r+0xda>
 801714e:	bf00      	nop
 8017150:	20400001 	.word	0x20400001

08017154 <_fflush_r>:
 8017154:	b538      	push	{r3, r4, r5, lr}
 8017156:	690b      	ldr	r3, [r1, #16]
 8017158:	4605      	mov	r5, r0
 801715a:	460c      	mov	r4, r1
 801715c:	b913      	cbnz	r3, 8017164 <_fflush_r+0x10>
 801715e:	2500      	movs	r5, #0
 8017160:	4628      	mov	r0, r5
 8017162:	bd38      	pop	{r3, r4, r5, pc}
 8017164:	b118      	cbz	r0, 801716e <_fflush_r+0x1a>
 8017166:	6983      	ldr	r3, [r0, #24]
 8017168:	b90b      	cbnz	r3, 801716e <_fflush_r+0x1a>
 801716a:	f000 f887 	bl	801727c <__sinit>
 801716e:	4b14      	ldr	r3, [pc, #80]	; (80171c0 <_fflush_r+0x6c>)
 8017170:	429c      	cmp	r4, r3
 8017172:	d11b      	bne.n	80171ac <_fflush_r+0x58>
 8017174:	686c      	ldr	r4, [r5, #4]
 8017176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d0ef      	beq.n	801715e <_fflush_r+0xa>
 801717e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017180:	07d0      	lsls	r0, r2, #31
 8017182:	d404      	bmi.n	801718e <_fflush_r+0x3a>
 8017184:	0599      	lsls	r1, r3, #22
 8017186:	d402      	bmi.n	801718e <_fflush_r+0x3a>
 8017188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801718a:	f000 f915 	bl	80173b8 <__retarget_lock_acquire_recursive>
 801718e:	4628      	mov	r0, r5
 8017190:	4621      	mov	r1, r4
 8017192:	f7ff ff59 	bl	8017048 <__sflush_r>
 8017196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017198:	07da      	lsls	r2, r3, #31
 801719a:	4605      	mov	r5, r0
 801719c:	d4e0      	bmi.n	8017160 <_fflush_r+0xc>
 801719e:	89a3      	ldrh	r3, [r4, #12]
 80171a0:	059b      	lsls	r3, r3, #22
 80171a2:	d4dd      	bmi.n	8017160 <_fflush_r+0xc>
 80171a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171a6:	f000 f908 	bl	80173ba <__retarget_lock_release_recursive>
 80171aa:	e7d9      	b.n	8017160 <_fflush_r+0xc>
 80171ac:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <_fflush_r+0x70>)
 80171ae:	429c      	cmp	r4, r3
 80171b0:	d101      	bne.n	80171b6 <_fflush_r+0x62>
 80171b2:	68ac      	ldr	r4, [r5, #8]
 80171b4:	e7df      	b.n	8017176 <_fflush_r+0x22>
 80171b6:	4b04      	ldr	r3, [pc, #16]	; (80171c8 <_fflush_r+0x74>)
 80171b8:	429c      	cmp	r4, r3
 80171ba:	bf08      	it	eq
 80171bc:	68ec      	ldreq	r4, [r5, #12]
 80171be:	e7da      	b.n	8017176 <_fflush_r+0x22>
 80171c0:	08017a68 	.word	0x08017a68
 80171c4:	08017a88 	.word	0x08017a88
 80171c8:	08017a48 	.word	0x08017a48

080171cc <std>:
 80171cc:	2300      	movs	r3, #0
 80171ce:	b510      	push	{r4, lr}
 80171d0:	4604      	mov	r4, r0
 80171d2:	e9c0 3300 	strd	r3, r3, [r0]
 80171d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80171da:	6083      	str	r3, [r0, #8]
 80171dc:	8181      	strh	r1, [r0, #12]
 80171de:	6643      	str	r3, [r0, #100]	; 0x64
 80171e0:	81c2      	strh	r2, [r0, #14]
 80171e2:	6183      	str	r3, [r0, #24]
 80171e4:	4619      	mov	r1, r3
 80171e6:	2208      	movs	r2, #8
 80171e8:	305c      	adds	r0, #92	; 0x5c
 80171ea:	f7ff fcff 	bl	8016bec <memset>
 80171ee:	4b05      	ldr	r3, [pc, #20]	; (8017204 <std+0x38>)
 80171f0:	6263      	str	r3, [r4, #36]	; 0x24
 80171f2:	4b05      	ldr	r3, [pc, #20]	; (8017208 <std+0x3c>)
 80171f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80171f6:	4b05      	ldr	r3, [pc, #20]	; (801720c <std+0x40>)
 80171f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171fa:	4b05      	ldr	r3, [pc, #20]	; (8017210 <std+0x44>)
 80171fc:	6224      	str	r4, [r4, #32]
 80171fe:	6323      	str	r3, [r4, #48]	; 0x30
 8017200:	bd10      	pop	{r4, pc}
 8017202:	bf00      	nop
 8017204:	080174a1 	.word	0x080174a1
 8017208:	080174c3 	.word	0x080174c3
 801720c:	080174fb 	.word	0x080174fb
 8017210:	0801751f 	.word	0x0801751f

08017214 <_cleanup_r>:
 8017214:	4901      	ldr	r1, [pc, #4]	; (801721c <_cleanup_r+0x8>)
 8017216:	f000 b8af 	b.w	8017378 <_fwalk_reent>
 801721a:	bf00      	nop
 801721c:	08017155 	.word	0x08017155

08017220 <__sfmoreglue>:
 8017220:	b570      	push	{r4, r5, r6, lr}
 8017222:	2268      	movs	r2, #104	; 0x68
 8017224:	1e4d      	subs	r5, r1, #1
 8017226:	4355      	muls	r5, r2
 8017228:	460e      	mov	r6, r1
 801722a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801722e:	f7ff fd51 	bl	8016cd4 <_malloc_r>
 8017232:	4604      	mov	r4, r0
 8017234:	b140      	cbz	r0, 8017248 <__sfmoreglue+0x28>
 8017236:	2100      	movs	r1, #0
 8017238:	e9c0 1600 	strd	r1, r6, [r0]
 801723c:	300c      	adds	r0, #12
 801723e:	60a0      	str	r0, [r4, #8]
 8017240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017244:	f7ff fcd2 	bl	8016bec <memset>
 8017248:	4620      	mov	r0, r4
 801724a:	bd70      	pop	{r4, r5, r6, pc}

0801724c <__sfp_lock_acquire>:
 801724c:	4801      	ldr	r0, [pc, #4]	; (8017254 <__sfp_lock_acquire+0x8>)
 801724e:	f000 b8b3 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 8017252:	bf00      	nop
 8017254:	24005a41 	.word	0x24005a41

08017258 <__sfp_lock_release>:
 8017258:	4801      	ldr	r0, [pc, #4]	; (8017260 <__sfp_lock_release+0x8>)
 801725a:	f000 b8ae 	b.w	80173ba <__retarget_lock_release_recursive>
 801725e:	bf00      	nop
 8017260:	24005a41 	.word	0x24005a41

08017264 <__sinit_lock_acquire>:
 8017264:	4801      	ldr	r0, [pc, #4]	; (801726c <__sinit_lock_acquire+0x8>)
 8017266:	f000 b8a7 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 801726a:	bf00      	nop
 801726c:	24005a42 	.word	0x24005a42

08017270 <__sinit_lock_release>:
 8017270:	4801      	ldr	r0, [pc, #4]	; (8017278 <__sinit_lock_release+0x8>)
 8017272:	f000 b8a2 	b.w	80173ba <__retarget_lock_release_recursive>
 8017276:	bf00      	nop
 8017278:	24005a42 	.word	0x24005a42

0801727c <__sinit>:
 801727c:	b510      	push	{r4, lr}
 801727e:	4604      	mov	r4, r0
 8017280:	f7ff fff0 	bl	8017264 <__sinit_lock_acquire>
 8017284:	69a3      	ldr	r3, [r4, #24]
 8017286:	b11b      	cbz	r3, 8017290 <__sinit+0x14>
 8017288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801728c:	f7ff bff0 	b.w	8017270 <__sinit_lock_release>
 8017290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017294:	6523      	str	r3, [r4, #80]	; 0x50
 8017296:	4b13      	ldr	r3, [pc, #76]	; (80172e4 <__sinit+0x68>)
 8017298:	4a13      	ldr	r2, [pc, #76]	; (80172e8 <__sinit+0x6c>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	62a2      	str	r2, [r4, #40]	; 0x28
 801729e:	42a3      	cmp	r3, r4
 80172a0:	bf04      	itt	eq
 80172a2:	2301      	moveq	r3, #1
 80172a4:	61a3      	streq	r3, [r4, #24]
 80172a6:	4620      	mov	r0, r4
 80172a8:	f000 f820 	bl	80172ec <__sfp>
 80172ac:	6060      	str	r0, [r4, #4]
 80172ae:	4620      	mov	r0, r4
 80172b0:	f000 f81c 	bl	80172ec <__sfp>
 80172b4:	60a0      	str	r0, [r4, #8]
 80172b6:	4620      	mov	r0, r4
 80172b8:	f000 f818 	bl	80172ec <__sfp>
 80172bc:	2200      	movs	r2, #0
 80172be:	60e0      	str	r0, [r4, #12]
 80172c0:	2104      	movs	r1, #4
 80172c2:	6860      	ldr	r0, [r4, #4]
 80172c4:	f7ff ff82 	bl	80171cc <std>
 80172c8:	68a0      	ldr	r0, [r4, #8]
 80172ca:	2201      	movs	r2, #1
 80172cc:	2109      	movs	r1, #9
 80172ce:	f7ff ff7d 	bl	80171cc <std>
 80172d2:	68e0      	ldr	r0, [r4, #12]
 80172d4:	2202      	movs	r2, #2
 80172d6:	2112      	movs	r1, #18
 80172d8:	f7ff ff78 	bl	80171cc <std>
 80172dc:	2301      	movs	r3, #1
 80172de:	61a3      	str	r3, [r4, #24]
 80172e0:	e7d2      	b.n	8017288 <__sinit+0xc>
 80172e2:	bf00      	nop
 80172e4:	08017a44 	.word	0x08017a44
 80172e8:	08017215 	.word	0x08017215

080172ec <__sfp>:
 80172ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ee:	4607      	mov	r7, r0
 80172f0:	f7ff ffac 	bl	801724c <__sfp_lock_acquire>
 80172f4:	4b1e      	ldr	r3, [pc, #120]	; (8017370 <__sfp+0x84>)
 80172f6:	681e      	ldr	r6, [r3, #0]
 80172f8:	69b3      	ldr	r3, [r6, #24]
 80172fa:	b913      	cbnz	r3, 8017302 <__sfp+0x16>
 80172fc:	4630      	mov	r0, r6
 80172fe:	f7ff ffbd 	bl	801727c <__sinit>
 8017302:	3648      	adds	r6, #72	; 0x48
 8017304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017308:	3b01      	subs	r3, #1
 801730a:	d503      	bpl.n	8017314 <__sfp+0x28>
 801730c:	6833      	ldr	r3, [r6, #0]
 801730e:	b30b      	cbz	r3, 8017354 <__sfp+0x68>
 8017310:	6836      	ldr	r6, [r6, #0]
 8017312:	e7f7      	b.n	8017304 <__sfp+0x18>
 8017314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017318:	b9d5      	cbnz	r5, 8017350 <__sfp+0x64>
 801731a:	4b16      	ldr	r3, [pc, #88]	; (8017374 <__sfp+0x88>)
 801731c:	60e3      	str	r3, [r4, #12]
 801731e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017322:	6665      	str	r5, [r4, #100]	; 0x64
 8017324:	f000 f847 	bl	80173b6 <__retarget_lock_init_recursive>
 8017328:	f7ff ff96 	bl	8017258 <__sfp_lock_release>
 801732c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017334:	6025      	str	r5, [r4, #0]
 8017336:	61a5      	str	r5, [r4, #24]
 8017338:	2208      	movs	r2, #8
 801733a:	4629      	mov	r1, r5
 801733c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017340:	f7ff fc54 	bl	8016bec <memset>
 8017344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801734c:	4620      	mov	r0, r4
 801734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017350:	3468      	adds	r4, #104	; 0x68
 8017352:	e7d9      	b.n	8017308 <__sfp+0x1c>
 8017354:	2104      	movs	r1, #4
 8017356:	4638      	mov	r0, r7
 8017358:	f7ff ff62 	bl	8017220 <__sfmoreglue>
 801735c:	4604      	mov	r4, r0
 801735e:	6030      	str	r0, [r6, #0]
 8017360:	2800      	cmp	r0, #0
 8017362:	d1d5      	bne.n	8017310 <__sfp+0x24>
 8017364:	f7ff ff78 	bl	8017258 <__sfp_lock_release>
 8017368:	230c      	movs	r3, #12
 801736a:	603b      	str	r3, [r7, #0]
 801736c:	e7ee      	b.n	801734c <__sfp+0x60>
 801736e:	bf00      	nop
 8017370:	08017a44 	.word	0x08017a44
 8017374:	ffff0001 	.word	0xffff0001

08017378 <_fwalk_reent>:
 8017378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801737c:	4606      	mov	r6, r0
 801737e:	4688      	mov	r8, r1
 8017380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017384:	2700      	movs	r7, #0
 8017386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801738a:	f1b9 0901 	subs.w	r9, r9, #1
 801738e:	d505      	bpl.n	801739c <_fwalk_reent+0x24>
 8017390:	6824      	ldr	r4, [r4, #0]
 8017392:	2c00      	cmp	r4, #0
 8017394:	d1f7      	bne.n	8017386 <_fwalk_reent+0xe>
 8017396:	4638      	mov	r0, r7
 8017398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801739c:	89ab      	ldrh	r3, [r5, #12]
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d907      	bls.n	80173b2 <_fwalk_reent+0x3a>
 80173a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173a6:	3301      	adds	r3, #1
 80173a8:	d003      	beq.n	80173b2 <_fwalk_reent+0x3a>
 80173aa:	4629      	mov	r1, r5
 80173ac:	4630      	mov	r0, r6
 80173ae:	47c0      	blx	r8
 80173b0:	4307      	orrs	r7, r0
 80173b2:	3568      	adds	r5, #104	; 0x68
 80173b4:	e7e9      	b.n	801738a <_fwalk_reent+0x12>

080173b6 <__retarget_lock_init_recursive>:
 80173b6:	4770      	bx	lr

080173b8 <__retarget_lock_acquire_recursive>:
 80173b8:	4770      	bx	lr

080173ba <__retarget_lock_release_recursive>:
 80173ba:	4770      	bx	lr

080173bc <__swhatbuf_r>:
 80173bc:	b570      	push	{r4, r5, r6, lr}
 80173be:	460e      	mov	r6, r1
 80173c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c4:	2900      	cmp	r1, #0
 80173c6:	b096      	sub	sp, #88	; 0x58
 80173c8:	4614      	mov	r4, r2
 80173ca:	461d      	mov	r5, r3
 80173cc:	da08      	bge.n	80173e0 <__swhatbuf_r+0x24>
 80173ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80173d2:	2200      	movs	r2, #0
 80173d4:	602a      	str	r2, [r5, #0]
 80173d6:	061a      	lsls	r2, r3, #24
 80173d8:	d410      	bmi.n	80173fc <__swhatbuf_r+0x40>
 80173da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173de:	e00e      	b.n	80173fe <__swhatbuf_r+0x42>
 80173e0:	466a      	mov	r2, sp
 80173e2:	f000 f8c3 	bl	801756c <_fstat_r>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	dbf1      	blt.n	80173ce <__swhatbuf_r+0x12>
 80173ea:	9a01      	ldr	r2, [sp, #4]
 80173ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80173f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80173f4:	425a      	negs	r2, r3
 80173f6:	415a      	adcs	r2, r3
 80173f8:	602a      	str	r2, [r5, #0]
 80173fa:	e7ee      	b.n	80173da <__swhatbuf_r+0x1e>
 80173fc:	2340      	movs	r3, #64	; 0x40
 80173fe:	2000      	movs	r0, #0
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	b016      	add	sp, #88	; 0x58
 8017404:	bd70      	pop	{r4, r5, r6, pc}
	...

08017408 <__smakebuf_r>:
 8017408:	898b      	ldrh	r3, [r1, #12]
 801740a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801740c:	079d      	lsls	r5, r3, #30
 801740e:	4606      	mov	r6, r0
 8017410:	460c      	mov	r4, r1
 8017412:	d507      	bpl.n	8017424 <__smakebuf_r+0x1c>
 8017414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	6123      	str	r3, [r4, #16]
 801741c:	2301      	movs	r3, #1
 801741e:	6163      	str	r3, [r4, #20]
 8017420:	b002      	add	sp, #8
 8017422:	bd70      	pop	{r4, r5, r6, pc}
 8017424:	ab01      	add	r3, sp, #4
 8017426:	466a      	mov	r2, sp
 8017428:	f7ff ffc8 	bl	80173bc <__swhatbuf_r>
 801742c:	9900      	ldr	r1, [sp, #0]
 801742e:	4605      	mov	r5, r0
 8017430:	4630      	mov	r0, r6
 8017432:	f7ff fc4f 	bl	8016cd4 <_malloc_r>
 8017436:	b948      	cbnz	r0, 801744c <__smakebuf_r+0x44>
 8017438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801743c:	059a      	lsls	r2, r3, #22
 801743e:	d4ef      	bmi.n	8017420 <__smakebuf_r+0x18>
 8017440:	f023 0303 	bic.w	r3, r3, #3
 8017444:	f043 0302 	orr.w	r3, r3, #2
 8017448:	81a3      	strh	r3, [r4, #12]
 801744a:	e7e3      	b.n	8017414 <__smakebuf_r+0xc>
 801744c:	4b0d      	ldr	r3, [pc, #52]	; (8017484 <__smakebuf_r+0x7c>)
 801744e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	9b00      	ldr	r3, [sp, #0]
 801745c:	6163      	str	r3, [r4, #20]
 801745e:	9b01      	ldr	r3, [sp, #4]
 8017460:	6120      	str	r0, [r4, #16]
 8017462:	b15b      	cbz	r3, 801747c <__smakebuf_r+0x74>
 8017464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017468:	4630      	mov	r0, r6
 801746a:	f000 f891 	bl	8017590 <_isatty_r>
 801746e:	b128      	cbz	r0, 801747c <__smakebuf_r+0x74>
 8017470:	89a3      	ldrh	r3, [r4, #12]
 8017472:	f023 0303 	bic.w	r3, r3, #3
 8017476:	f043 0301 	orr.w	r3, r3, #1
 801747a:	81a3      	strh	r3, [r4, #12]
 801747c:	89a0      	ldrh	r0, [r4, #12]
 801747e:	4305      	orrs	r5, r0
 8017480:	81a5      	strh	r5, [r4, #12]
 8017482:	e7cd      	b.n	8017420 <__smakebuf_r+0x18>
 8017484:	08017215 	.word	0x08017215

08017488 <__malloc_lock>:
 8017488:	4801      	ldr	r0, [pc, #4]	; (8017490 <__malloc_lock+0x8>)
 801748a:	f7ff bf95 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 801748e:	bf00      	nop
 8017490:	24005a40 	.word	0x24005a40

08017494 <__malloc_unlock>:
 8017494:	4801      	ldr	r0, [pc, #4]	; (801749c <__malloc_unlock+0x8>)
 8017496:	f7ff bf90 	b.w	80173ba <__retarget_lock_release_recursive>
 801749a:	bf00      	nop
 801749c:	24005a40 	.word	0x24005a40

080174a0 <__sread>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	460c      	mov	r4, r1
 80174a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174a8:	f000 f894 	bl	80175d4 <_read_r>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	bfab      	itete	ge
 80174b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80174b2:	89a3      	ldrhlt	r3, [r4, #12]
 80174b4:	181b      	addge	r3, r3, r0
 80174b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80174ba:	bfac      	ite	ge
 80174bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80174be:	81a3      	strhlt	r3, [r4, #12]
 80174c0:	bd10      	pop	{r4, pc}

080174c2 <__swrite>:
 80174c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c6:	461f      	mov	r7, r3
 80174c8:	898b      	ldrh	r3, [r1, #12]
 80174ca:	05db      	lsls	r3, r3, #23
 80174cc:	4605      	mov	r5, r0
 80174ce:	460c      	mov	r4, r1
 80174d0:	4616      	mov	r6, r2
 80174d2:	d505      	bpl.n	80174e0 <__swrite+0x1e>
 80174d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174d8:	2302      	movs	r3, #2
 80174da:	2200      	movs	r2, #0
 80174dc:	f000 f868 	bl	80175b0 <_lseek_r>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	4632      	mov	r2, r6
 80174ee:	463b      	mov	r3, r7
 80174f0:	4628      	mov	r0, r5
 80174f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174f6:	f000 b817 	b.w	8017528 <_write_r>

080174fa <__sseek>:
 80174fa:	b510      	push	{r4, lr}
 80174fc:	460c      	mov	r4, r1
 80174fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017502:	f000 f855 	bl	80175b0 <_lseek_r>
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	89a3      	ldrh	r3, [r4, #12]
 801750a:	bf15      	itete	ne
 801750c:	6560      	strne	r0, [r4, #84]	; 0x54
 801750e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017516:	81a3      	strheq	r3, [r4, #12]
 8017518:	bf18      	it	ne
 801751a:	81a3      	strhne	r3, [r4, #12]
 801751c:	bd10      	pop	{r4, pc}

0801751e <__sclose>:
 801751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017522:	f000 b813 	b.w	801754c <_close_r>
	...

08017528 <_write_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d07      	ldr	r5, [pc, #28]	; (8017548 <_write_r+0x20>)
 801752c:	4604      	mov	r4, r0
 801752e:	4608      	mov	r0, r1
 8017530:	4611      	mov	r1, r2
 8017532:	2200      	movs	r2, #0
 8017534:	602a      	str	r2, [r5, #0]
 8017536:	461a      	mov	r2, r3
 8017538:	f7ec fc3d 	bl	8003db6 <_write>
 801753c:	1c43      	adds	r3, r0, #1
 801753e:	d102      	bne.n	8017546 <_write_r+0x1e>
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	b103      	cbz	r3, 8017546 <_write_r+0x1e>
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	24005a44 	.word	0x24005a44

0801754c <_close_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4d06      	ldr	r5, [pc, #24]	; (8017568 <_close_r+0x1c>)
 8017550:	2300      	movs	r3, #0
 8017552:	4604      	mov	r4, r0
 8017554:	4608      	mov	r0, r1
 8017556:	602b      	str	r3, [r5, #0]
 8017558:	f7ec fc49 	bl	8003dee <_close>
 801755c:	1c43      	adds	r3, r0, #1
 801755e:	d102      	bne.n	8017566 <_close_r+0x1a>
 8017560:	682b      	ldr	r3, [r5, #0]
 8017562:	b103      	cbz	r3, 8017566 <_close_r+0x1a>
 8017564:	6023      	str	r3, [r4, #0]
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	24005a44 	.word	0x24005a44

0801756c <_fstat_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4d07      	ldr	r5, [pc, #28]	; (801758c <_fstat_r+0x20>)
 8017570:	2300      	movs	r3, #0
 8017572:	4604      	mov	r4, r0
 8017574:	4608      	mov	r0, r1
 8017576:	4611      	mov	r1, r2
 8017578:	602b      	str	r3, [r5, #0]
 801757a:	f7ec fc44 	bl	8003e06 <_fstat>
 801757e:	1c43      	adds	r3, r0, #1
 8017580:	d102      	bne.n	8017588 <_fstat_r+0x1c>
 8017582:	682b      	ldr	r3, [r5, #0]
 8017584:	b103      	cbz	r3, 8017588 <_fstat_r+0x1c>
 8017586:	6023      	str	r3, [r4, #0]
 8017588:	bd38      	pop	{r3, r4, r5, pc}
 801758a:	bf00      	nop
 801758c:	24005a44 	.word	0x24005a44

08017590 <_isatty_r>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	4d06      	ldr	r5, [pc, #24]	; (80175ac <_isatty_r+0x1c>)
 8017594:	2300      	movs	r3, #0
 8017596:	4604      	mov	r4, r0
 8017598:	4608      	mov	r0, r1
 801759a:	602b      	str	r3, [r5, #0]
 801759c:	f7ec fc43 	bl	8003e26 <_isatty>
 80175a0:	1c43      	adds	r3, r0, #1
 80175a2:	d102      	bne.n	80175aa <_isatty_r+0x1a>
 80175a4:	682b      	ldr	r3, [r5, #0]
 80175a6:	b103      	cbz	r3, 80175aa <_isatty_r+0x1a>
 80175a8:	6023      	str	r3, [r4, #0]
 80175aa:	bd38      	pop	{r3, r4, r5, pc}
 80175ac:	24005a44 	.word	0x24005a44

080175b0 <_lseek_r>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	4d07      	ldr	r5, [pc, #28]	; (80175d0 <_lseek_r+0x20>)
 80175b4:	4604      	mov	r4, r0
 80175b6:	4608      	mov	r0, r1
 80175b8:	4611      	mov	r1, r2
 80175ba:	2200      	movs	r2, #0
 80175bc:	602a      	str	r2, [r5, #0]
 80175be:	461a      	mov	r2, r3
 80175c0:	f7ec fc3c 	bl	8003e3c <_lseek>
 80175c4:	1c43      	adds	r3, r0, #1
 80175c6:	d102      	bne.n	80175ce <_lseek_r+0x1e>
 80175c8:	682b      	ldr	r3, [r5, #0]
 80175ca:	b103      	cbz	r3, 80175ce <_lseek_r+0x1e>
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	bd38      	pop	{r3, r4, r5, pc}
 80175d0:	24005a44 	.word	0x24005a44

080175d4 <_read_r>:
 80175d4:	b538      	push	{r3, r4, r5, lr}
 80175d6:	4d07      	ldr	r5, [pc, #28]	; (80175f4 <_read_r+0x20>)
 80175d8:	4604      	mov	r4, r0
 80175da:	4608      	mov	r0, r1
 80175dc:	4611      	mov	r1, r2
 80175de:	2200      	movs	r2, #0
 80175e0:	602a      	str	r2, [r5, #0]
 80175e2:	461a      	mov	r2, r3
 80175e4:	f7ec fbca 	bl	8003d7c <_read>
 80175e8:	1c43      	adds	r3, r0, #1
 80175ea:	d102      	bne.n	80175f2 <_read_r+0x1e>
 80175ec:	682b      	ldr	r3, [r5, #0]
 80175ee:	b103      	cbz	r3, 80175f2 <_read_r+0x1e>
 80175f0:	6023      	str	r3, [r4, #0]
 80175f2:	bd38      	pop	{r3, r4, r5, pc}
 80175f4:	24005a44 	.word	0x24005a44

080175f8 <_init>:
 80175f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175fa:	bf00      	nop
 80175fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175fe:	bc08      	pop	{r3}
 8017600:	469e      	mov	lr, r3
 8017602:	4770      	bx	lr

08017604 <_fini>:
 8017604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017606:	bf00      	nop
 8017608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801760a:	bc08      	pop	{r3}
 801760c:	469e      	mov	lr, r3
 801760e:	4770      	bx	lr
