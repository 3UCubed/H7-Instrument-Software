
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c820  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cdd0  0800cdd0  0001cdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cdd4  0800cdd4  0001cdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800cdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca0  24000078  0800ce50  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d18  0800ce50  00024d18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028968  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000479e  00000000  00000000  00048a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f00  00000000  00000000  0004d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d58  00000000  00000000  0004f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000063c3  00000000  00000000  00050e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000279da  00000000  00000000  000571cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176827  00000000  00000000  0007eba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f53cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b60  00000000  00000000  001f541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800caa8 	.word	0x0800caa8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800caa8 	.word	0x0800caa8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fd86 	bl	800910c <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f008 fd7b 	bl	800910c <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fd70 	bl	800910c <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f00b fdaa 	bl	800c188 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000170 	.word	0x24000170
 8000640:	240002fc 	.word	0x240002fc
 8000644:	240001bc 	.word	0x240001bc
 8000648:	24000208 	.word	0x24000208
 800064c:	0800caf0 	.word	0x0800caf0

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f006 f8a5 	bl	80067ac <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f00b fd39 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f00b fd35 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f00b fd31 	bl	800c188 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f00b fd2d 	bl	800c188 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f00b fd29 	bl	800c188 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f00b fd25 	bl	800c188 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f00b fd21 	bl	800c188 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f00b fd1d 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f00b fd19 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f00b fd15 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f00b fd11 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f00b fd0d 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f00b fd09 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f00b fd05 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f00b fd01 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f00b fcfd 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f00b fcf9 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f00b fcf5 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f00b fcf1 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f00b fced 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f00b fce9 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f00b fce5 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f00b fce1 	bl	800c188 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f00b fcdd 	bl	800c188 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f00b fcd9 	bl	800c188 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f00b fcd5 	bl	800c188 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f00b fcd1 	bl	800c188 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f00b fccd 	bl	800c188 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f00b fcc9 	bl	800c188 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f00b fcc5 	bl	800c188 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000300 	.word	0x24000300
 800080c:	24000254 	.word	0x24000254
 8000810:	0800cb08 	.word	0x0800cb08
 8000814:	0800cb10 	.word	0x0800cb10
 8000818:	0800cb1c 	.word	0x0800cb1c
 800081c:	0800cb24 	.word	0x0800cb24
 8000820:	0800cb30 	.word	0x0800cb30
 8000824:	0800cb44 	.word	0x0800cb44
 8000828:	0800cb50 	.word	0x0800cb50
 800082c:	0800cb5c 	.word	0x0800cb5c
 8000830:	0800cb68 	.word	0x0800cb68
 8000834:	0800cb74 	.word	0x0800cb74
 8000838:	0800cb80 	.word	0x0800cb80
 800083c:	0800cb90 	.word	0x0800cb90
 8000840:	0800cb9c 	.word	0x0800cb9c
 8000844:	0800cba8 	.word	0x0800cba8
 8000848:	0800cbb8 	.word	0x0800cbb8
 800084c:	0800cbc8 	.word	0x0800cbc8
 8000850:	0800cbd4 	.word	0x0800cbd4
 8000854:	0800cbe0 	.word	0x0800cbe0
 8000858:	0800cbec 	.word	0x0800cbec
 800085c:	0800cbf8 	.word	0x0800cbf8
 8000860:	0800cc04 	.word	0x0800cc04
 8000864:	0800cc10 	.word	0x0800cc10
 8000868:	0800cc1c 	.word	0x0800cc1c
 800086c:	0800cc2c 	.word	0x0800cc2c
 8000870:	0800cc3c 	.word	0x0800cc3c
 8000874:	0800cc44 	.word	0x0800cc44
 8000878:	0800cc4c 	.word	0x0800cc4c
 800087c:	0800cc54 	.word	0x0800cc54
 8000880:	0800cc60 	.word	0x0800cc60
 8000884:	0800cc68 	.word	0x0800cc68

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 ff84 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f86a 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 faba 	bl	8000e0c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000898:	f000 f97c 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800089c:	f000 f9ce 	bl	8000c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 fa1a 	bl	8000cd8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fa66 	bl	8000d74 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 f8dc 	bl	8000a64 <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 f91a 	bl	8000ae4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <main+0x9c>)
 80008b4:	f005 f99c 	bl	8005bf0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <main+0xa0>)
 80008bc:	f005 f998 	bl	8005bf0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <main+0xa4>)
 80008c4:	f005 f994 	bl	8005bf0 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c8:	f008 fb04 	bl	8008ed4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <main+0xa8>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <main+0xac>)
 80008d2:	f008 fb49 	bl	8008f68 <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <main+0xb0>)
 80008da:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <main+0xb4>)
 80008de:	2100      	movs	r1, #0
 80008e0:	4817      	ldr	r0, [pc, #92]	; (8000940 <main+0xb8>)
 80008e2:	f008 fb41 	bl	8008f68 <osThreadNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <main+0xbc>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <main+0xc0>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <main+0xc4>)
 80008f2:	f008 fb39 	bl	8008f68 <osThreadNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <main+0xc8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <main+0xcc>)
 80008fe:	2100      	movs	r1, #0
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <main+0xd0>)
 8000902:	f008 fb31 	bl	8008f68 <osThreadNew>
 8000906:	4603      	mov	r3, r0
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <main+0xd4>)
 800090a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 800090c:	2000      	movs	r0, #0
 800090e:	f008 fbbd 	bl	800908c <osEventFlagsNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <main+0xd8>)
 8000916:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <main+0xdc>)
 800091a:	f00b fc35 	bl	800c188 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800091e:	f008 fafd 	bl	8008f1c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000922:	e7fe      	b.n	8000922 <main+0x9a>
 8000924:	24000170 	.word	0x24000170
 8000928:	240001bc 	.word	0x240001bc
 800092c:	24000208 	.word	0x24000208
 8000930:	0800cc9c 	.word	0x0800cc9c
 8000934:	08000e61 	.word	0x08000e61
 8000938:	240002e8 	.word	0x240002e8
 800093c:	0800ccc0 	.word	0x0800ccc0
 8000940:	08000e91 	.word	0x08000e91
 8000944:	240002ec 	.word	0x240002ec
 8000948:	0800cce4 	.word	0x0800cce4
 800094c:	08000ec1 	.word	0x08000ec1
 8000950:	240002f0 	.word	0x240002f0
 8000954:	0800cd08 	.word	0x0800cd08
 8000958:	08000ef1 	.word	0x08000ef1
 800095c:	240002f4 	.word	0x240002f4
 8000960:	240002fc 	.word	0x240002fc
 8000964:	0800cc70 	.word	0x0800cc70

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	224c      	movs	r2, #76	; 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00b fb90 	bl	800c09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00b fb8a 	bl	800c09c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f002 f895 	bl	8002ab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <SystemClock_Config+0xf4>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <SystemClock_Config+0xf4>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <SystemClock_Config+0xf4>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <SystemClock_Config+0xf8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <SystemClock_Config+0xf8>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <SystemClock_Config+0xf8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c4:	bf00      	nop
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <SystemClock_Config+0xf8>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d2:	d1f8      	bne.n	80009c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d8:	2301      	movs	r3, #1
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80009e8:	2320      	movs	r3, #32
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80009ec:	2381      	movs	r3, #129	; 0x81
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f88d 	bl	8002b2c <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a18:	f000 fa8a 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	233f      	movs	r3, #63	; 0x3f
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fccc 	bl	80033e0 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a4e:	f000 fa6f 	bl	8000f30 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <MX_I2C1_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000aa0:	f001 fed6 	bl	8002850 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fa41 	bl	8000f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ab2:	f001 ff69 	bl	8002988 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fa38 	bl	8000f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ac4:	f001 ffab 	bl	8002a1e <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fa2f 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000094 	.word	0x24000094
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00707cbb 	.word	0x00707cbb

08000ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000aea:	4a29      	ldr	r2, [pc, #164]	; (8000b90 <MX_SPI2_Init+0xac>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000afc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b1a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b78:	f004 fe2c 	bl	80057d4 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000b82:	f000 f9d5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	240000e8 	.word	0x240000e8
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <MX_TIM1_Init+0xa4>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bba:	227f      	movs	r2, #127	; 0x7f
 8000bbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bc6:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000be0:	f004 ff37 	bl	8005a52 <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bea:	f000 f9a1 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000bfc:	f005 fa5a 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c06:	f000 f993 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM1_Init+0xa0>)
 8000c1c:	f005 fcca 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c26:	f000 f983 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24000170 	.word	0x24000170
 8000c38:	40010000 	.word	0x40010000

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c64:	223f      	movs	r2, #63	; 0x3f
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c70:	f640 4234 	movw	r2, #3124	; 0xc34
 8000c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000c84:	f004 fee5 	bl	8005a52 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c8e:	f000 f94f 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000ca0:	f005 fa08 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000caa:	f000 f941 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_TIM2_Init+0x98>)
 8000cbc:	f005 fc7a 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 f933 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	240001bc 	.word	0x240001bc

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000cfe:	223f      	movs	r2, #63	; 0x3f
 8000d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d1e:	f004 fe98 	bl	8005a52 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d28:	f000 f902 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d3a:	f005 f9bb 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d44:	f000 f8f4 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_TIM3_Init+0x94>)
 8000d56:	f005 fc2d 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f000 f8e6 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000208 	.word	0x24000208
 8000d70:	40000400 	.word	0x40000400

08000d74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <MX_USART1_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d80:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dbe:	f005 fca5 	bl	800670c <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 f8b2 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dd0:	f007 ff71 	bl	8008cb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f000 f8a9 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000de2:	f007 ffa6 	bl	8008d32 <HAL_UARTEx_SetRxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 f8a0 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_USART1_UART_Init+0x90>)
 8000df2:	f007 ff27 	bl	8008c44 <HAL_UARTEx_DisableFifoMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f000 f898 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000254 	.word	0x24000254
 8000e08:	40011000 	.word	0x40011000

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_GPIO_Init+0x50>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	58024400 	.word	0x58024400

08000e60 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <PMT_init+0x28>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e70:	2200      	movs	r2, #0
 8000e72:	2101      	movs	r1, #1
 8000e74:	f008 f98e 	bl	8009194 <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <PMT_init+0x2c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <PMT_init+0x2c>)
 8000e82:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e84:	e7f0      	b.n	8000e68 <PMT_init+0x8>
 8000e86:	bf00      	nop
 8000e88:	240002fc 	.word	0x240002fc
 8000e8c:	240002f8 	.word	0x240002f8

08000e90 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <ERPA_init+0x28>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	f008 f976 	bl	8009194 <osEventFlagsWait>
		erpa_seq++;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <ERPA_init+0x2c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <ERPA_init+0x2c>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f0      	b.n	8000e98 <ERPA_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240002fc 	.word	0x240002fc
 8000ebc:	240002f9 	.word	0x240002f9

08000ec0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HK_init+0x28>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	f008 f95e 	bl	8009194 <osEventFlagsWait>
		hk_seq++;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HK_init+0x2c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <HK_init+0x2c>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee4:	e7f0      	b.n	8000ec8 <HK_init+0x8>
 8000ee6:	bf00      	nop
 8000ee8:	240002fc 	.word	0x240002fc
 8000eec:	240002fa 	.word	0x240002fa

08000ef0 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4902      	ldr	r1, [pc, #8]	; (8000f04 <UART_RX_init+0x14>)
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <UART_RX_init+0x18>)
 8000efe:	f005 fc55 	bl	80067ac <HAL_UART_Receive_IT>
 8000f02:	e7f9      	b.n	8000ef8 <UART_RX_init+0x8>
 8000f04:	24000300 	.word	0x24000300
 8000f08:	24000254 	.word	0x24000254

08000f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f1e:	f000 fc77 	bl	8001810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40001000 	.word	0x40001000

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x38>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_MspInit+0x38>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_MspInit+0x38>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	210f      	movs	r1, #15
 8000f64:	f06f 0001 	mvn.w	r0, #1
 8000f68:	f000 fd36 	bl	80019d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ba      	sub	sp, #232	; 0xe8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	22c0      	movs	r2, #192	; 0xc0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00b f87f 	bl	800c09c <memset>
  if(hi2c->Instance==I2C1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_I2C_MspInit+0xc8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d146      	bne.n	8001036 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa8:	f04f 0208 	mov.w	r2, #8
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fddc 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fca:	f7ff ffb1 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <HAL_I2C_MspInit+0xd0>)
 8001014:	f001 fa6c 	bl	80024f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_I2C_MspInit+0xcc>)
 800102a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	37e8      	adds	r7, #232	; 0xe8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40005400 	.word	0x40005400
 8001044:	58024400 	.word	0x58024400
 8001048:	58020400 	.word	0x58020400

0800104c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ba      	sub	sp, #232	; 0xe8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	22c0      	movs	r2, #192	; 0xc0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00b f815 	bl	800c09c <memset>
  if(hspi->Instance==SPI2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_SPI_MspInit+0xc4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d145      	bne.n	8001108 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800107c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001088:	2300      	movs	r3, #0
 800108a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fd73 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800109c:	f7ff ff48 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_SPI_MspInit+0xc8>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f6:	2305      	movs	r3, #5
 80010f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_SPI_MspInit+0xcc>)
 8001104:	f001 f9f4 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	37e8      	adds	r7, #232	; 0xe8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40003800 	.word	0x40003800
 8001114:	58024400 	.word	0x58024400
 8001118:	58020400 	.word	0x58020400

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_TIM_Base_MspInit+0xec>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12f      	bne.n	800118e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 8001130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001134:	4a35      	ldr	r2, [pc, #212]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 8001140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2105      	movs	r1, #5
 8001150:	2018      	movs	r0, #24
 8001152:	f000 fc41 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001156:	2018      	movs	r0, #24
 8001158:	f000 fc58 	bl	8001a0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2019      	movs	r0, #25
 8001162:	f000 fc39 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001166:	2019      	movs	r0, #25
 8001168:	f000 fc50 	bl	8001a0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	201a      	movs	r0, #26
 8001172:	f000 fc31 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001176:	201a      	movs	r0, #26
 8001178:	f000 fc48 	bl	8001a0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2105      	movs	r1, #5
 8001180:	201b      	movs	r0, #27
 8001182:	f000 fc29 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001186:	201b      	movs	r0, #27
 8001188:	f000 fc40 	bl	8001a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800118c:	e038      	b.n	8001200 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001196:	d117      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 800119a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 80011aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	201c      	movs	r0, #28
 80011bc:	f000 fc0c 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c0:	201c      	movs	r0, #28
 80011c2:	f000 fc23 	bl	8001a0c <HAL_NVIC_EnableIRQ>
}
 80011c6:	e01b      	b.n	8001200 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_TIM_Base_MspInit+0xf4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d116      	bne.n	8001200 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 80011d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 80011e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2105      	movs	r1, #5
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fbef 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011fa:	201d      	movs	r0, #29
 80011fc:	f000 fc06 	bl	8001a0c <HAL_NVIC_EnableIRQ>
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010000 	.word	0x40010000
 800120c:	58024400 	.word	0x58024400
 8001210:	40000400 	.word	0x40000400

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ba      	sub	sp, #232	; 0xe8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	22c0      	movs	r2, #192	; 0xc0
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00a ff31 	bl	800c09c <memset>
  if(huart->Instance==USART1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <HAL_UART_MspInit+0xd8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d14e      	bne.n	80012e2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001244:	f04f 0201 	mov.w	r2, #1
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fc8e 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001266:	f7ff fe63 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 800126c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 800127c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_UART_MspInit+0xdc>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c0:	2307      	movs	r3, #7
 80012c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_UART_MspInit+0xe0>)
 80012ce:	f001 f90f 	bl	80024f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2025      	movs	r0, #37	; 0x25
 80012d8:	f000 fb7e 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012dc:	2025      	movs	r0, #37	; 0x25
 80012de:	f000 fb95 	bl	8001a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	37e8      	adds	r7, #232	; 0xe8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40011000 	.word	0x40011000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020000 	.word	0x58020000

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	d827      	bhi.n	8001356 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001306:	2200      	movs	r2, #0
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	2036      	movs	r0, #54	; 0x36
 800130c:	f000 fb64 	bl	80019d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001310:	2036      	movs	r0, #54	; 0x36
 8001312:	f000 fb7b 	bl	8001a0c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001316:	4a29      	ldr	r2, [pc, #164]	; (80013bc <HAL_InitTick+0xc4>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_InitTick+0xc8>)
 800131e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_InitTick+0xc8>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_InitTick+0xc8>)
 800132e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133a:	f107 0210 	add.w	r2, r7, #16
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fbd7 	bl	8003af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <HAL_InitTick+0x6a>
 8001354:	e001      	b.n	800135a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e02b      	b.n	80013b2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800135a:	f002 fba1 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 800135e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001360:	e004      	b.n	800136c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001362:	f002 fb9d 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8001366:	4603      	mov	r3, r0
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_InitTick+0xcc>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9b      	lsrs	r3, r3, #18
 8001376:	3b01      	subs	r3, #1
 8001378:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_InitTick+0xd0>)
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_InitTick+0xd4>)
 800137e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_InitTick+0xd0>)
 8001382:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001386:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_InitTick+0xd0>)
 800138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_InitTick+0xd0>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_InitTick+0xd0>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <HAL_InitTick+0xd0>)
 800139c:	f004 fb59 	bl	8005a52 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_InitTick+0xd0>)
 80013a8:	f004 fbaa 	bl	8005b00 <HAL_TIM_Base_Start_IT>
 80013ac:	4603      	mov	r3, r0
 80013ae:	e000      	b.n	80013b2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3740      	adds	r7, #64	; 0x40
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	24000008 	.word	0x24000008
 80013c0:	58024400 	.word	0x58024400
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	24000364 	.word	0x24000364
 80013cc:	40001000 	.word	0x40001000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM1_BRK_IRQHandler+0x10>)
 8001402:	f004 fd4f 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24000170 	.word	0x24000170

08001410 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM1_UP_IRQHandler+0x10>)
 8001416:	f004 fd45 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000170 	.word	0x24000170

08001424 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM1_TRG_COM_IRQHandler+0x10>)
 800142a:	f004 fd3b 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000170 	.word	0x24000170

08001438 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM1_CC_IRQHandler+0x10>)
 800143e:	f004 fd31 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24000170 	.word	0x24000170

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM2_IRQHandler+0x10>)
 8001452:	f004 fd27 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240001bc 	.word	0x240001bc

08001460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x10>)
 8001466:	f004 fd1d 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000208 	.word	0x24000208

08001474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART1_IRQHandler+0x10>)
 800147a:	f005 f9e3 	bl	8006844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	24000254 	.word	0x24000254

08001488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM6_DAC_IRQHandler+0x10>)
 800148e:	f004 fd09 	bl	8005ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	24000364 	.word	0x24000364

0800149c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <ITM_SendChar+0x48>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <ITM_SendChar+0x48>)
 80014ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <ITM_SendChar+0x4c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <ITM_SendChar+0x4c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80014be:	bf00      	nop
 80014c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f8      	beq.n	80014c0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80014ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000edfc 	.word	0xe000edfc
 80014e8:	e0000e00 	.word	0xe0000e00

080014ec <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
		*ptr++ = __io_getchar();
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
	}

	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e009      	b.n	800154c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ffab 	bl	800149c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <_write+0x12>
	}
	return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_close>:

int _close(int file) {
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	605a      	str	r2, [r3, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file) {
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
		errno = ENOMEM;
 80015f8:	f00a fd18 	bl	800c02c <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	24080000 	.word	0x24080000
 8001628:	00000400 	.word	0x00000400
 800162c:	240003b0 	.word	0x240003b0
 8001630:	24004d18 	.word	0x24004d18

08001634 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <SystemInit+0xe4>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <SystemInit+0xe4>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <SystemInit+0xe8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2b06      	cmp	r3, #6
 8001652:	d807      	bhi.n	8001664 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <SystemInit+0xe8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 030f 	bic.w	r3, r3, #15
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <SystemInit+0xe8>)
 800165e:	f043 0307 	orr.w	r3, r3, #7
 8001662:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <SystemInit+0xec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <SystemInit+0xec>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <SystemInit+0xec>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <SystemInit+0xec>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4929      	ldr	r1, [pc, #164]	; (8001720 <SystemInit+0xec>)
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SystemInit+0xf0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <SystemInit+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <SystemInit+0xe8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 030f 	bic.w	r3, r3, #15
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <SystemInit+0xe8>)
 8001698:	f043 0307 	orr.w	r3, r3, #7
 800169c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <SystemInit+0xec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <SystemInit+0xec>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <SystemInit+0xec>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <SystemInit+0xec>)
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <SystemInit+0xf4>)
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <SystemInit+0xec>)
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <SystemInit+0xf8>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <SystemInit+0xec>)
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <SystemInit+0xfc>)
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <SystemInit+0xec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <SystemInit+0xec>)
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <SystemInit+0xfc>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <SystemInit+0xec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <SystemInit+0xec>)
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <SystemInit+0xfc>)
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <SystemInit+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <SystemInit+0xec>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <SystemInit+0xec>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <SystemInit+0xec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <SystemInit+0x100>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <SystemInit+0x104>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016fe:	d202      	bcs.n	8001706 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <SystemInit+0x108>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <SystemInit+0x10c>)
 8001708:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800170c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	52002000 	.word	0x52002000
 8001720:	58024400 	.word	0x58024400
 8001724:	eaf6ed7f 	.word	0xeaf6ed7f
 8001728:	02020200 	.word	0x02020200
 800172c:	01ff0000 	.word	0x01ff0000
 8001730:	01010280 	.word	0x01010280
 8001734:	5c001000 	.word	0x5c001000
 8001738:	ffff0000 	.word	0xffff0000
 800173c:	51008108 	.word	0x51008108
 8001740:	52004000 	.word	0x52004000

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f7ff ff74 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f00a fc61 	bl	800c038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff f887 	bl	8000888 <main>
  bx  lr
 800177a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001780:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001784:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001788:	0800cdd8 	.word	0x0800cdd8
  ldr r2, =_sbss
 800178c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001790:	24004d18 	.word	0x24004d18

08001794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC3_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179e:	2003      	movs	r0, #3
 80017a0:	f000 f90f 	bl	80019c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a4:	f001 ffd2 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_Init+0x68>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	4913      	ldr	r1, [pc, #76]	; (8001804 <HAL_Init+0x6c>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_Init+0x68>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_Init+0x6c>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x70>)
 80017da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x74>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	200f      	movs	r0, #15
 80017e4:	f7ff fd88 	bl	80012f8 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e002      	b.n	80017f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f2:	f7ff fba3 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	58024400 	.word	0x58024400
 8001804:	0800cd2c 	.word	0x0800cd2c
 8001808:	24000004 	.word	0x24000004
 800180c:	24000000 	.word	0x24000000

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2400000c 	.word	0x2400000c
 8001834:	240003b4 	.word	0x240003b4

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	240003b4 	.word	0x240003b4

08001850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetREVID+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1b      	lsrs	r3, r3, #16
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	5c001000 	.word	0x5c001000

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	05fa0000 	.word	0x05fa0000

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff4c 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e6:	f7ff ff63 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	f7ff ffb3 	bl	800195c <NVIC_EncodePriority>
 80019f6:	4602      	mov	r2, r0
 80019f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff82 	bl	8001908 <__NVIC_SetPriority>
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff56 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ff02 	bl	8001838 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e2dc      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e2cd      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a76      	ldr	r2, [pc, #472]	; (8001c3c <HAL_DMA_Abort+0x214>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d04a      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a74      	ldr	r2, [pc, #464]	; (8001c40 <HAL_DMA_Abort+0x218>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d045      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a73      	ldr	r2, [pc, #460]	; (8001c44 <HAL_DMA_Abort+0x21c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d040      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a71      	ldr	r2, [pc, #452]	; (8001c48 <HAL_DMA_Abort+0x220>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d03b      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a70      	ldr	r2, [pc, #448]	; (8001c4c <HAL_DMA_Abort+0x224>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d036      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_DMA_Abort+0x228>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d031      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6d      	ldr	r2, [pc, #436]	; (8001c54 <HAL_DMA_Abort+0x22c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d02c      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	; (8001c58 <HAL_DMA_Abort+0x230>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d027      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_DMA_Abort+0x234>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a68      	ldr	r2, [pc, #416]	; (8001c60 <HAL_DMA_Abort+0x238>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01d      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a67      	ldr	r2, [pc, #412]	; (8001c64 <HAL_DMA_Abort+0x23c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d018      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_DMA_Abort+0x240>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <HAL_DMA_Abort+0x244>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00e      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a62      	ldr	r2, [pc, #392]	; (8001c70 <HAL_DMA_Abort+0x248>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a61      	ldr	r2, [pc, #388]	; (8001c74 <HAL_DMA_Abort+0x24c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d004      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5f      	ldr	r2, [pc, #380]	; (8001c78 <HAL_DMA_Abort+0x250>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_DMA_Abort+0xda>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_DMA_Abort+0xdc>
 8001b02:	2300      	movs	r3, #0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 021e 	bic.w	r2, r2, #30
 8001b16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00a      	b.n	8001b46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	; (8001c3c <HAL_DMA_Abort+0x214>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d072      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_DMA_Abort+0x218>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d06d      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_DMA_Abort+0x21c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d068      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a37      	ldr	r2, [pc, #220]	; (8001c48 <HAL_DMA_Abort+0x220>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d063      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <HAL_DMA_Abort+0x224>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d05e      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <HAL_DMA_Abort+0x228>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d059      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_DMA_Abort+0x22c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d054      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <HAL_DMA_Abort+0x230>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d04f      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_DMA_Abort+0x234>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d04a      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_DMA_Abort+0x238>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d045      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_DMA_Abort+0x23c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d040      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_DMA_Abort+0x240>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d03b      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_DMA_Abort+0x244>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d036      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_DMA_Abort+0x248>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d031      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_DMA_Abort+0x24c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d02c      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_DMA_Abort+0x250>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d027      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_DMA_Abort+0x254>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Abort+0x258>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01d      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_DMA_Abort+0x25c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d018      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_DMA_Abort+0x260>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_DMA_Abort+0x264>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_DMA_Abort+0x268>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_DMA_Abort+0x26c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_DMA_Abort+0x270>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d132      	bne.n	8001c9c <HAL_DMA_Abort+0x274>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e031      	b.n	8001c9e <HAL_DMA_Abort+0x276>
 8001c3a:	bf00      	nop
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	40020028 	.word	0x40020028
 8001c44:	40020040 	.word	0x40020040
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40020070 	.word	0x40020070
 8001c50:	40020088 	.word	0x40020088
 8001c54:	400200a0 	.word	0x400200a0
 8001c58:	400200b8 	.word	0x400200b8
 8001c5c:	40020410 	.word	0x40020410
 8001c60:	40020428 	.word	0x40020428
 8001c64:	40020440 	.word	0x40020440
 8001c68:	40020458 	.word	0x40020458
 8001c6c:	40020470 	.word	0x40020470
 8001c70:	40020488 	.word	0x40020488
 8001c74:	400204a0 	.word	0x400204a0
 8001c78:	400204b8 	.word	0x400204b8
 8001c7c:	58025408 	.word	0x58025408
 8001c80:	5802541c 	.word	0x5802541c
 8001c84:	58025430 	.word	0x58025430
 8001c88:	58025444 	.word	0x58025444
 8001c8c:	58025458 	.word	0x58025458
 8001c90:	5802546c 	.word	0x5802546c
 8001c94:	58025480 	.word	0x58025480
 8001c98:	58025494 	.word	0x58025494
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6d      	ldr	r2, [pc, #436]	; (8001e6c <HAL_DMA_Abort+0x444>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <HAL_DMA_Abort+0x448>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_DMA_Abort+0x44c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a68      	ldr	r2, [pc, #416]	; (8001e78 <HAL_DMA_Abort+0x450>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_DMA_Abort+0x454>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_DMA_Abort+0x458>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	; (8001e84 <HAL_DMA_Abort+0x45c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a62      	ldr	r2, [pc, #392]	; (8001e88 <HAL_DMA_Abort+0x460>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_DMA_Abort+0x464>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5f      	ldr	r2, [pc, #380]	; (8001e90 <HAL_DMA_Abort+0x468>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	; (8001e94 <HAL_DMA_Abort+0x46c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5c      	ldr	r2, [pc, #368]	; (8001e98 <HAL_DMA_Abort+0x470>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	; (8001e9c <HAL_DMA_Abort+0x474>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <HAL_DMA_Abort+0x478>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_DMA_Abort+0x47c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_DMA_Abort+0x480>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <HAL_DMA_Abort+0x33c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_DMA_Abort+0x34c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d74:	e013      	b.n	8001d9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff fd5f 	bl	8001838 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d90c      	bls.n	8001d9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e12d      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1e5      	bne.n	8001d76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <HAL_DMA_Abort+0x444>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04a      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <HAL_DMA_Abort+0x448>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_DMA_Abort+0x44c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d040      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <HAL_DMA_Abort+0x450>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d03b      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_DMA_Abort+0x454>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_DMA_Abort+0x458>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d031      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_DMA_Abort+0x45c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d02c      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <HAL_DMA_Abort+0x460>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d027      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_DMA_Abort+0x464>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_DMA_Abort+0x468>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <HAL_DMA_Abort+0x46c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_DMA_Abort+0x470>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <HAL_DMA_Abort+0x474>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_DMA_Abort+0x478>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_DMA_Abort+0x47c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_DMA_Abort+0x480>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Abort+0x426>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_Abort+0x428>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02b      	beq.n	8001eac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e02a      	b.n	8001ec2 <HAL_DMA_Abort+0x49a>
 8001e6c:	40020010 	.word	0x40020010
 8001e70:	40020028 	.word	0x40020028
 8001e74:	40020040 	.word	0x40020040
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	40020070 	.word	0x40020070
 8001e80:	40020088 	.word	0x40020088
 8001e84:	400200a0 	.word	0x400200a0
 8001e88:	400200b8 	.word	0x400200b8
 8001e8c:	40020410 	.word	0x40020410
 8001e90:	40020428 	.word	0x40020428
 8001e94:	40020440 	.word	0x40020440
 8001e98:	40020458 	.word	0x40020458
 8001e9c:	40020470 	.word	0x40020470
 8001ea0:	40020488 	.word	0x40020488
 8001ea4:	400204a0 	.word	0x400204a0
 8001ea8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4f      	ldr	r2, [pc, #316]	; (8002004 <HAL_DMA_Abort+0x5dc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d072      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_DMA_Abort+0x5e0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d06d      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_DMA_Abort+0x5e4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d068      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_DMA_Abort+0x5e8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d063      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_DMA_Abort+0x5ec>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d05e      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_DMA_Abort+0x5f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d059      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_DMA_Abort+0x5f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d054      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_DMA_Abort+0x5f8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d04f      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_DMA_Abort+0x5fc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_DMA_Abort+0x600>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a40      	ldr	r2, [pc, #256]	; (800202c <HAL_DMA_Abort+0x604>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_DMA_Abort+0x608>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_DMA_Abort+0x60c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <HAL_DMA_Abort+0x610>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_DMA_Abort+0x614>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_DMA_Abort+0x618>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_DMA_Abort+0x61c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a35      	ldr	r2, [pc, #212]	; (8002048 <HAL_DMA_Abort+0x620>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_DMA_Abort+0x624>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_DMA_Abort+0x628>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a31      	ldr	r2, [pc, #196]	; (8002054 <HAL_DMA_Abort+0x62c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <HAL_DMA_Abort+0x630>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2e      	ldr	r2, [pc, #184]	; (800205c <HAL_DMA_Abort+0x634>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_DMA_Abort+0x638>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Abort+0x58e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_Abort+0x590>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fc4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fe6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40020010 	.word	0x40020010
 8002008:	40020028 	.word	0x40020028
 800200c:	40020040 	.word	0x40020040
 8002010:	40020058 	.word	0x40020058
 8002014:	40020070 	.word	0x40020070
 8002018:	40020088 	.word	0x40020088
 800201c:	400200a0 	.word	0x400200a0
 8002020:	400200b8 	.word	0x400200b8
 8002024:	40020410 	.word	0x40020410
 8002028:	40020428 	.word	0x40020428
 800202c:	40020440 	.word	0x40020440
 8002030:	40020458 	.word	0x40020458
 8002034:	40020470 	.word	0x40020470
 8002038:	40020488 	.word	0x40020488
 800203c:	400204a0 	.word	0x400204a0
 8002040:	400204b8 	.word	0x400204b8
 8002044:	58025408 	.word	0x58025408
 8002048:	5802541c 	.word	0x5802541c
 800204c:	58025430 	.word	0x58025430
 8002050:	58025444 	.word	0x58025444
 8002054:	58025458 	.word	0x58025458
 8002058:	5802546c 	.word	0x5802546c
 800205c:	58025480 	.word	0x58025480
 8002060:	58025494 	.word	0x58025494

08002064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e237      	b.n	80024e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d004      	beq.n	800208c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e22c      	b.n	80024e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_DMA_Abort_IT+0x1a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d04a      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_DMA_Abort_IT+0x1a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d045      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a59      	ldr	r2, [pc, #356]	; (800220c <HAL_DMA_Abort_IT+0x1a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d040      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_DMA_Abort_IT+0x1ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_DMA_Abort_IT+0x1b0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d036      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_DMA_Abort_IT+0x1b4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a53      	ldr	r2, [pc, #332]	; (800221c <HAL_DMA_Abort_IT+0x1b8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02c      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_DMA_Abort_IT+0x1bc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d027      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a50      	ldr	r2, [pc, #320]	; (8002224 <HAL_DMA_Abort_IT+0x1c0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d022      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4f      	ldr	r2, [pc, #316]	; (8002228 <HAL_DMA_Abort_IT+0x1c4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01d      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	; (800222c <HAL_DMA_Abort_IT+0x1c8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <HAL_DMA_Abort_IT+0x1cc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_DMA_Abort_IT+0x1d0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_DMA_Abort_IT+0x1d4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_DMA_Abort_IT+0x1d8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_DMA_Abort_IT+0x1dc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Abort_IT+0xcc>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_DMA_Abort_IT+0xce>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8086 	beq.w	8002244 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_DMA_Abort_IT+0x1a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d04a      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <HAL_DMA_Abort_IT+0x1a4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d045      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <HAL_DMA_Abort_IT+0x1a8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d040      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <HAL_DMA_Abort_IT+0x1ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d03b      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a29      	ldr	r2, [pc, #164]	; (8002214 <HAL_DMA_Abort_IT+0x1b0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d036      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_DMA_Abort_IT+0x1b4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d031      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_DMA_Abort_IT+0x1b8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02c      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_DMA_Abort_IT+0x1bc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d027      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_DMA_Abort_IT+0x1c0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d022      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_DMA_Abort_IT+0x1c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d01d      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <HAL_DMA_Abort_IT+0x1c8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d018      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <HAL_DMA_Abort_IT+0x1cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_DMA_Abort_IT+0x1d0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00e      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_DMA_Abort_IT+0x1d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_DMA_Abort_IT+0x1d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d004      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_DMA_Abort_IT+0x1dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x18e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e178      	b.n	80024e4 <HAL_DMA_Abort_IT+0x480>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e16f      	b.n	80024e4 <HAL_DMA_Abort_IT+0x480>
 8002204:	40020010 	.word	0x40020010
 8002208:	40020028 	.word	0x40020028
 800220c:	40020040 	.word	0x40020040
 8002210:	40020058 	.word	0x40020058
 8002214:	40020070 	.word	0x40020070
 8002218:	40020088 	.word	0x40020088
 800221c:	400200a0 	.word	0x400200a0
 8002220:	400200b8 	.word	0x400200b8
 8002224:	40020410 	.word	0x40020410
 8002228:	40020428 	.word	0x40020428
 800222c:	40020440 	.word	0x40020440
 8002230:	40020458 	.word	0x40020458
 8002234:	40020470 	.word	0x40020470
 8002238:	40020488 	.word	0x40020488
 800223c:	400204a0 	.word	0x400204a0
 8002240:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020e 	bic.w	r2, r2, #14
 8002252:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6c      	ldr	r2, [pc, #432]	; (800240c <HAL_DMA_Abort_IT+0x3a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <HAL_DMA_Abort_IT+0x3ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d045      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_DMA_Abort_IT+0x3b0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_DMA_Abort_IT+0x3b4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03b      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a66      	ldr	r2, [pc, #408]	; (800241c <HAL_DMA_Abort_IT+0x3b8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_DMA_Abort_IT+0x3bc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d031      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a63      	ldr	r2, [pc, #396]	; (8002424 <HAL_DMA_Abort_IT+0x3c0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a62      	ldr	r2, [pc, #392]	; (8002428 <HAL_DMA_Abort_IT+0x3c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d027      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a60      	ldr	r2, [pc, #384]	; (800242c <HAL_DMA_Abort_IT+0x3c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <HAL_DMA_Abort_IT+0x3cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d01d      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	; (8002434 <HAL_DMA_Abort_IT+0x3d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_DMA_Abort_IT+0x3d4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5a      	ldr	r2, [pc, #360]	; (800243c <HAL_DMA_Abort_IT+0x3d8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a59      	ldr	r2, [pc, #356]	; (8002440 <HAL_DMA_Abort_IT+0x3dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_DMA_Abort_IT+0x3e0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a56      	ldr	r2, [pc, #344]	; (8002448 <HAL_DMA_Abort_IT+0x3e4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d108      	bne.n	8002306 <HAL_DMA_Abort_IT+0x2a2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <HAL_DMA_Abort_IT+0x2b2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3c      	ldr	r2, [pc, #240]	; (800240c <HAL_DMA_Abort_IT+0x3a8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d072      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_DMA_Abort_IT+0x3ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d06d      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a39      	ldr	r2, [pc, #228]	; (8002414 <HAL_DMA_Abort_IT+0x3b0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d068      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a37      	ldr	r2, [pc, #220]	; (8002418 <HAL_DMA_Abort_IT+0x3b4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d063      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a36      	ldr	r2, [pc, #216]	; (800241c <HAL_DMA_Abort_IT+0x3b8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d05e      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_DMA_Abort_IT+0x3bc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d059      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a33      	ldr	r2, [pc, #204]	; (8002424 <HAL_DMA_Abort_IT+0x3c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d054      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a31      	ldr	r2, [pc, #196]	; (8002428 <HAL_DMA_Abort_IT+0x3c4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04f      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a30      	ldr	r2, [pc, #192]	; (800242c <HAL_DMA_Abort_IT+0x3c8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04a      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2e      	ldr	r2, [pc, #184]	; (8002430 <HAL_DMA_Abort_IT+0x3cc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d045      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <HAL_DMA_Abort_IT+0x3d0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d040      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_DMA_Abort_IT+0x3d4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03b      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_DMA_Abort_IT+0x3d8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <HAL_DMA_Abort_IT+0x3dc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_DMA_Abort_IT+0x3e0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02c      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_DMA_Abort_IT+0x3e4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d027      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a24      	ldr	r2, [pc, #144]	; (800244c <HAL_DMA_Abort_IT+0x3e8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_DMA_Abort_IT+0x3ec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <HAL_DMA_Abort_IT+0x3f0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_DMA_Abort_IT+0x3f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <HAL_DMA_Abort_IT+0x3f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_DMA_Abort_IT+0x3fc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_DMA_Abort_IT+0x400>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_DMA_Abort_IT+0x404>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d132      	bne.n	800246c <HAL_DMA_Abort_IT+0x408>
 8002406:	2301      	movs	r3, #1
 8002408:	e031      	b.n	800246e <HAL_DMA_Abort_IT+0x40a>
 800240a:	bf00      	nop
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
 800244c:	58025408 	.word	0x58025408
 8002450:	5802541c 	.word	0x5802541c
 8002454:	58025430 	.word	0x58025430
 8002458:	58025444 	.word	0x58025444
 800245c:	58025458 	.word	0x58025458
 8002460:	5802546c 	.word	0x5802546c
 8002464:	58025480 	.word	0x58025480
 8002468:	58025494 	.word	0x58025494
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d028      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002480:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_GPIO_Init+0x234>)
 8002500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002502:	e194      	b.n	800282e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8186 	beq.w	8002828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d005      	beq.n	8002534 <HAL_GPIO_Init+0x44>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d130      	bne.n	8002596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256a:	2201      	movs	r2, #1
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0201 	and.w	r2, r3, #1
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d017      	beq.n	80025d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d123      	bne.n	8002626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80e0 	beq.w	8002828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_GPIO_Init+0x238>)
 800266a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800266e:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <HAL_GPIO_Init+0x238>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_GPIO_Init+0x238>)
 800267a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_GPIO_Init+0x23c>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_GPIO_Init+0x240>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d052      	beq.n	8002758 <HAL_GPIO_Init+0x268>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_GPIO_Init+0x244>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d031      	beq.n	800271e <HAL_GPIO_Init+0x22e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_GPIO_Init+0x248>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02b      	beq.n	800271a <HAL_GPIO_Init+0x22a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_GPIO_Init+0x24c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d025      	beq.n	8002716 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_GPIO_Init+0x250>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01f      	beq.n	8002712 <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_GPIO_Init+0x254>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d019      	beq.n	800270e <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <HAL_GPIO_Init+0x258>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0x21a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_GPIO_Init+0x25c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00d      	beq.n	8002706 <HAL_GPIO_Init+0x216>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x260>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <HAL_GPIO_Init+0x212>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_GPIO_Init+0x264>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_GPIO_Init+0x20e>
 80026fa:	2309      	movs	r3, #9
 80026fc:	e02d      	b.n	800275a <HAL_GPIO_Init+0x26a>
 80026fe:	230a      	movs	r3, #10
 8002700:	e02b      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002702:	2308      	movs	r3, #8
 8002704:	e029      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002706:	2307      	movs	r3, #7
 8002708:	e027      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800270a:	2306      	movs	r3, #6
 800270c:	e025      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800270e:	2305      	movs	r3, #5
 8002710:	e023      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002712:	2304      	movs	r3, #4
 8002714:	e021      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002716:	2303      	movs	r3, #3
 8002718:	e01f      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800271a:	2302      	movs	r3, #2
 800271c:	e01d      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800271e:	2301      	movs	r3, #1
 8002720:	e01b      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002722:	bf00      	nop
 8002724:	58000080 	.word	0x58000080
 8002728:	58024400 	.word	0x58024400
 800272c:	58000400 	.word	0x58000400
 8002730:	58020000 	.word	0x58020000
 8002734:	58020400 	.word	0x58020400
 8002738:	58020800 	.word	0x58020800
 800273c:	58020c00 	.word	0x58020c00
 8002740:	58021000 	.word	0x58021000
 8002744:	58021400 	.word	0x58021400
 8002748:	58021800 	.word	0x58021800
 800274c:	58021c00 	.word	0x58021c00
 8002750:	58022000 	.word	0x58022000
 8002754:	58022400 	.word	0x58022400
 8002758:	2300      	movs	r3, #0
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	f002 0203 	and.w	r2, r2, #3
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	4093      	lsls	r3, r2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276a:	4938      	ldr	r1, [pc, #224]	; (800284c <HAL_GPIO_Init+0x35c>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f47f ae63 	bne.w	8002504 <HAL_GPIO_Init+0x14>
  }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3724      	adds	r7, #36	; 0x24
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	58000400 	.word	0x58000400

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e08b      	b.n	800297a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fb7e 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e006      	b.n	80028d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d108      	bne.n	80028f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e007      	b.n	8002902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_I2C_Init+0x134>)
 800290e:	430b      	orrs	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69d9      	ldr	r1, [r3, #28]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	02008000 	.word	0x02008000

08002988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d138      	bne.n	8002a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e032      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d139      	bne.n	8002aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e033      	b.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2224      	movs	r2, #36	; 0x24
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00a      	beq.n	8002ae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e01f      	b.n	8002b1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e01d      	b.n	8002b1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_PWREx_ConfigSupply+0x70>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	490f      	ldr	r1, [pc, #60]	; (8002b28 <HAL_PWREx_ConfigSupply+0x70>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002af2:	f7fe fea1 	bl	8001838 <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002af8:	e009      	b.n	8002b0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002afa:	f7fe fe9d 	bl	8001838 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b08:	d901      	bls.n	8002b0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e007      	b.n	8002b1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_PWREx_ConfigSupply+0x70>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d1ee      	bne.n	8002afa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	58024800 	.word	0x58024800

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 bc48 	b.w	80033d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8088 	beq.w	8002c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b99      	ldr	r3, [pc, #612]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b58:	4b96      	ldr	r3, [pc, #600]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d007      	beq.n	8002b74 <HAL_RCC_OscConfig+0x48>
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	d111      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62>
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b8f      	ldr	r3, [pc, #572]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d06d      	beq.n	8002c5c <HAL_RCC_OscConfig+0x130>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d169      	bne.n	8002c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f000 bc21 	b.w	80033d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x7a>
 8002b98:	4b86      	ldr	r3, [pc, #536]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a85      	ldr	r2, [pc, #532]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x9c>
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a80      	ldr	r2, [pc, #512]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7d      	ldr	r2, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002bd2:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a77      	ldr	r2, [pc, #476]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a74      	ldr	r2, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002bec:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6e      	ldr	r3, [pc, #440]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6d      	ldr	r2, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fe14 	bl	8001838 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fe10 	bl	8001838 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e3d4      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe8>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe00 	bl	8001838 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fdfc 	bl	8001838 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e3c0      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c4e:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x110>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80ca 	beq.w	8002e00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c76:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_RCC_OscConfig+0x166>
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b18      	cmp	r3, #24
 8002c86:	d156      	bne.n	8002d36 <HAL_RCC_OscConfig+0x20a>
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d151      	bne.n	8002d36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x17e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e392      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002caa:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0219 	bic.w	r2, r3, #25
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	493f      	ldr	r1, [pc, #252]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fdbc 	bl	8001838 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fdb8 	bl	8001838 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e37c      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	f7fe fdb5 	bl	8001850 <HAL_GetREVID>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d817      	bhi.n	8002d20 <HAL_RCC_OscConfig+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d108      	bne.n	8002d0a <HAL_RCC_OscConfig+0x1de>
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d00:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e07a      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	4926      	ldr	r1, [pc, #152]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1e:	e06f      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4921      	ldr	r1, [pc, #132]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	e064      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d047      	beq.n	8002dce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0219 	bic.w	r2, r3, #25
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	491a      	ldr	r1, [pc, #104]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd72 	bl	8001838 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fd6e 	bl	8001838 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e332      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	f7fe fd6b 	bl	8001850 <HAL_GetREVID>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d819      	bhi.n	8002db8 <HAL_RCC_OscConfig+0x28c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d108      	bne.n	8002d9e <HAL_RCC_OscConfig+0x272>
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	6053      	str	r3, [r2, #4]
 8002d9c:	e030      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	031b      	lsls	r3, r3, #12
 8002dac:	4901      	ldr	r1, [pc, #4]	; (8002db4 <HAL_RCC_OscConfig+0x288>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
 8002db2:	e025      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
 8002db4:	58024400 	.word	0x58024400
 8002db8:	4b9a      	ldr	r3, [pc, #616]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	4997      	ldr	r1, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
 8002dcc:	e018      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b95      	ldr	r3, [pc, #596]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a94      	ldr	r2, [pc, #592]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fd2d 	bl	8001838 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe fd29 	bl	8001838 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e2ed      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002df4:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a9 	beq.w	8002f60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	4b85      	ldr	r3, [pc, #532]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e18:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d007      	beq.n	8002e34 <HAL_RCC_OscConfig+0x308>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b18      	cmp	r3, #24
 8002e28:	d13a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x374>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d135      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_OscConfig+0x320>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e2c1      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e4c:	f7fe fd00 	bl	8001850 <HAL_GetREVID>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d817      	bhi.n	8002e8a <HAL_RCC_OscConfig+0x35e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x348>
 8002e62:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e6a:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e72:	e075      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	4968      	ldr	r1, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e88:	e06a      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e8a:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	4962      	ldr	r1, [pc, #392]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e9e:	e05f      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d042      	beq.n	8002f2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fcc0 	bl	8001838 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fcbc 	bl	8001838 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e280      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ece:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eda:	f7fe fcb9 	bl	8001850 <HAL_GetREVID>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d817      	bhi.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d108      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3d6>
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ef8:	4a4a      	ldr	r2, [pc, #296]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002efe:	6053      	str	r3, [r2, #4]
 8002f00:	e02e      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	4944      	ldr	r1, [pc, #272]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
 8002f16:	e023      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
 8002f18:	4b42      	ldr	r3, [pc, #264]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	493f      	ldr	r1, [pc, #252]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
 8002f2c:	e018      	b.n	8002f60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fc7d 	bl	8001838 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f42:	f7fe fc79 	bl	8001838 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e23d      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f54:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d036      	beq.n	8002fda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d019      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fc5a 	bl	8001838 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe fc56 	bl	8001838 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e21a      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x45c>
 8002fa6:	e018      	b.n	8002fda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fc40 	bl	8001838 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fc3c 	bl	8001838 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e200      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d039      	beq.n	800305a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01c      	beq.n	8003028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8002ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fc1d 	bl	8001838 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003002:	f7fe fc19 	bl	8001838 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1dd      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_OscConfig+0x4f8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x4d6>
 8003020:	e01b      	b.n	800305a <HAL_RCC_OscConfig+0x52e>
 8003022:	bf00      	nop
 8003024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003028:	4b9b      	ldr	r3, [pc, #620]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a9a      	ldr	r2, [pc, #616]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800302e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003034:	f7fe fc00 	bl	8001838 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303c:	f7fe fbfc 	bl	8001838 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1c0      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800304e:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8081 	beq.w	800316a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003068:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_OscConfig+0x770>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a8b      	ldr	r2, [pc, #556]	; (800329c <HAL_RCC_OscConfig+0x770>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003074:	f7fe fbe0 	bl	8001838 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fe fbdc 	bl	8001838 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1a0      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308e:	4b83      	ldr	r3, [pc, #524]	; (800329c <HAL_RCC_OscConfig+0x770>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d106      	bne.n	80030b0 <HAL_RCC_OscConfig+0x584>
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a7c      	ldr	r2, [pc, #496]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	e02d      	b.n	800310c <HAL_RCC_OscConfig+0x5e0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5a6>
 80030b8:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a76      	ldr	r2, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a73      	ldr	r2, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x5e0>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c8>
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a6b      	ldr	r2, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0x5e0>
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a67      	ldr	r2, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003106:	f023 0304 	bic.w	r3, r3, #4
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d015      	beq.n	8003140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fb90 	bl	8001838 <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fb8c 	bl	8001838 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e14e      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003132:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ee      	beq.n	800311c <HAL_RCC_OscConfig+0x5f0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe fb7a 	bl	8001838 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003146:	e00a      	b.n	800315e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fe fb76 	bl	8001838 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e138      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ee      	bne.n	8003148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 812d 	beq.w	80033ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003174:	4b48      	ldr	r3, [pc, #288]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800317c:	2b18      	cmp	r3, #24
 800317e:	f000 80bd 	beq.w	80032fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b02      	cmp	r3, #2
 8003188:	f040 809e 	bne.w	80032c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fb4e 	bl	8001838 <HAL_GetTick>
 800319c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fb4a 	bl	8001838 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e10e      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031be:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_OscConfig+0x774>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	4931      	ldr	r1, [pc, #196]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	628b      	str	r3, [r1, #40]	; 0x28
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	3b01      	subs	r3, #1
 80031de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	3b01      	subs	r3, #1
 80031e8:	025b      	lsls	r3, r3, #9
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	3b01      	subs	r3, #1
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	3b01      	subs	r3, #1
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003208:	4923      	ldr	r1, [pc, #140]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCC_OscConfig+0x778>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003226:	00d2      	lsls	r2, r2, #3
 8003228:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f023 020c 	bic.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4917      	ldr	r1, [pc, #92]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f023 0202 	bic.w	r2, r3, #2
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	4912      	ldr	r1, [pc, #72]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <HAL_RCC_OscConfig+0x76c>)
 8003288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe fad3 	bl	8001838 <HAL_GetTick>
 8003292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003294:	e011      	b.n	80032ba <HAL_RCC_OscConfig+0x78e>
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
 800329c:	58024800 	.word	0x58024800
 80032a0:	fffffc0c 	.word	0xfffffc0c
 80032a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe fac6 	bl	8001838 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e08a      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x77c>
 80032c6:	e082      	b.n	80033ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a42      	ldr	r2, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80032ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fab0 	bl	8001838 <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe faac 	bl	8001838 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e070      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x7b0>
 80032fa:	e068      	b.n	80033ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003302:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	d031      	beq.n	8003374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d12a      	bne.n	8003374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d122      	bne.n	8003374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d11a      	bne.n	8003374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0a5b      	lsrs	r3, r3, #9
 8003342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d111      	bne.n	8003374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d108      	bne.n	8003374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0e1b      	lsrs	r3, r3, #24
 8003366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e02b      	b.n	80033d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d01f      	beq.n	80033ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800339a:	f7fe fa4d 	bl	8001838 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033a0:	bf00      	nop
 80033a2:	f7fe fa49 	bl	8001838 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d0f9      	beq.n	80033a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80033b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_OscConfig+0x8b0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ba:	00d2      	lsls	r2, r2, #3
 80033bc:	4906      	ldr	r1, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_RCC_OscConfig+0x8ac>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3730      	adds	r7, #48	; 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	58024400 	.word	0x58024400
 80033dc:	ffff0007 	.word	0xffff0007

080033e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e19c      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b8a      	ldr	r3, [pc, #552]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b87      	ldr	r3, [pc, #540]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	4985      	ldr	r1, [pc, #532]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b83      	ldr	r3, [pc, #524]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e184      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800343c:	429a      	cmp	r2, r3
 800343e:	d908      	bls.n	8003452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003440:	4b78      	ldr	r3, [pc, #480]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4975      	ldr	r1, [pc, #468]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 800344e:	4313      	orrs	r3, r2
 8003450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d010      	beq.n	8003480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800346a:	429a      	cmp	r2, r3
 800346c:	d908      	bls.n	8003480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	496a      	ldr	r1, [pc, #424]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003498:	429a      	cmp	r2, r3
 800349a:	d908      	bls.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800349c:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	495e      	ldr	r1, [pc, #376]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d908      	bls.n	80034dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034ca:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4953      	ldr	r1, [pc, #332]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d908      	bls.n	800350a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f023 020f 	bic.w	r2, r3, #15
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4947      	ldr	r1, [pc, #284]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003506:	4313      	orrs	r3, r2
 8003508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d055      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4940      	ldr	r1, [pc, #256]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003524:	4313      	orrs	r3, r2
 8003526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d107      	bne.n	8003540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003530:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d121      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0f6      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d115      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ea      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003560:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0de      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003570:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0d6      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f023 0207 	bic.w	r2, r3, #7
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 800358e:	4313      	orrs	r3, r2
 8003590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003592:	f7fe f951 	bl	8001838 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359a:	f7fe f94d 	bl	8001838 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0be      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b0:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	429a      	cmp	r2, r3
 80035c0:	d1eb      	bne.n	800359a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	429a      	cmp	r2, r3
 80035dc:	d208      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	490e      	ldr	r1, [pc, #56]	; (8003624 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d214      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 020f 	bic.w	r2, r3, #15
 8003606:	4906      	ldr	r1, [pc, #24]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_RCC_ClockConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e086      	b.n	800372e <HAL_RCC_ClockConfig+0x34e>
 8003620:	52002000 	.word	0x52002000
 8003624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003640:	429a      	cmp	r2, r3
 8003642:	d208      	bcs.n	8003656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4939      	ldr	r1, [pc, #228]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003652:	4313      	orrs	r3, r2
 8003654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800366e:	429a      	cmp	r2, r3
 8003670:	d208      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	492e      	ldr	r1, [pc, #184]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003680:	4313      	orrs	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699a      	ldr	r2, [r3, #24]
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800369c:	429a      	cmp	r2, r3
 800369e:	d208      	bcs.n	80036b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4922      	ldr	r1, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d208      	bcs.n	80036e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4917      	ldr	r1, [pc, #92]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036e0:	f000 f834 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	4912      	ldr	r1, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x35c>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCC_ClockConfig+0x358>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_RCC_ClockConfig+0x35c>)
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x360>)
 8003716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x364>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x368>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fde8 	bl	80012f8 <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
 800373c:	0800cd2c 	.word	0x0800cd2c
 8003740:	24000004 	.word	0x24000004
 8003744:	24000000 	.word	0x24000000
 8003748:	24000008 	.word	0x24000008

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003752:	4bb3      	ldr	r3, [pc, #716]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375a:	2b18      	cmp	r3, #24
 800375c:	f200 8155 	bhi.w	8003a0a <HAL_RCC_GetSysClockFreq+0x2be>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	080037cd 	.word	0x080037cd
 800376c:	08003a0b 	.word	0x08003a0b
 8003770:	08003a0b 	.word	0x08003a0b
 8003774:	08003a0b 	.word	0x08003a0b
 8003778:	08003a0b 	.word	0x08003a0b
 800377c:	08003a0b 	.word	0x08003a0b
 8003780:	08003a0b 	.word	0x08003a0b
 8003784:	08003a0b 	.word	0x08003a0b
 8003788:	080037f3 	.word	0x080037f3
 800378c:	08003a0b 	.word	0x08003a0b
 8003790:	08003a0b 	.word	0x08003a0b
 8003794:	08003a0b 	.word	0x08003a0b
 8003798:	08003a0b 	.word	0x08003a0b
 800379c:	08003a0b 	.word	0x08003a0b
 80037a0:	08003a0b 	.word	0x08003a0b
 80037a4:	08003a0b 	.word	0x08003a0b
 80037a8:	080037f9 	.word	0x080037f9
 80037ac:	08003a0b 	.word	0x08003a0b
 80037b0:	08003a0b 	.word	0x08003a0b
 80037b4:	08003a0b 	.word	0x08003a0b
 80037b8:	08003a0b 	.word	0x08003a0b
 80037bc:	08003a0b 	.word	0x08003a0b
 80037c0:	08003a0b 	.word	0x08003a0b
 80037c4:	08003a0b 	.word	0x08003a0b
 80037c8:	080037ff 	.word	0x080037ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037cc:	4b94      	ldr	r3, [pc, #592]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037d8:	4b91      	ldr	r3, [pc, #580]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	4a90      	ldr	r2, [pc, #576]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80037ea:	e111      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037ec:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037ee:	61bb      	str	r3, [r7, #24]
      break;
 80037f0:	e10e      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037f2:	4b8d      	ldr	r3, [pc, #564]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037f4:	61bb      	str	r3, [r7, #24]
      break;
 80037f6:	e10b      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037f8:	4b8c      	ldr	r3, [pc, #560]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037fa:	61bb      	str	r3, [r7, #24]
      break;
 80037fc:	e108      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037fe:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003814:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800381e:	4b80      	ldr	r3, [pc, #512]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	08db      	lsrs	r3, r3, #3
 8003824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80e1 	beq.w	8003a04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b02      	cmp	r3, #2
 8003846:	f000 8083 	beq.w	8003950 <HAL_RCC_GetSysClockFreq+0x204>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b02      	cmp	r3, #2
 800384e:	f200 80a1 	bhi.w	8003994 <HAL_RCC_GetSysClockFreq+0x248>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x114>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d056      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x1c0>
 800385e:	e099      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02d      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800386c:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	4a6b      	ldr	r2, [pc, #428]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038c6:	e087      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a34 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800390a:	e065      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800394e:	e043      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a02 	vldr	s12, [r7, #8]
 8003976:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003992:	e021      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	0a5b      	lsrs	r3, r3, #9
 80039de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e2:	3301      	adds	r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fc:	ee17 3a90 	vmov	r3, s15
 8003a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a02:	e005      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
      break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a0c:	61bb      	str	r3, [r7, #24]
      break;
 8003a0e:	bf00      	nop
  }

  return sysclockfreq;
 8003a10:	69bb      	ldr	r3, [r7, #24]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	03d09000 	.word	0x03d09000
 8003a28:	003d0900 	.word	0x003d0900
 8003a2c:	017d7840 	.word	0x017d7840
 8003a30:	46000000 	.word	0x46000000
 8003a34:	4c742400 	.word	0x4c742400
 8003a38:	4a742400 	.word	0x4a742400
 8003a3c:	4bbebc20 	.word	0x4bbebc20

08003a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a46:	f7ff fe81 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490f      	ldr	r1, [pc, #60]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58024400 	.word	0x58024400
 8003a94:	0800cd2c 	.word	0x0800cd2c
 8003a98:	24000004 	.word	0x24000004
 8003a9c:	24000000 	.word	0x24000000

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003aa4:	f7ff ffcc 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	0800cd2c 	.word	0x0800cd2c

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ad0:	f7ff ffb6 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4904      	ldr	r1, [pc, #16]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58024400 	.word	0x58024400
 8003af4:	0800cd2c 	.word	0x0800cd2c

08003af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223f      	movs	r2, #63	; 0x3f
 8003b06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCC_GetClockConfig+0x7c>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_GetClockConfig+0x80>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	58024400 	.word	0x58024400
 8003b78:	52002000 	.word	0x52002000

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b0ca      	sub	sp, #296	; 0x128
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ba6:	d049      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb2:	d02f      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb8:	d828      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc4:	d822      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bce:	d007      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd2:	4bb8      	ldr	r3, [pc, #736]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4ab7      	ldr	r2, [pc, #732]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bde:	e01a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	3308      	adds	r3, #8
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fc8f 	bl	800550c <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3328      	adds	r3, #40	; 0x28
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fd36 	bl	8005670 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c1e:	4ba5      	ldr	r3, [pc, #660]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2c:	4aa1      	ldr	r2, [pc, #644]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	6513      	str	r3, [r2, #80]	; 0x50
 8003c32:	e003      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c48:	f04f 0900 	mov.w	r9, #0
 8003c4c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d82a      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c79 	.word	0x08003c79
 8003c68:	08003c87 	.word	0x08003c87
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003cbb 	.word	0x08003cbb
 8003c74:	08003cbb 	.word	0x08003cbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c78:	4b8e      	ldr	r3, [pc, #568]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a8d      	ldr	r2, [pc, #564]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c84:	e01a      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fc3c 	bl	800550c <RCCEx_PLL2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca0:	3328      	adds	r3, #40	; 0x28
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fce3 	bl	8005670 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	f023 0107 	bic.w	r1, r3, #7
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	4a78      	ldr	r2, [pc, #480]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003cee:	f04f 0b00 	mov.w	fp, #0
 8003cf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cf6:	d04c      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d030      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d08:	d829      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d02d      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d825      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d018      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d821      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d007      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d22:	e01c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a62      	ldr	r2, [pc, #392]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d30:	e01c      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	3308      	adds	r3, #8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fbe6 	bl	800550c <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d46:	e011      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4c:	3328      	adds	r3, #40	; 0x28
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fc8d 	bl	8005670 <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d74:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d78:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	4a4c      	ldr	r2, [pc, #304]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6513      	str	r3, [r2, #80]	; 0x50
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003d9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003da8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d053      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dbe:	d035      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dc4:	d82e      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dca:	d031      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dd0:	d828      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd6:	d01a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ddc:	d822      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de6:	d007      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003de8:	e01c      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df6:	e01c      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fb83 	bl	800550c <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e0c:	e011      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e12:	3328      	adds	r3, #40	; 0x28
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fc2a 	bl	8005670 <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e50:	e003      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d056      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e86:	d038      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8c:	d831      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e92:	d034      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e98:	d82b      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9e:	d01d      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea4:	d825      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003eaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003eb0:	e01f      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4ba2      	ldr	r3, [pc, #648]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4aa1      	ldr	r2, [pc, #644]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	3308      	adds	r3, #8
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 fb1c 	bl	800550c <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003eda:	e011      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	3328      	adds	r3, #40	; 0x28
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fbc3 	bl	8005670 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ef8:	e002      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f08:	4b8e      	ldr	r3, [pc, #568]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f18:	4a8a      	ldr	r2, [pc, #552]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d03a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	d01f      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d819      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d815      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d111      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f66:	4b77      	ldr	r3, [pc, #476]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4a76      	ldr	r2, [pc, #472]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f72:	e011      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	3308      	adds	r3, #8
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fac5 	bl	800550c <RCCEx_PLL2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	4a65      	ldr	r2, [pc, #404]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb4:	e003      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003fca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d051      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe8:	d035      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fee:	d82e      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff4:	d031      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ffa:	d828      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004000:	d01a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d822      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d007      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004012:	e01c      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a4a      	ldr	r2, [pc, #296]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004020:	e01c      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004026:	3308      	adds	r3, #8
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fa6e 	bl	800550c <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004036:	e011      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403c:	3328      	adds	r3, #40	; 0x28
 800403e:	2100      	movs	r1, #0
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fb15 	bl	8005670 <RCCEx_PLL3_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004054:	e002      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800405a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	4a34      	ldr	r2, [pc, #208]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6513      	str	r3, [r2, #80]	; 0x50
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800408e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d056      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d033      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b2:	d82c      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040b8:	d02f      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040be:	d826      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c4:	d02b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ca:	d820      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d0:	d012      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d6:	d81a      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d022      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d115      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	3308      	adds	r3, #8
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 fa0e 	bl	800550c <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040f6:	e015      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fc:	3328      	adds	r3, #40	; 0x28
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fab5 	bl	8005670 <RCCEx_PLL3_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800410c:	e00a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004116:	bf00      	nop
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413a:	4a02      	ldr	r2, [pc, #8]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6513      	str	r3, [r2, #80]	; 0x50
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800415c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d055      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800417c:	d033      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800417e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004182:	d82c      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d02f      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d826      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004194:	d02b      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800419a:	d820      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d012      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a6:	d81a      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d022      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b0:	d115      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	3308      	adds	r3, #8
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 f9a6 	bl	800550c <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c6:	e015      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	3328      	adds	r3, #40	; 0x28
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 fa4d 	bl	8005670 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041dc:	e00a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e4:	e006      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041fc:	4ba3      	ldr	r3, [pc, #652]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800420c:	4a9f      	ldr	r2, [pc, #636]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420e:	430b      	orrs	r3, r1
 8004210:	6593      	str	r3, [r2, #88]	; 0x58
 8004212:	e003      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d037      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004246:	d00e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424c:	d816      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d018      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004256:	d111      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4b8c      	ldr	r3, [pc, #560]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a8b      	ldr	r2, [pc, #556]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004264:	e00f      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426a:	3308      	adds	r3, #8
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f94c 	bl	800550c <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800427a:	e004      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428e:	4b7f      	ldr	r3, [pc, #508]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a7b      	ldr	r2, [pc, #492]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429e:	430b      	orrs	r3, r1
 80042a0:	6513      	str	r3, [r2, #80]	; 0x50
 80042a2:	e003      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d039      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d81c      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004319 	.word	0x08004319
 80042e0:	080042ed 	.word	0x080042ed
 80042e4:	080042fb 	.word	0x080042fb
 80042e8:	08004319 	.word	0x08004319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ec:	4b67      	ldr	r3, [pc, #412]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a66      	ldr	r2, [pc, #408]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042f8:	e00f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	3308      	adds	r3, #8
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f001 f902 	bl	800550c <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004322:	4b5a      	ldr	r3, [pc, #360]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	f023 0103 	bic.w	r1, r3, #3
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004330:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004332:	430b      	orrs	r3, r1
 8004334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800434c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	f000 809f 	beq.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004362:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4a      	ldr	r2, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800436e:	f7fd fa63 	bl	8001838 <HAL_GetTick>
 8004372:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004376:	e00b      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004378:	f7fd fa5e 	bl	8001838 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	; 0x64
 8004386:	d903      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800438e:	e005      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004390:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ed      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d179      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043a4:	4b39      	ldr	r3, [pc, #228]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043b0:	4053      	eors	r3, r2
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ba:	4b34      	ldr	r3, [pc, #208]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a30      	ldr	r2, [pc, #192]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a2d      	ldr	r2, [pc, #180]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043de:	4a2b      	ldr	r2, [pc, #172]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d118      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fd fa20 	bl	8001838 <HAL_GetTick>
 80043f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fc:	e00d      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fa1b 	bl	8001838 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	f241 3388 	movw	r3, #5000	; 0x1388
 800440e:	429a      	cmp	r2, r3
 8004410:	d903      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004418:	e005      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0eb      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800442a:	2b00      	cmp	r3, #0
 800442c:	d129      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443e:	d10e      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004450:	091a      	lsrs	r2, r3, #4
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004454:	4013      	ands	r3, r2
 8004456:	4a0d      	ldr	r2, [pc, #52]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6113      	str	r3, [r2, #16]
 800445c:	e005      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004468:	6113      	str	r3, [r2, #16]
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
 8004480:	e00e      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800448a:	e009      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800448c:	58024400 	.word	0x58024400
 8004490:	58024800 	.word	0x58024800
 8004494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800449c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f002 0301 	and.w	r3, r2, #1
 80044ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	f000 8089 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c8:	2b28      	cmp	r3, #40	; 0x28
 80044ca:	d86b      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080045ad 	.word	0x080045ad
 80044d8:	080045a5 	.word	0x080045a5
 80044dc:	080045a5 	.word	0x080045a5
 80044e0:	080045a5 	.word	0x080045a5
 80044e4:	080045a5 	.word	0x080045a5
 80044e8:	080045a5 	.word	0x080045a5
 80044ec:	080045a5 	.word	0x080045a5
 80044f0:	080045a5 	.word	0x080045a5
 80044f4:	08004579 	.word	0x08004579
 80044f8:	080045a5 	.word	0x080045a5
 80044fc:	080045a5 	.word	0x080045a5
 8004500:	080045a5 	.word	0x080045a5
 8004504:	080045a5 	.word	0x080045a5
 8004508:	080045a5 	.word	0x080045a5
 800450c:	080045a5 	.word	0x080045a5
 8004510:	080045a5 	.word	0x080045a5
 8004514:	0800458f 	.word	0x0800458f
 8004518:	080045a5 	.word	0x080045a5
 800451c:	080045a5 	.word	0x080045a5
 8004520:	080045a5 	.word	0x080045a5
 8004524:	080045a5 	.word	0x080045a5
 8004528:	080045a5 	.word	0x080045a5
 800452c:	080045a5 	.word	0x080045a5
 8004530:	080045a5 	.word	0x080045a5
 8004534:	080045ad 	.word	0x080045ad
 8004538:	080045a5 	.word	0x080045a5
 800453c:	080045a5 	.word	0x080045a5
 8004540:	080045a5 	.word	0x080045a5
 8004544:	080045a5 	.word	0x080045a5
 8004548:	080045a5 	.word	0x080045a5
 800454c:	080045a5 	.word	0x080045a5
 8004550:	080045a5 	.word	0x080045a5
 8004554:	080045ad 	.word	0x080045ad
 8004558:	080045a5 	.word	0x080045a5
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045ad 	.word	0x080045ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457c:	3308      	adds	r3, #8
 800457e:	2101      	movs	r1, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f000 ffc3 	bl	800550c <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800458c:	e00f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004592:	3328      	adds	r3, #40	; 0x28
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f86a 	bl	8005670 <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045b6:	4bbf      	ldr	r3, [pc, #764]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	4abb      	ldr	r2, [pc, #748]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c6:	430b      	orrs	r3, r1
 80045c8:	6553      	str	r3, [r2, #84]	; 0x54
 80045ca:	e003      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f002 0302 	and.w	r3, r2, #2
 80045e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d041      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d824      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004651 	.word	0x08004651
 8004608:	0800461d 	.word	0x0800461d
 800460c:	08004633 	.word	0x08004633
 8004610:	08004651 	.word	0x08004651
 8004614:	08004651 	.word	0x08004651
 8004618:	08004651 	.word	0x08004651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	3308      	adds	r3, #8
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ff71 	bl	800550c <RCCEx_PLL2_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004630:	e00f      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	3328      	adds	r3, #40	; 0x28
 8004638:	2101      	movs	r1, #1
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f818 	bl	8005670 <RCCEx_PLL3_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004646:	e004      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800464e:	e000      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800465a:	4b96      	ldr	r3, [pc, #600]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f023 0107 	bic.w	r1, r3, #7
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004668:	4a92      	ldr	r2, [pc, #584]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800466a:	430b      	orrs	r3, r1
 800466c:	6553      	str	r3, [r2, #84]	; 0x54
 800466e:	e003      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f002 0304 	and.w	r3, r2, #4
 8004684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800468e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d044      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d825      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046c5 	.word	0x080046c5
 80046b4:	080046db 	.word	0x080046db
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c8:	3308      	adds	r3, #8
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 ff1d 	bl	800550c <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046d8:	e00f      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	3328      	adds	r3, #40	; 0x28
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 ffc4 	bl	8005670 <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004702:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f023 0107 	bic.w	r1, r3, #7
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	4a68      	ldr	r2, [pc, #416]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6593      	str	r3, [r2, #88]	; 0x58
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f002 0320 	and.w	r3, r2, #32
 800472e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800473c:	460b      	mov	r3, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	d055      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800474e:	d033      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004754:	d82c      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d02f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d826      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004766:	d02b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800476c:	d820      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800476e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004772:	d012      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d81a      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d022      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800477e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004782:	d115      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	3308      	adds	r3, #8
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 febd 	bl	800550c <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004798:	e015      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479e:	3328      	adds	r3, #40	; 0x28
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 ff64 	bl	8005670 <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047ae:	e00a      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047b6:	e006      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b8:	bf00      	nop
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6553      	str	r3, [r2, #84]	; 0x54
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004808:	460b      	mov	r3, r1
 800480a:	4313      	orrs	r3, r2
 800480c:	d058      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800481a:	d033      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800481c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004820:	d82c      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d826      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800482e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004832:	d02b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004838:	d820      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800483a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483e:	d012      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004844:	d81a      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d022      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d115      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	3308      	adds	r3, #8
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fe57 	bl	800550c <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004864:	e015      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	3328      	adds	r3, #40	; 0x28
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fefe 	bl	8005670 <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800487a:	e00a      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004882:	e006      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004884:	bf00      	nop
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004888:	bf00      	nop
 800488a:	e002      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10e      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048aa:	4a02      	ldr	r2, [pc, #8]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6593      	str	r3, [r2, #88]	; 0x58
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048da:	460b      	mov	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	d055      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048ec:	d033      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048f2:	d82c      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d02f      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d826      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004904:	d02b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800490a:	d820      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800490c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004910:	d012      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004916:	d81a      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d022      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800491c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004920:	d115      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	3308      	adds	r3, #8
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fdee 	bl	800550c <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004936:	e015      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	3328      	adds	r3, #40	; 0x28
 800493e:	2102      	movs	r1, #2
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fe95 	bl	8005670 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800494c:	e00a      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800496c:	4ba1      	ldr	r3, [pc, #644]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800497c:	4a9d      	ldr	r2, [pc, #628]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497e:	430b      	orrs	r3, r1
 8004980:	6593      	str	r3, [r2, #88]	; 0x58
 8004982:	e003      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f002 0308 	and.w	r3, r2, #8
 8004998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d01e      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	3328      	adds	r3, #40	; 0x28
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fe54 	bl	8005670 <RCCEx_PLL3_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049d4:	4b87      	ldr	r3, [pc, #540]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	4a83      	ldr	r2, [pc, #524]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f002 0310 	and.w	r3, r2, #16
 80049f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d01e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1c:	3328      	adds	r3, #40	; 0x28
 8004a1e:	2102      	movs	r1, #2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fe25 	bl	8005670 <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a32:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a42:	4a6c      	ldr	r2, [pc, #432]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	d03e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a74:	d022      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7a:	d81b      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d00b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a86:	e015      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fd3b 	bl	800550c <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a9c:	e00f      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa2:	3328      	adds	r3, #40	; 0x28
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fde2 	bl	8005670 <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac6:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ad6:	4a47      	ldr	r2, [pc, #284]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6593      	str	r3, [r2, #88]	; 0x58
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004af2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004af4:	2300      	movs	r3, #0
 8004af6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004af8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004afc:	460b      	mov	r3, r1
 8004afe:	4313      	orrs	r3, r2
 8004b00:	d03b      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b0e:	d01f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b14:	d818      	bhi.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b20:	d007      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b24:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a32      	ldr	r2, [pc, #200]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b30:	e00f      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	3328      	adds	r3, #40	; 0x28
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fd98 	bl	8005670 <RCCEx_PLL3_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b46:	e004      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b4e:	e000      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b86:	673b      	str	r3, [r7, #112]	; 0x70
 8004b88:	2300      	movs	r3, #0
 8004b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d034      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d007      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ba6:	e011      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fca4 	bl	800550c <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bca:	e003      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	4a02      	ldr	r2, [pc, #8]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c0e:	2300      	movs	r3, #0
 8004c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d00c      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c20:	3328      	adds	r3, #40	; 0x28
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd23 	bl	8005670 <RCCEx_PLL3_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
 8004c44:	2300      	movs	r3, #0
 8004c46:	667b      	str	r3, [r7, #100]	; 0x64
 8004c48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d038      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5e:	d018      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c64:	d811      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6a:	d014      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c70:	d80b      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4bc3      	ldr	r3, [pc, #780]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4ac2      	ldr	r2, [pc, #776]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c88:	e008      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca4:	4bb9      	ldr	r3, [pc, #740]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb4:	4ab5      	ldr	r2, [pc, #724]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6553      	str	r3, [r2, #84]	; 0x54
 8004cba:	e003      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce0:	4baa      	ldr	r3, [pc, #680]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cee:	4aa7      	ldr	r2, [pc, #668]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004d00:	653b      	str	r3, [r7, #80]	; 0x50
 8004d02:	2300      	movs	r3, #0
 8004d04:	657b      	str	r3, [r7, #84]	; 0x54
 8004d06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d10:	4b9e      	ldr	r3, [pc, #632]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d20:	4a9a      	ldr	r2, [pc, #616]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d34:	2300      	movs	r3, #0
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d42:	4b92      	ldr	r3, [pc, #584]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	4a8e      	ldr	r2, [pc, #568]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	; 0x44
 8004d68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d72:	4b86      	ldr	r3, [pc, #536]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	4a85      	ldr	r2, [pc, #532]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d7c:	6113      	str	r3, [r2, #16]
 8004d7e:	4b83      	ldr	r3, [pc, #524]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d80:	6919      	ldr	r1, [r3, #16]
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d8a:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9e:	2300      	movs	r3, #0
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004da6:	460b      	mov	r3, r1
 8004da8:	4313      	orrs	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dac:	4b77      	ldr	r3, [pc, #476]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	4a74      	ldr	r2, [pc, #464]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dce:	2300      	movs	r3, #0
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ddc:	4b6b      	ldr	r3, [pc, #428]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4a67      	ldr	r2, [pc, #412]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	d011      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e12:	3308      	adds	r3, #8
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fb78 	bl	800550c <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6239      	str	r1, [r7, #32]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d011      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	3308      	adds	r3, #8
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb58 	bl	800550c <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	61b9      	str	r1, [r7, #24]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d011      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e92:	3308      	adds	r3, #8
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fb38 	bl	800550c <RCCEx_PLL2_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	6139      	str	r1, [r7, #16]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d011      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed2:	3328      	adds	r3, #40	; 0x28
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbca 	bl	8005670 <RCCEx_PLL3_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	2100      	movs	r1, #0
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d011      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f12:	3328      	adds	r3, #40	; 0x28
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fbaa 	bl	8005670 <RCCEx_PLL3_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	d011      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f52:	3328      	adds	r3, #40	; 0x28
 8004f54:	2102      	movs	r1, #2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fb8a 	bl	8005670 <RCCEx_PLL3_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004f72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8c:	58024400 	.word	0x58024400

08004f90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f94:	f7fe fd54 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	0800cd2c 	.word	0x0800cd2c

08004fbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc4:	4ba1      	ldr	r3, [pc, #644]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fce:	4b9f      	ldr	r3, [pc, #636]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	0b1b      	lsrs	r3, r3, #12
 8004fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fda:	4b9c      	ldr	r3, [pc, #624]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fe6:	4b99      	ldr	r3, [pc, #612]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8111 	beq.w	800522c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b02      	cmp	r3, #2
 800500e:	f000 8083 	beq.w	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b02      	cmp	r3, #2
 8005016:	f200 80a1 	bhi.w	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d056      	beq.n	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005026:	e099      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005028:	4b88      	ldr	r3, [pc, #544]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02d      	beq.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005034:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	08db      	lsrs	r3, r3, #3
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	4a84      	ldr	r2, [pc, #528]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b7b      	ldr	r3, [pc, #492]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800508e:	e087      	b.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800509e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d2:	e065      	b.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800525c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e6:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005116:	e043      	b.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512a:	4b48      	ldr	r3, [pc, #288]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513a:	ed97 6a03 	vldr	s12, [r7, #12]
 800513e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515a:	e021      	b.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800525c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800516a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800519e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	0a5b      	lsrs	r3, r3, #9
 80051a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80051be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c6:	ee17 2a90 	vmov	r2, s15
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051ce:	4b1f      	ldr	r3, [pc, #124]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f4:	ee17 2a90 	vmov	r2, s15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	0e1b      	lsrs	r3, r3, #24
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005216:	edd7 6a07 	vldr	s13, [r7, #28]
 800521a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005222:	ee17 2a90 	vmov	r2, s15
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800522a:	e008      	b.n	800523e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
}
 800523e:	bf00      	nop
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	58024400 	.word	0x58024400
 8005250:	03d09000 	.word	0x03d09000
 8005254:	46000000 	.word	0x46000000
 8005258:	4c742400 	.word	0x4c742400
 800525c:	4a742400 	.word	0x4a742400
 8005260:	4bbebc20 	.word	0x4bbebc20

08005264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	; 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800526c:	4ba1      	ldr	r3, [pc, #644]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005276:	4b9f      	ldr	r3, [pc, #636]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	0d1b      	lsrs	r3, r3, #20
 800527c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005282:	4b9c      	ldr	r3, [pc, #624]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800528e:	4b99      	ldr	r3, [pc, #612]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8111 	beq.w	80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	f000 8083 	beq.w	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f200 80a1 	bhi.w	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d056      	beq.n	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052ce:	e099      	b.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02d      	beq.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052dc:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	4a84      	ldr	r2, [pc, #528]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b7b      	ldr	r3, [pc, #492]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005336:	e087      	b.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537a:	e065      	b.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053be:	e043      	b.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b48      	ldr	r3, [pc, #288]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005402:	e021      	b.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005446:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	0a5b      	lsrs	r3, r3, #9
 800544e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800545e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005462:	edd7 6a07 	vldr	s13, [r7, #28]
 8005466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546e:	ee17 2a90 	vmov	r2, s15
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005490:	edd7 6a07 	vldr	s13, [r7, #28]
 8005494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549c:	ee17 2a90 	vmov	r2, s15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054be:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 2a90 	vmov	r2, s15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054d2:	e008      	b.n	80054e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	bf00      	nop
 80054e8:	3724      	adds	r7, #36	; 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	58024400 	.word	0x58024400
 80054f8:	03d09000 	.word	0x03d09000
 80054fc:	46000000 	.word	0x46000000
 8005500:	4c742400 	.word	0x4c742400
 8005504:	4a742400 	.word	0x4a742400
 8005508:	4bbebc20 	.word	0x4bbebc20

0800550c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800551a:	4b53      	ldr	r3, [pc, #332]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b03      	cmp	r3, #3
 8005524:	d101      	bne.n	800552a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e099      	b.n	800565e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800552a:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005536:	f7fc f97f 	bl	8001838 <HAL_GetTick>
 800553a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800553c:	e008      	b.n	8005550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800553e:	f7fc f97b 	bl	8001838 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e086      	b.n	800565e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f0      	bne.n	800553e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800555c:	4b42      	ldr	r3, [pc, #264]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	493f      	ldr	r1, [pc, #252]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	628b      	str	r3, [r1, #40]	; 0x28
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	3b01      	subs	r3, #1
 8005580:	025b      	lsls	r3, r3, #9
 8005582:	b29b      	uxth	r3, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	3b01      	subs	r3, #1
 800559a:	061b      	lsls	r3, r3, #24
 800559c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055a0:	4931      	ldr	r1, [pc, #196]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	492d      	ldr	r1, [pc, #180]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055b8:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f023 0220 	bic.w	r2, r3, #32
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	4928      	ldr	r1, [pc, #160]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ca:	4b27      	ldr	r3, [pc, #156]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <RCCEx_PLL2_Config+0x160>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	69d2      	ldr	r2, [r2, #28]
 80055e2:	00d2      	lsls	r2, r2, #3
 80055e4:	4920      	ldr	r1, [pc, #128]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055ea:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055f0:	f043 0310 	orr.w	r3, r3, #16
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	4a19      	ldr	r2, [pc, #100]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005608:	e00f      	b.n	800562a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d106      	bne.n	800561e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800561c:	e005      	b.n	800562a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	4a11      	ldr	r2, [pc, #68]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005636:	f7fc f8ff 	bl	8001838 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800563c:	e008      	b.n	8005650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800563e:	f7fc f8fb 	bl	8001838 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e006      	b.n	800565e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <RCCEx_PLL2_Config+0x15c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	ffff0007 	.word	0xffff0007

08005670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800567e:	4b53      	ldr	r3, [pc, #332]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b03      	cmp	r3, #3
 8005688:	d101      	bne.n	800568e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e099      	b.n	80057c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800568e:	4b4f      	ldr	r3, [pc, #316]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a4e      	ldr	r2, [pc, #312]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569a:	f7fc f8cd 	bl	8001838 <HAL_GetTick>
 800569e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056a2:	f7fc f8c9 	bl	8001838 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e086      	b.n	80057c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056c0:	4b42      	ldr	r3, [pc, #264]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	493f      	ldr	r1, [pc, #252]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	628b      	str	r3, [r1, #40]	; 0x28
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	025b      	lsls	r3, r3, #9
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005704:	4931      	ldr	r1, [pc, #196]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800570a:	4b30      	ldr	r3, [pc, #192]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	492d      	ldr	r1, [pc, #180]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800571c:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	4928      	ldr	r1, [pc, #160]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800572a:	4313      	orrs	r3, r2
 800572c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800572e:	4b27      	ldr	r3, [pc, #156]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800573c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <RCCEx_PLL3_Config+0x160>)
 8005740:	4013      	ands	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	69d2      	ldr	r2, [r2, #28]
 8005746:	00d2      	lsls	r2, r2, #3
 8005748:	4920      	ldr	r1, [pc, #128]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800574a:	4313      	orrs	r3, r2
 800574c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005760:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800576a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800576c:	e00f      	b.n	800578e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d106      	bne.n	8005782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005774:	4b15      	ldr	r3, [pc, #84]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 800577a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800577e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005780:	e005      	b.n	800578e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	4a11      	ldr	r2, [pc, #68]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 8005794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579a:	f7fc f84d 	bl	8001838 <HAL_GetTick>
 800579e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057a2:	f7fc f849 	bl	8001838 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e006      	b.n	80057c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <RCCEx_PLL3_Config+0x15c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	58024400 	.word	0x58024400
 80057d0:	ffff0007 	.word	0xffff0007

080057d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e10f      	b.n	8005a06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a87      	ldr	r2, [pc, #540]	; (8005a10 <HAL_SPI_Init+0x23c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00f      	beq.n	8005816 <HAL_SPI_Init+0x42>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a86      	ldr	r2, [pc, #536]	; (8005a14 <HAL_SPI_Init+0x240>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00a      	beq.n	8005816 <HAL_SPI_Init+0x42>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a84      	ldr	r2, [pc, #528]	; (8005a18 <HAL_SPI_Init+0x244>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d005      	beq.n	8005816 <HAL_SPI_Init+0x42>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b0f      	cmp	r3, #15
 8005810:	d901      	bls.n	8005816 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0f7      	b.n	8005a06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f900 	bl	8005a1c <SPI_GetPacketSize>
 800581c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7b      	ldr	r2, [pc, #492]	; (8005a10 <HAL_SPI_Init+0x23c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00c      	beq.n	8005842 <HAL_SPI_Init+0x6e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a79      	ldr	r2, [pc, #484]	; (8005a14 <HAL_SPI_Init+0x240>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <HAL_SPI_Init+0x6e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a78      	ldr	r2, [pc, #480]	; (8005a18 <HAL_SPI_Init+0x244>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d002      	beq.n	8005842 <HAL_SPI_Init+0x6e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d811      	bhi.n	8005866 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005846:	4a72      	ldr	r2, [pc, #456]	; (8005a10 <HAL_SPI_Init+0x23c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a70      	ldr	r2, [pc, #448]	; (8005a14 <HAL_SPI_Init+0x240>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_SPI_Init+0x8c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6f      	ldr	r2, [pc, #444]	; (8005a18 <HAL_SPI_Init+0x244>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d104      	bne.n	800586a <HAL_SPI_Init+0x96>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b10      	cmp	r3, #16
 8005864:	d901      	bls.n	800586a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0cd      	b.n	8005a06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fbe4 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80058a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b0:	d119      	bne.n	80058e6 <HAL_SPI_Init+0x112>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ba:	d103      	bne.n	80058c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d4:	d107      	bne.n	80058e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_SPI_Init+0x13e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d90b      	bls.n	8005912 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e007      	b.n	8005922 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	431a      	orrs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	ea42 0103 	orr.w	r1, r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	ea42 0103 	orr.w	r1, r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d113      	bne.n	80059c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40013000 	.word	0x40013000
 8005a14:	40003800 	.word	0x40003800
 8005a18:	40003c00 	.word	0x40003c00

08005a1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	3307      	adds	r3, #7
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e049      	b.n	8005af8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7fb fb4f 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f000 fc25 	bl	80062e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e054      	b.n	8005bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d115      	bne.n	8005bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_TIM_Base_Start_IT+0xec>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d015      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d011      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40001800 	.word	0x40001800
 8005be8:	40014000 	.word	0x40014000
 8005bec:	00010007 	.word	0x00010007

08005bf0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_TIM_OC_Start_IT+0x28>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e03c      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0xa2>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d109      	bne.n	8005c32 <HAL_TIM_OC_Start_IT+0x42>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	bf14      	ite	ne
 8005c2a:	2301      	movne	r3, #1
 8005c2c:	2300      	moveq	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e02f      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0xa2>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d109      	bne.n	8005c4c <HAL_TIM_OC_Start_IT+0x5c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	e022      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0xa2>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d109      	bne.n	8005c66 <HAL_TIM_OC_Start_IT+0x76>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	e015      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0xa2>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_OC_Start_IT+0x90>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e008      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0ec      	b.n	8005e74 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_OC_Start_IT+0xba>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca8:	e023      	b.n	8005cf2 <HAL_TIM_OC_Start_IT+0x102>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_OC_Start_IT+0xca>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb8:	e01b      	b.n	8005cf2 <HAL_TIM_OC_Start_IT+0x102>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_OC_Start_IT+0xda>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc8:	e013      	b.n	8005cf2 <HAL_TIM_OC_Start_IT+0x102>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b0c      	cmp	r3, #12
 8005cce:	d104      	bne.n	8005cda <HAL_TIM_OC_Start_IT+0xea>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd8:	e00b      	b.n	8005cf2 <HAL_TIM_OC_Start_IT+0x102>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_OC_Start_IT+0xfa>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce8:	e003      	b.n	8005cf2 <HAL_TIM_OC_Start_IT+0x102>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d841      	bhi.n	8005d7c <HAL_TIM_OC_Start_IT+0x18c>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_TIM_OC_Start_IT+0x110>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d7d 	.word	0x08005d7d
 8005d08:	08005d7d 	.word	0x08005d7d
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d7d 	.word	0x08005d7d
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	08005d59 	.word	0x08005d59
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d6b 	.word	0x08005d6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0202 	orr.w	r2, r2, #2
 8005d42:	60da      	str	r2, [r3, #12]
      break;
 8005d44:	e01d      	b.n	8005d82 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0204 	orr.w	r2, r2, #4
 8005d54:	60da      	str	r2, [r3, #12]
      break;
 8005d56:	e014      	b.n	8005d82 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	60da      	str	r2, [r3, #12]
      break;
 8005d68:	e00b      	b.n	8005d82 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0210 	orr.w	r2, r2, #16
 8005d78:	60da      	str	r2, [r3, #12]
      break;
 8005d7a:	e002      	b.n	8005d82 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d174      	bne.n	8005e72 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fbe9 	bl	8006568 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a38      	ldr	r2, [pc, #224]	; (8005e7c <HAL_TIM_OC_Start_IT+0x28c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIM_OC_Start_IT+0x1d8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a36      	ldr	r2, [pc, #216]	; (8005e80 <HAL_TIM_OC_Start_IT+0x290>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIM_OC_Start_IT+0x1d8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a35      	ldr	r2, [pc, #212]	; (8005e84 <HAL_TIM_OC_Start_IT+0x294>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_OC_Start_IT+0x1d8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a33      	ldr	r2, [pc, #204]	; (8005e88 <HAL_TIM_OC_Start_IT+0x298>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIM_OC_Start_IT+0x1d8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a32      	ldr	r2, [pc, #200]	; (8005e8c <HAL_TIM_OC_Start_IT+0x29c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_OC_Start_IT+0x1dc>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e000      	b.n	8005dce <HAL_TIM_OC_Start_IT+0x1de>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <HAL_TIM_OC_Start_IT+0x28c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df4:	d01d      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <HAL_TIM_OC_Start_IT+0x2a0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d018      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <HAL_TIM_OC_Start_IT+0x2a4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <HAL_TIM_OC_Start_IT+0x2a8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_TIM_OC_Start_IT+0x290>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <HAL_TIM_OC_Start_IT+0x2ac>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_TIM_OC_Start_IT+0x242>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <HAL_TIM_OC_Start_IT+0x294>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d115      	bne.n	8005e5e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_TIM_OC_Start_IT+0x2b0>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b06      	cmp	r3, #6
 8005e42:	d015      	beq.n	8005e70 <HAL_TIM_OC_Start_IT+0x280>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4a:	d011      	beq.n	8005e70 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	e008      	b.n	8005e70 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e000      	b.n	8005e72 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40001800 	.word	0x40001800
 8005ea0:	00010007 	.word	0x00010007

08005ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0202 	mvn.w	r2, #2
 8005ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9d8 	bl	80062a4 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fa fb74 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f9db 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0204 	mvn.w	r2, #4
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9b2 	bl	80062a4 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa fb4e 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9b5 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0208 	mvn.w	r2, #8
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2204      	movs	r2, #4
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f98c 	bl	80062a4 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fa fb28 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f98f 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0210 	mvn.w	r2, #16
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f966 	bl	80062a4 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fa fb02 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f969 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0201 	mvn.w	r2, #1
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fa ff7e 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb53 	bl	80066e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb4b 	bl	80066f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f923 	bl	80062cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0220 	mvn.w	r2, #32
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb13 	bl	80066d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIM_ConfigClockSource+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0dc      	b.n	800628a <HAL_TIM_ConfigClockSource+0x1d6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4b6a      	ldr	r3, [pc, #424]	; (8006294 <HAL_TIM_ConfigClockSource+0x1e0>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a64      	ldr	r2, [pc, #400]	; (8006298 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f000 80a9 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800610c:	4a62      	ldr	r2, [pc, #392]	; (8006298 <HAL_TIM_ConfigClockSource+0x1e4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f200 80ae 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006114:	4a61      	ldr	r2, [pc, #388]	; (800629c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f000 80a1 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800611c:	4a5f      	ldr	r2, [pc, #380]	; (800629c <HAL_TIM_ConfigClockSource+0x1e8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f200 80a6 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006124:	4a5e      	ldr	r2, [pc, #376]	; (80062a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	f000 8099 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800612c:	4a5c      	ldr	r2, [pc, #368]	; (80062a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800612e:	4293      	cmp	r3, r2
 8006130:	f200 809e 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006138:	f000 8091 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006140:	f200 8096 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006148:	f000 8089 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800614c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006150:	f200 808e 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006158:	d03e      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x124>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615e:	f200 8087 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	f000 8086 	beq.w	8006276 <HAL_TIM_ConfigClockSource+0x1c2>
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d87f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d01a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xf6>
 8006174:	2b70      	cmp	r3, #112	; 0x70
 8006176:	d87b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006178:	2b60      	cmp	r3, #96	; 0x60
 800617a:	d050      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x16a>
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d877      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006180:	2b50      	cmp	r3, #80	; 0x50
 8006182:	d03c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x14a>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d873      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d058      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x18a>
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d86f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d064      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d86b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d060      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d867      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d05a      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 80061a8:	e062      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6899      	ldr	r1, [r3, #8]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f000 f9b5 	bl	8006528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	609a      	str	r2, [r3, #8]
      break;
 80061d6:	e04f      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f000 f99e 	bl	8006528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fa:	609a      	str	r2, [r3, #8]
      break;
 80061fc:	e03c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	461a      	mov	r2, r3
 800620c:	f000 f90e 	bl	800642c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2150      	movs	r1, #80	; 0x50
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f968 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 800621c:	e02c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	461a      	mov	r2, r3
 800622c:	f000 f92d 	bl	800648a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2160      	movs	r1, #96	; 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f958 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 800623c:	e01c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f000 f8ee 	bl	800642c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f948 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 800625c:	e00c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f000 f93f 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 800626e:	e003      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e000      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	ffceff88 	.word	0xffceff88
 8006298:	00100040 	.word	0x00100040
 800629c:	00100030 	.word	0x00100030
 80062a0:	00100020 	.word	0x00100020

080062a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a46      	ldr	r2, [pc, #280]	; (800640c <TIM_Base_SetConfig+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fe:	d00f      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a43      	ldr	r2, [pc, #268]	; (8006410 <TIM_Base_SetConfig+0x130>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00b      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a42      	ldr	r2, [pc, #264]	; (8006414 <TIM_Base_SetConfig+0x134>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a41      	ldr	r2, [pc, #260]	; (8006418 <TIM_Base_SetConfig+0x138>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <TIM_Base_SetConfig+0x13c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a35      	ldr	r2, [pc, #212]	; (800640c <TIM_Base_SetConfig+0x12c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01f      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d01b      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a32      	ldr	r2, [pc, #200]	; (8006410 <TIM_Base_SetConfig+0x130>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d017      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a31      	ldr	r2, [pc, #196]	; (8006414 <TIM_Base_SetConfig+0x134>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a30      	ldr	r2, [pc, #192]	; (8006418 <TIM_Base_SetConfig+0x138>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00f      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0x13c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00b      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <TIM_Base_SetConfig+0x140>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <TIM_Base_SetConfig+0x144>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <TIM_Base_SetConfig+0x148>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d108      	bne.n	800638c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a16      	ldr	r2, [pc, #88]	; (800640c <TIM_Base_SetConfig+0x12c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0xf8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <TIM_Base_SetConfig+0x13c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0xf8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a17      	ldr	r2, [pc, #92]	; (8006420 <TIM_Base_SetConfig+0x140>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0xf8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a16      	ldr	r2, [pc, #88]	; (8006424 <TIM_Base_SetConfig+0x144>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0xf8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <TIM_Base_SetConfig+0x148>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]
  }
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40010000 	.word	0x40010000
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40010400 	.word	0x40010400
 8006420:	40014000 	.word	0x40014000
 8006424:	40014400 	.word	0x40014400
 8006428:	40014800 	.word	0x40014800

0800642c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f023 030a 	bic.w	r3, r3, #10
 8006468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f023 0210 	bic.w	r2, r3, #16
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <TIM_ITRx_SetConfig+0x38>)
 8006500:	4013      	ands	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	f043 0307 	orr.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	609a      	str	r2, [r3, #8]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	ffcfff8f 	.word	0xffcfff8f

08006528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2201      	movs	r2, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	43db      	mvns	r3, r3
 800658a:	401a      	ands	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e06d      	b.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a30      	ldr	r2, [pc, #192]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2f      	ldr	r2, [pc, #188]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d108      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d022      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d01d      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a15      	ldr	r2, [pc, #84]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40001800 	.word	0x40001800
 80066cc:	40014000 	.word	0x40014000

080066d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e042      	b.n	80067a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fa fd6f 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2224      	movs	r2, #36	; 0x24
 800673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f9b6 	bl	8007ac8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fc4b 	bl	8006ff8 <UART_SetConfig>
 8006762:	4603      	mov	r3, r0
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e01b      	b.n	80067a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 fa35 	bl	8007c0c <UART_CheckIdleState>
 80067a2:	4603      	mov	r3, r0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d137      	bne.n	8006834 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_UART_Receive_IT+0x24>
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e030      	b.n	8006836 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <HAL_UART_Receive_IT+0x94>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01f      	beq.n	8006824 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d018      	beq.n	8006824 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	623b      	str	r3, [r7, #32]
 8006812:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	6a3a      	ldr	r2, [r7, #32]
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	61bb      	str	r3, [r7, #24]
   return(result);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	461a      	mov	r2, r3
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 fb06 	bl	8007e3c <UART_Start_Receive_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	e000      	b.n	8006836 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	58000c00 	.word	0x58000c00

08006844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b0ba      	sub	sp, #232	; 0xe8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800686a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800686e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006872:	4013      	ands	r3, r2
 8006874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11b      	bne.n	80068b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8377 	beq.w	8006f9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
      }
      return;
 80068b6:	e371      	b.n	8006f9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8123 	beq.w	8006b08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068c6:	4b8d      	ldr	r3, [pc, #564]	; (8006afc <HAL_UART_IRQHandler+0x2b8>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068d2:	4b8b      	ldr	r3, [pc, #556]	; (8006b00 <HAL_UART_IRQHandler+0x2bc>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8116 	beq.w	8006b08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d011      	beq.n	800690c <HAL_UART_IRQHandler+0xc8>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d011      	beq.n	800693c <HAL_UART_IRQHandler+0xf8>
 8006918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2202      	movs	r2, #2
 800692a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f043 0204 	orr.w	r2, r3, #4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_UART_IRQHandler+0x128>
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2204      	movs	r2, #4
 800695a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f043 0202 	orr.w	r2, r3, #2
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d017      	beq.n	80069a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006988:	4b5c      	ldr	r3, [pc, #368]	; (8006afc <HAL_UART_IRQHandler+0x2b8>)
 800698a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2208      	movs	r2, #8
 8006996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f043 0208 	orr.w	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <HAL_UART_IRQHandler+0x196>
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00c      	beq.n	80069da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f043 0220 	orr.w	r2, r3, #32
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 82dd 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d013      	beq.n	8006a1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d005      	beq.n	8006a3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d054      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fb1e 	bl	8008080 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d146      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1d9      	bne.n	8006a52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <HAL_UART_IRQHandler+0x2c0>)
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fb fad3 	bl	8002064 <HAL_DMA_Abort_IT>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d019      	beq.n	8006af8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad6:	e00f      	b.n	8006af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa77 	bl	8006fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ade:	e00b      	b.n	8006af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa73 	bl	8006fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae6:	e007      	b.n	8006af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fa6f 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006af6:	e253      	b.n	8006fa0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	bf00      	nop
    return;
 8006afa:	e251      	b.n	8006fa0 <HAL_UART_IRQHandler+0x75c>
 8006afc:	10000001 	.word	0x10000001
 8006b00:	04000120 	.word	0x04000120
 8006b04:	0800814d 	.word	0x0800814d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	f040 81e7 	bne.w	8006ee0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 81e0 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 81d9 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2210      	movs	r2, #16
 8006b34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	f040 8151 	bne.w	8006de8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a96      	ldr	r2, [pc, #600]	; (8006da8 <HAL_UART_IRQHandler+0x564>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d068      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a93      	ldr	r2, [pc, #588]	; (8006dac <HAL_UART_IRQHandler+0x568>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d061      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a91      	ldr	r2, [pc, #580]	; (8006db0 <HAL_UART_IRQHandler+0x56c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d05a      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a8e      	ldr	r2, [pc, #568]	; (8006db4 <HAL_UART_IRQHandler+0x570>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d053      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a8c      	ldr	r2, [pc, #560]	; (8006db8 <HAL_UART_IRQHandler+0x574>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d04c      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a89      	ldr	r2, [pc, #548]	; (8006dbc <HAL_UART_IRQHandler+0x578>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a87      	ldr	r2, [pc, #540]	; (8006dc0 <HAL_UART_IRQHandler+0x57c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d03e      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a84      	ldr	r2, [pc, #528]	; (8006dc4 <HAL_UART_IRQHandler+0x580>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d037      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a82      	ldr	r2, [pc, #520]	; (8006dc8 <HAL_UART_IRQHandler+0x584>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d030      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a7f      	ldr	r2, [pc, #508]	; (8006dcc <HAL_UART_IRQHandler+0x588>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d029      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a7d      	ldr	r2, [pc, #500]	; (8006dd0 <HAL_UART_IRQHandler+0x58c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a7a      	ldr	r2, [pc, #488]	; (8006dd4 <HAL_UART_IRQHandler+0x590>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01b      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a78      	ldr	r2, [pc, #480]	; (8006dd8 <HAL_UART_IRQHandler+0x594>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d014      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a75      	ldr	r2, [pc, #468]	; (8006ddc <HAL_UART_IRQHandler+0x598>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00d      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a73      	ldr	r2, [pc, #460]	; (8006de0 <HAL_UART_IRQHandler+0x59c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d006      	beq.n	8006c26 <HAL_UART_IRQHandler+0x3e2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <HAL_UART_IRQHandler+0x5a0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d106      	bne.n	8006c34 <HAL_UART_IRQHandler+0x3f0>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	e005      	b.n	8006c40 <HAL_UART_IRQHandler+0x3fc>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81ab 	beq.w	8006fa4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f080 81a3 	bcs.w	8006fa4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	f000 8087 	beq.w	8006d86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ca6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1da      	bne.n	8006c78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ce6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e1      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e3      	bne.n	8006cfe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d54:	f023 0310 	bic.w	r3, r3, #16
 8006d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e4      	bne.n	8006d44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fa fe51 	bl	8001a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f91d 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006da6:	e0fd      	b.n	8006fa4 <HAL_UART_IRQHandler+0x760>
 8006da8:	40020010 	.word	0x40020010
 8006dac:	40020028 	.word	0x40020028
 8006db0:	40020040 	.word	0x40020040
 8006db4:	40020058 	.word	0x40020058
 8006db8:	40020070 	.word	0x40020070
 8006dbc:	40020088 	.word	0x40020088
 8006dc0:	400200a0 	.word	0x400200a0
 8006dc4:	400200b8 	.word	0x400200b8
 8006dc8:	40020410 	.word	0x40020410
 8006dcc:	40020428 	.word	0x40020428
 8006dd0:	40020440 	.word	0x40020440
 8006dd4:	40020458 	.word	0x40020458
 8006dd8:	40020470 	.word	0x40020470
 8006ddc:	40020488 	.word	0x40020488
 8006de0:	400204a0 	.word	0x400204a0
 8006de4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80cf 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80ca 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
 8006e38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e4      	bne.n	8006e14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	623b      	str	r3, [r7, #32]
   return(result);
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <HAL_UART_IRQHandler+0x770>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e3      	bne.n	8006e4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0310 	bic.w	r3, r3, #16
 8006eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e4      	bne.n	8006e96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f881 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ede:	e063      	b.n	8006fa8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00e      	beq.n	8006f0a <HAL_UART_IRQHandler+0x6c6>
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fe80 	bl	8008c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f08:	e051      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d014      	beq.n	8006f40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d03a      	beq.n	8006fac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
    }
    return;
 8006f3e:	e035      	b.n	8006fac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_UART_IRQHandler+0x71c>
 8006f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f90d 	bl	8008178 <UART_EndTransmit_IT>
    return;
 8006f5e:	e026      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <HAL_UART_IRQHandler+0x73c>
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fe59 	bl	8008c30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f7e:	e016      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d010      	beq.n	8006fae <HAL_UART_IRQHandler+0x76a>
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da0c      	bge.n	8006fae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fe41 	bl	8008c1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f9a:	e008      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
      return;
 8006f9c:	bf00      	nop
 8006f9e:	e006      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
    return;
 8006fa0:	bf00      	nop
 8006fa2:	e004      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
      return;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
      return;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_UART_IRQHandler+0x76a>
    return;
 8006fac:	bf00      	nop
  }
}
 8006fae:	37e8      	adds	r7, #232	; 0xe8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	effffffe 	.word	0xeffffffe

08006fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ffc:	b092      	sub	sp, #72	; 0x48
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	431a      	orrs	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	431a      	orrs	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	4313      	orrs	r3, r2
 800701e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4bbe      	ldr	r3, [pc, #760]	; (8007320 <UART_SetConfig+0x328>)
 8007028:	4013      	ands	r3, r2
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007030:	430b      	orrs	r3, r1
 8007032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4ab3      	ldr	r2, [pc, #716]	; (8007324 <UART_SetConfig+0x32c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007060:	4313      	orrs	r3, r2
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	4baf      	ldr	r3, [pc, #700]	; (8007328 <UART_SetConfig+0x330>)
 800706c:	4013      	ands	r3, r2
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007074:	430b      	orrs	r3, r1
 8007076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f023 010f 	bic.w	r1, r3, #15
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4aa6      	ldr	r2, [pc, #664]	; (800732c <UART_SetConfig+0x334>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d177      	bne.n	8007188 <UART_SetConfig+0x190>
 8007098:	4ba5      	ldr	r3, [pc, #660]	; (8007330 <UART_SetConfig+0x338>)
 800709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a0:	2b28      	cmp	r3, #40	; 0x28
 80070a2:	d86d      	bhi.n	8007180 <UART_SetConfig+0x188>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0xb4>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007181 	.word	0x08007181
 80070b4:	08007181 	.word	0x08007181
 80070b8:	08007181 	.word	0x08007181
 80070bc:	08007181 	.word	0x08007181
 80070c0:	08007181 	.word	0x08007181
 80070c4:	08007181 	.word	0x08007181
 80070c8:	08007181 	.word	0x08007181
 80070cc:	08007159 	.word	0x08007159
 80070d0:	08007181 	.word	0x08007181
 80070d4:	08007181 	.word	0x08007181
 80070d8:	08007181 	.word	0x08007181
 80070dc:	08007181 	.word	0x08007181
 80070e0:	08007181 	.word	0x08007181
 80070e4:	08007181 	.word	0x08007181
 80070e8:	08007181 	.word	0x08007181
 80070ec:	08007161 	.word	0x08007161
 80070f0:	08007181 	.word	0x08007181
 80070f4:	08007181 	.word	0x08007181
 80070f8:	08007181 	.word	0x08007181
 80070fc:	08007181 	.word	0x08007181
 8007100:	08007181 	.word	0x08007181
 8007104:	08007181 	.word	0x08007181
 8007108:	08007181 	.word	0x08007181
 800710c:	08007169 	.word	0x08007169
 8007110:	08007181 	.word	0x08007181
 8007114:	08007181 	.word	0x08007181
 8007118:	08007181 	.word	0x08007181
 800711c:	08007181 	.word	0x08007181
 8007120:	08007181 	.word	0x08007181
 8007124:	08007181 	.word	0x08007181
 8007128:	08007181 	.word	0x08007181
 800712c:	08007171 	.word	0x08007171
 8007130:	08007181 	.word	0x08007181
 8007134:	08007181 	.word	0x08007181
 8007138:	08007181 	.word	0x08007181
 800713c:	08007181 	.word	0x08007181
 8007140:	08007181 	.word	0x08007181
 8007144:	08007181 	.word	0x08007181
 8007148:	08007181 	.word	0x08007181
 800714c:	08007179 	.word	0x08007179
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e222      	b.n	800759e <UART_SetConfig+0x5a6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e21e      	b.n	800759e <UART_SetConfig+0x5a6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e21a      	b.n	800759e <UART_SetConfig+0x5a6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e216      	b.n	800759e <UART_SetConfig+0x5a6>
 8007170:	2320      	movs	r3, #32
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e212      	b.n	800759e <UART_SetConfig+0x5a6>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e20e      	b.n	800759e <UART_SetConfig+0x5a6>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e20a      	b.n	800759e <UART_SetConfig+0x5a6>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a69      	ldr	r2, [pc, #420]	; (8007334 <UART_SetConfig+0x33c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d130      	bne.n	80071f4 <UART_SetConfig+0x1fc>
 8007192:	4b67      	ldr	r3, [pc, #412]	; (8007330 <UART_SetConfig+0x338>)
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b05      	cmp	r3, #5
 800719c:	d826      	bhi.n	80071ec <UART_SetConfig+0x1f4>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <UART_SetConfig+0x1ac>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071cd 	.word	0x080071cd
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e1ec      	b.n	800759e <UART_SetConfig+0x5a6>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e1e8      	b.n	800759e <UART_SetConfig+0x5a6>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e1e4      	b.n	800759e <UART_SetConfig+0x5a6>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e1e0      	b.n	800759e <UART_SetConfig+0x5a6>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e1dc      	b.n	800759e <UART_SetConfig+0x5a6>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e1d8      	b.n	800759e <UART_SetConfig+0x5a6>
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e1d4      	b.n	800759e <UART_SetConfig+0x5a6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a4f      	ldr	r2, [pc, #316]	; (8007338 <UART_SetConfig+0x340>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d130      	bne.n	8007260 <UART_SetConfig+0x268>
 80071fe:	4b4c      	ldr	r3, [pc, #304]	; (8007330 <UART_SetConfig+0x338>)
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b05      	cmp	r3, #5
 8007208:	d826      	bhi.n	8007258 <UART_SetConfig+0x260>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x218>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007229 	.word	0x08007229
 8007214:	08007231 	.word	0x08007231
 8007218:	08007239 	.word	0x08007239
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e1b6      	b.n	800759e <UART_SetConfig+0x5a6>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e1b2      	b.n	800759e <UART_SetConfig+0x5a6>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e1ae      	b.n	800759e <UART_SetConfig+0x5a6>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e1aa      	b.n	800759e <UART_SetConfig+0x5a6>
 8007248:	2320      	movs	r3, #32
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e1a6      	b.n	800759e <UART_SetConfig+0x5a6>
 8007250:	2340      	movs	r3, #64	; 0x40
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e1a2      	b.n	800759e <UART_SetConfig+0x5a6>
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e19e      	b.n	800759e <UART_SetConfig+0x5a6>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a35      	ldr	r2, [pc, #212]	; (800733c <UART_SetConfig+0x344>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d130      	bne.n	80072cc <UART_SetConfig+0x2d4>
 800726a:	4b31      	ldr	r3, [pc, #196]	; (8007330 <UART_SetConfig+0x338>)
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b05      	cmp	r3, #5
 8007274:	d826      	bhi.n	80072c4 <UART_SetConfig+0x2cc>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x284>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007295 	.word	0x08007295
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072a5 	.word	0x080072a5
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e180      	b.n	800759e <UART_SetConfig+0x5a6>
 800729c:	2304      	movs	r3, #4
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e17c      	b.n	800759e <UART_SetConfig+0x5a6>
 80072a4:	2308      	movs	r3, #8
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e178      	b.n	800759e <UART_SetConfig+0x5a6>
 80072ac:	2310      	movs	r3, #16
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e174      	b.n	800759e <UART_SetConfig+0x5a6>
 80072b4:	2320      	movs	r3, #32
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e170      	b.n	800759e <UART_SetConfig+0x5a6>
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e16c      	b.n	800759e <UART_SetConfig+0x5a6>
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e168      	b.n	800759e <UART_SetConfig+0x5a6>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <UART_SetConfig+0x348>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d142      	bne.n	800735c <UART_SetConfig+0x364>
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <UART_SetConfig+0x338>)
 80072d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d838      	bhi.n	8007354 <UART_SetConfig+0x35c>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x2f0>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	08007301 	.word	0x08007301
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007311 	.word	0x08007311
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007345 	.word	0x08007345
 80072fc:	0800734d 	.word	0x0800734d
 8007300:	2300      	movs	r3, #0
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e14a      	b.n	800759e <UART_SetConfig+0x5a6>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e146      	b.n	800759e <UART_SetConfig+0x5a6>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e142      	b.n	800759e <UART_SetConfig+0x5a6>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e13e      	b.n	800759e <UART_SetConfig+0x5a6>
 8007320:	cfff69f3 	.word	0xcfff69f3
 8007324:	58000c00 	.word	0x58000c00
 8007328:	11fff4ff 	.word	0x11fff4ff
 800732c:	40011000 	.word	0x40011000
 8007330:	58024400 	.word	0x58024400
 8007334:	40004400 	.word	0x40004400
 8007338:	40004800 	.word	0x40004800
 800733c:	40004c00 	.word	0x40004c00
 8007340:	40005000 	.word	0x40005000
 8007344:	2320      	movs	r3, #32
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e128      	b.n	800759e <UART_SetConfig+0x5a6>
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e124      	b.n	800759e <UART_SetConfig+0x5a6>
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e120      	b.n	800759e <UART_SetConfig+0x5a6>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4acb      	ldr	r2, [pc, #812]	; (8007690 <UART_SetConfig+0x698>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d176      	bne.n	8007454 <UART_SetConfig+0x45c>
 8007366:	4bcb      	ldr	r3, [pc, #812]	; (8007694 <UART_SetConfig+0x69c>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800736e:	2b28      	cmp	r3, #40	; 0x28
 8007370:	d86c      	bhi.n	800744c <UART_SetConfig+0x454>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0x380>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800744d 	.word	0x0800744d
 8007380:	0800744d 	.word	0x0800744d
 8007384:	0800744d 	.word	0x0800744d
 8007388:	0800744d 	.word	0x0800744d
 800738c:	0800744d 	.word	0x0800744d
 8007390:	0800744d 	.word	0x0800744d
 8007394:	0800744d 	.word	0x0800744d
 8007398:	08007425 	.word	0x08007425
 800739c:	0800744d 	.word	0x0800744d
 80073a0:	0800744d 	.word	0x0800744d
 80073a4:	0800744d 	.word	0x0800744d
 80073a8:	0800744d 	.word	0x0800744d
 80073ac:	0800744d 	.word	0x0800744d
 80073b0:	0800744d 	.word	0x0800744d
 80073b4:	0800744d 	.word	0x0800744d
 80073b8:	0800742d 	.word	0x0800742d
 80073bc:	0800744d 	.word	0x0800744d
 80073c0:	0800744d 	.word	0x0800744d
 80073c4:	0800744d 	.word	0x0800744d
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	0800744d 	.word	0x0800744d
 80073d0:	0800744d 	.word	0x0800744d
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	08007435 	.word	0x08007435
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	0800744d 	.word	0x0800744d
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	0800744d 	.word	0x0800744d
 8007404:	0800744d 	.word	0x0800744d
 8007408:	0800744d 	.word	0x0800744d
 800740c:	0800744d 	.word	0x0800744d
 8007410:	0800744d 	.word	0x0800744d
 8007414:	0800744d 	.word	0x0800744d
 8007418:	08007445 	.word	0x08007445
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e0bc      	b.n	800759e <UART_SetConfig+0x5a6>
 8007424:	2304      	movs	r3, #4
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e0b8      	b.n	800759e <UART_SetConfig+0x5a6>
 800742c:	2308      	movs	r3, #8
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e0b4      	b.n	800759e <UART_SetConfig+0x5a6>
 8007434:	2310      	movs	r3, #16
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e0b0      	b.n	800759e <UART_SetConfig+0x5a6>
 800743c:	2320      	movs	r3, #32
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e0ac      	b.n	800759e <UART_SetConfig+0x5a6>
 8007444:	2340      	movs	r3, #64	; 0x40
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e0a8      	b.n	800759e <UART_SetConfig+0x5a6>
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e0a4      	b.n	800759e <UART_SetConfig+0x5a6>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a8f      	ldr	r2, [pc, #572]	; (8007698 <UART_SetConfig+0x6a0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d130      	bne.n	80074c0 <UART_SetConfig+0x4c8>
 800745e:	4b8d      	ldr	r3, [pc, #564]	; (8007694 <UART_SetConfig+0x69c>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b05      	cmp	r3, #5
 8007468:	d826      	bhi.n	80074b8 <UART_SetConfig+0x4c0>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <UART_SetConfig+0x478>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	08007489 	.word	0x08007489
 8007474:	08007491 	.word	0x08007491
 8007478:	08007499 	.word	0x08007499
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	2300      	movs	r3, #0
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e086      	b.n	800759e <UART_SetConfig+0x5a6>
 8007490:	2304      	movs	r3, #4
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e082      	b.n	800759e <UART_SetConfig+0x5a6>
 8007498:	2308      	movs	r3, #8
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e07e      	b.n	800759e <UART_SetConfig+0x5a6>
 80074a0:	2310      	movs	r3, #16
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e07a      	b.n	800759e <UART_SetConfig+0x5a6>
 80074a8:	2320      	movs	r3, #32
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e076      	b.n	800759e <UART_SetConfig+0x5a6>
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e072      	b.n	800759e <UART_SetConfig+0x5a6>
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e06e      	b.n	800759e <UART_SetConfig+0x5a6>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a75      	ldr	r2, [pc, #468]	; (800769c <UART_SetConfig+0x6a4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d130      	bne.n	800752c <UART_SetConfig+0x534>
 80074ca:	4b72      	ldr	r3, [pc, #456]	; (8007694 <UART_SetConfig+0x69c>)
 80074cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d826      	bhi.n	8007524 <UART_SetConfig+0x52c>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x4e4>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074f5 	.word	0x080074f5
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	08007505 	.word	0x08007505
 80074e8:	0800750d 	.word	0x0800750d
 80074ec:	08007515 	.word	0x08007515
 80074f0:	0800751d 	.word	0x0800751d
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e050      	b.n	800759e <UART_SetConfig+0x5a6>
 80074fc:	2304      	movs	r3, #4
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e04c      	b.n	800759e <UART_SetConfig+0x5a6>
 8007504:	2308      	movs	r3, #8
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e048      	b.n	800759e <UART_SetConfig+0x5a6>
 800750c:	2310      	movs	r3, #16
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e044      	b.n	800759e <UART_SetConfig+0x5a6>
 8007514:	2320      	movs	r3, #32
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e040      	b.n	800759e <UART_SetConfig+0x5a6>
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e03c      	b.n	800759e <UART_SetConfig+0x5a6>
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e038      	b.n	800759e <UART_SetConfig+0x5a6>
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a5b      	ldr	r2, [pc, #364]	; (80076a0 <UART_SetConfig+0x6a8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d130      	bne.n	8007598 <UART_SetConfig+0x5a0>
 8007536:	4b57      	ldr	r3, [pc, #348]	; (8007694 <UART_SetConfig+0x69c>)
 8007538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b05      	cmp	r3, #5
 8007540:	d826      	bhi.n	8007590 <UART_SetConfig+0x598>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x550>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007561 	.word	0x08007561
 800754c:	08007569 	.word	0x08007569
 8007550:	08007571 	.word	0x08007571
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	2302      	movs	r3, #2
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e01a      	b.n	800759e <UART_SetConfig+0x5a6>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e016      	b.n	800759e <UART_SetConfig+0x5a6>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e012      	b.n	800759e <UART_SetConfig+0x5a6>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e00e      	b.n	800759e <UART_SetConfig+0x5a6>
 8007580:	2320      	movs	r3, #32
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e00a      	b.n	800759e <UART_SetConfig+0x5a6>
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e006      	b.n	800759e <UART_SetConfig+0x5a6>
 8007590:	2380      	movs	r3, #128	; 0x80
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e002      	b.n	800759e <UART_SetConfig+0x5a6>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <UART_SetConfig+0x6a8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	f040 80f8 	bne.w	800779a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	dc46      	bgt.n	8007640 <UART_SetConfig+0x648>
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	f2c0 8082 	blt.w	80076bc <UART_SetConfig+0x6c4>
 80075b8:	3b02      	subs	r3, #2
 80075ba:	2b1e      	cmp	r3, #30
 80075bc:	d87e      	bhi.n	80076bc <UART_SetConfig+0x6c4>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x5cc>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	08007647 	.word	0x08007647
 80075c8:	080076bd 	.word	0x080076bd
 80075cc:	0800764f 	.word	0x0800764f
 80075d0:	080076bd 	.word	0x080076bd
 80075d4:	080076bd 	.word	0x080076bd
 80075d8:	080076bd 	.word	0x080076bd
 80075dc:	0800765f 	.word	0x0800765f
 80075e0:	080076bd 	.word	0x080076bd
 80075e4:	080076bd 	.word	0x080076bd
 80075e8:	080076bd 	.word	0x080076bd
 80075ec:	080076bd 	.word	0x080076bd
 80075f0:	080076bd 	.word	0x080076bd
 80075f4:	080076bd 	.word	0x080076bd
 80075f8:	080076bd 	.word	0x080076bd
 80075fc:	0800766f 	.word	0x0800766f
 8007600:	080076bd 	.word	0x080076bd
 8007604:	080076bd 	.word	0x080076bd
 8007608:	080076bd 	.word	0x080076bd
 800760c:	080076bd 	.word	0x080076bd
 8007610:	080076bd 	.word	0x080076bd
 8007614:	080076bd 	.word	0x080076bd
 8007618:	080076bd 	.word	0x080076bd
 800761c:	080076bd 	.word	0x080076bd
 8007620:	080076bd 	.word	0x080076bd
 8007624:	080076bd 	.word	0x080076bd
 8007628:	080076bd 	.word	0x080076bd
 800762c:	080076bd 	.word	0x080076bd
 8007630:	080076bd 	.word	0x080076bd
 8007634:	080076bd 	.word	0x080076bd
 8007638:	080076bd 	.word	0x080076bd
 800763c:	080076af 	.word	0x080076af
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d037      	beq.n	80076b4 <UART_SetConfig+0x6bc>
 8007644:	e03a      	b.n	80076bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007646:	f7fd fca3 	bl	8004f90 <HAL_RCCEx_GetD3PCLK1Freq>
 800764a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800764c:	e03c      	b.n	80076c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007652:	4618      	mov	r0, r3
 8007654:	f7fd fcb2 	bl	8004fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765c:	e034      	b.n	80076c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765e:	f107 0318 	add.w	r3, r7, #24
 8007662:	4618      	mov	r0, r3
 8007664:	f7fd fdfe 	bl	8005264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800766c:	e02c      	b.n	80076c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <UART_SetConfig+0x69c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d016      	beq.n	80076a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <UART_SetConfig+0x69c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	08db      	lsrs	r3, r3, #3
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <UART_SetConfig+0x6ac>)
 8007686:	fa22 f303 	lsr.w	r3, r2, r3
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800768c:	e01c      	b.n	80076c8 <UART_SetConfig+0x6d0>
 800768e:	bf00      	nop
 8007690:	40011400 	.word	0x40011400
 8007694:	58024400 	.word	0x58024400
 8007698:	40007800 	.word	0x40007800
 800769c:	40007c00 	.word	0x40007c00
 80076a0:	58000c00 	.word	0x58000c00
 80076a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b9d      	ldr	r3, [pc, #628]	; (8007920 <UART_SetConfig+0x928>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ac:	e00c      	b.n	80076c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076ae:	4b9d      	ldr	r3, [pc, #628]	; (8007924 <UART_SetConfig+0x92c>)
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b2:	e009      	b.n	80076c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ba:	e005      	b.n	80076c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 81de 	beq.w	8007a8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	4a94      	ldr	r2, [pc, #592]	; (8007928 <UART_SetConfig+0x930>)
 80076d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076da:	461a      	mov	r2, r3
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076de:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d305      	bcc.n	8007700 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d903      	bls.n	8007708 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007706:	e1c1      	b.n	8007a8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770a:	2200      	movs	r2, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	60fa      	str	r2, [r7, #12]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	4a84      	ldr	r2, [pc, #528]	; (8007928 <UART_SetConfig+0x930>)
 8007716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771a:	b29b      	uxth	r3, r3
 800771c:	2200      	movs	r2, #0
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800772a:	f7f8 fdd9 	bl	80002e0 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	020b      	lsls	r3, r1, #8
 8007740:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007744:	0202      	lsls	r2, r0, #8
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	6849      	ldr	r1, [r1, #4]
 800774a:	0849      	lsrs	r1, r1, #1
 800774c:	2000      	movs	r0, #0
 800774e:	460c      	mov	r4, r1
 8007750:	4605      	mov	r5, r0
 8007752:	eb12 0804 	adds.w	r8, r2, r4
 8007756:	eb43 0905 	adc.w	r9, r3, r5
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	469a      	mov	sl, r3
 8007762:	4693      	mov	fp, r2
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 fdb8 	bl	80002e0 <__aeabi_uldivmod>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4613      	mov	r3, r2
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800777e:	d308      	bcc.n	8007792 <UART_SetConfig+0x79a>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007786:	d204      	bcs.n	8007792 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778e:	60da      	str	r2, [r3, #12]
 8007790:	e17c      	b.n	8007a8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007798:	e178      	b.n	8007a8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a2:	f040 80c5 	bne.w	8007930 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80077a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	dc48      	bgt.n	8007840 <UART_SetConfig+0x848>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	db7b      	blt.n	80078aa <UART_SetConfig+0x8b2>
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d879      	bhi.n	80078aa <UART_SetConfig+0x8b2>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x7c4>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	08007847 	.word	0x08007847
 80077c0:	0800784f 	.word	0x0800784f
 80077c4:	080078ab 	.word	0x080078ab
 80077c8:	080078ab 	.word	0x080078ab
 80077cc:	08007857 	.word	0x08007857
 80077d0:	080078ab 	.word	0x080078ab
 80077d4:	080078ab 	.word	0x080078ab
 80077d8:	080078ab 	.word	0x080078ab
 80077dc:	08007867 	.word	0x08007867
 80077e0:	080078ab 	.word	0x080078ab
 80077e4:	080078ab 	.word	0x080078ab
 80077e8:	080078ab 	.word	0x080078ab
 80077ec:	080078ab 	.word	0x080078ab
 80077f0:	080078ab 	.word	0x080078ab
 80077f4:	080078ab 	.word	0x080078ab
 80077f8:	080078ab 	.word	0x080078ab
 80077fc:	08007877 	.word	0x08007877
 8007800:	080078ab 	.word	0x080078ab
 8007804:	080078ab 	.word	0x080078ab
 8007808:	080078ab 	.word	0x080078ab
 800780c:	080078ab 	.word	0x080078ab
 8007810:	080078ab 	.word	0x080078ab
 8007814:	080078ab 	.word	0x080078ab
 8007818:	080078ab 	.word	0x080078ab
 800781c:	080078ab 	.word	0x080078ab
 8007820:	080078ab 	.word	0x080078ab
 8007824:	080078ab 	.word	0x080078ab
 8007828:	080078ab 	.word	0x080078ab
 800782c:	080078ab 	.word	0x080078ab
 8007830:	080078ab 	.word	0x080078ab
 8007834:	080078ab 	.word	0x080078ab
 8007838:	080078ab 	.word	0x080078ab
 800783c:	0800789d 	.word	0x0800789d
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d02e      	beq.n	80078a2 <UART_SetConfig+0x8aa>
 8007844:	e031      	b.n	80078aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007846:	f7fc f92b 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 800784a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800784c:	e033      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784e:	f7fc f93d 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8007852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007854:	e02f      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd fbae 	bl	8004fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007864:	e027      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007866:	f107 0318 	add.w	r3, r7, #24
 800786a:	4618      	mov	r0, r3
 800786c:	f7fd fcfa 	bl	8005264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007874:	e01f      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007876:	4b2d      	ldr	r3, [pc, #180]	; (800792c <UART_SetConfig+0x934>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007882:	4b2a      	ldr	r3, [pc, #168]	; (800792c <UART_SetConfig+0x934>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	4a24      	ldr	r2, [pc, #144]	; (8007920 <UART_SetConfig+0x928>)
 800788e:	fa22 f303 	lsr.w	r3, r2, r3
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007894:	e00f      	b.n	80078b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007896:	4b22      	ldr	r3, [pc, #136]	; (8007920 <UART_SetConfig+0x928>)
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800789a:	e00c      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800789c:	4b21      	ldr	r3, [pc, #132]	; (8007924 <UART_SetConfig+0x92c>)
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a0:	e009      	b.n	80078b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a8:	e005      	b.n	80078b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80e7 	beq.w	8007a8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	4a19      	ldr	r2, [pc, #100]	; (8007928 <UART_SetConfig+0x930>)
 80078c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d0:	005a      	lsls	r2, r3, #1
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	441a      	add	r2, r3
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d916      	bls.n	8007918 <UART_SetConfig+0x920>
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f0:	d212      	bcs.n	8007918 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f023 030f 	bic.w	r3, r3, #15
 80078fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	b29b      	uxth	r3, r3
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	b29a      	uxth	r2, r3
 8007908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800790a:	4313      	orrs	r3, r2
 800790c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e0b9      	b.n	8007a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800791e:	e0b5      	b.n	8007a8c <UART_SetConfig+0xa94>
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	0800cd3c 	.word	0x0800cd3c
 800792c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007930:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007934:	2b20      	cmp	r3, #32
 8007936:	dc49      	bgt.n	80079cc <UART_SetConfig+0x9d4>
 8007938:	2b00      	cmp	r3, #0
 800793a:	db7c      	blt.n	8007a36 <UART_SetConfig+0xa3e>
 800793c:	2b20      	cmp	r3, #32
 800793e:	d87a      	bhi.n	8007a36 <UART_SetConfig+0xa3e>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x950>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	080079d3 	.word	0x080079d3
 800794c:	080079db 	.word	0x080079db
 8007950:	08007a37 	.word	0x08007a37
 8007954:	08007a37 	.word	0x08007a37
 8007958:	080079e3 	.word	0x080079e3
 800795c:	08007a37 	.word	0x08007a37
 8007960:	08007a37 	.word	0x08007a37
 8007964:	08007a37 	.word	0x08007a37
 8007968:	080079f3 	.word	0x080079f3
 800796c:	08007a37 	.word	0x08007a37
 8007970:	08007a37 	.word	0x08007a37
 8007974:	08007a37 	.word	0x08007a37
 8007978:	08007a37 	.word	0x08007a37
 800797c:	08007a37 	.word	0x08007a37
 8007980:	08007a37 	.word	0x08007a37
 8007984:	08007a37 	.word	0x08007a37
 8007988:	08007a03 	.word	0x08007a03
 800798c:	08007a37 	.word	0x08007a37
 8007990:	08007a37 	.word	0x08007a37
 8007994:	08007a37 	.word	0x08007a37
 8007998:	08007a37 	.word	0x08007a37
 800799c:	08007a37 	.word	0x08007a37
 80079a0:	08007a37 	.word	0x08007a37
 80079a4:	08007a37 	.word	0x08007a37
 80079a8:	08007a37 	.word	0x08007a37
 80079ac:	08007a37 	.word	0x08007a37
 80079b0:	08007a37 	.word	0x08007a37
 80079b4:	08007a37 	.word	0x08007a37
 80079b8:	08007a37 	.word	0x08007a37
 80079bc:	08007a37 	.word	0x08007a37
 80079c0:	08007a37 	.word	0x08007a37
 80079c4:	08007a37 	.word	0x08007a37
 80079c8:	08007a29 	.word	0x08007a29
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d02e      	beq.n	8007a2e <UART_SetConfig+0xa36>
 80079d0:	e031      	b.n	8007a36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d2:	f7fc f865 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 80079d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d8:	e033      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079da:	f7fc f877 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80079de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079e0:	e02f      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fae8 	bl	8004fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f0:	e027      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f2:	f107 0318 	add.w	r3, r7, #24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd fc34 	bl	8005264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a00:	e01f      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a02:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <UART_SetConfig+0xac0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a0e:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <UART_SetConfig+0xac0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	4a28      	ldr	r2, [pc, #160]	; (8007abc <UART_SetConfig+0xac4>)
 8007a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a20:	e00f      	b.n	8007a42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007a22:	4b26      	ldr	r3, [pc, #152]	; (8007abc <UART_SetConfig+0xac4>)
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a26:	e00c      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a28:	4b25      	ldr	r3, [pc, #148]	; (8007ac0 <UART_SetConfig+0xac8>)
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2c:	e009      	b.n	8007a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	e005      	b.n	8007a42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a40:	bf00      	nop
    }

    if (pclk != 0U)
 8007a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d021      	beq.n	8007a8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <UART_SetConfig+0xacc>)
 8007a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a52:	461a      	mov	r2, r3
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	441a      	add	r2, r3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d909      	bls.n	8007a86 <UART_SetConfig+0xa8e>
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a78:	d205      	bcs.n	8007a86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e002      	b.n	8007a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007aa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3748      	adds	r7, #72	; 0x48
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	03d09000 	.word	0x03d09000
 8007ac0:	003d0900 	.word	0x003d0900
 8007ac4:	0800cd3c 	.word	0x0800cd3c

08007ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01a      	beq.n	8007bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc6:	d10a      	bne.n	8007bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b098      	sub	sp, #96	; 0x60
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c1c:	f7f9 fe0c 	bl	8001838 <HAL_GetTick>
 8007c20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d12f      	bne.n	8007c90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f88e 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d022      	beq.n	8007c90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c68:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e063      	b.n	8007d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0304 	and.w	r3, r3, #4
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d149      	bne.n	8007d32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f857 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d03c      	beq.n	8007d32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0a:	61fa      	str	r2, [r7, #28]
 8007d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	69b9      	ldr	r1, [r7, #24]
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	617b      	str	r3, [r7, #20]
   return(result);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e012      	b.n	8007d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3758      	adds	r7, #88	; 0x58
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d70:	e04f      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d78:	d04b      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7a:	f7f9 fd5d 	bl	8001838 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d302      	bcc.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e04e      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d037      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d034      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d031      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d110      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f95b 	bl	8008080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e029      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dec:	d111      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f941 	bl	8008080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0a0      	beq.n	8007d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b0a3      	sub	sp, #140	; 0x8c
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6e:	d10e      	bne.n	8007e8e <UART_Start_Receive_IT+0x52>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <UART_Start_Receive_IT+0x48>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e82:	e02d      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	22ff      	movs	r2, #255	; 0xff
 8007e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8c:	e028      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10d      	bne.n	8007eb2 <UART_Start_Receive_IT+0x76>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <UART_Start_Receive_IT+0x6c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	22ff      	movs	r2, #255	; 0xff
 8007ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea6:	e01b      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	227f      	movs	r2, #127	; 0x7f
 8007eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eb0:	e016      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eba:	d10d      	bne.n	8007ed8 <UART_Start_Receive_IT+0x9c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <UART_Start_Receive_IT+0x92>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	227f      	movs	r2, #127	; 0x7f
 8007ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ecc:	e008      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	223f      	movs	r2, #63	; 0x3f
 8007ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ed6:	e003      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2222      	movs	r2, #34	; 0x22
 8007eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f14:	673a      	str	r2, [r7, #112]	; 0x70
 8007f16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e3      	bne.n	8007ef0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d14f      	bne.n	8007fd2 <UART_Start_Receive_IT+0x196>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d349      	bcc.n	8007fd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f46:	d107      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a47      	ldr	r2, [pc, #284]	; (8008070 <UART_Start_Receive_IT+0x234>)
 8007f54:	675a      	str	r2, [r3, #116]	; 0x74
 8007f56:	e002      	b.n	8007f5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a46      	ldr	r2, [pc, #280]	; (8008074 <UART_Start_Receive_IT+0x238>)
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01a      	beq.n	8007f9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_Start_Receive_IT+0x160>
 8007fd0:	e046      	b.n	8008060 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fda:	d107      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	; (8008078 <UART_Start_Receive_IT+0x23c>)
 8007fe8:	675a      	str	r2, [r3, #116]	; 0x74
 8007fea:	e002      	b.n	8007ff2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a23      	ldr	r2, [pc, #140]	; (800807c <UART_Start_Receive_IT+0x240>)
 8007ff0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d019      	beq.n	800802e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800800e:	677b      	str	r3, [r7, #116]	; 0x74
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
 800801a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_Start_Receive_IT+0x1be>
 800802c:	e018      	b.n	8008060 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 0320 	orr.w	r3, r3, #32
 8008042:	67bb      	str	r3, [r7, #120]	; 0x78
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	378c      	adds	r7, #140	; 0x8c
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	080088a1 	.word	0x080088a1
 8008074:	08008541 	.word	0x08008541
 8008078:	08008389 	.word	0x08008389
 800807c:	080081d1 	.word	0x080081d1

08008080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b095      	sub	sp, #84	; 0x54
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800809c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a6:	643b      	str	r3, [r7, #64]	; 0x40
 80080a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <UART_EndRxTransfer+0xc8>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e5      	bne.n	80080ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d118      	bne.n	8008128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	60bb      	str	r3, [r7, #8]
   return(result);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	647b      	str	r3, [r7, #68]	; 0x44
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6979      	ldr	r1, [r7, #20]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	613b      	str	r3, [r7, #16]
   return(result);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2220      	movs	r2, #32
 800812c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800813c:	bf00      	nop
 800813e:	3754      	adds	r7, #84	; 0x54
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	effffffe 	.word	0xeffffffe

0800814c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7fe ff2e 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	60bb      	str	r3, [r7, #8]
   return(result);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6979      	ldr	r1, [r7, #20]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	613b      	str	r3, [r7, #16]
   return(result);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fe fef9 	bl	8006fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c6:	bf00      	nop
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b09c      	sub	sp, #112	; 0x70
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	2b22      	cmp	r3, #34	; 0x22
 80081ea:	f040 80be 	bne.w	800836a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081fc:	b2d9      	uxtb	r1, r3
 80081fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008202:	b2da      	uxtb	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	400a      	ands	r2, r1
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 80a1 	bne.w	800837a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800824c:	66bb      	str	r3, [r7, #104]	; 0x68
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008256:	65bb      	str	r3, [r7, #88]	; 0x58
 8008258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800825c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e6      	bne.n	8008238 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	667b      	str	r3, [r7, #100]	; 0x64
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800828a:	647a      	str	r2, [r7, #68]	; 0x44
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a33      	ldr	r2, [pc, #204]	; (8008384 <UART_RxISR_8BIT+0x1b4>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d01f      	beq.n	80082fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d018      	beq.n	80082fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	623b      	str	r3, [r7, #32]
   return(result);
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082de:	663b      	str	r3, [r7, #96]	; 0x60
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
 80082ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d12e      	bne.n	8008362 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60fb      	str	r3, [r7, #12]
   return(result);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0310 	bic.w	r3, r3, #16
 800831e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b10      	cmp	r3, #16
 8008348:	d103      	bne.n	8008352 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2210      	movs	r2, #16
 8008350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fe fe40 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008360:	e00b      	b.n	800837a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7f8 f974 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8008368:	e007      	b.n	800837a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0208 	orr.w	r2, r2, #8
 8008378:	619a      	str	r2, [r3, #24]
}
 800837a:	bf00      	nop
 800837c:	3770      	adds	r7, #112	; 0x70
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	58000c00 	.word	0x58000c00

08008388 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b09c      	sub	sp, #112	; 0x70
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008396:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	2b22      	cmp	r3, #34	; 0x22
 80083a2:	f040 80be 	bne.w	8008522 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80083ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80083be:	4013      	ands	r3, r2
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ca:	1c9a      	adds	r2, r3, #2
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 80a1 	bne.w	8008532 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	667b      	str	r3, [r7, #100]	; 0x64
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
 8008410:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	663b      	str	r3, [r7, #96]	; 0x60
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008442:	643a      	str	r2, [r7, #64]	; 0x40
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a33      	ldr	r2, [pc, #204]	; (800853c <UART_RxISR_16BIT+0x1b4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01f      	beq.n	80084b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d12e      	bne.n	800851a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6979      	ldr	r1, [r7, #20]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	613b      	str	r3, [r7, #16]
   return(result);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b10      	cmp	r3, #16
 8008500:	d103      	bne.n	800850a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2210      	movs	r2, #16
 8008508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fe fd64 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008518:	e00b      	b.n	8008532 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7f8 f898 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8008520:	e007      	b.n	8008532 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0208 	orr.w	r2, r2, #8
 8008530:	619a      	str	r2, [r3, #24]
}
 8008532:	bf00      	nop
 8008534:	3770      	adds	r7, #112	; 0x70
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	58000c00 	.word	0x58000c00

08008540 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b0ac      	sub	sp, #176	; 0xb0
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800854e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008576:	2b22      	cmp	r3, #34	; 0x22
 8008578:	f040 8180 	bne.w	800887c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008582:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008586:	e123      	b.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008592:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008596:	b2d9      	uxtb	r1, r3
 8008598:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800859c:	b2da      	uxtb	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	400a      	ands	r2, r1
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d053      	beq.n	8008682 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0xca>
 80085e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2201      	movs	r2, #1
 80085f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008600:	f043 0201 	orr.w	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800860a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2202      	movs	r2, #2
 8008628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f043 0204 	orr.w	r2, r3, #4
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800863a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d011      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2204      	movs	r2, #4
 8008658:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008660:	f043 0202 	orr.w	r2, r3, #2
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe fca9 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 80a0 	bne.w	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80086b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80086c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e4      	bne.n	8008690 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80086d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d8:	4b6e      	ldr	r3, [pc, #440]	; (8008894 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80086da:	4013      	ands	r3, r2
 80086dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80086ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80086f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e3      	bne.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a60      	ldr	r2, [pc, #384]	; (8008898 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d021      	beq.n	8008760 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01a      	beq.n	8008760 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800873e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800874c:	657b      	str	r3, [r7, #84]	; 0x54
 800874e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e4      	bne.n	800872a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008764:	2b01      	cmp	r3, #1
 8008766:	d130      	bne.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	f023 0310 	bic.w	r3, r3, #16
 8008782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d103      	bne.n	80087ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2210      	movs	r2, #16
 80087b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fe fc0c 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
 80087c8:	e002      	b.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f7 ff40 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d006      	beq.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80087d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f aed1 	bne.w	8008588 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d049      	beq.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008802:	429a      	cmp	r2, r3
 8008804:	d242      	bcs.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	61fb      	str	r3, [r7, #28]
   return(result);
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800881c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800882a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e3      	bne.n	8008806 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a16      	ldr	r2, [pc, #88]	; (800889c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008842:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60bb      	str	r3, [r7, #8]
   return(result);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f043 0320 	orr.w	r3, r3, #32
 8008858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6979      	ldr	r1, [r7, #20]
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	613b      	str	r3, [r7, #16]
   return(result);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e4      	bne.n	8008844 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800887a:	e007      	b.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0208 	orr.w	r2, r2, #8
 800888a:	619a      	str	r2, [r3, #24]
}
 800888c:	bf00      	nop
 800888e:	37b0      	adds	r7, #176	; 0xb0
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	effffffe 	.word	0xeffffffe
 8008898:	58000c00 	.word	0x58000c00
 800889c:	080081d1 	.word	0x080081d1

080088a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b0ae      	sub	sp, #184	; 0xb8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	2b22      	cmp	r3, #34	; 0x22
 80088d8:	f040 8184 	bne.w	8008be4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e6:	e127      	b.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80088fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80088fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008902:	4013      	ands	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800890a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008910:	1c9a      	adds	r2, r3, #2
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b00      	cmp	r3, #0
 800893c:	d053      	beq.n	80089e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800893e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d011      	beq.n	800896e <UART_RxISR_16BIT_FIFOEN+0xce>
 800894a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00b      	beq.n	800896e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2201      	movs	r2, #1
 800895c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008964:	f043 0201 	orr.w	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800896e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d011      	beq.n	800899e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800897a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2202      	movs	r2, #2
 800898c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008994:	f043 0204 	orr.w	r2, r3, #4
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800899e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089a2:	f003 0304 	and.w	r3, r3, #4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2204      	movs	r2, #4
 80089bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c4:	f043 0202 	orr.w	r2, r3, #2
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d006      	beq.n	80089e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fe faf7 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f040 80a2 	bne.w	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e2      	bne.n	80089f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a40:	4b6e      	ldr	r3, [pc, #440]	; (8008bfc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e3      	bne.n	8008a2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a60      	ldr	r2, [pc, #384]	; (8008c00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d021      	beq.n	8008ac8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01a      	beq.n	8008ac8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ab4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ab6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e4      	bne.n	8008a92 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d130      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	f023 0310 	bic.w	r3, r3, #16
 8008aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af8:	647b      	str	r3, [r7, #68]	; 0x44
 8008afa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e4      	bne.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d103      	bne.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2210      	movs	r2, #16
 8008b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe fa58 	bl	8006fe0 <HAL_UARTEx_RxEventCallback>
 8008b30:	e002      	b.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7f7 fd8c 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f aecd 	bne.w	80088e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b54:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d049      	beq.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d242      	bcs.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b92:	633a      	str	r2, [r7, #48]	; 0x30
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e3      	bne.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a16      	ldr	r2, [pc, #88]	; (8008c04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008baa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f043 0320 	orr.w	r3, r3, #32
 8008bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	69b9      	ldr	r1, [r7, #24]
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	617b      	str	r3, [r7, #20]
   return(result);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e4      	bne.n	8008bac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be2:	e007      	b.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	37b8      	adds	r7, #184	; 0xb8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	effffffe 	.word	0xeffffffe
 8008c00:	58000c00 	.word	0x58000c00
 8008c04:	08008389 	.word	0x08008389

08008c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e027      	b.n	8008caa <HAL_UARTEx_DisableFifoMode+0x66>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2224      	movs	r2, #36	; 0x24
 8008c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0201 	bic.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e02d      	b.n	8008d2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	; 0x24
 8008cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f850 	bl	8008db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e02d      	b.n	8008da6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2224      	movs	r2, #36	; 0x24
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0201 	bic.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f812 	bl	8008db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d108      	bne.n	8008dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dd0:	e031      	b.n	8008e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	0e5b      	lsrs	r3, r3, #25
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	0f5b      	lsrs	r3, r3, #29
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	7b3a      	ldrb	r2, [r7, #12]
 8008dfe:	4911      	ldr	r1, [pc, #68]	; (8008e44 <UARTEx_SetNbDataToProcess+0x94>)
 8008e00:	5c8a      	ldrb	r2, [r1, r2]
 8008e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e06:	7b3a      	ldrb	r2, [r7, #12]
 8008e08:	490f      	ldr	r1, [pc, #60]	; (8008e48 <UARTEx_SetNbDataToProcess+0x98>)
 8008e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	7b7a      	ldrb	r2, [r7, #13]
 8008e1c:	4909      	ldr	r1, [pc, #36]	; (8008e44 <UARTEx_SetNbDataToProcess+0x94>)
 8008e1e:	5c8a      	ldrb	r2, [r1, r2]
 8008e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e24:	7b7a      	ldrb	r2, [r7, #13]
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <UARTEx_SetNbDataToProcess+0x98>)
 8008e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	0800cd54 	.word	0x0800cd54
 8008e48:	0800cd5c 	.word	0x0800cd5c

08008e4c <__NVIC_SetPriority>:
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	db0a      	blt.n	8008e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	490c      	ldr	r1, [pc, #48]	; (8008e98 <__NVIC_SetPriority+0x4c>)
 8008e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e6a:	0112      	lsls	r2, r2, #4
 8008e6c:	b2d2      	uxtb	r2, r2
 8008e6e:	440b      	add	r3, r1
 8008e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e74:	e00a      	b.n	8008e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	4908      	ldr	r1, [pc, #32]	; (8008e9c <__NVIC_SetPriority+0x50>)
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	3b04      	subs	r3, #4
 8008e84:	0112      	lsls	r2, r2, #4
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	440b      	add	r3, r1
 8008e8a:	761a      	strb	r2, [r3, #24]
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	e000e100 	.word	0xe000e100
 8008e9c:	e000ed00 	.word	0xe000ed00

08008ea0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <SysTick_Handler+0x1c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ea8:	f002 f824 	bl	800aef4 <xTaskGetSchedulerState>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d001      	beq.n	8008eb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eb2:	f002 fe41 	bl	800bb38 <xPortSysTickHandler>
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	e000e010 	.word	0xe000e010

08008ec0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f06f 0004 	mvn.w	r0, #4
 8008eca:	f7ff ffbf 	bl	8008e4c <__NVIC_SetPriority>
#endif
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eda:	f3ef 8305 	mrs	r3, IPSR
 8008ede:	603b      	str	r3, [r7, #0]
  return(result);
 8008ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ee6:	f06f 0305 	mvn.w	r3, #5
 8008eea:	607b      	str	r3, [r7, #4]
 8008eec:	e00c      	b.n	8008f08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <osKernelInitialize+0x44>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d105      	bne.n	8008f02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ef6:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <osKernelInitialize+0x44>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e002      	b.n	8008f08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f08:	687b      	ldr	r3, [r7, #4]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	240003b8 	.word	0x240003b8

08008f1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f22:	f3ef 8305 	mrs	r3, IPSR
 8008f26:	603b      	str	r3, [r7, #0]
  return(result);
 8008f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f2e:	f06f 0305 	mvn.w	r3, #5
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e010      	b.n	8008f58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <osKernelStart+0x48>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d109      	bne.n	8008f52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f3e:	f7ff ffbf 	bl	8008ec0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f42:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <osKernelStart+0x48>)
 8008f44:	2202      	movs	r2, #2
 8008f46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f48:	f001 faee 	bl	800a528 <vTaskStartScheduler>
      stat = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	e002      	b.n	8008f58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f58:	687b      	ldr	r3, [r7, #4]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	240003b8 	.word	0x240003b8

08008f68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08e      	sub	sp, #56	; 0x38
 8008f6c:	af04      	add	r7, sp, #16
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f78:	f3ef 8305 	mrs	r3, IPSR
 8008f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d17e      	bne.n	8009082 <osThreadNew+0x11a>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d07b      	beq.n	8009082 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f8a:	2380      	movs	r3, #128	; 0x80
 8008f8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f8e:	2318      	movs	r3, #24
 8008f90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d045      	beq.n	800902e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <osThreadNew+0x48>
        name = attr->name;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <osThreadNew+0x6e>
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	2b38      	cmp	r3, #56	; 0x38
 8008fc8:	d805      	bhi.n	8008fd6 <osThreadNew+0x6e>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <osThreadNew+0x72>
        return (NULL);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e054      	b.n	8009084 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	089b      	lsrs	r3, r3, #2
 8008fe8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00e      	beq.n	8009010 <osThreadNew+0xa8>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b5b      	cmp	r3, #91	; 0x5b
 8008ff8:	d90a      	bls.n	8009010 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d006      	beq.n	8009010 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <osThreadNew+0xa8>
        mem = 1;
 800900a:	2301      	movs	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	e010      	b.n	8009032 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10c      	bne.n	8009032 <osThreadNew+0xca>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d108      	bne.n	8009032 <osThreadNew+0xca>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <osThreadNew+0xca>
          mem = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	e001      	b.n	8009032 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d110      	bne.n	800905a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009040:	9202      	str	r2, [sp, #8]
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f001 f8c8 	bl	800a1e4 <xTaskCreateStatic>
 8009054:	4603      	mov	r3, r0
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	e013      	b.n	8009082 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d110      	bne.n	8009082 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	b29a      	uxth	r2, r3
 8009064:	f107 0310 	add.w	r3, r7, #16
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f001 f913 	bl	800a29e <xTaskCreate>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d001      	beq.n	8009082 <osThreadNew+0x11a>
            hTask = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009082:	693b      	ldr	r3, [r7, #16]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3728      	adds	r7, #40	; 0x28
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009098:	f3ef 8305 	mrs	r3, IPSR
 800909c:	60fb      	str	r3, [r7, #12]
  return(result);
 800909e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d12d      	bne.n	8009100 <osEventFlagsNew+0x74>
    mem = -1;
 80090a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090a8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d015      	beq.n	80090dc <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <osEventFlagsNew+0x3a>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b1f      	cmp	r3, #31
 80090be:	d902      	bls.n	80090c6 <osEventFlagsNew+0x3a>
        mem = 1;
 80090c0:	2301      	movs	r3, #1
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	e00c      	b.n	80090e0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d108      	bne.n	80090e0 <osEventFlagsNew+0x54>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d104      	bne.n	80090e0 <osEventFlagsNew+0x54>
          mem = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	e001      	b.n	80090e0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d106      	bne.n	80090f4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f8ec 	bl	80092c8 <xEventGroupCreateStatic>
 80090f0:	6178      	str	r0, [r7, #20]
 80090f2:	e005      	b.n	8009100 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80090fa:	f000 f91c 	bl	8009336 <xEventGroupCreate>
 80090fe:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009100:	697b      	ldr	r3, [r7, #20]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <osEventFlagsSet+0x1e>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800912a:	f06f 0303 	mvn.w	r3, #3
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e028      	b.n	8009184 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009132:	f3ef 8305 	mrs	r3, IPSR
 8009136:	60fb      	str	r3, [r7, #12]
  return(result);
 8009138:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01d      	beq.n	800917a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009142:	f107 0308 	add.w	r3, r7, #8
 8009146:	461a      	mov	r2, r3
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6938      	ldr	r0, [r7, #16]
 800914c:	f000 fa96 	bl	800967c <xEventGroupSetBitsFromISR>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8009156:	f06f 0302 	mvn.w	r3, #2
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e012      	b.n	8009184 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <osEventFlagsSet+0x78>
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <osEventFlagsSet+0x84>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	e004      	b.n	8009184 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6938      	ldr	r0, [r7, #16]
 800917e:	f000 f9c3 	bl	8009508 <xEventGroupSetBits>
 8009182:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009184:	697b      	ldr	r3, [r7, #20]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	e000ed04 	.word	0xe000ed04

08009194 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b08c      	sub	sp, #48	; 0x30
 8009198:	af02      	add	r7, sp, #8
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <osEventFlagsWait+0x22>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80091b6:	f06f 0303 	mvn.w	r3, #3
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	e04b      	b.n	8009256 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	617b      	str	r3, [r7, #20]
  return(result);
 80091c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80091ca:	f06f 0305 	mvn.w	r3, #5
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e041      	b.n	8009256 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
 80091e0:	e001      	b.n	80091e6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	623b      	str	r3, [r7, #32]
 80091f4:	e001      	b.n	80091fa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80091f6:	2301      	movs	r3, #1
 80091f8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	6a3a      	ldr	r2, [r7, #32]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f000 f8b1 	bl	800936c <xEventGroupWaitBits>
 800920a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	4013      	ands	r3, r2
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	429a      	cmp	r2, r3
 8009220:	d019      	beq.n	8009256 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009228:	f06f 0301 	mvn.w	r3, #1
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	e012      	b.n	8009256 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009230:	f06f 0302 	mvn.w	r3, #2
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	e00e      	b.n	8009256 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009248:	f06f 0301 	mvn.w	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	e002      	b.n	8009256 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009250:	f06f 0302 	mvn.w	r3, #2
 8009254:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3728      	adds	r7, #40	; 0x28
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a07      	ldr	r2, [pc, #28]	; (800928c <vApplicationGetIdleTaskMemory+0x2c>)
 8009270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4a06      	ldr	r2, [pc, #24]	; (8009290 <vApplicationGetIdleTaskMemory+0x30>)
 8009276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2280      	movs	r2, #128	; 0x80
 800927c:	601a      	str	r2, [r3, #0]
}
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	240003bc 	.word	0x240003bc
 8009290:	24000418 	.word	0x24000418

08009294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a07      	ldr	r2, [pc, #28]	; (80092c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80092a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4a06      	ldr	r2, [pc, #24]	; (80092c4 <vApplicationGetTimerTaskMemory+0x30>)
 80092aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092b2:	601a      	str	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	24000618 	.word	0x24000618
 80092c4:	24000674 	.word	0x24000674

080092c8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80092ec:	2320      	movs	r3, #32
 80092ee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d00a      	beq.n	800930c <xEventGroupCreateStatic+0x44>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60fb      	str	r3, [r7, #12]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	3304      	adds	r3, #4
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f9bf 	bl	80096a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2201      	movs	r2, #1
 800932a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800932c:	697b      	ldr	r3, [r7, #20]
	}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800933c:	2020      	movs	r0, #32
 800933e:	f002 fc8b 	bl	800bc58 <pvPortMalloc>
 8009342:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f9a5 	bl	80096a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009360:	687b      	ldr	r3, [r7, #4]
	}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b090      	sub	sp, #64	; 0x40
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10a      	bne.n	80093a2 <xEventGroupWaitBits+0x36>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	623b      	str	r3, [r7, #32]
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00a      	beq.n	80093c2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	61fb      	str	r3, [r7, #28]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xEventGroupWaitBits+0x72>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61bb      	str	r3, [r7, #24]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093de:	f001 fd89 	bl	800aef4 <xTaskGetSchedulerState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <xEventGroupWaitBits+0x82>
 80093e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <xEventGroupWaitBits+0x86>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xEventGroupWaitBits+0x88>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xEventGroupWaitBits+0xa2>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	617b      	str	r3, [r7, #20]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800940e:	f001 f8f1 	bl	800a5f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800941e:	f000 f90b 	bl	8009638 <prvTestWaitCondition>
 8009422:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00e      	beq.n	8009448 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800942e:	2300      	movs	r3, #0
 8009430:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d028      	beq.n	800948a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	43db      	mvns	r3, r3
 8009440:	401a      	ands	r2, r3
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	e020      	b.n	800948a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944a:	2b00      	cmp	r3, #0
 800944c:	d104      	bne.n	8009458 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	633b      	str	r3, [r7, #48]	; 0x30
 8009456:	e018      	b.n	800948a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009464:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	1d18      	adds	r0, r3, #4
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	4313      	orrs	r3, r2
 800947e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009480:	4619      	mov	r1, r3
 8009482:	f001 faaf 	bl	800a9e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800948a:	f001 f8c1 	bl	800a610 <xTaskResumeAll>
 800948e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009492:	2b00      	cmp	r3, #0
 8009494:	d031      	beq.n	80094fa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d107      	bne.n	80094ac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800949c:	4b19      	ldr	r3, [pc, #100]	; (8009504 <xEventGroupWaitBits+0x198>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80094ac:	f001 fdae 	bl	800b00c <uxTaskResetEventItemValue>
 80094b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80094b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11a      	bne.n	80094f2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80094bc:	f002 faaa 	bl	800ba14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80094cc:	f000 f8b4 	bl	8009638 <prvTestWaitCondition>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d006      	beq.n	80094ea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	43db      	mvns	r3, r3
 80094e4:	401a      	ands	r2, r3
 80094e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80094ee:	f002 fac1 	bl	800ba74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3740      	adds	r7, #64	; 0x40
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08e      	sub	sp, #56	; 0x38
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009512:	2300      	movs	r3, #0
 8009514:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800951a:	2300      	movs	r3, #0
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xEventGroupSetBits+0x32>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	613b      	str	r3, [r7, #16]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <xEventGroupSetBits+0x52>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	60fb      	str	r3, [r7, #12]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	3304      	adds	r3, #4
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	3308      	adds	r3, #8
 8009564:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009566:	f001 f845 	bl	800a5f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	431a      	orrs	r2, r3
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800957c:	e03c      	b.n	80095f8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800957e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009594:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800959c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d108      	bne.n	80095ba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b8:	e008      	b.n	80095cc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	4013      	ands	r3, r2
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d101      	bne.n	80095cc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80095dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80095ec:	4619      	mov	r1, r3
 80095ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095f0:	f001 fac4 	bl	800ab7c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80095f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d1be      	bne.n	800957e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	43db      	mvns	r3, r3
 8009608:	401a      	ands	r2, r3
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800960e:	f000 ffff 	bl	800a610 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	681b      	ldr	r3, [r3, #0]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3738      	adds	r7, #56	; 0x38
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff ff6c 	bl	8009508 <xEventGroupSetBits>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009644:	2300      	movs	r3, #0
 8009646:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d107      	bne.n	800965e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009658:	2301      	movs	r3, #1
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e007      	b.n	800966e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4013      	ands	r3, r2
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	429a      	cmp	r2, r3
 8009668:	d101      	bne.n	800966e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800966a:	2301      	movs	r3, #1
 800966c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800966e:	697b      	ldr	r3, [r7, #20]
}
 8009670:	4618      	mov	r0, r3
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	68f9      	ldr	r1, [r7, #12]
 800968e:	4804      	ldr	r0, [pc, #16]	; (80096a0 <xEventGroupSetBitsFromISR+0x24>)
 8009690:	f002 f876 	bl	800b780 <xTimerPendFunctionCallFromISR>
 8009694:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009696:	697b      	ldr	r3, [r7, #20]
	}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	0800961f 	.word	0x0800961f

080096a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f103 0208 	add.w	r2, r3, #8
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f103 0208 	add.w	r2, r3, #8
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f103 0208 	add.w	r2, r3, #8
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
}
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975c:	d103      	bne.n	8009766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e00c      	b.n	8009780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3308      	adds	r3, #8
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	e002      	b.n	8009774 <vListInsert+0x2e>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d2f6      	bcs.n	800976e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
}
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	6892      	ldr	r2, [r2, #8]
 80097ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	6852      	ldr	r2, [r2, #4]
 80097d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d103      	bne.n	80097ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <xQueueGenericReset+0x2a>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60bb      	str	r3, [r7, #8]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009836:	f002 f8ed 	bl	800ba14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009846:	fb01 f303 	mul.w	r3, r1, r3
 800984a:	441a      	add	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009866:	3b01      	subs	r3, #1
 8009868:	68f9      	ldr	r1, [r7, #12]
 800986a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800986c:	fb01 f303 	mul.w	r3, r1, r3
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	22ff      	movs	r2, #255	; 0xff
 800987a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	22ff      	movs	r2, #255	; 0xff
 8009882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d114      	bne.n	80098b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01a      	beq.n	80098ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3310      	adds	r3, #16
 8009898:	4618      	mov	r0, r3
 800989a:	f001 f90b 	bl	800aab4 <xTaskRemoveFromEventList>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d012      	beq.n	80098ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <xQueueGenericReset+0xcc>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	e009      	b.n	80098ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3310      	adds	r3, #16
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff fef2 	bl	80096a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3324      	adds	r3, #36	; 0x24
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff feed 	bl	80096a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80098ca:	f002 f8d3 	bl	800ba74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80098ce:	2301      	movs	r3, #1
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08e      	sub	sp, #56	; 0x38
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <xQueueGenericCreateStatic+0x52>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <xQueueGenericCreateStatic+0x56>
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <xQueueGenericCreateStatic+0x58>
 8009932:	2300      	movs	r3, #0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	623b      	str	r3, [r7, #32]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <xQueueGenericCreateStatic+0x7e>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <xQueueGenericCreateStatic+0x82>
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <xQueueGenericCreateStatic+0x84>
 800995e:	2300      	movs	r3, #0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	61fb      	str	r3, [r7, #28]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800997a:	2350      	movs	r3, #80	; 0x50
 800997c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b50      	cmp	r3, #80	; 0x50
 8009982:	d00a      	beq.n	800999a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	61bb      	str	r3, [r7, #24]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800999a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00d      	beq.n	80099c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	4613      	mov	r3, r2
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f805 	bl	80099cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3730      	adds	r7, #48	; 0x30
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	e002      	b.n	80099ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099fa:	2101      	movs	r1, #1
 80099fc:	69b8      	ldr	r0, [r7, #24]
 80099fe:	f7ff ff05 	bl	800980c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08e      	sub	sp, #56	; 0x38
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a22:	2300      	movs	r3, #0
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <xQueueGenericSend+0x32>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <xQueueGenericSend+0x40>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <xQueueGenericSend+0x44>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <xQueueGenericSend+0x46>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <xQueueGenericSend+0x60>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d103      	bne.n	8009a82 <xQueueGenericSend+0x6e>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <xQueueGenericSend+0x72>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <xQueueGenericSend+0x74>
 8009a86:	2300      	movs	r3, #0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	623b      	str	r3, [r7, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aa2:	f001 fa27 	bl	800aef4 <xTaskGetSchedulerState>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <xQueueGenericSend+0x9e>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <xQueueGenericSend+0xa2>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <xQueueGenericSend+0xa4>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	61fb      	str	r3, [r7, #28]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ad2:	f001 ff9f 	bl	800ba14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d302      	bcc.n	8009ae8 <xQueueGenericSend+0xd4>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d129      	bne.n	8009b3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aee:	f000 fa0b 	bl	8009f08 <prvCopyDataToQueue>
 8009af2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	3324      	adds	r3, #36	; 0x24
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 ffd7 	bl	800aab4 <xTaskRemoveFromEventList>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d013      	beq.n	8009b34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b0c:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <xQueueGenericSend+0x1f8>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	e00a      	b.n	8009b34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b24:	4b39      	ldr	r3, [pc, #228]	; (8009c0c <xQueueGenericSend+0x1f8>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b34:	f001 ff9e 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e063      	b.n	8009c04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d103      	bne.n	8009b4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b42:	f001 ff97 	bl	800ba74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e05c      	b.n	8009c04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d106      	bne.n	8009b5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b50:	f107 0314 	add.w	r3, r7, #20
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 f873 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b5e:	f001 ff89 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b62:	f000 fd47 	bl	800a5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b66:	f001 ff55 	bl	800ba14 <vPortEnterCritical>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b76:	d103      	bne.n	8009b80 <xQueueGenericSend+0x16c>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b86:	b25b      	sxtb	r3, r3
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b8c:	d103      	bne.n	8009b96 <xQueueGenericSend+0x182>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b96:	f001 ff6d 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b9a:	1d3a      	adds	r2, r7, #4
 8009b9c:	f107 0314 	add.w	r3, r7, #20
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 f862 	bl	800ac6c <xTaskCheckForTimeOut>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d124      	bne.n	8009bf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb0:	f000 faa2 	bl	800a0f8 <prvIsQueueFull>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d018      	beq.n	8009bec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	3310      	adds	r3, #16
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 feea 	bl	800a99c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bca:	f000 fa2d 	bl	800a028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bce:	f000 fd1f 	bl	800a610 <xTaskResumeAll>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f47f af7c 	bne.w	8009ad2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <xQueueGenericSend+0x1f8>)
 8009bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	e772      	b.n	8009ad2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bee:	f000 fa1b 	bl	800a028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bf2:	f000 fd0d 	bl	800a610 <xTaskResumeAll>
 8009bf6:	e76c      	b.n	8009ad2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bfa:	f000 fa15 	bl	800a028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bfe:	f000 fd07 	bl	800a610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3738      	adds	r7, #56	; 0x38
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b090      	sub	sp, #64	; 0x40
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d103      	bne.n	8009c4c <xQueueGenericSendFromISR+0x3c>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <xQueueGenericSendFromISR+0x40>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e000      	b.n	8009c52 <xQueueGenericSendFromISR+0x42>
 8009c50:	2300      	movs	r3, #0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d103      	bne.n	8009c7a <xQueueGenericSendFromISR+0x6a>
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <xQueueGenericSendFromISR+0x6e>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <xQueueGenericSendFromISR+0x70>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	623b      	str	r3, [r7, #32]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c9a:	f001 ff9d 	bl	800bbd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	61fa      	str	r2, [r7, #28]
 8009cb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d302      	bcc.n	8009ccc <xQueueGenericSendFromISR+0xbc>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d12f      	bne.n	8009d2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ce2:	f000 f911 	bl	8009f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ce6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cee:	d112      	bne.n	8009d16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d016      	beq.n	8009d26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	3324      	adds	r3, #36	; 0x24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fed9 	bl	800aab4 <xTaskRemoveFromEventList>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00e      	beq.n	8009d26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	e007      	b.n	8009d26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	b25a      	sxtb	r2, r3
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d26:	2301      	movs	r3, #1
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009d2a:	e001      	b.n	8009d30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3740      	adds	r7, #64	; 0x40
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08c      	sub	sp, #48	; 0x30
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d54:	2300      	movs	r3, #0
 8009d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <xQueueReceive+0x30>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	623b      	str	r3, [r7, #32]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <xQueueReceive+0x3e>
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <xQueueReceive+0x42>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <xQueueReceive+0x44>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xQueueReceive+0x5e>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	61fb      	str	r3, [r7, #28]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009da6:	f001 f8a5 	bl	800aef4 <xTaskGetSchedulerState>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <xQueueReceive+0x6e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <xQueueReceive+0x72>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <xQueueReceive+0x74>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <xQueueReceive+0x8e>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	61bb      	str	r3, [r7, #24]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dd6:	f001 fe1d 	bl	800ba14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d01f      	beq.n	8009e26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dea:	f000 f8f7 	bl	8009fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	1e5a      	subs	r2, r3, #1
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	3310      	adds	r3, #16
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fe56 	bl	800aab4 <xTaskRemoveFromEventList>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e0e:	4b3d      	ldr	r3, [pc, #244]	; (8009f04 <xQueueReceive+0x1bc>)
 8009e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e1e:	f001 fe29 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e069      	b.n	8009efa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d103      	bne.n	8009e34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e2c:	f001 fe22 	bl	800ba74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e30:	2300      	movs	r3, #0
 8009e32:	e062      	b.n	8009efa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e3a:	f107 0310 	add.w	r3, r7, #16
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fefe 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e48:	f001 fe14 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e4c:	f000 fbd2 	bl	800a5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e50:	f001 fde0 	bl	800ba14 <vPortEnterCritical>
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e5a:	b25b      	sxtb	r3, r3
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e60:	d103      	bne.n	8009e6a <xQueueReceive+0x122>
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e70:	b25b      	sxtb	r3, r3
 8009e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e76:	d103      	bne.n	8009e80 <xQueueReceive+0x138>
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e80:	f001 fdf8 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e84:	1d3a      	adds	r2, r7, #4
 8009e86:	f107 0310 	add.w	r3, r7, #16
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 feed 	bl	800ac6c <xTaskCheckForTimeOut>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d123      	bne.n	8009ee0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9a:	f000 f917 	bl	800a0cc <prvIsQueueEmpty>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	3324      	adds	r3, #36	; 0x24
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fd75 	bl	800a99c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb4:	f000 f8b8 	bl	800a028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009eb8:	f000 fbaa 	bl	800a610 <xTaskResumeAll>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d189      	bne.n	8009dd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <xQueueReceive+0x1bc>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e780      	b.n	8009dd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed6:	f000 f8a7 	bl	800a028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eda:	f000 fb99 	bl	800a610 <xTaskResumeAll>
 8009ede:	e77a      	b.n	8009dd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee2:	f000 f8a1 	bl	800a028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ee6:	f000 fb93 	bl	800a610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eec:	f000 f8ee 	bl	800a0cc <prvIsQueueEmpty>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f43f af6f 	beq.w	8009dd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3730      	adds	r7, #48	; 0x30
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10d      	bne.n	8009f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d14d      	bne.n	8009fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fffc 	bl	800af30 <xTaskPriorityDisinherit>
 8009f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	609a      	str	r2, [r3, #8]
 8009f40:	e043      	b.n	8009fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d119      	bne.n	8009f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6858      	ldr	r0, [r3, #4]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f50:	461a      	mov	r2, r3
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	f002 f894 	bl	800c080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	441a      	add	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d32b      	bcc.n	8009fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	e026      	b.n	8009fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68d8      	ldr	r0, [r3, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f84:	461a      	mov	r2, r3
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	f002 f87a 	bl	800c080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	425b      	negs	r3, r3
 8009f96:	441a      	add	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d207      	bcs.n	8009fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	425b      	negs	r3, r3
 8009fb2:	441a      	add	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d105      	bne.n	8009fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009fd2:	697b      	ldr	r3, [r7, #20]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d018      	beq.n	800a020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff6:	441a      	add	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	429a      	cmp	r2, r3
 800a006:	d303      	bcc.n	800a010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68d9      	ldr	r1, [r3, #12]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a018:	461a      	mov	r2, r3
 800a01a:	6838      	ldr	r0, [r7, #0]
 800a01c:	f002 f830 	bl	800c080 <memcpy>
	}
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a030:	f001 fcf0 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a03a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a03c:	e011      	b.n	800a062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d012      	beq.n	800a06c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3324      	adds	r3, #36	; 0x24
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fd32 	bl	800aab4 <xTaskRemoveFromEventList>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a056:	f000 fe6b 	bl	800ad30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dce9      	bgt.n	800a03e <prvUnlockQueue+0x16>
 800a06a:	e000      	b.n	800a06e <prvUnlockQueue+0x46>
					break;
 800a06c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	22ff      	movs	r2, #255	; 0xff
 800a072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a076:	f001 fcfd 	bl	800ba74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a07a:	f001 fccb 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a086:	e011      	b.n	800a0ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d012      	beq.n	800a0b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3310      	adds	r3, #16
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fd0d 	bl	800aab4 <xTaskRemoveFromEventList>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0a0:	f000 fe46 	bl	800ad30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dce9      	bgt.n	800a088 <prvUnlockQueue+0x60>
 800a0b4:	e000      	b.n	800a0b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	22ff      	movs	r2, #255	; 0xff
 800a0bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0c0:	f001 fcd8 	bl	800ba74 <vPortExitCritical>
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0d4:	f001 fc9e 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e001      	b.n	800a0ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ea:	f001 fcc3 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a100:	f001 fc88 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d102      	bne.n	800a116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	e001      	b.n	800a11a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a11a:	f001 fcab 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800a11e:	68fb      	ldr	r3, [r7, #12]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
 800a136:	e014      	b.n	800a162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a138:	4a0f      	ldr	r2, [pc, #60]	; (800a178 <vQueueAddToRegistry+0x50>)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10b      	bne.n	800a15c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a144:	490c      	ldr	r1, [pc, #48]	; (800a178 <vQueueAddToRegistry+0x50>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a14e:	4a0a      	ldr	r2, [pc, #40]	; (800a178 <vQueueAddToRegistry+0x50>)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a15a:	e006      	b.n	800a16a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b07      	cmp	r3, #7
 800a166:	d9e7      	bls.n	800a138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	24000a74 	.word	0x24000a74

0800a17c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a18c:	f001 fc42 	bl	800ba14 <vPortEnterCritical>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a196:	b25b      	sxtb	r3, r3
 800a198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a19c:	d103      	bne.n	800a1a6 <vQueueWaitForMessageRestricted+0x2a>
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ac:	b25b      	sxtb	r3, r3
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b2:	d103      	bne.n	800a1bc <vQueueWaitForMessageRestricted+0x40>
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1bc:	f001 fc5a 	bl	800ba74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	3324      	adds	r3, #36	; 0x24
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 fc43 	bl	800aa5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	f7ff ff26 	bl	800a028 <prvUnlockQueue>
	}
 800a1dc:	bf00      	nop
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08e      	sub	sp, #56	; 0x38
 800a1e8:	af04      	add	r7, sp, #16
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10a      	bne.n	800a20e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	623b      	str	r3, [r7, #32]
}
 800a20a:	bf00      	nop
 800a20c:	e7fe      	b.n	800a20c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xTaskCreateStatic+0x46>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	61fb      	str	r3, [r7, #28]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a22a:	235c      	movs	r3, #92	; 0x5c
 800a22c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b5c      	cmp	r3, #92	; 0x5c
 800a232:	d00a      	beq.n	800a24a <xTaskCreateStatic+0x66>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	61bb      	str	r3, [r7, #24]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a24a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01e      	beq.n	800a290 <xTaskCreateStatic+0xac>
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01b      	beq.n	800a290 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	2202      	movs	r2, #2
 800a266:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a26a:	2300      	movs	r3, #0
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	9302      	str	r3, [sp, #8]
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f850 	bl	800a328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a28a:	f000 f8dd 	bl	800a448 <prvAddNewTaskToReadyList>
 800a28e:	e001      	b.n	800a294 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
	}
 800a296:	4618      	mov	r0, r3
 800a298:	3728      	adds	r7, #40	; 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b08c      	sub	sp, #48	; 0x30
 800a2a2:	af04      	add	r7, sp, #16
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	603b      	str	r3, [r7, #0]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fcd0 	bl	800bc58 <pvPortMalloc>
 800a2b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00e      	beq.n	800a2de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2c0:	205c      	movs	r0, #92	; 0x5c
 800a2c2:	f001 fcc9 	bl	800bc58 <pvPortMalloc>
 800a2c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	631a      	str	r2, [r3, #48]	; 0x30
 800a2d4:	e005      	b.n	800a2e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2d6:	6978      	ldr	r0, [r7, #20]
 800a2d8:	f001 fd8a 	bl	800bdf0 <vPortFree>
 800a2dc:	e001      	b.n	800a2e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d017      	beq.n	800a318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2f0:	88fa      	ldrh	r2, [r7, #6]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	9302      	str	r3, [sp, #8]
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f80e 	bl	800a328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a30c:	69f8      	ldr	r0, [r7, #28]
 800a30e:	f000 f89b 	bl	800a448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a312:	2301      	movs	r3, #1
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	e002      	b.n	800a31e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a31c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a31e:	69bb      	ldr	r3, [r7, #24]
	}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	461a      	mov	r2, r3
 800a340:	21a5      	movs	r1, #165	; 0xa5
 800a342:	f001 feab 	bl	800c09c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a350:	440b      	add	r3, r1
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	f023 0307 	bic.w	r3, r3, #7
 800a35e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	617b      	str	r3, [r7, #20]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01f      	beq.n	800a3c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a386:	2300      	movs	r3, #0
 800a388:	61fb      	str	r3, [r7, #28]
 800a38a:	e012      	b.n	800a3b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	4413      	add	r3, r2
 800a392:	7819      	ldrb	r1, [r3, #0]
 800a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	4413      	add	r3, r2
 800a39a:	3334      	adds	r3, #52	; 0x34
 800a39c:	460a      	mov	r2, r1
 800a39e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	2b0f      	cmp	r3, #15
 800a3b6:	d9e9      	bls.n	800a38c <prvInitialiseNewTask+0x64>
 800a3b8:	e000      	b.n	800a3bc <prvInitialiseNewTask+0x94>
			{
				break;
 800a3ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3c4:	e003      	b.n	800a3ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	2b37      	cmp	r3, #55	; 0x37
 800a3d2:	d901      	bls.n	800a3d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3d4:	2337      	movs	r3, #55	; 0x37
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff f978 	bl	80096e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	3318      	adds	r3, #24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff f973 	bl	80096e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	2200      	movs	r2, #0
 800a418:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	68f9      	ldr	r1, [r7, #12]
 800a426:	69b8      	ldr	r0, [r7, #24]
 800a428:	f001 f9ca 	bl	800b7c0 <pxPortInitialiseStack>
 800a42c:	4602      	mov	r2, r0
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a43e:	bf00      	nop
 800a440:	3720      	adds	r7, #32
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a450:	f001 fae0 	bl	800ba14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a454:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <prvAddNewTaskToReadyList+0xc4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	4a2c      	ldr	r2, [pc, #176]	; (800a50c <prvAddNewTaskToReadyList+0xc4>)
 800a45c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a45e:	4b2c      	ldr	r3, [pc, #176]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a466:	4a2a      	ldr	r2, [pc, #168]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a46c:	4b27      	ldr	r3, [pc, #156]	; (800a50c <prvAddNewTaskToReadyList+0xc4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a474:	f000 fc80 	bl	800ad78 <prvInitialiseTaskLists>
 800a478:	e00d      	b.n	800a496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a47a:	4b26      	ldr	r3, [pc, #152]	; (800a514 <prvAddNewTaskToReadyList+0xcc>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a482:	4b23      	ldr	r3, [pc, #140]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d802      	bhi.n	800a496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a490:	4a1f      	ldr	r2, [pc, #124]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a496:	4b20      	ldr	r3, [pc, #128]	; (800a518 <prvAddNewTaskToReadyList+0xd0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3301      	adds	r3, #1
 800a49c:	4a1e      	ldr	r2, [pc, #120]	; (800a518 <prvAddNewTaskToReadyList+0xd0>)
 800a49e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <prvAddNewTaskToReadyList+0xd0>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <prvAddNewTaskToReadyList+0xd4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d903      	bls.n	800a4bc <prvAddNewTaskToReadyList+0x74>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	4a18      	ldr	r2, [pc, #96]	; (800a51c <prvAddNewTaskToReadyList+0xd4>)
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4a15      	ldr	r2, [pc, #84]	; (800a520 <prvAddNewTaskToReadyList+0xd8>)
 800a4ca:	441a      	add	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7ff f913 	bl	80096fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4d8:	f001 facc 	bl	800ba74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <prvAddNewTaskToReadyList+0xcc>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d207      	bcs.n	800a502 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <prvAddNewTaskToReadyList+0xdc>)
 800a4f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	24000f88 	.word	0x24000f88
 800a510:	24000ab4 	.word	0x24000ab4
 800a514:	24000f94 	.word	0x24000f94
 800a518:	24000fa4 	.word	0x24000fa4
 800a51c:	24000f90 	.word	0x24000f90
 800a520:	24000ab8 	.word	0x24000ab8
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a536:	463a      	mov	r2, r7
 800a538:	1d39      	adds	r1, r7, #4
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe8e 	bl	8009260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	9202      	str	r2, [sp, #8]
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	2300      	movs	r3, #0
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	460a      	mov	r2, r1
 800a556:	4921      	ldr	r1, [pc, #132]	; (800a5dc <vTaskStartScheduler+0xb4>)
 800a558:	4821      	ldr	r0, [pc, #132]	; (800a5e0 <vTaskStartScheduler+0xb8>)
 800a55a:	f7ff fe43 	bl	800a1e4 <xTaskCreateStatic>
 800a55e:	4603      	mov	r3, r0
 800a560:	4a20      	ldr	r2, [pc, #128]	; (800a5e4 <vTaskStartScheduler+0xbc>)
 800a562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a564:	4b1f      	ldr	r3, [pc, #124]	; (800a5e4 <vTaskStartScheduler+0xbc>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a56c:	2301      	movs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e001      	b.n	800a576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d102      	bne.n	800a582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a57c:	f000 fdb2 	bl	800b0e4 <xTimerCreateTimerTask>
 800a580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d116      	bne.n	800a5b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a59c:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <vTaskStartScheduler+0xc0>)
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5a4:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <vTaskStartScheduler+0xc4>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <vTaskStartScheduler+0xc8>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5b0:	f001 f98e 	bl	800b8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5b4:	e00e      	b.n	800a5d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5bc:	d10a      	bne.n	800a5d4 <vTaskStartScheduler+0xac>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vTaskStartScheduler+0xaa>
}
 800a5d4:	bf00      	nop
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	0800cc84 	.word	0x0800cc84
 800a5e0:	0800ad49 	.word	0x0800ad49
 800a5e4:	24000fac 	.word	0x24000fac
 800a5e8:	24000fa8 	.word	0x24000fa8
 800a5ec:	24000f94 	.word	0x24000f94
 800a5f0:	24000f8c 	.word	0x24000f8c

0800a5f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5f8:	4b04      	ldr	r3, [pc, #16]	; (800a60c <vTaskSuspendAll+0x18>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	4a03      	ldr	r2, [pc, #12]	; (800a60c <vTaskSuspendAll+0x18>)
 800a600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a602:	bf00      	nop
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	24000fb0 	.word	0x24000fb0

0800a610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a61e:	4b42      	ldr	r3, [pc, #264]	; (800a728 <xTaskResumeAll+0x118>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xTaskResumeAll+0x2c>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	603b      	str	r3, [r7, #0]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a63c:	f001 f9ea 	bl	800ba14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a640:	4b39      	ldr	r3, [pc, #228]	; (800a728 <xTaskResumeAll+0x118>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3b01      	subs	r3, #1
 800a646:	4a38      	ldr	r2, [pc, #224]	; (800a728 <xTaskResumeAll+0x118>)
 800a648:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a64a:	4b37      	ldr	r3, [pc, #220]	; (800a728 <xTaskResumeAll+0x118>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d162      	bne.n	800a718 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a652:	4b36      	ldr	r3, [pc, #216]	; (800a72c <xTaskResumeAll+0x11c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d05e      	beq.n	800a718 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a65a:	e02f      	b.n	800a6bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65c:	4b34      	ldr	r3, [pc, #208]	; (800a730 <xTaskResumeAll+0x120>)
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3318      	adds	r3, #24
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff f8a5 	bl	80097b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3304      	adds	r3, #4
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff f8a0 	bl	80097b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67c:	4b2d      	ldr	r3, [pc, #180]	; (800a734 <xTaskResumeAll+0x124>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	429a      	cmp	r2, r3
 800a682:	d903      	bls.n	800a68c <xTaskResumeAll+0x7c>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	4a2a      	ldr	r2, [pc, #168]	; (800a734 <xTaskResumeAll+0x124>)
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4613      	mov	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4a27      	ldr	r2, [pc, #156]	; (800a738 <xTaskResumeAll+0x128>)
 800a69a:	441a      	add	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	f7ff f82b 	bl	80096fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ac:	4b23      	ldr	r3, [pc, #140]	; (800a73c <xTaskResumeAll+0x12c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d302      	bcc.n	800a6bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a6b6:	4b22      	ldr	r3, [pc, #136]	; (800a740 <xTaskResumeAll+0x130>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6bc:	4b1c      	ldr	r3, [pc, #112]	; (800a730 <xTaskResumeAll+0x120>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1cb      	bne.n	800a65c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6ca:	f000 fbf3 	bl	800aeb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <xTaskResumeAll+0x134>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d010      	beq.n	800a6fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6da:	f000 f847 	bl	800a76c <xTaskIncrementTick>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a6e4:	4b16      	ldr	r3, [pc, #88]	; (800a740 <xTaskResumeAll+0x130>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f1      	bne.n	800a6da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a6f6:	4b13      	ldr	r3, [pc, #76]	; (800a744 <xTaskResumeAll+0x134>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6fc:	4b10      	ldr	r3, [pc, #64]	; (800a740 <xTaskResumeAll+0x130>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d009      	beq.n	800a718 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <xTaskResumeAll+0x138>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a718:	f001 f9ac 	bl	800ba74 <vPortExitCritical>

	return xAlreadyYielded;
 800a71c:	68bb      	ldr	r3, [r7, #8]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	24000fb0 	.word	0x24000fb0
 800a72c:	24000f88 	.word	0x24000f88
 800a730:	24000f48 	.word	0x24000f48
 800a734:	24000f90 	.word	0x24000f90
 800a738:	24000ab8 	.word	0x24000ab8
 800a73c:	24000ab4 	.word	0x24000ab4
 800a740:	24000f9c 	.word	0x24000f9c
 800a744:	24000f98 	.word	0x24000f98
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a752:	4b05      	ldr	r3, [pc, #20]	; (800a768 <xTaskGetTickCount+0x1c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a758:	687b      	ldr	r3, [r7, #4]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	24000f8c 	.word	0x24000f8c

0800a76c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a776:	4b4f      	ldr	r3, [pc, #316]	; (800a8b4 <xTaskIncrementTick+0x148>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 808f 	bne.w	800a89e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a780:	4b4d      	ldr	r3, [pc, #308]	; (800a8b8 <xTaskIncrementTick+0x14c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a788:	4a4b      	ldr	r2, [pc, #300]	; (800a8b8 <xTaskIncrementTick+0x14c>)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d120      	bne.n	800a7d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a794:	4b49      	ldr	r3, [pc, #292]	; (800a8bc <xTaskIncrementTick+0x150>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	603b      	str	r3, [r7, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <xTaskIncrementTick+0x46>
 800a7b4:	4b41      	ldr	r3, [pc, #260]	; (800a8bc <xTaskIncrementTick+0x150>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	4b41      	ldr	r3, [pc, #260]	; (800a8c0 <xTaskIncrementTick+0x154>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a3f      	ldr	r2, [pc, #252]	; (800a8bc <xTaskIncrementTick+0x150>)
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	4a3f      	ldr	r2, [pc, #252]	; (800a8c0 <xTaskIncrementTick+0x154>)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	4b3e      	ldr	r3, [pc, #248]	; (800a8c4 <xTaskIncrementTick+0x158>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	4a3d      	ldr	r2, [pc, #244]	; (800a8c4 <xTaskIncrementTick+0x158>)
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	f000 fb6f 	bl	800aeb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7d6:	4b3c      	ldr	r3, [pc, #240]	; (800a8c8 <xTaskIncrementTick+0x15c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d349      	bcc.n	800a874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e0:	4b36      	ldr	r3, [pc, #216]	; (800a8bc <xTaskIncrementTick+0x150>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ea:	4b37      	ldr	r3, [pc, #220]	; (800a8c8 <xTaskIncrementTick+0x15c>)
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7f0:	601a      	str	r2, [r3, #0]
					break;
 800a7f2:	e03f      	b.n	800a874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f4:	4b31      	ldr	r3, [pc, #196]	; (800a8bc <xTaskIncrementTick+0x150>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d203      	bcs.n	800a814 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a80c:	4a2e      	ldr	r2, [pc, #184]	; (800a8c8 <xTaskIncrementTick+0x15c>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a812:	e02f      	b.n	800a874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	3304      	adds	r3, #4
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe ffcd 	bl	80097b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	3318      	adds	r3, #24
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe ffc4 	bl	80097b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a834:	4b25      	ldr	r3, [pc, #148]	; (800a8cc <xTaskIncrementTick+0x160>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d903      	bls.n	800a844 <xTaskIncrementTick+0xd8>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	4a22      	ldr	r2, [pc, #136]	; (800a8cc <xTaskIncrementTick+0x160>)
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4a1f      	ldr	r2, [pc, #124]	; (800a8d0 <xTaskIncrementTick+0x164>)
 800a852:	441a      	add	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3304      	adds	r3, #4
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7fe ff4f 	bl	80096fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a864:	4b1b      	ldr	r3, [pc, #108]	; (800a8d4 <xTaskIncrementTick+0x168>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d3b8      	bcc.n	800a7e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a872:	e7b5      	b.n	800a7e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a874:	4b17      	ldr	r3, [pc, #92]	; (800a8d4 <xTaskIncrementTick+0x168>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	4915      	ldr	r1, [pc, #84]	; (800a8d0 <xTaskIncrementTick+0x164>)
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d901      	bls.n	800a890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a890:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <xTaskIncrementTick+0x16c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a898:	2301      	movs	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e004      	b.n	800a8a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <xTaskIncrementTick+0x170>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	4a0d      	ldr	r2, [pc, #52]	; (800a8dc <xTaskIncrementTick+0x170>)
 800a8a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8a8:	697b      	ldr	r3, [r7, #20]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	24000fb0 	.word	0x24000fb0
 800a8b8:	24000f8c 	.word	0x24000f8c
 800a8bc:	24000f40 	.word	0x24000f40
 800a8c0:	24000f44 	.word	0x24000f44
 800a8c4:	24000fa0 	.word	0x24000fa0
 800a8c8:	24000fa8 	.word	0x24000fa8
 800a8cc:	24000f90 	.word	0x24000f90
 800a8d0:	24000ab8 	.word	0x24000ab8
 800a8d4:	24000ab4 	.word	0x24000ab4
 800a8d8:	24000f9c 	.word	0x24000f9c
 800a8dc:	24000f98 	.word	0x24000f98

0800a8e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8e6:	4b28      	ldr	r3, [pc, #160]	; (800a988 <vTaskSwitchContext+0xa8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8ee:	4b27      	ldr	r3, [pc, #156]	; (800a98c <vTaskSwitchContext+0xac>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8f4:	e041      	b.n	800a97a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a8f6:	4b25      	ldr	r3, [pc, #148]	; (800a98c <vTaskSwitchContext+0xac>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8fc:	4b24      	ldr	r3, [pc, #144]	; (800a990 <vTaskSwitchContext+0xb0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e010      	b.n	800a926 <vTaskSwitchContext+0x46>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <vTaskSwitchContext+0x40>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	607b      	str	r3, [r7, #4]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <vTaskSwitchContext+0x3e>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3b01      	subs	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	491b      	ldr	r1, [pc, #108]	; (800a994 <vTaskSwitchContext+0xb4>)
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	440b      	add	r3, r1
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0e4      	beq.n	800a904 <vTaskSwitchContext+0x24>
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4a13      	ldr	r2, [pc, #76]	; (800a994 <vTaskSwitchContext+0xb4>)
 800a946:	4413      	add	r3, r2
 800a948:	60bb      	str	r3, [r7, #8]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	605a      	str	r2, [r3, #4]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	3308      	adds	r3, #8
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d104      	bne.n	800a96a <vTaskSwitchContext+0x8a>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	605a      	str	r2, [r3, #4]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	4a09      	ldr	r2, [pc, #36]	; (800a998 <vTaskSwitchContext+0xb8>)
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	4a06      	ldr	r2, [pc, #24]	; (800a990 <vTaskSwitchContext+0xb0>)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6013      	str	r3, [r2, #0]
}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	24000fb0 	.word	0x24000fb0
 800a98c:	24000f9c 	.word	0x24000f9c
 800a990:	24000f90 	.word	0x24000f90
 800a994:	24000ab8 	.word	0x24000ab8
 800a998:	24000ab4 	.word	0x24000ab4

0800a99c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	60fb      	str	r3, [r7, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9c2:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <vTaskPlaceOnEventList+0x44>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3318      	adds	r3, #24
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fe febb 	bl	8009746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	6838      	ldr	r0, [r7, #0]
 800a9d4:	f000 fb32 	bl	800b03c <prvAddCurrentTaskToDelayedList>
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	24000ab4 	.word	0x24000ab4

0800a9e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	617b      	str	r3, [r7, #20]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800aa0c:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <vTaskPlaceOnUnorderedEventList+0x70>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	613b      	str	r3, [r7, #16]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <vTaskPlaceOnUnorderedEventList+0x74>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800aa34:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <vTaskPlaceOnUnorderedEventList+0x74>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3318      	adds	r3, #24
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7fe fe5d 	bl	80096fe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa44:	2101      	movs	r1, #1
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 faf8 	bl	800b03c <prvAddCurrentTaskToDelayedList>
}
 800aa4c:	bf00      	nop
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	24000fb0 	.word	0x24000fb0
 800aa58:	24000ab4 	.word	0x24000ab4

0800aa5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10a      	bne.n	800aa84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	617b      	str	r3, [r7, #20]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3318      	adds	r3, #24
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7fe fe36 	bl	80096fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f000 facb 	bl	800b03c <prvAddCurrentTaskToDelayedList>
	}
 800aaa6:	bf00      	nop
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	24000ab4 	.word	0x24000ab4

0800aab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10a      	bne.n	800aae0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	60fb      	str	r3, [r7, #12]
}
 800aadc:	bf00      	nop
 800aade:	e7fe      	b.n	800aade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	3318      	adds	r3, #24
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe fe67 	bl	80097b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaea:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <xTaskRemoveFromEventList+0xb0>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d11d      	bne.n	800ab2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe fe5e 	bl	80097b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	4b19      	ldr	r3, [pc, #100]	; (800ab68 <xTaskRemoveFromEventList+0xb4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d903      	bls.n	800ab10 <xTaskRemoveFromEventList+0x5c>
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	4a16      	ldr	r2, [pc, #88]	; (800ab68 <xTaskRemoveFromEventList+0xb4>)
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4a13      	ldr	r2, [pc, #76]	; (800ab6c <xTaskRemoveFromEventList+0xb8>)
 800ab1e:	441a      	add	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f7fe fde9 	bl	80096fe <vListInsertEnd>
 800ab2c:	e005      	b.n	800ab3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	3318      	adds	r3, #24
 800ab32:	4619      	mov	r1, r3
 800ab34:	480e      	ldr	r0, [pc, #56]	; (800ab70 <xTaskRemoveFromEventList+0xbc>)
 800ab36:	f7fe fde2 	bl	80096fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <xTaskRemoveFromEventList+0xc0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d905      	bls.n	800ab54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <xTaskRemoveFromEventList+0xc4>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e001      	b.n	800ab58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab58:	697b      	ldr	r3, [r7, #20]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	24000fb0 	.word	0x24000fb0
 800ab68:	24000f90 	.word	0x24000f90
 800ab6c:	24000ab8 	.word	0x24000ab8
 800ab70:	24000f48 	.word	0x24000f48
 800ab74:	24000ab4 	.word	0x24000ab4
 800ab78:	24000f9c 	.word	0x24000f9c

0800ab7c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ab86:	4b29      	ldr	r3, [pc, #164]	; (800ac2c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	613b      	str	r3, [r7, #16]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10a      	bne.n	800abd0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	60fb      	str	r3, [r7, #12]
}
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7fe fdf1 	bl	80097b8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	3304      	adds	r3, #4
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fdec 	bl	80097b8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d903      	bls.n	800abf4 <vTaskRemoveFromUnorderedEventList+0x78>
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4a0f      	ldr	r2, [pc, #60]	; (800ac30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4a0c      	ldr	r2, [pc, #48]	; (800ac34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ac02:	441a      	add	r2, r3
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7fe fd77 	bl	80096fe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac14:	4b08      	ldr	r3, [pc, #32]	; (800ac38 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d902      	bls.n	800ac24 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ac1e:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	601a      	str	r2, [r3, #0]
	}
}
 800ac24:	bf00      	nop
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	24000fb0 	.word	0x24000fb0
 800ac30:	24000f90 	.word	0x24000f90
 800ac34:	24000ab8 	.word	0x24000ab8
 800ac38:	24000ab4 	.word	0x24000ab4
 800ac3c:	24000f9c 	.word	0x24000f9c

0800ac40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac48:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <vTaskInternalSetTimeOutState+0x24>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <vTaskInternalSetTimeOutState+0x28>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	24000fa0 	.word	0x24000fa0
 800ac68:	24000f8c 	.word	0x24000f8c

0800ac6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	613b      	str	r3, [r7, #16]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acae:	f000 feb1 	bl	800ba14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <xTaskCheckForTimeOut+0xbc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acca:	d102      	bne.n	800acd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	e023      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	4b15      	ldr	r3, [pc, #84]	; (800ad2c <xTaskCheckForTimeOut+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d007      	beq.n	800acee <xTaskCheckForTimeOut+0x82>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d302      	bcc.n	800acee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ace8:	2301      	movs	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e015      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d20b      	bcs.n	800ad10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ff9b 	bl	800ac40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	e004      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad1a:	f000 feab 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	24000f8c 	.word	0x24000f8c
 800ad2c:	24000fa0 	.word	0x24000fa0

0800ad30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad34:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <vTaskMissedYield+0x14>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	24000f9c 	.word	0x24000f9c

0800ad48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad50:	f000 f852 	bl	800adf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <prvIdleTask+0x28>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d9f9      	bls.n	800ad50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <prvIdleTask+0x2c>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad6c:	e7f0      	b.n	800ad50 <prvIdleTask+0x8>
 800ad6e:	bf00      	nop
 800ad70:	24000ab8 	.word	0x24000ab8
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	e00c      	b.n	800ad9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4a12      	ldr	r2, [pc, #72]	; (800add8 <prvInitialiseTaskLists+0x60>)
 800ad90:	4413      	add	r3, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fc86 	bl	80096a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b37      	cmp	r3, #55	; 0x37
 800ada2:	d9ef      	bls.n	800ad84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ada4:	480d      	ldr	r0, [pc, #52]	; (800addc <prvInitialiseTaskLists+0x64>)
 800ada6:	f7fe fc7d 	bl	80096a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adac:	f7fe fc7a 	bl	80096a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adb0:	480c      	ldr	r0, [pc, #48]	; (800ade4 <prvInitialiseTaskLists+0x6c>)
 800adb2:	f7fe fc77 	bl	80096a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adb6:	480c      	ldr	r0, [pc, #48]	; (800ade8 <prvInitialiseTaskLists+0x70>)
 800adb8:	f7fe fc74 	bl	80096a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adbc:	480b      	ldr	r0, [pc, #44]	; (800adec <prvInitialiseTaskLists+0x74>)
 800adbe:	f7fe fc71 	bl	80096a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <prvInitialiseTaskLists+0x78>)
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <prvInitialiseTaskLists+0x64>)
 800adc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <prvInitialiseTaskLists+0x7c>)
 800adca:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adcc:	601a      	str	r2, [r3, #0]
}
 800adce:	bf00      	nop
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	24000ab8 	.word	0x24000ab8
 800addc:	24000f18 	.word	0x24000f18
 800ade0:	24000f2c 	.word	0x24000f2c
 800ade4:	24000f48 	.word	0x24000f48
 800ade8:	24000f5c 	.word	0x24000f5c
 800adec:	24000f74 	.word	0x24000f74
 800adf0:	24000f40 	.word	0x24000f40
 800adf4:	24000f44 	.word	0x24000f44

0800adf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adfe:	e019      	b.n	800ae34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae00:	f000 fe08 	bl	800ba14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae04:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <prvCheckTasksWaitingTermination+0x50>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fcd1 	bl	80097b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4a0b      	ldr	r2, [pc, #44]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	4a0a      	ldr	r2, [pc, #40]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae2a:	f000 fe23 	bl	800ba74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f810 	bl	800ae54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e1      	bne.n	800ae00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	24000f5c 	.word	0x24000f5c
 800ae4c:	24000f88 	.word	0x24000f88
 800ae50:	24000f70 	.word	0x24000f70

0800ae54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d108      	bne.n	800ae78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 ffc0 	bl	800bdf0 <vPortFree>
				vPortFree( pxTCB );
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 ffbd 	bl	800bdf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae76:	e018      	b.n	800aeaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d103      	bne.n	800ae8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 ffb4 	bl	800bdf0 <vPortFree>
	}
 800ae88:	e00f      	b.n	800aeaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d00a      	beq.n	800aeaa <prvDeleteTCB+0x56>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <prvDeleteTCB+0x54>
	}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeba:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <prvResetNextTaskUnblockTime+0x38>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aec4:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <prvResetNextTaskUnblockTime+0x3c>)
 800aec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aecc:	e008      	b.n	800aee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aece:	4b07      	ldr	r3, [pc, #28]	; (800aeec <prvResetNextTaskUnblockTime+0x38>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4a04      	ldr	r2, [pc, #16]	; (800aef0 <prvResetNextTaskUnblockTime+0x3c>)
 800aede:	6013      	str	r3, [r2, #0]
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	24000f40 	.word	0x24000f40
 800aef0:	24000fa8 	.word	0x24000fa8

0800aef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aefa:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <xTaskGetSchedulerState+0x34>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af02:	2301      	movs	r3, #1
 800af04:	607b      	str	r3, [r7, #4]
 800af06:	e008      	b.n	800af1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af08:	4b08      	ldr	r3, [pc, #32]	; (800af2c <xTaskGetSchedulerState+0x38>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af10:	2302      	movs	r3, #2
 800af12:	607b      	str	r3, [r7, #4]
 800af14:	e001      	b.n	800af1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af1a:	687b      	ldr	r3, [r7, #4]
	}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	24000f94 	.word	0x24000f94
 800af2c:	24000fb0 	.word	0x24000fb0

0800af30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d056      	beq.n	800aff4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af46:	4b2e      	ldr	r3, [pc, #184]	; (800b000 <xTaskPriorityDisinherit+0xd0>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d00a      	beq.n	800af66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	60fb      	str	r3, [r7, #12]
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	60bb      	str	r3, [r7, #8]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af88:	1e5a      	subs	r2, r3, #1
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af96:	429a      	cmp	r2, r3
 800af98:	d02c      	beq.n	800aff4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d128      	bne.n	800aff4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe fc06 	bl	80097b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc4:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <xTaskPriorityDisinherit+0xd4>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d903      	bls.n	800afd4 <xTaskPriorityDisinherit+0xa4>
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	4a0c      	ldr	r2, [pc, #48]	; (800b004 <xTaskPriorityDisinherit+0xd4>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4a09      	ldr	r2, [pc, #36]	; (800b008 <xTaskPriorityDisinherit+0xd8>)
 800afe2:	441a      	add	r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7fe fb87 	bl	80096fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aff0:	2301      	movs	r3, #1
 800aff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff4:	697b      	ldr	r3, [r7, #20]
	}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	24000ab4 	.word	0x24000ab4
 800b004:	24000f90 	.word	0x24000f90
 800b008:	24000ab8 	.word	0x24000ab8

0800b00c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b012:	4b09      	ldr	r3, [pc, #36]	; (800b038 <uxTaskResetEventItemValue+0x2c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01a:	4b07      	ldr	r3, [pc, #28]	; (800b038 <uxTaskResetEventItemValue+0x2c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <uxTaskResetEventItemValue+0x2c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b028:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b02a:	687b      	ldr	r3, [r7, #4]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	24000ab4 	.word	0x24000ab4

0800b03c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b046:	4b21      	ldr	r3, [pc, #132]	; (800b0cc <prvAddCurrentTaskToDelayedList+0x90>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b04c:	4b20      	ldr	r3, [pc, #128]	; (800b0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3304      	adds	r3, #4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fbb0 	bl	80097b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b05e:	d10a      	bne.n	800b076 <prvAddCurrentTaskToDelayedList+0x3a>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d007      	beq.n	800b076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b066:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4619      	mov	r1, r3
 800b06e:	4819      	ldr	r0, [pc, #100]	; (800b0d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b070:	f7fe fb45 	bl	80096fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b074:	e026      	b.n	800b0c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b07e:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d209      	bcs.n	800b0a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b08e:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3304      	adds	r3, #4
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f7fe fb53 	bl	8009746 <vListInsert>
}
 800b0a0:	e010      	b.n	800b0c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a2:	4b0e      	ldr	r3, [pc, #56]	; (800b0dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7fe fb49 	bl	8009746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	; (800b0e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d202      	bcs.n	800b0c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0be:	4a08      	ldr	r2, [pc, #32]	; (800b0e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	6013      	str	r3, [r2, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	24000f8c 	.word	0x24000f8c
 800b0d0:	24000ab4 	.word	0x24000ab4
 800b0d4:	24000f74 	.word	0x24000f74
 800b0d8:	24000f44 	.word	0x24000f44
 800b0dc:	24000f40 	.word	0x24000f40
 800b0e0:	24000fa8 	.word	0x24000fa8

0800b0e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b0ee:	f000 fb07 	bl	800b700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b0f2:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <xTimerCreateTimerTask+0x80>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d021      	beq.n	800b13e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b102:	1d3a      	adds	r2, r7, #4
 800b104:	f107 0108 	add.w	r1, r7, #8
 800b108:	f107 030c 	add.w	r3, r7, #12
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fe f8c1 	bl	8009294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	9202      	str	r2, [sp, #8]
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	2302      	movs	r3, #2
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	2300      	movs	r3, #0
 800b122:	460a      	mov	r2, r1
 800b124:	4910      	ldr	r1, [pc, #64]	; (800b168 <xTimerCreateTimerTask+0x84>)
 800b126:	4811      	ldr	r0, [pc, #68]	; (800b16c <xTimerCreateTimerTask+0x88>)
 800b128:	f7ff f85c 	bl	800a1e4 <xTaskCreateStatic>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4a10      	ldr	r2, [pc, #64]	; (800b170 <xTimerCreateTimerTask+0x8c>)
 800b130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b132:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <xTimerCreateTimerTask+0x8c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b13a:	2301      	movs	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	613b      	str	r3, [r7, #16]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b15a:	697b      	ldr	r3, [r7, #20]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	24000fe4 	.word	0x24000fe4
 800b168:	0800cc8c 	.word	0x0800cc8c
 800b16c:	0800b2a9 	.word	0x0800b2a9
 800b170:	24000fe8 	.word	0x24000fe8

0800b174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b182:	2300      	movs	r3, #0
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	623b      	str	r3, [r7, #32]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1a2:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <xTimerGenericCommand+0x98>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d02a      	beq.n	800b200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b05      	cmp	r3, #5
 800b1ba:	dc18      	bgt.n	800b1ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1bc:	f7ff fe9a 	bl	800aef4 <xTaskGetSchedulerState>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d109      	bne.n	800b1da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1c6:	4b11      	ldr	r3, [pc, #68]	; (800b20c <xTimerGenericCommand+0x98>)
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f107 0110 	add.w	r1, r7, #16
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d2:	f7fe fc1f 	bl	8009a14 <xQueueGenericSend>
 800b1d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d8:	e012      	b.n	800b200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1da:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <xTimerGenericCommand+0x98>)
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	f107 0110 	add.w	r1, r7, #16
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f7fe fc15 	bl	8009a14 <xQueueGenericSend>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b1ec:	e008      	b.n	800b200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1ee:	4b07      	ldr	r3, [pc, #28]	; (800b20c <xTimerGenericCommand+0x98>)
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f107 0110 	add.w	r1, r7, #16
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	f7fe fd09 	bl	8009c10 <xQueueGenericSendFromISR>
 800b1fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b202:	4618      	mov	r0, r3
 800b204:	3728      	adds	r7, #40	; 0x28
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	24000fe4 	.word	0x24000fe4

0800b210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af02      	add	r7, sp, #8
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21a:	4b22      	ldr	r3, [pc, #136]	; (800b2a4 <prvProcessExpiredTimer+0x94>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	3304      	adds	r3, #4
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe fac5 	bl	80097b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d022      	beq.n	800b282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	699a      	ldr	r2, [r3, #24]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	18d1      	adds	r1, r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	6978      	ldr	r0, [r7, #20]
 800b24a:	f000 f8d1 	bl	800b3f0 <prvInsertTimerInActiveList>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d01f      	beq.n	800b294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b254:	2300      	movs	r3, #0
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	2300      	movs	r3, #0
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	2100      	movs	r1, #0
 800b25e:	6978      	ldr	r0, [r7, #20]
 800b260:	f7ff ff88 	bl	800b174 <xTimerGenericCommand>
 800b264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d113      	bne.n	800b294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	60fb      	str	r3, [r7, #12]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b288:	f023 0301 	bic.w	r3, r3, #1
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	6978      	ldr	r0, [r7, #20]
 800b29a:	4798      	blx	r3
}
 800b29c:	bf00      	nop
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	24000fdc 	.word	0x24000fdc

0800b2a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2b0:	f107 0308 	add.w	r3, r7, #8
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f857 	bl	800b368 <prvGetNextExpireTime>
 800b2ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f803 	bl	800b2cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2c6:	f000 f8d5 	bl	800b474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2ca:	e7f1      	b.n	800b2b0 <prvTimerTask+0x8>

0800b2cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2d6:	f7ff f98d 	bl	800a5f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 f866 	bl	800b3b0 <prvSampleTimeNow>
 800b2e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d130      	bne.n	800b34e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <prvProcessTimerOrBlockTask+0x3c>
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d806      	bhi.n	800b308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2fa:	f7ff f989 	bl	800a610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ff85 	bl	800b210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b306:	e024      	b.n	800b352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d008      	beq.n	800b320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <prvProcessTimerOrBlockTask+0x90>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <prvProcessTimerOrBlockTask+0x50>
 800b318:	2301      	movs	r3, #1
 800b31a:	e000      	b.n	800b31e <prvProcessTimerOrBlockTask+0x52>
 800b31c:	2300      	movs	r3, #0
 800b31e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b320:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <prvProcessTimerOrBlockTask+0x94>)
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4619      	mov	r1, r3
 800b32e:	f7fe ff25 	bl	800a17c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b332:	f7ff f96d 	bl	800a610 <xTaskResumeAll>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10a      	bne.n	800b352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <prvProcessTimerOrBlockTask+0x98>)
 800b33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	f3bf 8f6f 	isb	sy
}
 800b34c:	e001      	b.n	800b352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b34e:	f7ff f95f 	bl	800a610 <xTaskResumeAll>
}
 800b352:	bf00      	nop
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	24000fe0 	.word	0x24000fe0
 800b360:	24000fe4 	.word	0x24000fe4
 800b364:	e000ed04 	.word	0xe000ed04

0800b368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b370:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <prvGetNextExpireTime+0x44>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <prvGetNextExpireTime+0x16>
 800b37a:	2201      	movs	r2, #1
 800b37c:	e000      	b.n	800b380 <prvGetNextExpireTime+0x18>
 800b37e:	2200      	movs	r2, #0
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d105      	bne.n	800b398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <prvGetNextExpireTime+0x44>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e001      	b.n	800b39c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b39c:	68fb      	ldr	r3, [r7, #12]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	24000fdc 	.word	0x24000fdc

0800b3b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3b8:	f7ff f9c8 	bl	800a74c <xTaskGetTickCount>
 800b3bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3be:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <prvSampleTimeNow+0x3c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d205      	bcs.n	800b3d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3c8:	f000 f936 	bl	800b638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e002      	b.n	800b3da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3da:	4a04      	ldr	r2, [pc, #16]	; (800b3ec <prvSampleTimeNow+0x3c>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	24000fec 	.word	0x24000fec

0800b3f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3fe:	2300      	movs	r3, #0
 800b400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	429a      	cmp	r2, r3
 800b414:	d812      	bhi.n	800b43c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	d302      	bcc.n	800b42a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b424:	2301      	movs	r3, #1
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	e01b      	b.n	800b462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b42a:	4b10      	ldr	r3, [pc, #64]	; (800b46c <prvInsertTimerInActiveList+0x7c>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3304      	adds	r3, #4
 800b432:	4619      	mov	r1, r3
 800b434:	4610      	mov	r0, r2
 800b436:	f7fe f986 	bl	8009746 <vListInsert>
 800b43a:	e012      	b.n	800b462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d206      	bcs.n	800b452 <prvInsertTimerInActiveList+0x62>
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	e007      	b.n	800b462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b452:	4b07      	ldr	r3, [pc, #28]	; (800b470 <prvInsertTimerInActiveList+0x80>)
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3304      	adds	r3, #4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f7fe f972 	bl	8009746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b462:	697b      	ldr	r3, [r7, #20]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	24000fe0 	.word	0x24000fe0
 800b470:	24000fdc 	.word	0x24000fdc

0800b474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08e      	sub	sp, #56	; 0x38
 800b478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b47a:	e0ca      	b.n	800b612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da18      	bge.n	800b4b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b482:	1d3b      	adds	r3, r7, #4
 800b484:	3304      	adds	r3, #4
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10a      	bne.n	800b4a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	61fb      	str	r3, [r7, #28]
}
 800b4a0:	bf00      	nop
 800b4a2:	e7fe      	b.n	800b4a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4aa:	6850      	ldr	r0, [r2, #4]
 800b4ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ae:	6892      	ldr	r2, [r2, #8]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f2c0 80aa 	blt.w	800b610 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe f973 	bl	80097b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4d2:	463b      	mov	r3, r7
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff ff6b 	bl	800b3b0 <prvSampleTimeNow>
 800b4da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	f200 8097 	bhi.w	800b612 <prvProcessReceivedCommands+0x19e>
 800b4e4:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <prvProcessReceivedCommands+0x78>)
 800b4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ea:	bf00      	nop
 800b4ec:	0800b515 	.word	0x0800b515
 800b4f0:	0800b515 	.word	0x0800b515
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b589 	.word	0x0800b589
 800b4fc:	0800b59d 	.word	0x0800b59d
 800b500:	0800b5e7 	.word	0x0800b5e7
 800b504:	0800b515 	.word	0x0800b515
 800b508:	0800b515 	.word	0x0800b515
 800b50c:	0800b589 	.word	0x0800b589
 800b510:	0800b59d 	.word	0x0800b59d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	18d1      	adds	r1, r2, r3
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b534:	f7ff ff5c 	bl	800b3f0 <prvInsertTimerInActiveList>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d069      	beq.n	800b612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d05e      	beq.n	800b612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	441a      	add	r2, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2300      	movs	r3, #0
 800b562:	2100      	movs	r1, #0
 800b564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b566:	f7ff fe05 	bl	800b174 <xTimerGenericCommand>
 800b56a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d14f      	bne.n	800b612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	61bb      	str	r3, [r7, #24]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	b2da      	uxtb	r2, r3
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b59a:	e03a      	b.n	800b612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5a2:	f043 0301 	orr.w	r3, r3, #1
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10a      	bne.n	800b5d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	617b      	str	r3, [r7, #20]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	699a      	ldr	r2, [r3, #24]
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	18d1      	adds	r1, r2, r3
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5e0:	f7ff ff06 	bl	800b3f0 <prvInsertTimerInActiveList>
					break;
 800b5e4:	e015      	b.n	800b612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d103      	bne.n	800b5fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f6:	f000 fbfb 	bl	800bdf0 <vPortFree>
 800b5fa:	e00a      	b.n	800b612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b602:	f023 0301 	bic.w	r3, r3, #1
 800b606:	b2da      	uxtb	r2, r3
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b60e:	e000      	b.n	800b612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b612:	4b08      	ldr	r3, [pc, #32]	; (800b634 <prvProcessReceivedCommands+0x1c0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	1d39      	adds	r1, r7, #4
 800b618:	2200      	movs	r2, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fb94 	bl	8009d48 <xQueueReceive>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	f47f af2a 	bne.w	800b47c <prvProcessReceivedCommands+0x8>
	}
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	3730      	adds	r7, #48	; 0x30
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	24000fe4 	.word	0x24000fe4

0800b638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b63e:	e048      	b.n	800b6d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b640:	4b2d      	ldr	r3, [pc, #180]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64a:	4b2b      	ldr	r3, [pc, #172]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe f8ad 	bl	80097b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02e      	beq.n	800b6d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	4413      	add	r3, r2
 800b67c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	429a      	cmp	r2, r3
 800b684:	d90e      	bls.n	800b6a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b692:	4b19      	ldr	r3, [pc, #100]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fe f852 	bl	8009746 <vListInsert>
 800b6a2:	e016      	b.n	800b6d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fd60 	bl	800b174 <xTimerGenericCommand>
 800b6b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	603b      	str	r3, [r7, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6d2:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1b1      	bne.n	800b640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6e2:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <prvSwitchTimerLists+0xc4>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a04      	ldr	r2, [pc, #16]	; (800b6f8 <prvSwitchTimerLists+0xc0>)
 800b6e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6ea:	4a04      	ldr	r2, [pc, #16]	; (800b6fc <prvSwitchTimerLists+0xc4>)
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	6013      	str	r3, [r2, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	24000fdc 	.word	0x24000fdc
 800b6fc:	24000fe0 	.word	0x24000fe0

0800b700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b706:	f000 f985 	bl	800ba14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d120      	bne.n	800b754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b712:	4814      	ldr	r0, [pc, #80]	; (800b764 <prvCheckForValidListAndQueue+0x64>)
 800b714:	f7fd ffc6 	bl	80096a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b718:	4813      	ldr	r0, [pc, #76]	; (800b768 <prvCheckForValidListAndQueue+0x68>)
 800b71a:	f7fd ffc3 	bl	80096a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <prvCheckForValidListAndQueue+0x6c>)
 800b720:	4a10      	ldr	r2, [pc, #64]	; (800b764 <prvCheckForValidListAndQueue+0x64>)
 800b722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b724:	4b12      	ldr	r3, [pc, #72]	; (800b770 <prvCheckForValidListAndQueue+0x70>)
 800b726:	4a10      	ldr	r2, [pc, #64]	; (800b768 <prvCheckForValidListAndQueue+0x68>)
 800b728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b72a:	2300      	movs	r3, #0
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	4b11      	ldr	r3, [pc, #68]	; (800b774 <prvCheckForValidListAndQueue+0x74>)
 800b730:	4a11      	ldr	r2, [pc, #68]	; (800b778 <prvCheckForValidListAndQueue+0x78>)
 800b732:	2110      	movs	r1, #16
 800b734:	200a      	movs	r0, #10
 800b736:	f7fe f8d1 	bl	80098dc <xQueueGenericCreateStatic>
 800b73a:	4603      	mov	r3, r0
 800b73c:	4a08      	ldr	r2, [pc, #32]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b73e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b740:	4b07      	ldr	r3, [pc, #28]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	490b      	ldr	r1, [pc, #44]	; (800b77c <prvCheckForValidListAndQueue+0x7c>)
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fcea 	bl	800a128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b754:	f000 f98e 	bl	800ba74 <vPortExitCritical>
}
 800b758:	bf00      	nop
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	24000fe4 	.word	0x24000fe4
 800b764:	24000fb4 	.word	0x24000fb4
 800b768:	24000fc8 	.word	0x24000fc8
 800b76c:	24000fdc 	.word	0x24000fdc
 800b770:	24000fe0 	.word	0x24000fe0
 800b774:	24001090 	.word	0x24001090
 800b778:	24000ff0 	.word	0x24000ff0
 800b77c:	0800cc94 	.word	0x0800cc94

0800b780 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b78e:	f06f 0301 	mvn.w	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7a0:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <xTimerPendFunctionCallFromISR+0x3c>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	f107 0114 	add.w	r1, r7, #20
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	f7fe fa30 	bl	8009c10 <xQueueGenericSendFromISR>
 800b7b0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3728      	adds	r7, #40	; 0x28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	24000fe4 	.word	0x24000fe4

0800b7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <pxPortInitialiseStack+0x64>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b14      	subs	r3, #20
 800b7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f06f 0202 	mvn.w	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b20      	subs	r3, #32
 800b814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	0800b829 	.word	0x0800b829

0800b828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b832:	4b12      	ldr	r3, [pc, #72]	; (800b87c <prvTaskExitError+0x54>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b83a:	d00a      	beq.n	800b852 <prvTaskExitError+0x2a>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60fb      	str	r3, [r7, #12]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <prvTaskExitError+0x28>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60bb      	str	r3, [r7, #8]
}
 800b864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b866:	bf00      	nop
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0fc      	beq.n	800b868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	24000010 	.word	0x24000010

0800b880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <pxCurrentTCBConst2>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	f380 8809 	msr	PSP, r0
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f04f 0000 	mov.w	r0, #0
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	4770      	bx	lr
 800b89c:	f3af 8000 	nop.w

0800b8a0 <pxCurrentTCBConst2>:
 800b8a0:	24000ab4 	.word	0x24000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8a8:	4808      	ldr	r0, [pc, #32]	; (800b8cc <prvPortStartFirstTask+0x24>)
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f380 8808 	msr	MSP, r0
 800b8b2:	f04f 0000 	mov.w	r0, #0
 800b8b6:	f380 8814 	msr	CONTROL, r0
 800b8ba:	b662      	cpsie	i
 800b8bc:	b661      	cpsie	f
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	df00      	svc	0
 800b8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed08 	.word	0xe000ed08

0800b8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8d6:	4b46      	ldr	r3, [pc, #280]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a46      	ldr	r2, [pc, #280]	; (800b9f4 <xPortStartScheduler+0x124>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d10a      	bne.n	800b8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	613b      	str	r3, [r7, #16]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a3f      	ldr	r2, [pc, #252]	; (800b9f8 <xPortStartScheduler+0x128>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10a      	bne.n	800b916 <xPortStartScheduler+0x46>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	60fb      	str	r3, [r7, #12]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <xPortStartScheduler+0x12c>)
 800b918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	22ff      	movs	r2, #255	; 0xff
 800b926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <xPortStartScheduler+0x130>)
 800b93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b93e:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <xPortStartScheduler+0x134>)
 800b940:	2207      	movs	r2, #7
 800b942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b944:	e009      	b.n	800b95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b946:	4b2f      	ldr	r3, [pc, #188]	; (800ba04 <xPortStartScheduler+0x134>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	4a2d      	ldr	r2, [pc, #180]	; (800ba04 <xPortStartScheduler+0x134>)
 800b94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b80      	cmp	r3, #128	; 0x80
 800b964:	d0ef      	beq.n	800b946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b966:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <xPortStartScheduler+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f1c3 0307 	rsb	r3, r3, #7
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d00a      	beq.n	800b988 <xPortStartScheduler+0xb8>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b988:	4b1e      	ldr	r3, [pc, #120]	; (800ba04 <xPortStartScheduler+0x134>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <xPortStartScheduler+0x134>)
 800b990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <xPortStartScheduler+0x134>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b99a:	4a1a      	ldr	r2, [pc, #104]	; (800ba04 <xPortStartScheduler+0x134>)
 800b99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9a6:	4b18      	ldr	r3, [pc, #96]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a14      	ldr	r2, [pc, #80]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9be:	f000 f8dd 	bl	800bb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <xPortStartScheduler+0x13c>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9c8:	f000 f8fc 	bl	800bbc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9d8:	f7ff ff66 	bl	800b8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9dc:	f7fe ff80 	bl	800a8e0 <vTaskSwitchContext>
	prvTaskExitError();
 800b9e0:	f7ff ff22 	bl	800b828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	e000ed00 	.word	0xe000ed00
 800b9f4:	410fc271 	.word	0x410fc271
 800b9f8:	410fc270 	.word	0x410fc270
 800b9fc:	e000e400 	.word	0xe000e400
 800ba00:	240010e0 	.word	0x240010e0
 800ba04:	240010e4 	.word	0x240010e4
 800ba08:	e000ed20 	.word	0xe000ed20
 800ba0c:	24000010 	.word	0x24000010
 800ba10:	e000ef34 	.word	0xe000ef34

0800ba14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	4a0d      	ldr	r2, [pc, #52]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10f      	bne.n	800ba60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba40:	4b0b      	ldr	r3, [pc, #44]	; (800ba70 <vPortEnterCritical+0x5c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	e7fe      	b.n	800ba5e <vPortEnterCritical+0x4a>
	}
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	24000010 	.word	0x24000010
 800ba70:	e000ed04 	.word	0xe000ed04

0800ba74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <vPortExitCritical+0x50>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <vPortExitCritical+0x24>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	607b      	str	r3, [r7, #4]
}
 800ba94:	bf00      	nop
 800ba96:	e7fe      	b.n	800ba96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba98:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <vPortExitCritical+0x50>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4a09      	ldr	r2, [pc, #36]	; (800bac4 <vPortExitCritical+0x50>)
 800baa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baa2:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <vPortExitCritical+0x50>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <vPortExitCritical+0x42>
 800baaa:	2300      	movs	r3, #0
 800baac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f383 8811 	msr	BASEPRI, r3
}
 800bab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	24000010 	.word	0x24000010
	...

0800bad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bad0:	f3ef 8009 	mrs	r0, PSP
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <pxCurrentTCBConst>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	f01e 0f10 	tst.w	lr, #16
 800bae0:	bf08      	it	eq
 800bae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	6010      	str	r0, [r2, #0]
 800baec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800baf4:	f380 8811 	msr	BASEPRI, r0
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f7fe feee 	bl	800a8e0 <vTaskSwitchContext>
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f380 8811 	msr	BASEPRI, r0
 800bb0c:	bc09      	pop	{r0, r3}
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	6808      	ldr	r0, [r1, #0]
 800bb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb16:	f01e 0f10 	tst.w	lr, #16
 800bb1a:	bf08      	it	eq
 800bb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb20:	f380 8809 	msr	PSP, r0
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w

0800bb30 <pxCurrentTCBConst>:
 800bb30:	24000ab4 	.word	0x24000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop

0800bb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb52:	f7fe fe0b 	bl	800a76c <xTaskIncrementTick>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <xPortSysTickHandler+0x40>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f383 8811 	msr	BASEPRI, r3
}
 800bb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb86:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <vPortSetupTimerInterrupt+0x38>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <vPortSetupTimerInterrupt+0x3c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <vPortSetupTimerInterrupt+0x40>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	099b      	lsrs	r3, r3, #6
 800bb98:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <vPortSetupTimerInterrupt+0x44>)
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb9e:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	e000e010 	.word	0xe000e010
 800bbb4:	e000e018 	.word	0xe000e018
 800bbb8:	24000000 	.word	0x24000000
 800bbbc:	10624dd3 	.word	0x10624dd3
 800bbc0:	e000e014 	.word	0xe000e014

0800bbc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bbd4 <vPortEnableVFP+0x10>
 800bbc8:	6801      	ldr	r1, [r0, #0]
 800bbca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bbce:	6001      	str	r1, [r0, #0]
 800bbd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbd2:	bf00      	nop
 800bbd4:	e000ed88 	.word	0xe000ed88

0800bbd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d914      	bls.n	800bc14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbea:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <vPortValidateInterruptPriority+0x70>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbf4:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <vPortValidateInterruptPriority+0x74>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	7afa      	ldrb	r2, [r7, #11]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d20a      	bcs.n	800bc14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc14:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <vPortValidateInterruptPriority+0x78>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <vPortValidateInterruptPriority+0x7c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d90a      	bls.n	800bc3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	603b      	str	r3, [r7, #0]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <vPortValidateInterruptPriority+0x60>
	}
 800bc3a:	bf00      	nop
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	e000e3f0 	.word	0xe000e3f0
 800bc4c:	240010e0 	.word	0x240010e0
 800bc50:	e000ed0c 	.word	0xe000ed0c
 800bc54:	240010e4 	.word	0x240010e4

0800bc58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08a      	sub	sp, #40	; 0x28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc64:	f7fe fcc6 	bl	800a5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc68:	4b5b      	ldr	r3, [pc, #364]	; (800bdd8 <pvPortMalloc+0x180>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc70:	f000 f920 	bl	800beb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc74:	4b59      	ldr	r3, [pc, #356]	; (800bddc <pvPortMalloc+0x184>)
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 8093 	bne.w	800bda8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01d      	beq.n	800bcc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc88:	2208      	movs	r2, #8
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d014      	beq.n	800bcc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f023 0307 	bic.w	r3, r3, #7
 800bca0:	3308      	adds	r3, #8
 800bca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00a      	beq.n	800bcc4 <pvPortMalloc+0x6c>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	617b      	str	r3, [r7, #20]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d06e      	beq.n	800bda8 <pvPortMalloc+0x150>
 800bcca:	4b45      	ldr	r3, [pc, #276]	; (800bde0 <pvPortMalloc+0x188>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d869      	bhi.n	800bda8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcd4:	4b43      	ldr	r3, [pc, #268]	; (800bde4 <pvPortMalloc+0x18c>)
 800bcd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcd8:	4b42      	ldr	r3, [pc, #264]	; (800bde4 <pvPortMalloc+0x18c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcde:	e004      	b.n	800bcea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d903      	bls.n	800bcfc <pvPortMalloc+0xa4>
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1f1      	bne.n	800bce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcfc:	4b36      	ldr	r3, [pc, #216]	; (800bdd8 <pvPortMalloc+0x180>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d050      	beq.n	800bda8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2208      	movs	r2, #8
 800bd0c:	4413      	add	r3, r2
 800bd0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	2308      	movs	r3, #8
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d91f      	bls.n	800bd68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <pvPortMalloc+0xf8>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	613b      	str	r3, [r7, #16]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	1ad2      	subs	r2, r2, r3
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd62:	69b8      	ldr	r0, [r7, #24]
 800bd64:	f000 f908 	bl	800bf78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd68:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <pvPortMalloc+0x188>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	4a1b      	ldr	r2, [pc, #108]	; (800bde0 <pvPortMalloc+0x188>)
 800bd74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <pvPortMalloc+0x188>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	4b1b      	ldr	r3, [pc, #108]	; (800bde8 <pvPortMalloc+0x190>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d203      	bcs.n	800bd8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd82:	4b17      	ldr	r3, [pc, #92]	; (800bde0 <pvPortMalloc+0x188>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a18      	ldr	r2, [pc, #96]	; (800bde8 <pvPortMalloc+0x190>)
 800bd88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	4b13      	ldr	r3, [pc, #76]	; (800bddc <pvPortMalloc+0x184>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	431a      	orrs	r2, r3
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <pvPortMalloc+0x194>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a11      	ldr	r2, [pc, #68]	; (800bdec <pvPortMalloc+0x194>)
 800bda6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bda8:	f7fe fc32 	bl	800a610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <pvPortMalloc+0x174>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60fb      	str	r3, [r7, #12]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <pvPortMalloc+0x172>
	return pvReturn;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	24004cf0 	.word	0x24004cf0
 800bddc:	24004d04 	.word	0x24004d04
 800bde0:	24004cf4 	.word	0x24004cf4
 800bde4:	24004ce8 	.word	0x24004ce8
 800bde8:	24004cf8 	.word	0x24004cf8
 800bdec:	24004cfc 	.word	0x24004cfc

0800bdf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d04d      	beq.n	800be9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be02:	2308      	movs	r3, #8
 800be04:	425b      	negs	r3, r3
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4413      	add	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <vPortFree+0xb8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4013      	ands	r3, r2
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <vPortFree+0x44>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	60fb      	str	r3, [r7, #12]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <vPortFree+0x62>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	60bb      	str	r3, [r7, #8]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <vPortFree+0xb8>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01e      	beq.n	800be9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d11a      	bne.n	800be9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <vPortFree+0xb8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	43db      	mvns	r3, r3
 800be72:	401a      	ands	r2, r3
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be78:	f7fe fbbc 	bl	800a5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <vPortFree+0xbc>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4413      	add	r3, r2
 800be86:	4a09      	ldr	r2, [pc, #36]	; (800beac <vPortFree+0xbc>)
 800be88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be8a:	6938      	ldr	r0, [r7, #16]
 800be8c:	f000 f874 	bl	800bf78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be90:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <vPortFree+0xc0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3301      	adds	r3, #1
 800be96:	4a06      	ldr	r2, [pc, #24]	; (800beb0 <vPortFree+0xc0>)
 800be98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be9a:	f7fe fbb9 	bl	800a610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be9e:	bf00      	nop
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	24004d04 	.word	0x24004d04
 800beac:	24004cf4 	.word	0x24004cf4
 800beb0:	24004d00 	.word	0x24004d00

0800beb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bec0:	4b27      	ldr	r3, [pc, #156]	; (800bf60 <prvHeapInit+0xac>)
 800bec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00c      	beq.n	800bee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3307      	adds	r3, #7
 800bed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	4a1f      	ldr	r2, [pc, #124]	; (800bf60 <prvHeapInit+0xac>)
 800bee4:	4413      	add	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800beec:	4a1d      	ldr	r2, [pc, #116]	; (800bf64 <prvHeapInit+0xb0>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bef2:	4b1c      	ldr	r3, [pc, #112]	; (800bf64 <prvHeapInit+0xb0>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf00:	2208      	movs	r2, #8
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	1a9b      	subs	r3, r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f023 0307 	bic.w	r3, r3, #7
 800bf0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	4a15      	ldr	r2, [pc, #84]	; (800bf68 <prvHeapInit+0xb4>)
 800bf14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <prvHeapInit+0xb4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <prvHeapInit+0xb4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf34:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <prvHeapInit+0xb4>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <prvHeapInit+0xb8>)
 800bf42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <prvHeapInit+0xbc>)
 800bf4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf4c:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <prvHeapInit+0xc0>)
 800bf4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	240010e8 	.word	0x240010e8
 800bf64:	24004ce8 	.word	0x24004ce8
 800bf68:	24004cf0 	.word	0x24004cf0
 800bf6c:	24004cf8 	.word	0x24004cf8
 800bf70:	24004cf4 	.word	0x24004cf4
 800bf74:	24004d04 	.word	0x24004d04

0800bf78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf80:	4b28      	ldr	r3, [pc, #160]	; (800c024 <prvInsertBlockIntoFreeList+0xac>)
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e002      	b.n	800bf8c <prvInsertBlockIntoFreeList+0x14>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d8f7      	bhi.n	800bf86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d108      	bne.n	800bfba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	441a      	add	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d118      	bne.n	800c000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <prvInsertBlockIntoFreeList+0xb0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d00d      	beq.n	800bff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	e008      	b.n	800c008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bff6:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <prvInsertBlockIntoFreeList+0xb0>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e003      	b.n	800c008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d002      	beq.n	800c016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c016:	bf00      	nop
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	24004ce8 	.word	0x24004ce8
 800c028:	24004cf0 	.word	0x24004cf0

0800c02c <__errno>:
 800c02c:	4b01      	ldr	r3, [pc, #4]	; (800c034 <__errno+0x8>)
 800c02e:	6818      	ldr	r0, [r3, #0]
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	24000014 	.word	0x24000014

0800c038 <__libc_init_array>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	4d0d      	ldr	r5, [pc, #52]	; (800c070 <__libc_init_array+0x38>)
 800c03c:	4c0d      	ldr	r4, [pc, #52]	; (800c074 <__libc_init_array+0x3c>)
 800c03e:	1b64      	subs	r4, r4, r5
 800c040:	10a4      	asrs	r4, r4, #2
 800c042:	2600      	movs	r6, #0
 800c044:	42a6      	cmp	r6, r4
 800c046:	d109      	bne.n	800c05c <__libc_init_array+0x24>
 800c048:	4d0b      	ldr	r5, [pc, #44]	; (800c078 <__libc_init_array+0x40>)
 800c04a:	4c0c      	ldr	r4, [pc, #48]	; (800c07c <__libc_init_array+0x44>)
 800c04c:	f000 fd2c 	bl	800caa8 <_init>
 800c050:	1b64      	subs	r4, r4, r5
 800c052:	10a4      	asrs	r4, r4, #2
 800c054:	2600      	movs	r6, #0
 800c056:	42a6      	cmp	r6, r4
 800c058:	d105      	bne.n	800c066 <__libc_init_array+0x2e>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c060:	4798      	blx	r3
 800c062:	3601      	adds	r6, #1
 800c064:	e7ee      	b.n	800c044 <__libc_init_array+0xc>
 800c066:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06a:	4798      	blx	r3
 800c06c:	3601      	adds	r6, #1
 800c06e:	e7f2      	b.n	800c056 <__libc_init_array+0x1e>
 800c070:	0800cdd0 	.word	0x0800cdd0
 800c074:	0800cdd0 	.word	0x0800cdd0
 800c078:	0800cdd0 	.word	0x0800cdd0
 800c07c:	0800cdd4 	.word	0x0800cdd4

0800c080 <memcpy>:
 800c080:	440a      	add	r2, r1
 800c082:	4291      	cmp	r1, r2
 800c084:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c088:	d100      	bne.n	800c08c <memcpy+0xc>
 800c08a:	4770      	bx	lr
 800c08c:	b510      	push	{r4, lr}
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c096:	4291      	cmp	r1, r2
 800c098:	d1f9      	bne.n	800c08e <memcpy+0xe>
 800c09a:	bd10      	pop	{r4, pc}

0800c09c <memset>:
 800c09c:	4402      	add	r2, r0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d100      	bne.n	800c0a6 <memset+0xa>
 800c0a4:	4770      	bx	lr
 800c0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0aa:	e7f9      	b.n	800c0a0 <memset+0x4>

0800c0ac <_puts_r>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	460e      	mov	r6, r1
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	b118      	cbz	r0, 800c0bc <_puts_r+0x10>
 800c0b4:	6983      	ldr	r3, [r0, #24]
 800c0b6:	b90b      	cbnz	r3, 800c0bc <_puts_r+0x10>
 800c0b8:	f000 fa48 	bl	800c54c <__sinit>
 800c0bc:	69ab      	ldr	r3, [r5, #24]
 800c0be:	68ac      	ldr	r4, [r5, #8]
 800c0c0:	b913      	cbnz	r3, 800c0c8 <_puts_r+0x1c>
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f000 fa42 	bl	800c54c <__sinit>
 800c0c8:	4b2c      	ldr	r3, [pc, #176]	; (800c17c <_puts_r+0xd0>)
 800c0ca:	429c      	cmp	r4, r3
 800c0cc:	d120      	bne.n	800c110 <_puts_r+0x64>
 800c0ce:	686c      	ldr	r4, [r5, #4]
 800c0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d2:	07db      	lsls	r3, r3, #31
 800c0d4:	d405      	bmi.n	800c0e2 <_puts_r+0x36>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	0598      	lsls	r0, r3, #22
 800c0da:	d402      	bmi.n	800c0e2 <_puts_r+0x36>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0de:	f000 fad3 	bl	800c688 <__retarget_lock_acquire_recursive>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	0719      	lsls	r1, r3, #28
 800c0e6:	d51d      	bpl.n	800c124 <_puts_r+0x78>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	b1db      	cbz	r3, 800c124 <_puts_r+0x78>
 800c0ec:	3e01      	subs	r6, #1
 800c0ee:	68a3      	ldr	r3, [r4, #8]
 800c0f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	60a3      	str	r3, [r4, #8]
 800c0f8:	bb39      	cbnz	r1, 800c14a <_puts_r+0x9e>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	da38      	bge.n	800c170 <_puts_r+0xc4>
 800c0fe:	4622      	mov	r2, r4
 800c100:	210a      	movs	r1, #10
 800c102:	4628      	mov	r0, r5
 800c104:	f000 f848 	bl	800c198 <__swbuf_r>
 800c108:	3001      	adds	r0, #1
 800c10a:	d011      	beq.n	800c130 <_puts_r+0x84>
 800c10c:	250a      	movs	r5, #10
 800c10e:	e011      	b.n	800c134 <_puts_r+0x88>
 800c110:	4b1b      	ldr	r3, [pc, #108]	; (800c180 <_puts_r+0xd4>)
 800c112:	429c      	cmp	r4, r3
 800c114:	d101      	bne.n	800c11a <_puts_r+0x6e>
 800c116:	68ac      	ldr	r4, [r5, #8]
 800c118:	e7da      	b.n	800c0d0 <_puts_r+0x24>
 800c11a:	4b1a      	ldr	r3, [pc, #104]	; (800c184 <_puts_r+0xd8>)
 800c11c:	429c      	cmp	r4, r3
 800c11e:	bf08      	it	eq
 800c120:	68ec      	ldreq	r4, [r5, #12]
 800c122:	e7d5      	b.n	800c0d0 <_puts_r+0x24>
 800c124:	4621      	mov	r1, r4
 800c126:	4628      	mov	r0, r5
 800c128:	f000 f888 	bl	800c23c <__swsetup_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d0dd      	beq.n	800c0ec <_puts_r+0x40>
 800c130:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c136:	07da      	lsls	r2, r3, #31
 800c138:	d405      	bmi.n	800c146 <_puts_r+0x9a>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	059b      	lsls	r3, r3, #22
 800c13e:	d402      	bmi.n	800c146 <_puts_r+0x9a>
 800c140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c142:	f000 faa2 	bl	800c68a <__retarget_lock_release_recursive>
 800c146:	4628      	mov	r0, r5
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	da04      	bge.n	800c158 <_puts_r+0xac>
 800c14e:	69a2      	ldr	r2, [r4, #24]
 800c150:	429a      	cmp	r2, r3
 800c152:	dc06      	bgt.n	800c162 <_puts_r+0xb6>
 800c154:	290a      	cmp	r1, #10
 800c156:	d004      	beq.n	800c162 <_puts_r+0xb6>
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	6022      	str	r2, [r4, #0]
 800c15e:	7019      	strb	r1, [r3, #0]
 800c160:	e7c5      	b.n	800c0ee <_puts_r+0x42>
 800c162:	4622      	mov	r2, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 f817 	bl	800c198 <__swbuf_r>
 800c16a:	3001      	adds	r0, #1
 800c16c:	d1bf      	bne.n	800c0ee <_puts_r+0x42>
 800c16e:	e7df      	b.n	800c130 <_puts_r+0x84>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	250a      	movs	r5, #10
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	6022      	str	r2, [r4, #0]
 800c178:	701d      	strb	r5, [r3, #0]
 800c17a:	e7db      	b.n	800c134 <_puts_r+0x88>
 800c17c:	0800cd88 	.word	0x0800cd88
 800c180:	0800cda8 	.word	0x0800cda8
 800c184:	0800cd68 	.word	0x0800cd68

0800c188 <puts>:
 800c188:	4b02      	ldr	r3, [pc, #8]	; (800c194 <puts+0xc>)
 800c18a:	4601      	mov	r1, r0
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	f7ff bf8d 	b.w	800c0ac <_puts_r>
 800c192:	bf00      	nop
 800c194:	24000014 	.word	0x24000014

0800c198 <__swbuf_r>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	460e      	mov	r6, r1
 800c19c:	4614      	mov	r4, r2
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b118      	cbz	r0, 800c1aa <__swbuf_r+0x12>
 800c1a2:	6983      	ldr	r3, [r0, #24]
 800c1a4:	b90b      	cbnz	r3, 800c1aa <__swbuf_r+0x12>
 800c1a6:	f000 f9d1 	bl	800c54c <__sinit>
 800c1aa:	4b21      	ldr	r3, [pc, #132]	; (800c230 <__swbuf_r+0x98>)
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	d12b      	bne.n	800c208 <__swbuf_r+0x70>
 800c1b0:	686c      	ldr	r4, [r5, #4]
 800c1b2:	69a3      	ldr	r3, [r4, #24]
 800c1b4:	60a3      	str	r3, [r4, #8]
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	071a      	lsls	r2, r3, #28
 800c1ba:	d52f      	bpl.n	800c21c <__swbuf_r+0x84>
 800c1bc:	6923      	ldr	r3, [r4, #16]
 800c1be:	b36b      	cbz	r3, 800c21c <__swbuf_r+0x84>
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	6820      	ldr	r0, [r4, #0]
 800c1c4:	1ac0      	subs	r0, r0, r3
 800c1c6:	6963      	ldr	r3, [r4, #20]
 800c1c8:	b2f6      	uxtb	r6, r6
 800c1ca:	4283      	cmp	r3, r0
 800c1cc:	4637      	mov	r7, r6
 800c1ce:	dc04      	bgt.n	800c1da <__swbuf_r+0x42>
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 f926 	bl	800c424 <_fflush_r>
 800c1d8:	bb30      	cbnz	r0, 800c228 <__swbuf_r+0x90>
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	60a3      	str	r3, [r4, #8]
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	6022      	str	r2, [r4, #0]
 800c1e6:	701e      	strb	r6, [r3, #0]
 800c1e8:	6963      	ldr	r3, [r4, #20]
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	4283      	cmp	r3, r0
 800c1ee:	d004      	beq.n	800c1fa <__swbuf_r+0x62>
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	07db      	lsls	r3, r3, #31
 800c1f4:	d506      	bpl.n	800c204 <__swbuf_r+0x6c>
 800c1f6:	2e0a      	cmp	r6, #10
 800c1f8:	d104      	bne.n	800c204 <__swbuf_r+0x6c>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f000 f911 	bl	800c424 <_fflush_r>
 800c202:	b988      	cbnz	r0, 800c228 <__swbuf_r+0x90>
 800c204:	4638      	mov	r0, r7
 800c206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c208:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <__swbuf_r+0x9c>)
 800c20a:	429c      	cmp	r4, r3
 800c20c:	d101      	bne.n	800c212 <__swbuf_r+0x7a>
 800c20e:	68ac      	ldr	r4, [r5, #8]
 800c210:	e7cf      	b.n	800c1b2 <__swbuf_r+0x1a>
 800c212:	4b09      	ldr	r3, [pc, #36]	; (800c238 <__swbuf_r+0xa0>)
 800c214:	429c      	cmp	r4, r3
 800c216:	bf08      	it	eq
 800c218:	68ec      	ldreq	r4, [r5, #12]
 800c21a:	e7ca      	b.n	800c1b2 <__swbuf_r+0x1a>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 f80c 	bl	800c23c <__swsetup_r>
 800c224:	2800      	cmp	r0, #0
 800c226:	d0cb      	beq.n	800c1c0 <__swbuf_r+0x28>
 800c228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c22c:	e7ea      	b.n	800c204 <__swbuf_r+0x6c>
 800c22e:	bf00      	nop
 800c230:	0800cd88 	.word	0x0800cd88
 800c234:	0800cda8 	.word	0x0800cda8
 800c238:	0800cd68 	.word	0x0800cd68

0800c23c <__swsetup_r>:
 800c23c:	4b32      	ldr	r3, [pc, #200]	; (800c308 <__swsetup_r+0xcc>)
 800c23e:	b570      	push	{r4, r5, r6, lr}
 800c240:	681d      	ldr	r5, [r3, #0]
 800c242:	4606      	mov	r6, r0
 800c244:	460c      	mov	r4, r1
 800c246:	b125      	cbz	r5, 800c252 <__swsetup_r+0x16>
 800c248:	69ab      	ldr	r3, [r5, #24]
 800c24a:	b913      	cbnz	r3, 800c252 <__swsetup_r+0x16>
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 f97d 	bl	800c54c <__sinit>
 800c252:	4b2e      	ldr	r3, [pc, #184]	; (800c30c <__swsetup_r+0xd0>)
 800c254:	429c      	cmp	r4, r3
 800c256:	d10f      	bne.n	800c278 <__swsetup_r+0x3c>
 800c258:	686c      	ldr	r4, [r5, #4]
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c260:	0719      	lsls	r1, r3, #28
 800c262:	d42c      	bmi.n	800c2be <__swsetup_r+0x82>
 800c264:	06dd      	lsls	r5, r3, #27
 800c266:	d411      	bmi.n	800c28c <__swsetup_r+0x50>
 800c268:	2309      	movs	r3, #9
 800c26a:	6033      	str	r3, [r6, #0]
 800c26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c270:	81a3      	strh	r3, [r4, #12]
 800c272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c276:	e03e      	b.n	800c2f6 <__swsetup_r+0xba>
 800c278:	4b25      	ldr	r3, [pc, #148]	; (800c310 <__swsetup_r+0xd4>)
 800c27a:	429c      	cmp	r4, r3
 800c27c:	d101      	bne.n	800c282 <__swsetup_r+0x46>
 800c27e:	68ac      	ldr	r4, [r5, #8]
 800c280:	e7eb      	b.n	800c25a <__swsetup_r+0x1e>
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <__swsetup_r+0xd8>)
 800c284:	429c      	cmp	r4, r3
 800c286:	bf08      	it	eq
 800c288:	68ec      	ldreq	r4, [r5, #12]
 800c28a:	e7e6      	b.n	800c25a <__swsetup_r+0x1e>
 800c28c:	0758      	lsls	r0, r3, #29
 800c28e:	d512      	bpl.n	800c2b6 <__swsetup_r+0x7a>
 800c290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c292:	b141      	cbz	r1, 800c2a6 <__swsetup_r+0x6a>
 800c294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c298:	4299      	cmp	r1, r3
 800c29a:	d002      	beq.n	800c2a2 <__swsetup_r+0x66>
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 fa5b 	bl	800c758 <_free_r>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2ac:	81a3      	strh	r3, [r4, #12]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	6923      	ldr	r3, [r4, #16]
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	f043 0308 	orr.w	r3, r3, #8
 800c2bc:	81a3      	strh	r3, [r4, #12]
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	b94b      	cbnz	r3, 800c2d6 <__swsetup_r+0x9a>
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2cc:	d003      	beq.n	800c2d6 <__swsetup_r+0x9a>
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f000 fa01 	bl	800c6d8 <__smakebuf_r>
 800c2d6:	89a0      	ldrh	r0, [r4, #12]
 800c2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2dc:	f010 0301 	ands.w	r3, r0, #1
 800c2e0:	d00a      	beq.n	800c2f8 <__swsetup_r+0xbc>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60a3      	str	r3, [r4, #8]
 800c2e6:	6963      	ldr	r3, [r4, #20]
 800c2e8:	425b      	negs	r3, r3
 800c2ea:	61a3      	str	r3, [r4, #24]
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	b943      	cbnz	r3, 800c302 <__swsetup_r+0xc6>
 800c2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2f4:	d1ba      	bne.n	800c26c <__swsetup_r+0x30>
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	0781      	lsls	r1, r0, #30
 800c2fa:	bf58      	it	pl
 800c2fc:	6963      	ldrpl	r3, [r4, #20]
 800c2fe:	60a3      	str	r3, [r4, #8]
 800c300:	e7f4      	b.n	800c2ec <__swsetup_r+0xb0>
 800c302:	2000      	movs	r0, #0
 800c304:	e7f7      	b.n	800c2f6 <__swsetup_r+0xba>
 800c306:	bf00      	nop
 800c308:	24000014 	.word	0x24000014
 800c30c:	0800cd88 	.word	0x0800cd88
 800c310:	0800cda8 	.word	0x0800cda8
 800c314:	0800cd68 	.word	0x0800cd68

0800c318 <__sflush_r>:
 800c318:	898a      	ldrh	r2, [r1, #12]
 800c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	4605      	mov	r5, r0
 800c320:	0710      	lsls	r0, r2, #28
 800c322:	460c      	mov	r4, r1
 800c324:	d458      	bmi.n	800c3d8 <__sflush_r+0xc0>
 800c326:	684b      	ldr	r3, [r1, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dc05      	bgt.n	800c338 <__sflush_r+0x20>
 800c32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dc02      	bgt.n	800c338 <__sflush_r+0x20>
 800c332:	2000      	movs	r0, #0
 800c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33a:	2e00      	cmp	r6, #0
 800c33c:	d0f9      	beq.n	800c332 <__sflush_r+0x1a>
 800c33e:	2300      	movs	r3, #0
 800c340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c344:	682f      	ldr	r7, [r5, #0]
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	d032      	beq.n	800c3b0 <__sflush_r+0x98>
 800c34a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	075a      	lsls	r2, r3, #29
 800c350:	d505      	bpl.n	800c35e <__sflush_r+0x46>
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c358:	b10b      	cbz	r3, 800c35e <__sflush_r+0x46>
 800c35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c35c:	1ac0      	subs	r0, r0, r3
 800c35e:	2300      	movs	r3, #0
 800c360:	4602      	mov	r2, r0
 800c362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c364:	6a21      	ldr	r1, [r4, #32]
 800c366:	4628      	mov	r0, r5
 800c368:	47b0      	blx	r6
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	d106      	bne.n	800c37e <__sflush_r+0x66>
 800c370:	6829      	ldr	r1, [r5, #0]
 800c372:	291d      	cmp	r1, #29
 800c374:	d82c      	bhi.n	800c3d0 <__sflush_r+0xb8>
 800c376:	4a2a      	ldr	r2, [pc, #168]	; (800c420 <__sflush_r+0x108>)
 800c378:	40ca      	lsrs	r2, r1
 800c37a:	07d6      	lsls	r6, r2, #31
 800c37c:	d528      	bpl.n	800c3d0 <__sflush_r+0xb8>
 800c37e:	2200      	movs	r2, #0
 800c380:	6062      	str	r2, [r4, #4]
 800c382:	04d9      	lsls	r1, r3, #19
 800c384:	6922      	ldr	r2, [r4, #16]
 800c386:	6022      	str	r2, [r4, #0]
 800c388:	d504      	bpl.n	800c394 <__sflush_r+0x7c>
 800c38a:	1c42      	adds	r2, r0, #1
 800c38c:	d101      	bne.n	800c392 <__sflush_r+0x7a>
 800c38e:	682b      	ldr	r3, [r5, #0]
 800c390:	b903      	cbnz	r3, 800c394 <__sflush_r+0x7c>
 800c392:	6560      	str	r0, [r4, #84]	; 0x54
 800c394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c396:	602f      	str	r7, [r5, #0]
 800c398:	2900      	cmp	r1, #0
 800c39a:	d0ca      	beq.n	800c332 <__sflush_r+0x1a>
 800c39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3a0:	4299      	cmp	r1, r3
 800c3a2:	d002      	beq.n	800c3aa <__sflush_r+0x92>
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 f9d7 	bl	800c758 <_free_r>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ae:	e7c1      	b.n	800c334 <__sflush_r+0x1c>
 800c3b0:	6a21      	ldr	r1, [r4, #32]
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b0      	blx	r6
 800c3b8:	1c41      	adds	r1, r0, #1
 800c3ba:	d1c7      	bne.n	800c34c <__sflush_r+0x34>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d0c4      	beq.n	800c34c <__sflush_r+0x34>
 800c3c2:	2b1d      	cmp	r3, #29
 800c3c4:	d001      	beq.n	800c3ca <__sflush_r+0xb2>
 800c3c6:	2b16      	cmp	r3, #22
 800c3c8:	d101      	bne.n	800c3ce <__sflush_r+0xb6>
 800c3ca:	602f      	str	r7, [r5, #0]
 800c3cc:	e7b1      	b.n	800c332 <__sflush_r+0x1a>
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	e7ad      	b.n	800c334 <__sflush_r+0x1c>
 800c3d8:	690f      	ldr	r7, [r1, #16]
 800c3da:	2f00      	cmp	r7, #0
 800c3dc:	d0a9      	beq.n	800c332 <__sflush_r+0x1a>
 800c3de:	0793      	lsls	r3, r2, #30
 800c3e0:	680e      	ldr	r6, [r1, #0]
 800c3e2:	bf08      	it	eq
 800c3e4:	694b      	ldreq	r3, [r1, #20]
 800c3e6:	600f      	str	r7, [r1, #0]
 800c3e8:	bf18      	it	ne
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	eba6 0807 	sub.w	r8, r6, r7
 800c3f0:	608b      	str	r3, [r1, #8]
 800c3f2:	f1b8 0f00 	cmp.w	r8, #0
 800c3f6:	dd9c      	ble.n	800c332 <__sflush_r+0x1a>
 800c3f8:	6a21      	ldr	r1, [r4, #32]
 800c3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3fc:	4643      	mov	r3, r8
 800c3fe:	463a      	mov	r2, r7
 800c400:	4628      	mov	r0, r5
 800c402:	47b0      	blx	r6
 800c404:	2800      	cmp	r0, #0
 800c406:	dc06      	bgt.n	800c416 <__sflush_r+0xfe>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c414:	e78e      	b.n	800c334 <__sflush_r+0x1c>
 800c416:	4407      	add	r7, r0
 800c418:	eba8 0800 	sub.w	r8, r8, r0
 800c41c:	e7e9      	b.n	800c3f2 <__sflush_r+0xda>
 800c41e:	bf00      	nop
 800c420:	20400001 	.word	0x20400001

0800c424 <_fflush_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	690b      	ldr	r3, [r1, #16]
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b913      	cbnz	r3, 800c434 <_fflush_r+0x10>
 800c42e:	2500      	movs	r5, #0
 800c430:	4628      	mov	r0, r5
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	b118      	cbz	r0, 800c43e <_fflush_r+0x1a>
 800c436:	6983      	ldr	r3, [r0, #24]
 800c438:	b90b      	cbnz	r3, 800c43e <_fflush_r+0x1a>
 800c43a:	f000 f887 	bl	800c54c <__sinit>
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <_fflush_r+0x6c>)
 800c440:	429c      	cmp	r4, r3
 800c442:	d11b      	bne.n	800c47c <_fflush_r+0x58>
 800c444:	686c      	ldr	r4, [r5, #4]
 800c446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0ef      	beq.n	800c42e <_fflush_r+0xa>
 800c44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c450:	07d0      	lsls	r0, r2, #31
 800c452:	d404      	bmi.n	800c45e <_fflush_r+0x3a>
 800c454:	0599      	lsls	r1, r3, #22
 800c456:	d402      	bmi.n	800c45e <_fflush_r+0x3a>
 800c458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c45a:	f000 f915 	bl	800c688 <__retarget_lock_acquire_recursive>
 800c45e:	4628      	mov	r0, r5
 800c460:	4621      	mov	r1, r4
 800c462:	f7ff ff59 	bl	800c318 <__sflush_r>
 800c466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c468:	07da      	lsls	r2, r3, #31
 800c46a:	4605      	mov	r5, r0
 800c46c:	d4e0      	bmi.n	800c430 <_fflush_r+0xc>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	059b      	lsls	r3, r3, #22
 800c472:	d4dd      	bmi.n	800c430 <_fflush_r+0xc>
 800c474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c476:	f000 f908 	bl	800c68a <__retarget_lock_release_recursive>
 800c47a:	e7d9      	b.n	800c430 <_fflush_r+0xc>
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_fflush_r+0x70>)
 800c47e:	429c      	cmp	r4, r3
 800c480:	d101      	bne.n	800c486 <_fflush_r+0x62>
 800c482:	68ac      	ldr	r4, [r5, #8]
 800c484:	e7df      	b.n	800c446 <_fflush_r+0x22>
 800c486:	4b04      	ldr	r3, [pc, #16]	; (800c498 <_fflush_r+0x74>)
 800c488:	429c      	cmp	r4, r3
 800c48a:	bf08      	it	eq
 800c48c:	68ec      	ldreq	r4, [r5, #12]
 800c48e:	e7da      	b.n	800c446 <_fflush_r+0x22>
 800c490:	0800cd88 	.word	0x0800cd88
 800c494:	0800cda8 	.word	0x0800cda8
 800c498:	0800cd68 	.word	0x0800cd68

0800c49c <std>:
 800c49c:	2300      	movs	r3, #0
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4aa:	6083      	str	r3, [r0, #8]
 800c4ac:	8181      	strh	r1, [r0, #12]
 800c4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c4b0:	81c2      	strh	r2, [r0, #14]
 800c4b2:	6183      	str	r3, [r0, #24]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	2208      	movs	r2, #8
 800c4b8:	305c      	adds	r0, #92	; 0x5c
 800c4ba:	f7ff fdef 	bl	800c09c <memset>
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <std+0x38>)
 800c4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <std+0x3c>)
 800c4c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4c6:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <std+0x40>)
 800c4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <std+0x44>)
 800c4cc:	6224      	str	r4, [r4, #32]
 800c4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c4d0:	bd10      	pop	{r4, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800c939 	.word	0x0800c939
 800c4d8:	0800c95b 	.word	0x0800c95b
 800c4dc:	0800c993 	.word	0x0800c993
 800c4e0:	0800c9b7 	.word	0x0800c9b7

0800c4e4 <_cleanup_r>:
 800c4e4:	4901      	ldr	r1, [pc, #4]	; (800c4ec <_cleanup_r+0x8>)
 800c4e6:	f000 b8af 	b.w	800c648 <_fwalk_reent>
 800c4ea:	bf00      	nop
 800c4ec:	0800c425 	.word	0x0800c425

0800c4f0 <__sfmoreglue>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	2268      	movs	r2, #104	; 0x68
 800c4f4:	1e4d      	subs	r5, r1, #1
 800c4f6:	4355      	muls	r5, r2
 800c4f8:	460e      	mov	r6, r1
 800c4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4fe:	f000 f997 	bl	800c830 <_malloc_r>
 800c502:	4604      	mov	r4, r0
 800c504:	b140      	cbz	r0, 800c518 <__sfmoreglue+0x28>
 800c506:	2100      	movs	r1, #0
 800c508:	e9c0 1600 	strd	r1, r6, [r0]
 800c50c:	300c      	adds	r0, #12
 800c50e:	60a0      	str	r0, [r4, #8]
 800c510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c514:	f7ff fdc2 	bl	800c09c <memset>
 800c518:	4620      	mov	r0, r4
 800c51a:	bd70      	pop	{r4, r5, r6, pc}

0800c51c <__sfp_lock_acquire>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sfp_lock_acquire+0x8>)
 800c51e:	f000 b8b3 	b.w	800c688 <__retarget_lock_acquire_recursive>
 800c522:	bf00      	nop
 800c524:	24004d09 	.word	0x24004d09

0800c528 <__sfp_lock_release>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__sfp_lock_release+0x8>)
 800c52a:	f000 b8ae 	b.w	800c68a <__retarget_lock_release_recursive>
 800c52e:	bf00      	nop
 800c530:	24004d09 	.word	0x24004d09

0800c534 <__sinit_lock_acquire>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__sinit_lock_acquire+0x8>)
 800c536:	f000 b8a7 	b.w	800c688 <__retarget_lock_acquire_recursive>
 800c53a:	bf00      	nop
 800c53c:	24004d0a 	.word	0x24004d0a

0800c540 <__sinit_lock_release>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__sinit_lock_release+0x8>)
 800c542:	f000 b8a2 	b.w	800c68a <__retarget_lock_release_recursive>
 800c546:	bf00      	nop
 800c548:	24004d0a 	.word	0x24004d0a

0800c54c <__sinit>:
 800c54c:	b510      	push	{r4, lr}
 800c54e:	4604      	mov	r4, r0
 800c550:	f7ff fff0 	bl	800c534 <__sinit_lock_acquire>
 800c554:	69a3      	ldr	r3, [r4, #24]
 800c556:	b11b      	cbz	r3, 800c560 <__sinit+0x14>
 800c558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c55c:	f7ff bff0 	b.w	800c540 <__sinit_lock_release>
 800c560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c564:	6523      	str	r3, [r4, #80]	; 0x50
 800c566:	4b13      	ldr	r3, [pc, #76]	; (800c5b4 <__sinit+0x68>)
 800c568:	4a13      	ldr	r2, [pc, #76]	; (800c5b8 <__sinit+0x6c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c56e:	42a3      	cmp	r3, r4
 800c570:	bf04      	itt	eq
 800c572:	2301      	moveq	r3, #1
 800c574:	61a3      	streq	r3, [r4, #24]
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f820 	bl	800c5bc <__sfp>
 800c57c:	6060      	str	r0, [r4, #4]
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f81c 	bl	800c5bc <__sfp>
 800c584:	60a0      	str	r0, [r4, #8]
 800c586:	4620      	mov	r0, r4
 800c588:	f000 f818 	bl	800c5bc <__sfp>
 800c58c:	2200      	movs	r2, #0
 800c58e:	60e0      	str	r0, [r4, #12]
 800c590:	2104      	movs	r1, #4
 800c592:	6860      	ldr	r0, [r4, #4]
 800c594:	f7ff ff82 	bl	800c49c <std>
 800c598:	68a0      	ldr	r0, [r4, #8]
 800c59a:	2201      	movs	r2, #1
 800c59c:	2109      	movs	r1, #9
 800c59e:	f7ff ff7d 	bl	800c49c <std>
 800c5a2:	68e0      	ldr	r0, [r4, #12]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	2112      	movs	r1, #18
 800c5a8:	f7ff ff78 	bl	800c49c <std>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	61a3      	str	r3, [r4, #24]
 800c5b0:	e7d2      	b.n	800c558 <__sinit+0xc>
 800c5b2:	bf00      	nop
 800c5b4:	0800cd64 	.word	0x0800cd64
 800c5b8:	0800c4e5 	.word	0x0800c4e5

0800c5bc <__sfp>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	4607      	mov	r7, r0
 800c5c0:	f7ff ffac 	bl	800c51c <__sfp_lock_acquire>
 800c5c4:	4b1e      	ldr	r3, [pc, #120]	; (800c640 <__sfp+0x84>)
 800c5c6:	681e      	ldr	r6, [r3, #0]
 800c5c8:	69b3      	ldr	r3, [r6, #24]
 800c5ca:	b913      	cbnz	r3, 800c5d2 <__sfp+0x16>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7ff ffbd 	bl	800c54c <__sinit>
 800c5d2:	3648      	adds	r6, #72	; 0x48
 800c5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	d503      	bpl.n	800c5e4 <__sfp+0x28>
 800c5dc:	6833      	ldr	r3, [r6, #0]
 800c5de:	b30b      	cbz	r3, 800c624 <__sfp+0x68>
 800c5e0:	6836      	ldr	r6, [r6, #0]
 800c5e2:	e7f7      	b.n	800c5d4 <__sfp+0x18>
 800c5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5e8:	b9d5      	cbnz	r5, 800c620 <__sfp+0x64>
 800c5ea:	4b16      	ldr	r3, [pc, #88]	; (800c644 <__sfp+0x88>)
 800c5ec:	60e3      	str	r3, [r4, #12]
 800c5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c5f4:	f000 f847 	bl	800c686 <__retarget_lock_init_recursive>
 800c5f8:	f7ff ff96 	bl	800c528 <__sfp_lock_release>
 800c5fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c604:	6025      	str	r5, [r4, #0]
 800c606:	61a5      	str	r5, [r4, #24]
 800c608:	2208      	movs	r2, #8
 800c60a:	4629      	mov	r1, r5
 800c60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c610:	f7ff fd44 	bl	800c09c <memset>
 800c614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c61c:	4620      	mov	r0, r4
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	3468      	adds	r4, #104	; 0x68
 800c622:	e7d9      	b.n	800c5d8 <__sfp+0x1c>
 800c624:	2104      	movs	r1, #4
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff ff62 	bl	800c4f0 <__sfmoreglue>
 800c62c:	4604      	mov	r4, r0
 800c62e:	6030      	str	r0, [r6, #0]
 800c630:	2800      	cmp	r0, #0
 800c632:	d1d5      	bne.n	800c5e0 <__sfp+0x24>
 800c634:	f7ff ff78 	bl	800c528 <__sfp_lock_release>
 800c638:	230c      	movs	r3, #12
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	e7ee      	b.n	800c61c <__sfp+0x60>
 800c63e:	bf00      	nop
 800c640:	0800cd64 	.word	0x0800cd64
 800c644:	ffff0001 	.word	0xffff0001

0800c648 <_fwalk_reent>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	4606      	mov	r6, r0
 800c64e:	4688      	mov	r8, r1
 800c650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c654:	2700      	movs	r7, #0
 800c656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c65a:	f1b9 0901 	subs.w	r9, r9, #1
 800c65e:	d505      	bpl.n	800c66c <_fwalk_reent+0x24>
 800c660:	6824      	ldr	r4, [r4, #0]
 800c662:	2c00      	cmp	r4, #0
 800c664:	d1f7      	bne.n	800c656 <_fwalk_reent+0xe>
 800c666:	4638      	mov	r0, r7
 800c668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c66c:	89ab      	ldrh	r3, [r5, #12]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d907      	bls.n	800c682 <_fwalk_reent+0x3a>
 800c672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c676:	3301      	adds	r3, #1
 800c678:	d003      	beq.n	800c682 <_fwalk_reent+0x3a>
 800c67a:	4629      	mov	r1, r5
 800c67c:	4630      	mov	r0, r6
 800c67e:	47c0      	blx	r8
 800c680:	4307      	orrs	r7, r0
 800c682:	3568      	adds	r5, #104	; 0x68
 800c684:	e7e9      	b.n	800c65a <_fwalk_reent+0x12>

0800c686 <__retarget_lock_init_recursive>:
 800c686:	4770      	bx	lr

0800c688 <__retarget_lock_acquire_recursive>:
 800c688:	4770      	bx	lr

0800c68a <__retarget_lock_release_recursive>:
 800c68a:	4770      	bx	lr

0800c68c <__swhatbuf_r>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	460e      	mov	r6, r1
 800c690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c694:	2900      	cmp	r1, #0
 800c696:	b096      	sub	sp, #88	; 0x58
 800c698:	4614      	mov	r4, r2
 800c69a:	461d      	mov	r5, r3
 800c69c:	da08      	bge.n	800c6b0 <__swhatbuf_r+0x24>
 800c69e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	061a      	lsls	r2, r3, #24
 800c6a8:	d410      	bmi.n	800c6cc <__swhatbuf_r+0x40>
 800c6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ae:	e00e      	b.n	800c6ce <__swhatbuf_r+0x42>
 800c6b0:	466a      	mov	r2, sp
 800c6b2:	f000 f9a7 	bl	800ca04 <_fstat_r>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	dbf1      	blt.n	800c69e <__swhatbuf_r+0x12>
 800c6ba:	9a01      	ldr	r2, [sp, #4]
 800c6bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6c4:	425a      	negs	r2, r3
 800c6c6:	415a      	adcs	r2, r3
 800c6c8:	602a      	str	r2, [r5, #0]
 800c6ca:	e7ee      	b.n	800c6aa <__swhatbuf_r+0x1e>
 800c6cc:	2340      	movs	r3, #64	; 0x40
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	b016      	add	sp, #88	; 0x58
 800c6d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6d8 <__smakebuf_r>:
 800c6d8:	898b      	ldrh	r3, [r1, #12]
 800c6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6dc:	079d      	lsls	r5, r3, #30
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	d507      	bpl.n	800c6f4 <__smakebuf_r+0x1c>
 800c6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	6163      	str	r3, [r4, #20]
 800c6f0:	b002      	add	sp, #8
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	ab01      	add	r3, sp, #4
 800c6f6:	466a      	mov	r2, sp
 800c6f8:	f7ff ffc8 	bl	800c68c <__swhatbuf_r>
 800c6fc:	9900      	ldr	r1, [sp, #0]
 800c6fe:	4605      	mov	r5, r0
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f895 	bl	800c830 <_malloc_r>
 800c706:	b948      	cbnz	r0, 800c71c <__smakebuf_r+0x44>
 800c708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70c:	059a      	lsls	r2, r3, #22
 800c70e:	d4ef      	bmi.n	800c6f0 <__smakebuf_r+0x18>
 800c710:	f023 0303 	bic.w	r3, r3, #3
 800c714:	f043 0302 	orr.w	r3, r3, #2
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	e7e3      	b.n	800c6e4 <__smakebuf_r+0xc>
 800c71c:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <__smakebuf_r+0x7c>)
 800c71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	6020      	str	r0, [r4, #0]
 800c724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	9b00      	ldr	r3, [sp, #0]
 800c72c:	6163      	str	r3, [r4, #20]
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	6120      	str	r0, [r4, #16]
 800c732:	b15b      	cbz	r3, 800c74c <__smakebuf_r+0x74>
 800c734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 f975 	bl	800ca28 <_isatty_r>
 800c73e:	b128      	cbz	r0, 800c74c <__smakebuf_r+0x74>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	81a3      	strh	r3, [r4, #12]
 800c74c:	89a0      	ldrh	r0, [r4, #12]
 800c74e:	4305      	orrs	r5, r0
 800c750:	81a5      	strh	r5, [r4, #12]
 800c752:	e7cd      	b.n	800c6f0 <__smakebuf_r+0x18>
 800c754:	0800c4e5 	.word	0x0800c4e5

0800c758 <_free_r>:
 800c758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c75a:	2900      	cmp	r1, #0
 800c75c:	d044      	beq.n	800c7e8 <_free_r+0x90>
 800c75e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c762:	9001      	str	r0, [sp, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	f1a1 0404 	sub.w	r4, r1, #4
 800c76a:	bfb8      	it	lt
 800c76c:	18e4      	addlt	r4, r4, r3
 800c76e:	f000 f97d 	bl	800ca6c <__malloc_lock>
 800c772:	4a1e      	ldr	r2, [pc, #120]	; (800c7ec <_free_r+0x94>)
 800c774:	9801      	ldr	r0, [sp, #4]
 800c776:	6813      	ldr	r3, [r2, #0]
 800c778:	b933      	cbnz	r3, 800c788 <_free_r+0x30>
 800c77a:	6063      	str	r3, [r4, #4]
 800c77c:	6014      	str	r4, [r2, #0]
 800c77e:	b003      	add	sp, #12
 800c780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c784:	f000 b978 	b.w	800ca78 <__malloc_unlock>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d908      	bls.n	800c79e <_free_r+0x46>
 800c78c:	6825      	ldr	r5, [r4, #0]
 800c78e:	1961      	adds	r1, r4, r5
 800c790:	428b      	cmp	r3, r1
 800c792:	bf01      	itttt	eq
 800c794:	6819      	ldreq	r1, [r3, #0]
 800c796:	685b      	ldreq	r3, [r3, #4]
 800c798:	1949      	addeq	r1, r1, r5
 800c79a:	6021      	streq	r1, [r4, #0]
 800c79c:	e7ed      	b.n	800c77a <_free_r+0x22>
 800c79e:	461a      	mov	r2, r3
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	b10b      	cbz	r3, 800c7a8 <_free_r+0x50>
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d9fa      	bls.n	800c79e <_free_r+0x46>
 800c7a8:	6811      	ldr	r1, [r2, #0]
 800c7aa:	1855      	adds	r5, r2, r1
 800c7ac:	42a5      	cmp	r5, r4
 800c7ae:	d10b      	bne.n	800c7c8 <_free_r+0x70>
 800c7b0:	6824      	ldr	r4, [r4, #0]
 800c7b2:	4421      	add	r1, r4
 800c7b4:	1854      	adds	r4, r2, r1
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	6011      	str	r1, [r2, #0]
 800c7ba:	d1e0      	bne.n	800c77e <_free_r+0x26>
 800c7bc:	681c      	ldr	r4, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	6053      	str	r3, [r2, #4]
 800c7c2:	4421      	add	r1, r4
 800c7c4:	6011      	str	r1, [r2, #0]
 800c7c6:	e7da      	b.n	800c77e <_free_r+0x26>
 800c7c8:	d902      	bls.n	800c7d0 <_free_r+0x78>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	6003      	str	r3, [r0, #0]
 800c7ce:	e7d6      	b.n	800c77e <_free_r+0x26>
 800c7d0:	6825      	ldr	r5, [r4, #0]
 800c7d2:	1961      	adds	r1, r4, r5
 800c7d4:	428b      	cmp	r3, r1
 800c7d6:	bf04      	itt	eq
 800c7d8:	6819      	ldreq	r1, [r3, #0]
 800c7da:	685b      	ldreq	r3, [r3, #4]
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	bf04      	itt	eq
 800c7e0:	1949      	addeq	r1, r1, r5
 800c7e2:	6021      	streq	r1, [r4, #0]
 800c7e4:	6054      	str	r4, [r2, #4]
 800c7e6:	e7ca      	b.n	800c77e <_free_r+0x26>
 800c7e8:	b003      	add	sp, #12
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	24004d0c 	.word	0x24004d0c

0800c7f0 <sbrk_aligned>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	4e0e      	ldr	r6, [pc, #56]	; (800c82c <sbrk_aligned+0x3c>)
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	6831      	ldr	r1, [r6, #0]
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	b911      	cbnz	r1, 800c802 <sbrk_aligned+0x12>
 800c7fc:	f000 f88c 	bl	800c918 <_sbrk_r>
 800c800:	6030      	str	r0, [r6, #0]
 800c802:	4621      	mov	r1, r4
 800c804:	4628      	mov	r0, r5
 800c806:	f000 f887 	bl	800c918 <_sbrk_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	d00a      	beq.n	800c824 <sbrk_aligned+0x34>
 800c80e:	1cc4      	adds	r4, r0, #3
 800c810:	f024 0403 	bic.w	r4, r4, #3
 800c814:	42a0      	cmp	r0, r4
 800c816:	d007      	beq.n	800c828 <sbrk_aligned+0x38>
 800c818:	1a21      	subs	r1, r4, r0
 800c81a:	4628      	mov	r0, r5
 800c81c:	f000 f87c 	bl	800c918 <_sbrk_r>
 800c820:	3001      	adds	r0, #1
 800c822:	d101      	bne.n	800c828 <sbrk_aligned+0x38>
 800c824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c828:	4620      	mov	r0, r4
 800c82a:	bd70      	pop	{r4, r5, r6, pc}
 800c82c:	24004d10 	.word	0x24004d10

0800c830 <_malloc_r>:
 800c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c834:	1ccd      	adds	r5, r1, #3
 800c836:	f025 0503 	bic.w	r5, r5, #3
 800c83a:	3508      	adds	r5, #8
 800c83c:	2d0c      	cmp	r5, #12
 800c83e:	bf38      	it	cc
 800c840:	250c      	movcc	r5, #12
 800c842:	2d00      	cmp	r5, #0
 800c844:	4607      	mov	r7, r0
 800c846:	db01      	blt.n	800c84c <_malloc_r+0x1c>
 800c848:	42a9      	cmp	r1, r5
 800c84a:	d905      	bls.n	800c858 <_malloc_r+0x28>
 800c84c:	230c      	movs	r3, #12
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	2600      	movs	r6, #0
 800c852:	4630      	mov	r0, r6
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	4e2e      	ldr	r6, [pc, #184]	; (800c914 <_malloc_r+0xe4>)
 800c85a:	f000 f907 	bl	800ca6c <__malloc_lock>
 800c85e:	6833      	ldr	r3, [r6, #0]
 800c860:	461c      	mov	r4, r3
 800c862:	bb34      	cbnz	r4, 800c8b2 <_malloc_r+0x82>
 800c864:	4629      	mov	r1, r5
 800c866:	4638      	mov	r0, r7
 800c868:	f7ff ffc2 	bl	800c7f0 <sbrk_aligned>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	4604      	mov	r4, r0
 800c870:	d14d      	bne.n	800c90e <_malloc_r+0xde>
 800c872:	6834      	ldr	r4, [r6, #0]
 800c874:	4626      	mov	r6, r4
 800c876:	2e00      	cmp	r6, #0
 800c878:	d140      	bne.n	800c8fc <_malloc_r+0xcc>
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4631      	mov	r1, r6
 800c87e:	4638      	mov	r0, r7
 800c880:	eb04 0803 	add.w	r8, r4, r3
 800c884:	f000 f848 	bl	800c918 <_sbrk_r>
 800c888:	4580      	cmp	r8, r0
 800c88a:	d13a      	bne.n	800c902 <_malloc_r+0xd2>
 800c88c:	6821      	ldr	r1, [r4, #0]
 800c88e:	3503      	adds	r5, #3
 800c890:	1a6d      	subs	r5, r5, r1
 800c892:	f025 0503 	bic.w	r5, r5, #3
 800c896:	3508      	adds	r5, #8
 800c898:	2d0c      	cmp	r5, #12
 800c89a:	bf38      	it	cc
 800c89c:	250c      	movcc	r5, #12
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f7ff ffa5 	bl	800c7f0 <sbrk_aligned>
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d02b      	beq.n	800c902 <_malloc_r+0xd2>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	442b      	add	r3, r5
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	e00e      	b.n	800c8d0 <_malloc_r+0xa0>
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	1b52      	subs	r2, r2, r5
 800c8b6:	d41e      	bmi.n	800c8f6 <_malloc_r+0xc6>
 800c8b8:	2a0b      	cmp	r2, #11
 800c8ba:	d916      	bls.n	800c8ea <_malloc_r+0xba>
 800c8bc:	1961      	adds	r1, r4, r5
 800c8be:	42a3      	cmp	r3, r4
 800c8c0:	6025      	str	r5, [r4, #0]
 800c8c2:	bf18      	it	ne
 800c8c4:	6059      	strne	r1, [r3, #4]
 800c8c6:	6863      	ldr	r3, [r4, #4]
 800c8c8:	bf08      	it	eq
 800c8ca:	6031      	streq	r1, [r6, #0]
 800c8cc:	5162      	str	r2, [r4, r5]
 800c8ce:	604b      	str	r3, [r1, #4]
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f104 060b 	add.w	r6, r4, #11
 800c8d6:	f000 f8cf 	bl	800ca78 <__malloc_unlock>
 800c8da:	f026 0607 	bic.w	r6, r6, #7
 800c8de:	1d23      	adds	r3, r4, #4
 800c8e0:	1af2      	subs	r2, r6, r3
 800c8e2:	d0b6      	beq.n	800c852 <_malloc_r+0x22>
 800c8e4:	1b9b      	subs	r3, r3, r6
 800c8e6:	50a3      	str	r3, [r4, r2]
 800c8e8:	e7b3      	b.n	800c852 <_malloc_r+0x22>
 800c8ea:	6862      	ldr	r2, [r4, #4]
 800c8ec:	42a3      	cmp	r3, r4
 800c8ee:	bf0c      	ite	eq
 800c8f0:	6032      	streq	r2, [r6, #0]
 800c8f2:	605a      	strne	r2, [r3, #4]
 800c8f4:	e7ec      	b.n	800c8d0 <_malloc_r+0xa0>
 800c8f6:	4623      	mov	r3, r4
 800c8f8:	6864      	ldr	r4, [r4, #4]
 800c8fa:	e7b2      	b.n	800c862 <_malloc_r+0x32>
 800c8fc:	4634      	mov	r4, r6
 800c8fe:	6876      	ldr	r6, [r6, #4]
 800c900:	e7b9      	b.n	800c876 <_malloc_r+0x46>
 800c902:	230c      	movs	r3, #12
 800c904:	603b      	str	r3, [r7, #0]
 800c906:	4638      	mov	r0, r7
 800c908:	f000 f8b6 	bl	800ca78 <__malloc_unlock>
 800c90c:	e7a1      	b.n	800c852 <_malloc_r+0x22>
 800c90e:	6025      	str	r5, [r4, #0]
 800c910:	e7de      	b.n	800c8d0 <_malloc_r+0xa0>
 800c912:	bf00      	nop
 800c914:	24004d0c 	.word	0x24004d0c

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	; (800c934 <_sbrk_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f4 fe50 	bl	80015c8 <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	24004d14 	.word	0x24004d14

0800c938 <__sread>:
 800c938:	b510      	push	{r4, lr}
 800c93a:	460c      	mov	r4, r1
 800c93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c940:	f000 f8a0 	bl	800ca84 <_read_r>
 800c944:	2800      	cmp	r0, #0
 800c946:	bfab      	itete	ge
 800c948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c94a:	89a3      	ldrhlt	r3, [r4, #12]
 800c94c:	181b      	addge	r3, r3, r0
 800c94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c952:	bfac      	ite	ge
 800c954:	6563      	strge	r3, [r4, #84]	; 0x54
 800c956:	81a3      	strhlt	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__swrite>:
 800c95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c95e:	461f      	mov	r7, r3
 800c960:	898b      	ldrh	r3, [r1, #12]
 800c962:	05db      	lsls	r3, r3, #23
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	4616      	mov	r6, r2
 800c96a:	d505      	bpl.n	800c978 <__swrite+0x1e>
 800c96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c970:	2302      	movs	r3, #2
 800c972:	2200      	movs	r2, #0
 800c974:	f000 f868 	bl	800ca48 <_lseek_r>
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	4628      	mov	r0, r5
 800c98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c98e:	f000 b817 	b.w	800c9c0 <_write_r>

0800c992 <__sseek>:
 800c992:	b510      	push	{r4, lr}
 800c994:	460c      	mov	r4, r1
 800c996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99a:	f000 f855 	bl	800ca48 <_lseek_r>
 800c99e:	1c43      	adds	r3, r0, #1
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	bf15      	itete	ne
 800c9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9ae:	81a3      	strheq	r3, [r4, #12]
 800c9b0:	bf18      	it	ne
 800c9b2:	81a3      	strhne	r3, [r4, #12]
 800c9b4:	bd10      	pop	{r4, pc}

0800c9b6 <__sclose>:
 800c9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ba:	f000 b813 	b.w	800c9e4 <_close_r>
	...

0800c9c0 <_write_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	; (800c9e0 <_write_r+0x20>)
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	602a      	str	r2, [r5, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f7f4 fda9 	bl	8001526 <_write>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_write_r+0x1e>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_write_r+0x1e>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	24004d14 	.word	0x24004d14

0800c9e4 <_close_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d06      	ldr	r5, [pc, #24]	; (800ca00 <_close_r+0x1c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f7f4 fdb5 	bl	800155e <_close>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_close_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_close_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	24004d14 	.word	0x24004d14

0800ca04 <_fstat_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d07      	ldr	r5, [pc, #28]	; (800ca24 <_fstat_r+0x20>)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	4611      	mov	r1, r2
 800ca10:	602b      	str	r3, [r5, #0]
 800ca12:	f7f4 fdb0 	bl	8001576 <_fstat>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d102      	bne.n	800ca20 <_fstat_r+0x1c>
 800ca1a:	682b      	ldr	r3, [r5, #0]
 800ca1c:	b103      	cbz	r3, 800ca20 <_fstat_r+0x1c>
 800ca1e:	6023      	str	r3, [r4, #0]
 800ca20:	bd38      	pop	{r3, r4, r5, pc}
 800ca22:	bf00      	nop
 800ca24:	24004d14 	.word	0x24004d14

0800ca28 <_isatty_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d06      	ldr	r5, [pc, #24]	; (800ca44 <_isatty_r+0x1c>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	602b      	str	r3, [r5, #0]
 800ca34:	f7f4 fdaf 	bl	8001596 <_isatty>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	d102      	bne.n	800ca42 <_isatty_r+0x1a>
 800ca3c:	682b      	ldr	r3, [r5, #0]
 800ca3e:	b103      	cbz	r3, 800ca42 <_isatty_r+0x1a>
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	24004d14 	.word	0x24004d14

0800ca48 <_lseek_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d07      	ldr	r5, [pc, #28]	; (800ca68 <_lseek_r+0x20>)
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	4608      	mov	r0, r1
 800ca50:	4611      	mov	r1, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	602a      	str	r2, [r5, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	f7f4 fda8 	bl	80015ac <_lseek>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_lseek_r+0x1e>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_lseek_r+0x1e>
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	24004d14 	.word	0x24004d14

0800ca6c <__malloc_lock>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	; (800ca74 <__malloc_lock+0x8>)
 800ca6e:	f7ff be0b 	b.w	800c688 <__retarget_lock_acquire_recursive>
 800ca72:	bf00      	nop
 800ca74:	24004d08 	.word	0x24004d08

0800ca78 <__malloc_unlock>:
 800ca78:	4801      	ldr	r0, [pc, #4]	; (800ca80 <__malloc_unlock+0x8>)
 800ca7a:	f7ff be06 	b.w	800c68a <__retarget_lock_release_recursive>
 800ca7e:	bf00      	nop
 800ca80:	24004d08 	.word	0x24004d08

0800ca84 <_read_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d07      	ldr	r5, [pc, #28]	; (800caa4 <_read_r+0x20>)
 800ca88:	4604      	mov	r4, r0
 800ca8a:	4608      	mov	r0, r1
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	602a      	str	r2, [r5, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	f7f4 fd2a 	bl	80014ec <_read>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_read_r+0x1e>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_read_r+0x1e>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	24004d14 	.word	0x24004d14

0800caa8 <_init>:
 800caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caaa:	bf00      	nop
 800caac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caae:	bc08      	pop	{r3}
 800cab0:	469e      	mov	lr, r3
 800cab2:	4770      	bx	lr

0800cab4 <_fini>:
 800cab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab6:	bf00      	nop
 800cab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caba:	bc08      	pop	{r3}
 800cabc:	469e      	mov	lr, r3
 800cabe:	4770      	bx	lr
