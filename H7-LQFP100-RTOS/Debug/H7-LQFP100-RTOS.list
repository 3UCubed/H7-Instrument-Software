
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fe0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08017280  08017280  00027280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801774c  0801774c  0002774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017754  08017754  00027754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017758  08017758  00027758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  0801775c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000120  08017860  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005610  08017860  00035610  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039ac5  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006ef8  00000000  00000000  00069bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002828  00000000  00000000  00070af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002550  00000000  00000000  00073318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044754  00000000  00000000  00075868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003bdab  00000000  00000000  000b9fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b22  00000000  00000000  000f5d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028a889  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afb8  00000000  00000000  0028a8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017268 	.word	0x08017268

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017268 	.word	0x08017268

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 fffb 	bl	8004664 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fd22 	bl	80020bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f916 	bl	80058b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd15 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fa59 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fcfc 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fa4b 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fcee 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 fa3d 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fce0 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 fa2f 	bl	8004b6c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fcd2 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 fa20 	bl	8004b6c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fcc3 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 fa11 	bl	8004b6c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fcb4 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 fa02 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fca5 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f9f3 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fc96 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f9e4 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fc87 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f9d5 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fc78 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f9c6 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fc69 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fee3 	bl	8004664 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc0a 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f94e 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fbf1 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f940 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fbe3 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f932 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fbd5 	bl	80020bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f924 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fbc7 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fb66 	bl	80090cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fb5a 	bl	80090cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fb4e 	bl	80090cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fce1 	bl	800643c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb1c 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb9c 	bl	800421c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fb96 	bl	800421c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fc81 	bl	800643c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fabc 	bl	80020bc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fe65 	bl	801685c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 f849 	bl	8005c30 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fa8a 	bl	80020bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fa64 	bl	8006090 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fa75 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 fa39 	bl	80090cc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fbcc 	bl	800643c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa07 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 ff8e 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ffa5 	bl	8005c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 ff65 	bl	8005be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 ff7c 	bl	8005c14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 ff5d 	bl	8005be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 ff74 	bl	8005c14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 ff55 	bl	8005be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 ff6c 	bl	8005c14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 ff4d 	bl	8005be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 ff64 	bl	8005c14 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000834 	.word	0x24000834

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f012 fa03 	bl	8013188 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f012 f9fb 	bl	8013188 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f012 f9f3 	bl	8013188 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f012 f9eb 	bl	8013188 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f012 f9e3 	bl	8013188 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f012 f9db 	bl	8013188 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f012 f9d3 	bl	8013188 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f012 f9cb 	bl	8013188 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f012 f9c3 	bl	8013188 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f012 f9bb 	bl	8013188 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	080174f8 	.word	0x080174f8
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000380 	.word	0x24000380
 8000e28:	0801751c 	.word	0x0801751c
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000384 	.word	0x24000384
 8000e34:	08017540 	.word	0x08017540
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000388 	.word	0x24000388
 8000e40:	08017564 	.word	0x08017564
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	2400038c 	.word	0x2400038c
 8000e4c:	08017588 	.word	0x08017588
 8000e50:	08000f85 	.word	0x08000f85
 8000e54:	24000390 	.word	0x24000390
 8000e58:	080175ac 	.word	0x080175ac
 8000e5c:	08000ffd 	.word	0x08000ffd
 8000e60:	24000394 	.word	0x24000394
 8000e64:	080175d0 	.word	0x080175d0
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	24000398 	.word	0x24000398
 8000e70:	080175f4 	.word	0x080175f4
 8000e74:	08001161 	.word	0x08001161
 8000e78:	2400039c 	.word	0x2400039c
 8000e7c:	08017618 	.word	0x08017618
 8000e80:	08001171 	.word	0x08001171
 8000e84:	240003a0 	.word	0x240003a0
 8000e88:	0801763c 	.word	0x0801763c
 8000e8c:	08001181 	.word	0x08001181
 8000e90:	240003a4 	.word	0x240003a4

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f012 fabe 	bl	8013428 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 f92c 	bl	8002108 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f012 f9fc 	bl	80132ac <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007e4 	.word	0x240007e4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f012 faaa 	bl	8013428 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 f992 	bl	80021fc <create_erpa_packet>

		osThreadYield();
 8000ed8:	f012 f9e8 	bl	80132ac <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007e4 	.word	0x240007e4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HK_init+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f012 fa96 	bl	8013428 <osEventFlagsWait>

		create_hk_packet();
 8000efc:	f001 fa20 	bl	8002340 <create_hk_packet>

		osThreadYield();
 8000f00:	f012 f9d4 	bl	80132ac <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f04:	e7f2      	b.n	8000eec <HK_init+0x8>
 8000f06:	bf00      	nop
 8000f08:	240007e4 	.word	0x240007e4

08000f0c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <AUTOINIT_init+0x70>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f012 fa82 	bl	8013428 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f008 fa8c 	bl	800945c <HAL_GPIO_WritePin>
			osDelay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f012 f9d1 	bl	80132ec <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dde9      	ble.n	8000f2a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f56:	2308      	movs	r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e008      	b.n	8000f6e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fff8 	bl	8003f58 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	ddf3      	ble.n	8000f5c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f74:	f012 f99a 	bl	80132ac <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f78:	e7cc      	b.n	8000f14 <AUTOINIT_init+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	240007e8 	.word	0x240007e8
 8000f80:	08017660 	.word	0x08017660

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <AUTODEINIT_init+0x70>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	f012 fa46 	bl	8013428 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f9c:	230d      	movs	r3, #13
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e008      	b.n	8000fb4 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 ffd5 	bl	8003f58 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dcf3      	bgt.n	8000fa2 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e012      	b.n	8000fe6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 fa41 	bl	800945c <HAL_GPIO_WritePin>
			osDelay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f012 f986 	bl	80132ec <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dae9      	bge.n	8000fc0 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fec:	f012 f95e 	bl	80132ac <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ff0:	e7cc      	b.n	8000f8c <AUTODEINIT_init+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	240007e8 	.word	0x240007e8
 8000ff8:	08017660 	.word	0x08017660

08000ffc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <UART_TX_init+0xa8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	f012 fb3f 	bl	801369c <osMessageQueueGet>
 800101e:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11c      	bne.n	8001060 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d215      	bcs.n	8001060 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <UART_TX_init+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	89ba      	ldrh	r2, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f015 fbfe 	bl	8016840 <memcpy>
					free(msg.array);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fbf2 	bl	8016830 <free>
					total_size += msg.size;
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 32b1 	movw	r2, #945	; 0x3b1
 800105c:	4293      	cmp	r3, r2
 800105e:	d808      	bhi.n	8001072 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <UART_TX_init+0xa8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f012 fb77 	bl	8013758 <osMessageQueueGetCount>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1cd      	bne.n	800100c <UART_TX_init+0x10>
 8001070:	e000      	b.n	8001074 <UART_TX_init+0x78>
						break;
 8001072:	bf00      	nop

		if (total_size > 0) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <UART_TX_init+0xac>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <UART_TX_init+0xb0>)
 8001084:	f00f fade 	bl	8010644 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001088:	e001      	b.n	800108e <UART_TX_init+0x92>
				osThreadYield();
 800108a:	f012 f90f 	bl	80132ac <osThreadYield>
			while (tx_flag == 0) {
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <UART_TX_init+0xb4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UART_TX_init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800109e:	f012 f905 	bl	80132ac <osThreadYield>
		total_size = 0;
 80010a2:	e7b1      	b.n	8001008 <UART_TX_init+0xc>
 80010a4:	240007ec 	.word	0x240007ec
 80010a8:	240003a8 	.word	0x240003a8
 80010ac:	24000aec 	.word	0x24000aec
 80010b0:	24000088 	.word	0x24000088

080010b4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <Voltage_Monitor_init+0xa8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	f012 f9ae 	bl	8013428 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 80010cc:	f002 ff6e 	bl	8003fac <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 80010d0:	f002 ff62 	bl	8003f98 <get_rail_monitor>
 80010d4:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e03b      	b.n	8001154 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02d      	beq.n	800114e <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	8898      	ldrh	r0, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	4619      	mov	r1, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	f002 ffcc 	bl	80040c8 <in_range>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10b      	bne.n	800114e <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	785a      	ldrb	r2, [r3, #1]
 8001148:	3201      	adds	r2, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b11      	cmp	r3, #17
 8001158:	ddc0      	ble.n	80010dc <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800115a:	e7af      	b.n	80010bc <Voltage_Monitor_init+0x8>
 800115c:	240007e8 	.word	0x240007e8

08001160 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f012 f8bf 	bl	80132ec <osDelay>
 800116e:	e7fb      	b.n	8001168 <STOP_init+0x8>

08001170 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f012 f8b7 	bl	80132ec <osDelay>
 800117e:	e7fb      	b.n	8001178 <Science_init+0x8>

08001180 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f012 f8af 	bl	80132ec <osDelay>
 800118e:	e7fb      	b.n	8001188 <Idle_init+0x8>

08001190 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a32      	ldr	r2, [pc, #200]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <MX_GPIO_Init+0xec>)
 8001226:	f008 f919 	bl	800945c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2164      	movs	r1, #100	; 0x64
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_GPIO_Init+0xf0>)
 8001230:	f008 f914 	bl	800945c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001234:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001238:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_GPIO_Init+0xec>)
 800124e:	f007 ff3d 	bl	80090cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125a:	2302      	movs	r3, #2
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_GPIO_Init+0xf0>)
 800126a:	f007 ff2f 	bl	80090cc <HAL_GPIO_Init>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	58024400 	.word	0x58024400
 800127c:	58020800 	.word	0x58020800
 8001280:	58020400 	.word	0x58020400

08001284 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_I2C1_Init+0x78>)
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <MX_I2C1_Init+0x7c>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_I2C1_Init+0x78>)
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_I2C1_Init+0x80>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_I2C1_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_I2C1_Init+0x78>)
 800129c:	2201      	movs	r2, #1
 800129e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c0:	f008 f8e6 	bl	8009490 <HAL_I2C_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 fef7 	bl	80020bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <MX_I2C1_Init+0x78>)
 80012d2:	f008 fe2d 	bl	8009f30 <HAL_I2CEx_ConfigAnalogFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f000 feee 	bl	80020bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_I2C1_Init+0x78>)
 80012e4:	f008 fe6f 	bl	8009fc6 <HAL_I2CEx_ConfigDigitalFilter>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fee5 	bl	80020bc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f008 feb4 	bl	800a060 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24000790 	.word	0x24000790
 8001300:	40005400 	.word	0x40005400
 8001304:	0020081f 	.word	0x0020081f

08001308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ba      	sub	sp, #232	; 0xe8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22c0      	movs	r2, #192	; 0xc0
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f015 fa97 	bl	801685c <memset>
  if(i2cHandle->Instance==I2C1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d146      	bne.n	80013c6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001338:	f04f 0208 	mov.w	r2, #8
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f009 ff0c 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800135a:	f000 feaf 	bl	80020bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800137c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001396:	2304      	movs	r3, #4
 8001398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_I2C_MspInit+0xd0>)
 80013a4:	f007 fe92 	bl	80090cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	37e8      	adds	r7, #232	; 0xe8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40005400 	.word	0x40005400
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020400 	.word	0x58020400

080013dc <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d106      	bne.n	80013fa <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 ffd4 	bl	80133a0 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80013f8:	e023      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d106      	bne.n	8001410 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f011 ffc9 	bl	80133a0 <osEventFlagsSet>
}
 800140e:	e018      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d111      	bne.n	800143c <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f011 ffbe 	bl	80133a0 <osEventFlagsSet>
		if (HK_ENABLED){
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f011 ffb3 	bl	80133a0 <osEventFlagsSet>
}
 800143a:	e002      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800143e:	f015 fb63 	bl	8016b08 <puts>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000a08 	.word	0x24000a08
 8001450:	240007e4 	.word	0x240007e4
 8001454:	24000a54 	.word	0x24000a54
 8001458:	24000aa0 	.word	0x24000aa0
 800145c:	240007e8 	.word	0x240007e8
 8001460:	24000830 	.word	0x24000830
 8001464:	08017308 	.word	0x08017308

08001468 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	49f2      	ldr	r1, [pc, #968]	; (800183c <HAL_UART_RxCpltCallback+0x3d4>)
 8001474:	48f2      	ldr	r0, [pc, #968]	; (8001840 <HAL_UART_RxCpltCallback+0x3d8>)
 8001476:	f00f f899 	bl	80105ac <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800147a:	4bf0      	ldr	r3, [pc, #960]	; (800183c <HAL_UART_RxCpltCallback+0x3d4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2be0      	cmp	r3, #224	; 0xe0
 8001484:	f200 840b 	bhi.w	8001c9e <HAL_UART_RxCpltCallback+0x836>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_UART_RxCpltCallback+0x28>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	08001829 	.word	0x08001829
 8001494:	0800186d 	.word	0x0800186d
 8001498:	080018dd 	.word	0x080018dd
 800149c:	08001917 	.word	0x08001917
 80014a0:	0800194f 	.word	0x0800194f
 80014a4:	08001989 	.word	0x08001989
 80014a8:	080019c5 	.word	0x080019c5
 80014ac:	08001a01 	.word	0x08001a01
 80014b0:	08001a3b 	.word	0x08001a3b
 80014b4:	08001a6f 	.word	0x08001a6f
 80014b8:	08001a9b 	.word	0x08001a9b
 80014bc:	08001ac7 	.word	0x08001ac7
 80014c0:	08001af1 	.word	0x08001af1
 80014c4:	08001bcd 	.word	0x08001bcd
 80014c8:	08001c35 	.word	0x08001c35
 80014cc:	08001c5d 	.word	0x08001c5d
 80014d0:	08001815 	.word	0x08001815
 80014d4:	08001851 	.word	0x08001851
 80014d8:	080018bf 	.word	0x080018bf
 80014dc:	080018fb 	.word	0x080018fb
 80014e0:	08001933 	.word	0x08001933
 80014e4:	0800196b 	.word	0x0800196b
 80014e8:	080019a7 	.word	0x080019a7
 80014ec:	080019e3 	.word	0x080019e3
 80014f0:	08001a1f 	.word	0x08001a1f
 80014f4:	08001a57 	.word	0x08001a57
 80014f8:	08001a7f 	.word	0x08001a7f
 80014fc:	08001aab 	.word	0x08001aab
 8001500:	08001ad7 	.word	0x08001ad7
 8001504:	08001aff 	.word	0x08001aff
 8001508:	08001c0d 	.word	0x08001c0d
 800150c:	08001c9f 	.word	0x08001c9f
 8001510:	08001c9f 	.word	0x08001c9f
 8001514:	08001c9f 	.word	0x08001c9f
 8001518:	08001c9f 	.word	0x08001c9f
 800151c:	08001c9f 	.word	0x08001c9f
 8001520:	08001c9f 	.word	0x08001c9f
 8001524:	08001c9f 	.word	0x08001c9f
 8001528:	08001c9f 	.word	0x08001c9f
 800152c:	08001c9f 	.word	0x08001c9f
 8001530:	08001c9f 	.word	0x08001c9f
 8001534:	08001c9f 	.word	0x08001c9f
 8001538:	08001c9f 	.word	0x08001c9f
 800153c:	08001c9f 	.word	0x08001c9f
 8001540:	08001c9f 	.word	0x08001c9f
 8001544:	08001c9f 	.word	0x08001c9f
 8001548:	08001c9f 	.word	0x08001c9f
 800154c:	08001c9f 	.word	0x08001c9f
 8001550:	08001c9f 	.word	0x08001c9f
 8001554:	08001c9f 	.word	0x08001c9f
 8001558:	08001c9f 	.word	0x08001c9f
 800155c:	08001c9f 	.word	0x08001c9f
 8001560:	08001c9f 	.word	0x08001c9f
 8001564:	08001c9f 	.word	0x08001c9f
 8001568:	08001c9f 	.word	0x08001c9f
 800156c:	08001c9f 	.word	0x08001c9f
 8001570:	08001c9f 	.word	0x08001c9f
 8001574:	08001c9f 	.word	0x08001c9f
 8001578:	08001c9f 	.word	0x08001c9f
 800157c:	08001c9f 	.word	0x08001c9f
 8001580:	08001c9f 	.word	0x08001c9f
 8001584:	08001c9f 	.word	0x08001c9f
 8001588:	08001c9f 	.word	0x08001c9f
 800158c:	08001c9f 	.word	0x08001c9f
 8001590:	08001c9f 	.word	0x08001c9f
 8001594:	08001c9f 	.word	0x08001c9f
 8001598:	08001c9f 	.word	0x08001c9f
 800159c:	08001c9f 	.word	0x08001c9f
 80015a0:	08001c9f 	.word	0x08001c9f
 80015a4:	08001c9f 	.word	0x08001c9f
 80015a8:	08001c9f 	.word	0x08001c9f
 80015ac:	08001c9f 	.word	0x08001c9f
 80015b0:	08001c9f 	.word	0x08001c9f
 80015b4:	08001c9f 	.word	0x08001c9f
 80015b8:	08001c9f 	.word	0x08001c9f
 80015bc:	08001c9f 	.word	0x08001c9f
 80015c0:	08001c9f 	.word	0x08001c9f
 80015c4:	08001c9f 	.word	0x08001c9f
 80015c8:	08001c9f 	.word	0x08001c9f
 80015cc:	08001c9f 	.word	0x08001c9f
 80015d0:	08001c9f 	.word	0x08001c9f
 80015d4:	08001c9f 	.word	0x08001c9f
 80015d8:	08001c9f 	.word	0x08001c9f
 80015dc:	08001c9f 	.word	0x08001c9f
 80015e0:	08001c9f 	.word	0x08001c9f
 80015e4:	08001c9f 	.word	0x08001c9f
 80015e8:	08001c9f 	.word	0x08001c9f
 80015ec:	08001c9f 	.word	0x08001c9f
 80015f0:	08001c9f 	.word	0x08001c9f
 80015f4:	08001c9f 	.word	0x08001c9f
 80015f8:	08001c9f 	.word	0x08001c9f
 80015fc:	08001c9f 	.word	0x08001c9f
 8001600:	08001c9f 	.word	0x08001c9f
 8001604:	08001c9f 	.word	0x08001c9f
 8001608:	08001c9f 	.word	0x08001c9f
 800160c:	08001c9f 	.word	0x08001c9f
 8001610:	08001c9f 	.word	0x08001c9f
 8001614:	08001c9f 	.word	0x08001c9f
 8001618:	08001c9f 	.word	0x08001c9f
 800161c:	08001c9f 	.word	0x08001c9f
 8001620:	08001c9f 	.word	0x08001c9f
 8001624:	08001c9f 	.word	0x08001c9f
 8001628:	08001c9f 	.word	0x08001c9f
 800162c:	08001c9f 	.word	0x08001c9f
 8001630:	08001c9f 	.word	0x08001c9f
 8001634:	08001c9f 	.word	0x08001c9f
 8001638:	08001c9f 	.word	0x08001c9f
 800163c:	08001c9f 	.word	0x08001c9f
 8001640:	08001c9f 	.word	0x08001c9f
 8001644:	08001c9f 	.word	0x08001c9f
 8001648:	08001c9f 	.word	0x08001c9f
 800164c:	08001c9f 	.word	0x08001c9f
 8001650:	08001c9f 	.word	0x08001c9f
 8001654:	08001c9f 	.word	0x08001c9f
 8001658:	08001c9f 	.word	0x08001c9f
 800165c:	08001c9f 	.word	0x08001c9f
 8001660:	08001c9f 	.word	0x08001c9f
 8001664:	08001c9f 	.word	0x08001c9f
 8001668:	08001c9f 	.word	0x08001c9f
 800166c:	08001c9f 	.word	0x08001c9f
 8001670:	08001c9f 	.word	0x08001c9f
 8001674:	08001c9f 	.word	0x08001c9f
 8001678:	08001c9f 	.word	0x08001c9f
 800167c:	08001c9f 	.word	0x08001c9f
 8001680:	08001c9f 	.word	0x08001c9f
 8001684:	08001c9f 	.word	0x08001c9f
 8001688:	08001c9f 	.word	0x08001c9f
 800168c:	08001c9f 	.word	0x08001c9f
 8001690:	08001c9f 	.word	0x08001c9f
 8001694:	08001c9f 	.word	0x08001c9f
 8001698:	08001c9f 	.word	0x08001c9f
 800169c:	08001c9f 	.word	0x08001c9f
 80016a0:	08001c9f 	.word	0x08001c9f
 80016a4:	08001c9f 	.word	0x08001c9f
 80016a8:	08001c9f 	.word	0x08001c9f
 80016ac:	08001c9f 	.word	0x08001c9f
 80016b0:	08001c9f 	.word	0x08001c9f
 80016b4:	08001c9f 	.word	0x08001c9f
 80016b8:	08001c9f 	.word	0x08001c9f
 80016bc:	08001c9f 	.word	0x08001c9f
 80016c0:	08001c9f 	.word	0x08001c9f
 80016c4:	08001c9f 	.word	0x08001c9f
 80016c8:	08001c9f 	.word	0x08001c9f
 80016cc:	08001c9f 	.word	0x08001c9f
 80016d0:	08001c9f 	.word	0x08001c9f
 80016d4:	08001c9f 	.word	0x08001c9f
 80016d8:	08001c9f 	.word	0x08001c9f
 80016dc:	08001c9f 	.word	0x08001c9f
 80016e0:	08001c9f 	.word	0x08001c9f
 80016e4:	08001c9f 	.word	0x08001c9f
 80016e8:	08001c9f 	.word	0x08001c9f
 80016ec:	08001c9f 	.word	0x08001c9f
 80016f0:	08001c9f 	.word	0x08001c9f
 80016f4:	08001c9f 	.word	0x08001c9f
 80016f8:	08001c9f 	.word	0x08001c9f
 80016fc:	08001c9f 	.word	0x08001c9f
 8001700:	08001c9f 	.word	0x08001c9f
 8001704:	08001c9f 	.word	0x08001c9f
 8001708:	08001c9f 	.word	0x08001c9f
 800170c:	08001c9f 	.word	0x08001c9f
 8001710:	08001c9f 	.word	0x08001c9f
 8001714:	08001c9f 	.word	0x08001c9f
 8001718:	08001c9f 	.word	0x08001c9f
 800171c:	08001c9f 	.word	0x08001c9f
 8001720:	08001c9f 	.word	0x08001c9f
 8001724:	08001c9f 	.word	0x08001c9f
 8001728:	08001c9f 	.word	0x08001c9f
 800172c:	08001c9f 	.word	0x08001c9f
 8001730:	08001c9f 	.word	0x08001c9f
 8001734:	08001c9f 	.word	0x08001c9f
 8001738:	08001c9f 	.word	0x08001c9f
 800173c:	08001c9f 	.word	0x08001c9f
 8001740:	08001c9f 	.word	0x08001c9f
 8001744:	08001c9f 	.word	0x08001c9f
 8001748:	08001c9f 	.word	0x08001c9f
 800174c:	08001c99 	.word	0x08001c99
 8001750:	08001c9f 	.word	0x08001c9f
 8001754:	08001c9f 	.word	0x08001c9f
 8001758:	08001c9f 	.word	0x08001c9f
 800175c:	08001c9f 	.word	0x08001c9f
 8001760:	08001c9f 	.word	0x08001c9f
 8001764:	08001c9f 	.word	0x08001c9f
 8001768:	08001c9f 	.word	0x08001c9f
 800176c:	08001c9f 	.word	0x08001c9f
 8001770:	08001c9f 	.word	0x08001c9f
 8001774:	08001c9f 	.word	0x08001c9f
 8001778:	08001c9f 	.word	0x08001c9f
 800177c:	08001c9f 	.word	0x08001c9f
 8001780:	08001c9f 	.word	0x08001c9f
 8001784:	08001c9f 	.word	0x08001c9f
 8001788:	08001c9f 	.word	0x08001c9f
 800178c:	08001ca7 	.word	0x08001ca7
 8001790:	08001c9f 	.word	0x08001c9f
 8001794:	08001c9f 	.word	0x08001c9f
 8001798:	08001c9f 	.word	0x08001c9f
 800179c:	08001c9f 	.word	0x08001c9f
 80017a0:	08001c9f 	.word	0x08001c9f
 80017a4:	08001c9f 	.word	0x08001c9f
 80017a8:	08001c9f 	.word	0x08001c9f
 80017ac:	08001c9f 	.word	0x08001c9f
 80017b0:	08001c9f 	.word	0x08001c9f
 80017b4:	08001c9f 	.word	0x08001c9f
 80017b8:	08001c9f 	.word	0x08001c9f
 80017bc:	08001c9f 	.word	0x08001c9f
 80017c0:	08001c9f 	.word	0x08001c9f
 80017c4:	08001c9f 	.word	0x08001c9f
 80017c8:	08001c9f 	.word	0x08001c9f
 80017cc:	08001ca7 	.word	0x08001ca7
 80017d0:	08001c85 	.word	0x08001c85
 80017d4:	08001c9f 	.word	0x08001c9f
 80017d8:	08001c9f 	.word	0x08001c9f
 80017dc:	08001c9f 	.word	0x08001c9f
 80017e0:	08001c9f 	.word	0x08001c9f
 80017e4:	08001c9f 	.word	0x08001c9f
 80017e8:	08001c9f 	.word	0x08001c9f
 80017ec:	08001c9f 	.word	0x08001c9f
 80017f0:	08001c9f 	.word	0x08001c9f
 80017f4:	08001c9f 	.word	0x08001c9f
 80017f8:	08001c9f 	.word	0x08001c9f
 80017fc:	08001c9f 	.word	0x08001c9f
 8001800:	08001c9f 	.word	0x08001c9f
 8001804:	08001c9f 	.word	0x08001c9f
 8001808:	08001c9f 	.word	0x08001c9f
 800180c:	08001c9f 	.word	0x08001c9f
 8001810:	08001c71 	.word	0x08001c71
	case 0x10: {
		printf("SDN1 ON\n");
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_RxCpltCallback+0x3dc>)
 8001816:	f015 f977 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_UART_RxCpltCallback+0x3e0>)
 800181c:	2104      	movs	r1, #4
 800181e:	2201      	movs	r2, #1
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fe1b 	bl	800945c <HAL_GPIO_WritePin>
		break;
 8001826:	e247      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <HAL_UART_RxCpltCallback+0x3e4>)
 800182a:	f015 f96d 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_UART_RxCpltCallback+0x3e0>)
 8001830:	2104      	movs	r1, #4
 8001832:	2200      	movs	r2, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f007 fe11 	bl	800945c <HAL_GPIO_WritePin>
		break;
 800183a:	e23d      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
 800183c:	240007f0 	.word	0x240007f0
 8001840:	24000aec 	.word	0x24000aec
 8001844:	08017320 	.word	0x08017320
 8001848:	58020400 	.word	0x58020400
 800184c:	08017328 	.word	0x08017328
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001850:	48bb      	ldr	r0, [pc, #748]	; (8001b40 <HAL_UART_RxCpltCallback+0x6d8>)
 8001852:	f015 f959 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001856:	4bbb      	ldr	r3, [pc, #748]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001858:	2120      	movs	r1, #32
 800185a:	2201      	movs	r2, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fdfd 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001862:	2101      	movs	r1, #1
 8001864:	2008      	movs	r0, #8
 8001866:	f002 fb77 	bl	8003f58 <set_rail_monitor_enable>
		break;
 800186a:	e225      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 800186c:	48b6      	ldr	r0, [pc, #728]	; (8001b48 <HAL_UART_RxCpltCallback+0x6e0>)
 800186e:	f015 f94b 	bl	8016b08 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001872:	2308      	movs	r3, #8
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e00f      	b.n	8001898 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001878:	4ab4      	ldr	r2, [pc, #720]	; (8001b4c <HAL_UART_RxCpltCallback+0x6e4>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001880:	4ab2      	ldr	r2, [pc, #712]	; (8001b4c <HAL_UART_RxCpltCallback+0x6e4>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	f007 fde5 	bl	800945c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3b01      	subs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dcec      	bgt.n	8001878 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800189e:	2310      	movs	r3, #16
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e008      	b.n	80018b6 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fb54 	bl	8003f58 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b07      	cmp	r3, #7
 80018ba:	dcf3      	bgt.n	80018a4 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80018bc:	e1fc      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80018be:	48a4      	ldr	r0, [pc, #656]	; (8001b50 <HAL_UART_RxCpltCallback+0x6e8>)
 80018c0:	f015 f922 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80018c4:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ca:	2201      	movs	r2, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fdc5 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80018d2:	2101      	movs	r1, #1
 80018d4:	2009      	movs	r0, #9
 80018d6:	f002 fb3f 	bl	8003f58 <set_rail_monitor_enable>

		break;
 80018da:	e1ed      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80018dc:	489e      	ldr	r0, [pc, #632]	; (8001b58 <HAL_UART_RxCpltCallback+0x6f0>)
 80018de:	f015 f913 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80018e2:	4b9c      	ldr	r3, [pc, #624]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80018e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e8:	2200      	movs	r2, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 fdb6 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2009      	movs	r0, #9
 80018f4:	f002 fb30 	bl	8003f58 <set_rail_monitor_enable>
		break;
 80018f8:	e1de      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80018fa:	4898      	ldr	r0, [pc, #608]	; (8001b5c <HAL_UART_RxCpltCallback+0x6f4>)
 80018fc:	f015 f904 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001900:	4b94      	ldr	r3, [pc, #592]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	2201      	movs	r2, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fda8 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 800190c:	2101      	movs	r1, #1
 800190e:	200a      	movs	r0, #10
 8001910:	f002 fb22 	bl	8003f58 <set_rail_monitor_enable>

		break;
 8001914:	e1d0      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001916:	4892      	ldr	r0, [pc, #584]	; (8001b60 <HAL_UART_RxCpltCallback+0x6f8>)
 8001918:	f015 f8f6 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800191c:	4b8d      	ldr	r3, [pc, #564]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	2200      	movs	r2, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 fd9a 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	200a      	movs	r0, #10
 800192c:	f002 fb14 	bl	8003f58 <set_rail_monitor_enable>
		break;
 8001930:	e1c2      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001932:	488c      	ldr	r0, [pc, #560]	; (8001b64 <HAL_UART_RxCpltCallback+0x6fc>)
 8001934:	f015 f8e8 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001938:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	2201      	movs	r2, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f007 fd8c 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001944:	2101      	movs	r1, #1
 8001946:	200b      	movs	r0, #11
 8001948:	f002 fb06 	bl	8003f58 <set_rail_monitor_enable>

		break;
 800194c:	e1b4      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800194e:	4886      	ldr	r0, [pc, #536]	; (8001b68 <HAL_UART_RxCpltCallback+0x700>)
 8001950:	f015 f8da 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001954:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	2200      	movs	r2, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fd7e 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	200b      	movs	r0, #11
 8001964:	f002 faf8 	bl	8003f58 <set_rail_monitor_enable>
		break;
 8001968:	e1a6      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800196a:	4880      	ldr	r0, [pc, #512]	; (8001b6c <HAL_UART_RxCpltCallback+0x704>)
 800196c:	f015 f8cc 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001970:	4b78      	ldr	r3, [pc, #480]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	2201      	movs	r2, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f007 fd6f 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	200c      	movs	r0, #12
 8001982:	f002 fae9 	bl	8003f58 <set_rail_monitor_enable>

		break;
 8001986:	e197      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001988:	4879      	ldr	r0, [pc, #484]	; (8001b70 <HAL_UART_RxCpltCallback+0x708>)
 800198a:	f015 f8bd 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800198e:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001994:	2200      	movs	r2, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 fd60 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 800199c:	2100      	movs	r1, #0
 800199e:	200c      	movs	r0, #12
 80019a0:	f002 fada 	bl	8003f58 <set_rail_monitor_enable>
		break;
 80019a4:	e188      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80019a6:	4873      	ldr	r0, [pc, #460]	; (8001b74 <HAL_UART_RxCpltCallback+0x70c>)
 80019a8:	f015 f8ae 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80019ac:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b2:	2201      	movs	r2, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fd51 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	200d      	movs	r0, #13
 80019be:	f002 facb 	bl	8003f58 <set_rail_monitor_enable>

		break;
 80019c2:	e179      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80019c4:	486c      	ldr	r0, [pc, #432]	; (8001b78 <HAL_UART_RxCpltCallback+0x710>)
 80019c6:	f015 f89f 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80019ca:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f007 fd42 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80019d8:	2100      	movs	r1, #0
 80019da:	200d      	movs	r0, #13
 80019dc:	f002 fabc 	bl	8003f58 <set_rail_monitor_enable>
		break;
 80019e0:	e16a      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80019e2:	4866      	ldr	r0, [pc, #408]	; (8001b7c <HAL_UART_RxCpltCallback+0x714>)
 80019e4:	f015 f890 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80019e8:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	2201      	movs	r2, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fd33 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	200f      	movs	r0, #15
 80019fa:	f002 faad 	bl	8003f58 <set_rail_monitor_enable>

		break;
 80019fe:	e15b      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001a00:	485f      	ldr	r0, [pc, #380]	; (8001b80 <HAL_UART_RxCpltCallback+0x718>)
 8001a02:	f015 f881 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 fd24 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	200f      	movs	r0, #15
 8001a18:	f002 fa9e 	bl	8003f58 <set_rail_monitor_enable>
		break;
 8001a1c:	e14c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001a1e:	4859      	ldr	r0, [pc, #356]	; (8001b84 <HAL_UART_RxCpltCallback+0x71c>)
 8001a20:	f015 f872 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fd16 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2010      	movs	r0, #16
 8001a34:	f002 fa90 	bl	8003f58 <set_rail_monitor_enable>

		break;
 8001a38:	e13e      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001a3a:	4853      	ldr	r0, [pc, #332]	; (8001b88 <HAL_UART_RxCpltCallback+0x720>)
 8001a3c:	f015 f864 	bl	8016b08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f007 fd08 	bl	800945c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f002 fa82 	bl	8003f58 <set_rail_monitor_enable>
		break;
 8001a54:	e130      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001a56:	484d      	ldr	r0, [pc, #308]	; (8001b8c <HAL_UART_RxCpltCallback+0x724>)
 8001a58:	f015 f856 	bl	8016b08 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2320      	movs	r3, #32
 8001a62:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_UART_RxCpltCallback+0x728>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	484b      	ldr	r0, [pc, #300]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001a68:	f004 f95c 	bl	8005d24 <HAL_DAC_Start_DMA>
		break;
 8001a6c:	e124      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001a6e:	484a      	ldr	r0, [pc, #296]	; (8001b98 <HAL_UART_RxCpltCallback+0x730>)
 8001a70:	f015 f84a 	bl	8016b08 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001a74:	2100      	movs	r1, #0
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001a78:	f004 fa14 	bl	8005ea4 <HAL_DAC_Stop_DMA>
		break;
 8001a7c:	e11c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001a7e:	4847      	ldr	r0, [pc, #284]	; (8001b9c <HAL_UART_RxCpltCallback+0x734>)
 8001a80:	f015 f842 	bl	8016b08 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001a84:	210c      	movs	r1, #12
 8001a86:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <HAL_UART_RxCpltCallback+0x738>)
 8001a88:	f00d f8b0 	bl	800ebec <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001a8c:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f011 fc84 	bl	80133a0 <osEventFlagsSet>
		break;
 8001a98:	e10e      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001a9a:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <HAL_UART_RxCpltCallback+0x740>)
 8001a9c:	f015 f834 	bl	8016b08 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001aa0:	210c      	movs	r1, #12
 8001aa2:	483f      	ldr	r0, [pc, #252]	; (8001ba0 <HAL_UART_RxCpltCallback+0x738>)
 8001aa4:	f00d f9fc 	bl	800eea0 <HAL_TIM_OC_Stop_IT>
		break;
 8001aa8:	e106      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001aaa:	4840      	ldr	r0, [pc, #256]	; (8001bac <HAL_UART_RxCpltCallback+0x744>)
 8001aac:	f015 f82c 	bl	8016b08 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	483f      	ldr	r0, [pc, #252]	; (8001bb0 <HAL_UART_RxCpltCallback+0x748>)
 8001ab4:	f00d f89a 	bl	800ebec <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f011 fc6e 	bl	80133a0 <osEventFlagsSet>
		break;
 8001ac4:	e0f8      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001ac6:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <HAL_UART_RxCpltCallback+0x74c>)
 8001ac8:	f015 f81e 	bl	8016b08 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4838      	ldr	r0, [pc, #224]	; (8001bb0 <HAL_UART_RxCpltCallback+0x748>)
 8001ad0:	f00d f9e6 	bl	800eea0 <HAL_TIM_OC_Stop_IT>
		break;
 8001ad4:	e0f0      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001ad6:	4838      	ldr	r0, [pc, #224]	; (8001bb8 <HAL_UART_RxCpltCallback+0x750>)
 8001ad8:	f015 f816 	bl	8016b08 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f011 fc5c 	bl	80133a0 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_UART_RxCpltCallback+0x754>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
		break;
 8001aee:	e0e3      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001af0:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <HAL_UART_RxCpltCallback+0x758>)
 8001af2:	f015 f809 	bl	8016b08 <puts>
		HK_ENABLED = 0;
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_UART_RxCpltCallback+0x754>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		break;
 8001afc:	e0dc      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001afe:	4831      	ldr	r0, [pc, #196]	; (8001bc4 <HAL_UART_RxCpltCallback+0x75c>)
 8001b00:	f015 f802 	bl	8016b08 <puts>
		if (step < 17) {
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	f200 80cd 	bhi.w	8001caa <HAL_UART_RxCpltCallback+0x842>
			step += 2;
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3302      	adds	r3, #2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b1c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_UART_RxCpltCallback+0x728>)
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4818      	ldr	r0, [pc, #96]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b32:	f004 fa5a 	bl	8005fea <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001b36:	2100      	movs	r1, #0
 8001b38:	4816      	ldr	r0, [pc, #88]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b3a:	f004 f89b 	bl	8005c74 <HAL_DAC_Start>
		}
		break;
 8001b3e:	e0b4      	b.n	8001caa <HAL_UART_RxCpltCallback+0x842>
 8001b40:	08017334 	.word	0x08017334
 8001b44:	58020400 	.word	0x58020400
 8001b48:	08017340 	.word	0x08017340
 8001b4c:	08017660 	.word	0x08017660
 8001b50:	0801734c 	.word	0x0801734c
 8001b54:	58020800 	.word	0x58020800
 8001b58:	08017358 	.word	0x08017358
 8001b5c:	08017368 	.word	0x08017368
 8001b60:	08017374 	.word	0x08017374
 8001b64:	08017380 	.word	0x08017380
 8001b68:	0801738c 	.word	0x0801738c
 8001b6c:	0801739c 	.word	0x0801739c
 8001b70:	080173a8 	.word	0x080173a8
 8001b74:	080173b4 	.word	0x080173b4
 8001b78:	080173c0 	.word	0x080173c0
 8001b7c:	080173cc 	.word	0x080173cc
 8001b80:	080173dc 	.word	0x080173dc
 8001b84:	080173ec 	.word	0x080173ec
 8001b88:	080173f8 	.word	0x080173f8
 8001b8c:	08017408 	.word	0x08017408
 8001b90:	24000000 	.word	0x24000000
 8001b94:	240002f4 	.word	0x240002f4
 8001b98:	08017418 	.word	0x08017418
 8001b9c:	08017428 	.word	0x08017428
 8001ba0:	24000a54 	.word	0x24000a54
 8001ba4:	240007e4 	.word	0x240007e4
 8001ba8:	08017430 	.word	0x08017430
 8001bac:	0801743c 	.word	0x0801743c
 8001bb0:	24000a08 	.word	0x24000a08
 8001bb4:	08017444 	.word	0x08017444
 8001bb8:	0801744c 	.word	0x0801744c
 8001bbc:	24000830 	.word	0x24000830
 8001bc0:	08017454 	.word	0x08017454
 8001bc4:	0801745c 	.word	0x0801745c
 8001bc8:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 8001bcc:	483c      	ldr	r0, [pc, #240]	; (8001cc0 <HAL_UART_RxCpltCallback+0x858>)
 8001bce:	f014 ff9b 	bl	8016b08 <puts>
		if (step > 3) {
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d968      	bls.n	8001cae <HAL_UART_RxCpltCallback+0x846>
			step -= 2;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b02      	subs	r3, #2
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001be8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_UART_RxCpltCallback+0x860>)
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4833      	ldr	r0, [pc, #204]	; (8001ccc <HAL_UART_RxCpltCallback+0x864>)
 8001bfe:	f004 f9f4 	bl	8005fea <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c02:	2100      	movs	r1, #0
 8001c04:	4831      	ldr	r0, [pc, #196]	; (8001ccc <HAL_UART_RxCpltCallback+0x864>)
 8001c06:	f004 f835 	bl	8005c74 <HAL_DAC_Start>
		}
		break;
 8001c0a:	e050      	b.n	8001cae <HAL_UART_RxCpltCallback+0x846>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001c0c:	4830      	ldr	r0, [pc, #192]	; (8001cd0 <HAL_UART_RxCpltCallback+0x868>)
 8001c0e:	f014 ff7b 	bl	8016b08 <puts>
		if (cadence <= 50000) {
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d849      	bhi.n	8001cb2 <HAL_UART_RxCpltCallback+0x84a>
			cadence *= 2;
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c26:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001c32:	e03e      	b.n	8001cb2 <HAL_UART_RxCpltCallback+0x84a>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001c34:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <HAL_UART_RxCpltCallback+0x870>)
 8001c36:	f014 ff67 	bl	8016b08 <puts>
		if (cadence >= 6250) {
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f641 0269 	movw	r2, #6249	; 0x1869
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d937      	bls.n	8001cb6 <HAL_UART_RxCpltCallback+0x84e>
			cadence /= 2;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c4e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001c5a:	e02c      	b.n	8001cb6 <HAL_UART_RxCpltCallback+0x84e>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001c5c:	481f      	ldr	r0, [pc, #124]	; (8001cdc <HAL_UART_RxCpltCallback+0x874>)
 8001c5e:	f014 ff53 	bl	8016b08 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2102      	movs	r1, #2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f011 fb99 	bl	80133a0 <osEventFlagsSet>
		break;
 8001c6e:	e023      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001c70:	481c      	ldr	r0, [pc, #112]	; (8001ce4 <HAL_UART_RxCpltCallback+0x87c>)
 8001c72:	f014 ff49 	bl	8016b08 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f011 fb8f 	bl	80133a0 <osEventFlagsSet>
		break;
 8001c82:	e019      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <HAL_UART_RxCpltCallback+0x880>)
 8001c86:	f014 ff3f 	bl	8016b08 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2108      	movs	r1, #8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f011 fb85 	bl	80133a0 <osEventFlagsSet>
		break;
 8001c96:	e00f      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xAF: {
		sync();
 8001c98:	f000 f964 	bl	8001f64 <sync>
		break;
 8001c9c:	e00c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001c9e:	4813      	ldr	r0, [pc, #76]	; (8001cec <HAL_UART_RxCpltCallback+0x884>)
 8001ca0:	f014 ff32 	bl	8016b08 <puts>
		break;
 8001ca4:	e008      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001ca6:	bf00      	nop
 8001ca8:	e006      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001caa:	bf00      	nop
 8001cac:	e004      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cb6:	bf00      	nop
	}
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08017464 	.word	0x08017464
 8001cc4:	24000080 	.word	0x24000080
 8001cc8:	24000000 	.word	0x24000000
 8001ccc:	240002f4 	.word	0x240002f4
 8001cd0:	08017470 	.word	0x08017470
 8001cd4:	24000084 	.word	0x24000084
 8001cd8:	0801747c 	.word	0x0801747c
 8001cdc:	08017488 	.word	0x08017488
 8001ce0:	240007e8 	.word	0x240007e8
 8001ce4:	08017498 	.word	0x08017498
 8001ce8:	080174a4 	.word	0x080174a4
 8001cec:	080174b0 	.word	0x080174b0

08001cf0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_UART_TxCpltCallback+0x1c>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24000088 	.word	0x24000088

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f002 fa1a 	bl	800414c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f826 	bl	8001d68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d1c:	f000 f8a4 	bl	8001e68 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d20:	f7ff fa36 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d24:	f7fe ffe0 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001d28:	f001 fbe0 	bl	80034ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d2c:	f001 fe68 	bl	8003a00 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d30:	f7ff faa8 	bl	8001284 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d34:	f000 ff32 	bl	8002b9c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001d38:	f001 fb62 	bl	8003400 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001d3c:	f001 fab2 	bl	80032a4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001d40:	f7fe fd72 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001d44:	f7fe fc4e 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001d48:	f7fe ff1a 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001d4c:	f000 fece 	bl	8002aec <MX_SPI1_Init>
  MX_RTC_Init();
 8001d50:	f000 fcb2 	bl	80026b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001d54:	f000 f8b8 	bl	8001ec8 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d58:	f011 f9cc 	bl	80130f4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d5c:	f7ff f80a 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d60:	f011 f9ec 	bl	801313c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001d64:	e7fe      	b.n	8001d64 <main+0x54>
	...

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09c      	sub	sp, #112	; 0x70
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	224c      	movs	r2, #76	; 0x4c
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f014 fd70 	bl	801685c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2220      	movs	r2, #32
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f014 fd6a 	bl	801685c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f008 f98d 	bl	800a0a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <SystemClock_Config+0xf8>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <SystemClock_Config+0xf8>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <SystemClock_Config+0xf8>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <SystemClock_Config+0xfc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <SystemClock_Config+0xfc>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <SystemClock_Config+0xfc>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dc4:	bf00      	nop
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <SystemClock_Config+0xfc>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd2:	d1f8      	bne.n	8001dc6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001dde:	2309      	movs	r3, #9
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dea:	2302      	movs	r3, #2
 8001dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dee:	2304      	movs	r3, #4
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001df2:	2320      	movs	r3, #32
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001df6:	2304      	movs	r3, #4
 8001df8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001e02:	2308      	movs	r3, #8
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 f982 	bl	800a11c <HAL_RCC_OscConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e1e:	f000 f94d 	bl	80020bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e22:	233f      	movs	r3, #63	; 0x3f
 8001e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2303      	movs	r3, #3
 8001e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f008 fdc2 	bl	800a9d0 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001e52:	f000 f933 	bl	80020bc <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3770      	adds	r7, #112	; 0x70
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58000400 	.word	0x58000400
 8001e64:	58024800 	.word	0x58024800

08001e68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b0      	sub	sp, #192	; 0xc0
 8001e6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6e:	463b      	mov	r3, r7
 8001e70:	22c0      	movs	r2, #192	; 0xc0
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f014 fcf1 	bl	801685c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001e86:	2304      	movs	r3, #4
 8001e88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001e8e:	2308      	movs	r3, #8
 8001e90:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001e92:	2304      	movs	r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f009 f95c 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001eba:	f000 f8ff 	bl	80020bc <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	37c0      	adds	r7, #192	; 0xc0
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f011 fa28 	bl	8013322 <osEventFlagsNew>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <system_setup+0x84>)
 8001ed6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <system_setup+0x84>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <system_setup+0x1a>
        while (1);
 8001ee0:	e7fe      	b.n	8001ee0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f011 fa1d 	bl	8013322 <osEventFlagsNew>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <system_setup+0x88>)
 8001eec:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <system_setup+0x88>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d100      	bne.n	8001ef8 <system_setup+0x30>
        while (1);
 8001ef6:	e7fe      	b.n	8001ef6 <system_setup+0x2e>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2108      	movs	r1, #8
 8001efc:	2080      	movs	r0, #128	; 0x80
 8001efe:	f011 faf9 	bl	80134f4 <osMessageQueueNew>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <system_setup+0x8c>)
 8001f06:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <system_setup+0x8c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <system_setup+0x4a>
		while (1);
 8001f10:	e7fe      	b.n	8001f10 <system_setup+0x48>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001f12:	f001 fe63 	bl	8003bdc <voltage_monitor_init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <system_setup+0x56>
		while (1);
 8001f1c:	e7fe      	b.n	8001f1c <system_setup+0x54>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <system_setup+0x90>)
 8001f22:	f00c fe63 	bl	800ebec <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001f30:	f000 fc54 	bl	80027dc <init_adc_dma>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <system_setup+0x74>
		while (1);
 8001f3a:	e7fe      	b.n	8001f3a <system_setup+0x72>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4907      	ldr	r1, [pc, #28]	; (8001f5c <system_setup+0x94>)
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <system_setup+0x98>)
 8001f42:	f00e fb33 	bl	80105ac <HAL_UART_Receive_IT>

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240007e4 	.word	0x240007e4
 8001f50:	240007e8 	.word	0x240007e8
 8001f54:	240007ec 	.word	0x240007ec
 8001f58:	24000aa0 	.word	0x24000aa0
 8001f5c:	240007f0 	.word	0x240007f0
 8001f60:	24000aec 	.word	0x24000aec

08001f64 <sync>:

void sync() {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	send_ACK();
 8001f6a:	f000 f821 	bl	8001fb0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001f6e:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <sync+0x44>)
 8001f70:	f00e fbe8 	bl	8010744 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	2209      	movs	r2, #9
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <sync+0x48>)
 8001f7a:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <sync+0x44>)
 8001f7c:	f00e fa4e 	bl	801041c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <sync+0x48>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2bff      	cmp	r3, #255	; 0xff
 8001f8a:	d1f3      	bne.n	8001f74 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <sync+0x48>)
 8001f8e:	f001 fc75 	bl	800387c <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f92:	2201      	movs	r2, #1
 8001f94:	4905      	ldr	r1, [pc, #20]	; (8001fac <sync+0x48>)
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <sync+0x44>)
 8001f98:	f00e fb08 	bl	80105ac <HAL_UART_Receive_IT>

	send_ACK();
 8001f9c:	f000 f808 	bl	8001fb0 <send_ACK>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	24000aec 	.word	0x24000aec
 8001fac:	240007f0 	.word	0x240007f0

08001fb0 <send_ACK>:

void send_ACK() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <send_ACK+0x1c>)
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4903      	ldr	r1, [pc, #12]	; (8001fcc <send_ACK+0x1c>)
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <send_ACK+0x20>)
 8001fc2:	f00e f99d 	bl	8010300 <HAL_UART_Transmit>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000838 	.word	0x24000838
 8001fd0:	24000aec 	.word	0x24000aec

08001fd4 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <get_current_step+0xc0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04a      	beq.n	8002080 <get_current_step+0xac>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff0:	da48      	bge.n	8002084 <get_current_step+0xb0>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d03f      	beq.n	800207c <get_current_step+0xa8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002002:	4293      	cmp	r3, r2
 8002004:	dc3e      	bgt.n	8002084 <get_current_step+0xb0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f640 421f 	movw	r2, #3103	; 0xc1f
 800200c:	4293      	cmp	r3, r2
 800200e:	d033      	beq.n	8002078 <get_current_step+0xa4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002016:	da35      	bge.n	8002084 <get_current_step+0xb0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800201e:	4293      	cmp	r3, r2
 8002020:	d028      	beq.n	8002074 <get_current_step+0xa0>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002028:	4293      	cmp	r3, r2
 800202a:	dc2b      	bgt.n	8002084 <get_current_step+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f240 7245 	movw	r2, #1861	; 0x745
 8002032:	4293      	cmp	r3, r2
 8002034:	d01c      	beq.n	8002070 <get_current_step+0x9c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f240 7245 	movw	r2, #1861	; 0x745
 800203c:	4293      	cmp	r3, r2
 800203e:	dc21      	bgt.n	8002084 <get_current_step+0xb0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002046:	4293      	cmp	r3, r2
 8002048:	d010      	beq.n	800206c <get_current_step+0x98>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002050:	4293      	cmp	r3, r2
 8002052:	dc17      	bgt.n	8002084 <get_current_step+0xb0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <get_current_step+0x90>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002060:	d002      	beq.n	8002068 <get_current_step+0x94>
 8002062:	e00f      	b.n	8002084 <get_current_step+0xb0>
	case 0:
		return 0;
 8002064:	2300      	movs	r3, #0
 8002066:	e00e      	b.n	8002086 <get_current_step+0xb2>
	case 620:
		return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e00c      	b.n	8002086 <get_current_step+0xb2>
	case 1241:
		return 2;
 800206c:	2302      	movs	r3, #2
 800206e:	e00a      	b.n	8002086 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002070:	2303      	movs	r3, #3
 8002072:	e008      	b.n	8002086 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002074:	2304      	movs	r3, #4
 8002076:	e006      	b.n	8002086 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002078:	2305      	movs	r3, #5
 800207a:	e004      	b.n	8002086 <get_current_step+0xb2>
	case 3723:
		return 6;
 800207c:	2306      	movs	r3, #6
 800207e:	e002      	b.n	8002086 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002080:	2307      	movs	r3, #7
 8002082:	e000      	b.n	8002086 <get_current_step+0xb2>
	default:
		return -1;
 8002084:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007400 	.word	0x40007400

08002098 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020aa:	f002 f88b 	bl	80041c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40001000 	.word	0x40001000

080020bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c0:	b672      	cpsid	i
}
 80020c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020c4:	e7fe      	b.n	80020c4 <Error_Handler+0x8>

080020c6 <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f014 fba2 	bl	8016820 <malloc>
 80020dc:	4603      	mov	r3, r0
 80020de:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f014 fbaa 	bl	8016840 <memcpy>
	packet.size = size;
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	82bb      	strh	r3, [r7, #20]
	return packet;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <create_pmt_packet>:

void create_pmt_packet() {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800210e:	bf00      	nop
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <create_pmt_packet+0xe8>)
 8002116:	f007 f989 	bl	800942c <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f7      	bne.n	8002110 <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002120:	200a      	movs	r0, #10
 8002122:	f014 fb7d 	bl	8016820 <malloc>
 8002126:	4603      	mov	r3, r0
 8002128:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800212a:	2002      	movs	r0, #2
 800212c:	f014 fb78 	bl	8016820 <malloc>
 8002130:	4603      	mov	r3, r0
 8002132:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002134:	2004      	movs	r0, #4
 8002136:	f014 fb73 	bl	8016820 <malloc>
 800213a:	4603      	mov	r3, r0
 800213c:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f001 fb02 	bl	8003748 <get_uptime>

	sample_pmt_spi(pmt_spi);
 8002144:	6938      	ldr	r0, [r7, #16]
 8002146:	f000 fb89 	bl	800285c <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	22bb      	movs	r2, #187	; 0xbb
 800214e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	22bb      	movs	r2, #187	; 0xbb
 8002156:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <create_pmt_packet+0xec>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29a      	uxth	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3302      	adds	r3, #2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <create_pmt_packet+0xec>)
 800216a:	881a      	ldrh	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3303      	adds	r3, #3
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3304      	adds	r3, #4
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3305      	adds	r3, #5
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	7852      	ldrb	r2, [r2, #1]
 8002186:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3306      	adds	r3, #6
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3307      	adds	r3, #7
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	7852      	ldrb	r2, [r2, #1]
 800219a:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3308      	adds	r3, #8
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	7892      	ldrb	r2, [r2, #2]
 80021a4:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3309      	adds	r3, #9
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	78d2      	ldrb	r2, [r2, #3]
 80021ae:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	220a      	movs	r2, #10
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff85 	bl	80020c6 <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <create_pmt_packet+0xf0>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	1d39      	adds	r1, r7, #4
 80021c2:	2300      	movs	r3, #0
 80021c4:	2200      	movs	r2, #0
 80021c6:	f011 fa09 	bl	80135dc <osMessageQueuePut>
	pmt_seq++;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <create_pmt_packet+0xec>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <create_pmt_packet+0xec>)
 80021d4:	801a      	strh	r2, [r3, #0]
	free(buffer);
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f014 fb2a 	bl	8016830 <free>
	free(pmt_spi);
 80021dc:	6938      	ldr	r0, [r7, #16]
 80021de:	f014 fb27 	bl	8016830 <free>
	free(uptime);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f014 fb24 	bl	8016830 <free>
}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58020000 	.word	0x58020000
 80021f4:	2400083a 	.word	0x2400083a
 80021f8:	240007ec 	.word	0x240007ec

080021fc <create_erpa_packet>:


void create_erpa_packet() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002202:	bf00      	nop
 8002204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002208:	484a      	ldr	r0, [pc, #296]	; (8002334 <create_erpa_packet+0x138>)
 800220a:	f007 f90f 	bl	800942c <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f7      	bne.n	8002204 <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002214:	200e      	movs	r0, #14
 8002216:	f014 fb03 	bl	8016820 <malloc>
 800221a:	4603      	mov	r3, r0
 800221c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800221e:	2002      	movs	r0, #2
 8002220:	f014 fafe 	bl	8016820 <malloc>
 8002224:	4603      	mov	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002228:	2002      	movs	r0, #2
 800222a:	f014 faf9 	bl	8016820 <malloc>
 800222e:	4603      	mov	r3, r0
 8002230:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002232:	2004      	movs	r0, #4
 8002234:	f014 faf4 	bl	8016820 <malloc>
 8002238:	4603      	mov	r3, r0
 800223a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800223c:	23ff      	movs	r3, #255	; 0xff
 800223e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002240:	6938      	ldr	r0, [r7, #16]
 8002242:	f001 fa81 	bl	8003748 <get_uptime>
	sweep_step = get_current_step();
 8002246:	f7ff fec5 	bl	8001fd4 <get_current_step>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 800224e:	69b8      	ldr	r0, [r7, #24]
 8002250:	f000 fb28 	bl	80028a4 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f000 fb49 	bl	80028ec <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	22aa      	movs	r2, #170	; 0xaa
 800225e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3301      	adds	r3, #1
 8002264:	22aa      	movs	r2, #170	; 0xaa
 8002266:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <create_erpa_packet+0x13c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0c1a      	lsrs	r2, r3, #16
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3302      	adds	r3, #2
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <create_erpa_packet+0x13c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0a1a      	lsrs	r2, r3, #8
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3303      	adds	r3, #3
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <create_erpa_packet+0x13c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	3304      	adds	r3, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3305      	adds	r3, #5
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b29a      	uxth	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3306      	adds	r3, #6
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3307      	adds	r3, #7
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3308      	adds	r3, #8
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3309      	adds	r3, #9
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	7852      	ldrb	r2, [r2, #1]
 80022c6:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	330a      	adds	r3, #10
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	330b      	adds	r3, #11
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	7852      	ldrb	r2, [r2, #1]
 80022da:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	330c      	adds	r3, #12
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	7892      	ldrb	r2, [r2, #2]
 80022e4:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	330d      	adds	r3, #13
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	78d2      	ldrb	r2, [r2, #3]
 80022ee:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	220e      	movs	r2, #14
 80022f4:	69f9      	ldr	r1, [r7, #28]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fee5 	bl	80020c6 <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <create_erpa_packet+0x140>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	1d39      	adds	r1, r7, #4
 8002302:	2300      	movs	r3, #0
 8002304:	2200      	movs	r2, #0
 8002306:	f011 f969 	bl	80135dc <osMessageQueuePut>
	erpa_seq++;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <create_erpa_packet+0x13c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <create_erpa_packet+0x13c>)
 8002312:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002314:	69f8      	ldr	r0, [r7, #28]
 8002316:	f014 fa8b 	bl	8016830 <free>
	free(erpa_spi);
 800231a:	69b8      	ldr	r0, [r7, #24]
 800231c:	f014 fa88 	bl	8016830 <free>
	free(erpa_adc);
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f014 fa85 	bl	8016830 <free>
	free(uptime);
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f014 fa82 	bl	8016830 <free>
}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58020400 	.word	0x58020400
 8002338:	2400083c 	.word	0x2400083c
 800233c:	240007ec 	.word	0x240007ec

08002340 <create_hk_packet>:


void create_hk_packet() {
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002346:	2036      	movs	r0, #54	; 0x36
 8002348:	f014 fa6a 	bl	8016820 <malloc>
 800234c:	4603      	mov	r3, r0
 800234e:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002350:	200a      	movs	r0, #10
 8002352:	f014 fa65 	bl	8016820 <malloc>
 8002356:	4603      	mov	r3, r0
 8002358:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800235a:	2004      	movs	r0, #4
 800235c:	f014 fa60 	bl	8016820 <malloc>
 8002360:	4603      	mov	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f001 f9ef 	bl	8003748 <get_uptime>
	get_timestamp(timestamp);
 800236a:	6938      	ldr	r0, [r7, #16]
 800236c:	f001 fa36 	bl	80037dc <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002370:	f001 fe12 	bl	8003f98 <get_rail_monitor>
 8002374:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	22cc      	movs	r2, #204	; 0xcc
 800237a:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	22cc      	movs	r2, #204	; 0xcc
 8002382:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002384:	4ba1      	ldr	r3, [pc, #644]	; (800260c <create_hk_packet+0x2cc>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29a      	uxth	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3302      	adds	r3, #2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002394:	4b9d      	ldr	r3, [pc, #628]	; (800260c <create_hk_packet+0x2cc>)
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3303      	adds	r3, #3
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3304      	adds	r3, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	889a      	ldrh	r2, [r3, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3305      	adds	r3, #5
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	330a      	adds	r3, #10
 80023c0:	889b      	ldrh	r3, [r3, #4]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3306      	adds	r3, #6
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	330a      	adds	r3, #10
 80023d2:	889a      	ldrh	r2, [r3, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3307      	adds	r3, #7
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3314      	adds	r3, #20
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3308      	adds	r3, #8
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3314      	adds	r3, #20
 80023f2:	889a      	ldrh	r2, [r3, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3309      	adds	r3, #9
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	331e      	adds	r3, #30
 8002400:	889b      	ldrh	r3, [r3, #4]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29a      	uxth	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	330a      	adds	r3, #10
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	331e      	adds	r3, #30
 8002412:	889a      	ldrh	r2, [r3, #4]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	330b      	adds	r3, #11
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3328      	adds	r3, #40	; 0x28
 8002420:	889b      	ldrh	r3, [r3, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29a      	uxth	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	330c      	adds	r3, #12
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3328      	adds	r3, #40	; 0x28
 8002432:	889a      	ldrh	r2, [r3, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	330d      	adds	r3, #13
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3332      	adds	r3, #50	; 0x32
 8002440:	889b      	ldrh	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	b29a      	uxth	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	330e      	adds	r3, #14
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3332      	adds	r3, #50	; 0x32
 8002452:	889a      	ldrh	r2, [r3, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	330f      	adds	r3, #15
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	889b      	ldrh	r3, [r3, #4]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3310      	adds	r3, #16
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	333c      	adds	r3, #60	; 0x3c
 8002472:	889a      	ldrh	r2, [r3, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3311      	adds	r3, #17
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3346      	adds	r3, #70	; 0x46
 8002480:	889b      	ldrh	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29a      	uxth	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3312      	adds	r3, #18
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3346      	adds	r3, #70	; 0x46
 8002492:	889a      	ldrh	r2, [r3, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3313      	adds	r3, #19
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3350      	adds	r3, #80	; 0x50
 80024a0:	889b      	ldrh	r3, [r3, #4]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3314      	adds	r3, #20
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3350      	adds	r3, #80	; 0x50
 80024b2:	889a      	ldrh	r2, [r3, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3315      	adds	r3, #21
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	335a      	adds	r3, #90	; 0x5a
 80024c0:	889b      	ldrh	r3, [r3, #4]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3316      	adds	r3, #22
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	335a      	adds	r3, #90	; 0x5a
 80024d2:	889a      	ldrh	r2, [r3, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3317      	adds	r3, #23
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3364      	adds	r3, #100	; 0x64
 80024e0:	889b      	ldrh	r3, [r3, #4]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3318      	adds	r3, #24
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3364      	adds	r3, #100	; 0x64
 80024f2:	889a      	ldrh	r2, [r3, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3319      	adds	r3, #25
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	336e      	adds	r3, #110	; 0x6e
 8002500:	889b      	ldrh	r3, [r3, #4]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29a      	uxth	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	331a      	adds	r3, #26
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	336e      	adds	r3, #110	; 0x6e
 8002512:	889a      	ldrh	r2, [r3, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	331b      	adds	r3, #27
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3378      	adds	r3, #120	; 0x78
 8002520:	889b      	ldrh	r3, [r3, #4]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b29a      	uxth	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	331c      	adds	r3, #28
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3378      	adds	r3, #120	; 0x78
 8002532:	889a      	ldrh	r2, [r3, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	331d      	adds	r3, #29
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3382      	adds	r3, #130	; 0x82
 8002540:	889b      	ldrh	r3, [r3, #4]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b29a      	uxth	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	331e      	adds	r3, #30
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3382      	adds	r3, #130	; 0x82
 8002552:	889a      	ldrh	r2, [r3, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	331f      	adds	r3, #31
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	338c      	adds	r3, #140	; 0x8c
 8002560:	889b      	ldrh	r3, [r3, #4]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b29a      	uxth	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3320      	adds	r3, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	338c      	adds	r3, #140	; 0x8c
 8002572:	889a      	ldrh	r2, [r3, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3321      	adds	r3, #33	; 0x21
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3396      	adds	r3, #150	; 0x96
 8002580:	889b      	ldrh	r3, [r3, #4]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29a      	uxth	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3322      	adds	r3, #34	; 0x22
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3396      	adds	r3, #150	; 0x96
 8002592:	889a      	ldrh	r2, [r3, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3323      	adds	r3, #35	; 0x23
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	33a0      	adds	r3, #160	; 0xa0
 80025a0:	889b      	ldrh	r3, [r3, #4]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3324      	adds	r3, #36	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	33a0      	adds	r3, #160	; 0xa0
 80025b2:	889a      	ldrh	r2, [r3, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3325      	adds	r3, #37	; 0x25
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	33aa      	adds	r3, #170	; 0xaa
 80025c0:	889b      	ldrh	r3, [r3, #4]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3326      	adds	r3, #38	; 0x26
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	33aa      	adds	r3, #170	; 0xaa
 80025d2:	889a      	ldrh	r2, [r3, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3327      	adds	r3, #39	; 0x27
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3328      	adds	r3, #40	; 0x28
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3329      	adds	r3, #41	; 0x29
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	7852      	ldrb	r2, [r2, #1]
 80025ee:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	332a      	adds	r3, #42	; 0x2a
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	7892      	ldrb	r2, [r2, #2]
 80025f8:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	332b      	adds	r3, #43	; 0x2b
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	78d2      	ldrb	r2, [r2, #3]
 8002602:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	332c      	adds	r3, #44	; 0x2c
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	e001      	b.n	8002610 <create_hk_packet+0x2d0>
 800260c:	24000840 	.word	0x24000840
 8002610:	7912      	ldrb	r2, [r2, #4]
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	332d      	adds	r3, #45	; 0x2d
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	7952      	ldrb	r2, [r2, #5]
 800261c:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	332e      	adds	r3, #46	; 0x2e
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	7992      	ldrb	r2, [r2, #6]
 8002626:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	332f      	adds	r3, #47	; 0x2f
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	79d2      	ldrb	r2, [r2, #7]
 8002630:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3330      	adds	r3, #48	; 0x30
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	7a12      	ldrb	r2, [r2, #8]
 800263a:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3331      	adds	r3, #49	; 0x31
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	7a52      	ldrb	r2, [r2, #9]
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3332      	adds	r3, #50	; 0x32
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3333      	adds	r3, #51	; 0x33
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	7852      	ldrb	r2, [r2, #1]
 8002658:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3334      	adds	r3, #52	; 0x34
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	7892      	ldrb	r2, [r2, #2]
 8002662:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3335      	adds	r3, #53	; 0x35
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	78d2      	ldrb	r2, [r2, #3]
 800266c:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = packetize(buffer, HK_DATA_SIZE);
 800266e:	463b      	mov	r3, r7
 8002670:	2236      	movs	r2, #54	; 0x36
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd26 	bl	80020c6 <packetize>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <create_hk_packet+0x370>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	4639      	mov	r1, r7
 8002680:	2300      	movs	r3, #0
 8002682:	2200      	movs	r2, #0
 8002684:	f010 ffaa 	bl	80135dc <osMessageQueuePut>
	hk_seq++;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <create_hk_packet+0x374>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <create_hk_packet+0x374>)
 8002692:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8002694:	6978      	ldr	r0, [r7, #20]
 8002696:	f014 f8cb 	bl	8016830 <free>
	free(timestamp);
 800269a:	6938      	ldr	r0, [r7, #16]
 800269c:	f014 f8c8 	bl	8016830 <free>
	free(uptime);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f014 f8c5 	bl	8016830 <free>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	240007ec 	.word	0x240007ec
 80026b4:	24000840 	.word	0x24000840

080026b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <MX_RTC_Init+0xb4>)
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <MX_RTC_Init+0xb8>)
 80026d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <MX_RTC_Init+0xb4>)
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <MX_RTC_Init+0xb4>)
 80026de:	2263      	movs	r2, #99	; 0x63
 80026e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <MX_RTC_Init+0xb4>)
 80026e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <MX_RTC_Init+0xb4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <MX_RTC_Init+0xb4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <MX_RTC_Init+0xb4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_RTC_Init+0xb4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002702:	481a      	ldr	r0, [pc, #104]	; (800276c <MX_RTC_Init+0xb4>)
 8002704:	f00b fa30 	bl	800db68 <HAL_RTC_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800270e:	f7ff fcd5 	bl	80020bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002712:	2300      	movs	r3, #0
 8002714:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002716:	2300      	movs	r3, #0
 8002718:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800271a:	2300      	movs	r3, #0
 800271c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2201      	movs	r2, #1
 800272a:	4619      	mov	r1, r3
 800272c:	480f      	ldr	r0, [pc, #60]	; (800276c <MX_RTC_Init+0xb4>)
 800272e:	f00b fa9d 	bl	800dc6c <HAL_RTC_SetTime>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002738:	f7ff fcc0 	bl	80020bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800273c:	2301      	movs	r3, #1
 800273e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002740:	2301      	movs	r3, #1
 8002742:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002744:	2301      	movs	r3, #1
 8002746:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002748:	2300      	movs	r3, #0
 800274a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800274c:	463b      	mov	r3, r7
 800274e:	2201      	movs	r2, #1
 8002750:	4619      	mov	r1, r3
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <MX_RTC_Init+0xb4>)
 8002754:	f00b fb84 	bl	800de60 <HAL_RTC_SetDate>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800275e:	f7ff fcad 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	24000844 	.word	0x24000844
 8002770:	58004000 	.word	0x58004000

08002774 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b0b2      	sub	sp, #200	; 0xc8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	22c0      	movs	r2, #192	; 0xc0
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f014 f869 	bl	801685c <memset>
  if(rtcHandle->Instance==RTC)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_RTC_MspInit+0x5c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d118      	bne.n	80027c6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_RTC_MspInit+0x60>)
 80027a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4618      	mov	r0, r3
 80027ac:	f008 fcde 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80027b6:	f7ff fc81 	bl	80020bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_RTC_MspInit+0x64>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_RTC_MspInit+0x64>)
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027c6:	bf00      	nop
 80027c8:	37c8      	adds	r7, #200	; 0xc8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58004000 	.word	0x58004000
 80027d4:	00019300 	.word	0x00019300
 80027d8:	58024400 	.word	0x58024400

080027dc <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80027e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ee:	4817      	ldr	r0, [pc, #92]	; (800284c <init_adc_dma+0x70>)
 80027f0:	f002 fffc 	bl	80057ec <HAL_ADCEx_Calibration_Start>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80027fa:	f7ff fc5f 	bl	80020bc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80027fe:	220b      	movs	r2, #11
 8002800:	4913      	ldr	r1, [pc, #76]	; (8002850 <init_adc_dma+0x74>)
 8002802:	4812      	ldr	r0, [pc, #72]	; (800284c <init_adc_dma+0x70>)
 8002804:	f002 f8d0 	bl	80049a8 <HAL_ADC_Start_DMA>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800280e:	f7ff fc55 	bl	80020bc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002812:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800281a:	480e      	ldr	r0, [pc, #56]	; (8002854 <init_adc_dma+0x78>)
 800281c:	f002 ffe6 	bl	80057ec <HAL_ADCEx_Calibration_Start>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002826:	f7ff fc49 	bl	80020bc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800282a:	2204      	movs	r2, #4
 800282c:	490a      	ldr	r1, [pc, #40]	; (8002858 <init_adc_dma+0x7c>)
 800282e:	4809      	ldr	r0, [pc, #36]	; (8002854 <init_adc_dma+0x78>)
 8002830:	f002 f8ba 	bl	80049a8 <HAL_ADC_Start_DMA>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800283a:	f7ff fc3f 	bl	80020bc <Error_Handler>
	}
	status = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	71fb      	strb	r3, [r7, #7]

	return status;
 8002842:	79fb      	ldrb	r3, [r7, #7]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2400013c 	.word	0x2400013c
 8002850:	24000880 	.word	0x24000880
 8002854:	240001a0 	.word	0x240001a0
 8002858:	240008a0 	.word	0x240008a0

0800285c <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002864:	f107 010c 	add.w	r1, r7, #12
 8002868:	2301      	movs	r3, #1
 800286a:	2201      	movs	r2, #1
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <sample_pmt_spi+0x44>)
 800286e:	f00b fdc1 	bl	800e3f4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002876:	7b7b      	ldrb	r3, [r7, #13]
 8002878:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <sample_pmt_spi+0x44>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <sample_pmt_spi+0x44>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002888:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7bba      	ldrb	r2, [r7, #14]
 800288e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3301      	adds	r3, #1
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	240008a8 	.word	0x240008a8

080028a4 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 80028ac:	f107 010c 	add.w	r1, r7, #12
 80028b0:	2364      	movs	r3, #100	; 0x64
 80028b2:	2201      	movs	r2, #1
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <sample_erpa_spi+0x44>)
 80028b6:	f00b fd9d 	bl	800e3f4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <sample_erpa_spi+0x44>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <sample_erpa_spi+0x44>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028d0:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7bba      	ldrb	r2, [r7, #14]
 80028d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3301      	adds	r3, #1
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	701a      	strb	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	24000930 	.word	0x24000930

080028ec <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <sample_erpa_adc+0x20>)
 80028f6:	885b      	ldrh	r3, [r3, #2]
 80028f8:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	89fa      	ldrh	r2, [r7, #14]
 80028fe:	801a      	strh	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	24000880 	.word	0x24000880

08002910 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002918:	2390      	movs	r3, #144	; 0x90
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8a2 	bl	8002a64 <poll_i2c_sensor>
 8002920:	4603      	mov	r3, r0
 8002922:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002924:	2394      	movs	r3, #148	; 0x94
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f89c 	bl	8002a64 <poll_i2c_sensor>
 800292c:	4603      	mov	r3, r0
 800292e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002930:	2392      	movs	r3, #146	; 0x92
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f896 	bl	8002a64 <poll_i2c_sensor>
 8002938:	4603      	mov	r3, r0
 800293a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800293c:	2396      	movs	r3, #150	; 0x96
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f890 	bl	8002a64 <poll_i2c_sensor>
 8002944:	4603      	mov	r3, r0
 8002946:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	89fa      	ldrh	r2, [r7, #14]
 800294c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3302      	adds	r3, #2
 8002952:	89ba      	ldrh	r2, [r7, #12]
 8002954:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	897a      	ldrh	r2, [r7, #10]
 800295c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3306      	adds	r3, #6
 8002962:	893a      	ldrh	r2, [r7, #8]
 8002964:	801a      	strh	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <sample_hk_adc1+0xa0>)
 800297a:	8a9b      	ldrh	r3, [r3, #20]
 800297c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <sample_hk_adc1+0xa0>)
 8002980:	8a1b      	ldrh	r3, [r3, #16]
 8002982:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <sample_hk_adc1+0xa0>)
 8002986:	899b      	ldrh	r3, [r3, #12]
 8002988:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <sample_hk_adc1+0xa0>)
 800298c:	8a5b      	ldrh	r3, [r3, #18]
 800298e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <sample_hk_adc1+0xa0>)
 8002992:	889b      	ldrh	r3, [r3, #4]
 8002994:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <sample_hk_adc1+0xa0>)
 8002998:	88db      	ldrh	r3, [r3, #6]
 800299a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <sample_hk_adc1+0xa0>)
 800299e:	89db      	ldrh	r3, [r3, #14]
 80029a0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <sample_hk_adc1+0xa0>)
 80029a4:	891b      	ldrh	r3, [r3, #8]
 80029a6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <sample_hk_adc1+0xa0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <sample_hk_adc1+0xa0>)
 80029b0:	895b      	ldrh	r3, [r3, #10]
 80029b2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8bfa      	ldrh	r2, [r7, #30]
 80029b8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3302      	adds	r3, #2
 80029be:	8bba      	ldrh	r2, [r7, #28]
 80029c0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	8b7a      	ldrh	r2, [r7, #26]
 80029c8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3306      	adds	r3, #6
 80029ce:	8b3a      	ldrh	r2, [r7, #24]
 80029d0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3308      	adds	r3, #8
 80029d6:	8afa      	ldrh	r2, [r7, #22]
 80029d8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	330a      	adds	r3, #10
 80029de:	8aba      	ldrh	r2, [r7, #20]
 80029e0:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	330c      	adds	r3, #12
 80029e6:	8a7a      	ldrh	r2, [r7, #18]
 80029e8:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	330e      	adds	r3, #14
 80029ee:	8a3a      	ldrh	r2, [r7, #16]
 80029f0:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3310      	adds	r3, #16
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3312      	adds	r3, #18
 80029fe:	89ba      	ldrh	r2, [r7, #12]
 8002a00:	801a      	strh	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	24000880 	.word	0x24000880

08002a14 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <sample_hk_adc3+0x4c>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <sample_hk_adc3+0x4c>)
 8002a24:	885b      	ldrh	r3, [r3, #2]
 8002a26:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <sample_hk_adc3+0x4c>)
 8002a2a:	889b      	ldrh	r3, [r3, #4]
 8002a2c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <sample_hk_adc3+0x4c>)
 8002a30:	88db      	ldrh	r3, [r3, #6]
 8002a32:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	89fa      	ldrh	r2, [r7, #14]
 8002a38:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	89ba      	ldrh	r2, [r7, #12]
 8002a40:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	897a      	ldrh	r2, [r7, #10]
 8002a48:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	893a      	ldrh	r2, [r7, #8]
 8002a50:	801a      	strh	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	240008a0 	.word	0x240008a0

08002a64 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	b299      	uxth	r1, r3
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	4817      	ldr	r0, [pc, #92]	; (8002ae0 <poll_i2c_sensor+0x7c>)
 8002a84:	f006 fda0 	bl	80095c8 <HAL_I2C_Master_Transmit>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002a8c:	7b7b      	ldrb	r3, [r7, #13]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8002a92:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <poll_i2c_sensor+0x80>)
 8002a94:	f014 f838 	bl	8016b08 <puts>
 8002a98:	e01c      	b.n	8002ad4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	f107 0208 	add.w	r2, r7, #8
 8002aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <poll_i2c_sensor+0x7c>)
 8002aac:	f006 fea4 	bl	80097f8 <HAL_I2C_Master_Receive>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002ab4:	7b7b      	ldrb	r3, [r7, #13]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002aba:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <poll_i2c_sensor+0x84>)
 8002abc:	f014 f824 	bl	8016b08 <puts>
 8002ac0:	e008      	b.n	8002ad4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002ac2:	7a3b      	ldrb	r3, [r7, #8]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002ac8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002acc:	7a7a      	ldrb	r2, [r7, #9]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	10db      	asrs	r3, r3, #3
 8002ad2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002ad4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	24000790 	.word	0x24000790
 8002ae4:	080174c0 	.word	0x080174c0
 8002ae8:	080174d0 	.word	0x080174d0

08002aec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002af2:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <MX_SPI1_Init+0xac>)
 8002af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002af8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b08:	220f      	movs	r2, #15
 8002b0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b22:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2e:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_SPI1_Init+0xa8>)
 8002b80:	f00b fb14 	bl	800e1ac <HAL_SPI_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002b8a:	f7ff fa97 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	240008a8 	.word	0x240008a8
 8002b98:	40013000 	.word	0x40013000

08002b9c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002ba2:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <MX_SPI2_Init+0xac>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bb4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bb8:	220f      	movs	r2, #15
 8002bba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bd2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002bd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_SPI2_Init+0xa8>)
 8002c30:	f00b fabc 	bl	800e1ac <HAL_SPI_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002c3a:	f7ff fa3f 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	24000930 	.word	0x24000930
 8002c48:	40003800 	.word	0x40003800

08002c4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b0bc      	sub	sp, #240	; 0xf0
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c64:	f107 0318 	add.w	r3, r7, #24
 8002c68:	22c0      	movs	r2, #192	; 0xc0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f013 fdf5 	bl	801685c <memset>
  if(spiHandle->Instance==SPI1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <HAL_SPI_MspInit+0x15c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d145      	bne.n	8002d08 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8c:	f107 0318 	add.w	r3, r7, #24
 8002c90:	4618      	mov	r0, r3
 8002c92:	f008 fa6b 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c9c:	f7ff fa0e 	bl	80020bc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca0:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca6:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a39      	ldr	r2, [pc, #228]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002cdc:	2318      	movs	r3, #24
 8002cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cfe:	4619      	mov	r1, r3
 8002d00:	482b      	ldr	r0, [pc, #172]	; (8002db0 <HAL_SPI_MspInit+0x164>)
 8002d02:	f006 f9e3 	bl	80090cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002d06:	e04a      	b.n	8002d9e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_SPI_MspInit+0x168>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d145      	bne.n	8002d9e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d22:	f107 0318 	add.w	r3, r7, #24
 8002d26:	4618      	mov	r0, r3
 8002d28:	f008 fa20 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002d32:	f7ff f9c3 	bl	80020bc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_SPI_MspInit+0x160>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d72:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d8c:	2305      	movs	r3, #5
 8002d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <HAL_SPI_MspInit+0x164>)
 8002d9a:	f006 f997 	bl	80090cc <HAL_GPIO_Init>
}
 8002d9e:	bf00      	nop
 8002da0:	37f0      	adds	r7, #240	; 0xf0
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40013000 	.word	0x40013000
 8002dac:	58024400 	.word	0x58024400
 8002db0:	58020400 	.word	0x58020400
 8002db4:	40003800 	.word	0x40003800

08002db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_MspInit+0x38>)
 8002dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_MspInit+0x38>)
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_MspInit+0x38>)
 8002dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	210f      	movs	r1, #15
 8002de0:	f06f 0001 	mvn.w	r0, #1
 8002de4:	f002 fefc 	bl	8005be0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	58024400 	.word	0x58024400

08002df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b090      	sub	sp, #64	; 0x40
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	d827      	bhi.n	8002e52 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002e02:	2200      	movs	r2, #0
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	2036      	movs	r0, #54	; 0x36
 8002e08:	f002 feea 	bl	8005be0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e0c:	2036      	movs	r0, #54	; 0x36
 8002e0e:	f002 ff01 	bl	8005c14 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e12:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <HAL_InitTick+0xc4>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_InitTick+0xc8>)
 8002e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_InitTick+0xc8>)
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_InitTick+0xc8>)
 8002e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e36:	f107 0210 	add.w	r2, r7, #16
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 f951 	bl	800b0e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_InitTick+0x6a>
 8002e50:	e001      	b.n	8002e56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02b      	b.n	8002eae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e56:	f008 f91b 	bl	800b090 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e5c:	e004      	b.n	8002e68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e5e:	f008 f917 	bl	800b090 <HAL_RCC_GetPCLK1Freq>
 8002e62:	4603      	mov	r3, r0
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_InitTick+0xcc>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	3b01      	subs	r3, #1
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_InitTick+0xd4>)
 8002e7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e96:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002e98:	f00b fdd9 	bl	800ea4e <HAL_TIM_Base_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ea2:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <HAL_InitTick+0xd0>)
 8002ea4:	f00b fe2a 	bl	800eafc <HAL_TIM_Base_Start_IT>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	e000      	b.n	8002eae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3740      	adds	r7, #64	; 0x40
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000094 	.word	0x24000094
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	431bde83 	.word	0x431bde83
 8002ec4:	240009b8 	.word	0x240009b8
 8002ec8:	40001000 	.word	0x40001000

08002ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002ed0:	e7fe      	b.n	8002ed0 <NMI_Handler+0x4>

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <DMA1_Stream0_IRQHandler+0x10>)
 8002efe:	f004 fdc7 	bl	8007a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	24000204 	.word	0x24000204

08002f0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <DMA1_Stream1_IRQHandler+0x10>)
 8002f12:	f004 fdbd 	bl	8007a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2400027c 	.word	0x2400027c

08002f20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <DMA1_Stream2_IRQHandler+0x10>)
 8002f26:	f004 fdb3 	bl	8007a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	24000b80 	.word	0x24000b80

08002f34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA1_Stream5_IRQHandler+0x10>)
 8002f3a:	f004 fda9 	bl	8007a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	24000308 	.word	0x24000308

08002f48 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM1_BRK_IRQHandler+0x10>)
 8002f4e:	f00c f8ec 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	24000a08 	.word	0x24000a08

08002f5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM1_UP_IRQHandler+0x10>)
 8002f62:	f00c f8e2 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	24000a08 	.word	0x24000a08

08002f70 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002f76:	f00c f8d8 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	24000a08 	.word	0x24000a08

08002f84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM1_CC_IRQHandler+0x10>)
 8002f8a:	f00c f8ce 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	24000a08 	.word	0x24000a08

08002f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM2_IRQHandler+0x10>)
 8002f9e:	f00c f8c4 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	24000a54 	.word	0x24000a54

08002fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <TIM3_IRQHandler+0x10>)
 8002fb2:	f00c f8ba 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	24000aa0 	.word	0x24000aa0

08002fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <USART1_IRQHandler+0x10>)
 8002fc6:	f00d fc73 	bl	80108b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	24000aec 	.word	0x24000aec

08002fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <TIM6_DAC_IRQHandler+0x20>)
 8002fda:	791b      	ldrb	r3, [r3, #4]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002fe2:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <TIM6_DAC_IRQHandler+0x20>)
 8002fe4:	f002 ffab 	bl	8005f3e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002fe8:	4803      	ldr	r0, [pc, #12]	; (8002ff8 <TIM6_DAC_IRQHandler+0x24>)
 8002fea:	f00c f89e 	bl	800f12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	240002f4 	.word	0x240002f4
 8002ff8:	240009b8 	.word	0x240009b8

08002ffc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <ITM_SendChar+0x48>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <ITM_SendChar+0x48>)
 800300c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <ITM_SendChar+0x4c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <ITM_SendChar+0x4c>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800301e:	bf00      	nop
 8003020:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f8      	beq.n	8003020 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800302e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000edfc 	.word	0xe000edfc
 8003048:	e0000e00 	.word	0xe0000e00

0800304c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e00a      	b.n	8003074 <_read+0x28>
		*ptr++ = __io_getchar();
 800305e:	f3af 8000 	nop.w
 8003062:	4601      	mov	r1, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	b2ca      	uxtb	r2, r1
 800306c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	dbf0      	blt.n	800305e <_read+0x12>
	}

	return len;
 800307c:	687b      	ldr	r3, [r7, #4]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e009      	b.n	80030ac <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	60ba      	str	r2, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ffab 	bl	8002ffc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dbf1      	blt.n	8003098 <_write+0x12>
	}
	return len;
 80030b4:	687b      	ldr	r3, [r7, #4]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_close>:

int _close(int file) {
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030e6:	605a      	str	r2, [r3, #4]
	return 0;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_isatty>:

int _isatty(int file) {
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
		errno = ENOMEM;
 8003158:	f013 fb38 	bl	80167cc <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	24080000 	.word	0x24080000
 8003188:	00000400 	.word	0x00000400
 800318c:	24000a04 	.word	0x24000a04
 8003190:	24005610 	.word	0x24005610

08003194 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003198:	4b37      	ldr	r3, [pc, #220]	; (8003278 <SystemInit+0xe4>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	4a36      	ldr	r2, [pc, #216]	; (8003278 <SystemInit+0xe4>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <SystemInit+0xe8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d807      	bhi.n	80031c4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80031b4:	4b31      	ldr	r3, [pc, #196]	; (800327c <SystemInit+0xe8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 030f 	bic.w	r3, r3, #15
 80031bc:	4a2f      	ldr	r2, [pc, #188]	; (800327c <SystemInit+0xe8>)
 80031be:	f043 0307 	orr.w	r3, r3, #7
 80031c2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <SystemInit+0xec>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <SystemInit+0xec>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <SystemInit+0xec>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <SystemInit+0xec>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4929      	ldr	r1, [pc, #164]	; (8003280 <SystemInit+0xec>)
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <SystemInit+0xf0>)
 80031de:	4013      	ands	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <SystemInit+0xe8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80031ee:	4b23      	ldr	r3, [pc, #140]	; (800327c <SystemInit+0xe8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <SystemInit+0xe8>)
 80031f8:	f043 0307 	orr.w	r3, r3, #7
 80031fc:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <SystemInit+0xec>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <SystemInit+0xec>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <SystemInit+0xec>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <SystemInit+0xec>)
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <SystemInit+0xf4>)
 8003214:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <SystemInit+0xec>)
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <SystemInit+0xf8>)
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800321c:	4b18      	ldr	r3, [pc, #96]	; (8003280 <SystemInit+0xec>)
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <SystemInit+0xfc>)
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <SystemInit+0xec>)
 8003224:	2200      	movs	r2, #0
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <SystemInit+0xec>)
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <SystemInit+0xfc>)
 800322c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <SystemInit+0xec>)
 8003230:	2200      	movs	r2, #0
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <SystemInit+0xec>)
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <SystemInit+0xfc>)
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <SystemInit+0xec>)
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <SystemInit+0xec>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <SystemInit+0xec>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <SystemInit+0xec>)
 800324e:	2200      	movs	r2, #0
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <SystemInit+0x100>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <SystemInit+0x104>)
 8003258:	4013      	ands	r3, r2
 800325a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325e:	d202      	bcs.n	8003266 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <SystemInit+0x108>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <SystemInit+0x10c>)
 8003268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800326c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00
 800327c:	52002000 	.word	0x52002000
 8003280:	58024400 	.word	0x58024400
 8003284:	eaf6ed7f 	.word	0xeaf6ed7f
 8003288:	02020200 	.word	0x02020200
 800328c:	01ff0000 	.word	0x01ff0000
 8003290:	01010280 	.word	0x01010280
 8003294:	5c001000 	.word	0x5c001000
 8003298:	ffff0000 	.word	0xffff0000
 800329c:	51008108 	.word	0x51008108
 80032a0:	52004000 	.word	0x52004000

080032a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b09a      	sub	sp, #104	; 0x68
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
 80032d4:	615a      	str	r2, [r3, #20]
 80032d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	222c      	movs	r2, #44	; 0x2c
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f013 fabc 	bl	801685c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032e4:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <MX_TIM1_Init+0x154>)
 80032e6:	4a45      	ldr	r2, [pc, #276]	; (80033fc <MX_TIM1_Init+0x158>)
 80032e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <MX_TIM1_Init+0x154>)
 80032ec:	2231      	movs	r2, #49	; 0x31
 80032ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <MX_TIM1_Init+0x154>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <MX_TIM1_Init+0x154>)
 80032f8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80032fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <MX_TIM1_Init+0x154>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003304:	4b3c      	ldr	r3, [pc, #240]	; (80033f8 <MX_TIM1_Init+0x154>)
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <MX_TIM1_Init+0x154>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003310:	4839      	ldr	r0, [pc, #228]	; (80033f8 <MX_TIM1_Init+0x154>)
 8003312:	f00b fb9c 	bl	800ea4e <HAL_TIM_Base_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800331c:	f7fe fece 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003324:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800332a:	4619      	mov	r1, r3
 800332c:	4832      	ldr	r0, [pc, #200]	; (80033f8 <MX_TIM1_Init+0x154>)
 800332e:	f00c f917 	bl	800f560 <HAL_TIM_ConfigClockSource>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003338:	f7fe fec0 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800333c:	482e      	ldr	r0, [pc, #184]	; (80033f8 <MX_TIM1_Init+0x154>)
 800333e:	f00b fe93 	bl	800f068 <HAL_TIM_PWM_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003348:	f7fe feb8 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800335c:	4619      	mov	r1, r3
 800335e:	4826      	ldr	r0, [pc, #152]	; (80033f8 <MX_TIM1_Init+0x154>)
 8003360:	f00c fe54 	bl	801000c <HAL_TIMEx_MasterConfigSynchronization>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800336a:	f7fe fea7 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336e:	2360      	movs	r3, #96	; 0x60
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003372:	f240 13df 	movw	r3, #479	; 0x1df
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003378:	2300      	movs	r3, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800337c:	2300      	movs	r3, #0
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800338c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003390:	2200      	movs	r2, #0
 8003392:	4619      	mov	r1, r3
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <MX_TIM1_Init+0x154>)
 8003396:	f00b ffcf 	bl	800f338 <HAL_TIM_PWM_ConfigChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80033a0:	f7fe fe8c 	bl	80020bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <MX_TIM1_Init+0x154>)
 80033da:	f00c fea5 	bl	8010128 <HAL_TIMEx_ConfigBreakDeadTime>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80033e4:	f7fe fe6a 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033e8:	4803      	ldr	r0, [pc, #12]	; (80033f8 <MX_TIM1_Init+0x154>)
 80033ea:	f000 f949 	bl	8003680 <HAL_TIM_MspPostInit>

}
 80033ee:	bf00      	nop
 80033f0:	3768      	adds	r7, #104	; 0x68
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	24000a08 	.word	0x24000a08
 80033fc:	40010000 	.word	0x40010000

08003400 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003420:	463b      	mov	r3, r7
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	615a      	str	r2, [r3, #20]
 8003430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003432:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <MX_TIM2_Init+0xe8>)
 800343c:	2231      	movs	r2, #49	; 0x31
 800343e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003448:	f640 4234 	movw	r2, #3124	; 0xc34
 800344c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800345a:	4823      	ldr	r0, [pc, #140]	; (80034e8 <MX_TIM2_Init+0xe8>)
 800345c:	f00b faf7 	bl	800ea4e <HAL_TIM_Base_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003466:	f7fe fe29 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800346a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003474:	4619      	mov	r1, r3
 8003476:	481c      	ldr	r0, [pc, #112]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003478:	f00c f872 	bl	800f560 <HAL_TIM_ConfigClockSource>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003482:	f7fe fe1b 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003486:	4818      	ldr	r0, [pc, #96]	; (80034e8 <MX_TIM2_Init+0xe8>)
 8003488:	f00b fdee 	bl	800f068 <HAL_TIM_PWM_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003492:	f7fe fe13 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003496:	2320      	movs	r3, #32
 8003498:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4810      	ldr	r0, [pc, #64]	; (80034e8 <MX_TIM2_Init+0xe8>)
 80034a6:	f00c fdb1 	bl	801000c <HAL_TIMEx_MasterConfigSynchronization>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80034b0:	f7fe fe04 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b4:	2360      	movs	r3, #96	; 0x60
 80034b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034c4:	463b      	mov	r3, r7
 80034c6:	220c      	movs	r2, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	4807      	ldr	r0, [pc, #28]	; (80034e8 <MX_TIM2_Init+0xe8>)
 80034cc:	f00b ff34 	bl	800f338 <HAL_TIM_PWM_ConfigChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80034d6:	f7fe fdf1 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034da:	4803      	ldr	r0, [pc, #12]	; (80034e8 <MX_TIM2_Init+0xe8>)
 80034dc:	f000 f8d0 	bl	8003680 <HAL_TIM_MspPostInit>

}
 80034e0:	bf00      	nop
 80034e2:	3738      	adds	r7, #56	; 0x38
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	24000a54 	.word	0x24000a54

080034ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034f2:	f107 0310 	add.w	r3, r7, #16
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <MX_TIM3_Init+0x94>)
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <MX_TIM3_Init+0x98>)
 800350e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <MX_TIM3_Init+0x94>)
 8003512:	2263      	movs	r2, #99	; 0x63
 8003514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <MX_TIM3_Init+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <MX_TIM3_Init+0x94>)
 800351e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <MX_TIM3_Init+0x94>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_TIM3_Init+0x94>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003530:	4813      	ldr	r0, [pc, #76]	; (8003580 <MX_TIM3_Init+0x94>)
 8003532:	f00b fa8c 	bl	800ea4e <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800353c:	f7fe fdbe 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003546:	f107 0310 	add.w	r3, r7, #16
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <MX_TIM3_Init+0x94>)
 800354e:	f00c f807 	bl	800f560 <HAL_TIM_ConfigClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003558:	f7fe fdb0 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_TIM3_Init+0x94>)
 800356a:	f00c fd4f 	bl	801000c <HAL_TIMEx_MasterConfigSynchronization>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003574:	f7fe fda2 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	24000aa0 	.word	0x24000aa0
 8003584:	40000400 	.word	0x40000400

08003588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_TIM_Base_MspInit+0xec>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12f      	bne.n	80035fa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 800359c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a0:	4a35      	ldr	r2, [pc, #212]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 80035ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2105      	movs	r1, #5
 80035bc:	2018      	movs	r0, #24
 80035be:	f002 fb0f 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80035c2:	2018      	movs	r0, #24
 80035c4:	f002 fb26 	bl	8005c14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80035c8:	2200      	movs	r2, #0
 80035ca:	2105      	movs	r1, #5
 80035cc:	2019      	movs	r0, #25
 80035ce:	f002 fb07 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035d2:	2019      	movs	r0, #25
 80035d4:	f002 fb1e 	bl	8005c14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2105      	movs	r1, #5
 80035dc:	201a      	movs	r0, #26
 80035de:	f002 faff 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80035e2:	201a      	movs	r0, #26
 80035e4:	f002 fb16 	bl	8005c14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2105      	movs	r1, #5
 80035ec:	201b      	movs	r0, #27
 80035ee:	f002 faf7 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035f2:	201b      	movs	r0, #27
 80035f4:	f002 fb0e 	bl	8005c14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80035f8:	e038      	b.n	800366c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d117      	bne.n	8003634 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 8003606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360a:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 8003616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2105      	movs	r1, #5
 8003626:	201c      	movs	r0, #28
 8003628:	f002 fada 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800362c:	201c      	movs	r0, #28
 800362e:	f002 faf1 	bl	8005c14 <HAL_NVIC_EnableIRQ>
}
 8003632:	e01b      	b.n	800366c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <HAL_TIM_Base_MspInit+0xf4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d116      	bne.n	800366c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 8003640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003644:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_TIM_Base_MspInit+0xf0>)
 8003650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2105      	movs	r1, #5
 8003660:	201d      	movs	r0, #29
 8003662:	f002 fabd 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003666:	201d      	movs	r0, #29
 8003668:	f002 fad4 	bl	8005c14 <HAL_NVIC_EnableIRQ>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40010000 	.word	0x40010000
 8003678:	58024400 	.word	0x58024400
 800367c:	40000400 	.word	0x40000400

08003680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <HAL_TIM_MspPostInit+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d120      	bne.n	80036e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 80036a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a8:	4a24      	ldr	r2, [pc, #144]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 80036b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	4818      	ldr	r0, [pc, #96]	; (8003740 <HAL_TIM_MspPostInit+0xc0>)
 80036de:	f005 fcf5 	bl	80090cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036e2:	e024      	b.n	800372e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d11f      	bne.n	800372e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 80036f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_TIM_MspPostInit+0xbc>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800370c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800371e:	2301      	movs	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	4806      	ldr	r0, [pc, #24]	; (8003744 <HAL_TIM_MspPostInit+0xc4>)
 800372a:	f005 fccf 	bl	80090cc <HAL_GPIO_Init>
}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	58024400 	.word	0x58024400
 8003740:	58020000 	.word	0x58020000
 8003744:	58020400 	.word	0x58020400

08003748 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8003754:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <get_uptime+0x88>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <get_uptime+0x8c>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <get_uptime+0x88>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	429a      	cmp	r2, r3
 8003768:	d005      	beq.n	8003776 <get_uptime+0x2e>
		ms = uptime_millis;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <get_uptime+0x88>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <get_uptime+0x8c>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800377c:	fb03 f202 	mul.w	r2, r3, r2
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <get_uptime+0x8c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	3301      	adds	r3, #1
 8003786:	4914      	ldr	r1, [pc, #80]	; (80037d8 <get_uptime+0x90>)
 8003788:	fba1 1303 	umull	r1, r3, r1, r3
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	6939      	ldr	r1, [r7, #16]
 8003790:	fbb1 f3f3 	udiv	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	b2da      	uxtb	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	0c1a      	lsrs	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0a1a      	lsrs	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3302      	adds	r3, #2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3303      	adds	r3, #3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	24000834 	.word	0x24000834
 80037d4:	e000e010 	.word	0xe000e010
 80037d8:	10624dd3 	.word	0x10624dd3

080037dc <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	2200      	movs	r2, #0
 80037ea:	4619      	mov	r1, r3
 80037ec:	4821      	ldr	r0, [pc, #132]	; (8003874 <get_timestamp+0x98>)
 80037ee:	f00a fadb 	bl	800dda8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	2200      	movs	r2, #0
 80037f8:	4619      	mov	r1, r3
 80037fa:	481e      	ldr	r0, [pc, #120]	; (8003874 <get_timestamp+0x98>)
 80037fc:	f00a fbb8 	bl	800df70 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2264      	movs	r2, #100	; 0x64
 8003804:	fb03 f202 	mul.w	r2, r3, r2
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <get_timestamp+0x9c>)
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	7b7a      	ldrb	r2, [r7, #13]
 800381a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3302      	adds	r3, #2
 8003820:	7bba      	ldrb	r2, [r7, #14]
 8003822:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3303      	adds	r3, #3
 8003828:	7c3a      	ldrb	r2, [r7, #16]
 800382a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	7c7a      	ldrb	r2, [r7, #17]
 8003832:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3305      	adds	r3, #5
 8003838:	7cba      	ldrb	r2, [r7, #18]
 800383a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	0e1a      	lsrs	r2, r3, #24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3306      	adds	r3, #6
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	0c1a      	lsrs	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3307      	adds	r3, #7
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	0a1a      	lsrs	r2, r3, #8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3308      	adds	r3, #8
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3309      	adds	r3, #9
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	24000844 	.word	0x24000844
 8003878:	000f4240 	.word	0x000f4240

0800387c <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	789b      	ldrb	r3, [r3, #2]
 8003890:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	78db      	ldrb	r3, [r3, #3]
 8003898:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	791b      	ldrb	r3, [r3, #4]
 80038a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	795b      	ldrb	r3, [r3, #5]
 80038a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	799b      	ldrb	r3, [r3, #6]
 80038b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3307      	adds	r3, #7
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b21a      	sxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3308      	adds	r3, #8
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80038cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80038d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80038dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80038e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038e8:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80038ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ee:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80038f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80038f4:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80038f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038f8:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80038fa:	f107 0320 	add.w	r3, r7, #32
 80038fe:	2200      	movs	r2, #0
 8003900:	4619      	mov	r1, r3
 8003902:	480b      	ldr	r0, [pc, #44]	; (8003930 <calibrateRTC+0xb4>)
 8003904:	f00a faac 	bl	800de60 <HAL_RTC_SetDate>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 800390e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <calibrateRTC+0x9e>
		Error_Handler();
 8003916:	f7fe fbd1 	bl	80020bc <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	2200      	movs	r2, #0
 8003920:	4619      	mov	r1, r3
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <calibrateRTC+0xb4>)
 8003924:	f000 f806 	bl	8003934 <RTC_SetTime>
}
 8003928:	bf00      	nop
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	24000844 	.word	0x24000844

08003934 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <RTC_SetTime+0x1a>
 800394a:	2302      	movs	r3, #2
 800394c:	e051      	b.n	80039f2 <RTC_SetTime+0xbe>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	22ca      	movs	r2, #202	; 0xca
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2253      	movs	r2, #83	; 0x53
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f00a fb70 	bl	800e054 <RTC_EnterInitMode>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d129      	bne.n	80039d2 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f00a fbd5 	bl	800e138 <RTC_ByteToBcd2>
 800398e:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003990:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	785b      	ldrb	r3, [r3, #1]
 8003996:	4618      	mov	r0, r3
 8003998:	f00a fbce 	bl	800e138 <RTC_ByteToBcd2>
 800399c:	4603      	mov	r3, r0
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f00a fbc6 	bl	800e138 <RTC_ByteToBcd2>
 80039ac:	4603      	mov	r3, r0
 80039ae:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	78db      	ldrb	r3, [r3, #3]
 80039b6:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <RTC_SetTime+0xc8>)
 80039c4:	400b      	ands	r3, r1
 80039c6:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f00a fb77 	bl	800e0bc <RTC_ExitInitMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]

}
 80039f2:	4618      	mov	r0, r3
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	007f7f7f 	.word	0x007f7f7f

08003a00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a06:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <MX_USART1_UART_Init+0x94>)
 8003a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a0c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a26:	220c      	movs	r2, #12
 8003a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a48:	4811      	ldr	r0, [pc, #68]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a4a:	f00c fc09 	bl	8010260 <HAL_UART_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a54:	f7fe fb32 	bl	80020bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a58:	2100      	movs	r1, #0
 8003a5a:	480d      	ldr	r0, [pc, #52]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a5c:	f00f fa3b 	bl	8012ed6 <HAL_UARTEx_SetTxFifoThreshold>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a66:	f7fe fb29 	bl	80020bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4808      	ldr	r0, [pc, #32]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a6e:	f00f fa70 	bl	8012f52 <HAL_UARTEx_SetRxFifoThreshold>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a78:	f7fe fb20 	bl	80020bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <MX_USART1_UART_Init+0x90>)
 8003a7e:	f00f f9f1 	bl	8012e64 <HAL_UARTEx_DisableFifoMode>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a88:	f7fe fb18 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	24000aec 	.word	0x24000aec
 8003a94:	40011000 	.word	0x40011000

08003a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0ba      	sub	sp, #232	; 0xe8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	22c0      	movs	r2, #192	; 0xc0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f012 fecf 	bl	801685c <memset>
  if(uartHandle->Instance==USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_UART_MspInit+0x130>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d17b      	bne.n	8003bc0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ac8:	f04f 0201 	mov.w	r2, #1
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003ad4:	2318      	movs	r3, #24
 8003ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ada:	f107 0310 	add.w	r3, r7, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f007 fb44 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003aea:	f7fe fae7 	bl	80020bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af4:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003af6:	f043 0310 	orr.w	r3, r3, #16
 8003afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b12:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_UART_MspInit+0x134>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b44:	2307      	movs	r3, #7
 8003b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	481f      	ldr	r0, [pc, #124]	; (8003bd0 <HAL_UART_MspInit+0x138>)
 8003b52:	f005 fabb 	bl	80090cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_UART_MspInit+0x140>)
 8003b5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b5e:	222a      	movs	r2, #42	; 0x2a
 8003b60:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b74:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b94:	480f      	ldr	r0, [pc, #60]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003b96:	f002 fc51 	bl	800643c <HAL_DMA_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ba0:	f7fe fa8c 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_UART_MspInit+0x13c>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2105      	movs	r1, #5
 8003bb4:	2025      	movs	r0, #37	; 0x25
 8003bb6:	f002 f813 	bl	8005be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bba:	2025      	movs	r0, #37	; 0x25
 8003bbc:	f002 f82a 	bl	8005c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	37e8      	adds	r7, #232	; 0xe8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58020000 	.word	0x58020000
 8003bd4:	24000b80 	.word	0x24000b80
 8003bd8:	40020040 	.word	0x40020040

08003bdc <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003be6:	4bc2      	ldr	r3, [pc, #776]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003bec:	4bc0      	ldr	r3, [pc, #768]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003bf2:	4bbf      	ldr	r3, [pc, #764]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003bf8:	4bbd      	ldr	r3, [pc, #756]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bfe:	4bbc      	ldr	r3, [pc, #752]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c00:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c04:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003c06:	4bba      	ldr	r3, [pc, #744]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003c0c:	4bb8      	ldr	r3, [pc, #736]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003c12:	4bb7      	ldr	r3, [pc, #732]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003c18:	4bb5      	ldr	r3, [pc, #724]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003c1e:	4bb4      	ldr	r3, [pc, #720]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c24:	4bb2      	ldr	r3, [pc, #712]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c26:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c2a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003c2c:	4bb0      	ldr	r3, [pc, #704]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003c32:	4baf      	ldr	r3, [pc, #700]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c34:	2202      	movs	r2, #2
 8003c36:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003c38:	4bad      	ldr	r3, [pc, #692]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003c3e:	4bac      	ldr	r3, [pc, #688]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003c44:	4baa      	ldr	r3, [pc, #680]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c4a:	4ba9      	ldr	r3, [pc, #676]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c50:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003c52:	4ba7      	ldr	r3, [pc, #668]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003c58:	4ba5      	ldr	r3, [pc, #660]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003c5e:	4ba4      	ldr	r3, [pc, #656]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003c64:	4ba2      	ldr	r3, [pc, #648]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003c6c:	4ba0      	ldr	r3, [pc, #640]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c72:	4b9f      	ldr	r3, [pc, #636]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c74:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c78:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003c7a:	4b9d      	ldr	r3, [pc, #628]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003c80:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c82:	2204      	movs	r2, #4
 8003c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003c88:	4b99      	ldr	r3, [pc, #612]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003c90:	4b97      	ldr	r3, [pc, #604]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003c98:	4b95      	ldr	r3, [pc, #596]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c9e:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ca0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003ca6:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003cac:	4b90      	ldr	r3, [pc, #576]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cae:	2205      	movs	r2, #5
 8003cb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003cb4:	4b8e      	ldr	r3, [pc, #568]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003cbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003cc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cca:	4b89      	ldr	r3, [pc, #548]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ccc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cd0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003cd2:	4b87      	ldr	r3, [pc, #540]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cda:	2206      	movs	r2, #6
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003ce0:	4b83      	ldr	r3, [pc, #524]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003ce8:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003cf0:	4b7f      	ldr	r3, [pc, #508]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cf8:	4b7d      	ldr	r3, [pc, #500]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cfe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003d0a:	4b79      	ldr	r3, [pc, #484]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003d12:	4b77      	ldr	r3, [pc, #476]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003d1a:	4b75      	ldr	r3, [pc, #468]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003d22:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003d2a:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003d34:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003d3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d3e:	2208      	movs	r2, #8
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003d44:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003d54:	4b66      	ldr	r3, [pc, #408]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d5e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003d62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003d66:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d68:	f640 3283 	movw	r2, #2947	; 0xb83
 8003d6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d72:	2209      	movs	r2, #9
 8003d74:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003d78:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003d80:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d92:	f640 7245 	movw	r2, #3909	; 0xf45
 8003d96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003da2:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003da4:	220a      	movs	r2, #10
 8003da6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003daa:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003db2:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003dba:	4b4d      	ldr	r3, [pc, #308]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003dc4:	f640 7245 	movw	r2, #3909	; 0xf45
 8003dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003dcc:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003dce:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003dd2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003dd6:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003dd8:	220b      	movs	r2, #11
 8003dda:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003dee:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003df8:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003dfc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e02:	f640 6276 	movw	r2, #3702	; 0xe76
 8003e06:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e0c:	220c      	movs	r2, #12
 8003e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003e1a:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003e22:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e2c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003e30:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e3e:	220d      	movs	r2, #13
 8003e40:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003e4c:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e5e:	f640 7238 	movw	r2, #3896	; 0xf38
 8003e62:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e68:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003e6c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e72:	220e      	movs	r2, #14
 8003e74:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e92:	f640 7245 	movw	r2, #3909	; 0xf45
 8003e96:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003e9c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003ea0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ec6:	f241 0264 	movw	r2, #4196	; 0x1064
 8003eca:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ed8:	2210      	movs	r2, #16
 8003eda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003ee6:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <voltage_monitor_init+0x314>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003eee:	e001      	b.n	8003ef4 <voltage_monitor_init+0x318>
 8003ef0:	24000bf8 	.word	0x24000bf8
	rail_monitor[RAIL_n800v].data = 0;
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <voltage_monitor_init+0x378>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <voltage_monitor_init+0x378>)
 8003efe:	f640 5208 	movw	r2, #3336	; 0xd08
 8003f02:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f08:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003f0c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f12:	2211      	movs	r2, #17
 8003f14:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f36:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <voltage_monitor_init+0x378>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	71fb      	strb	r3, [r7, #7]

	return status;
 8003f46:	79fb      	ldrb	r3, [r7, #7]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	24000bf8 	.word	0x24000bf8

08003f58 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	460a      	mov	r2, r1
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003f6c:	79fa      	ldrb	r2, [r7, #7]
 8003f6e:	4909      	ldr	r1, [pc, #36]	; (8003f94 <set_rail_monitor_enable+0x3c>)
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	79ba      	ldrb	r2, [r7, #6]
 8003f7e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	24000bf8 	.word	0x24000bf8

08003f98 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <get_rail_monitor+0x10>)
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	24000bf8 	.word	0x24000bf8

08003fac <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8003fb6:	2014      	movs	r0, #20
 8003fb8:	f012 fc32 	bl	8016820 <malloc>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8003fc0:	2008      	movs	r0, #8
 8003fc2:	f012 fc2d 	bl	8016820 <malloc>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8003fca:	2008      	movs	r0, #8
 8003fcc:	f012 fc28 	bl	8016820 <malloc>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 8003fd4:	6838      	ldr	r0, [r7, #0]
 8003fd6:	f7fe fc9b 	bl	8002910 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003fda:	68b8      	ldr	r0, [r7, #8]
 8003fdc:	f7fe fcc8 	bl	8002970 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fe fd17 	bl	8002a14 <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	885a      	ldrh	r2, [r3, #2]
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <set_rail_monitor+0x118>)
 8003fec:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <set_rail_monitor+0x118>)
 8003ff4:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <set_rail_monitor+0x118>)
 8004000:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	3302      	adds	r3, #2
 8004006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400a:	b29a      	uxth	r2, r3
 800400c:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <set_rail_monitor+0x118>)
 800400e:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	3304      	adds	r3, #4
 8004014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <set_rail_monitor+0x118>)
 800401c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3306      	adds	r3, #6
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <set_rail_monitor+0x118>)
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <set_rail_monitor+0x118>)
 8004032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	885a      	ldrh	r2, [r3, #2]
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <set_rail_monitor+0x118>)
 800403c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	889a      	ldrh	r2, [r3, #4]
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <set_rail_monitor+0x118>)
 8004046:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	88da      	ldrh	r2, [r3, #6]
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <set_rail_monitor+0x118>)
 8004050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	899a      	ldrh	r2, [r3, #12]
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <set_rail_monitor+0x118>)
 800405a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	88da      	ldrh	r2, [r3, #6]
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <set_rail_monitor+0x118>)
 8004064:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	889a      	ldrh	r2, [r3, #4]
 800406c:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <set_rail_monitor+0x118>)
 800406e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	89da      	ldrh	r2, [r3, #14]
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <set_rail_monitor+0x118>)
 8004078:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	8a1a      	ldrh	r2, [r3, #16]
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <set_rail_monitor+0x118>)
 8004082:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	891a      	ldrh	r2, [r3, #8]
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <set_rail_monitor+0x118>)
 800408c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	895a      	ldrh	r2, [r3, #10]
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <set_rail_monitor+0x118>)
 8004096:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	8a5a      	ldrh	r2, [r3, #18]
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <set_rail_monitor+0x118>)
 80040a0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f012 fbc3 	bl	8016830 <free>
	free(hk_adc3);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f012 fbc0 	bl	8016830 <free>
	free(hk_i2c);
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f012 fbbd 	bl	8016830 <free>

	status = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]

	return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	24000bf8 	.word	0x24000bf8

080040c8 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 80040d6:	89fb      	ldrh	r3, [r7, #14]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	db05      	blt.n	80040ea <in_range+0x22>
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	dc01      	bgt.n	80040ea <in_range+0x22>
		return 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <in_range+0x24>
	}
	return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80040f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004130 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040fc:	f7ff f84a 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004100:	480c      	ldr	r0, [pc, #48]	; (8004134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004102:	490d      	ldr	r1, [pc, #52]	; (8004138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004108:	e002      	b.n	8004110 <LoopCopyDataInit>

0800410a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800410a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800410c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800410e:	3304      	adds	r3, #4

08004110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004114:	d3f9      	bcc.n	800410a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004118:	4c0a      	ldr	r4, [pc, #40]	; (8004144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800411c:	e001      	b.n	8004122 <LoopFillZerobss>

0800411e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800411e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004120:	3204      	adds	r2, #4

08004122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004124:	d3fb      	bcc.n	800411e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004126:	f012 fb57 	bl	80167d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800412a:	f7fd fdf1 	bl	8001d10 <main>
  bx  lr
 800412e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004130:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004134:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004138:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 800413c:	0801775c 	.word	0x0801775c
  ldr r2, =_sbss
 8004140:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004144:	24005610 	.word	0x24005610

08004148 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004148:	e7fe      	b.n	8004148 <ADC3_IRQHandler>
	...

0800414c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004152:	2003      	movs	r0, #3
 8004154:	f001 fd39 	bl	8005bca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004158:	f006 fdf0 	bl	800ad3c <HAL_RCC_GetSysClockFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_Init+0x68>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	4913      	ldr	r1, [pc, #76]	; (80041b8 <HAL_Init+0x6c>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_Init+0x68>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_Init+0x6c>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_Init+0x70>)
 800418e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004190:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <HAL_Init+0x74>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004196:	2005      	movs	r0, #5
 8004198:	f7fe fe2c 	bl	8002df4 <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e002      	b.n	80041ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041a6:	f7fe fe07 	bl	8002db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	58024400 	.word	0x58024400
 80041b8:	080176a8 	.word	0x080176a8
 80041bc:	24000090 	.word	0x24000090
 80041c0:	2400008c 	.word	0x2400008c

080041c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_IncTick+0x20>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_IncTick+0x24>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_IncTick+0x24>)
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	24000098 	.word	0x24000098
 80041e8:	24000cac 	.word	0x24000cac

080041ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return uwTick;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_GetTick+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	24000cac 	.word	0x24000cac

08004204 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_GetREVID+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0c1b      	lsrs	r3, r3, #16
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	5c001000 	.word	0x5c001000

0800421c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	43db      	mvns	r3, r3
 800422e:	401a      	ands	r2, r3
 8004230:	4904      	ldr	r1, [pc, #16]	; (8004244 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	58000400 	.word	0x58000400

08004248 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3360      	adds	r3, #96	; 0x60
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	611a      	str	r2, [r3, #16]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3360      	adds	r3, #96	; 0x60
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	431a      	orrs	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	601a      	str	r2, [r3, #0]
  }
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3330      	adds	r3, #48	; 0x30
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	4413      	add	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	211f      	movs	r1, #31
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	f003 011f 	and.w	r1, r3, #31
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	431a      	orrs	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f023 0203 	bic.w	r2, r3, #3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3314      	adds	r3, #20
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	0e5b      	lsrs	r3, r3, #25
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	4413      	add	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0d1b      	lsrs	r3, r3, #20
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2107      	movs	r1, #7
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	401a      	ands	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	431a      	orrs	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800446c:	43db      	mvns	r3, r3
 800446e:	401a      	ands	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0318 	and.w	r3, r3, #24
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004478:	40d9      	lsrs	r1, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	400b      	ands	r3, r1
 800447e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	000fffff 	.word	0x000fffff

0800449c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 031f 	and.w	r3, r3, #31
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6093      	str	r3, [r2, #8]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	5fffffc0 	.word	0x5fffffc0

080044dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <LL_ADC_EnableInternalRegulator+0x24>)
 8004512:	4013      	ands	r3, r2
 8004514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	6fffffc0 	.word	0x6fffffc0

0800452c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004540:	d101      	bne.n	8004546 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <LL_ADC_Enable+0x24>)
 8004562:	4013      	ands	r3, r2
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	7fffffc0 	.word	0x7fffffc0

0800457c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <LL_ADC_Disable+0x24>)
 800458a:	4013      	ands	r3, r2
 800458c:	f043 0202 	orr.w	r2, r3, #2
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	7fffffc0 	.word	0x7fffffc0

080045a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <LL_ADC_IsEnabled+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_ADC_IsEnabled+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_IsDisableOngoing+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_IsDisableOngoing+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <LL_ADC_REG_StartConversion+0x24>)
 80045fe:	4013      	ands	r3, r2
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	7fffffc0 	.word	0x7fffffc0

08004618 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b04      	cmp	r3, #4
 800462a:	d101      	bne.n	8004630 <LL_ADC_REG_IsConversionOngoing+0x18>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b08      	cmp	r3, #8
 8004650:	d101      	bne.n	8004656 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e18f      	b.n	800499e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc f95d 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff19 	bl	80044dc <LL_ADC_IsDeepPowerDownEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff feff 	bl	80044b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ff34 	bl	800452c <LL_ADC_IsInternalRegulatorEnabled>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d114      	bne.n	80046f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff18 	bl	8004504 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046d4:	4b87      	ldr	r3, [pc, #540]	; (80048f4 <HAL_ADC_Init+0x290>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_ADC_Init+0x294>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	3301      	adds	r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046e6:	e002      	b.n	80046ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f9      	bne.n	80046e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff17 	bl	800452c <LL_ADC_IsInternalRegulatorEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f043 0210 	orr.w	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff77 	bl	8004618 <LL_ADC_REG_IsConversionOngoing>
 800472a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8129 	bne.w	800498c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 8125 	bne.w	800498c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff24 	bl	80045a4 <LL_ADC_IsEnabled>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d136      	bne.n	80047d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a65      	ldr	r2, [pc, #404]	; (80048fc <HAL_ADC_Init+0x298>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_ADC_Init+0x112>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a63      	ldr	r2, [pc, #396]	; (8004900 <HAL_ADC_Init+0x29c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10e      	bne.n	8004794 <HAL_ADC_Init+0x130>
 8004776:	4861      	ldr	r0, [pc, #388]	; (80048fc <HAL_ADC_Init+0x298>)
 8004778:	f7ff ff14 	bl	80045a4 <LL_ADC_IsEnabled>
 800477c:	4604      	mov	r4, r0
 800477e:	4860      	ldr	r0, [pc, #384]	; (8004900 <HAL_ADC_Init+0x29c>)
 8004780:	f7ff ff10 	bl	80045a4 <LL_ADC_IsEnabled>
 8004784:	4603      	mov	r3, r0
 8004786:	4323      	orrs	r3, r4
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e008      	b.n	80047a6 <HAL_ADC_Init+0x142>
 8004794:	485b      	ldr	r0, [pc, #364]	; (8004904 <HAL_ADC_Init+0x2a0>)
 8004796:	f7ff ff05 	bl	80045a4 <LL_ADC_IsEnabled>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d012      	beq.n	80047d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a53      	ldr	r2, [pc, #332]	; (80048fc <HAL_ADC_Init+0x298>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_ADC_Init+0x15a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a51      	ldr	r2, [pc, #324]	; (8004900 <HAL_ADC_Init+0x29c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_Init+0x15e>
 80047be:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_ADC_Init+0x2a4>)
 80047c0:	e000      	b.n	80047c4 <HAL_ADC_Init+0x160>
 80047c2:	4a52      	ldr	r2, [pc, #328]	; (800490c <HAL_ADC_Init+0x2a8>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7ff fd3c 	bl	8004248 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80047d0:	f7ff fd18 	bl	8004204 <HAL_GetREVID>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80047da:	4293      	cmp	r3, r2
 80047dc:	d914      	bls.n	8004808 <HAL_ADC_Init+0x1a4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d110      	bne.n	8004808 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7d5b      	ldrb	r3, [r3, #21]
 80047ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7f1b      	ldrb	r3, [r3, #28]
 80047fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004800:	f043 030c 	orr.w	r3, r3, #12
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e00d      	b.n	8004824 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7d5b      	ldrb	r3, [r3, #21]
 800480c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004812:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004818:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7f1b      	ldrb	r3, [r3, #28]
 800481e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7f1b      	ldrb	r3, [r3, #28]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	3b01      	subs	r3, #1
 8004832:	045b      	lsls	r3, r3, #17
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <HAL_ADC_Init+0x2ac>)
 800485e:	4013      	ands	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	430b      	orrs	r3, r1
 8004868:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fed2 	bl	8004618 <LL_ADC_REG_IsConversionOngoing>
 8004874:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fedf 	bl	800463e <LL_ADC_INJ_IsConversionOngoing>
 8004880:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d15f      	bne.n	8004948 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d15c      	bne.n	8004948 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7d1b      	ldrb	r3, [r3, #20]
 8004892:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <HAL_ADC_Init+0x2b0>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	69b9      	ldr	r1, [r7, #24]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d130      	bne.n	800491c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_ADC_Init+0x2b4>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048ce:	3a01      	subs	r2, #1
 80048d0:	0411      	lsls	r1, r2, #16
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048dc:	4311      	orrs	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048e2:	430a      	orrs	r2, r1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	611a      	str	r2, [r3, #16]
 80048f0:	e01c      	b.n	800492c <HAL_ADC_Init+0x2c8>
 80048f2:	bf00      	nop
 80048f4:	2400008c 	.word	0x2400008c
 80048f8:	053e2d63 	.word	0x053e2d63
 80048fc:	40022000 	.word	0x40022000
 8004900:	40022100 	.word	0x40022100
 8004904:	58026000 	.word	0x58026000
 8004908:	40022300 	.word	0x40022300
 800490c:	58026300 	.word	0x58026300
 8004910:	fff0c003 	.word	0xfff0c003
 8004914:	ffffbffc 	.word	0xffffbffc
 8004918:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fdec 	bl	8005520 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10c      	bne.n	800496a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f023 010f 	bic.w	r1, r3, #15
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
 8004968:	e007      	b.n	800497a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 020f 	bic.w	r2, r2, #15
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
 800498a:	e007      	b.n	800499c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800499c:	7ffb      	ldrb	r3, [r7, #31]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
 80049a6:	bf00      	nop

080049a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a55      	ldr	r2, [pc, #340]	; (8004b10 <HAL_ADC_Start_DMA+0x168>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_ADC_Start_DMA+0x20>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a54      	ldr	r2, [pc, #336]	; (8004b14 <HAL_ADC_Start_DMA+0x16c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_Start_DMA+0x24>
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_ADC_Start_DMA+0x170>)
 80049ca:	e000      	b.n	80049ce <HAL_ADC_Start_DMA+0x26>
 80049cc:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_ADC_Start_DMA+0x174>)
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fd64 	bl	800449c <LL_ADC_GetMultimode>
 80049d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fe1c 	bl	8004618 <LL_ADC_REG_IsConversionOngoing>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 808c 	bne.w	8004b00 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_ADC_Start_DMA+0x4e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e087      	b.n	8004b06 <HAL_ADC_Start_DMA+0x15e>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d002      	beq.n	8004a10 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d170      	bne.n	8004af2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fc07 	bl	8005224 <ADC_Enable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d163      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_ADC_Start_DMA+0x178>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a37      	ldr	r2, [pc, #220]	; (8004b14 <HAL_ADC_Start_DMA+0x16c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d002      	beq.n	8004a40 <HAL_ADC_Start_DMA+0x98>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	e000      	b.n	8004a42 <HAL_ADC_Start_DMA+0x9a>
 8004a40:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <HAL_ADC_Start_DMA+0x168>)
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d002      	beq.n	8004a50 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f023 0206 	bic.w	r2, r3, #6
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	659a      	str	r2, [r3, #88]	; 0x58
 8004a74:	e002      	b.n	8004a7c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <HAL_ADC_Start_DMA+0x17c>)
 8004a82:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <HAL_ADC_Start_DMA+0x180>)
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <HAL_ADC_Start_DMA+0x184>)
 8004a92:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	221c      	movs	r2, #28
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0210 	orr.w	r2, r2, #16
 8004ab2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7ff fc89 	bl	80043d6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3340      	adds	r3, #64	; 0x40
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f002 f80e 	bl	8006af4 <HAL_DMA_Start_IT>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fd85 	bl	80045f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004ae6:	e00d      	b.n	8004b04 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004af0:	e008      	b.n	8004b04 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004afe:	e001      	b.n	8004b04 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
 8004b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40022100 	.word	0x40022100
 8004b18:	40022300 	.word	0x40022300
 8004b1c:	58026300 	.word	0x58026300
 8004b20:	fffff0fe 	.word	0xfffff0fe
 8004b24:	080053f7 	.word	0x080053f7
 8004b28:	080054cf 	.word	0x080054cf
 8004b2c:	080054eb 	.word	0x080054eb

08004b30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b0a1      	sub	sp, #132	; 0x84
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <HAL_ADC_ConfigChannel+0x1b0>)
 8004b86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x2a>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e32e      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x688>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fd38 	bl	8004618 <LL_ADC_REG_IsConversionOngoing>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 8313 	bne.w	80051d6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db2c      	blt.n	8004c12 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x6a>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2201      	movs	r2, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	e016      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x98>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e003      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2201      	movs	r2, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	69d1      	ldr	r1, [r2, #28]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f7ff fbad 	bl	800437e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fcf5 	bl	8004618 <LL_ADC_REG_IsConversionOngoing>
 8004c2e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fd02 	bl	800463e <LL_ADC_INJ_IsConversionOngoing>
 8004c3a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f040 80b8 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 80b4 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f7ff fbcf 	bl	80043fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_ADC_ConfigChannel+0x1b4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6a:	d10b      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x118>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	e01d      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x154>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x13e>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	e00a      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x154>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d02c      	beq.n	8004d24 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6919      	ldr	r1, [r3, #16]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd8:	f7ff faea 	bl	80042b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6919      	ldr	r1, [r3, #16]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	7e5b      	ldrb	r3, [r3, #25]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x186>
 8004cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cf0:	e000      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x188>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f7ff fb14 	bl	8004322 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6919      	ldr	r1, [r3, #16]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	7e1b      	ldrb	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d102      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x1a4>
 8004d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0e:	e000      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x1a6>
 8004d10:	2300      	movs	r3, #0
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7ff faec 	bl	80042f0 <LL_ADC_SetDataRightShift>
 8004d18:	e04c      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x248>
 8004d1a:	bf00      	nop
 8004d1c:	47ff0000 	.word	0x47ff0000
 8004d20:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d107      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d6a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d8e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	069b      	lsls	r3, r3, #26
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fbf3 	bl	80045a4 <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8211 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7ff fb3e 	bl	8004454 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4aa1      	ldr	r2, [pc, #644]	; (8005064 <HAL_ADC_ConfigChannel+0x4f8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f040 812e 	bne.w	8005040 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x2a0>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	bf94      	ite	ls
 8004e04:	2301      	movls	r3, #1
 8004e06:	2300      	movhi	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e019      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x2d4>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e003      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	bf94      	ite	ls
 8004e3a:	2301      	movls	r3, #1
 8004e3c:	2300      	movhi	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d079      	beq.n	8004f38 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x2f4>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	069b      	lsls	r3, r3, #26
 8004e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e5e:	e015      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x320>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x340>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	e017      	b.n	8004edc <HAL_ADC_ConfigChannel+0x370>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	e003      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x396>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	051b      	lsls	r3, r3, #20
 8004f00:	e018      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x3c8>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e003      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f34:	430b      	orrs	r3, r1
 8004f36:	e07e      	b.n	8005036 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x3e8>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	069b      	lsls	r3, r3, #26
 8004f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f52:	e015      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x414>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	e003      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	069b      	lsls	r3, r3, #26
 8004f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x434>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	3301      	adds	r3, #1
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	e017      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x464>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	61bb      	str	r3, [r7, #24]
  return result;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	e003      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x490>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3b1e      	subs	r3, #30
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	e01b      	b.n	8005034 <HAL_ADC_ConfigChannel+0x4c8>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	60fb      	str	r3, [r7, #12]
  return result;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 021f 	and.w	r2, r3, #31
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	3b1e      	subs	r3, #30
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005034:	430b      	orrs	r3, r1
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	4619      	mov	r1, r3
 800503c:	f7ff f9de 	bl	80043fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f280 80cf 	bge.w	80051e8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <HAL_ADC_ConfigChannel+0x4fc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_ADC_ConfigChannel+0x4f2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_ADC_ConfigChannel+0x500>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x508>
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_ADC_ConfigChannel+0x504>)
 8005060:	e009      	b.n	8005076 <HAL_ADC_ConfigChannel+0x50a>
 8005062:	bf00      	nop
 8005064:	47ff0000 	.word	0x47ff0000
 8005068:	40022000 	.word	0x40022000
 800506c:	40022100 	.word	0x40022100
 8005070:	40022300 	.word	0x40022300
 8005074:	4b61      	ldr	r3, [pc, #388]	; (80051fc <HAL_ADC_ConfigChannel+0x690>)
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f90c 	bl	8004294 <LL_ADC_GetCommonPathInternalCh>
 800507c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5f      	ldr	r2, [pc, #380]	; (8005200 <HAL_ADC_ConfigChannel+0x694>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_ADC_ConfigChannel+0x526>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5d      	ldr	r2, [pc, #372]	; (8005204 <HAL_ADC_ConfigChannel+0x698>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10e      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x544>
 8005092:	485b      	ldr	r0, [pc, #364]	; (8005200 <HAL_ADC_ConfigChannel+0x694>)
 8005094:	f7ff fa86 	bl	80045a4 <LL_ADC_IsEnabled>
 8005098:	4604      	mov	r4, r0
 800509a:	485a      	ldr	r0, [pc, #360]	; (8005204 <HAL_ADC_ConfigChannel+0x698>)
 800509c:	f7ff fa82 	bl	80045a4 <LL_ADC_IsEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4323      	orrs	r3, r4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e008      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x556>
 80050b0:	4855      	ldr	r0, [pc, #340]	; (8005208 <HAL_ADC_ConfigChannel+0x69c>)
 80050b2:	f7ff fa77 	bl	80045a4 <LL_ADC_IsEnabled>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d07d      	beq.n	80051c2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a50      	ldr	r2, [pc, #320]	; (800520c <HAL_ADC_ConfigChannel+0x6a0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d130      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x5c6>
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d12b      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a4a      	ldr	r2, [pc, #296]	; (8005208 <HAL_ADC_ConfigChannel+0x69c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	f040 8081 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a45      	ldr	r2, [pc, #276]	; (8005200 <HAL_ADC_ConfigChannel+0x694>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_ADC_ConfigChannel+0x58e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a43      	ldr	r2, [pc, #268]	; (8005204 <HAL_ADC_ConfigChannel+0x698>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x592>
 80050fa:	4a45      	ldr	r2, [pc, #276]	; (8005210 <HAL_ADC_ConfigChannel+0x6a4>)
 80050fc:	e000      	b.n	8005100 <HAL_ADC_ConfigChannel+0x594>
 80050fe:	4a3f      	ldr	r2, [pc, #252]	; (80051fc <HAL_ADC_ConfigChannel+0x690>)
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7ff f8b0 	bl	800426e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_ADC_ConfigChannel+0x6a8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	4a40      	ldr	r2, [pc, #256]	; (8005218 <HAL_ADC_ConfigChannel+0x6ac>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	3301      	adds	r3, #1
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005122:	e002      	b.n	800512a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f9      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005130:	e05a      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a39      	ldr	r2, [pc, #228]	; (800521c <HAL_ADC_ConfigChannel+0x6b0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d11e      	bne.n	800517a <HAL_ADC_ConfigChannel+0x60e>
 800513c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d119      	bne.n	800517a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <HAL_ADC_ConfigChannel+0x69c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d14b      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <HAL_ADC_ConfigChannel+0x694>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_ADC_ConfigChannel+0x5f8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <HAL_ADC_ConfigChannel+0x698>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x5fc>
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <HAL_ADC_ConfigChannel+0x6a4>)
 8005166:	e000      	b.n	800516a <HAL_ADC_ConfigChannel+0x5fe>
 8005168:	4a24      	ldr	r2, [pc, #144]	; (80051fc <HAL_ADC_ConfigChannel+0x690>)
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7ff f87b 	bl	800426e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005178:	e036      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a28      	ldr	r2, [pc, #160]	; (8005220 <HAL_ADC_ConfigChannel+0x6b4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d131      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12c      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_ADC_ConfigChannel+0x69c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d127      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_ADC_ConfigChannel+0x694>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_ADC_ConfigChannel+0x640>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_ADC_ConfigChannel+0x698>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x644>
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_ADC_ConfigChannel+0x6a4>)
 80051ae:	e000      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x646>
 80051b0:	4a12      	ldr	r2, [pc, #72]	; (80051fc <HAL_ADC_ConfigChannel+0x690>)
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f7ff f857 	bl	800426e <LL_ADC_SetCommonPathInternalCh>
 80051c0:	e012      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051d4:	e008      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3784      	adds	r7, #132	; 0x84
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd90      	pop	{r4, r7, pc}
 80051fc:	58026300 	.word	0x58026300
 8005200:	40022000 	.word	0x40022000
 8005204:	40022100 	.word	0x40022100
 8005208:	58026000 	.word	0x58026000
 800520c:	cb840000 	.word	0xcb840000
 8005210:	40022300 	.word	0x40022300
 8005214:	2400008c 	.word	0x2400008c
 8005218:	053e2d63 	.word	0x053e2d63
 800521c:	c7520000 	.word	0xc7520000
 8005220:	cfb80000 	.word	0xcfb80000

08005224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f9b7 	bl	80045a4 <LL_ADC_IsEnabled>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d16e      	bne.n	800531a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <ADC_Enable+0x100>)
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f043 0210 	orr.w	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e05a      	b.n	800531c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff f972 	bl	8004554 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005270:	f7fe ffbc 	bl	80041ec <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <ADC_Enable+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <ADC_Enable+0x66>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a29      	ldr	r2, [pc, #164]	; (800532c <ADC_Enable+0x108>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <ADC_Enable+0x6a>
 800528a:	4b29      	ldr	r3, [pc, #164]	; (8005330 <ADC_Enable+0x10c>)
 800528c:	e000      	b.n	8005290 <ADC_Enable+0x6c>
 800528e:	4b29      	ldr	r3, [pc, #164]	; (8005334 <ADC_Enable+0x110>)
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff f903 	bl	800449c <LL_ADC_GetMultimode>
 8005296:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <ADC_Enable+0x108>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d002      	beq.n	80052a8 <ADC_Enable+0x84>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	e000      	b.n	80052aa <ADC_Enable+0x86>
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <ADC_Enable+0x104>)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02c      	beq.n	800530c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d130      	bne.n	800531a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052b8:	e028      	b.n	800530c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f970 	bl	80045a4 <LL_ADC_IsEnabled>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f940 	bl	8004554 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052d4:	f7fe ff8a 	bl	80041ec <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d914      	bls.n	800530c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d00d      	beq.n	800530c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f043 0210 	orr.w	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e007      	b.n	800531c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d1cf      	bne.n	80052ba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	8000003f 	.word	0x8000003f
 8005328:	40022000 	.word	0x40022000
 800532c:	40022100 	.word	0x40022100
 8005330:	40022300 	.word	0x40022300
 8005334:	58026300 	.word	0x58026300

08005338 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff f940 	bl	80045ca <LL_ADC_IsDisableOngoing>
 800534a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff f927 	bl	80045a4 <LL_ADC_IsEnabled>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d047      	beq.n	80053ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d144      	bne.n	80053ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030d 	and.w	r3, r3, #13
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f901 	bl	800457c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2203      	movs	r2, #3
 8005380:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005382:	f7fe ff33 	bl	80041ec <HAL_GetTick>
 8005386:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005388:	e029      	b.n	80053de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f043 0210 	orr.w	r2, r3, #16
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e023      	b.n	80053ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053a6:	f7fe ff21 	bl	80041ec <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d914      	bls.n	80053de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0210 	orr.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e007      	b.n	80053ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1dc      	bne.n	80053a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d14b      	bne.n	80054a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d021      	beq.n	800546e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ff92 	bl	8004358 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d032      	beq.n	80054a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d12b      	bne.n	80054a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11f      	bne.n	80054a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
 800546c:	e018      	b.n	80054a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d111      	bne.n	80054a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fb45 	bl	8004b30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054a6:	e00e      	b.n	80054c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fb4f 	bl	8004b58 <HAL_ADC_ErrorCallback>
}
 80054ba:	e004      	b.n	80054c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fb31 	bl	8004b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff fb21 	bl	8004b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a7a      	ldr	r2, [pc, #488]	; (8005718 <ADC_ConfigureBoostMode+0x1f8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <ADC_ConfigureBoostMode+0x1c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a79      	ldr	r2, [pc, #484]	; (800571c <ADC_ConfigureBoostMode+0x1fc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d109      	bne.n	8005550 <ADC_ConfigureBoostMode+0x30>
 800553c:	4b78      	ldr	r3, [pc, #480]	; (8005720 <ADC_ConfigureBoostMode+0x200>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e008      	b.n	8005562 <ADC_ConfigureBoostMode+0x42>
 8005550:	4b74      	ldr	r3, [pc, #464]	; (8005724 <ADC_ConfigureBoostMode+0x204>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01c      	beq.n	80055a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005566:	f005 fd63 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800556a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005574:	d010      	beq.n	8005598 <ADC_ConfigureBoostMode+0x78>
 8005576:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800557a:	d873      	bhi.n	8005664 <ADC_ConfigureBoostMode+0x144>
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d002      	beq.n	8005588 <ADC_ConfigureBoostMode+0x68>
 8005582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005586:	d16d      	bne.n	8005664 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	60fb      	str	r3, [r7, #12]
        break;
 8005596:	e068      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	60fb      	str	r3, [r7, #12]
        break;
 800559e:	e064      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80055a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f006 ffea 	bl	800c580 <HAL_RCCEx_GetPeriphCLKFreq>
 80055ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055b6:	d051      	beq.n	800565c <ADC_ConfigureBoostMode+0x13c>
 80055b8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055bc:	d854      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055c2:	d047      	beq.n	8005654 <ADC_ConfigureBoostMode+0x134>
 80055c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055c8:	d84e      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80055ce:	d03d      	beq.n	800564c <ADC_ConfigureBoostMode+0x12c>
 80055d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80055d4:	d848      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055da:	d033      	beq.n	8005644 <ADC_ConfigureBoostMode+0x124>
 80055dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e0:	d842      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80055e6:	d029      	beq.n	800563c <ADC_ConfigureBoostMode+0x11c>
 80055e8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80055ec:	d83c      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80055f2:	d01a      	beq.n	800562a <ADC_ConfigureBoostMode+0x10a>
 80055f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80055f8:	d836      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 80055fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055fe:	d014      	beq.n	800562a <ADC_ConfigureBoostMode+0x10a>
 8005600:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005604:	d830      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d00e      	beq.n	800562a <ADC_ConfigureBoostMode+0x10a>
 800560c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005610:	d82a      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 8005612:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005616:	d008      	beq.n	800562a <ADC_ConfigureBoostMode+0x10a>
 8005618:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800561c:	d824      	bhi.n	8005668 <ADC_ConfigureBoostMode+0x148>
 800561e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005622:	d002      	beq.n	800562a <ADC_ConfigureBoostMode+0x10a>
 8005624:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005628:	d11e      	bne.n	8005668 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	0c9b      	lsrs	r3, r3, #18
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	60fb      	str	r3, [r7, #12]
        break;
 800563a:	e016      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	60fb      	str	r3, [r7, #12]
        break;
 8005642:	e012      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	60fb      	str	r3, [r7, #12]
        break;
 800564a:	e00e      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	099b      	lsrs	r3, r3, #6
 8005650:	60fb      	str	r3, [r7, #12]
        break;
 8005652:	e00a      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
        break;
 800565a:	e006      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	60fb      	str	r3, [r7, #12]
        break;
 8005662:	e002      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005664:	bf00      	nop
 8005666:	e000      	b.n	800566a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005668:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800566a:	f7fe fdcb 	bl	8004204 <HAL_GetREVID>
 800566e:	4603      	mov	r3, r0
 8005670:	f241 0203 	movw	r2, #4099	; 0x1003
 8005674:	4293      	cmp	r3, r2
 8005676:	d815      	bhi.n	80056a4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <ADC_ConfigureBoostMode+0x208>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d908      	bls.n	8005692 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005690:	e03e      	b.n	8005710 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a0:	609a      	str	r2, [r3, #8]
}
 80056a2:	e035      	b.n	8005710 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <ADC_ConfigureBoostMode+0x20c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d808      	bhi.n	80056c4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056c0:	609a      	str	r2, [r3, #8]
}
 80056c2:	e025      	b.n	8005710 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <ADC_ConfigureBoostMode+0x210>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d80a      	bhi.n	80056e2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	609a      	str	r2, [r3, #8]
}
 80056e0:	e016      	b.n	8005710 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a13      	ldr	r2, [pc, #76]	; (8005734 <ADC_ConfigureBoostMode+0x214>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d80a      	bhi.n	8005700 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	609a      	str	r2, [r3, #8]
}
 80056fe:	e007      	b.n	8005710 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40022000 	.word	0x40022000
 800571c:	40022100 	.word	0x40022100
 8005720:	40022300 	.word	0x40022300
 8005724:	58026300 	.word	0x58026300
 8005728:	01312d00 	.word	0x01312d00
 800572c:	005f5e10 	.word	0x005f5e10
 8005730:	00bebc20 	.word	0x00bebc20
 8005734:	017d7840 	.word	0x017d7840

08005738 <LL_ADC_IsEnabled>:
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <LL_ADC_IsEnabled+0x18>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <LL_ADC_IsEnabled+0x1a>
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <LL_ADC_StartCalibration>:
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <LL_ADC_StartCalibration+0x38>)
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005780:	430a      	orrs	r2, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	3ffeffc0 	.word	0x3ffeffc0

0800579c <LL_ADC_IsCalibrationOnGoing>:
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b0:	d101      	bne.n	80057b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_ADC_REG_IsConversionOngoing>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d101      	bne.n	80057dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_ADCEx_Calibration_Start+0x1e>
 8005806:	2302      	movs	r3, #2
 8005808:	e04c      	b.n	80058a4 <HAL_ADCEx_Calibration_Start+0xb8>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fd90 	bl	8005338 <ADC_Disable>
 8005818:	4603      	mov	r3, r0
 800581a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d135      	bne.n	800588e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <HAL_ADCEx_Calibration_Start+0xc0>)
 8005828:	4013      	ands	r3, r2
 800582a:	f043 0202 	orr.w	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff90 	bl	8005760 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005840:	e014      	b.n	800586c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d30d      	bcc.n	800586c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f023 0312 	bic.w	r3, r3, #18
 8005858:	f043 0210 	orr.w	r2, r3, #16
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e01b      	b.n	80058a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff93 	bl	800579c <LL_ADC_IsCalibrationOnGoing>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e2      	bne.n	8005842 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
 800588c:	e005      	b.n	800589a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f043 0210 	orr.w	r2, r3, #16
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	ffffeefd 	.word	0xffffeefd
 80058b0:	25c3f800 	.word	0x25c3f800

080058b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b09f      	sub	sp, #124	; 0x7c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0be      	b.n	8005a50 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80058de:	2300      	movs	r3, #0
 80058e0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a5c      	ldr	r2, [pc, #368]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d102      	bne.n	80058f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80058ec:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	e001      	b.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e09d      	b.n	8005a50 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff ff54 	bl	80057c4 <LL_ADC_REG_IsConversionOngoing>
 800591c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff4e 	bl	80057c4 <LL_ADC_REG_IsConversionOngoing>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d17f      	bne.n	8005a2e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800592e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005930:	2b00      	cmp	r3, #0
 8005932:	d17c      	bne.n	8005a2e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a47      	ldr	r2, [pc, #284]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a46      	ldr	r2, [pc, #280]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005948:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800594a:	e000      	b.n	800594e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800594c:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800594e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d039      	beq.n	80059cc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	431a      	orrs	r2, r3
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10e      	bne.n	800599c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800597e:	4836      	ldr	r0, [pc, #216]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005980:	f7ff feda 	bl	8005738 <LL_ADC_IsEnabled>
 8005984:	4604      	mov	r4, r0
 8005986:	4835      	ldr	r0, [pc, #212]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005988:	f7ff fed6 	bl	8005738 <LL_ADC_IsEnabled>
 800598c:	4603      	mov	r3, r0
 800598e:	4323      	orrs	r3, r4
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e008      	b.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800599c:	4832      	ldr	r0, [pc, #200]	; (8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800599e:	f7ff fecb 	bl	8005738 <LL_ADC_IsEnabled>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d047      	beq.n	8005a42 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059ca:	e03a      	b.n	8005a42 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10e      	bne.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80059ec:	481a      	ldr	r0, [pc, #104]	; (8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059ee:	f7ff fea3 	bl	8005738 <LL_ADC_IsEnabled>
 80059f2:	4604      	mov	r4, r0
 80059f4:	4819      	ldr	r0, [pc, #100]	; (8005a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059f6:	f7ff fe9f 	bl	8005738 <LL_ADC_IsEnabled>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4323      	orrs	r3, r4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e008      	b.n	8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005a0a:	4817      	ldr	r0, [pc, #92]	; (8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005a0c:	f7ff fe94 	bl	8005738 <LL_ADC_IsEnabled>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a2a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a2c:	e009      	b.n	8005a42 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005a40:	e000      	b.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a42:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	377c      	adds	r7, #124	; 0x7c
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}
 8005a58:	40022000 	.word	0x40022000
 8005a5c:	40022100 	.word	0x40022100
 8005a60:	40022300 	.word	0x40022300
 8005a64:	58026300 	.word	0x58026300
 8005a68:	58026000 	.word	0x58026000
 8005a6c:	fffff0e0 	.word	0xfffff0e0

08005a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a9e:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	60d3      	str	r3, [r2, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000ed00 	.word	0xe000ed00
 8005ab4:	05fa0000 	.word	0x05fa0000

08005ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db0b      	blt.n	8005afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4907      	ldr	r1, [pc, #28]	; (8005b0c <__NVIC_EnableIRQ+0x38>)
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2001      	movs	r0, #1
 8005af6:	fa00 f202 	lsl.w	r2, r0, r2
 8005afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	e000e100 	.word	0xe000e100

08005b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db0a      	blt.n	8005b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	490c      	ldr	r1, [pc, #48]	; (8005b5c <__NVIC_SetPriority+0x4c>)
 8005b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	440b      	add	r3, r1
 8005b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b38:	e00a      	b.n	8005b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4908      	ldr	r1, [pc, #32]	; (8005b60 <__NVIC_SetPriority+0x50>)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3b04      	subs	r3, #4
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	761a      	strb	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f1c3 0307 	rsb	r3, r3, #7
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf28      	it	cs
 8005b82:	2304      	movcs	r3, #4
 8005b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d902      	bls.n	8005b94 <NVIC_EncodePriority+0x30>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3b03      	subs	r3, #3
 8005b92:	e000      	b.n	8005b96 <NVIC_EncodePriority+0x32>
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	43d9      	mvns	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bbc:	4313      	orrs	r3, r2
         );
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	; 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ff4c 	bl	8005a70 <__NVIC_SetPriorityGrouping>
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bee:	f7ff ff63 	bl	8005ab8 <__NVIC_GetPriorityGrouping>
 8005bf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f7ff ffb3 	bl	8005b64 <NVIC_EncodePriority>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ff82 	bl	8005b10 <__NVIC_SetPriority>
}
 8005c0c:	bf00      	nop
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff ff56 	bl	8005ad4 <__NVIC_EnableIRQ>
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e014      	b.n	8005c6c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fa ffc6 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e046      	b.n	8005d16 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	795b      	ldrb	r3, [r3, #5]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_DAC_Start+0x20>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e040      	b.n	8005d16 <HAL_DAC_Start+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2201      	movs	r2, #1
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d11d      	bne.n	8005d08 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e014      	b.n	8005d08 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2102      	movs	r1, #2
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d107      	bne.n	8005d08 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0202 	orr.w	r2, r2, #2
 8005d06:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0a2      	b.n	8005e82 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	795b      	ldrb	r3, [r3, #5]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_DAC_Start_DMA+0x24>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e09c      	b.n	8005e82 <HAL_DAC_Start_DMA+0x15e>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2202      	movs	r2, #2
 8005d52:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d129      	bne.n	8005dae <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a4b      	ldr	r2, [pc, #300]	; (8005e8c <HAL_DAC_Start_DMA+0x168>)
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <HAL_DAC_Start_DMA+0x16c>)
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4a49      	ldr	r2, [pc, #292]	; (8005e94 <HAL_DAC_Start_DMA+0x170>)
 8005d70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d80:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_DAC_Start_DMA+0x6c>
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d005      	beq.n	8005d9a <HAL_DAC_Start_DMA+0x76>
 8005d8e:	e009      	b.n	8005da4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	613b      	str	r3, [r7, #16]
        break;
 8005d98:	e033      	b.n	8005e02 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	613b      	str	r3, [r7, #16]
        break;
 8005da2:	e02e      	b.n	8005e02 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3310      	adds	r3, #16
 8005daa:	613b      	str	r3, [r7, #16]
        break;
 8005dac:	e029      	b.n	8005e02 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4a39      	ldr	r2, [pc, #228]	; (8005e98 <HAL_DAC_Start_DMA+0x174>)
 8005db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4a38      	ldr	r2, [pc, #224]	; (8005e9c <HAL_DAC_Start_DMA+0x178>)
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <HAL_DAC_Start_DMA+0x17c>)
 8005dc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_DAC_Start_DMA+0xc0>
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d005      	beq.n	8005dee <HAL_DAC_Start_DMA+0xca>
 8005de2:	e009      	b.n	8005df8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3314      	adds	r3, #20
 8005dea:	613b      	str	r3, [r7, #16]
        break;
 8005dec:	e009      	b.n	8005e02 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3318      	adds	r3, #24
 8005df4:	613b      	str	r3, [r7, #16]
        break;
 8005df6:	e004      	b.n	8005e02 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	331c      	adds	r3, #28
 8005dfe:	613b      	str	r3, [r7, #16]
        break;
 8005e00:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d111      	bne.n	8005e2c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6898      	ldr	r0, [r3, #8]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	f000 fe67 	bl	8006af4 <HAL_DMA_Start_IT>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]
 8005e2a:	e010      	b.n	8005e4e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005e3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68d8      	ldr	r0, [r3, #12]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	f000 fe55 	bl	8006af4 <HAL_DMA_Start_IT>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10c      	bne.n	8005e74 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2201      	movs	r2, #1
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e005      	b.n	8005e80 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006315 	.word	0x08006315
 8005e90:	08006337 	.word	0x08006337
 8005e94:	08006353 	.word	0x08006353
 8005e98:	080063d1 	.word	0x080063d1
 8005e9c:	080063f3 	.word	0x080063f3
 8005ea0:	0800640f 	.word	0x0800640f

08005ea4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e03e      	b.n	8005f36 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43da      	mvns	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6819      	ldr	r1, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43da      	mvns	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	400a      	ands	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f863 	bl	8006fc8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e00c      	b.n	8005f2e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f855 	bl	8006fc8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005f2c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01d      	beq.n	8005f9c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f94:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f86f 	bl	800607a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d018      	beq.n	8005fe2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f043 0202 	orr.w	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005fca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f9ed 	bl	80063bc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b087      	sub	sp, #28
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e015      	b.n	8006032 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d105      	bne.n	800601e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	3308      	adds	r3, #8
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e004      	b.n	8006028 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	3314      	adds	r3, #20
 8006026:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	461a      	mov	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_DAC_ConfigChannel+0x1e>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e12a      	b.n	8006308 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	795b      	ldrb	r3, [r3, #5]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_DAC_ConfigChannel+0x2e>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e124      	b.n	8006308 <HAL_DAC_ConfigChannel+0x278>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2202      	movs	r2, #2
 80060c8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d17a      	bne.n	80061c8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80060d2:	f7fe f88b 	bl	80041ec <HAL_GetTick>
 80060d6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060de:	e018      	b.n	8006112 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060e0:	f7fe f884 	bl	80041ec <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d911      	bls.n	8006112 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f4:	4b86      	ldr	r3, [pc, #536]	; (8006310 <HAL_DAC_ConfigChannel+0x280>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f043 0208 	orr.w	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2203      	movs	r2, #3
 800610c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e0fa      	b.n	8006308 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006118:	4b7d      	ldr	r3, [pc, #500]	; (8006310 <HAL_DAC_ConfigChannel+0x280>)
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1df      	bne.n	80060e0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	6992      	ldr	r2, [r2, #24]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
 800612a:	e020      	b.n	800616e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800612c:	f7fe f85e 	bl	80041ec <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d90f      	bls.n	800615a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	da0a      	bge.n	800615a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f043 0208 	orr.w	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2203      	movs	r2, #3
 8006154:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e0d6      	b.n	8006308 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	2b00      	cmp	r3, #0
 8006162:	dbe3      	blt.n	800612c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	6992      	ldr	r2, [r2, #24]
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	ea02 0103 	and.w	r1, r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	409a      	lsls	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	21ff      	movs	r1, #255	; 0xff
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	ea02 0103 	and.w	r1, r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6a1a      	ldr	r2, [r3, #32]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d11d      	bne.n	800620c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	221f      	movs	r2, #31
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2207      	movs	r2, #7
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d102      	bne.n	8006236 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006230:	2300      	movs	r3, #0
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
 8006234:	e00f      	b.n	8006256 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d102      	bne.n	8006244 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800623e:	2301      	movs	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	e008      	b.n	8006256 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800624c:	2301      	movs	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
 8006250:	e001      	b.n	8006256 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006252:	2300      	movs	r3, #0
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4313      	orrs	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43da      	mvns	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	400a      	ands	r2, r1
 800629c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4013      	ands	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	22c0      	movs	r2, #192	; 0xc0
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	400a      	ands	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20008000 	.word	0x20008000

08006314 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff fe8b 	bl	800603e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	711a      	strb	r2, [r3, #4]
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff fe84 	bl	8006052 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f043 0204 	orr.w	r2, r3, #4
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff fe7a 	bl	8006066 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	711a      	strb	r2, [r3, #4]
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff ffce 	bl	8006380 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	711a      	strb	r2, [r3, #4]
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff ffc7 	bl	8006394 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f043 0204 	orr.w	r2, r3, #4
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff ffbd 	bl	80063a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	711a      	strb	r2, [r3, #4]
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006444:	f7fd fed2 	bl	80041ec <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e316      	b.n	8006a82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a66      	ldr	r2, [pc, #408]	; (80065f4 <HAL_DMA_Init+0x1b8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d04a      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a65      	ldr	r2, [pc, #404]	; (80065f8 <HAL_DMA_Init+0x1bc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d045      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a63      	ldr	r2, [pc, #396]	; (80065fc <HAL_DMA_Init+0x1c0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d040      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a62      	ldr	r2, [pc, #392]	; (8006600 <HAL_DMA_Init+0x1c4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d03b      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a60      	ldr	r2, [pc, #384]	; (8006604 <HAL_DMA_Init+0x1c8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d036      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a5f      	ldr	r2, [pc, #380]	; (8006608 <HAL_DMA_Init+0x1cc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d031      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5d      	ldr	r2, [pc, #372]	; (800660c <HAL_DMA_Init+0x1d0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02c      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a5c      	ldr	r2, [pc, #368]	; (8006610 <HAL_DMA_Init+0x1d4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d027      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5a      	ldr	r2, [pc, #360]	; (8006614 <HAL_DMA_Init+0x1d8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a59      	ldr	r2, [pc, #356]	; (8006618 <HAL_DMA_Init+0x1dc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d01d      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a57      	ldr	r2, [pc, #348]	; (800661c <HAL_DMA_Init+0x1e0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d018      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a56      	ldr	r2, [pc, #344]	; (8006620 <HAL_DMA_Init+0x1e4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a54      	ldr	r2, [pc, #336]	; (8006624 <HAL_DMA_Init+0x1e8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a53      	ldr	r2, [pc, #332]	; (8006628 <HAL_DMA_Init+0x1ec>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a51      	ldr	r2, [pc, #324]	; (800662c <HAL_DMA_Init+0x1f0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_DMA_Init+0xb8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a50      	ldr	r2, [pc, #320]	; (8006630 <HAL_DMA_Init+0x1f4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d101      	bne.n	80064f8 <HAL_DMA_Init+0xbc>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_DMA_Init+0xbe>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 813b 	beq.w	8006776 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a37      	ldr	r2, [pc, #220]	; (80065f4 <HAL_DMA_Init+0x1b8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04a      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a36      	ldr	r2, [pc, #216]	; (80065f8 <HAL_DMA_Init+0x1bc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d045      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a34      	ldr	r2, [pc, #208]	; (80065fc <HAL_DMA_Init+0x1c0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d040      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a33      	ldr	r2, [pc, #204]	; (8006600 <HAL_DMA_Init+0x1c4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d03b      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a31      	ldr	r2, [pc, #196]	; (8006604 <HAL_DMA_Init+0x1c8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d036      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a30      	ldr	r2, [pc, #192]	; (8006608 <HAL_DMA_Init+0x1cc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d031      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2e      	ldr	r2, [pc, #184]	; (800660c <HAL_DMA_Init+0x1d0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a2d      	ldr	r2, [pc, #180]	; (8006610 <HAL_DMA_Init+0x1d4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d027      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2b      	ldr	r2, [pc, #172]	; (8006614 <HAL_DMA_Init+0x1d8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <HAL_DMA_Init+0x1dc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d01d      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a28      	ldr	r2, [pc, #160]	; (800661c <HAL_DMA_Init+0x1e0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a27      	ldr	r2, [pc, #156]	; (8006620 <HAL_DMA_Init+0x1e4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <HAL_DMA_Init+0x1e8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a24      	ldr	r2, [pc, #144]	; (8006628 <HAL_DMA_Init+0x1ec>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a22      	ldr	r2, [pc, #136]	; (800662c <HAL_DMA_Init+0x1f0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_DMA_Init+0x174>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a21      	ldr	r2, [pc, #132]	; (8006630 <HAL_DMA_Init+0x1f4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d108      	bne.n	80065c2 <HAL_DMA_Init+0x186>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e007      	b.n	80065d2 <HAL_DMA_Init+0x196>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065d2:	e02f      	b.n	8006634 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065d4:	f7fd fe0a 	bl	80041ec <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d928      	bls.n	8006634 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2203      	movs	r2, #3
 80065ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e246      	b.n	8006a82 <HAL_DMA_Init+0x646>
 80065f4:	40020010 	.word	0x40020010
 80065f8:	40020028 	.word	0x40020028
 80065fc:	40020040 	.word	0x40020040
 8006600:	40020058 	.word	0x40020058
 8006604:	40020070 	.word	0x40020070
 8006608:	40020088 	.word	0x40020088
 800660c:	400200a0 	.word	0x400200a0
 8006610:	400200b8 	.word	0x400200b8
 8006614:	40020410 	.word	0x40020410
 8006618:	40020428 	.word	0x40020428
 800661c:	40020440 	.word	0x40020440
 8006620:	40020458 	.word	0x40020458
 8006624:	40020470 	.word	0x40020470
 8006628:	40020488 	.word	0x40020488
 800662c:	400204a0 	.word	0x400204a0
 8006630:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1c8      	bne.n	80065d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4b83      	ldr	r3, [pc, #524]	; (800685c <HAL_DMA_Init+0x420>)
 800664e:	4013      	ands	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800665a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006666:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006672:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b04      	cmp	r3, #4
 8006686:	d107      	bne.n	8006698 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	4313      	orrs	r3, r2
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006698:	4b71      	ldr	r3, [pc, #452]	; (8006860 <HAL_DMA_Init+0x424>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4b71      	ldr	r3, [pc, #452]	; (8006864 <HAL_DMA_Init+0x428>)
 800669e:	4013      	ands	r3, r2
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a4:	d328      	bcc.n	80066f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b28      	cmp	r3, #40	; 0x28
 80066ac:	d903      	bls.n	80066b6 <HAL_DMA_Init+0x27a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b2e      	cmp	r3, #46	; 0x2e
 80066b4:	d917      	bls.n	80066e6 <HAL_DMA_Init+0x2aa>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b3e      	cmp	r3, #62	; 0x3e
 80066bc:	d903      	bls.n	80066c6 <HAL_DMA_Init+0x28a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b42      	cmp	r3, #66	; 0x42
 80066c4:	d90f      	bls.n	80066e6 <HAL_DMA_Init+0x2aa>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b46      	cmp	r3, #70	; 0x46
 80066cc:	d903      	bls.n	80066d6 <HAL_DMA_Init+0x29a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b48      	cmp	r3, #72	; 0x48
 80066d4:	d907      	bls.n	80066e6 <HAL_DMA_Init+0x2aa>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b4e      	cmp	r3, #78	; 0x4e
 80066dc:	d905      	bls.n	80066ea <HAL_DMA_Init+0x2ae>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b52      	cmp	r3, #82	; 0x52
 80066e4:	d801      	bhi.n	80066ea <HAL_DMA_Init+0x2ae>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <HAL_DMA_Init+0x2b0>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b04      	cmp	r3, #4
 8006720:	d117      	bne.n	8006752 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f002 fb3f 	bl	8008db8 <DMA_CheckFifoParam>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2240      	movs	r2, #64	; 0x40
 8006744:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e197      	b.n	8006a82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f002 fa7a 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 8006760:	4603      	mov	r3, r0
 8006762:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	223f      	movs	r2, #63	; 0x3f
 800676e:	409a      	lsls	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	e0cd      	b.n	8006912 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3b      	ldr	r2, [pc, #236]	; (8006868 <HAL_DMA_Init+0x42c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a39      	ldr	r2, [pc, #228]	; (800686c <HAL_DMA_Init+0x430>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d01d      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a38      	ldr	r2, [pc, #224]	; (8006870 <HAL_DMA_Init+0x434>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a36      	ldr	r2, [pc, #216]	; (8006874 <HAL_DMA_Init+0x438>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a35      	ldr	r2, [pc, #212]	; (8006878 <HAL_DMA_Init+0x43c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a33      	ldr	r2, [pc, #204]	; (800687c <HAL_DMA_Init+0x440>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a32      	ldr	r2, [pc, #200]	; (8006880 <HAL_DMA_Init+0x444>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_DMA_Init+0x38a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a30      	ldr	r2, [pc, #192]	; (8006884 <HAL_DMA_Init+0x448>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <HAL_DMA_Init+0x38e>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <HAL_DMA_Init+0x390>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8097 	beq.w	8006900 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a24      	ldr	r2, [pc, #144]	; (8006868 <HAL_DMA_Init+0x42c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d021      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <HAL_DMA_Init+0x430>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01c      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_DMA_Init+0x434>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d017      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_DMA_Init+0x438>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d012      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_DMA_Init+0x43c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00d      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_DMA_Init+0x440>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d008      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_DMA_Init+0x444>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <HAL_DMA_Init+0x3e4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a19      	ldr	r2, [pc, #100]	; (8006884 <HAL_DMA_Init+0x448>)
 800681e:	4293      	cmp	r3, r2
 8006820:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_DMA_Init+0x44c>)
 800683e:	4013      	ands	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d020      	beq.n	800688c <HAL_DMA_Init+0x450>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d102      	bne.n	8006858 <HAL_DMA_Init+0x41c>
 8006852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006856:	e01a      	b.n	800688e <HAL_DMA_Init+0x452>
 8006858:	2300      	movs	r3, #0
 800685a:	e018      	b.n	800688e <HAL_DMA_Init+0x452>
 800685c:	fe10803f 	.word	0xfe10803f
 8006860:	5c001000 	.word	0x5c001000
 8006864:	ffff0000 	.word	0xffff0000
 8006868:	58025408 	.word	0x58025408
 800686c:	5802541c 	.word	0x5802541c
 8006870:	58025430 	.word	0x58025430
 8006874:	58025444 	.word	0x58025444
 8006878:	58025458 	.word	0x58025458
 800687c:	5802546c 	.word	0x5802546c
 8006880:	58025480 	.word	0x58025480
 8006884:	58025494 	.word	0x58025494
 8006888:	fffe000f 	.word	0xfffe000f
 800688c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68d2      	ldr	r2, [r2, #12]
 8006892:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800689c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_DMA_Init+0x650>)
 80068d4:	4413      	add	r3, r2
 80068d6:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_DMA_Init+0x654>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	009a      	lsls	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 f9b5 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 80068ea:	4603      	mov	r3, r0
 80068ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2201      	movs	r2, #1
 80068f8:	409a      	lsls	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	e008      	b.n	8006912 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2240      	movs	r2, #64	; 0x40
 8006904:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2203      	movs	r2, #3
 800690a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0b7      	b.n	8006a82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5f      	ldr	r2, [pc, #380]	; (8006a94 <HAL_DMA_Init+0x658>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d072      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a5d      	ldr	r2, [pc, #372]	; (8006a98 <HAL_DMA_Init+0x65c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d06d      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a5c      	ldr	r2, [pc, #368]	; (8006a9c <HAL_DMA_Init+0x660>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d068      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a5a      	ldr	r2, [pc, #360]	; (8006aa0 <HAL_DMA_Init+0x664>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d063      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a59      	ldr	r2, [pc, #356]	; (8006aa4 <HAL_DMA_Init+0x668>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d05e      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a57      	ldr	r2, [pc, #348]	; (8006aa8 <HAL_DMA_Init+0x66c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d059      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a56      	ldr	r2, [pc, #344]	; (8006aac <HAL_DMA_Init+0x670>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d054      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a54      	ldr	r2, [pc, #336]	; (8006ab0 <HAL_DMA_Init+0x674>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d04f      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a53      	ldr	r2, [pc, #332]	; (8006ab4 <HAL_DMA_Init+0x678>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d04a      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a51      	ldr	r2, [pc, #324]	; (8006ab8 <HAL_DMA_Init+0x67c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d045      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a50      	ldr	r2, [pc, #320]	; (8006abc <HAL_DMA_Init+0x680>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d040      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a4e      	ldr	r2, [pc, #312]	; (8006ac0 <HAL_DMA_Init+0x684>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d03b      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a4d      	ldr	r2, [pc, #308]	; (8006ac4 <HAL_DMA_Init+0x688>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d036      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a4b      	ldr	r2, [pc, #300]	; (8006ac8 <HAL_DMA_Init+0x68c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d031      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a4a      	ldr	r2, [pc, #296]	; (8006acc <HAL_DMA_Init+0x690>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d02c      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a48      	ldr	r2, [pc, #288]	; (8006ad0 <HAL_DMA_Init+0x694>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d027      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a47      	ldr	r2, [pc, #284]	; (8006ad4 <HAL_DMA_Init+0x698>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d022      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a45      	ldr	r2, [pc, #276]	; (8006ad8 <HAL_DMA_Init+0x69c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01d      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a44      	ldr	r2, [pc, #272]	; (8006adc <HAL_DMA_Init+0x6a0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d018      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a42      	ldr	r2, [pc, #264]	; (8006ae0 <HAL_DMA_Init+0x6a4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <HAL_DMA_Init+0x6a8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00e      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <HAL_DMA_Init+0x6ac>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d009      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a3e      	ldr	r2, [pc, #248]	; (8006aec <HAL_DMA_Init+0x6b0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d004      	beq.n	8006a02 <HAL_DMA_Init+0x5c6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <HAL_DMA_Init+0x6b4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <HAL_DMA_Init+0x5ca>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <HAL_DMA_Init+0x5cc>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d032      	beq.n	8006a72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 fa4f 	bl	8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d102      	bne.n	8006a20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_DMA_Init+0x624>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d80c      	bhi.n	8006a60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f002 facc 	bl	8008fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	e008      	b.n	8006a72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	a7fdabf8 	.word	0xa7fdabf8
 8006a90:	cccccccd 	.word	0xcccccccd
 8006a94:	40020010 	.word	0x40020010
 8006a98:	40020028 	.word	0x40020028
 8006a9c:	40020040 	.word	0x40020040
 8006aa0:	40020058 	.word	0x40020058
 8006aa4:	40020070 	.word	0x40020070
 8006aa8:	40020088 	.word	0x40020088
 8006aac:	400200a0 	.word	0x400200a0
 8006ab0:	400200b8 	.word	0x400200b8
 8006ab4:	40020410 	.word	0x40020410
 8006ab8:	40020428 	.word	0x40020428
 8006abc:	40020440 	.word	0x40020440
 8006ac0:	40020458 	.word	0x40020458
 8006ac4:	40020470 	.word	0x40020470
 8006ac8:	40020488 	.word	0x40020488
 8006acc:	400204a0 	.word	0x400204a0
 8006ad0:	400204b8 	.word	0x400204b8
 8006ad4:	58025408 	.word	0x58025408
 8006ad8:	5802541c 	.word	0x5802541c
 8006adc:	58025430 	.word	0x58025430
 8006ae0:	58025444 	.word	0x58025444
 8006ae4:	58025458 	.word	0x58025458
 8006ae8:	5802546c 	.word	0x5802546c
 8006aec:	58025480 	.word	0x58025480
 8006af0:	58025494 	.word	0x58025494

08006af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e226      	b.n	8006f5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_DMA_Start_IT+0x2a>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e21f      	b.n	8006f5e <HAL_DMA_Start_IT+0x46a>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	f040 820a 	bne.w	8006f48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a68      	ldr	r2, [pc, #416]	; (8006ce8 <HAL_DMA_Start_IT+0x1f4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d04a      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a66      	ldr	r2, [pc, #408]	; (8006cec <HAL_DMA_Start_IT+0x1f8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d045      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a65      	ldr	r2, [pc, #404]	; (8006cf0 <HAL_DMA_Start_IT+0x1fc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d040      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a63      	ldr	r2, [pc, #396]	; (8006cf4 <HAL_DMA_Start_IT+0x200>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d03b      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a62      	ldr	r2, [pc, #392]	; (8006cf8 <HAL_DMA_Start_IT+0x204>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d036      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a60      	ldr	r2, [pc, #384]	; (8006cfc <HAL_DMA_Start_IT+0x208>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d031      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a5f      	ldr	r2, [pc, #380]	; (8006d00 <HAL_DMA_Start_IT+0x20c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d02c      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5d      	ldr	r2, [pc, #372]	; (8006d04 <HAL_DMA_Start_IT+0x210>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d027      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5c      	ldr	r2, [pc, #368]	; (8006d08 <HAL_DMA_Start_IT+0x214>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5a      	ldr	r2, [pc, #360]	; (8006d0c <HAL_DMA_Start_IT+0x218>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a59      	ldr	r2, [pc, #356]	; (8006d10 <HAL_DMA_Start_IT+0x21c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a57      	ldr	r2, [pc, #348]	; (8006d14 <HAL_DMA_Start_IT+0x220>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a56      	ldr	r2, [pc, #344]	; (8006d18 <HAL_DMA_Start_IT+0x224>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a54      	ldr	r2, [pc, #336]	; (8006d1c <HAL_DMA_Start_IT+0x228>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a53      	ldr	r2, [pc, #332]	; (8006d20 <HAL_DMA_Start_IT+0x22c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_DMA_Start_IT+0xee>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a51      	ldr	r2, [pc, #324]	; (8006d24 <HAL_DMA_Start_IT+0x230>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d108      	bne.n	8006bf4 <HAL_DMA_Start_IT+0x100>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e007      	b.n	8006c04 <HAL_DMA_Start_IT+0x110>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 fe76 	bl	80088fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a34      	ldr	r2, [pc, #208]	; (8006ce8 <HAL_DMA_Start_IT+0x1f4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04a      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a33      	ldr	r2, [pc, #204]	; (8006cec <HAL_DMA_Start_IT+0x1f8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d045      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a31      	ldr	r2, [pc, #196]	; (8006cf0 <HAL_DMA_Start_IT+0x1fc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d040      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a30      	ldr	r2, [pc, #192]	; (8006cf4 <HAL_DMA_Start_IT+0x200>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03b      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2e      	ldr	r2, [pc, #184]	; (8006cf8 <HAL_DMA_Start_IT+0x204>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d036      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <HAL_DMA_Start_IT+0x208>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d031      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <HAL_DMA_Start_IT+0x20c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02c      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a2a      	ldr	r2, [pc, #168]	; (8006d04 <HAL_DMA_Start_IT+0x210>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d027      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <HAL_DMA_Start_IT+0x214>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d022      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <HAL_DMA_Start_IT+0x218>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01d      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <HAL_DMA_Start_IT+0x21c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a24      	ldr	r2, [pc, #144]	; (8006d14 <HAL_DMA_Start_IT+0x220>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <HAL_DMA_Start_IT+0x224>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a21      	ldr	r2, [pc, #132]	; (8006d1c <HAL_DMA_Start_IT+0x228>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_DMA_Start_IT+0x22c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x1bc>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_DMA_Start_IT+0x230>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_DMA_Start_IT+0x1c0>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_DMA_Start_IT+0x1c2>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d036      	beq.n	8006d28 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f023 021e 	bic.w	r2, r3, #30
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0216 	orr.w	r2, r2, #22
 8006ccc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d03e      	beq.n	8006d54 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0208 	orr.w	r2, r2, #8
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e035      	b.n	8006d54 <HAL_DMA_Start_IT+0x260>
 8006ce8:	40020010 	.word	0x40020010
 8006cec:	40020028 	.word	0x40020028
 8006cf0:	40020040 	.word	0x40020040
 8006cf4:	40020058 	.word	0x40020058
 8006cf8:	40020070 	.word	0x40020070
 8006cfc:	40020088 	.word	0x40020088
 8006d00:	400200a0 	.word	0x400200a0
 8006d04:	400200b8 	.word	0x400200b8
 8006d08:	40020410 	.word	0x40020410
 8006d0c:	40020428 	.word	0x40020428
 8006d10:	40020440 	.word	0x40020440
 8006d14:	40020458 	.word	0x40020458
 8006d18:	40020470 	.word	0x40020470
 8006d1c:	40020488 	.word	0x40020488
 8006d20:	400204a0 	.word	0x400204a0
 8006d24:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f023 020e 	bic.w	r2, r3, #14
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 020a 	orr.w	r2, r2, #10
 8006d3a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0204 	orr.w	r2, r2, #4
 8006d52:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a83      	ldr	r2, [pc, #524]	; (8006f68 <HAL_DMA_Start_IT+0x474>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d072      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a82      	ldr	r2, [pc, #520]	; (8006f6c <HAL_DMA_Start_IT+0x478>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d06d      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <HAL_DMA_Start_IT+0x47c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d068      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a7f      	ldr	r2, [pc, #508]	; (8006f74 <HAL_DMA_Start_IT+0x480>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d063      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a7d      	ldr	r2, [pc, #500]	; (8006f78 <HAL_DMA_Start_IT+0x484>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d05e      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a7c      	ldr	r2, [pc, #496]	; (8006f7c <HAL_DMA_Start_IT+0x488>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d059      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a7a      	ldr	r2, [pc, #488]	; (8006f80 <HAL_DMA_Start_IT+0x48c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d054      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a79      	ldr	r2, [pc, #484]	; (8006f84 <HAL_DMA_Start_IT+0x490>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d04f      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_DMA_Start_IT+0x494>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d04a      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a76      	ldr	r2, [pc, #472]	; (8006f8c <HAL_DMA_Start_IT+0x498>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d045      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a74      	ldr	r2, [pc, #464]	; (8006f90 <HAL_DMA_Start_IT+0x49c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d040      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a73      	ldr	r2, [pc, #460]	; (8006f94 <HAL_DMA_Start_IT+0x4a0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d03b      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a71      	ldr	r2, [pc, #452]	; (8006f98 <HAL_DMA_Start_IT+0x4a4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d036      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a70      	ldr	r2, [pc, #448]	; (8006f9c <HAL_DMA_Start_IT+0x4a8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d031      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a6e      	ldr	r2, [pc, #440]	; (8006fa0 <HAL_DMA_Start_IT+0x4ac>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d02c      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a6d      	ldr	r2, [pc, #436]	; (8006fa4 <HAL_DMA_Start_IT+0x4b0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d027      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6b      	ldr	r2, [pc, #428]	; (8006fa8 <HAL_DMA_Start_IT+0x4b4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d022      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a6a      	ldr	r2, [pc, #424]	; (8006fac <HAL_DMA_Start_IT+0x4b8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d01d      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a68      	ldr	r2, [pc, #416]	; (8006fb0 <HAL_DMA_Start_IT+0x4bc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d018      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a67      	ldr	r2, [pc, #412]	; (8006fb4 <HAL_DMA_Start_IT+0x4c0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d013      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a65      	ldr	r2, [pc, #404]	; (8006fb8 <HAL_DMA_Start_IT+0x4c4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a64      	ldr	r2, [pc, #400]	; (8006fbc <HAL_DMA_Start_IT+0x4c8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a62      	ldr	r2, [pc, #392]	; (8006fc0 <HAL_DMA_Start_IT+0x4cc>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_DMA_Start_IT+0x350>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a61      	ldr	r2, [pc, #388]	; (8006fc4 <HAL_DMA_Start_IT+0x4d0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d101      	bne.n	8006e48 <HAL_DMA_Start_IT+0x354>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_DMA_Start_IT+0x356>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01a      	beq.n	8006e84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a37      	ldr	r2, [pc, #220]	; (8006f68 <HAL_DMA_Start_IT+0x474>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a36      	ldr	r2, [pc, #216]	; (8006f6c <HAL_DMA_Start_IT+0x478>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a34      	ldr	r2, [pc, #208]	; (8006f70 <HAL_DMA_Start_IT+0x47c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a33      	ldr	r2, [pc, #204]	; (8006f74 <HAL_DMA_Start_IT+0x480>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a31      	ldr	r2, [pc, #196]	; (8006f78 <HAL_DMA_Start_IT+0x484>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_DMA_Start_IT+0x488>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2e      	ldr	r2, [pc, #184]	; (8006f80 <HAL_DMA_Start_IT+0x48c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_DMA_Start_IT+0x490>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2b      	ldr	r2, [pc, #172]	; (8006f88 <HAL_DMA_Start_IT+0x494>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_DMA_Start_IT+0x498>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a28      	ldr	r2, [pc, #160]	; (8006f90 <HAL_DMA_Start_IT+0x49c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a27      	ldr	r2, [pc, #156]	; (8006f94 <HAL_DMA_Start_IT+0x4a0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a25      	ldr	r2, [pc, #148]	; (8006f98 <HAL_DMA_Start_IT+0x4a4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <HAL_DMA_Start_IT+0x4a8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_DMA_Start_IT+0x4ac>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_DMA_Start_IT+0x430>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <HAL_DMA_Start_IT+0x4b0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <HAL_DMA_Start_IT+0x442>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e012      	b.n	8006f5c <HAL_DMA_Start_IT+0x468>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e009      	b.n	8006f5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40020010 	.word	0x40020010
 8006f6c:	40020028 	.word	0x40020028
 8006f70:	40020040 	.word	0x40020040
 8006f74:	40020058 	.word	0x40020058
 8006f78:	40020070 	.word	0x40020070
 8006f7c:	40020088 	.word	0x40020088
 8006f80:	400200a0 	.word	0x400200a0
 8006f84:	400200b8 	.word	0x400200b8
 8006f88:	40020410 	.word	0x40020410
 8006f8c:	40020428 	.word	0x40020428
 8006f90:	40020440 	.word	0x40020440
 8006f94:	40020458 	.word	0x40020458
 8006f98:	40020470 	.word	0x40020470
 8006f9c:	40020488 	.word	0x40020488
 8006fa0:	400204a0 	.word	0x400204a0
 8006fa4:	400204b8 	.word	0x400204b8
 8006fa8:	58025408 	.word	0x58025408
 8006fac:	5802541c 	.word	0x5802541c
 8006fb0:	58025430 	.word	0x58025430
 8006fb4:	58025444 	.word	0x58025444
 8006fb8:	58025458 	.word	0x58025458
 8006fbc:	5802546c 	.word	0x5802546c
 8006fc0:	58025480 	.word	0x58025480
 8006fc4:	58025494 	.word	0x58025494

08006fc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006fd0:	f7fd f90c 	bl	80041ec <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e2dc      	b.n	800759a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d008      	beq.n	8006ffe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e2cd      	b.n	800759a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a76      	ldr	r2, [pc, #472]	; (80071dc <HAL_DMA_Abort+0x214>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d04a      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a74      	ldr	r2, [pc, #464]	; (80071e0 <HAL_DMA_Abort+0x218>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d045      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a73      	ldr	r2, [pc, #460]	; (80071e4 <HAL_DMA_Abort+0x21c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d040      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a71      	ldr	r2, [pc, #452]	; (80071e8 <HAL_DMA_Abort+0x220>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d03b      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a70      	ldr	r2, [pc, #448]	; (80071ec <HAL_DMA_Abort+0x224>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d036      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a6e      	ldr	r2, [pc, #440]	; (80071f0 <HAL_DMA_Abort+0x228>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d031      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a6d      	ldr	r2, [pc, #436]	; (80071f4 <HAL_DMA_Abort+0x22c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d02c      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6b      	ldr	r2, [pc, #428]	; (80071f8 <HAL_DMA_Abort+0x230>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d027      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a6a      	ldr	r2, [pc, #424]	; (80071fc <HAL_DMA_Abort+0x234>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d022      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a68      	ldr	r2, [pc, #416]	; (8007200 <HAL_DMA_Abort+0x238>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a67      	ldr	r2, [pc, #412]	; (8007204 <HAL_DMA_Abort+0x23c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a65      	ldr	r2, [pc, #404]	; (8007208 <HAL_DMA_Abort+0x240>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a64      	ldr	r2, [pc, #400]	; (800720c <HAL_DMA_Abort+0x244>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a62      	ldr	r2, [pc, #392]	; (8007210 <HAL_DMA_Abort+0x248>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a61      	ldr	r2, [pc, #388]	; (8007214 <HAL_DMA_Abort+0x24c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_DMA_Abort+0xd6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a5f      	ldr	r2, [pc, #380]	; (8007218 <HAL_DMA_Abort+0x250>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d101      	bne.n	80070a2 <HAL_DMA_Abort+0xda>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_DMA_Abort+0xdc>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d013      	beq.n	80070d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 021e 	bic.w	r2, r2, #30
 80070b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e00a      	b.n	80070e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 020e 	bic.w	r2, r2, #14
 80070de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <HAL_DMA_Abort+0x214>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d072      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3a      	ldr	r2, [pc, #232]	; (80071e0 <HAL_DMA_Abort+0x218>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d06d      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a39      	ldr	r2, [pc, #228]	; (80071e4 <HAL_DMA_Abort+0x21c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d068      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a37      	ldr	r2, [pc, #220]	; (80071e8 <HAL_DMA_Abort+0x220>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d063      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a36      	ldr	r2, [pc, #216]	; (80071ec <HAL_DMA_Abort+0x224>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d05e      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a34      	ldr	r2, [pc, #208]	; (80071f0 <HAL_DMA_Abort+0x228>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d059      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a33      	ldr	r2, [pc, #204]	; (80071f4 <HAL_DMA_Abort+0x22c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d054      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <HAL_DMA_Abort+0x230>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d04f      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a30      	ldr	r2, [pc, #192]	; (80071fc <HAL_DMA_Abort+0x234>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d04a      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <HAL_DMA_Abort+0x238>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d045      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <HAL_DMA_Abort+0x23c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d040      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2b      	ldr	r2, [pc, #172]	; (8007208 <HAL_DMA_Abort+0x240>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d03b      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2a      	ldr	r2, [pc, #168]	; (800720c <HAL_DMA_Abort+0x244>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d036      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a28      	ldr	r2, [pc, #160]	; (8007210 <HAL_DMA_Abort+0x248>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d031      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a27      	ldr	r2, [pc, #156]	; (8007214 <HAL_DMA_Abort+0x24c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d02c      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a25      	ldr	r2, [pc, #148]	; (8007218 <HAL_DMA_Abort+0x250>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d027      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a24      	ldr	r2, [pc, #144]	; (800721c <HAL_DMA_Abort+0x254>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d022      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a22      	ldr	r2, [pc, #136]	; (8007220 <HAL_DMA_Abort+0x258>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01d      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a21      	ldr	r2, [pc, #132]	; (8007224 <HAL_DMA_Abort+0x25c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d018      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <HAL_DMA_Abort+0x260>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1e      	ldr	r2, [pc, #120]	; (800722c <HAL_DMA_Abort+0x264>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <HAL_DMA_Abort+0x268>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1b      	ldr	r2, [pc, #108]	; (8007234 <HAL_DMA_Abort+0x26c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_DMA_Abort+0x20e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a19      	ldr	r2, [pc, #100]	; (8007238 <HAL_DMA_Abort+0x270>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d132      	bne.n	800723c <HAL_DMA_Abort+0x274>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e031      	b.n	800723e <HAL_DMA_Abort+0x276>
 80071da:	bf00      	nop
 80071dc:	40020010 	.word	0x40020010
 80071e0:	40020028 	.word	0x40020028
 80071e4:	40020040 	.word	0x40020040
 80071e8:	40020058 	.word	0x40020058
 80071ec:	40020070 	.word	0x40020070
 80071f0:	40020088 	.word	0x40020088
 80071f4:	400200a0 	.word	0x400200a0
 80071f8:	400200b8 	.word	0x400200b8
 80071fc:	40020410 	.word	0x40020410
 8007200:	40020428 	.word	0x40020428
 8007204:	40020440 	.word	0x40020440
 8007208:	40020458 	.word	0x40020458
 800720c:	40020470 	.word	0x40020470
 8007210:	40020488 	.word	0x40020488
 8007214:	400204a0 	.word	0x400204a0
 8007218:	400204b8 	.word	0x400204b8
 800721c:	58025408 	.word	0x58025408
 8007220:	5802541c 	.word	0x5802541c
 8007224:	58025430 	.word	0x58025430
 8007228:	58025444 	.word	0x58025444
 800722c:	58025458 	.word	0x58025458
 8007230:	5802546c 	.word	0x5802546c
 8007234:	58025480 	.word	0x58025480
 8007238:	58025494 	.word	0x58025494
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007250:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a6d      	ldr	r2, [pc, #436]	; (800740c <HAL_DMA_Abort+0x444>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d04a      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6b      	ldr	r2, [pc, #428]	; (8007410 <HAL_DMA_Abort+0x448>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d045      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a6a      	ldr	r2, [pc, #424]	; (8007414 <HAL_DMA_Abort+0x44c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d040      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a68      	ldr	r2, [pc, #416]	; (8007418 <HAL_DMA_Abort+0x450>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d03b      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a67      	ldr	r2, [pc, #412]	; (800741c <HAL_DMA_Abort+0x454>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d036      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a65      	ldr	r2, [pc, #404]	; (8007420 <HAL_DMA_Abort+0x458>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d031      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a64      	ldr	r2, [pc, #400]	; (8007424 <HAL_DMA_Abort+0x45c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d02c      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a62      	ldr	r2, [pc, #392]	; (8007428 <HAL_DMA_Abort+0x460>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d027      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a61      	ldr	r2, [pc, #388]	; (800742c <HAL_DMA_Abort+0x464>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d022      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a5f      	ldr	r2, [pc, #380]	; (8007430 <HAL_DMA_Abort+0x468>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01d      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a5e      	ldr	r2, [pc, #376]	; (8007434 <HAL_DMA_Abort+0x46c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d018      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a5c      	ldr	r2, [pc, #368]	; (8007438 <HAL_DMA_Abort+0x470>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a5b      	ldr	r2, [pc, #364]	; (800743c <HAL_DMA_Abort+0x474>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a59      	ldr	r2, [pc, #356]	; (8007440 <HAL_DMA_Abort+0x478>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a58      	ldr	r2, [pc, #352]	; (8007444 <HAL_DMA_Abort+0x47c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_DMA_Abort+0x32a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a56      	ldr	r2, [pc, #344]	; (8007448 <HAL_DMA_Abort+0x480>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d108      	bne.n	8007304 <HAL_DMA_Abort+0x33c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0201 	bic.w	r2, r2, #1
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e007      	b.n	8007314 <HAL_DMA_Abort+0x34c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007314:	e013      	b.n	800733e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007316:	f7fc ff69 	bl	80041ec <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b05      	cmp	r3, #5
 8007322:	d90c      	bls.n	800733e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2203      	movs	r2, #3
 800732e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e12d      	b.n	800759a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e5      	bne.n	8007316 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a2f      	ldr	r2, [pc, #188]	; (800740c <HAL_DMA_Abort+0x444>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d04a      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a2d      	ldr	r2, [pc, #180]	; (8007410 <HAL_DMA_Abort+0x448>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d045      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2c      	ldr	r2, [pc, #176]	; (8007414 <HAL_DMA_Abort+0x44c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d040      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2a      	ldr	r2, [pc, #168]	; (8007418 <HAL_DMA_Abort+0x450>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d03b      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a29      	ldr	r2, [pc, #164]	; (800741c <HAL_DMA_Abort+0x454>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d036      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a27      	ldr	r2, [pc, #156]	; (8007420 <HAL_DMA_Abort+0x458>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d031      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <HAL_DMA_Abort+0x45c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d02c      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <HAL_DMA_Abort+0x460>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d027      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a23      	ldr	r2, [pc, #140]	; (800742c <HAL_DMA_Abort+0x464>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a21      	ldr	r2, [pc, #132]	; (8007430 <HAL_DMA_Abort+0x468>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a20      	ldr	r2, [pc, #128]	; (8007434 <HAL_DMA_Abort+0x46c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <HAL_DMA_Abort+0x470>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1d      	ldr	r2, [pc, #116]	; (800743c <HAL_DMA_Abort+0x474>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	; (8007440 <HAL_DMA_Abort+0x478>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <HAL_DMA_Abort+0x47c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_DMA_Abort+0x422>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a18      	ldr	r2, [pc, #96]	; (8007448 <HAL_DMA_Abort+0x480>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d101      	bne.n	80073ee <HAL_DMA_Abort+0x426>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <HAL_DMA_Abort+0x428>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d02b      	beq.n	800744c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	223f      	movs	r2, #63	; 0x3f
 8007404:	409a      	lsls	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	609a      	str	r2, [r3, #8]
 800740a:	e02a      	b.n	8007462 <HAL_DMA_Abort+0x49a>
 800740c:	40020010 	.word	0x40020010
 8007410:	40020028 	.word	0x40020028
 8007414:	40020040 	.word	0x40020040
 8007418:	40020058 	.word	0x40020058
 800741c:	40020070 	.word	0x40020070
 8007420:	40020088 	.word	0x40020088
 8007424:	400200a0 	.word	0x400200a0
 8007428:	400200b8 	.word	0x400200b8
 800742c:	40020410 	.word	0x40020410
 8007430:	40020428 	.word	0x40020428
 8007434:	40020440 	.word	0x40020440
 8007438:	40020458 	.word	0x40020458
 800743c:	40020470 	.word	0x40020470
 8007440:	40020488 	.word	0x40020488
 8007444:	400204a0 	.word	0x400204a0
 8007448:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007450:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2201      	movs	r2, #1
 800745c:	409a      	lsls	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a4f      	ldr	r2, [pc, #316]	; (80075a4 <HAL_DMA_Abort+0x5dc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d072      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a4d      	ldr	r2, [pc, #308]	; (80075a8 <HAL_DMA_Abort+0x5e0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d06d      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a4c      	ldr	r2, [pc, #304]	; (80075ac <HAL_DMA_Abort+0x5e4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d068      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a4a      	ldr	r2, [pc, #296]	; (80075b0 <HAL_DMA_Abort+0x5e8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d063      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a49      	ldr	r2, [pc, #292]	; (80075b4 <HAL_DMA_Abort+0x5ec>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d05e      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a47      	ldr	r2, [pc, #284]	; (80075b8 <HAL_DMA_Abort+0x5f0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d059      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a46      	ldr	r2, [pc, #280]	; (80075bc <HAL_DMA_Abort+0x5f4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d054      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a44      	ldr	r2, [pc, #272]	; (80075c0 <HAL_DMA_Abort+0x5f8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d04f      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a43      	ldr	r2, [pc, #268]	; (80075c4 <HAL_DMA_Abort+0x5fc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d04a      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a41      	ldr	r2, [pc, #260]	; (80075c8 <HAL_DMA_Abort+0x600>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d045      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a40      	ldr	r2, [pc, #256]	; (80075cc <HAL_DMA_Abort+0x604>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d040      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a3e      	ldr	r2, [pc, #248]	; (80075d0 <HAL_DMA_Abort+0x608>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d03b      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3d      	ldr	r2, [pc, #244]	; (80075d4 <HAL_DMA_Abort+0x60c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d036      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a3b      	ldr	r2, [pc, #236]	; (80075d8 <HAL_DMA_Abort+0x610>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d031      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a3a      	ldr	r2, [pc, #232]	; (80075dc <HAL_DMA_Abort+0x614>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d02c      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a38      	ldr	r2, [pc, #224]	; (80075e0 <HAL_DMA_Abort+0x618>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d027      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a37      	ldr	r2, [pc, #220]	; (80075e4 <HAL_DMA_Abort+0x61c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d022      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a35      	ldr	r2, [pc, #212]	; (80075e8 <HAL_DMA_Abort+0x620>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01d      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a34      	ldr	r2, [pc, #208]	; (80075ec <HAL_DMA_Abort+0x624>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d018      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a32      	ldr	r2, [pc, #200]	; (80075f0 <HAL_DMA_Abort+0x628>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a31      	ldr	r2, [pc, #196]	; (80075f4 <HAL_DMA_Abort+0x62c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2f      	ldr	r2, [pc, #188]	; (80075f8 <HAL_DMA_Abort+0x630>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2e      	ldr	r2, [pc, #184]	; (80075fc <HAL_DMA_Abort+0x634>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_DMA_Abort+0x58a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2c      	ldr	r2, [pc, #176]	; (8007600 <HAL_DMA_Abort+0x638>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d101      	bne.n	8007556 <HAL_DMA_Abort+0x58e>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <HAL_DMA_Abort+0x590>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d015      	beq.n	8007588 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007564:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800757c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007586:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40020010 	.word	0x40020010
 80075a8:	40020028 	.word	0x40020028
 80075ac:	40020040 	.word	0x40020040
 80075b0:	40020058 	.word	0x40020058
 80075b4:	40020070 	.word	0x40020070
 80075b8:	40020088 	.word	0x40020088
 80075bc:	400200a0 	.word	0x400200a0
 80075c0:	400200b8 	.word	0x400200b8
 80075c4:	40020410 	.word	0x40020410
 80075c8:	40020428 	.word	0x40020428
 80075cc:	40020440 	.word	0x40020440
 80075d0:	40020458 	.word	0x40020458
 80075d4:	40020470 	.word	0x40020470
 80075d8:	40020488 	.word	0x40020488
 80075dc:	400204a0 	.word	0x400204a0
 80075e0:	400204b8 	.word	0x400204b8
 80075e4:	58025408 	.word	0x58025408
 80075e8:	5802541c 	.word	0x5802541c
 80075ec:	58025430 	.word	0x58025430
 80075f0:	58025444 	.word	0x58025444
 80075f4:	58025458 	.word	0x58025458
 80075f8:	5802546c 	.word	0x5802546c
 80075fc:	58025480 	.word	0x58025480
 8007600:	58025494 	.word	0x58025494

08007604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e237      	b.n	8007a86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d004      	beq.n	800762c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2280      	movs	r2, #128	; 0x80
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e22c      	b.n	8007a86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a5c      	ldr	r2, [pc, #368]	; (80077a4 <HAL_DMA_Abort_IT+0x1a0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d04a      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a5b      	ldr	r2, [pc, #364]	; (80077a8 <HAL_DMA_Abort_IT+0x1a4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d045      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a59      	ldr	r2, [pc, #356]	; (80077ac <HAL_DMA_Abort_IT+0x1a8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d040      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a58      	ldr	r2, [pc, #352]	; (80077b0 <HAL_DMA_Abort_IT+0x1ac>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d03b      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a56      	ldr	r2, [pc, #344]	; (80077b4 <HAL_DMA_Abort_IT+0x1b0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d036      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a55      	ldr	r2, [pc, #340]	; (80077b8 <HAL_DMA_Abort_IT+0x1b4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d031      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a53      	ldr	r2, [pc, #332]	; (80077bc <HAL_DMA_Abort_IT+0x1b8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02c      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a52      	ldr	r2, [pc, #328]	; (80077c0 <HAL_DMA_Abort_IT+0x1bc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d027      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a50      	ldr	r2, [pc, #320]	; (80077c4 <HAL_DMA_Abort_IT+0x1c0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4f      	ldr	r2, [pc, #316]	; (80077c8 <HAL_DMA_Abort_IT+0x1c4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01d      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a4d      	ldr	r2, [pc, #308]	; (80077cc <HAL_DMA_Abort_IT+0x1c8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4c      	ldr	r2, [pc, #304]	; (80077d0 <HAL_DMA_Abort_IT+0x1cc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a4a      	ldr	r2, [pc, #296]	; (80077d4 <HAL_DMA_Abort_IT+0x1d0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a49      	ldr	r2, [pc, #292]	; (80077d8 <HAL_DMA_Abort_IT+0x1d4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a47      	ldr	r2, [pc, #284]	; (80077dc <HAL_DMA_Abort_IT+0x1d8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_DMA_Abort_IT+0xc8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a46      	ldr	r2, [pc, #280]	; (80077e0 <HAL_DMA_Abort_IT+0x1dc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d101      	bne.n	80076d0 <HAL_DMA_Abort_IT+0xcc>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_DMA_Abort_IT+0xce>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8086 	beq.w	80077e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2204      	movs	r2, #4
 80076dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2f      	ldr	r2, [pc, #188]	; (80077a4 <HAL_DMA_Abort_IT+0x1a0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d04a      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <HAL_DMA_Abort_IT+0x1a4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d045      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a2c      	ldr	r2, [pc, #176]	; (80077ac <HAL_DMA_Abort_IT+0x1a8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d040      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2b      	ldr	r2, [pc, #172]	; (80077b0 <HAL_DMA_Abort_IT+0x1ac>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d03b      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <HAL_DMA_Abort_IT+0x1b0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d036      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a28      	ldr	r2, [pc, #160]	; (80077b8 <HAL_DMA_Abort_IT+0x1b4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d031      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a26      	ldr	r2, [pc, #152]	; (80077bc <HAL_DMA_Abort_IT+0x1b8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02c      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <HAL_DMA_Abort_IT+0x1bc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d027      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <HAL_DMA_Abort_IT+0x1c0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <HAL_DMA_Abort_IT+0x1c4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_DMA_Abort_IT+0x1c8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <HAL_DMA_Abort_IT+0x1cc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_DMA_Abort_IT+0x1d0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_DMA_Abort_IT+0x1d4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_DMA_Abort_IT+0x1d8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_DMA_Abort_IT+0x17c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_DMA_Abort_IT+0x1dc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <HAL_DMA_Abort_IT+0x18e>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e178      	b.n	8007a84 <HAL_DMA_Abort_IT+0x480>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e16f      	b.n	8007a84 <HAL_DMA_Abort_IT+0x480>
 80077a4:	40020010 	.word	0x40020010
 80077a8:	40020028 	.word	0x40020028
 80077ac:	40020040 	.word	0x40020040
 80077b0:	40020058 	.word	0x40020058
 80077b4:	40020070 	.word	0x40020070
 80077b8:	40020088 	.word	0x40020088
 80077bc:	400200a0 	.word	0x400200a0
 80077c0:	400200b8 	.word	0x400200b8
 80077c4:	40020410 	.word	0x40020410
 80077c8:	40020428 	.word	0x40020428
 80077cc:	40020440 	.word	0x40020440
 80077d0:	40020458 	.word	0x40020458
 80077d4:	40020470 	.word	0x40020470
 80077d8:	40020488 	.word	0x40020488
 80077dc:	400204a0 	.word	0x400204a0
 80077e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 020e 	bic.w	r2, r2, #14
 80077f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a6c      	ldr	r2, [pc, #432]	; (80079ac <HAL_DMA_Abort_IT+0x3a8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d04a      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a6b      	ldr	r2, [pc, #428]	; (80079b0 <HAL_DMA_Abort_IT+0x3ac>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d045      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a69      	ldr	r2, [pc, #420]	; (80079b4 <HAL_DMA_Abort_IT+0x3b0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d040      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a68      	ldr	r2, [pc, #416]	; (80079b8 <HAL_DMA_Abort_IT+0x3b4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d03b      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a66      	ldr	r2, [pc, #408]	; (80079bc <HAL_DMA_Abort_IT+0x3b8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d036      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a65      	ldr	r2, [pc, #404]	; (80079c0 <HAL_DMA_Abort_IT+0x3bc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d031      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a63      	ldr	r2, [pc, #396]	; (80079c4 <HAL_DMA_Abort_IT+0x3c0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d02c      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a62      	ldr	r2, [pc, #392]	; (80079c8 <HAL_DMA_Abort_IT+0x3c4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d027      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a60      	ldr	r2, [pc, #384]	; (80079cc <HAL_DMA_Abort_IT+0x3c8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a5f      	ldr	r2, [pc, #380]	; (80079d0 <HAL_DMA_Abort_IT+0x3cc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d01d      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5d      	ldr	r2, [pc, #372]	; (80079d4 <HAL_DMA_Abort_IT+0x3d0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a5c      	ldr	r2, [pc, #368]	; (80079d8 <HAL_DMA_Abort_IT+0x3d4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5a      	ldr	r2, [pc, #360]	; (80079dc <HAL_DMA_Abort_IT+0x3d8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a59      	ldr	r2, [pc, #356]	; (80079e0 <HAL_DMA_Abort_IT+0x3dc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a57      	ldr	r2, [pc, #348]	; (80079e4 <HAL_DMA_Abort_IT+0x3e0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_DMA_Abort_IT+0x290>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a56      	ldr	r2, [pc, #344]	; (80079e8 <HAL_DMA_Abort_IT+0x3e4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d108      	bne.n	80078a6 <HAL_DMA_Abort_IT+0x2a2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0201 	bic.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e007      	b.n	80078b6 <HAL_DMA_Abort_IT+0x2b2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a3c      	ldr	r2, [pc, #240]	; (80079ac <HAL_DMA_Abort_IT+0x3a8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d072      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a3a      	ldr	r2, [pc, #232]	; (80079b0 <HAL_DMA_Abort_IT+0x3ac>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d06d      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a39      	ldr	r2, [pc, #228]	; (80079b4 <HAL_DMA_Abort_IT+0x3b0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d068      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a37      	ldr	r2, [pc, #220]	; (80079b8 <HAL_DMA_Abort_IT+0x3b4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d063      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a36      	ldr	r2, [pc, #216]	; (80079bc <HAL_DMA_Abort_IT+0x3b8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d05e      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a34      	ldr	r2, [pc, #208]	; (80079c0 <HAL_DMA_Abort_IT+0x3bc>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d059      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a33      	ldr	r2, [pc, #204]	; (80079c4 <HAL_DMA_Abort_IT+0x3c0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d054      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <HAL_DMA_Abort_IT+0x3c4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d04f      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a30      	ldr	r2, [pc, #192]	; (80079cc <HAL_DMA_Abort_IT+0x3c8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d04a      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a2e      	ldr	r2, [pc, #184]	; (80079d0 <HAL_DMA_Abort_IT+0x3cc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d045      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <HAL_DMA_Abort_IT+0x3d0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d040      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a2b      	ldr	r2, [pc, #172]	; (80079d8 <HAL_DMA_Abort_IT+0x3d4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d03b      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <HAL_DMA_Abort_IT+0x3d8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d036      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <HAL_DMA_Abort_IT+0x3dc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d031      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <HAL_DMA_Abort_IT+0x3e0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d02c      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a25      	ldr	r2, [pc, #148]	; (80079e8 <HAL_DMA_Abort_IT+0x3e4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d027      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a24      	ldr	r2, [pc, #144]	; (80079ec <HAL_DMA_Abort_IT+0x3e8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <HAL_DMA_Abort_IT+0x3ec>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01d      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a21      	ldr	r2, [pc, #132]	; (80079f4 <HAL_DMA_Abort_IT+0x3f0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_DMA_Abort_IT+0x3f4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <HAL_DMA_Abort_IT+0x3f8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <HAL_DMA_Abort_IT+0x3fc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_DMA_Abort_IT+0x400>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_DMA_Abort_IT+0x3a2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <HAL_DMA_Abort_IT+0x404>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d132      	bne.n	8007a0c <HAL_DMA_Abort_IT+0x408>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e031      	b.n	8007a0e <HAL_DMA_Abort_IT+0x40a>
 80079aa:	bf00      	nop
 80079ac:	40020010 	.word	0x40020010
 80079b0:	40020028 	.word	0x40020028
 80079b4:	40020040 	.word	0x40020040
 80079b8:	40020058 	.word	0x40020058
 80079bc:	40020070 	.word	0x40020070
 80079c0:	40020088 	.word	0x40020088
 80079c4:	400200a0 	.word	0x400200a0
 80079c8:	400200b8 	.word	0x400200b8
 80079cc:	40020410 	.word	0x40020410
 80079d0:	40020428 	.word	0x40020428
 80079d4:	40020440 	.word	0x40020440
 80079d8:	40020458 	.word	0x40020458
 80079dc:	40020470 	.word	0x40020470
 80079e0:	40020488 	.word	0x40020488
 80079e4:	400204a0 	.word	0x400204a0
 80079e8:	400204b8 	.word	0x400204b8
 80079ec:	58025408 	.word	0x58025408
 80079f0:	5802541c 	.word	0x5802541c
 80079f4:	58025430 	.word	0x58025430
 80079f8:	58025444 	.word	0x58025444
 80079fc:	58025458 	.word	0x58025458
 8007a00:	5802546c 	.word	0x5802546c
 8007a04:	58025480 	.word	0x58025480
 8007a08:	58025494 	.word	0x58025494
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d028      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	2201      	movs	r2, #1
 8007a32:	409a      	lsls	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00c      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop

08007a90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	; 0x28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a9c:	4b67      	ldr	r3, [pc, #412]	; (8007c3c <HAL_DMA_IRQHandler+0x1ac>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a67      	ldr	r2, [pc, #412]	; (8007c40 <HAL_DMA_IRQHandler+0x1b0>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	0a9b      	lsrs	r3, r3, #10
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5f      	ldr	r2, [pc, #380]	; (8007c44 <HAL_DMA_IRQHandler+0x1b4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d04a      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a5d      	ldr	r2, [pc, #372]	; (8007c48 <HAL_DMA_IRQHandler+0x1b8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d045      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a5c      	ldr	r2, [pc, #368]	; (8007c4c <HAL_DMA_IRQHandler+0x1bc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d040      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5a      	ldr	r2, [pc, #360]	; (8007c50 <HAL_DMA_IRQHandler+0x1c0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d03b      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a59      	ldr	r2, [pc, #356]	; (8007c54 <HAL_DMA_IRQHandler+0x1c4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d036      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a57      	ldr	r2, [pc, #348]	; (8007c58 <HAL_DMA_IRQHandler+0x1c8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d031      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a56      	ldr	r2, [pc, #344]	; (8007c5c <HAL_DMA_IRQHandler+0x1cc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d02c      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a54      	ldr	r2, [pc, #336]	; (8007c60 <HAL_DMA_IRQHandler+0x1d0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d027      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a53      	ldr	r2, [pc, #332]	; (8007c64 <HAL_DMA_IRQHandler+0x1d4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d022      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a51      	ldr	r2, [pc, #324]	; (8007c68 <HAL_DMA_IRQHandler+0x1d8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01d      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a50      	ldr	r2, [pc, #320]	; (8007c6c <HAL_DMA_IRQHandler+0x1dc>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a4e      	ldr	r2, [pc, #312]	; (8007c70 <HAL_DMA_IRQHandler+0x1e0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a4d      	ldr	r2, [pc, #308]	; (8007c74 <HAL_DMA_IRQHandler+0x1e4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a4b      	ldr	r2, [pc, #300]	; (8007c78 <HAL_DMA_IRQHandler+0x1e8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a4a      	ldr	r2, [pc, #296]	; (8007c7c <HAL_DMA_IRQHandler+0x1ec>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_DMA_IRQHandler+0xd2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a48      	ldr	r2, [pc, #288]	; (8007c80 <HAL_DMA_IRQHandler+0x1f0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d101      	bne.n	8007b66 <HAL_DMA_IRQHandler+0xd6>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <HAL_DMA_IRQHandler+0xd8>
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 842b 	beq.w	80083c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2208      	movs	r2, #8
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80a2 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2e      	ldr	r2, [pc, #184]	; (8007c44 <HAL_DMA_IRQHandler+0x1b4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d04a      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <HAL_DMA_IRQHandler+0x1b8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d045      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a2b      	ldr	r2, [pc, #172]	; (8007c4c <HAL_DMA_IRQHandler+0x1bc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d040      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <HAL_DMA_IRQHandler+0x1c0>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d03b      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a28      	ldr	r2, [pc, #160]	; (8007c54 <HAL_DMA_IRQHandler+0x1c4>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d036      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a27      	ldr	r2, [pc, #156]	; (8007c58 <HAL_DMA_IRQHandler+0x1c8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d031      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a25      	ldr	r2, [pc, #148]	; (8007c5c <HAL_DMA_IRQHandler+0x1cc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d02c      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a24      	ldr	r2, [pc, #144]	; (8007c60 <HAL_DMA_IRQHandler+0x1d0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d027      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a22      	ldr	r2, [pc, #136]	; (8007c64 <HAL_DMA_IRQHandler+0x1d4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d022      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a21      	ldr	r2, [pc, #132]	; (8007c68 <HAL_DMA_IRQHandler+0x1d8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d01d      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <HAL_DMA_IRQHandler+0x1dc>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <HAL_DMA_IRQHandler+0x1e0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <HAL_DMA_IRQHandler+0x1e4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1b      	ldr	r2, [pc, #108]	; (8007c78 <HAL_DMA_IRQHandler+0x1e8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_DMA_IRQHandler+0x1ec>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x194>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <HAL_DMA_IRQHandler+0x1f0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d12f      	bne.n	8007c84 <HAL_DMA_IRQHandler+0x1f4>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bf14      	ite	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	2300      	moveq	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e02e      	b.n	8007c98 <HAL_DMA_IRQHandler+0x208>
 8007c3a:	bf00      	nop
 8007c3c:	2400008c 	.word	0x2400008c
 8007c40:	1b4e81b5 	.word	0x1b4e81b5
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0204 	bic.w	r2, r2, #4
 8007caa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	f003 031f 	and.w	r3, r3, #31
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	409a      	lsls	r2, r3
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc0:	f043 0201 	orr.w	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d06e      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a69      	ldr	r2, [pc, #420]	; (8007e88 <HAL_DMA_IRQHandler+0x3f8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d04a      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a67      	ldr	r2, [pc, #412]	; (8007e8c <HAL_DMA_IRQHandler+0x3fc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d045      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a66      	ldr	r2, [pc, #408]	; (8007e90 <HAL_DMA_IRQHandler+0x400>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d040      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a64      	ldr	r2, [pc, #400]	; (8007e94 <HAL_DMA_IRQHandler+0x404>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d03b      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a63      	ldr	r2, [pc, #396]	; (8007e98 <HAL_DMA_IRQHandler+0x408>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d036      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a61      	ldr	r2, [pc, #388]	; (8007e9c <HAL_DMA_IRQHandler+0x40c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d031      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a60      	ldr	r2, [pc, #384]	; (8007ea0 <HAL_DMA_IRQHandler+0x410>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d02c      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a5e      	ldr	r2, [pc, #376]	; (8007ea4 <HAL_DMA_IRQHandler+0x414>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d027      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a5d      	ldr	r2, [pc, #372]	; (8007ea8 <HAL_DMA_IRQHandler+0x418>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d022      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a5b      	ldr	r2, [pc, #364]	; (8007eac <HAL_DMA_IRQHandler+0x41c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01d      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a5a      	ldr	r2, [pc, #360]	; (8007eb0 <HAL_DMA_IRQHandler+0x420>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d018      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a58      	ldr	r2, [pc, #352]	; (8007eb4 <HAL_DMA_IRQHandler+0x424>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a57      	ldr	r2, [pc, #348]	; (8007eb8 <HAL_DMA_IRQHandler+0x428>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00e      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a55      	ldr	r2, [pc, #340]	; (8007ebc <HAL_DMA_IRQHandler+0x42c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a54      	ldr	r2, [pc, #336]	; (8007ec0 <HAL_DMA_IRQHandler+0x430>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x2ee>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a52      	ldr	r2, [pc, #328]	; (8007ec4 <HAL_DMA_IRQHandler+0x434>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d10a      	bne.n	8007d94 <HAL_DMA_IRQHandler+0x304>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e003      	b.n	8007d9c <HAL_DMA_IRQHandler+0x30c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	2201      	movs	r2, #1
 8007daa:	409a      	lsls	r2, r3
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	f043 0202 	orr.w	r2, r3, #2
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 808f 	beq.w	8007ef0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2c      	ldr	r2, [pc, #176]	; (8007e88 <HAL_DMA_IRQHandler+0x3f8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d04a      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2a      	ldr	r2, [pc, #168]	; (8007e8c <HAL_DMA_IRQHandler+0x3fc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d045      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a29      	ldr	r2, [pc, #164]	; (8007e90 <HAL_DMA_IRQHandler+0x400>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d040      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <HAL_DMA_IRQHandler+0x404>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a26      	ldr	r2, [pc, #152]	; (8007e98 <HAL_DMA_IRQHandler+0x408>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d036      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <HAL_DMA_IRQHandler+0x40c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d031      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a23      	ldr	r2, [pc, #140]	; (8007ea0 <HAL_DMA_IRQHandler+0x410>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d02c      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <HAL_DMA_IRQHandler+0x414>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d027      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a20      	ldr	r2, [pc, #128]	; (8007ea8 <HAL_DMA_IRQHandler+0x418>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <HAL_DMA_IRQHandler+0x41c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <HAL_DMA_IRQHandler+0x420>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_DMA_IRQHandler+0x424>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <HAL_DMA_IRQHandler+0x428>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <HAL_DMA_IRQHandler+0x42c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <HAL_DMA_IRQHandler+0x430>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_DMA_IRQHandler+0x3e2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <HAL_DMA_IRQHandler+0x434>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d12a      	bne.n	8007ec8 <HAL_DMA_IRQHandler+0x438>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	2300      	moveq	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e023      	b.n	8007ed0 <HAL_DMA_IRQHandler+0x440>
 8007e88:	40020010 	.word	0x40020010
 8007e8c:	40020028 	.word	0x40020028
 8007e90:	40020040 	.word	0x40020040
 8007e94:	40020058 	.word	0x40020058
 8007e98:	40020070 	.word	0x40020070
 8007e9c:	40020088 	.word	0x40020088
 8007ea0:	400200a0 	.word	0x400200a0
 8007ea4:	400200b8 	.word	0x400200b8
 8007ea8:	40020410 	.word	0x40020410
 8007eac:	40020428 	.word	0x40020428
 8007eb0:	40020440 	.word	0x40020440
 8007eb4:	40020458 	.word	0x40020458
 8007eb8:	40020470 	.word	0x40020470
 8007ebc:	40020488 	.word	0x40020488
 8007ec0:	400204a0 	.word	0x400204a0
 8007ec4:	400204b8 	.word	0x400204b8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00d      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2204      	movs	r2, #4
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	f043 0204 	orr.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2210      	movs	r2, #16
 8007efa:	409a      	lsls	r2, r3
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 80a6 	beq.w	8008052 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a85      	ldr	r2, [pc, #532]	; (8008120 <HAL_DMA_IRQHandler+0x690>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d04a      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a83      	ldr	r2, [pc, #524]	; (8008124 <HAL_DMA_IRQHandler+0x694>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d045      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a82      	ldr	r2, [pc, #520]	; (8008128 <HAL_DMA_IRQHandler+0x698>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d040      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a80      	ldr	r2, [pc, #512]	; (800812c <HAL_DMA_IRQHandler+0x69c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d03b      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a7f      	ldr	r2, [pc, #508]	; (8008130 <HAL_DMA_IRQHandler+0x6a0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d036      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a7d      	ldr	r2, [pc, #500]	; (8008134 <HAL_DMA_IRQHandler+0x6a4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d031      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a7c      	ldr	r2, [pc, #496]	; (8008138 <HAL_DMA_IRQHandler+0x6a8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d02c      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a7a      	ldr	r2, [pc, #488]	; (800813c <HAL_DMA_IRQHandler+0x6ac>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d027      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a79      	ldr	r2, [pc, #484]	; (8008140 <HAL_DMA_IRQHandler+0x6b0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d022      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a77      	ldr	r2, [pc, #476]	; (8008144 <HAL_DMA_IRQHandler+0x6b4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01d      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a76      	ldr	r2, [pc, #472]	; (8008148 <HAL_DMA_IRQHandler+0x6b8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d018      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a74      	ldr	r2, [pc, #464]	; (800814c <HAL_DMA_IRQHandler+0x6bc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a73      	ldr	r2, [pc, #460]	; (8008150 <HAL_DMA_IRQHandler+0x6c0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a71      	ldr	r2, [pc, #452]	; (8008154 <HAL_DMA_IRQHandler+0x6c4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a70      	ldr	r2, [pc, #448]	; (8008158 <HAL_DMA_IRQHandler+0x6c8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d004      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x516>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a6e      	ldr	r2, [pc, #440]	; (800815c <HAL_DMA_IRQHandler+0x6cc>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d10a      	bne.n	8007fbc <HAL_DMA_IRQHandler+0x52c>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e009      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x540>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf14      	ite	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	2300      	moveq	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d03e      	beq.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd8:	f003 031f 	and.w	r3, r3, #31
 8007fdc:	2210      	movs	r2, #16
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d108      	bne.n	8008012 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d024      	beq.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3
 8008010:	e01f      	b.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01b      	beq.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	e016      	b.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d107      	bne.n	8008042 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0208 	bic.w	r2, r2, #8
 8008040:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2220      	movs	r2, #32
 800805c:	409a      	lsls	r2, r3
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8110 	beq.w	8008288 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <HAL_DMA_IRQHandler+0x690>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d04a      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a2b      	ldr	r2, [pc, #172]	; (8008124 <HAL_DMA_IRQHandler+0x694>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d045      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a29      	ldr	r2, [pc, #164]	; (8008128 <HAL_DMA_IRQHandler+0x698>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d040      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a28      	ldr	r2, [pc, #160]	; (800812c <HAL_DMA_IRQHandler+0x69c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d03b      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a26      	ldr	r2, [pc, #152]	; (8008130 <HAL_DMA_IRQHandler+0x6a0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d036      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a25      	ldr	r2, [pc, #148]	; (8008134 <HAL_DMA_IRQHandler+0x6a4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d031      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a23      	ldr	r2, [pc, #140]	; (8008138 <HAL_DMA_IRQHandler+0x6a8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d02c      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a22      	ldr	r2, [pc, #136]	; (800813c <HAL_DMA_IRQHandler+0x6ac>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d027      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a20      	ldr	r2, [pc, #128]	; (8008140 <HAL_DMA_IRQHandler+0x6b0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <HAL_DMA_IRQHandler+0x6b4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d01d      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1d      	ldr	r2, [pc, #116]	; (8008148 <HAL_DMA_IRQHandler+0x6b8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1c      	ldr	r2, [pc, #112]	; (800814c <HAL_DMA_IRQHandler+0x6bc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1a      	ldr	r2, [pc, #104]	; (8008150 <HAL_DMA_IRQHandler+0x6c0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a19      	ldr	r2, [pc, #100]	; (8008154 <HAL_DMA_IRQHandler+0x6c4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a17      	ldr	r2, [pc, #92]	; (8008158 <HAL_DMA_IRQHandler+0x6c8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_DMA_IRQHandler+0x678>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a16      	ldr	r2, [pc, #88]	; (800815c <HAL_DMA_IRQHandler+0x6cc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d12b      	bne.n	8008160 <HAL_DMA_IRQHandler+0x6d0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	bf14      	ite	ne
 8008116:	2301      	movne	r3, #1
 8008118:	2300      	moveq	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	e02a      	b.n	8008174 <HAL_DMA_IRQHandler+0x6e4>
 800811e:	bf00      	nop
 8008120:	40020010 	.word	0x40020010
 8008124:	40020028 	.word	0x40020028
 8008128:	40020040 	.word	0x40020040
 800812c:	40020058 	.word	0x40020058
 8008130:	40020070 	.word	0x40020070
 8008134:	40020088 	.word	0x40020088
 8008138:	400200a0 	.word	0x400200a0
 800813c:	400200b8 	.word	0x400200b8
 8008140:	40020410 	.word	0x40020410
 8008144:	40020428 	.word	0x40020428
 8008148:	40020440 	.word	0x40020440
 800814c:	40020458 	.word	0x40020458
 8008150:	40020470 	.word	0x40020470
 8008154:	40020488 	.word	0x40020488
 8008158:	400204a0 	.word	0x400204a0
 800815c:	400204b8 	.word	0x400204b8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	bf14      	ite	ne
 800816e:	2301      	movne	r3, #1
 8008170:	2300      	moveq	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 8087 	beq.w	8008288 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	2220      	movs	r2, #32
 8008184:	409a      	lsls	r2, r3
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b04      	cmp	r3, #4
 8008194:	d139      	bne.n	800820a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0216 	bic.w	r2, r2, #22
 80081a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	695a      	ldr	r2, [r3, #20]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_DMA_IRQHandler+0x736>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0208 	bic.w	r2, r2, #8
 80081d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	223f      	movs	r2, #63	; 0x3f
 80081e0:	409a      	lsls	r2, r3
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 834a 	beq.w	8008894 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
          }
          return;
 8008208:	e344      	b.n	8008894 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d018      	beq.n	800824a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d108      	bne.n	8008238 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02c      	beq.n	8008288 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	e027      	b.n	8008288 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d023      	beq.n	8008288 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
 8008248:	e01e      	b.n	8008288 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10f      	bne.n	8008278 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0210 	bic.w	r2, r2, #16
 8008266:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8306 	beq.w	800889e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 8088 	beq.w	80083b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2204      	movs	r2, #4
 80082a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a7a      	ldr	r2, [pc, #488]	; (8008498 <HAL_DMA_IRQHandler+0xa08>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d04a      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a79      	ldr	r2, [pc, #484]	; (800849c <HAL_DMA_IRQHandler+0xa0c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d045      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a77      	ldr	r2, [pc, #476]	; (80084a0 <HAL_DMA_IRQHandler+0xa10>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d040      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a76      	ldr	r2, [pc, #472]	; (80084a4 <HAL_DMA_IRQHandler+0xa14>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d03b      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a74      	ldr	r2, [pc, #464]	; (80084a8 <HAL_DMA_IRQHandler+0xa18>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d036      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a73      	ldr	r2, [pc, #460]	; (80084ac <HAL_DMA_IRQHandler+0xa1c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d031      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a71      	ldr	r2, [pc, #452]	; (80084b0 <HAL_DMA_IRQHandler+0xa20>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d02c      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a70      	ldr	r2, [pc, #448]	; (80084b4 <HAL_DMA_IRQHandler+0xa24>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d027      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a6e      	ldr	r2, [pc, #440]	; (80084b8 <HAL_DMA_IRQHandler+0xa28>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d022      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a6d      	ldr	r2, [pc, #436]	; (80084bc <HAL_DMA_IRQHandler+0xa2c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d01d      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a6b      	ldr	r2, [pc, #428]	; (80084c0 <HAL_DMA_IRQHandler+0xa30>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d018      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a6a      	ldr	r2, [pc, #424]	; (80084c4 <HAL_DMA_IRQHandler+0xa34>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d013      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a68      	ldr	r2, [pc, #416]	; (80084c8 <HAL_DMA_IRQHandler+0xa38>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00e      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a67      	ldr	r2, [pc, #412]	; (80084cc <HAL_DMA_IRQHandler+0xa3c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d009      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a65      	ldr	r2, [pc, #404]	; (80084d0 <HAL_DMA_IRQHandler+0xa40>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <HAL_DMA_IRQHandler+0x8b8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a64      	ldr	r2, [pc, #400]	; (80084d4 <HAL_DMA_IRQHandler+0xa44>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d108      	bne.n	800835a <HAL_DMA_IRQHandler+0x8ca>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e007      	b.n	800836a <HAL_DMA_IRQHandler+0x8da>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0201 	bic.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	429a      	cmp	r2, r3
 8008374:	d307      	bcc.n	8008386 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f2      	bne.n	800836a <HAL_DMA_IRQHandler+0x8da>
 8008384:	e000      	b.n	8008388 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008386:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2203      	movs	r2, #3
 800839a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800839e:	e003      	b.n	80083a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8272 	beq.w	800889e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4798      	blx	r3
 80083c2:	e26c      	b.n	800889e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a43      	ldr	r2, [pc, #268]	; (80084d8 <HAL_DMA_IRQHandler+0xa48>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d022      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a42      	ldr	r2, [pc, #264]	; (80084dc <HAL_DMA_IRQHandler+0xa4c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d01d      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a40      	ldr	r2, [pc, #256]	; (80084e0 <HAL_DMA_IRQHandler+0xa50>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d018      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3f      	ldr	r2, [pc, #252]	; (80084e4 <HAL_DMA_IRQHandler+0xa54>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a3d      	ldr	r2, [pc, #244]	; (80084e8 <HAL_DMA_IRQHandler+0xa58>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00e      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3c      	ldr	r2, [pc, #240]	; (80084ec <HAL_DMA_IRQHandler+0xa5c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a3a      	ldr	r2, [pc, #232]	; (80084f0 <HAL_DMA_IRQHandler+0xa60>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_DMA_IRQHandler+0x984>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a39      	ldr	r2, [pc, #228]	; (80084f4 <HAL_DMA_IRQHandler+0xa64>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d101      	bne.n	8008418 <HAL_DMA_IRQHandler+0x988>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <HAL_DMA_IRQHandler+0x98a>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 823f 	beq.w	800889e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2204      	movs	r2, #4
 8008432:	409a      	lsls	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80cd 	beq.w	80085d8 <HAL_DMA_IRQHandler+0xb48>
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80c7 	beq.w	80085d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	2204      	movs	r2, #4
 8008454:	409a      	lsls	r2, r3
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d049      	beq.n	80084f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8210 	beq.w	8008898 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008480:	e20a      	b.n	8008898 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 8206 	beq.w	8008898 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008494:	e200      	b.n	8008898 <HAL_DMA_IRQHandler+0xe08>
 8008496:	bf00      	nop
 8008498:	40020010 	.word	0x40020010
 800849c:	40020028 	.word	0x40020028
 80084a0:	40020040 	.word	0x40020040
 80084a4:	40020058 	.word	0x40020058
 80084a8:	40020070 	.word	0x40020070
 80084ac:	40020088 	.word	0x40020088
 80084b0:	400200a0 	.word	0x400200a0
 80084b4:	400200b8 	.word	0x400200b8
 80084b8:	40020410 	.word	0x40020410
 80084bc:	40020428 	.word	0x40020428
 80084c0:	40020440 	.word	0x40020440
 80084c4:	40020458 	.word	0x40020458
 80084c8:	40020470 	.word	0x40020470
 80084cc:	40020488 	.word	0x40020488
 80084d0:	400204a0 	.word	0x400204a0
 80084d4:	400204b8 	.word	0x400204b8
 80084d8:	58025408 	.word	0x58025408
 80084dc:	5802541c 	.word	0x5802541c
 80084e0:	58025430 	.word	0x58025430
 80084e4:	58025444 	.word	0x58025444
 80084e8:	58025458 	.word	0x58025458
 80084ec:	5802546c 	.word	0x5802546c
 80084f0:	58025480 	.word	0x58025480
 80084f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d160      	bne.n	80085c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a7f      	ldr	r2, [pc, #508]	; (8008704 <HAL_DMA_IRQHandler+0xc74>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d04a      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7d      	ldr	r2, [pc, #500]	; (8008708 <HAL_DMA_IRQHandler+0xc78>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d045      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a7c      	ldr	r2, [pc, #496]	; (800870c <HAL_DMA_IRQHandler+0xc7c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d040      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a7a      	ldr	r2, [pc, #488]	; (8008710 <HAL_DMA_IRQHandler+0xc80>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d03b      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a79      	ldr	r2, [pc, #484]	; (8008714 <HAL_DMA_IRQHandler+0xc84>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d036      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a77      	ldr	r2, [pc, #476]	; (8008718 <HAL_DMA_IRQHandler+0xc88>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d031      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a76      	ldr	r2, [pc, #472]	; (800871c <HAL_DMA_IRQHandler+0xc8c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d02c      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a74      	ldr	r2, [pc, #464]	; (8008720 <HAL_DMA_IRQHandler+0xc90>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d027      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a73      	ldr	r2, [pc, #460]	; (8008724 <HAL_DMA_IRQHandler+0xc94>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d022      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a71      	ldr	r2, [pc, #452]	; (8008728 <HAL_DMA_IRQHandler+0xc98>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01d      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a70      	ldr	r2, [pc, #448]	; (800872c <HAL_DMA_IRQHandler+0xc9c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d018      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a6e      	ldr	r2, [pc, #440]	; (8008730 <HAL_DMA_IRQHandler+0xca0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d013      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a6d      	ldr	r2, [pc, #436]	; (8008734 <HAL_DMA_IRQHandler+0xca4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00e      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a6b      	ldr	r2, [pc, #428]	; (8008738 <HAL_DMA_IRQHandler+0xca8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d009      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a6a      	ldr	r2, [pc, #424]	; (800873c <HAL_DMA_IRQHandler+0xcac>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d004      	beq.n	80085a2 <HAL_DMA_IRQHandler+0xb12>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a68      	ldr	r2, [pc, #416]	; (8008740 <HAL_DMA_IRQHandler+0xcb0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d108      	bne.n	80085b4 <HAL_DMA_IRQHandler+0xb24>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0208 	bic.w	r2, r2, #8
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e007      	b.n	80085c4 <HAL_DMA_IRQHandler+0xb34>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0204 	bic.w	r2, r2, #4
 80085c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8165 	beq.w	8008898 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085d6:	e15f      	b.n	8008898 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	2202      	movs	r2, #2
 80085e2:	409a      	lsls	r2, r3
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80c5 	beq.w	8008778 <HAL_DMA_IRQHandler+0xce8>
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 80bf 	beq.w	8008778 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	2202      	movs	r2, #2
 8008604:	409a      	lsls	r2, r3
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d018      	beq.n	8008646 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 813a 	beq.w	800889c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008630:	e134      	b.n	800889c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8130 	beq.w	800889c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008644:	e12a      	b.n	800889c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	f040 8089 	bne.w	8008764 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a2b      	ldr	r2, [pc, #172]	; (8008704 <HAL_DMA_IRQHandler+0xc74>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d04a      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a29      	ldr	r2, [pc, #164]	; (8008708 <HAL_DMA_IRQHandler+0xc78>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d045      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a28      	ldr	r2, [pc, #160]	; (800870c <HAL_DMA_IRQHandler+0xc7c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d040      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a26      	ldr	r2, [pc, #152]	; (8008710 <HAL_DMA_IRQHandler+0xc80>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d03b      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a25      	ldr	r2, [pc, #148]	; (8008714 <HAL_DMA_IRQHandler+0xc84>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d036      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a23      	ldr	r2, [pc, #140]	; (8008718 <HAL_DMA_IRQHandler+0xc88>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d031      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a22      	ldr	r2, [pc, #136]	; (800871c <HAL_DMA_IRQHandler+0xc8c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d02c      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <HAL_DMA_IRQHandler+0xc90>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d027      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <HAL_DMA_IRQHandler+0xc94>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d022      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <HAL_DMA_IRQHandler+0xc98>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d01d      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <HAL_DMA_IRQHandler+0xc9c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d018      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1a      	ldr	r2, [pc, #104]	; (8008730 <HAL_DMA_IRQHandler+0xca0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d013      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a19      	ldr	r2, [pc, #100]	; (8008734 <HAL_DMA_IRQHandler+0xca4>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00e      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a17      	ldr	r2, [pc, #92]	; (8008738 <HAL_DMA_IRQHandler+0xca8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d009      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a16      	ldr	r2, [pc, #88]	; (800873c <HAL_DMA_IRQHandler+0xcac>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d004      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xc62>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a14      	ldr	r2, [pc, #80]	; (8008740 <HAL_DMA_IRQHandler+0xcb0>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d128      	bne.n	8008744 <HAL_DMA_IRQHandler+0xcb4>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0214 	bic.w	r2, r2, #20
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e027      	b.n	8008754 <HAL_DMA_IRQHandler+0xcc4>
 8008704:	40020010 	.word	0x40020010
 8008708:	40020028 	.word	0x40020028
 800870c:	40020040 	.word	0x40020040
 8008710:	40020058 	.word	0x40020058
 8008714:	40020070 	.word	0x40020070
 8008718:	40020088 	.word	0x40020088
 800871c:	400200a0 	.word	0x400200a0
 8008720:	400200b8 	.word	0x400200b8
 8008724:	40020410 	.word	0x40020410
 8008728:	40020428 	.word	0x40020428
 800872c:	40020440 	.word	0x40020440
 8008730:	40020458 	.word	0x40020458
 8008734:	40020470 	.word	0x40020470
 8008738:	40020488 	.word	0x40020488
 800873c:	400204a0 	.word	0x400204a0
 8008740:	400204b8 	.word	0x400204b8
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 020a 	bic.w	r2, r2, #10
 8008752:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8097 	beq.w	800889c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008776:	e091      	b.n	800889c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877c:	f003 031f 	and.w	r3, r3, #31
 8008780:	2208      	movs	r2, #8
 8008782:	409a      	lsls	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	4013      	ands	r3, r2
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 8088 	beq.w	800889e <HAL_DMA_IRQHandler+0xe0e>
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8082 	beq.w	800889e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a41      	ldr	r2, [pc, #260]	; (80088a4 <HAL_DMA_IRQHandler+0xe14>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d04a      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <HAL_DMA_IRQHandler+0xe18>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d045      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a3e      	ldr	r2, [pc, #248]	; (80088ac <HAL_DMA_IRQHandler+0xe1c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d040      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <HAL_DMA_IRQHandler+0xe20>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d03b      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <HAL_DMA_IRQHandler+0xe24>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d036      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a39      	ldr	r2, [pc, #228]	; (80088b8 <HAL_DMA_IRQHandler+0xe28>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d031      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a38      	ldr	r2, [pc, #224]	; (80088bc <HAL_DMA_IRQHandler+0xe2c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d02c      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a36      	ldr	r2, [pc, #216]	; (80088c0 <HAL_DMA_IRQHandler+0xe30>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d027      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a35      	ldr	r2, [pc, #212]	; (80088c4 <HAL_DMA_IRQHandler+0xe34>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d022      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a33      	ldr	r2, [pc, #204]	; (80088c8 <HAL_DMA_IRQHandler+0xe38>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01d      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a32      	ldr	r2, [pc, #200]	; (80088cc <HAL_DMA_IRQHandler+0xe3c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d018      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a30      	ldr	r2, [pc, #192]	; (80088d0 <HAL_DMA_IRQHandler+0xe40>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <HAL_DMA_IRQHandler+0xe44>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00e      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a2d      	ldr	r2, [pc, #180]	; (80088d8 <HAL_DMA_IRQHandler+0xe48>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d009      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <HAL_DMA_IRQHandler+0xe4c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d004      	beq.n	800883a <HAL_DMA_IRQHandler+0xdaa>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a2a      	ldr	r2, [pc, #168]	; (80088e0 <HAL_DMA_IRQHandler+0xe50>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d108      	bne.n	800884c <HAL_DMA_IRQHandler+0xdbc>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 021c 	bic.w	r2, r2, #28
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e007      	b.n	800885c <HAL_DMA_IRQHandler+0xdcc>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 020e 	bic.w	r2, r2, #14
 800885a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	2201      	movs	r2, #1
 8008866:	409a      	lsls	r2, r3
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	e004      	b.n	800889e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008894:	bf00      	nop
 8008896:	e002      	b.n	800889e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008898:	bf00      	nop
 800889a:	e000      	b.n	800889e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800889c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800889e:	3728      	adds	r7, #40	; 0x28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40020010 	.word	0x40020010
 80088a8:	40020028 	.word	0x40020028
 80088ac:	40020040 	.word	0x40020040
 80088b0:	40020058 	.word	0x40020058
 80088b4:	40020070 	.word	0x40020070
 80088b8:	40020088 	.word	0x40020088
 80088bc:	400200a0 	.word	0x400200a0
 80088c0:	400200b8 	.word	0x400200b8
 80088c4:	40020410 	.word	0x40020410
 80088c8:	40020428 	.word	0x40020428
 80088cc:	40020440 	.word	0x40020440
 80088d0:	40020458 	.word	0x40020458
 80088d4:	40020470 	.word	0x40020470
 80088d8:	40020488 	.word	0x40020488
 80088dc:	400204a0 	.word	0x400204a0
 80088e0:	400204b8 	.word	0x400204b8

080088e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008914:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a7f      	ldr	r2, [pc, #508]	; (8008b18 <DMA_SetConfig+0x21c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d072      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a7d      	ldr	r2, [pc, #500]	; (8008b1c <DMA_SetConfig+0x220>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d06d      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a7c      	ldr	r2, [pc, #496]	; (8008b20 <DMA_SetConfig+0x224>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d068      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a7a      	ldr	r2, [pc, #488]	; (8008b24 <DMA_SetConfig+0x228>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d063      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a79      	ldr	r2, [pc, #484]	; (8008b28 <DMA_SetConfig+0x22c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d05e      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a77      	ldr	r2, [pc, #476]	; (8008b2c <DMA_SetConfig+0x230>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d059      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a76      	ldr	r2, [pc, #472]	; (8008b30 <DMA_SetConfig+0x234>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d054      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a74      	ldr	r2, [pc, #464]	; (8008b34 <DMA_SetConfig+0x238>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d04f      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a73      	ldr	r2, [pc, #460]	; (8008b38 <DMA_SetConfig+0x23c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d04a      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a71      	ldr	r2, [pc, #452]	; (8008b3c <DMA_SetConfig+0x240>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d045      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a70      	ldr	r2, [pc, #448]	; (8008b40 <DMA_SetConfig+0x244>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d040      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a6e      	ldr	r2, [pc, #440]	; (8008b44 <DMA_SetConfig+0x248>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d03b      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a6d      	ldr	r2, [pc, #436]	; (8008b48 <DMA_SetConfig+0x24c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d036      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a6b      	ldr	r2, [pc, #428]	; (8008b4c <DMA_SetConfig+0x250>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d031      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a6a      	ldr	r2, [pc, #424]	; (8008b50 <DMA_SetConfig+0x254>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d02c      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a68      	ldr	r2, [pc, #416]	; (8008b54 <DMA_SetConfig+0x258>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d027      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a67      	ldr	r2, [pc, #412]	; (8008b58 <DMA_SetConfig+0x25c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d022      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a65      	ldr	r2, [pc, #404]	; (8008b5c <DMA_SetConfig+0x260>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d01d      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a64      	ldr	r2, [pc, #400]	; (8008b60 <DMA_SetConfig+0x264>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d018      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a62      	ldr	r2, [pc, #392]	; (8008b64 <DMA_SetConfig+0x268>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d013      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a61      	ldr	r2, [pc, #388]	; (8008b68 <DMA_SetConfig+0x26c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00e      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a5f      	ldr	r2, [pc, #380]	; (8008b6c <DMA_SetConfig+0x270>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d009      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a5e      	ldr	r2, [pc, #376]	; (8008b70 <DMA_SetConfig+0x274>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d004      	beq.n	8008a06 <DMA_SetConfig+0x10a>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a5c      	ldr	r2, [pc, #368]	; (8008b74 <DMA_SetConfig+0x278>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d101      	bne.n	8008a0a <DMA_SetConfig+0x10e>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <DMA_SetConfig+0x110>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00d      	beq.n	8008a2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a39      	ldr	r2, [pc, #228]	; (8008b18 <DMA_SetConfig+0x21c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d04a      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a38      	ldr	r2, [pc, #224]	; (8008b1c <DMA_SetConfig+0x220>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d045      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a36      	ldr	r2, [pc, #216]	; (8008b20 <DMA_SetConfig+0x224>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d040      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a35      	ldr	r2, [pc, #212]	; (8008b24 <DMA_SetConfig+0x228>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d03b      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <DMA_SetConfig+0x22c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d036      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a32      	ldr	r2, [pc, #200]	; (8008b2c <DMA_SetConfig+0x230>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d031      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a30      	ldr	r2, [pc, #192]	; (8008b30 <DMA_SetConfig+0x234>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d02c      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a2f      	ldr	r2, [pc, #188]	; (8008b34 <DMA_SetConfig+0x238>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d027      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <DMA_SetConfig+0x23c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d022      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2c      	ldr	r2, [pc, #176]	; (8008b3c <DMA_SetConfig+0x240>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d01d      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a2a      	ldr	r2, [pc, #168]	; (8008b40 <DMA_SetConfig+0x244>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d018      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a29      	ldr	r2, [pc, #164]	; (8008b44 <DMA_SetConfig+0x248>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d013      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <DMA_SetConfig+0x24c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00e      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <DMA_SetConfig+0x250>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d009      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a24      	ldr	r2, [pc, #144]	; (8008b50 <DMA_SetConfig+0x254>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <DMA_SetConfig+0x1d0>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a23      	ldr	r2, [pc, #140]	; (8008b54 <DMA_SetConfig+0x258>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d101      	bne.n	8008ad0 <DMA_SetConfig+0x1d4>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <DMA_SetConfig+0x1d6>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d059      	beq.n	8008b8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	223f      	movs	r2, #63	; 0x3f
 8008ae0:	409a      	lsls	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008af4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d138      	bne.n	8008b78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b16:	e086      	b.n	8008c26 <DMA_SetConfig+0x32a>
 8008b18:	40020010 	.word	0x40020010
 8008b1c:	40020028 	.word	0x40020028
 8008b20:	40020040 	.word	0x40020040
 8008b24:	40020058 	.word	0x40020058
 8008b28:	40020070 	.word	0x40020070
 8008b2c:	40020088 	.word	0x40020088
 8008b30:	400200a0 	.word	0x400200a0
 8008b34:	400200b8 	.word	0x400200b8
 8008b38:	40020410 	.word	0x40020410
 8008b3c:	40020428 	.word	0x40020428
 8008b40:	40020440 	.word	0x40020440
 8008b44:	40020458 	.word	0x40020458
 8008b48:	40020470 	.word	0x40020470
 8008b4c:	40020488 	.word	0x40020488
 8008b50:	400204a0 	.word	0x400204a0
 8008b54:	400204b8 	.word	0x400204b8
 8008b58:	58025408 	.word	0x58025408
 8008b5c:	5802541c 	.word	0x5802541c
 8008b60:	58025430 	.word	0x58025430
 8008b64:	58025444 	.word	0x58025444
 8008b68:	58025458 	.word	0x58025458
 8008b6c:	5802546c 	.word	0x5802546c
 8008b70:	58025480 	.word	0x58025480
 8008b74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	60da      	str	r2, [r3, #12]
}
 8008b88:	e04d      	b.n	8008c26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a29      	ldr	r2, [pc, #164]	; (8008c34 <DMA_SetConfig+0x338>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d022      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a27      	ldr	r2, [pc, #156]	; (8008c38 <DMA_SetConfig+0x33c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d01d      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a26      	ldr	r2, [pc, #152]	; (8008c3c <DMA_SetConfig+0x340>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d018      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a24      	ldr	r2, [pc, #144]	; (8008c40 <DMA_SetConfig+0x344>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a23      	ldr	r2, [pc, #140]	; (8008c44 <DMA_SetConfig+0x348>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d00e      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a21      	ldr	r2, [pc, #132]	; (8008c48 <DMA_SetConfig+0x34c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d009      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a20      	ldr	r2, [pc, #128]	; (8008c4c <DMA_SetConfig+0x350>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d004      	beq.n	8008bda <DMA_SetConfig+0x2de>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a1e      	ldr	r2, [pc, #120]	; (8008c50 <DMA_SetConfig+0x354>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d101      	bne.n	8008bde <DMA_SetConfig+0x2e2>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e000      	b.n	8008be0 <DMA_SetConfig+0x2e4>
 8008bde:	2300      	movs	r3, #0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d020      	beq.n	8008c26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	2201      	movs	r2, #1
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d108      	bne.n	8008c16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	60da      	str	r2, [r3, #12]
}
 8008c14:	e007      	b.n	8008c26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	60da      	str	r2, [r3, #12]
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	58025408 	.word	0x58025408
 8008c38:	5802541c 	.word	0x5802541c
 8008c3c:	58025430 	.word	0x58025430
 8008c40:	58025444 	.word	0x58025444
 8008c44:	58025458 	.word	0x58025458
 8008c48:	5802546c 	.word	0x5802546c
 8008c4c:	58025480 	.word	0x58025480
 8008c50:	58025494 	.word	0x58025494

08008c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a42      	ldr	r2, [pc, #264]	; (8008d6c <DMA_CalcBaseAndBitshift+0x118>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d04a      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a41      	ldr	r2, [pc, #260]	; (8008d70 <DMA_CalcBaseAndBitshift+0x11c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d045      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a3f      	ldr	r2, [pc, #252]	; (8008d74 <DMA_CalcBaseAndBitshift+0x120>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d040      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a3e      	ldr	r2, [pc, #248]	; (8008d78 <DMA_CalcBaseAndBitshift+0x124>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d03b      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a3c      	ldr	r2, [pc, #240]	; (8008d7c <DMA_CalcBaseAndBitshift+0x128>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d036      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a3b      	ldr	r2, [pc, #236]	; (8008d80 <DMA_CalcBaseAndBitshift+0x12c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d031      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a39      	ldr	r2, [pc, #228]	; (8008d84 <DMA_CalcBaseAndBitshift+0x130>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d02c      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a38      	ldr	r2, [pc, #224]	; (8008d88 <DMA_CalcBaseAndBitshift+0x134>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d027      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a36      	ldr	r2, [pc, #216]	; (8008d8c <DMA_CalcBaseAndBitshift+0x138>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d022      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a35      	ldr	r2, [pc, #212]	; (8008d90 <DMA_CalcBaseAndBitshift+0x13c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d01d      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	; (8008d94 <DMA_CalcBaseAndBitshift+0x140>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d018      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a32      	ldr	r2, [pc, #200]	; (8008d98 <DMA_CalcBaseAndBitshift+0x144>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	; (8008d9c <DMA_CalcBaseAndBitshift+0x148>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00e      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a2f      	ldr	r2, [pc, #188]	; (8008da0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d009      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a2d      	ldr	r2, [pc, #180]	; (8008da4 <DMA_CalcBaseAndBitshift+0x150>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d004      	beq.n	8008cfc <DMA_CalcBaseAndBitshift+0xa8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a2c      	ldr	r2, [pc, #176]	; (8008da8 <DMA_CalcBaseAndBitshift+0x154>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d101      	bne.n	8008d00 <DMA_CalcBaseAndBitshift+0xac>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <DMA_CalcBaseAndBitshift+0xae>
 8008d00:	2300      	movs	r3, #0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d024      	beq.n	8008d50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	3b10      	subs	r3, #16
 8008d0e:	4a27      	ldr	r2, [pc, #156]	; (8008dac <DMA_CalcBaseAndBitshift+0x158>)
 8008d10:	fba2 2303 	umull	r2, r3, r2, r3
 8008d14:	091b      	lsrs	r3, r3, #4
 8008d16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	4a24      	ldr	r2, [pc, #144]	; (8008db0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008d20:	5cd3      	ldrb	r3, [r2, r3]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d908      	bls.n	8008d40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <DMA_CalcBaseAndBitshift+0x160>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8008d3e:	e00d      	b.n	8008d5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <DMA_CalcBaseAndBitshift+0x160>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d4e:	e005      	b.n	8008d5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	40020010 	.word	0x40020010
 8008d70:	40020028 	.word	0x40020028
 8008d74:	40020040 	.word	0x40020040
 8008d78:	40020058 	.word	0x40020058
 8008d7c:	40020070 	.word	0x40020070
 8008d80:	40020088 	.word	0x40020088
 8008d84:	400200a0 	.word	0x400200a0
 8008d88:	400200b8 	.word	0x400200b8
 8008d8c:	40020410 	.word	0x40020410
 8008d90:	40020428 	.word	0x40020428
 8008d94:	40020440 	.word	0x40020440
 8008d98:	40020458 	.word	0x40020458
 8008d9c:	40020470 	.word	0x40020470
 8008da0:	40020488 	.word	0x40020488
 8008da4:	400204a0 	.word	0x400204a0
 8008da8:	400204b8 	.word	0x400204b8
 8008dac:	aaaaaaab 	.word	0xaaaaaaab
 8008db0:	080176b8 	.word	0x080176b8
 8008db4:	fffffc00 	.word	0xfffffc00

08008db8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d120      	bne.n	8008e0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d858      	bhi.n	8008e86 <DMA_CheckFifoParam+0xce>
 8008dd4:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <DMA_CheckFifoParam+0x24>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008dff 	.word	0x08008dff
 8008de4:	08008ded 	.word	0x08008ded
 8008de8:	08008e87 	.word	0x08008e87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d048      	beq.n	8008e8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dfc:	e045      	b.n	8008e8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e06:	d142      	bne.n	8008e8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e0c:	e03f      	b.n	8008e8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e16:	d123      	bne.n	8008e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d838      	bhi.n	8008e92 <DMA_CheckFifoParam+0xda>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <DMA_CheckFifoParam+0x70>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e39 	.word	0x08008e39
 8008e2c:	08008e3f 	.word	0x08008e3f
 8008e30:	08008e39 	.word	0x08008e39
 8008e34:	08008e51 	.word	0x08008e51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8008e3c:	e030      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d025      	beq.n	8008e96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e4e:	e022      	b.n	8008e96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e58:	d11f      	bne.n	8008e9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e5e:	e01c      	b.n	8008e9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d902      	bls.n	8008e6e <DMA_CheckFifoParam+0xb6>
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d003      	beq.n	8008e74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008e6c:	e018      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	73fb      	strb	r3, [r7, #15]
        break;
 8008e72:	e015      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00e      	beq.n	8008e9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
    break;
 8008e84:	e00b      	b.n	8008e9e <DMA_CheckFifoParam+0xe6>
        break;
 8008e86:	bf00      	nop
 8008e88:	e00a      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e008      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8008e8e:	bf00      	nop
 8008e90:	e006      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8008e92:	bf00      	nop
 8008e94:	e004      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <DMA_CheckFifoParam+0xe8>
    break;
 8008e9e:	bf00      	nop
    }
  }

  return status;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop

08008eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a38      	ldr	r2, [pc, #224]	; (8008fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d022      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a36      	ldr	r2, [pc, #216]	; (8008fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d01d      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a35      	ldr	r2, [pc, #212]	; (8008fac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d018      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a33      	ldr	r2, [pc, #204]	; (8008fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d013      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a32      	ldr	r2, [pc, #200]	; (8008fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00e      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a30      	ldr	r2, [pc, #192]	; (8008fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d009      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a2f      	ldr	r2, [pc, #188]	; (8008fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d004      	beq.n	8008f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a2d      	ldr	r2, [pc, #180]	; (8008fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d101      	bne.n	8008f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008f12:	2300      	movs	r3, #0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01a      	beq.n	8008f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	3b08      	subs	r3, #8
 8008f20:	4a28      	ldr	r2, [pc, #160]	; (8008fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	461a      	mov	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a24      	ldr	r2, [pc, #144]	; (8008fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008f3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 031f 	and.w	r3, r3, #31
 8008f44:	2201      	movs	r2, #1
 8008f46:	409a      	lsls	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008f4c:	e024      	b.n	8008f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	3b10      	subs	r3, #16
 8008f56:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008f58:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5c:	091b      	lsrs	r3, r3, #4
 8008f5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4a1c      	ldr	r2, [pc, #112]	; (8008fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d806      	bhi.n	8008f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a1b      	ldr	r2, [pc, #108]	; (8008fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d902      	bls.n	8008f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3308      	adds	r3, #8
 8008f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a16      	ldr	r2, [pc, #88]	; (8008fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008f88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	2201      	movs	r2, #1
 8008f92:	409a      	lsls	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f98:	bf00      	nop
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	58025408 	.word	0x58025408
 8008fa8:	5802541c 	.word	0x5802541c
 8008fac:	58025430 	.word	0x58025430
 8008fb0:	58025444 	.word	0x58025444
 8008fb4:	58025458 	.word	0x58025458
 8008fb8:	5802546c 	.word	0x5802546c
 8008fbc:	58025480 	.word	0x58025480
 8008fc0:	58025494 	.word	0x58025494
 8008fc4:	cccccccd 	.word	0xcccccccd
 8008fc8:	16009600 	.word	0x16009600
 8008fcc:	58025880 	.word	0x58025880
 8008fd0:	aaaaaaab 	.word	0xaaaaaaab
 8008fd4:	400204b8 	.word	0x400204b8
 8008fd8:	4002040f 	.word	0x4002040f
 8008fdc:	10008200 	.word	0x10008200
 8008fe0:	40020880 	.word	0x40020880

08008fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d04a      	beq.n	8009090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d847      	bhi.n	8009090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a25      	ldr	r2, [pc, #148]	; (800909c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d022      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a24      	ldr	r2, [pc, #144]	; (80090a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d01d      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d018      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a21      	ldr	r2, [pc, #132]	; (80090a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d013      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00e      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d009      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d004      	beq.n	8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d101      	bne.n	8009054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009054:	2300      	movs	r3, #0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4b17      	ldr	r3, [pc, #92]	; (80090bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	461a      	mov	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800906c:	671a      	str	r2, [r3, #112]	; 0x70
 800906e:	e009      	b.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	461a      	mov	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a11      	ldr	r2, [pc, #68]	; (80090c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009082:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b01      	subs	r3, #1
 8009088:	2201      	movs	r2, #1
 800908a:	409a      	lsls	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009090:	bf00      	nop
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	58025408 	.word	0x58025408
 80090a0:	5802541c 	.word	0x5802541c
 80090a4:	58025430 	.word	0x58025430
 80090a8:	58025444 	.word	0x58025444
 80090ac:	58025458 	.word	0x58025458
 80090b0:	5802546c 	.word	0x5802546c
 80090b4:	58025480 	.word	0x58025480
 80090b8:	58025494 	.word	0x58025494
 80090bc:	1600963f 	.word	0x1600963f
 80090c0:	58025940 	.word	0x58025940
 80090c4:	1000823f 	.word	0x1000823f
 80090c8:	40020940 	.word	0x40020940

080090cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b089      	sub	sp, #36	; 0x24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80090da:	4b89      	ldr	r3, [pc, #548]	; (8009300 <HAL_GPIO_Init+0x234>)
 80090dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090de:	e194      	b.n	800940a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	2101      	movs	r1, #1
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ec:	4013      	ands	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8186 	beq.w	8009404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b01      	cmp	r3, #1
 8009102:	d005      	beq.n	8009110 <HAL_GPIO_Init+0x44>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d130      	bne.n	8009172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	2203      	movs	r2, #3
 800911c:	fa02 f303 	lsl.w	r3, r2, r3
 8009120:	43db      	mvns	r3, r3
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	4013      	ands	r3, r2
 8009126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	fa02 f303 	lsl.w	r3, r2, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4313      	orrs	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009146:	2201      	movs	r2, #1
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	43db      	mvns	r3, r3
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	4013      	ands	r3, r2
 8009154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	f003 0201 	and.w	r2, r3, #1
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	4313      	orrs	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	2b03      	cmp	r3, #3
 800917c:	d017      	beq.n	80091ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	2203      	movs	r2, #3
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43db      	mvns	r3, r3
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	4013      	ands	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d123      	bne.n	8009202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	08da      	lsrs	r2, r3, #3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3208      	adds	r2, #8
 80091c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	220f      	movs	r2, #15
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43db      	mvns	r3, r3
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	4013      	ands	r3, r2
 80091dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	08da      	lsrs	r2, r3, #3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3208      	adds	r2, #8
 80091fc:	69b9      	ldr	r1, [r7, #24]
 80091fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	2203      	movs	r2, #3
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	43db      	mvns	r3, r3
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	4013      	ands	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f003 0203 	and.w	r2, r3, #3
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	4313      	orrs	r3, r2
 800922e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80e0 	beq.w	8009404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009244:	4b2f      	ldr	r3, [pc, #188]	; (8009304 <HAL_GPIO_Init+0x238>)
 8009246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800924a:	4a2e      	ldr	r2, [pc, #184]	; (8009304 <HAL_GPIO_Init+0x238>)
 800924c:	f043 0302 	orr.w	r3, r3, #2
 8009250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009254:	4b2b      	ldr	r3, [pc, #172]	; (8009304 <HAL_GPIO_Init+0x238>)
 8009256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009262:	4a29      	ldr	r2, [pc, #164]	; (8009308 <HAL_GPIO_Init+0x23c>)
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	089b      	lsrs	r3, r3, #2
 8009268:	3302      	adds	r3, #2
 800926a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800926e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	220f      	movs	r2, #15
 800927a:	fa02 f303 	lsl.w	r3, r2, r3
 800927e:	43db      	mvns	r3, r3
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	4013      	ands	r3, r2
 8009284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a20      	ldr	r2, [pc, #128]	; (800930c <HAL_GPIO_Init+0x240>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d052      	beq.n	8009334 <HAL_GPIO_Init+0x268>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <HAL_GPIO_Init+0x244>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d031      	beq.n	80092fa <HAL_GPIO_Init+0x22e>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a1e      	ldr	r2, [pc, #120]	; (8009314 <HAL_GPIO_Init+0x248>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d02b      	beq.n	80092f6 <HAL_GPIO_Init+0x22a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a1d      	ldr	r2, [pc, #116]	; (8009318 <HAL_GPIO_Init+0x24c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d025      	beq.n	80092f2 <HAL_GPIO_Init+0x226>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a1c      	ldr	r2, [pc, #112]	; (800931c <HAL_GPIO_Init+0x250>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d01f      	beq.n	80092ee <HAL_GPIO_Init+0x222>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <HAL_GPIO_Init+0x254>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d019      	beq.n	80092ea <HAL_GPIO_Init+0x21e>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a1a      	ldr	r2, [pc, #104]	; (8009324 <HAL_GPIO_Init+0x258>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d013      	beq.n	80092e6 <HAL_GPIO_Init+0x21a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a19      	ldr	r2, [pc, #100]	; (8009328 <HAL_GPIO_Init+0x25c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00d      	beq.n	80092e2 <HAL_GPIO_Init+0x216>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a18      	ldr	r2, [pc, #96]	; (800932c <HAL_GPIO_Init+0x260>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d007      	beq.n	80092de <HAL_GPIO_Init+0x212>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a17      	ldr	r2, [pc, #92]	; (8009330 <HAL_GPIO_Init+0x264>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d101      	bne.n	80092da <HAL_GPIO_Init+0x20e>
 80092d6:	2309      	movs	r3, #9
 80092d8:	e02d      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092da:	230a      	movs	r3, #10
 80092dc:	e02b      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092de:	2308      	movs	r3, #8
 80092e0:	e029      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092e2:	2307      	movs	r3, #7
 80092e4:	e027      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092e6:	2306      	movs	r3, #6
 80092e8:	e025      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092ea:	2305      	movs	r3, #5
 80092ec:	e023      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092ee:	2304      	movs	r3, #4
 80092f0:	e021      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092f2:	2303      	movs	r3, #3
 80092f4:	e01f      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e01d      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e01b      	b.n	8009336 <HAL_GPIO_Init+0x26a>
 80092fe:	bf00      	nop
 8009300:	58000080 	.word	0x58000080
 8009304:	58024400 	.word	0x58024400
 8009308:	58000400 	.word	0x58000400
 800930c:	58020000 	.word	0x58020000
 8009310:	58020400 	.word	0x58020400
 8009314:	58020800 	.word	0x58020800
 8009318:	58020c00 	.word	0x58020c00
 800931c:	58021000 	.word	0x58021000
 8009320:	58021400 	.word	0x58021400
 8009324:	58021800 	.word	0x58021800
 8009328:	58021c00 	.word	0x58021c00
 800932c:	58022000 	.word	0x58022000
 8009330:	58022400 	.word	0x58022400
 8009334:	2300      	movs	r3, #0
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	f002 0203 	and.w	r2, r2, #3
 800933c:	0092      	lsls	r2, r2, #2
 800933e:	4093      	lsls	r3, r2
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4313      	orrs	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009346:	4938      	ldr	r1, [pc, #224]	; (8009428 <HAL_GPIO_Init+0x35c>)
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	089b      	lsrs	r3, r3, #2
 800934c:	3302      	adds	r3, #2
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	43db      	mvns	r3, r3
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	4013      	ands	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800937a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	43db      	mvns	r3, r3
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80093a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	43db      	mvns	r3, r3
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	4013      	ands	r3, r2
 80093be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	43db      	mvns	r3, r3
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	4013      	ands	r3, r2
 80093e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	3301      	adds	r3, #1
 8009408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	fa22 f303 	lsr.w	r3, r2, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f47f ae63 	bne.w	80090e0 <HAL_GPIO_Init+0x14>
  }
}
 800941a:	bf00      	nop
 800941c:	bf00      	nop
 800941e:	3724      	adds	r7, #36	; 0x24
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	58000400 	.word	0x58000400

0800942c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	887b      	ldrh	r3, [r7, #2]
 800943e:	4013      	ands	r3, r2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009444:	2301      	movs	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
 8009448:	e001      	b.n	800944e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]
 8009468:	4613      	mov	r3, r2
 800946a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800946c:	787b      	ldrb	r3, [r7, #1]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009472:	887a      	ldrh	r2, [r7, #2]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009478:	e003      	b.n	8009482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	041a      	lsls	r2, r3, #16
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	619a      	str	r2, [r3, #24]
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e08b      	b.n	80095ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7f7 ff26 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2224      	movs	r2, #36	; 0x24
 80094c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0201 	bic.w	r2, r2, #1
 80094d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d107      	bne.n	800950a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009506:	609a      	str	r2, [r3, #8]
 8009508:	e006      	b.n	8009518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d108      	bne.n	8009532 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800952e:	605a      	str	r2, [r3, #4]
 8009530:	e007      	b.n	8009542 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <HAL_I2C_Init+0x134>)
 800954e:	430b      	orrs	r3, r1
 8009550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691a      	ldr	r2, [r3, #16]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69d9      	ldr	r1, [r3, #28]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	02008000 	.word	0x02008000

080095c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	461a      	mov	r2, r3
 80095d4:	460b      	mov	r3, r1
 80095d6:	817b      	strh	r3, [r7, #10]
 80095d8:	4613      	mov	r3, r2
 80095da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	f040 80fd 	bne.w	80097e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <HAL_I2C_Master_Transmit+0x30>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e0f6      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009600:	f7fa fdf4 	bl	80041ec <HAL_GetTick>
 8009604:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	2319      	movs	r3, #25
 800960c:	2201      	movs	r2, #1
 800960e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fa0a 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e0e1      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2221      	movs	r2, #33	; 0x21
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2210      	movs	r2, #16
 800962e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	893a      	ldrh	r2, [r7, #8]
 8009642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964e:	b29b      	uxth	r3, r3
 8009650:	2bff      	cmp	r3, #255	; 0xff
 8009652:	d906      	bls.n	8009662 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	22ff      	movs	r2, #255	; 0xff
 8009658:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800965a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e007      	b.n	8009672 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800966c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009670:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d024      	beq.n	80096c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	781a      	ldrb	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	3301      	adds	r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	8979      	ldrh	r1, [r7, #10]
 80096b6:	4b4e      	ldr	r3, [pc, #312]	; (80097f0 <HAL_I2C_Master_Transmit+0x228>)
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 fc05 	bl	8009ecc <I2C_TransferConfig>
 80096c2:	e066      	b.n	8009792 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	8979      	ldrh	r1, [r7, #10]
 80096cc:	4b48      	ldr	r3, [pc, #288]	; (80097f0 <HAL_I2C_Master_Transmit+0x228>)
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fbfa 	bl	8009ecc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80096d8:	e05b      	b.n	8009792 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	6a39      	ldr	r1, [r7, #32]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 f9fd 	bl	8009ade <I2C_WaitOnTXISFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e07b      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	781a      	ldrb	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d034      	beq.n	8009792 <HAL_I2C_Master_Transmit+0x1ca>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	d130      	bne.n	8009792 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	2200      	movs	r2, #0
 8009738:	2180      	movs	r1, #128	; 0x80
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f976 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e04d      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974e:	b29b      	uxth	r3, r3
 8009750:	2bff      	cmp	r3, #255	; 0xff
 8009752:	d90e      	bls.n	8009772 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	22ff      	movs	r2, #255	; 0xff
 8009758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975e:	b2da      	uxtb	r2, r3
 8009760:	8979      	ldrh	r1, [r7, #10]
 8009762:	2300      	movs	r3, #0
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fbae 	bl	8009ecc <I2C_TransferConfig>
 8009770:	e00f      	b.n	8009792 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009780:	b2da      	uxtb	r2, r3
 8009782:	8979      	ldrh	r1, [r7, #10]
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 fb9d 	bl	8009ecc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009796:	b29b      	uxth	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d19e      	bne.n	80096da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	6a39      	ldr	r1, [r7, #32]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f9e3 	bl	8009b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e01a      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2220      	movs	r2, #32
 80097b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6859      	ldr	r1, [r3, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <HAL_I2C_Master_Transmit+0x22c>)
 80097c4:	400b      	ands	r3, r1
 80097c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	e000      	b.n	80097e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	80002000 	.word	0x80002000
 80097f4:	fe00e800 	.word	0xfe00e800

080097f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	607a      	str	r2, [r7, #4]
 8009802:	461a      	mov	r2, r3
 8009804:	460b      	mov	r3, r1
 8009806:	817b      	strh	r3, [r7, #10]
 8009808:	4613      	mov	r3, r2
 800980a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b20      	cmp	r3, #32
 8009816:	f040 80db 	bne.w	80099d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_I2C_Master_Receive+0x30>
 8009824:	2302      	movs	r3, #2
 8009826:	e0d4      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009830:	f7fa fcdc 	bl	80041ec <HAL_GetTick>
 8009834:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	2319      	movs	r3, #25
 800983c:	2201      	movs	r2, #1
 800983e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 f8f2 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e0bf      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2222      	movs	r2, #34	; 0x22
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2210      	movs	r2, #16
 800985e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	893a      	ldrh	r2, [r7, #8]
 8009872:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987e:	b29b      	uxth	r3, r3
 8009880:	2bff      	cmp	r3, #255	; 0xff
 8009882:	d90e      	bls.n	80098a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	22ff      	movs	r2, #255	; 0xff
 8009888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988e:	b2da      	uxtb	r2, r3
 8009890:	8979      	ldrh	r1, [r7, #10]
 8009892:	4b52      	ldr	r3, [pc, #328]	; (80099dc <HAL_I2C_Master_Receive+0x1e4>)
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fb16 	bl	8009ecc <I2C_TransferConfig>
 80098a0:	e06d      	b.n	800997e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	8979      	ldrh	r1, [r7, #10]
 80098b4:	4b49      	ldr	r3, [pc, #292]	; (80099dc <HAL_I2C_Master_Receive+0x1e4>)
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 fb05 	bl	8009ecc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80098c2:	e05c      	b.n	800997e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	6a39      	ldr	r1, [r7, #32]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f993 	bl	8009bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e07c      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009900:	b29b      	uxth	r3, r3
 8009902:	3b01      	subs	r3, #1
 8009904:	b29a      	uxth	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d034      	beq.n	800997e <HAL_I2C_Master_Receive+0x186>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d130      	bne.n	800997e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	2200      	movs	r2, #0
 8009924:	2180      	movs	r1, #128	; 0x80
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 f880 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e04d      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993a:	b29b      	uxth	r3, r3
 800993c:	2bff      	cmp	r3, #255	; 0xff
 800993e:	d90e      	bls.n	800995e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	22ff      	movs	r2, #255	; 0xff
 8009944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994a:	b2da      	uxtb	r2, r3
 800994c:	8979      	ldrh	r1, [r7, #10]
 800994e:	2300      	movs	r3, #0
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fab8 	bl	8009ecc <I2C_TransferConfig>
 800995c:	e00f      	b.n	800997e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996c:	b2da      	uxtb	r2, r3
 800996e:	8979      	ldrh	r1, [r7, #10]
 8009970:	2300      	movs	r3, #0
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 faa7 	bl	8009ecc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d19d      	bne.n	80098c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	6a39      	ldr	r1, [r7, #32]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f8ed 	bl	8009b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e01a      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2220      	movs	r2, #32
 80099a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6859      	ldr	r1, [r3, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <HAL_I2C_Master_Receive+0x1e8>)
 80099b0:	400b      	ands	r3, r1
 80099b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	e000      	b.n	80099d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80099d0:	2302      	movs	r3, #2
  }
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	80002400 	.word	0x80002400
 80099e0:	fe00e800 	.word	0xfe00e800

080099e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d103      	bne.n	8009a02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d007      	beq.n	8009a20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0201 	orr.w	r2, r2, #1
 8009a1e:	619a      	str	r2, [r3, #24]
  }
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a3c:	e03b      	b.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f962 	bl	8009d0c <I2C_IsErrorOccurred>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e041      	b.n	8009ad6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a58:	d02d      	beq.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5a:	f7fa fbc7 	bl	80041ec <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d122      	bne.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	bf0c      	ite	eq
 8009a80:	2301      	moveq	r3, #1
 8009a82:	2300      	movne	r3, #0
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d113      	bne.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	f043 0220 	orr.w	r2, r3, #32
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e00f      	b.n	8009ad6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2301      	moveq	r3, #1
 8009ac8:	2300      	movne	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d0b4      	beq.n	8009a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009aea:	e033      	b.n	8009b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 f90b 	bl	8009d0c <I2C_IsErrorOccurred>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e031      	b.n	8009b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b06:	d025      	beq.n	8009b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b08:	f7fa fb70 	bl	80041ec <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d302      	bcc.n	8009b1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11a      	bne.n	8009b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d013      	beq.n	8009b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b30:	f043 0220 	orr.w	r2, r3, #32
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e007      	b.n	8009b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d1c4      	bne.n	8009aec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b78:	e02f      	b.n	8009bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f8c4 	bl	8009d0c <I2C_IsErrorOccurred>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e02d      	b.n	8009bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b8e:	f7fa fb2d 	bl	80041ec <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d302      	bcc.n	8009ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11a      	bne.n	8009bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	d013      	beq.n	8009bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb6:	f043 0220 	orr.w	r2, r3, #32
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e007      	b.n	8009bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d1c8      	bne.n	8009b7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009c04:	e071      	b.n	8009cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f87e 	bl	8009d0c <I2C_IsErrorOccurred>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d13b      	bne.n	8009ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d138      	bne.n	8009ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d105      	bne.n	8009c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f003 0310 	and.w	r3, r3, #16
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d121      	bne.n	8009c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2210      	movs	r2, #16
 8009c5c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2204      	movs	r2, #4
 8009c62:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b24      	ldr	r3, [pc, #144]	; (8009d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009c78:	400b      	ands	r3, r1
 8009c7a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	75fb      	strb	r3, [r7, #23]
 8009c98:	e002      	b.n	8009ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009ca0:	f7fa faa4 	bl	80041ec <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d302      	bcc.n	8009cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d119      	bne.n	8009cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d116      	bne.n	8009cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d00f      	beq.n	8009cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	f043 0220 	orr.w	r2, r3, #32
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d002      	beq.n	8009cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d083      	beq.n	8009c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	fe00e800 	.word	0xfe00e800

08009d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	; 0x28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	f003 0310 	and.w	r3, r3, #16
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d068      	beq.n	8009e0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2210      	movs	r2, #16
 8009d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d40:	e049      	b.n	8009dd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d48:	d045      	beq.n	8009dd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fa fa4f 	bl	80041ec <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_IsErrorOccurred+0x54>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d13a      	bne.n	8009dd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d82:	d121      	bne.n	8009dc8 <I2C_IsErrorOccurred+0xbc>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d8a:	d01d      	beq.n	8009dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d8c:	7cfb      	ldrb	r3, [r7, #19]
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d01a      	beq.n	8009dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009da0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009da2:	f7fa fa23 	bl	80041ec <HAL_GetTick>
 8009da6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009da8:	e00e      	b.n	8009dc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009daa:	f7fa fa1f 	bl	80041ec <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b19      	cmp	r3, #25
 8009db6:	d907      	bls.n	8009dc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	f043 0320 	orr.w	r3, r3, #32
 8009dbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009dc6:	e006      	b.n	8009dd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b20      	cmp	r3, #32
 8009dd4:	d1e9      	bne.n	8009daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f003 0320 	and.w	r3, r3, #32
 8009de0:	2b20      	cmp	r3, #32
 8009de2:	d003      	beq.n	8009dec <I2C_IsErrorOccurred+0xe0>
 8009de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0aa      	beq.n	8009d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d103      	bne.n	8009dfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	f043 0304 	orr.w	r3, r3, #4
 8009e02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	f043 0301 	orr.w	r3, r3, #1
 8009e22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	f043 0308 	orr.w	r3, r3, #8
 8009e44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	f043 0302 	orr.w	r3, r3, #2
 8009e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01c      	beq.n	8009eba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fdaf 	bl	80099e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6859      	ldr	r1, [r3, #4]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <I2C_IsErrorOccurred+0x1bc>)
 8009e92:	400b      	ands	r3, r1
 8009e94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3728      	adds	r7, #40	; 0x28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	fe00e800 	.word	0xfe00e800

08009ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	607b      	str	r3, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	817b      	strh	r3, [r7, #10]
 8009eda:	4613      	mov	r3, r2
 8009edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ede:	897b      	ldrh	r3, [r7, #10]
 8009ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ee4:	7a7b      	ldrb	r3, [r7, #9]
 8009ee6:	041b      	lsls	r3, r3, #16
 8009ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	0d5b      	lsrs	r3, r3, #21
 8009f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <I2C_TransferConfig+0x60>)
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	43db      	mvns	r3, r3
 8009f10:	ea02 0103 	and.w	r1, r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	03ff63ff 	.word	0x03ff63ff

08009f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	d138      	bne.n	8009fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e032      	b.n	8009fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2224      	movs	r2, #36	; 0x24
 8009f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0201 	bic.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6819      	ldr	r1, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e000      	b.n	8009fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fb8:	2302      	movs	r3, #2
  }
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	d139      	bne.n	800a050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e033      	b.n	800a052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	; 0x24
 8009ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 0201 	bic.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0201 	orr.w	r2, r2, #1
 800a03a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e000      	b.n	800a052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a050:	2302      	movs	r3, #2
  }
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a068:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a06a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a06e:	4a0c      	ldr	r2, [pc, #48]	; (800a0a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a070:	f043 0302 	orr.w	r3, r3, #2
 800a074:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a078:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a07a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a086:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	4906      	ldr	r1, [pc, #24]	; (800a0a4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4313      	orrs	r3, r2
 800a090:	604b      	str	r3, [r1, #4]
}
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	58000400 	.word	0x58000400

0800a0a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a0b0:	4b19      	ldr	r3, [pc, #100]	; (800a118 <HAL_PWREx_ConfigSupply+0x70>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d00a      	beq.n	800a0d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a0bc:	4b16      	ldr	r3, [pc, #88]	; (800a118 <HAL_PWREx_ConfigSupply+0x70>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d001      	beq.n	800a0ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e01f      	b.n	800a10e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e01d      	b.n	800a10e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <HAL_PWREx_ConfigSupply+0x70>)
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f023 0207 	bic.w	r2, r3, #7
 800a0da:	490f      	ldr	r1, [pc, #60]	; (800a118 <HAL_PWREx_ConfigSupply+0x70>)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a0e2:	f7fa f883 	bl	80041ec <HAL_GetTick>
 800a0e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a0e8:	e009      	b.n	800a0fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a0ea:	f7fa f87f 	bl	80041ec <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0f8:	d901      	bls.n	800a0fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e007      	b.n	800a10e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a0fe:	4b06      	ldr	r3, [pc, #24]	; (800a118 <HAL_PWREx_ConfigSupply+0x70>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10a:	d1ee      	bne.n	800a0ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	58024800 	.word	0x58024800

0800a11c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08c      	sub	sp, #48	; 0x30
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f000 bc48 	b.w	800a9c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 8088 	beq.w	800a24e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a13e:	4b99      	ldr	r3, [pc, #612]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a148:	4b96      	ldr	r3, [pc, #600]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	2b10      	cmp	r3, #16
 800a152:	d007      	beq.n	800a164 <HAL_RCC_OscConfig+0x48>
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	2b18      	cmp	r3, #24
 800a158:	d111      	bne.n	800a17e <HAL_RCC_OscConfig+0x62>
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d10c      	bne.n	800a17e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a164:	4b8f      	ldr	r3, [pc, #572]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d06d      	beq.n	800a24c <HAL_RCC_OscConfig+0x130>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d169      	bne.n	800a24c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	f000 bc21 	b.w	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a186:	d106      	bne.n	800a196 <HAL_RCC_OscConfig+0x7a>
 800a188:	4b86      	ldr	r3, [pc, #536]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a85      	ldr	r2, [pc, #532]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a18e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	e02e      	b.n	800a1f4 <HAL_RCC_OscConfig+0xd8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10c      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x9c>
 800a19e:	4b81      	ldr	r3, [pc, #516]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a80      	ldr	r2, [pc, #512]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	4b7e      	ldr	r3, [pc, #504]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a7d      	ldr	r2, [pc, #500]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	e01d      	b.n	800a1f4 <HAL_RCC_OscConfig+0xd8>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1c0:	d10c      	bne.n	800a1dc <HAL_RCC_OscConfig+0xc0>
 800a1c2:	4b78      	ldr	r3, [pc, #480]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a77      	ldr	r2, [pc, #476]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	4b75      	ldr	r3, [pc, #468]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a74      	ldr	r2, [pc, #464]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e00b      	b.n	800a1f4 <HAL_RCC_OscConfig+0xd8>
 800a1dc:	4b71      	ldr	r3, [pc, #452]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a70      	ldr	r2, [pc, #448]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	4b6e      	ldr	r3, [pc, #440]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a6d      	ldr	r2, [pc, #436]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a1ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d013      	beq.n	800a224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fc:	f7f9 fff6 	bl	80041ec <HAL_GetTick>
 800a200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a204:	f7f9 fff2 	bl	80041ec <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b64      	cmp	r3, #100	; 0x64
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e3d4      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a216:	4b63      	ldr	r3, [pc, #396]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f0      	beq.n	800a204 <HAL_RCC_OscConfig+0xe8>
 800a222:	e014      	b.n	800a24e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a224:	f7f9 ffe2 	bl	80041ec <HAL_GetTick>
 800a228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a22a:	e008      	b.n	800a23e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a22c:	f7f9 ffde 	bl	80041ec <HAL_GetTick>
 800a230:	4602      	mov	r2, r0
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b64      	cmp	r3, #100	; 0x64
 800a238:	d901      	bls.n	800a23e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e3c0      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a23e:	4b59      	ldr	r3, [pc, #356]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f0      	bne.n	800a22c <HAL_RCC_OscConfig+0x110>
 800a24a:	e000      	b.n	800a24e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a24c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 80ca 	beq.w	800a3f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a25c:	4b51      	ldr	r3, [pc, #324]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a264:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a266:	4b4f      	ldr	r3, [pc, #316]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d007      	beq.n	800a282 <HAL_RCC_OscConfig+0x166>
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	2b18      	cmp	r3, #24
 800a276:	d156      	bne.n	800a326 <HAL_RCC_OscConfig+0x20a>
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d151      	bne.n	800a326 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a282:	4b48      	ldr	r3, [pc, #288]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <HAL_RCC_OscConfig+0x17e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e392      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a29a:	4b42      	ldr	r3, [pc, #264]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f023 0219 	bic.w	r2, r3, #25
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	493f      	ldr	r1, [pc, #252]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ac:	f7f9 ff9e 	bl	80041ec <HAL_GetTick>
 800a2b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2b2:	e008      	b.n	800a2c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2b4:	f7f9 ff9a 	bl	80041ec <HAL_GetTick>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d901      	bls.n	800a2c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e37c      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2c6:	4b37      	ldr	r3, [pc, #220]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0f0      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d2:	f7f9 ff97 	bl	8004204 <HAL_GetREVID>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d817      	bhi.n	800a310 <HAL_RCC_OscConfig+0x1f4>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	d108      	bne.n	800a2fa <HAL_RCC_OscConfig+0x1de>
 800a2e8:	4b2e      	ldr	r3, [pc, #184]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2f8:	e07a      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2fa:	4b2a      	ldr	r3, [pc, #168]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	031b      	lsls	r3, r3, #12
 800a308:	4926      	ldr	r1, [pc, #152]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a30e:	e06f      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a310:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	061b      	lsls	r3, r3, #24
 800a31e:	4921      	ldr	r1, [pc, #132]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a320:	4313      	orrs	r3, r2
 800a322:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a324:	e064      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d047      	beq.n	800a3be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a32e:	4b1d      	ldr	r3, [pc, #116]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f023 0219 	bic.w	r2, r3, #25
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	491a      	ldr	r1, [pc, #104]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a340:	f7f9 ff54 	bl	80041ec <HAL_GetTick>
 800a344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a346:	e008      	b.n	800a35a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a348:	f7f9 ff50 	bl	80041ec <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e332      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f0      	beq.n	800a348 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a366:	f7f9 ff4d 	bl	8004204 <HAL_GetREVID>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a370:	4293      	cmp	r3, r2
 800a372:	d819      	bhi.n	800a3a8 <HAL_RCC_OscConfig+0x28c>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	2b40      	cmp	r3, #64	; 0x40
 800a37a:	d108      	bne.n	800a38e <HAL_RCC_OscConfig+0x272>
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a384:	4a07      	ldr	r2, [pc, #28]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a38a:	6053      	str	r3, [r2, #4]
 800a38c:	e030      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	031b      	lsls	r3, r3, #12
 800a39c:	4901      	ldr	r1, [pc, #4]	; (800a3a4 <HAL_RCC_OscConfig+0x288>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	604b      	str	r3, [r1, #4]
 800a3a2:	e025      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	4b9a      	ldr	r3, [pc, #616]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	061b      	lsls	r3, r3, #24
 800a3b6:	4997      	ldr	r1, [pc, #604]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	604b      	str	r3, [r1, #4]
 800a3bc:	e018      	b.n	800a3f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3be:	4b95      	ldr	r3, [pc, #596]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a94      	ldr	r2, [pc, #592]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a3c4:	f023 0301 	bic.w	r3, r3, #1
 800a3c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ca:	f7f9 ff0f 	bl	80041ec <HAL_GetTick>
 800a3ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a3d0:	e008      	b.n	800a3e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3d2:	f7f9 ff0b 	bl	80041ec <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d901      	bls.n	800a3e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e2ed      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a3e4:	4b8b      	ldr	r3, [pc, #556]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1f0      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80a9 	beq.w	800a550 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3fe:	4b85      	ldr	r3, [pc, #532]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a406:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a408:	4b82      	ldr	r3, [pc, #520]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2b08      	cmp	r3, #8
 800a412:	d007      	beq.n	800a424 <HAL_RCC_OscConfig+0x308>
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	2b18      	cmp	r3, #24
 800a418:	d13a      	bne.n	800a490 <HAL_RCC_OscConfig+0x374>
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d135      	bne.n	800a490 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a424:	4b7b      	ldr	r3, [pc, #492]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_RCC_OscConfig+0x320>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	2b80      	cmp	r3, #128	; 0x80
 800a436:	d001      	beq.n	800a43c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e2c1      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a43c:	f7f9 fee2 	bl	8004204 <HAL_GetREVID>
 800a440:	4603      	mov	r3, r0
 800a442:	f241 0203 	movw	r2, #4099	; 0x1003
 800a446:	4293      	cmp	r3, r2
 800a448:	d817      	bhi.n	800a47a <HAL_RCC_OscConfig+0x35e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d108      	bne.n	800a464 <HAL_RCC_OscConfig+0x348>
 800a452:	4b70      	ldr	r3, [pc, #448]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a45a:	4a6e      	ldr	r2, [pc, #440]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a45c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a460:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a462:	e075      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a464:	4b6b      	ldr	r3, [pc, #428]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	069b      	lsls	r3, r3, #26
 800a472:	4968      	ldr	r1, [pc, #416]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a474:	4313      	orrs	r3, r2
 800a476:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a478:	e06a      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a47a:	4b66      	ldr	r3, [pc, #408]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	061b      	lsls	r3, r3, #24
 800a488:	4962      	ldr	r1, [pc, #392]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a48e:	e05f      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	69db      	ldr	r3, [r3, #28]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d042      	beq.n	800a51e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a498:	4b5e      	ldr	r3, [pc, #376]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a5d      	ldr	r2, [pc, #372]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a4:	f7f9 fea2 	bl	80041ec <HAL_GetTick>
 800a4a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a4ac:	f7f9 fe9e 	bl	80041ec <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e280      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4be:	4b55      	ldr	r3, [pc, #340]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0f0      	beq.n	800a4ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4ca:	f7f9 fe9b 	bl	8004204 <HAL_GetREVID>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d817      	bhi.n	800a508 <HAL_RCC_OscConfig+0x3ec>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	d108      	bne.n	800a4f2 <HAL_RCC_OscConfig+0x3d6>
 800a4e0:	4b4c      	ldr	r3, [pc, #304]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a4e8:	4a4a      	ldr	r2, [pc, #296]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a4ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4ee:	6053      	str	r3, [r2, #4]
 800a4f0:	e02e      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
 800a4f2:	4b48      	ldr	r3, [pc, #288]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	069b      	lsls	r3, r3, #26
 800a500:	4944      	ldr	r1, [pc, #272]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a502:	4313      	orrs	r3, r2
 800a504:	604b      	str	r3, [r1, #4]
 800a506:	e023      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
 800a508:	4b42      	ldr	r3, [pc, #264]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	493f      	ldr	r1, [pc, #252]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	60cb      	str	r3, [r1, #12]
 800a51c:	e018      	b.n	800a550 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a51e:	4b3d      	ldr	r3, [pc, #244]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a3c      	ldr	r2, [pc, #240]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52a:	f7f9 fe5f 	bl	80041ec <HAL_GetTick>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a530:	e008      	b.n	800a544 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a532:	f7f9 fe5b 	bl	80041ec <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e23d      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a544:	4b33      	ldr	r3, [pc, #204]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f0      	bne.n	800a532 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d036      	beq.n	800a5ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d019      	beq.n	800a598 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a564:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a568:	4a2a      	ldr	r2, [pc, #168]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a570:	f7f9 fe3c 	bl	80041ec <HAL_GetTick>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a578:	f7f9 fe38 	bl	80041ec <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e21a      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a58a:	4b22      	ldr	r3, [pc, #136]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0f0      	beq.n	800a578 <HAL_RCC_OscConfig+0x45c>
 800a596:	e018      	b.n	800a5ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a598:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a59c:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a59e:	f023 0301 	bic.w	r3, r3, #1
 800a5a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5a4:	f7f9 fe22 	bl	80041ec <HAL_GetTick>
 800a5a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5ac:	f7f9 fe1e 	bl	80041ec <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e200      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f0      	bne.n	800a5ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d039      	beq.n	800a64a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01c      	beq.n	800a618 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a5e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a5ea:	f7f9 fdff 	bl	80041ec <HAL_GetTick>
 800a5ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a5f0:	e008      	b.n	800a604 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5f2:	f7f9 fdfb 	bl	80041ec <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d901      	bls.n	800a604 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e1dd      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <HAL_RCC_OscConfig+0x4f8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0f0      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x4d6>
 800a610:	e01b      	b.n	800a64a <HAL_RCC_OscConfig+0x52e>
 800a612:	bf00      	nop
 800a614:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a618:	4b9b      	ldr	r3, [pc, #620]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a9a      	ldr	r2, [pc, #616]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a622:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a624:	f7f9 fde2 	bl	80041ec <HAL_GetTick>
 800a628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a62a:	e008      	b.n	800a63e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a62c:	f7f9 fdde 	bl	80041ec <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	2b02      	cmp	r3, #2
 800a638:	d901      	bls.n	800a63e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e1c0      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a63e:	4b92      	ldr	r3, [pc, #584]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f0      	bne.n	800a62c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8081 	beq.w	800a75a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a658:	4b8c      	ldr	r3, [pc, #560]	; (800a88c <HAL_RCC_OscConfig+0x770>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a8b      	ldr	r2, [pc, #556]	; (800a88c <HAL_RCC_OscConfig+0x770>)
 800a65e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a664:	f7f9 fdc2 	bl	80041ec <HAL_GetTick>
 800a668:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a66a:	e008      	b.n	800a67e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a66c:	f7f9 fdbe 	bl	80041ec <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	2b64      	cmp	r3, #100	; 0x64
 800a678:	d901      	bls.n	800a67e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e1a0      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a67e:	4b83      	ldr	r3, [pc, #524]	; (800a88c <HAL_RCC_OscConfig+0x770>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0f0      	beq.n	800a66c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d106      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x584>
 800a692:	4b7d      	ldr	r3, [pc, #500]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a696:	4a7c      	ldr	r2, [pc, #496]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	6713      	str	r3, [r2, #112]	; 0x70
 800a69e:	e02d      	b.n	800a6fc <HAL_RCC_OscConfig+0x5e0>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10c      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x5a6>
 800a6a8:	4b77      	ldr	r3, [pc, #476]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ac:	4a76      	ldr	r2, [pc, #472]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6ae:	f023 0301 	bic.w	r3, r3, #1
 800a6b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6b4:	4b74      	ldr	r3, [pc, #464]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b8:	4a73      	ldr	r2, [pc, #460]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6ba:	f023 0304 	bic.w	r3, r3, #4
 800a6be:	6713      	str	r3, [r2, #112]	; 0x70
 800a6c0:	e01c      	b.n	800a6fc <HAL_RCC_OscConfig+0x5e0>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d10c      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x5c8>
 800a6ca:	4b6f      	ldr	r3, [pc, #444]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ce:	4a6e      	ldr	r2, [pc, #440]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6d0:	f043 0304 	orr.w	r3, r3, #4
 800a6d4:	6713      	str	r3, [r2, #112]	; 0x70
 800a6d6:	4b6c      	ldr	r3, [pc, #432]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6da:	4a6b      	ldr	r2, [pc, #428]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6dc:	f043 0301 	orr.w	r3, r3, #1
 800a6e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a6e2:	e00b      	b.n	800a6fc <HAL_RCC_OscConfig+0x5e0>
 800a6e4:	4b68      	ldr	r3, [pc, #416]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e8:	4a67      	ldr	r2, [pc, #412]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6ea:	f023 0301 	bic.w	r3, r3, #1
 800a6ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a6f0:	4b65      	ldr	r3, [pc, #404]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f4:	4a64      	ldr	r2, [pc, #400]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a6f6:	f023 0304 	bic.w	r3, r3, #4
 800a6fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d015      	beq.n	800a730 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a704:	f7f9 fd72 	bl	80041ec <HAL_GetTick>
 800a708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a70a:	e00a      	b.n	800a722 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a70c:	f7f9 fd6e 	bl	80041ec <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e14e      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a722:	4b59      	ldr	r3, [pc, #356]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0ee      	beq.n	800a70c <HAL_RCC_OscConfig+0x5f0>
 800a72e:	e014      	b.n	800a75a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a730:	f7f9 fd5c 	bl	80041ec <HAL_GetTick>
 800a734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a736:	e00a      	b.n	800a74e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a738:	f7f9 fd58 	bl	80041ec <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	f241 3288 	movw	r2, #5000	; 0x1388
 800a746:	4293      	cmp	r3, r2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e138      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a74e:	4b4e      	ldr	r3, [pc, #312]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1ee      	bne.n	800a738 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f000 812d 	beq.w	800a9be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a764:	4b48      	ldr	r3, [pc, #288]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a76c:	2b18      	cmp	r3, #24
 800a76e:	f000 80bd 	beq.w	800a8ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b02      	cmp	r3, #2
 800a778:	f040 809e 	bne.w	800a8b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a77c:	4b42      	ldr	r3, [pc, #264]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a41      	ldr	r2, [pc, #260]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a788:	f7f9 fd30 	bl	80041ec <HAL_GetTick>
 800a78c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a790:	f7f9 fd2c 	bl	80041ec <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e10e      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7a2:	4b39      	ldr	r3, [pc, #228]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1f0      	bne.n	800a790 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7ae:	4b36      	ldr	r3, [pc, #216]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a7b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7b2:	4b37      	ldr	r3, [pc, #220]	; (800a890 <HAL_RCC_OscConfig+0x774>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a7be:	0112      	lsls	r2, r2, #4
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	4931      	ldr	r1, [pc, #196]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	025b      	lsls	r3, r3, #9
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	061b      	lsls	r3, r3, #24
 800a7f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7f8:	4923      	ldr	r1, [pc, #140]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a7fe:	4b22      	ldr	r3, [pc, #136]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	4a21      	ldr	r2, [pc, #132]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a80a:	4b1f      	ldr	r3, [pc, #124]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a80c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a80e:	4b21      	ldr	r3, [pc, #132]	; (800a894 <HAL_RCC_OscConfig+0x778>)
 800a810:	4013      	ands	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a816:	00d2      	lsls	r2, r2, #3
 800a818:	491b      	ldr	r1, [pc, #108]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a81a:	4313      	orrs	r3, r2
 800a81c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a81e:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	f023 020c 	bic.w	r2, r3, #12
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	4917      	ldr	r1, [pc, #92]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a830:	4b15      	ldr	r3, [pc, #84]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	f023 0202 	bic.w	r2, r3, #2
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83c:	4912      	ldr	r1, [pc, #72]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a842:	4b11      	ldr	r3, [pc, #68]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	4a10      	ldr	r2, [pc, #64]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a84c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a84e:	4b0e      	ldr	r3, [pc, #56]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	4a0d      	ldr	r2, [pc, #52]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a858:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85e:	4a0a      	ldr	r2, [pc, #40]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	4a07      	ldr	r2, [pc, #28]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a04      	ldr	r2, [pc, #16]	; (800a888 <HAL_RCC_OscConfig+0x76c>)
 800a878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a87c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a87e:	f7f9 fcb5 	bl	80041ec <HAL_GetTick>
 800a882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a884:	e011      	b.n	800a8aa <HAL_RCC_OscConfig+0x78e>
 800a886:	bf00      	nop
 800a888:	58024400 	.word	0x58024400
 800a88c:	58024800 	.word	0x58024800
 800a890:	fffffc0c 	.word	0xfffffc0c
 800a894:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a898:	f7f9 fca8 	bl	80041ec <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d901      	bls.n	800a8aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e08a      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8aa:	4b47      	ldr	r3, [pc, #284]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f0      	beq.n	800a898 <HAL_RCC_OscConfig+0x77c>
 800a8b6:	e082      	b.n	800a9be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8b8:	4b43      	ldr	r3, [pc, #268]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a42      	ldr	r2, [pc, #264]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c4:	f7f9 fc92 	bl	80041ec <HAL_GetTick>
 800a8c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8ca:	e008      	b.n	800a8de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8cc:	f7f9 fc8e 	bl	80041ec <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d901      	bls.n	800a8de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e070      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8de:	4b3a      	ldr	r3, [pc, #232]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f0      	bne.n	800a8cc <HAL_RCC_OscConfig+0x7b0>
 800a8ea:	e068      	b.n	800a9be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a8ec:	4b36      	ldr	r3, [pc, #216]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a8f2:	4b35      	ldr	r3, [pc, #212]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d031      	beq.n	800a964 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f003 0203 	and.w	r2, r3, #3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d12a      	bne.n	800a964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	091b      	lsrs	r3, r3, #4
 800a912:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d122      	bne.n	800a964 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a928:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d11a      	bne.n	800a964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	0a5b      	lsrs	r3, r3, #9
 800a932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d111      	bne.n	800a964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a94e:	429a      	cmp	r2, r3
 800a950:	d108      	bne.n	800a964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	0e1b      	lsrs	r3, r3, #24
 800a956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a960:	429a      	cmp	r2, r3
 800a962:	d001      	beq.n	800a968 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e02b      	b.n	800a9c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a968:	4b17      	ldr	r3, [pc, #92]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	08db      	lsrs	r3, r3, #3
 800a96e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a972:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d01f      	beq.n	800a9be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a97e:	4b12      	ldr	r3, [pc, #72]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a982:	4a11      	ldr	r2, [pc, #68]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a984:	f023 0301 	bic.w	r3, r3, #1
 800a988:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a98a:	f7f9 fc2f 	bl	80041ec <HAL_GetTick>
 800a98e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a990:	bf00      	nop
 800a992:	f7f9 fc2b 	bl	80041ec <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d0f9      	beq.n	800a992 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a99e:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a9a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9a2:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <HAL_RCC_OscConfig+0x8b0>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9aa:	00d2      	lsls	r2, r2, #3
 800a9ac:	4906      	ldr	r1, [pc, #24]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a9b2:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	4a04      	ldr	r2, [pc, #16]	; (800a9c8 <HAL_RCC_OscConfig+0x8ac>)
 800a9b8:	f043 0301 	orr.w	r3, r3, #1
 800a9bc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3730      	adds	r7, #48	; 0x30
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	58024400 	.word	0x58024400
 800a9cc:	ffff0007 	.word	0xffff0007

0800a9d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e19c      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a9e4:	4b8a      	ldr	r3, [pc, #552]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 030f 	and.w	r3, r3, #15
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d910      	bls.n	800aa14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f2:	4b87      	ldr	r3, [pc, #540]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f023 020f 	bic.w	r2, r3, #15
 800a9fa:	4985      	ldr	r1, [pc, #532]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa02:	4b83      	ldr	r3, [pc, #524]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d001      	beq.n	800aa14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e184      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d010      	beq.n	800aa42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	691a      	ldr	r2, [r3, #16]
 800aa24:	4b7b      	ldr	r3, [pc, #492]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d908      	bls.n	800aa42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa30:	4b78      	ldr	r3, [pc, #480]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	4975      	ldr	r1, [pc, #468]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d010      	beq.n	800aa70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695a      	ldr	r2, [r3, #20]
 800aa52:	4b70      	ldr	r3, [pc, #448]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d908      	bls.n	800aa70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa5e:	4b6d      	ldr	r3, [pc, #436]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	496a      	ldr	r1, [pc, #424]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d010      	beq.n	800aa9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	4b64      	ldr	r3, [pc, #400]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d908      	bls.n	800aa9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa8c:	4b61      	ldr	r3, [pc, #388]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	495e      	ldr	r1, [pc, #376]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69da      	ldr	r2, [r3, #28]
 800aaae:	4b59      	ldr	r3, [pc, #356]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d908      	bls.n	800aacc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aaba:	4b56      	ldr	r3, [pc, #344]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	4953      	ldr	r1, [pc, #332]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d010      	beq.n	800aafa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68da      	ldr	r2, [r3, #12]
 800aadc:	4b4d      	ldr	r3, [pc, #308]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d908      	bls.n	800aafa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aae8:	4b4a      	ldr	r3, [pc, #296]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	f023 020f 	bic.w	r2, r3, #15
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	4947      	ldr	r1, [pc, #284]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0301 	and.w	r3, r3, #1
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d055      	beq.n	800abb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ab06:	4b43      	ldr	r3, [pc, #268]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4940      	ldr	r1, [pc, #256]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d107      	bne.n	800ab30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab20:	4b3c      	ldr	r3, [pc, #240]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d121      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0f6      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d107      	bne.n	800ab48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab38:	4b36      	ldr	r3, [pc, #216]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d115      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e0ea      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d107      	bne.n	800ab60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab50:	4b30      	ldr	r3, [pc, #192]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e0de      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab60:	4b2c      	ldr	r3, [pc, #176]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e0d6      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab70:	4b28      	ldr	r3, [pc, #160]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	f023 0207 	bic.w	r2, r3, #7
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	4925      	ldr	r1, [pc, #148]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab82:	f7f9 fb33 	bl	80041ec <HAL_GetTick>
 800ab86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab88:	e00a      	b.n	800aba0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab8a:	f7f9 fb2f 	bl	80041ec <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e0be      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aba0:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	429a      	cmp	r2, r3
 800abb0:	d1eb      	bne.n	800ab8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d010      	beq.n	800abe0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	f003 030f 	and.w	r3, r3, #15
 800abca:	429a      	cmp	r2, r3
 800abcc:	d208      	bcs.n	800abe0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abce:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	f023 020f 	bic.w	r2, r3, #15
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	490e      	ldr	r1, [pc, #56]	; (800ac14 <HAL_RCC_ClockConfig+0x244>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abe0:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 030f 	and.w	r3, r3, #15
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d214      	bcs.n	800ac18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abee:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f023 020f 	bic.w	r2, r3, #15
 800abf6:	4906      	ldr	r1, [pc, #24]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abfe:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <HAL_RCC_ClockConfig+0x240>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 030f 	and.w	r3, r3, #15
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d005      	beq.n	800ac18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e086      	b.n	800ad1e <HAL_RCC_ClockConfig+0x34e>
 800ac10:	52002000 	.word	0x52002000
 800ac14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d010      	beq.n	800ac46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691a      	ldr	r2, [r3, #16]
 800ac28:	4b3f      	ldr	r3, [pc, #252]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d208      	bcs.n	800ac46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac34:	4b3c      	ldr	r3, [pc, #240]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	4939      	ldr	r1, [pc, #228]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0308 	and.w	r3, r3, #8
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d010      	beq.n	800ac74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695a      	ldr	r2, [r3, #20]
 800ac56:	4b34      	ldr	r3, [pc, #208]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d208      	bcs.n	800ac74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac62:	4b31      	ldr	r3, [pc, #196]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	492e      	ldr	r1, [pc, #184]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d010      	beq.n	800aca2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	699a      	ldr	r2, [r3, #24]
 800ac84:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d208      	bcs.n	800aca2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac90:	4b25      	ldr	r3, [pc, #148]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	4922      	ldr	r1, [pc, #136]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d010      	beq.n	800acd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69da      	ldr	r2, [r3, #28]
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acba:	429a      	cmp	r2, r3
 800acbc:	d208      	bcs.n	800acd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800acbe:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	4917      	ldr	r1, [pc, #92]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800accc:	4313      	orrs	r3, r2
 800acce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800acd0:	f000 f834 	bl	800ad3c <HAL_RCC_GetSysClockFreq>
 800acd4:	4602      	mov	r2, r0
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	f003 030f 	and.w	r3, r3, #15
 800ace0:	4912      	ldr	r1, [pc, #72]	; (800ad2c <HAL_RCC_ClockConfig+0x35c>)
 800ace2:	5ccb      	ldrb	r3, [r1, r3]
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	fa22 f303 	lsr.w	r3, r2, r3
 800acec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <HAL_RCC_ClockConfig+0x358>)
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <HAL_RCC_ClockConfig+0x35c>)
 800acf8:	5cd3      	ldrb	r3, [r2, r3]
 800acfa:	f003 031f 	and.w	r3, r3, #31
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
 800ad04:	4a0a      	ldr	r2, [pc, #40]	; (800ad30 <HAL_RCC_ClockConfig+0x360>)
 800ad06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad08:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <HAL_RCC_ClockConfig+0x364>)
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <HAL_RCC_ClockConfig+0x368>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f8 f86e 	bl	8002df4 <HAL_InitTick>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	080176a8 	.word	0x080176a8
 800ad30:	24000090 	.word	0x24000090
 800ad34:	2400008c 	.word	0x2400008c
 800ad38:	24000094 	.word	0x24000094

0800ad3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b089      	sub	sp, #36	; 0x24
 800ad40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad42:	4bb3      	ldr	r3, [pc, #716]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad4a:	2b18      	cmp	r3, #24
 800ad4c:	f200 8155 	bhi.w	800affa <HAL_RCC_GetSysClockFreq+0x2be>
 800ad50:	a201      	add	r2, pc, #4	; (adr r2, 800ad58 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ad52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad56:	bf00      	nop
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800affb 	.word	0x0800affb
 800ad60:	0800affb 	.word	0x0800affb
 800ad64:	0800affb 	.word	0x0800affb
 800ad68:	0800affb 	.word	0x0800affb
 800ad6c:	0800affb 	.word	0x0800affb
 800ad70:	0800affb 	.word	0x0800affb
 800ad74:	0800affb 	.word	0x0800affb
 800ad78:	0800ade3 	.word	0x0800ade3
 800ad7c:	0800affb 	.word	0x0800affb
 800ad80:	0800affb 	.word	0x0800affb
 800ad84:	0800affb 	.word	0x0800affb
 800ad88:	0800affb 	.word	0x0800affb
 800ad8c:	0800affb 	.word	0x0800affb
 800ad90:	0800affb 	.word	0x0800affb
 800ad94:	0800affb 	.word	0x0800affb
 800ad98:	0800ade9 	.word	0x0800ade9
 800ad9c:	0800affb 	.word	0x0800affb
 800ada0:	0800affb 	.word	0x0800affb
 800ada4:	0800affb 	.word	0x0800affb
 800ada8:	0800affb 	.word	0x0800affb
 800adac:	0800affb 	.word	0x0800affb
 800adb0:	0800affb 	.word	0x0800affb
 800adb4:	0800affb 	.word	0x0800affb
 800adb8:	0800adef 	.word	0x0800adef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adbc:	4b94      	ldr	r3, [pc, #592]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0320 	and.w	r3, r3, #32
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d009      	beq.n	800addc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc8:	4b91      	ldr	r3, [pc, #580]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	08db      	lsrs	r3, r3, #3
 800adce:	f003 0303 	and.w	r3, r3, #3
 800add2:	4a90      	ldr	r2, [pc, #576]	; (800b014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
 800add8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800adda:	e111      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800addc:	4b8d      	ldr	r3, [pc, #564]	; (800b014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adde:	61bb      	str	r3, [r7, #24]
      break;
 800ade0:	e10e      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ade2:	4b8d      	ldr	r3, [pc, #564]	; (800b018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ade4:	61bb      	str	r3, [r7, #24]
      break;
 800ade6:	e10b      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ade8:	4b8c      	ldr	r3, [pc, #560]	; (800b01c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800adea:	61bb      	str	r3, [r7, #24]
      break;
 800adec:	e108      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adee:	4b88      	ldr	r3, [pc, #544]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800adf8:	4b85      	ldr	r3, [pc, #532]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	091b      	lsrs	r3, r3, #4
 800adfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae04:	4b82      	ldr	r3, [pc, #520]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae0e:	4b80      	ldr	r3, [pc, #512]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	08db      	lsrs	r3, r3, #3
 800ae14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 80e1 	beq.w	800aff4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f000 8083 	beq.w	800af40 <HAL_RCC_GetSysClockFreq+0x204>
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f200 80a1 	bhi.w	800af84 <HAL_RCC_GetSysClockFreq+0x248>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <HAL_RCC_GetSysClockFreq+0x114>
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d056      	beq.n	800aefc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ae4e:	e099      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae50:	4b6f      	ldr	r3, [pc, #444]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d02d      	beq.n	800aeb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae5c:	4b6c      	ldr	r3, [pc, #432]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	08db      	lsrs	r3, r3, #3
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	4a6b      	ldr	r2, [pc, #428]	; (800b014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae68:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae86:	4b62      	ldr	r3, [pc, #392]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b020 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aeb6:	e087      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b024 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b51      	ldr	r3, [pc, #324]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a02 	vldr	s12, [r7, #8]
 800aede:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b020 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aefa:	e065      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b028 <HAL_RCC_GetSysClockFreq+0x2ec>
 800af0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0e:	4b40      	ldr	r3, [pc, #256]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b020 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af3e:	e043      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b02c <HAL_RCC_GetSysClockFreq+0x2f0>
 800af4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af52:	4b2f      	ldr	r3, [pc, #188]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	ed97 6a02 	vldr	s12, [r7, #8]
 800af66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b020 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af82:	e021      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b028 <HAL_RCC_GetSysClockFreq+0x2ec>
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b1e      	ldr	r3, [pc, #120]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a02 	vldr	s12, [r7, #8]
 800afaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b020 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afcc:	0a5b      	lsrs	r3, r3, #9
 800afce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd2:	3301      	adds	r3, #1
 800afd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800afe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afec:	ee17 3a90 	vmov	r3, s15
 800aff0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aff2:	e005      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
      break;
 800aff8:	e002      	b.n	800b000 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800affa:	4b07      	ldr	r3, [pc, #28]	; (800b018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800affc:	61bb      	str	r3, [r7, #24]
      break;
 800affe:	bf00      	nop
  }

  return sysclockfreq;
 800b000:	69bb      	ldr	r3, [r7, #24]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3724      	adds	r7, #36	; 0x24
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
 800b014:	03d09000 	.word	0x03d09000
 800b018:	003d0900 	.word	0x003d0900
 800b01c:	017d7840 	.word	0x017d7840
 800b020:	46000000 	.word	0x46000000
 800b024:	4c742400 	.word	0x4c742400
 800b028:	4a742400 	.word	0x4a742400
 800b02c:	4bbebc20 	.word	0x4bbebc20

0800b030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b036:	f7ff fe81 	bl	800ad3c <HAL_RCC_GetSysClockFreq>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4b10      	ldr	r3, [pc, #64]	; (800b080 <HAL_RCC_GetHCLKFreq+0x50>)
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	0a1b      	lsrs	r3, r3, #8
 800b042:	f003 030f 	and.w	r3, r3, #15
 800b046:	490f      	ldr	r1, [pc, #60]	; (800b084 <HAL_RCC_GetHCLKFreq+0x54>)
 800b048:	5ccb      	ldrb	r3, [r1, r3]
 800b04a:	f003 031f 	and.w	r3, r3, #31
 800b04e:	fa22 f303 	lsr.w	r3, r2, r3
 800b052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b054:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <HAL_RCC_GetHCLKFreq+0x50>)
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	f003 030f 	and.w	r3, r3, #15
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <HAL_RCC_GetHCLKFreq+0x54>)
 800b05e:	5cd3      	ldrb	r3, [r2, r3]
 800b060:	f003 031f 	and.w	r3, r3, #31
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	fa22 f303 	lsr.w	r3, r2, r3
 800b06a:	4a07      	ldr	r2, [pc, #28]	; (800b088 <HAL_RCC_GetHCLKFreq+0x58>)
 800b06c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b06e:	4a07      	ldr	r2, [pc, #28]	; (800b08c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <HAL_RCC_GetHCLKFreq+0x58>)
 800b076:	681b      	ldr	r3, [r3, #0]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	58024400 	.word	0x58024400
 800b084:	080176a8 	.word	0x080176a8
 800b088:	24000090 	.word	0x24000090
 800b08c:	2400008c 	.word	0x2400008c

0800b090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b094:	f7ff ffcc 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	091b      	lsrs	r3, r3, #4
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	4904      	ldr	r1, [pc, #16]	; (800b0b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b0a6:	5ccb      	ldrb	r3, [r1, r3]
 800b0a8:	f003 031f 	and.w	r3, r3, #31
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	080176a8 	.word	0x080176a8

0800b0bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b0c0:	f7ff ffb6 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	0a1b      	lsrs	r3, r3, #8
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	4904      	ldr	r1, [pc, #16]	; (800b0e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b0d2:	5ccb      	ldrb	r3, [r1, r3]
 800b0d4:	f003 031f 	and.w	r3, r3, #31
 800b0d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	58024400 	.word	0x58024400
 800b0e4:	080176a8 	.word	0x080176a8

0800b0e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	223f      	movs	r2, #63	; 0x3f
 800b0f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	f003 0207 	and.w	r2, r3, #7
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b104:	4b17      	ldr	r3, [pc, #92]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b110:	4b14      	ldr	r3, [pc, #80]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	f003 020f 	and.w	r2, r3, #15
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b128:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b134:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b140:	4b08      	ldr	r3, [pc, #32]	; (800b164 <HAL_RCC_GetClockConfig+0x7c>)
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <HAL_RCC_GetClockConfig+0x80>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 020f 	and.w	r2, r3, #15
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	601a      	str	r2, [r3, #0]
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	58024400 	.word	0x58024400
 800b168:	52002000 	.word	0x52002000

0800b16c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b16c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b170:	b0ca      	sub	sp, #296	; 0x128
 800b172:	af00      	add	r7, sp, #0
 800b174:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b17e:	2300      	movs	r3, #0
 800b180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b190:	2500      	movs	r5, #0
 800b192:	ea54 0305 	orrs.w	r3, r4, r5
 800b196:	d049      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b19e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1a2:	d02f      	beq.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b1a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1a8:	d828      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ae:	d01a      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b1b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1b4:	d822      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1be:	d007      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b1c0:	e01c      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c2:	4bb8      	ldr	r3, [pc, #736]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	4ab7      	ldr	r2, [pc, #732]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b1ce:	e01a      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	3308      	adds	r3, #8
 800b1d6:	2102      	movs	r1, #2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f002 fb61 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b1e4:	e00f      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	3328      	adds	r3, #40	; 0x28
 800b1ec:	2102      	movs	r1, #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f002 fc08 	bl	800da04 <RCCEx_PLL3_Config>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b1fa:	e004      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b202:	e000      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b204:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10a      	bne.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b20e:	4ba5      	ldr	r3, [pc, #660]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b212:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b21c:	4aa1      	ldr	r2, [pc, #644]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b21e:	430b      	orrs	r3, r1
 800b220:	6513      	str	r3, [r2, #80]	; 0x50
 800b222:	e003      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b238:	f04f 0900 	mov.w	r9, #0
 800b23c:	ea58 0309 	orrs.w	r3, r8, r9
 800b240:	d047      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d82a      	bhi.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b24c:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b269 	.word	0x0800b269
 800b258:	0800b277 	.word	0x0800b277
 800b25c:	0800b28d 	.word	0x0800b28d
 800b260:	0800b2ab 	.word	0x0800b2ab
 800b264:	0800b2ab 	.word	0x0800b2ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b268:	4b8e      	ldr	r3, [pc, #568]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a8d      	ldr	r2, [pc, #564]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b274:	e01a      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	3308      	adds	r3, #8
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f002 fb0e 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b28a:	e00f      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b290:	3328      	adds	r3, #40	; 0x28
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f002 fbb5 	bl	800da04 <RCCEx_PLL3_Config>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2a0:	e004      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a8:	e000      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b2b4:	4b7b      	ldr	r3, [pc, #492]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b8:	f023 0107 	bic.w	r1, r3, #7
 800b2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c2:	4a78      	ldr	r2, [pc, #480]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6513      	str	r3, [r2, #80]	; 0x50
 800b2c8:	e003      	b.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b2de:	f04f 0b00 	mov.w	fp, #0
 800b2e2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b2e6:	d04c      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f2:	d030      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b2f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f8:	d829      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b2fa:	2bc0      	cmp	r3, #192	; 0xc0
 800b2fc:	d02d      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2fe:	2bc0      	cmp	r3, #192	; 0xc0
 800b300:	d825      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b302:	2b80      	cmp	r3, #128	; 0x80
 800b304:	d018      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b306:	2b80      	cmp	r3, #128	; 0x80
 800b308:	d821      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d007      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b312:	e01c      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b314:	4b63      	ldr	r3, [pc, #396]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	4a62      	ldr	r2, [pc, #392]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b320:	e01c      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b326:	3308      	adds	r3, #8
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 fab8 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b336:	e011      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33c:	3328      	adds	r3, #40	; 0x28
 800b33e:	2100      	movs	r1, #0
 800b340:	4618      	mov	r0, r3
 800b342:	f002 fb5f 	bl	800da04 <RCCEx_PLL3_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b34c:	e006      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b354:	e002      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b356:	bf00      	nop
 800b358:	e000      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b364:	4b4f      	ldr	r3, [pc, #316]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b368:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b372:	4a4c      	ldr	r2, [pc, #304]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b374:	430b      	orrs	r3, r1
 800b376:	6513      	str	r3, [r2, #80]	; 0x50
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b38e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b392:	2300      	movs	r3, #0
 800b394:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b398:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b39c:	460b      	mov	r3, r1
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	d053      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3ae:	d035      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b3b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3b4:	d82e      	bhi.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b3b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3ba:	d031      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b3bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3c0:	d828      	bhi.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b3c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3c6:	d01a      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b3c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3cc:	d822      	bhi.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b3d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3d6:	d007      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b3d8:	e01c      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3da:	4b32      	ldr	r3, [pc, #200]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	4a31      	ldr	r2, [pc, #196]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3e6:	e01c      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f002 fa55 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b3fc:	e011      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b402:	3328      	adds	r3, #40	; 0x28
 800b404:	2100      	movs	r1, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f002 fafc 	bl	800da04 <RCCEx_PLL3_Config>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b412:	e006      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b41a:	e002      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b41c:	bf00      	nop
 800b41e:	e000      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10b      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b42a:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b43a:	4a1a      	ldr	r2, [pc, #104]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b43c:	430b      	orrs	r3, r1
 800b43e:	6593      	str	r3, [r2, #88]	; 0x58
 800b440:	e003      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b456:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b460:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d056      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b476:	d038      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b47c:	d831      	bhi.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b47e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b482:	d034      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b488:	d82b      	bhi.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b48a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b48e:	d01d      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b494:	d825      	bhi.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d006      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b49a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b49e:	d00a      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b4a0:	e01f      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b4a2:	bf00      	nop
 800b4a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a8:	4ba2      	ldr	r3, [pc, #648]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	4aa1      	ldr	r2, [pc, #644]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4b4:	e01c      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f002 f9ee 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4ca:	e011      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d0:	3328      	adds	r3, #40	; 0x28
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f002 fa95 	bl	800da04 <RCCEx_PLL3_Config>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4e0:	e006      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4e8:	e002      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b4ea:	bf00      	nop
 800b4ec:	e000      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b4ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10b      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4f8:	4b8e      	ldr	r3, [pc, #568]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b504:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b508:	4a8a      	ldr	r2, [pc, #552]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b50a:	430b      	orrs	r3, r1
 800b50c:	6593      	str	r3, [r2, #88]	; 0x58
 800b50e:	e003      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b52e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b532:	460b      	mov	r3, r1
 800b534:	4313      	orrs	r3, r2
 800b536:	d03a      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53e:	2b30      	cmp	r3, #48	; 0x30
 800b540:	d01f      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b542:	2b30      	cmp	r3, #48	; 0x30
 800b544:	d819      	bhi.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b546:	2b20      	cmp	r3, #32
 800b548:	d00c      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b54a:	2b20      	cmp	r3, #32
 800b54c:	d815      	bhi.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d019      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b552:	2b10      	cmp	r3, #16
 800b554:	d111      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b556:	4b77      	ldr	r3, [pc, #476]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55a:	4a76      	ldr	r2, [pc, #472]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b55c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b562:	e011      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b568:	3308      	adds	r3, #8
 800b56a:	2102      	movs	r1, #2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f002 f997 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b578:	e006      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b582:	bf00      	nop
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b590:	4b68      	ldr	r3, [pc, #416]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b594:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b59e:	4a65      	ldr	r2, [pc, #404]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5a4:	e003      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b5ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	d051      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d8:	d035      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b5da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5de:	d82e      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b5e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5e4:	d031      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b5e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5ea:	d828      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5f0:	d01a      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5f6:	d822      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b5fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b600:	d007      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b602:	e01c      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b604:	4b4b      	ldr	r3, [pc, #300]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	4a4a      	ldr	r2, [pc, #296]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b60a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b610:	e01c      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b616:	3308      	adds	r3, #8
 800b618:	2100      	movs	r1, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f002 f940 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b626:	e011      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62c:	3328      	adds	r3, #40	; 0x28
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f002 f9e7 	bl	800da04 <RCCEx_PLL3_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b63c:	e006      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b644:	e002      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b654:	4b37      	ldr	r3, [pc, #220]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b658:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b662:	4a34      	ldr	r2, [pc, #208]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b664:	430b      	orrs	r3, r1
 800b666:	6513      	str	r3, [r2, #80]	; 0x50
 800b668:	e003      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b67e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b682:	2300      	movs	r3, #0
 800b684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b68c:	460b      	mov	r3, r1
 800b68e:	4313      	orrs	r3, r2
 800b690:	d056      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b69c:	d033      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b69e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6a2:	d82c      	bhi.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b6a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6a8:	d02f      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b6aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6ae:	d826      	bhi.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b6b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6b4:	d02b      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b6b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6ba:	d820      	bhi.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c0:	d012      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b6c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c6:	d81a      	bhi.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d022      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6d0:	d115      	bne.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	2101      	movs	r1, #1
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f002 f8e0 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b6e6:	e015      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ec:	3328      	adds	r3, #40	; 0x28
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f002 f987 	bl	800da04 <RCCEx_PLL3_Config>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b6fc:	e00a      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b704:	e006      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b706:	bf00      	nop
 800b708:	e004      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b70a:	bf00      	nop
 800b70c:	e002      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b70e:	bf00      	nop
 800b710:	e000      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b712:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10d      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b720:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b72a:	4a02      	ldr	r2, [pc, #8]	; (800b734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b72c:	430b      	orrs	r3, r1
 800b72e:	6513      	str	r3, [r2, #80]	; 0x50
 800b730:	e006      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b732:	bf00      	nop
 800b734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b74c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b750:	2300      	movs	r3, #0
 800b752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b756:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4313      	orrs	r3, r2
 800b75e:	d055      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b76c:	d033      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b76e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b772:	d82c      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b778:	d02f      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b77e:	d826      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b784:	d02b      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b78a:	d820      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b790:	d012      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b796:	d81a      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d022      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b79c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7a0:	d115      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f002 f878 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b7b6:	e015      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7bc:	3328      	adds	r3, #40	; 0x28
 800b7be:	2101      	movs	r1, #1
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f002 f91f 	bl	800da04 <RCCEx_PLL3_Config>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b7cc:	e00a      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7d4:	e006      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b7d6:	bf00      	nop
 800b7d8:	e004      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b7da:	bf00      	nop
 800b7dc:	e002      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b7ec:	4ba3      	ldr	r3, [pc, #652]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7fc:	4a9f      	ldr	r2, [pc, #636]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7fe:	430b      	orrs	r3, r1
 800b800:	6593      	str	r3, [r2, #88]	; 0x58
 800b802:	e003      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b826:	460b      	mov	r3, r1
 800b828:	4313      	orrs	r3, r2
 800b82a:	d037      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b836:	d00e      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d816      	bhi.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d018      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b846:	d111      	bne.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b848:	4b8c      	ldr	r3, [pc, #560]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a8b      	ldr	r2, [pc, #556]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b84e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b854:	e00f      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85a:	3308      	adds	r3, #8
 800b85c:	2101      	movs	r1, #1
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 f81e 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b864:	4603      	mov	r3, r0
 800b866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b86a:	e004      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b872:	e000      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b874:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b87e:	4b7f      	ldr	r3, [pc, #508]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b882:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b88c:	4a7b      	ldr	r2, [pc, #492]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b88e:	430b      	orrs	r3, r1
 800b890:	6513      	str	r3, [r2, #80]	; 0x50
 800b892:	e003      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b8a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b8b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	d039      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d81c      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b8c6:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8cc:	0800b909 	.word	0x0800b909
 800b8d0:	0800b8dd 	.word	0x0800b8dd
 800b8d4:	0800b8eb 	.word	0x0800b8eb
 800b8d8:	0800b909 	.word	0x0800b909
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8dc:	4b67      	ldr	r3, [pc, #412]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	4a66      	ldr	r2, [pc, #408]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b8e8:	e00f      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 ffd4 	bl	800d8a0 <RCCEx_PLL2_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b8fe:	e004      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b906:	e000      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b90a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10a      	bne.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b912:	4b5a      	ldr	r3, [pc, #360]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	f023 0103 	bic.w	r1, r3, #3
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b920:	4a56      	ldr	r2, [pc, #344]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b922:	430b      	orrs	r3, r1
 800b924:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b926:	e003      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b93c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b940:	2300      	movs	r3, #0
 800b942:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b946:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b94a:	460b      	mov	r3, r1
 800b94c:	4313      	orrs	r3, r2
 800b94e:	f000 809f 	beq.w	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b952:	4b4b      	ldr	r3, [pc, #300]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a4a      	ldr	r2, [pc, #296]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b95c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b95e:	f7f8 fc45 	bl	80041ec <HAL_GetTick>
 800b962:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b966:	e00b      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b968:	f7f8 fc40 	bl	80041ec <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	2b64      	cmp	r3, #100	; 0x64
 800b976:	d903      	bls.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b978:	2303      	movs	r3, #3
 800b97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b97e:	e005      	b.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b980:	4b3f      	ldr	r3, [pc, #252]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d0ed      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b98c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b990:	2b00      	cmp	r3, #0
 800b992:	d179      	bne.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b994:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9a0:	4053      	eors	r3, r2
 800b9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d015      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b9aa:	4b34      	ldr	r3, [pc, #208]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9b6:	4b31      	ldr	r3, [pc, #196]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ba:	4a30      	ldr	r2, [pc, #192]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9c2:	4b2e      	ldr	r3, [pc, #184]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	4a2d      	ldr	r2, [pc, #180]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b9ce:	4a2b      	ldr	r2, [pc, #172]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b9d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d118      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e4:	f7f8 fc02 	bl	80041ec <HAL_GetTick>
 800b9e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9ec:	e00d      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ee:	f7f8 fbfd 	bl	80041ec <HAL_GetTick>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b9f8:	1ad2      	subs	r2, r2, r3
 800b9fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d903      	bls.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800ba08:	e005      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba0a:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba0e:	f003 0302 	and.w	r3, r3, #2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0eb      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ba16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d129      	bne.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba2e:	d10e      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ba30:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ba38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba40:	091a      	lsrs	r2, r3, #4
 800ba42:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	4a0d      	ldr	r2, [pc, #52]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6113      	str	r3, [r2, #16]
 800ba4c:	e005      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ba4e:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba58:	6113      	str	r3, [r2, #16]
 800ba5a:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba6a:	4a04      	ldr	r2, [pc, #16]	; (800ba7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba70:	e00e      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ba7a:	e009      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ba7c:	58024400 	.word	0x58024400
 800ba80:	58024800 	.word	0x58024800
 800ba84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f002 0301 	and.w	r3, r2, #1
 800ba9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800baaa:	460b      	mov	r3, r1
 800baac:	4313      	orrs	r3, r2
 800baae:	f000 8089 	beq.w	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bab8:	2b28      	cmp	r3, #40	; 0x28
 800baba:	d86b      	bhi.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800babc:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800babe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac2:	bf00      	nop
 800bac4:	0800bb9d 	.word	0x0800bb9d
 800bac8:	0800bb95 	.word	0x0800bb95
 800bacc:	0800bb95 	.word	0x0800bb95
 800bad0:	0800bb95 	.word	0x0800bb95
 800bad4:	0800bb95 	.word	0x0800bb95
 800bad8:	0800bb95 	.word	0x0800bb95
 800badc:	0800bb95 	.word	0x0800bb95
 800bae0:	0800bb95 	.word	0x0800bb95
 800bae4:	0800bb69 	.word	0x0800bb69
 800bae8:	0800bb95 	.word	0x0800bb95
 800baec:	0800bb95 	.word	0x0800bb95
 800baf0:	0800bb95 	.word	0x0800bb95
 800baf4:	0800bb95 	.word	0x0800bb95
 800baf8:	0800bb95 	.word	0x0800bb95
 800bafc:	0800bb95 	.word	0x0800bb95
 800bb00:	0800bb95 	.word	0x0800bb95
 800bb04:	0800bb7f 	.word	0x0800bb7f
 800bb08:	0800bb95 	.word	0x0800bb95
 800bb0c:	0800bb95 	.word	0x0800bb95
 800bb10:	0800bb95 	.word	0x0800bb95
 800bb14:	0800bb95 	.word	0x0800bb95
 800bb18:	0800bb95 	.word	0x0800bb95
 800bb1c:	0800bb95 	.word	0x0800bb95
 800bb20:	0800bb95 	.word	0x0800bb95
 800bb24:	0800bb9d 	.word	0x0800bb9d
 800bb28:	0800bb95 	.word	0x0800bb95
 800bb2c:	0800bb95 	.word	0x0800bb95
 800bb30:	0800bb95 	.word	0x0800bb95
 800bb34:	0800bb95 	.word	0x0800bb95
 800bb38:	0800bb95 	.word	0x0800bb95
 800bb3c:	0800bb95 	.word	0x0800bb95
 800bb40:	0800bb95 	.word	0x0800bb95
 800bb44:	0800bb9d 	.word	0x0800bb9d
 800bb48:	0800bb95 	.word	0x0800bb95
 800bb4c:	0800bb95 	.word	0x0800bb95
 800bb50:	0800bb95 	.word	0x0800bb95
 800bb54:	0800bb95 	.word	0x0800bb95
 800bb58:	0800bb95 	.word	0x0800bb95
 800bb5c:	0800bb95 	.word	0x0800bb95
 800bb60:	0800bb95 	.word	0x0800bb95
 800bb64:	0800bb9d 	.word	0x0800bb9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6c:	3308      	adds	r3, #8
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 fe95 	bl	800d8a0 <RCCEx_PLL2_Config>
 800bb76:	4603      	mov	r3, r0
 800bb78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb7c:	e00f      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb82:	3328      	adds	r3, #40	; 0x28
 800bb84:	2101      	movs	r1, #1
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 ff3c 	bl	800da04 <RCCEx_PLL3_Config>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb92:	e004      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb9a:	e000      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bb9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bba6:	4bbf      	ldr	r3, [pc, #764]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbaa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bbae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbb4:	4abb      	ldr	r2, [pc, #748]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	6553      	str	r3, [r2, #84]	; 0x54
 800bbba:	e003      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f002 0302 	and.w	r3, r2, #2
 800bbd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bbda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	d041      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbea:	2b05      	cmp	r3, #5
 800bbec:	d824      	bhi.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bbee:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf4:	0800bc41 	.word	0x0800bc41
 800bbf8:	0800bc0d 	.word	0x0800bc0d
 800bbfc:	0800bc23 	.word	0x0800bc23
 800bc00:	0800bc41 	.word	0x0800bc41
 800bc04:	0800bc41 	.word	0x0800bc41
 800bc08:	0800bc41 	.word	0x0800bc41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc10:	3308      	adds	r3, #8
 800bc12:	2101      	movs	r1, #1
 800bc14:	4618      	mov	r0, r3
 800bc16:	f001 fe43 	bl	800d8a0 <RCCEx_PLL2_Config>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc20:	e00f      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc26:	3328      	adds	r3, #40	; 0x28
 800bc28:	2101      	movs	r1, #1
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f001 feea 	bl	800da04 <RCCEx_PLL3_Config>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc36:	e004      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc3e:	e000      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bc40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bc4a:	4b96      	ldr	r3, [pc, #600]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4e:	f023 0107 	bic.w	r1, r3, #7
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc58:	4a92      	ldr	r2, [pc, #584]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc5a:	430b      	orrs	r3, r1
 800bc5c:	6553      	str	r3, [r2, #84]	; 0x54
 800bc5e:	e003      	b.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f002 0304 	and.w	r3, r2, #4
 800bc74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4313      	orrs	r3, r2
 800bc86:	d044      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc90:	2b05      	cmp	r3, #5
 800bc92:	d825      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bc94:	a201      	add	r2, pc, #4	; (adr r2, 800bc9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9a:	bf00      	nop
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bcb5 	.word	0x0800bcb5
 800bca4:	0800bccb 	.word	0x0800bccb
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bce9 	.word	0x0800bce9
 800bcb0:	0800bce9 	.word	0x0800bce9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2101      	movs	r1, #1
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fdef 	bl	800d8a0 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e00f      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	3328      	adds	r3, #40	; 0x28
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fe96 	bl	800da04 <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bcde:	e004      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bce6:	e000      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10b      	bne.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bcf2:	4b6c      	ldr	r3, [pc, #432]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf6:	f023 0107 	bic.w	r1, r3, #7
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd02:	4a68      	ldr	r2, [pc, #416]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd04:	430b      	orrs	r3, r1
 800bd06:	6593      	str	r3, [r2, #88]	; 0x58
 800bd08:	e003      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f002 0320 	and.w	r3, r2, #32
 800bd1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd22:	2300      	movs	r3, #0
 800bd24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	d055      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd3e:	d033      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bd40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd44:	d82c      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4a:	d02f      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bd4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd50:	d826      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd56:	d02b      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bd58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd5c:	d820      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd62:	d012      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bd64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd68:	d81a      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d022      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bd6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd72:	d115      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd78:	3308      	adds	r3, #8
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 fd8f 	bl	800d8a0 <RCCEx_PLL2_Config>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd88:	e015      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8e:	3328      	adds	r3, #40	; 0x28
 800bd90:	2102      	movs	r1, #2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 fe36 	bl	800da04 <RCCEx_PLL3_Config>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd9e:	e00a      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bda6:	e006      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bda8:	bf00      	nop
 800bdaa:	e004      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bdac:	bf00      	nop
 800bdae:	e002      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bdb0:	bf00      	nop
 800bdb2:	e000      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bdb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bdbe:	4b39      	ldr	r3, [pc, #228]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdce:	4a35      	ldr	r2, [pc, #212]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdd0:	430b      	orrs	r3, r1
 800bdd2:	6553      	str	r3, [r2, #84]	; 0x54
 800bdd4:	e003      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bdea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bdf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	d058      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800be0a:	d033      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800be0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800be10:	d82c      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be16:	d02f      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800be18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1c:	d826      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be22:	d02b      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800be24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be28:	d820      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be2e:	d012      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800be30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be34:	d81a      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be36:	2b00      	cmp	r3, #0
 800be38:	d022      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800be3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be3e:	d115      	bne.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be44:	3308      	adds	r3, #8
 800be46:	2100      	movs	r1, #0
 800be48:	4618      	mov	r0, r3
 800be4a:	f001 fd29 	bl	800d8a0 <RCCEx_PLL2_Config>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800be54:	e015      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	3328      	adds	r3, #40	; 0x28
 800be5c:	2102      	movs	r1, #2
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 fdd0 	bl	800da04 <RCCEx_PLL3_Config>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800be6a:	e00a      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be72:	e006      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be74:	bf00      	nop
 800be76:	e004      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be78:	bf00      	nop
 800be7a:	e002      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be7c:	bf00      	nop
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10e      	bne.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be8a:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800be92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be9a:	4a02      	ldr	r2, [pc, #8]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6593      	str	r3, [r2, #88]	; 0x58
 800bea0:	e006      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bea2:	bf00      	nop
 800bea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bec0:	2300      	movs	r3, #0
 800bec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bec6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800beca:	460b      	mov	r3, r1
 800becc:	4313      	orrs	r3, r2
 800bece:	d055      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bed8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bedc:	d033      	beq.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bee2:	d82c      	bhi.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bee8:	d02f      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800beea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beee:	d826      	bhi.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bef0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bef4:	d02b      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800befa:	d820      	bhi.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800befc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf00:	d012      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bf02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf06:	d81a      	bhi.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d022      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bf0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf10:	d115      	bne.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf16:	3308      	adds	r3, #8
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f001 fcc0 	bl	800d8a0 <RCCEx_PLL2_Config>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf26:	e015      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2c:	3328      	adds	r3, #40	; 0x28
 800bf2e:	2102      	movs	r1, #2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f001 fd67 	bl	800da04 <RCCEx_PLL3_Config>
 800bf36:	4603      	mov	r3, r0
 800bf38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf3c:	e00a      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf44:	e006      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bf46:	bf00      	nop
 800bf48:	e004      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bf4a:	bf00      	nop
 800bf4c:	e002      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bf4e:	bf00      	nop
 800bf50:	e000      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bf52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10b      	bne.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bf5c:	4ba1      	ldr	r3, [pc, #644]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf60:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bf64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6c:	4a9d      	ldr	r2, [pc, #628]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf6e:	430b      	orrs	r3, r1
 800bf70:	6593      	str	r3, [r2, #88]	; 0x58
 800bf72:	e003      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f002 0308 	and.w	r3, r2, #8
 800bf88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bf96:	460b      	mov	r3, r1
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	d01e      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bf9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa8:	d10c      	bne.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfae:	3328      	adds	r3, #40	; 0x28
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 fd26 	bl	800da04 <RCCEx_PLL3_Config>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bfc4:	4b87      	ldr	r3, [pc, #540]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfd4:	4a83      	ldr	r2, [pc, #524]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd6:	430b      	orrs	r3, r1
 800bfd8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f002 0310 	and.w	r3, r2, #16
 800bfe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfea:	2300      	movs	r3, #0
 800bfec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bff0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bff4:	460b      	mov	r3, r1
 800bff6:	4313      	orrs	r3, r2
 800bff8:	d01e      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c006:	d10c      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00c:	3328      	adds	r3, #40	; 0x28
 800c00e:	2102      	movs	r1, #2
 800c010:	4618      	mov	r0, r3
 800c012:	f001 fcf7 	bl	800da04 <RCCEx_PLL3_Config>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c022:	4b70      	ldr	r3, [pc, #448]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c032:	4a6c      	ldr	r2, [pc, #432]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c034:	430b      	orrs	r3, r1
 800c036:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c048:	2300      	movs	r3, #0
 800c04a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c04e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c052:	460b      	mov	r3, r1
 800c054:	4313      	orrs	r3, r2
 800c056:	d03e      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c064:	d022      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c06a:	d81b      	bhi.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c074:	d00b      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c076:	e015      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07c:	3308      	adds	r3, #8
 800c07e:	2100      	movs	r1, #0
 800c080:	4618      	mov	r0, r3
 800c082:	f001 fc0d 	bl	800d8a0 <RCCEx_PLL2_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c08c:	e00f      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c092:	3328      	adds	r3, #40	; 0x28
 800c094:	2102      	movs	r1, #2
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fcb4 	bl	800da04 <RCCEx_PLL3_Config>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c0a2:	e004      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0aa:	e000      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10b      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c0b6:	4b4b      	ldr	r3, [pc, #300]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c0c6:	4a47      	ldr	r2, [pc, #284]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c0cc:	e003      	b.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c0e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	d03b      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c0fe:	d01f      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c104:	d818      	bhi.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c10a:	d003      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c10c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c110:	d007      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c112:	e011      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c114:	4b33      	ldr	r3, [pc, #204]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c118:	4a32      	ldr	r2, [pc, #200]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c11a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c11e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c120:	e00f      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c126:	3328      	adds	r3, #40	; 0x28
 800c128:	2101      	movs	r1, #1
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 fc6a 	bl	800da04 <RCCEx_PLL3_Config>
 800c130:	4603      	mov	r3, r0
 800c132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c136:	e004      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c13e:	e000      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10b      	bne.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c14a:	4b26      	ldr	r3, [pc, #152]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c14e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c15a:	4a22      	ldr	r2, [pc, #136]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c15c:	430b      	orrs	r3, r1
 800c15e:	6553      	str	r3, [r2, #84]	; 0x54
 800c160:	e003      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c176:	673b      	str	r3, [r7, #112]	; 0x70
 800c178:	2300      	movs	r3, #0
 800c17a:	677b      	str	r3, [r7, #116]	; 0x74
 800c17c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c180:	460b      	mov	r3, r1
 800c182:	4313      	orrs	r3, r2
 800c184:	d034      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c194:	d007      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c196:	e011      	b.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	4a11      	ldr	r2, [pc, #68]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c19e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c1a4:	e00e      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	2102      	movs	r1, #2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f001 fb76 	bl	800d8a0 <RCCEx_PLL2_Config>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c1ba:	e003      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10d      	bne.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1da:	4a02      	ldr	r2, [pc, #8]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c1e0:	e006      	b.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c1e2:	bf00      	nop
 800c1e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c1fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1fe:	2300      	movs	r3, #0
 800c200:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c202:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c206:	460b      	mov	r3, r1
 800c208:	4313      	orrs	r3, r2
 800c20a:	d00c      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c210:	3328      	adds	r3, #40	; 0x28
 800c212:	2102      	movs	r1, #2
 800c214:	4618      	mov	r0, r3
 800c216:	f001 fbf5 	bl	800da04 <RCCEx_PLL3_Config>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c232:	663b      	str	r3, [r7, #96]	; 0x60
 800c234:	2300      	movs	r3, #0
 800c236:	667b      	str	r3, [r7, #100]	; 0x64
 800c238:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c23c:	460b      	mov	r3, r1
 800c23e:	4313      	orrs	r3, r2
 800c240:	d038      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c24e:	d018      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c254:	d811      	bhi.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c25a:	d014      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c25c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c260:	d80b      	bhi.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c262:	2b00      	cmp	r3, #0
 800c264:	d011      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c26a:	d106      	bne.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c26c:	4bc3      	ldr	r3, [pc, #780]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4ac2      	ldr	r2, [pc, #776]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c278:	e008      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c280:	e004      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c282:	bf00      	nop
 800c284:	e002      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c286:	bf00      	nop
 800c288:	e000      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c28c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10b      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c294:	4bb9      	ldr	r3, [pc, #740]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c298:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2a4:	4ab5      	ldr	r2, [pc, #724]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	6553      	str	r3, [r2, #84]	; 0x54
 800c2aa:	e003      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c2c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	d009      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c2d0:	4baa      	ldr	r3, [pc, #680]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2de:	4aa7      	ldr	r2, [pc, #668]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c2f0:	653b      	str	r3, [r7, #80]	; 0x50
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	657b      	str	r3, [r7, #84]	; 0x54
 800c2f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	d00a      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c300:	4b9e      	ldr	r3, [pc, #632]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c310:	4a9a      	ldr	r2, [pc, #616]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c312:	430b      	orrs	r3, r1
 800c314:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c322:	64bb      	str	r3, [r7, #72]	; 0x48
 800c324:	2300      	movs	r3, #0
 800c326:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c328:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c32c:	460b      	mov	r3, r1
 800c32e:	4313      	orrs	r3, r2
 800c330:	d009      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c332:	4b92      	ldr	r3, [pc, #584]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c336:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	4a8e      	ldr	r2, [pc, #568]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c342:	430b      	orrs	r3, r1
 800c344:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c352:	643b      	str	r3, [r7, #64]	; 0x40
 800c354:	2300      	movs	r3, #0
 800c356:	647b      	str	r3, [r7, #68]	; 0x44
 800c358:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c35c:	460b      	mov	r3, r1
 800c35e:	4313      	orrs	r3, r2
 800c360:	d00e      	beq.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c362:	4b86      	ldr	r3, [pc, #536]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	4a85      	ldr	r2, [pc, #532]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c36c:	6113      	str	r3, [r2, #16]
 800c36e:	4b83      	ldr	r3, [pc, #524]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c370:	6919      	ldr	r1, [r3, #16]
 800c372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c376:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c37a:	4a80      	ldr	r2, [pc, #512]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c37c:	430b      	orrs	r3, r1
 800c37e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c38c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c38e:	2300      	movs	r3, #0
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c392:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c396:	460b      	mov	r3, r1
 800c398:	4313      	orrs	r3, r2
 800c39a:	d009      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c39c:	4b77      	ldr	r3, [pc, #476]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c3a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3aa:	4a74      	ldr	r2, [pc, #464]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ac:	430b      	orrs	r3, r1
 800c3ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c3bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c3be:	2300      	movs	r3, #0
 800c3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	d00a      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c3cc:	4b6b      	ldr	r3, [pc, #428]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3dc:	4a67      	ldr	r2, [pc, #412]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3de:	430b      	orrs	r3, r1
 800c3e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	62b9      	str	r1, [r7, #40]	; 0x28
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	d011      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c402:	3308      	adds	r3, #8
 800c404:	2100      	movs	r1, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fa4a 	bl	800d8a0 <RCCEx_PLL2_Config>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	2100      	movs	r1, #0
 800c42c:	6239      	str	r1, [r7, #32]
 800c42e:	f003 0302 	and.w	r3, r3, #2
 800c432:	627b      	str	r3, [r7, #36]	; 0x24
 800c434:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c438:	460b      	mov	r3, r1
 800c43a:	4313      	orrs	r3, r2
 800c43c:	d011      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c442:	3308      	adds	r3, #8
 800c444:	2101      	movs	r1, #1
 800c446:	4618      	mov	r0, r3
 800c448:	f001 fa2a 	bl	800d8a0 <RCCEx_PLL2_Config>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	2100      	movs	r1, #0
 800c46c:	61b9      	str	r1, [r7, #24]
 800c46e:	f003 0304 	and.w	r3, r3, #4
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c478:	460b      	mov	r3, r1
 800c47a:	4313      	orrs	r3, r2
 800c47c:	d011      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c482:	3308      	adds	r3, #8
 800c484:	2102      	movs	r1, #2
 800c486:	4618      	mov	r0, r3
 800c488:	f001 fa0a 	bl	800d8a0 <RCCEx_PLL2_Config>
 800c48c:	4603      	mov	r3, r0
 800c48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	6139      	str	r1, [r7, #16]
 800c4ae:	f003 0308 	and.w	r3, r3, #8
 800c4b2:	617b      	str	r3, [r7, #20]
 800c4b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	d011      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c2:	3328      	adds	r3, #40	; 0x28
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fa9c 	bl	800da04 <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	d011      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c502:	3328      	adds	r3, #40	; 0x28
 800c504:	2101      	movs	r1, #1
 800c506:	4618      	mov	r0, r3
 800c508:	f001 fa7c 	bl	800da04 <RCCEx_PLL3_Config>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c51a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c51e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	2100      	movs	r1, #0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	f003 0320 	and.w	r3, r3, #32
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c538:	460b      	mov	r3, r1
 800c53a:	4313      	orrs	r3, r2
 800c53c:	d011      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c542:	3328      	adds	r3, #40	; 0x28
 800c544:	2102      	movs	r1, #2
 800c546:	4618      	mov	r0, r3
 800c548:	f001 fa5c 	bl	800da04 <RCCEx_PLL3_Config>
 800c54c:	4603      	mov	r3, r0
 800c54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c55a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c55e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c562:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e000      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
}
 800c570:	4618      	mov	r0, r3
 800c572:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c576:	46bd      	mov	sp, r7
 800c578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c57c:	58024400 	.word	0x58024400

0800c580 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b090      	sub	sp, #64	; 0x40
 800c584:	af00      	add	r7, sp, #0
 800c586:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c58e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c592:	430b      	orrs	r3, r1
 800c594:	f040 8094 	bne.w	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c598:	4b9e      	ldr	r3, [pc, #632]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	f200 8087 	bhi.w	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c5c5 	.word	0x0800c5c5
 800c5b4:	0800c5ed 	.word	0x0800c5ed
 800c5b8:	0800c615 	.word	0x0800c615
 800c5bc:	0800c6b1 	.word	0x0800c6b1
 800c5c0:	0800c63d 	.word	0x0800c63d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5c4:	4b93      	ldr	r3, [pc, #588]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d0:	d108      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f001 f810 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e0:	f000 bd45 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e8:	f000 bd41 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5ec:	4b89      	ldr	r3, [pc, #548]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5f8:	d108      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5fa:	f107 0318 	add.w	r3, r7, #24
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fd54 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c608:	f000 bd31 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	f000 bd2d 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c614:	4b7f      	ldr	r3, [pc, #508]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c620:	d108      	bne.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c622:	f107 030c 	add.w	r3, r7, #12
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fe94 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c630:	f000 bd1d 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c638:	f000 bd19 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c63c:	4b75      	ldr	r3, [pc, #468]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c644:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c646:	4b73      	ldr	r3, [pc, #460]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d10c      	bne.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c654:	2b00      	cmp	r3, #0
 800c656:	d109      	bne.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c658:	4b6e      	ldr	r3, [pc, #440]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	08db      	lsrs	r3, r3, #3
 800c65e:	f003 0303 	and.w	r3, r3, #3
 800c662:	4a6d      	ldr	r2, [pc, #436]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c664:	fa22 f303 	lsr.w	r3, r2, r3
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c66a:	e01f      	b.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c66c:	4b69      	ldr	r3, [pc, #420]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c678:	d106      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c680:	d102      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c682:	4b66      	ldr	r3, [pc, #408]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c686:	e011      	b.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c688:	4b62      	ldr	r3, [pc, #392]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c694:	d106      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c69c:	d102      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c69e:	4b60      	ldr	r3, [pc, #384]	; (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6a2:	e003      	b.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6a8:	f000 bce1 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6ac:	f000 bcdf 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6b0:	4b5c      	ldr	r3, [pc, #368]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	f000 bcdb 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	f000 bcd7 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6c4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	f040 80ad 	bne.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c6ce:	4b51      	ldr	r3, [pc, #324]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c6d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6de:	d056      	beq.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e6:	f200 8090 	bhi.w	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	2bc0      	cmp	r3, #192	; 0xc0
 800c6ee:	f000 8088 	beq.w	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c6f6:	f200 8088 	bhi.w	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	2b80      	cmp	r3, #128	; 0x80
 800c6fe:	d032      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	2b80      	cmp	r3, #128	; 0x80
 800c704:	f200 8081 	bhi.w	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	2b40      	cmp	r3, #64	; 0x40
 800c712:	d014      	beq.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c714:	e079      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c716:	4b3f      	ldr	r3, [pc, #252]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c71e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c722:	d108      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ff67 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c732:	f000 bc9c 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73a:	f000 bc98 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c73e:	4b35      	ldr	r3, [pc, #212]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c74a:	d108      	bne.n	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c74c:	f107 0318 	add.w	r3, r7, #24
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fcab 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c75a:	f000 bc88 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c762:	f000 bc84 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c766:	4b2b      	ldr	r3, [pc, #172]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c772:	d108      	bne.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c774:	f107 030c 	add.w	r3, r7, #12
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 fdeb 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c782:	f000 bc74 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78a:	f000 bc70 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c78e:	4b21      	ldr	r3, [pc, #132]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c796:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c798:	4b1e      	ldr	r3, [pc, #120]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	d10c      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7aa:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	08db      	lsrs	r3, r3, #3
 800c7b0:	f003 0303 	and.w	r3, r3, #3
 800c7b4:	4a18      	ldr	r2, [pc, #96]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7bc:	e01f      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7be:	4b15      	ldr	r3, [pc, #84]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ca:	d106      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7d2:	d102      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7d4:	4b11      	ldr	r3, [pc, #68]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d8:	e011      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7da:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e6:	d106      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ee:	d102      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f4:	e003      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7fa:	f000 bc38 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7fe:	f000 bc36 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c802:	4b08      	ldr	r3, [pc, #32]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c806:	f000 bc32 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80e:	f000 bc2e 	b.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c812:	bf00      	nop
 800c814:	58024400 	.word	0x58024400
 800c818:	03d09000 	.word	0x03d09000
 800c81c:	003d0900 	.word	0x003d0900
 800c820:	017d7840 	.word	0x017d7840
 800c824:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c82c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c830:	430b      	orrs	r3, r1
 800c832:	f040 809c 	bne.w	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c836:	4b9e      	ldr	r3, [pc, #632]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c83e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c846:	d054      	beq.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c84e:	f200 808b 	bhi.w	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c858:	f000 8083 	beq.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c862:	f200 8081 	bhi.w	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c86c:	d02f      	beq.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c874:	d878      	bhi.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d004      	beq.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c882:	d012      	beq.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c884:	e070      	b.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c886:	4b8a      	ldr	r3, [pc, #552]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c88e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c892:	d107      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 feaf 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a2:	e3e4      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a8:	e3e1      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8aa:	4b81      	ldr	r3, [pc, #516]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8b6:	d107      	bne.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8b8:	f107 0318 	add.w	r3, r7, #24
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 fbf5 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c6:	e3d2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8cc:	e3cf      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8ce:	4b78      	ldr	r3, [pc, #480]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8da:	d107      	bne.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8dc:	f107 030c 	add.w	r3, r7, #12
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f000 fd37 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ea:	e3c0      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f0:	e3bd      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8f2:	4b6f      	ldr	r3, [pc, #444]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8fc:	4b6c      	ldr	r3, [pc, #432]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b04      	cmp	r3, #4
 800c906:	d10c      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d109      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c90e:	4b68      	ldr	r3, [pc, #416]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	08db      	lsrs	r3, r3, #3
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	4a66      	ldr	r2, [pc, #408]	; (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c91a:	fa22 f303 	lsr.w	r3, r2, r3
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c920:	e01e      	b.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c922:	4b63      	ldr	r3, [pc, #396]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c92e:	d106      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c936:	d102      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c938:	4b5f      	ldr	r3, [pc, #380]	; (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c93c:	e010      	b.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c93e:	4b5c      	ldr	r3, [pc, #368]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c94a:	d106      	bne.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c952:	d102      	bne.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c954:	4b59      	ldr	r3, [pc, #356]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c958:	e002      	b.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c95e:	e386      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c960:	e385      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c962:	4b57      	ldr	r3, [pc, #348]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c966:	e382      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96c:	e37f      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c96e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c972:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c976:	430b      	orrs	r3, r1
 800c978:	f040 80a7 	bne.w	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c97c:	4b4c      	ldr	r3, [pc, #304]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c980:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c984:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c98c:	d055      	beq.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c994:	f200 8096 	bhi.w	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c99e:	f000 8084 	beq.w	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c9a8:	f200 808c 	bhi.w	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9b2:	d030      	beq.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9ba:	f200 8083 	bhi.w	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d004      	beq.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c9ca:	d012      	beq.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c9cc:	e07a      	b.n	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9ce:	4b38      	ldr	r3, [pc, #224]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9da:	d107      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fe0b 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ea:	e340      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f0:	e33d      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9f2:	4b2f      	ldr	r3, [pc, #188]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9fe:	d107      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca00:	f107 0318 	add.w	r3, r7, #24
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fb51 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0e:	e32e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e32b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca16:	4b26      	ldr	r3, [pc, #152]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca22:	d107      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca24:	f107 030c 	add.w	r3, r7, #12
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 fc93 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca32:	e31c      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e319      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca3a:	4b1d      	ldr	r3, [pc, #116]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca44:	4b1a      	ldr	r3, [pc, #104]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d10c      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d109      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca56:	4b16      	ldr	r3, [pc, #88]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	08db      	lsrs	r3, r3, #3
 800ca5c:	f003 0303 	and.w	r3, r3, #3
 800ca60:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ca62:	fa22 f303 	lsr.w	r3, r2, r3
 800ca66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca68:	e01e      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca6a:	4b11      	ldr	r3, [pc, #68]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca76:	d106      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca7e:	d102      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca80:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca84:	e010      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca86:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca92:	d106      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9a:	d102      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca9c:	4b07      	ldr	r3, [pc, #28]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caa0:	e002      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caa6:	e2e2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caa8:	e2e1      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800caaa:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caae:	e2de      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cab0:	58024400 	.word	0x58024400
 800cab4:	03d09000 	.word	0x03d09000
 800cab8:	003d0900 	.word	0x003d0900
 800cabc:	017d7840 	.word	0x017d7840
 800cac0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac8:	e2d1      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800caca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cace:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cad2:	430b      	orrs	r3, r1
 800cad4:	f040 809c 	bne.w	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cad8:	4b93      	ldr	r3, [pc, #588]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cadc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cae0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cae8:	d054      	beq.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800caf0:	f200 808b 	bhi.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cafa:	f000 8083 	beq.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb04:	f200 8081 	bhi.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb0e:	d02f      	beq.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb16:	d878      	bhi.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d004      	beq.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb24:	d012      	beq.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cb26:	e070      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb28:	4b7f      	ldr	r3, [pc, #508]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb34:	d107      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fd5e 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb44:	e293      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4a:	e290      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb4c:	4b76      	ldr	r3, [pc, #472]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb58:	d107      	bne.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb5a:	f107 0318 	add.w	r3, r7, #24
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 faa4 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb68:	e281      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6e:	e27e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb70:	4b6d      	ldr	r3, [pc, #436]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7c:	d107      	bne.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 fbe6 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb8c:	e26f      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb92:	e26c      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb94:	4b64      	ldr	r3, [pc, #400]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb9c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb9e:	4b62      	ldr	r3, [pc, #392]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 0304 	and.w	r3, r3, #4
 800cba6:	2b04      	cmp	r3, #4
 800cba8:	d10c      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d109      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbb0:	4b5d      	ldr	r3, [pc, #372]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	08db      	lsrs	r3, r3, #3
 800cbb6:	f003 0303 	and.w	r3, r3, #3
 800cbba:	4a5c      	ldr	r2, [pc, #368]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cbbc:	fa22 f303 	lsr.w	r3, r2, r3
 800cbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc2:	e01e      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbc4:	4b58      	ldr	r3, [pc, #352]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbd0:	d106      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd8:	d102      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbda:	4b55      	ldr	r3, [pc, #340]	; (800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbde:	e010      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbe0:	4b51      	ldr	r3, [pc, #324]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbec:	d106      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf4:	d102      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbf6:	4b4f      	ldr	r3, [pc, #316]	; (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbfa:	e002      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc00:	e235      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc02:	e234      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc04:	4b4c      	ldr	r3, [pc, #304]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc08:	e231      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0e:	e22e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc14:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	f040 808f 	bne.w	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cc1e:	4b42      	ldr	r3, [pc, #264]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc22:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cc26:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc2e:	d06b      	beq.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc36:	d874      	bhi.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc3e:	d056      	beq.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc46:	d86c      	bhi.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc4e:	d03b      	beq.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc56:	d864      	bhi.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc5e:	d021      	beq.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc66:	d85c      	bhi.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc74:	d004      	beq.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cc76:	e054      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cc78:	f7fe fa0a 	bl	800b090 <HAL_RCC_GetPCLK1Freq>
 800cc7c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc7e:	e1f6      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc80:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc8c:	d107      	bne.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc8e:	f107 0318 	add.w	r3, r7, #24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fa0a 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc9c:	e1e7      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca2:	e1e4      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cca4:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb0:	d107      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb2:	f107 030c 	add.w	r3, r7, #12
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 fb4c 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc0:	e1d5      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc6:	e1d2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccc8:	4b17      	ldr	r3, [pc, #92]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f003 0304 	and.w	r3, r3, #4
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d109      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd4:	4b14      	ldr	r3, [pc, #80]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	08db      	lsrs	r3, r3, #3
 800ccda:	f003 0303 	and.w	r3, r3, #3
 800ccde:	4a13      	ldr	r2, [pc, #76]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cce0:	fa22 f303 	lsr.w	r3, r2, r3
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce6:	e1c2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e1bf      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ccee:	4b0e      	ldr	r3, [pc, #56]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccfa:	d102      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ccfc:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd00:	e1b5      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd06:	e1b2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd08:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd14:	d102      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cd16:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd1a:	e1a8      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd20:	e1a5      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd26:	e1a2      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd28:	58024400 	.word	0x58024400
 800cd2c:	03d09000 	.word	0x03d09000
 800cd30:	003d0900 	.word	0x003d0900
 800cd34:	017d7840 	.word	0x017d7840
 800cd38:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd40:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cd44:	430b      	orrs	r3, r1
 800cd46:	d173      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cd48:	4b9c      	ldr	r3, [pc, #624]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cd50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd58:	d02f      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd60:	d863      	bhi.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d004      	beq.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd6e:	d012      	beq.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cd70:	e05b      	b.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd72:	4b92      	ldr	r3, [pc, #584]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd7e:	d107      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd80:	f107 0318 	add.w	r3, r7, #24
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 f991 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8e:	e16e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd94:	e16b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd96:	4b89      	ldr	r3, [pc, #548]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda2:	d107      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cda4:	f107 030c 	add.w	r3, r7, #12
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fad3 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb2:	e15c      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e159      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdba:	4b80      	ldr	r3, [pc, #512]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdc4:	4b7d      	ldr	r3, [pc, #500]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d10c      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d109      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdd6:	4b79      	ldr	r3, [pc, #484]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	08db      	lsrs	r3, r3, #3
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	4a77      	ldr	r2, [pc, #476]	; (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cde2:	fa22 f303 	lsr.w	r3, r2, r3
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cde8:	e01e      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdea:	4b74      	ldr	r3, [pc, #464]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdf6:	d106      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdfe:	d102      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce00:	4b70      	ldr	r3, [pc, #448]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce04:	e010      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce06:	4b6d      	ldr	r3, [pc, #436]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce12:	d106      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ce14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1a:	d102      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce1c:	4b6a      	ldr	r3, [pc, #424]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce20:	e002      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce26:	e122      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce28:	e121      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2e:	e11e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ce30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce34:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ce38:	430b      	orrs	r3, r1
 800ce3a:	d133      	bne.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ce3c:	4b5f      	ldr	r3, [pc, #380]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d004      	beq.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce52:	d012      	beq.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ce54:	e023      	b.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce56:	4b59      	ldr	r3, [pc, #356]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce62:	d107      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fbc7 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce72:	e0fc      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce78:	e0f9      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce7a:	4b50      	ldr	r3, [pc, #320]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce86:	d107      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce88:	f107 0318 	add.w	r3, r7, #24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 f90d 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce96:	e0ea      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9c:	e0e7      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea2:	e0e4      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cea8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ceac:	430b      	orrs	r3, r1
 800ceae:	f040 808d 	bne.w	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ceb2:	4b42      	ldr	r3, [pc, #264]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ceba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cec2:	d06b      	beq.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ceca:	d874      	bhi.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced2:	d056      	beq.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceda:	d86c      	bhi.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cee2:	d03b      	beq.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ceea:	d864      	bhi.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cef2:	d021      	beq.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cefa:	d85c      	bhi.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d004      	beq.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf08:	d004      	beq.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cf0a:	e054      	b.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cf0c:	f000 f8b8 	bl	800d080 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf12:	e0ac      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf14:	4b29      	ldr	r3, [pc, #164]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf20:	d107      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf22:	f107 0318 	add.w	r3, r7, #24
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 f8c0 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf30:	e09d      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf36:	e09a      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf38:	4b20      	ldr	r3, [pc, #128]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf44:	d107      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fa02 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf54:	e08b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e088      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf5c:	4b17      	ldr	r3, [pc, #92]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d109      	bne.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf68:	4b14      	ldr	r3, [pc, #80]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	08db      	lsrs	r3, r3, #3
 800cf6e:	f003 0303 	and.w	r3, r3, #3
 800cf72:	4a13      	ldr	r2, [pc, #76]	; (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cf74:	fa22 f303 	lsr.w	r3, r2, r3
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf7a:	e078      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf80:	e075      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf82:	4b0e      	ldr	r3, [pc, #56]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf8e:	d102      	bne.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cf90:	4b0c      	ldr	r3, [pc, #48]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf94:	e06b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf9a:	e068      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf9c:	4b07      	ldr	r3, [pc, #28]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfa8:	d102      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cfaa:	4b07      	ldr	r3, [pc, #28]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfae:	e05e      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb4:	e05b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfba:	e058      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cfbc:	58024400 	.word	0x58024400
 800cfc0:	03d09000 	.word	0x03d09000
 800cfc4:	003d0900 	.word	0x003d0900
 800cfc8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cfcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cfd4:	430b      	orrs	r3, r1
 800cfd6:	d148      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cfd8:	4b27      	ldr	r3, [pc, #156]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cfe0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfe8:	d02a      	beq.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cff0:	d838      	bhi.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cffe:	d00d      	beq.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d000:	e030      	b.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d002:	4b1d      	ldr	r3, [pc, #116]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d00e:	d102      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d010:	4b1a      	ldr	r3, [pc, #104]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d014:	e02b      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01a:	e028      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d01c:	4b16      	ldr	r3, [pc, #88]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d028:	d107      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d02a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 fae4 	bl	800d5fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d038:	e019      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03e:	e016      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d040:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d04c:	d107      	bne.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d04e:	f107 0318 	add.w	r3, r7, #24
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f82a 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05c:	e007      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d062:	e004      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d068:	e001      	b.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d070:	4618      	mov	r0, r3
 800d072:	3740      	adds	r7, #64	; 0x40
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	58024400 	.word	0x58024400
 800d07c:	017d7840 	.word	0x017d7840

0800d080 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d084:	f7fd ffd4 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800d088:	4602      	mov	r2, r0
 800d08a:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	091b      	lsrs	r3, r3, #4
 800d090:	f003 0307 	and.w	r3, r3, #7
 800d094:	4904      	ldr	r1, [pc, #16]	; (800d0a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d096:	5ccb      	ldrb	r3, [r1, r3]
 800d098:	f003 031f 	and.w	r3, r3, #31
 800d09c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	58024400 	.word	0x58024400
 800d0a8:	080176a8 	.word	0x080176a8

0800d0ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b089      	sub	sp, #36	; 0x24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0b4:	4ba1      	ldr	r3, [pc, #644]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b8:	f003 0303 	and.w	r3, r3, #3
 800d0bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d0be:	4b9f      	ldr	r3, [pc, #636]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c2:	0b1b      	lsrs	r3, r3, #12
 800d0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d0ca:	4b9c      	ldr	r3, [pc, #624]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ce:	091b      	lsrs	r3, r3, #4
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d0d6:	4b99      	ldr	r3, [pc, #612]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0da:	08db      	lsrs	r3, r3, #3
 800d0dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	fb02 f303 	mul.w	r3, r2, r3
 800d0e6:	ee07 3a90 	vmov	s15, r3
 800d0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 8111 	beq.w	800d31c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	f000 8083 	beq.w	800d208 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2b02      	cmp	r3, #2
 800d106:	f200 80a1 	bhi.w	800d24c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d056      	beq.n	800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d116:	e099      	b.n	800d24c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d118:	4b88      	ldr	r3, [pc, #544]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b00      	cmp	r3, #0
 800d122:	d02d      	beq.n	800d180 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d124:	4b85      	ldr	r3, [pc, #532]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	08db      	lsrs	r3, r3, #3
 800d12a:	f003 0303 	and.w	r3, r3, #3
 800d12e:	4a84      	ldr	r2, [pc, #528]	; (800d340 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d130:	fa22 f303 	lsr.w	r3, r2, r3
 800d134:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	ee07 3a90 	vmov	s15, r3
 800d13c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14e:	4b7b      	ldr	r3, [pc, #492]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d162:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d17e:	e087      	b.n	800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	ee07 3a90 	vmov	s15, r3
 800d186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d192:	4b6a      	ldr	r3, [pc, #424]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c2:	e065      	b.n	800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d34c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d6:	4b59      	ldr	r3, [pc, #356]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1de:	ee07 3a90 	vmov	s15, r3
 800d1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d206:	e043      	b.n	800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	ee07 3a90 	vmov	s15, r3
 800d20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d212:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d21a:	4b48      	ldr	r3, [pc, #288]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d22e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d23a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d24a:	e021      	b.n	800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	ee07 3a90 	vmov	s15, r3
 800d252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d256:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d34c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25e:	4b37      	ldr	r3, [pc, #220]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d266:	ee07 3a90 	vmov	s15, r3
 800d26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d272:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d28e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d290:	4b2a      	ldr	r3, [pc, #168]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d294:	0a5b      	lsrs	r3, r3, #9
 800d296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d29a:	ee07 3a90 	vmov	s15, r3
 800d29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2b6:	ee17 2a90 	vmov	r2, s15
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d2be:	4b1f      	ldr	r3, [pc, #124]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c2:	0c1b      	lsrs	r3, r3, #16
 800d2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2e4:	ee17 2a90 	vmov	r2, s15
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d2ec:	4b13      	ldr	r3, [pc, #76]	; (800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f0:	0e1b      	lsrs	r3, r3, #24
 800d2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f6:	ee07 3a90 	vmov	s15, r3
 800d2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d306:	edd7 6a07 	vldr	s13, [r7, #28]
 800d30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d312:	ee17 2a90 	vmov	r2, s15
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d31a:	e008      	b.n	800d32e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	609a      	str	r2, [r3, #8]
}
 800d32e:	bf00      	nop
 800d330:	3724      	adds	r7, #36	; 0x24
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	58024400 	.word	0x58024400
 800d340:	03d09000 	.word	0x03d09000
 800d344:	46000000 	.word	0x46000000
 800d348:	4c742400 	.word	0x4c742400
 800d34c:	4a742400 	.word	0x4a742400
 800d350:	4bbebc20 	.word	0x4bbebc20

0800d354 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d354:	b480      	push	{r7}
 800d356:	b089      	sub	sp, #36	; 0x24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d35c:	4ba1      	ldr	r3, [pc, #644]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d360:	f003 0303 	and.w	r3, r3, #3
 800d364:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d366:	4b9f      	ldr	r3, [pc, #636]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36a:	0d1b      	lsrs	r3, r3, #20
 800d36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d370:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d372:	4b9c      	ldr	r3, [pc, #624]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d376:	0a1b      	lsrs	r3, r3, #8
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d37e:	4b99      	ldr	r3, [pc, #612]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d382:	08db      	lsrs	r3, r3, #3
 800d384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	fb02 f303 	mul.w	r3, r2, r3
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d396:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 8111 	beq.w	800d5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	f000 8083 	beq.w	800d4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	f200 80a1 	bhi.w	800d4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d003      	beq.n	800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d056      	beq.n	800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d3be:	e099      	b.n	800d4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3c0:	4b88      	ldr	r3, [pc, #544]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0320 	and.w	r3, r3, #32
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d02d      	beq.n	800d428 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3cc:	4b85      	ldr	r3, [pc, #532]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	08db      	lsrs	r3, r3, #3
 800d3d2:	f003 0303 	and.w	r3, r3, #3
 800d3d6:	4a84      	ldr	r2, [pc, #528]	; (800d5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d3dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	ee07 3a90 	vmov	s15, r3
 800d3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f6:	4b7b      	ldr	r3, [pc, #492]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d406:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d5ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d422:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d426:	e087      	b.n	800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	ee07 3a90 	vmov	s15, r3
 800d42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d432:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43a:	4b6a      	ldr	r3, [pc, #424]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d442:	ee07 3a90 	vmov	s15, r3
 800d446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d5ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d46a:	e065      	b.n	800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47e:	4b59      	ldr	r3, [pc, #356]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d486:	ee07 3a90 	vmov	s15, r3
 800d48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d492:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d5ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ae:	e043      	b.n	800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c2:	4b48      	ldr	r3, [pc, #288]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d5ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4f2:	e021      	b.n	800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d506:	4b37      	ldr	r3, [pc, #220]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d516:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d5ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d536:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d538:	4b2a      	ldr	r3, [pc, #168]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d53c:	0a5b      	lsrs	r3, r3, #9
 800d53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d542:	ee07 3a90 	vmov	s15, r3
 800d546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d54e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d552:	edd7 6a07 	vldr	s13, [r7, #28]
 800d556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d55e:	ee17 2a90 	vmov	r2, s15
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d566:	4b1f      	ldr	r3, [pc, #124]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56a:	0c1b      	lsrs	r3, r3, #16
 800d56c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d570:	ee07 3a90 	vmov	s15, r3
 800d574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d57c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d580:	edd7 6a07 	vldr	s13, [r7, #28]
 800d584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d58c:	ee17 2a90 	vmov	r2, s15
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d594:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d598:	0e1b      	lsrs	r3, r3, #24
 800d59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ba:	ee17 2a90 	vmov	r2, s15
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d5c2:	e008      	b.n	800d5d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	609a      	str	r2, [r3, #8]
}
 800d5d6:	bf00      	nop
 800d5d8:	3724      	adds	r7, #36	; 0x24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	03d09000 	.word	0x03d09000
 800d5ec:	46000000 	.word	0x46000000
 800d5f0:	4c742400 	.word	0x4c742400
 800d5f4:	4a742400 	.word	0x4a742400
 800d5f8:	4bbebc20 	.word	0x4bbebc20

0800d5fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b089      	sub	sp, #36	; 0x24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d604:	4ba0      	ldr	r3, [pc, #640]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d608:	f003 0303 	and.w	r3, r3, #3
 800d60c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d60e:	4b9e      	ldr	r3, [pc, #632]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d612:	091b      	lsrs	r3, r3, #4
 800d614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d618:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d61a:	4b9b      	ldr	r3, [pc, #620]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d624:	4b98      	ldr	r3, [pc, #608]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d628:	08db      	lsrs	r3, r3, #3
 800d62a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	fb02 f303 	mul.w	r3, r2, r3
 800d634:	ee07 3a90 	vmov	s15, r3
 800d638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 8111 	beq.w	800d86a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	f000 8083 	beq.w	800d756 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	2b02      	cmp	r3, #2
 800d654:	f200 80a1 	bhi.w	800d79a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d056      	beq.n	800d712 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d664:	e099      	b.n	800d79a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d666:	4b88      	ldr	r3, [pc, #544]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d02d      	beq.n	800d6ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d672:	4b85      	ldr	r3, [pc, #532]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	08db      	lsrs	r3, r3, #3
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	4a83      	ldr	r2, [pc, #524]	; (800d88c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d67e:	fa22 f303 	lsr.w	r3, r2, r3
 800d682:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d69c:	4b7a      	ldr	r3, [pc, #488]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a4:	ee07 3a90 	vmov	s15, r3
 800d6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6cc:	e087      	b.n	800d7de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	ee07 3a90 	vmov	s15, r3
 800d6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d894 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e0:	4b69      	ldr	r3, [pc, #420]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e8:	ee07 3a90 	vmov	s15, r3
 800d6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d710:	e065      	b.n	800d7de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	ee07 3a90 	vmov	s15, r3
 800d718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d898 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d724:	4b58      	ldr	r3, [pc, #352]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d72c:	ee07 3a90 	vmov	s15, r3
 800d730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d734:	ed97 6a03 	vldr	s12, [r7, #12]
 800d738:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d750:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d754:	e043      	b.n	800d7de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	ee07 3a90 	vmov	s15, r3
 800d75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d760:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d768:	4b47      	ldr	r3, [pc, #284]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d770:	ee07 3a90 	vmov	s15, r3
 800d774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d778:	ed97 6a03 	vldr	s12, [r7, #12]
 800d77c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d794:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d798:	e021      	b.n	800d7de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	ee07 3a90 	vmov	s15, r3
 800d7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d894 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ac:	4b36      	ldr	r3, [pc, #216]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b4:	ee07 3a90 	vmov	s15, r3
 800d7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d7de:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e2:	0a5b      	lsrs	r3, r3, #9
 800d7e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e8:	ee07 3a90 	vmov	s15, r3
 800d7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d804:	ee17 2a90 	vmov	r2, s15
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d80c:	4b1e      	ldr	r3, [pc, #120]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d810:	0c1b      	lsrs	r3, r3, #16
 800d812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d816:	ee07 3a90 	vmov	s15, r3
 800d81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d826:	edd7 6a07 	vldr	s13, [r7, #28]
 800d82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d832:	ee17 2a90 	vmov	r2, s15
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d83a:	4b13      	ldr	r3, [pc, #76]	; (800d888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83e:	0e1b      	lsrs	r3, r3, #24
 800d840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d844:	ee07 3a90 	vmov	s15, r3
 800d848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d84c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d854:	edd7 6a07 	vldr	s13, [r7, #28]
 800d858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d860:	ee17 2a90 	vmov	r2, s15
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d868:	e008      	b.n	800d87c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	609a      	str	r2, [r3, #8]
}
 800d87c:	bf00      	nop
 800d87e:	3724      	adds	r7, #36	; 0x24
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	58024400 	.word	0x58024400
 800d88c:	03d09000 	.word	0x03d09000
 800d890:	46000000 	.word	0x46000000
 800d894:	4c742400 	.word	0x4c742400
 800d898:	4a742400 	.word	0x4a742400
 800d89c:	4bbebc20 	.word	0x4bbebc20

0800d8a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8ae:	4b53      	ldr	r3, [pc, #332]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b2:	f003 0303 	and.w	r3, r3, #3
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d101      	bne.n	800d8be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e099      	b.n	800d9f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d8be:	4b4f      	ldr	r3, [pc, #316]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a4e      	ldr	r2, [pc, #312]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d8c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d8c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ca:	f7f6 fc8f 	bl	80041ec <HAL_GetTick>
 800d8ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8d0:	e008      	b.n	800d8e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8d2:	f7f6 fc8b 	bl	80041ec <HAL_GetTick>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d901      	bls.n	800d8e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	e086      	b.n	800d9f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8e4:	4b45      	ldr	r3, [pc, #276]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1f0      	bne.n	800d8d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8f0:	4b42      	ldr	r3, [pc, #264]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	031b      	lsls	r3, r3, #12
 800d8fe:	493f      	ldr	r1, [pc, #252]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d900:	4313      	orrs	r3, r2
 800d902:	628b      	str	r3, [r1, #40]	; 0x28
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	3b01      	subs	r3, #1
 800d90a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	3b01      	subs	r3, #1
 800d914:	025b      	lsls	r3, r3, #9
 800d916:	b29b      	uxth	r3, r3
 800d918:	431a      	orrs	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	3b01      	subs	r3, #1
 800d920:	041b      	lsls	r3, r3, #16
 800d922:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d926:	431a      	orrs	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	061b      	lsls	r3, r3, #24
 800d930:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d934:	4931      	ldr	r1, [pc, #196]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d936:	4313      	orrs	r3, r2
 800d938:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d93a:	4b30      	ldr	r3, [pc, #192]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	492d      	ldr	r1, [pc, #180]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d948:	4313      	orrs	r3, r2
 800d94a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d94c:	4b2b      	ldr	r3, [pc, #172]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	f023 0220 	bic.w	r2, r3, #32
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	4928      	ldr	r1, [pc, #160]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d95a:	4313      	orrs	r3, r2
 800d95c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d95e:	4b27      	ldr	r3, [pc, #156]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d962:	4a26      	ldr	r2, [pc, #152]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d964:	f023 0310 	bic.w	r3, r3, #16
 800d968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d96a:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d96c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d96e:	4b24      	ldr	r3, [pc, #144]	; (800da00 <RCCEx_PLL2_Config+0x160>)
 800d970:	4013      	ands	r3, r2
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	69d2      	ldr	r2, [r2, #28]
 800d976:	00d2      	lsls	r2, r2, #3
 800d978:	4920      	ldr	r1, [pc, #128]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d97a:	4313      	orrs	r3, r2
 800d97c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d97e:	4b1f      	ldr	r3, [pc, #124]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d982:	4a1e      	ldr	r2, [pc, #120]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d984:	f043 0310 	orr.w	r3, r3, #16
 800d988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d106      	bne.n	800d99e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d994:	4a19      	ldr	r2, [pc, #100]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d99a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d99c:	e00f      	b.n	800d9be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d106      	bne.n	800d9b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d9a4:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a8:	4a14      	ldr	r2, [pc, #80]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9b0:	e005      	b.n	800d9be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d9b2:	4b12      	ldr	r3, [pc, #72]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b6:	4a11      	ldr	r2, [pc, #68]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a0e      	ldr	r2, [pc, #56]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ca:	f7f6 fc0f 	bl	80041ec <HAL_GetTick>
 800d9ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9d0:	e008      	b.n	800d9e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9d2:	f7f6 fc0b 	bl	80041ec <HAL_GetTick>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d901      	bls.n	800d9e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e006      	b.n	800d9f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <RCCEx_PLL2_Config+0x15c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d0f0      	beq.n	800d9d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	58024400 	.word	0x58024400
 800da00:	ffff0007 	.word	0xffff0007

0800da04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da12:	4b53      	ldr	r3, [pc, #332]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da16:	f003 0303 	and.w	r3, r3, #3
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d101      	bne.n	800da22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e099      	b.n	800db56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800da22:	4b4f      	ldr	r3, [pc, #316]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a4e      	ldr	r2, [pc, #312]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da2e:	f7f6 fbdd 	bl	80041ec <HAL_GetTick>
 800da32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da34:	e008      	b.n	800da48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da36:	f7f6 fbd9 	bl	80041ec <HAL_GetTick>
 800da3a:	4602      	mov	r2, r0
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	2b02      	cmp	r3, #2
 800da42:	d901      	bls.n	800da48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da44:	2303      	movs	r3, #3
 800da46:	e086      	b.n	800db56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da48:	4b45      	ldr	r3, [pc, #276]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1f0      	bne.n	800da36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da54:	4b42      	ldr	r3, [pc, #264]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	051b      	lsls	r3, r3, #20
 800da62:	493f      	ldr	r1, [pc, #252]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da64:	4313      	orrs	r3, r2
 800da66:	628b      	str	r3, [r1, #40]	; 0x28
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	3b01      	subs	r3, #1
 800da78:	025b      	lsls	r3, r3, #9
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	431a      	orrs	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	3b01      	subs	r3, #1
 800da84:	041b      	lsls	r3, r3, #16
 800da86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da8a:	431a      	orrs	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	3b01      	subs	r3, #1
 800da92:	061b      	lsls	r3, r3, #24
 800da94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da98:	4931      	ldr	r1, [pc, #196]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800da9a:	4313      	orrs	r3, r2
 800da9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da9e:	4b30      	ldr	r3, [pc, #192]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800daa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	492d      	ldr	r1, [pc, #180]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800daac:	4313      	orrs	r3, r2
 800daae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dab0:	4b2b      	ldr	r3, [pc, #172]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	4928      	ldr	r1, [pc, #160]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dabe:	4313      	orrs	r3, r2
 800dac0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dac2:	4b27      	ldr	r3, [pc, #156]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac6:	4a26      	ldr	r2, [pc, #152]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dacc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dace:	4b24      	ldr	r3, [pc, #144]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dad2:	4b24      	ldr	r3, [pc, #144]	; (800db64 <RCCEx_PLL3_Config+0x160>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	69d2      	ldr	r2, [r2, #28]
 800dada:	00d2      	lsls	r2, r2, #3
 800dadc:	4920      	ldr	r1, [pc, #128]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dade:	4313      	orrs	r3, r2
 800dae0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dae2:	4b1f      	ldr	r3, [pc, #124]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	4a1e      	ldr	r2, [pc, #120]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d106      	bne.n	800db02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800daf4:	4b1a      	ldr	r3, [pc, #104]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800daf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf8:	4a19      	ldr	r2, [pc, #100]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800dafa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dafe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db00:	e00f      	b.n	800db22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d106      	bne.n	800db16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0c:	4a14      	ldr	r2, [pc, #80]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800db12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db14:	e005      	b.n	800db22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800db16:	4b12      	ldr	r3, [pc, #72]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1a:	4a11      	ldr	r2, [pc, #68]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800db22:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a0e      	ldr	r2, [pc, #56]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db2e:	f7f6 fb5d 	bl	80041ec <HAL_GetTick>
 800db32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db34:	e008      	b.n	800db48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db36:	f7f6 fb59 	bl	80041ec <HAL_GetTick>
 800db3a:	4602      	mov	r2, r0
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	2b02      	cmp	r3, #2
 800db42:	d901      	bls.n	800db48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db44:	2303      	movs	r3, #3
 800db46:	e006      	b.n	800db56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db48:	4b05      	ldr	r3, [pc, #20]	; (800db60 <RCCEx_PLL3_Config+0x15c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0f0      	beq.n	800db36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db54:	7bfb      	ldrb	r3, [r7, #15]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	58024400 	.word	0x58024400
 800db64:	ffff0007 	.word	0xffff0007

0800db68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d071      	beq.n	800dc5e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d106      	bne.n	800db94 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f4 fdf0 	bl	8002774 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2202      	movs	r2, #2
 800db98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b10      	cmp	r3, #16
 800dba8:	d050      	beq.n	800dc4c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	22ca      	movs	r2, #202	; 0xca
 800dbb0:	625a      	str	r2, [r3, #36]	; 0x24
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2253      	movs	r2, #83	; 0x53
 800dbb8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fa4a 	bl	800e054 <RTC_EnterInitMode>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d124      	bne.n	800dc14 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6899      	ldr	r1, [r3, #8]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	4b24      	ldr	r3, [pc, #144]	; (800dc68 <HAL_RTC_Init+0x100>)
 800dbd6:	400b      	ands	r3, r1
 800dbd8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6899      	ldr	r1, [r3, #8]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	431a      	orrs	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	0419      	lsls	r1, r3, #16
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68da      	ldr	r2, [r3, #12]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	430a      	orrs	r2, r1
 800dc08:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fa56 	bl	800e0bc <RTC_ExitInitMode>
 800dc10:	4603      	mov	r3, r0
 800dc12:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d113      	bne.n	800dc42 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f022 0203 	bic.w	r2, r2, #3
 800dc28:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	69da      	ldr	r2, [r3, #28]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	431a      	orrs	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	430a      	orrs	r2, r1
 800dc40:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	22ff      	movs	r2, #255	; 0xff
 800dc48:	625a      	str	r2, [r3, #36]	; 0x24
 800dc4a:	e001      	b.n	800dc50 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d103      	bne.n	800dc5e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	ff8fffbf 	.word	0xff8fffbf

0800dc6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc6c:	b590      	push	{r4, r7, lr}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d101      	bne.n	800dc86 <HAL_RTC_SetTime+0x1a>
 800dc82:	2302      	movs	r3, #2
 800dc84:	e089      	b.n	800dd9a <HAL_RTC_SetTime+0x12e>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2202      	movs	r2, #2
 800dc92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	22ca      	movs	r2, #202	; 0xca
 800dc9c:	625a      	str	r2, [r3, #36]	; 0x24
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2253      	movs	r2, #83	; 0x53
 800dca4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f000 f9d4 	bl	800e054 <RTC_EnterInitMode>
 800dcac:	4603      	mov	r3, r0
 800dcae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dcb0:	7cfb      	ldrb	r3, [r7, #19]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d161      	bne.n	800dd7a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d126      	bne.n	800dd0a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d102      	bne.n	800dcd0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2200      	movs	r2, #0
 800dcce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 fa2f 	bl	800e138 <RTC_ByteToBcd2>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	785b      	ldrb	r3, [r3, #1]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 fa28 	bl	800e138 <RTC_ByteToBcd2>
 800dce8:	4603      	mov	r3, r0
 800dcea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dcec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	789b      	ldrb	r3, [r3, #2]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 fa20 	bl	800e138 <RTC_ByteToBcd2>
 800dcf8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dcfa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	78db      	ldrb	r3, [r3, #3]
 800dd02:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd04:	4313      	orrs	r3, r2
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	e018      	b.n	800dd3c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	785b      	ldrb	r3, [r3, #1]
 800dd28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd2a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dd30:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	78db      	ldrb	r3, [r3, #3]
 800dd36:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	6979      	ldr	r1, [r7, #20]
 800dd42:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <HAL_RTC_SetTime+0x138>)
 800dd44:	400b      	ands	r3, r1
 800dd46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	689a      	ldr	r2, [r3, #8]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dd56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6899      	ldr	r1, [r3, #8]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	68da      	ldr	r2, [r3, #12]
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	431a      	orrs	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 f9a3 	bl	800e0bc <RTC_ExitInitMode>
 800dd76:	4603      	mov	r3, r0
 800dd78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	22ff      	movs	r2, #255	; 0xff
 800dd80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dd82:	7cfb      	ldrb	r3, [r7, #19]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d103      	bne.n	800dd90 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dd98:	7cfb      	ldrb	r3, [r7, #19]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	371c      	adds	r7, #28
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd90      	pop	{r4, r7, pc}
 800dda2:	bf00      	nop
 800dda4:	007f7f7f 	.word	0x007f7f7f

0800dda8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b22      	ldr	r3, [pc, #136]	; (800de5c <HAL_RTC_GetTime+0xb4>)
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	0c1b      	lsrs	r3, r3, #16
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	0d9b      	lsrs	r3, r3, #22
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	b2da      	uxtb	r2, r3
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d11a      	bne.n	800de52 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f9a9 	bl	800e178 <RTC_Bcd2ToByte>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	785b      	ldrb	r3, [r3, #1]
 800de32:	4618      	mov	r0, r3
 800de34:	f000 f9a0 	bl	800e178 <RTC_Bcd2ToByte>
 800de38:	4603      	mov	r3, r0
 800de3a:	461a      	mov	r2, r3
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	789b      	ldrb	r3, [r3, #2]
 800de44:	4618      	mov	r0, r3
 800de46:	f000 f997 	bl	800e178 <RTC_Bcd2ToByte>
 800de4a:	4603      	mov	r3, r0
 800de4c:	461a      	mov	r2, r3
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	007f7f7f 	.word	0x007f7f7f

0800de60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d101      	bne.n	800de7a <HAL_RTC_SetDate+0x1a>
 800de76:	2302      	movs	r3, #2
 800de78:	e073      	b.n	800df62 <HAL_RTC_SetDate+0x102>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2202      	movs	r2, #2
 800de86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10e      	bne.n	800deae <HAL_RTC_SetDate+0x4e>
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	785b      	ldrb	r3, [r3, #1]
 800de94:	f003 0310 	and.w	r3, r3, #16
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d008      	beq.n	800deae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	785b      	ldrb	r3, [r3, #1]
 800dea0:	f023 0310 	bic.w	r3, r3, #16
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	330a      	adds	r3, #10
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d11c      	bne.n	800deee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	78db      	ldrb	r3, [r3, #3]
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 f93d 	bl	800e138 <RTC_ByteToBcd2>
 800debe:	4603      	mov	r3, r0
 800dec0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	785b      	ldrb	r3, [r3, #1]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 f936 	bl	800e138 <RTC_ByteToBcd2>
 800decc:	4603      	mov	r3, r0
 800dece:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ded0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	789b      	ldrb	r3, [r3, #2]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 f92e 	bl	800e138 <RTC_ByteToBcd2>
 800dedc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dede:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dee8:	4313      	orrs	r3, r2
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	e00e      	b.n	800df0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	78db      	ldrb	r3, [r3, #3]
 800def2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	785b      	ldrb	r3, [r3, #1]
 800def8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800defa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800df00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df08:	4313      	orrs	r3, r2
 800df0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	22ca      	movs	r2, #202	; 0xca
 800df12:	625a      	str	r2, [r3, #36]	; 0x24
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2253      	movs	r2, #83	; 0x53
 800df1a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f000 f899 	bl	800e054 <RTC_EnterInitMode>
 800df22:	4603      	mov	r3, r0
 800df24:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800df26:	7cfb      	ldrb	r3, [r7, #19]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10a      	bne.n	800df42 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	6979      	ldr	r1, [r7, #20]
 800df32:	4b0e      	ldr	r3, [pc, #56]	; (800df6c <HAL_RTC_SetDate+0x10c>)
 800df34:	400b      	ands	r3, r1
 800df36:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 f8bf 	bl	800e0bc <RTC_ExitInitMode>
 800df3e:	4603      	mov	r3, r0
 800df40:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	22ff      	movs	r2, #255	; 0xff
 800df48:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800df4a:	7cfb      	ldrb	r3, [r7, #19]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d103      	bne.n	800df58 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800df60:	7cfb      	ldrb	r3, [r7, #19]


}
 800df62:	4618      	mov	r0, r3
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	bd90      	pop	{r4, r7, pc}
 800df6a:	bf00      	nop
 800df6c:	00ffff3f 	.word	0x00ffff3f

0800df70 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	4b21      	ldr	r3, [pc, #132]	; (800e008 <HAL_RTC_GetDate+0x98>)
 800df84:	4013      	ands	r3, r2
 800df86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	0c1b      	lsrs	r3, r3, #16
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	0a1b      	lsrs	r3, r3, #8
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f003 031f 	and.w	r3, r3, #31
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	0b5b      	lsrs	r3, r3, #13
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 0307 	and.w	r3, r3, #7
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d11a      	bne.n	800dffc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	78db      	ldrb	r3, [r3, #3]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 f8d4 	bl	800e178 <RTC_Bcd2ToByte>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 f8cb 	bl	800e178 <RTC_Bcd2ToByte>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	789b      	ldrb	r3, [r3, #2]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f000 f8c2 	bl	800e178 <RTC_Bcd2ToByte>
 800dff4:	4603      	mov	r3, r0
 800dff6:	461a      	mov	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	00ffff3f 	.word	0x00ffff3f

0800e00c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a0d      	ldr	r2, [pc, #52]	; (800e050 <HAL_RTC_WaitForSynchro+0x44>)
 800e01a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e01c:	f7f6 f8e6 	bl	80041ec <HAL_GetTick>
 800e020:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e022:	e009      	b.n	800e038 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e024:	f7f6 f8e2 	bl	80041ec <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e032:	d901      	bls.n	800e038 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e007      	b.n	800e048 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f003 0320 	and.w	r3, r3, #32
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0ee      	beq.n	800e024 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	0003ff5f 	.word	0x0003ff5f

0800e054 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d120      	bne.n	800e0b0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e076:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e078:	f7f6 f8b8 	bl	80041ec <HAL_GetTick>
 800e07c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e07e:	e00d      	b.n	800e09c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e080:	f7f6 f8b4 	bl	80041ec <HAL_GetTick>
 800e084:	4602      	mov	r2, r0
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e08e:	d905      	bls.n	800e09c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e090:	2303      	movs	r3, #3
 800e092:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2203      	movs	r2, #3
 800e098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <RTC_EnterInitMode+0x5c>
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d1e7      	bne.n	800e080 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
	...

0800e0bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	4a19      	ldr	r2, [pc, #100]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e0ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0d2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e0d4:	4b17      	ldr	r3, [pc, #92]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	f003 0320 	and.w	r3, r3, #32
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10c      	bne.n	800e0fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff ff93 	bl	800e00c <HAL_RTC_WaitForSynchro>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01e      	beq.n	800e12a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2203      	movs	r2, #3
 800e0f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	73fb      	strb	r3, [r7, #15]
 800e0f8:	e017      	b.n	800e12a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0fa:	4b0e      	ldr	r3, [pc, #56]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e100:	f023 0320 	bic.w	r3, r3, #32
 800e104:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff ff80 	bl	800e00c <HAL_RTC_WaitForSynchro>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d005      	beq.n	800e11e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2203      	movs	r2, #3
 800e116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e11a:	2303      	movs	r3, #3
 800e11c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e11e:	4b05      	ldr	r3, [pc, #20]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	4a04      	ldr	r2, [pc, #16]	; (800e134 <RTC_ExitInitMode+0x78>)
 800e124:	f043 0320 	orr.w	r3, r3, #32
 800e128:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	58004000 	.word	0x58004000

0800e138 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	4603      	mov	r3, r0
 800e140:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e14a:	e005      	b.n	800e158 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	3301      	adds	r3, #1
 800e150:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e152:	7afb      	ldrb	r3, [r7, #11]
 800e154:	3b0a      	subs	r3, #10
 800e156:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e158:	7afb      	ldrb	r3, [r7, #11]
 800e15a:	2b09      	cmp	r3, #9
 800e15c:	d8f6      	bhi.n	800e14c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	b2db      	uxtb	r3, r3
 800e162:	011b      	lsls	r3, r3, #4
 800e164:	b2da      	uxtb	r2, r3
 800e166:	7afb      	ldrb	r3, [r7, #11]
 800e168:	4313      	orrs	r3, r2
 800e16a:	b2db      	uxtb	r3, r3
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3714      	adds	r7, #20
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	4603      	mov	r3, r0
 800e180:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	091b      	lsrs	r3, r3, #4
 800e186:	b2db      	uxtb	r3, r3
 800e188:	461a      	mov	r2, r3
 800e18a:	0092      	lsls	r2, r2, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	f003 030f 	and.w	r3, r3, #15
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
 800e19c:	4413      	add	r3, r2
 800e19e:	b2db      	uxtb	r3, r3
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e10f      	b.n	800e3de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a87      	ldr	r2, [pc, #540]	; (800e3e8 <HAL_SPI_Init+0x23c>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d00f      	beq.n	800e1ee <HAL_SPI_Init+0x42>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4a86      	ldr	r2, [pc, #536]	; (800e3ec <HAL_SPI_Init+0x240>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d00a      	beq.n	800e1ee <HAL_SPI_Init+0x42>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a84      	ldr	r2, [pc, #528]	; (800e3f0 <HAL_SPI_Init+0x244>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d005      	beq.n	800e1ee <HAL_SPI_Init+0x42>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	2b0f      	cmp	r3, #15
 800e1e8:	d901      	bls.n	800e1ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e0f7      	b.n	800e3de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fc12 	bl	800ea18 <SPI_GetPacketSize>
 800e1f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a7b      	ldr	r2, [pc, #492]	; (800e3e8 <HAL_SPI_Init+0x23c>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d00c      	beq.n	800e21a <HAL_SPI_Init+0x6e>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a79      	ldr	r2, [pc, #484]	; (800e3ec <HAL_SPI_Init+0x240>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d007      	beq.n	800e21a <HAL_SPI_Init+0x6e>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a78      	ldr	r2, [pc, #480]	; (800e3f0 <HAL_SPI_Init+0x244>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d002      	beq.n	800e21a <HAL_SPI_Init+0x6e>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b08      	cmp	r3, #8
 800e218:	d811      	bhi.n	800e23e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e21e:	4a72      	ldr	r2, [pc, #456]	; (800e3e8 <HAL_SPI_Init+0x23c>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d009      	beq.n	800e238 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a70      	ldr	r2, [pc, #448]	; (800e3ec <HAL_SPI_Init+0x240>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d004      	beq.n	800e238 <HAL_SPI_Init+0x8c>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a6f      	ldr	r2, [pc, #444]	; (800e3f0 <HAL_SPI_Init+0x244>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d104      	bne.n	800e242 <HAL_SPI_Init+0x96>
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b10      	cmp	r3, #16
 800e23c:	d901      	bls.n	800e242 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	e0cd      	b.n	800e3de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7f4 fcf8 	bl	8002c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2202      	movs	r2, #2
 800e260:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0201 	bic.w	r2, r2, #1
 800e272:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e27e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e288:	d119      	bne.n	800e2be <HAL_SPI_Init+0x112>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e292:	d103      	bne.n	800e29c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d008      	beq.n	800e2ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10c      	bne.n	800e2be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e2a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2ac:	d107      	bne.n	800e2be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e2bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00f      	beq.n	800e2ea <HAL_SPI_Init+0x13e>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	2b06      	cmp	r3, #6
 800e2d0:	d90b      	bls.n	800e2ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	601a      	str	r2, [r3, #0]
 800e2e8:	e007      	b.n	800e2fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	69da      	ldr	r2, [r3, #28]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e302:	431a      	orrs	r2, r3
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	431a      	orrs	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30c:	ea42 0103 	orr.w	r1, r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68da      	ldr	r2, [r3, #12]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	430a      	orrs	r2, r1
 800e31a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e324:	431a      	orrs	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32a:	431a      	orrs	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	431a      	orrs	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	431a      	orrs	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	431a      	orrs	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	431a      	orrs	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	431a      	orrs	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e34e:	431a      	orrs	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	431a      	orrs	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e35a:	ea42 0103 	orr.w	r1, r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	430a      	orrs	r2, r1
 800e368:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d113      	bne.n	800e39a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e384:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e398:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f022 0201 	bic.w	r2, r2, #1
 800e3a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	40013000 	.word	0x40013000
 800e3ec:	40003800 	.word	0x40003800
 800e3f0:	40003c00 	.word	0x40003c00

0800e3f4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	4613      	mov	r3, r2
 800e402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e408:	095b      	lsrs	r3, r3, #5
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	3301      	adds	r3, #1
 800e40e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	3330      	adds	r3, #48	; 0x30
 800e416:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e418:	f7f5 fee8 	bl	80041ec <HAL_GetTick>
 800e41c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b01      	cmp	r3, #1
 800e428:	d001      	beq.n	800e42e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e42a:	2302      	movs	r3, #2
 800e42c:	e250      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <HAL_SPI_Receive+0x46>
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e248      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e444:	2b01      	cmp	r3, #1
 800e446:	d101      	bne.n	800e44c <HAL_SPI_Receive+0x58>
 800e448:	2302      	movs	r3, #2
 800e44a:	e241      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2201      	movs	r2, #1
 800e450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2204      	movs	r2, #4
 800e458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	88fa      	ldrh	r2, [r7, #6]
 800e46e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	88fa      	ldrh	r2, [r7, #6]
 800e476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e4a4:	d108      	bne.n	800e4b8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	e009      	b.n	800e4cc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e4ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	4b95      	ldr	r3, [pc, #596]	; (800e728 <HAL_SPI_Receive+0x334>)
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	88f9      	ldrh	r1, [r7, #6]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f042 0201 	orr.w	r2, r2, #1
 800e4ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4f8:	d107      	bne.n	800e50a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e508:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	2b0f      	cmp	r3, #15
 800e510:	d96c      	bls.n	800e5ec <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e512:	e064      	b.n	800e5de <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b01      	cmp	r3, #1
 800e528:	d114      	bne.n	800e554 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e534:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e53a:	1d1a      	adds	r2, r3, #4
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e546:	b29b      	uxth	r3, r3
 800e548:	3b01      	subs	r3, #1
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e552:	e044      	b.n	800e5de <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	8bfa      	ldrh	r2, [r7, #30]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d919      	bls.n	800e596 <HAL_SPI_Receive+0x1a2>
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d014      	beq.n	800e596 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e576:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e57c:	1d1a      	adds	r2, r3, #4
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e588:	b29b      	uxth	r3, r3
 800e58a:	3b01      	subs	r3, #1
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e594:	e023      	b.n	800e5de <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e596:	f7f5 fe29 	bl	80041ec <HAL_GetTick>
 800e59a:	4602      	mov	r2, r0
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d803      	bhi.n	800e5ae <HAL_SPI_Receive+0x1ba>
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ac:	d102      	bne.n	800e5b4 <HAL_SPI_Receive+0x1c0>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d114      	bne.n	800e5de <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f000 f98f 	bl	800e8d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	e178      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d194      	bne.n	800e514 <HAL_SPI_Receive+0x120>
 800e5ea:	e15e      	b.n	800e8aa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	2b07      	cmp	r3, #7
 800e5f2:	f240 8153 	bls.w	800e89c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e5f6:	e08f      	b.n	800e718 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	f003 0301 	and.w	r3, r3, #1
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d114      	bne.n	800e638 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e612:	69ba      	ldr	r2, [r7, #24]
 800e614:	8812      	ldrh	r2, [r2, #0]
 800e616:	b292      	uxth	r2, r2
 800e618:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e61e:	1c9a      	adds	r2, r3, #2
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	3b01      	subs	r3, #1
 800e62e:	b29a      	uxth	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e636:	e06f      	b.n	800e718 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e63e:	b29b      	uxth	r3, r3
 800e640:	8bfa      	ldrh	r2, [r7, #30]
 800e642:	429a      	cmp	r2, r3
 800e644:	d924      	bls.n	800e690 <HAL_SPI_Receive+0x29c>
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01f      	beq.n	800e690 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	8812      	ldrh	r2, [r2, #0]
 800e658:	b292      	uxth	r2, r2
 800e65a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e660:	1c9a      	adds	r2, r3, #2
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e66a:	69ba      	ldr	r2, [r7, #24]
 800e66c:	8812      	ldrh	r2, [r2, #0]
 800e66e:	b292      	uxth	r2, r2
 800e670:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e676:	1c9a      	adds	r2, r3, #2
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e682:	b29b      	uxth	r3, r3
 800e684:	3b02      	subs	r3, #2
 800e686:	b29a      	uxth	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e68e:	e043      	b.n	800e718 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e696:	b29b      	uxth	r3, r3
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d119      	bne.n	800e6d0 <HAL_SPI_Receive+0x2dc>
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d014      	beq.n	800e6d0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6aa:	69ba      	ldr	r2, [r7, #24]
 800e6ac:	8812      	ldrh	r2, [r2, #0]
 800e6ae:	b292      	uxth	r2, r2
 800e6b0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6b6:	1c9a      	adds	r2, r3, #2
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6ce:	e023      	b.n	800e718 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6d0:	f7f5 fd8c 	bl	80041ec <HAL_GetTick>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d803      	bhi.n	800e6e8 <HAL_SPI_Receive+0x2f4>
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e6:	d102      	bne.n	800e6ee <HAL_SPI_Receive+0x2fa>
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d114      	bne.n	800e718 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f000 f8f2 	bl	800e8d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e714:	2303      	movs	r3, #3
 800e716:	e0db      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e71e:	b29b      	uxth	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	f47f af69 	bne.w	800e5f8 <HAL_SPI_Receive+0x204>
 800e726:	e0c0      	b.n	800e8aa <HAL_SPI_Receive+0x4b6>
 800e728:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d117      	bne.n	800e772 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e74e:	7812      	ldrb	r2, [r2, #0]
 800e750:	b2d2      	uxtb	r2, r2
 800e752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e758:	1c5a      	adds	r2, r3, #1
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e764:	b29b      	uxth	r3, r3
 800e766:	3b01      	subs	r3, #1
 800e768:	b29a      	uxth	r2, r3
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e770:	e094      	b.n	800e89c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e778:	b29b      	uxth	r3, r3
 800e77a:	8bfa      	ldrh	r2, [r7, #30]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d946      	bls.n	800e80e <HAL_SPI_Receive+0x41a>
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d041      	beq.n	800e80e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e796:	7812      	ldrb	r2, [r2, #0]
 800e798:	b2d2      	uxtb	r2, r2
 800e79a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	b2d2      	uxtb	r2, r2
 800e7b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ce:	7812      	ldrb	r2, [r2, #0]
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ea:	7812      	ldrb	r2, [r2, #0]
 800e7ec:	b2d2      	uxtb	r2, r2
 800e7ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f4:	1c5a      	adds	r2, r3, #1
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e800:	b29b      	uxth	r3, r3
 800e802:	3b04      	subs	r3, #4
 800e804:	b29a      	uxth	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e80c:	e046      	b.n	800e89c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e814:	b29b      	uxth	r3, r3
 800e816:	2b03      	cmp	r3, #3
 800e818:	d81c      	bhi.n	800e854 <HAL_SPI_Receive+0x460>
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d017      	beq.n	800e854 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e830:	7812      	ldrb	r2, [r2, #0]
 800e832:	b2d2      	uxtb	r2, r2
 800e834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e846:	b29b      	uxth	r3, r3
 800e848:	3b01      	subs	r3, #1
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e852:	e023      	b.n	800e89c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e854:	f7f5 fcca 	bl	80041ec <HAL_GetTick>
 800e858:	4602      	mov	r2, r0
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	429a      	cmp	r2, r3
 800e862:	d803      	bhi.n	800e86c <HAL_SPI_Receive+0x478>
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e86a:	d102      	bne.n	800e872 <HAL_SPI_Receive+0x47e>
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d114      	bne.n	800e89c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 f830 	bl	800e8d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e87e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e898:	2303      	movs	r3, #3
 800e89a:	e019      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f47f af41 	bne.w	800e72c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 f814 	bl	800e8d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e000      	b.n	800e8d0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e8ce:	2300      	movs	r3, #0
  }
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3720      	adds	r7, #32
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f042 0208 	orr.w	r2, r2, #8
 800e8f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	699a      	ldr	r2, [r3, #24]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f042 0210 	orr.w	r2, r2, #16
 800e906:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f022 0201 	bic.w	r2, r2, #1
 800e916:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6919      	ldr	r1, [r3, #16]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b3c      	ldr	r3, [pc, #240]	; (800ea14 <SPI_CloseTransfer+0x13c>)
 800e924:	400b      	ands	r3, r1
 800e926:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e936:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b04      	cmp	r3, #4
 800e942:	d014      	beq.n	800e96e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f003 0320 	and.w	r3, r3, #32
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00f      	beq.n	800e96e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	699a      	ldr	r2, [r3, #24]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f042 0220 	orr.w	r2, r2, #32
 800e96c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b03      	cmp	r3, #3
 800e978:	d014      	beq.n	800e9a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00f      	beq.n	800e9a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e98a:	f043 0204 	orr.w	r2, r3, #4
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	699a      	ldr	r2, [r3, #24]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00f      	beq.n	800e9ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b4:	f043 0201 	orr.w	r2, r3, #1
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	699a      	ldr	r2, [r3, #24]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00f      	beq.n	800e9f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9de:	f043 0208 	orr.w	r2, r3, #8
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	699a      	ldr	r2, [r3, #24]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea08:	bf00      	nop
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	fffffc90 	.word	0xfffffc90

0800ea18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea24:	095b      	lsrs	r3, r3, #5
 800ea26:	3301      	adds	r3, #1
 800ea28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	3307      	adds	r3, #7
 800ea36:	08db      	lsrs	r3, r3, #3
 800ea38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d101      	bne.n	800ea60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e049      	b.n	800eaf4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d106      	bne.n	800ea7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f4 fd87 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3304      	adds	r3, #4
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f000 fe7d 	bl	800f78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2201      	movs	r2, #1
 800ead6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2201      	movs	r2, #1
 800eade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2201      	movs	r2, #1
 800eaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d001      	beq.n	800eb14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e054      	b.n	800ebbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2202      	movs	r2, #2
 800eb18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	68da      	ldr	r2, [r3, #12]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a26      	ldr	r2, [pc, #152]	; (800ebcc <HAL_TIM_Base_Start_IT+0xd0>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d022      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb3e:	d01d      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a22      	ldr	r2, [pc, #136]	; (800ebd0 <HAL_TIM_Base_Start_IT+0xd4>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d018      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a21      	ldr	r2, [pc, #132]	; (800ebd4 <HAL_TIM_Base_Start_IT+0xd8>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d013      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a1f      	ldr	r2, [pc, #124]	; (800ebd8 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d00e      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a1e      	ldr	r2, [pc, #120]	; (800ebdc <HAL_TIM_Base_Start_IT+0xe0>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d009      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a1c      	ldr	r2, [pc, #112]	; (800ebe0 <HAL_TIM_Base_Start_IT+0xe4>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d004      	beq.n	800eb7c <HAL_TIM_Base_Start_IT+0x80>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a1b      	ldr	r2, [pc, #108]	; (800ebe4 <HAL_TIM_Base_Start_IT+0xe8>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d115      	bne.n	800eba8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	689a      	ldr	r2, [r3, #8]
 800eb82:	4b19      	ldr	r3, [pc, #100]	; (800ebe8 <HAL_TIM_Base_Start_IT+0xec>)
 800eb84:	4013      	ands	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b06      	cmp	r3, #6
 800eb8c:	d015      	beq.n	800ebba <HAL_TIM_Base_Start_IT+0xbe>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb94:	d011      	beq.n	800ebba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f042 0201 	orr.w	r2, r2, #1
 800eba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eba6:	e008      	b.n	800ebba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f042 0201 	orr.w	r2, r2, #1
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	e000      	b.n	800ebbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	40010000 	.word	0x40010000
 800ebd0:	40000400 	.word	0x40000400
 800ebd4:	40000800 	.word	0x40000800
 800ebd8:	40000c00 	.word	0x40000c00
 800ebdc:	40010400 	.word	0x40010400
 800ebe0:	40001800 	.word	0x40001800
 800ebe4:	40014000 	.word	0x40014000
 800ebe8:	00010007 	.word	0x00010007

0800ebec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d109      	bne.n	800ec14 <HAL_TIM_OC_Start_IT+0x28>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	bf14      	ite	ne
 800ec0c:	2301      	movne	r3, #1
 800ec0e:	2300      	moveq	r3, #0
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	e03c      	b.n	800ec8e <HAL_TIM_OC_Start_IT+0xa2>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b04      	cmp	r3, #4
 800ec18:	d109      	bne.n	800ec2e <HAL_TIM_OC_Start_IT+0x42>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	bf14      	ite	ne
 800ec26:	2301      	movne	r3, #1
 800ec28:	2300      	moveq	r3, #0
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	e02f      	b.n	800ec8e <HAL_TIM_OC_Start_IT+0xa2>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b08      	cmp	r3, #8
 800ec32:	d109      	bne.n	800ec48 <HAL_TIM_OC_Start_IT+0x5c>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	bf14      	ite	ne
 800ec40:	2301      	movne	r3, #1
 800ec42:	2300      	moveq	r3, #0
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	e022      	b.n	800ec8e <HAL_TIM_OC_Start_IT+0xa2>
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b0c      	cmp	r3, #12
 800ec4c:	d109      	bne.n	800ec62 <HAL_TIM_OC_Start_IT+0x76>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	bf14      	ite	ne
 800ec5a:	2301      	movne	r3, #1
 800ec5c:	2300      	moveq	r3, #0
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	e015      	b.n	800ec8e <HAL_TIM_OC_Start_IT+0xa2>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b10      	cmp	r3, #16
 800ec66:	d109      	bne.n	800ec7c <HAL_TIM_OC_Start_IT+0x90>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	bf14      	ite	ne
 800ec74:	2301      	movne	r3, #1
 800ec76:	2300      	moveq	r3, #0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	e008      	b.n	800ec8e <HAL_TIM_OC_Start_IT+0xa2>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	bf14      	ite	ne
 800ec88:	2301      	movne	r3, #1
 800ec8a:	2300      	moveq	r3, #0
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ec92:	2301      	movs	r3, #1
 800ec94:	e0ec      	b.n	800ee70 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d104      	bne.n	800eca6 <HAL_TIM_OC_Start_IT+0xba>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2202      	movs	r2, #2
 800eca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eca4:	e023      	b.n	800ecee <HAL_TIM_OC_Start_IT+0x102>
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d104      	bne.n	800ecb6 <HAL_TIM_OC_Start_IT+0xca>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecb4:	e01b      	b.n	800ecee <HAL_TIM_OC_Start_IT+0x102>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b08      	cmp	r3, #8
 800ecba:	d104      	bne.n	800ecc6 <HAL_TIM_OC_Start_IT+0xda>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecc4:	e013      	b.n	800ecee <HAL_TIM_OC_Start_IT+0x102>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b0c      	cmp	r3, #12
 800ecca:	d104      	bne.n	800ecd6 <HAL_TIM_OC_Start_IT+0xea>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2202      	movs	r2, #2
 800ecd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecd4:	e00b      	b.n	800ecee <HAL_TIM_OC_Start_IT+0x102>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b10      	cmp	r3, #16
 800ecda:	d104      	bne.n	800ece6 <HAL_TIM_OC_Start_IT+0xfa>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2202      	movs	r2, #2
 800ece0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ece4:	e003      	b.n	800ecee <HAL_TIM_OC_Start_IT+0x102>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2202      	movs	r2, #2
 800ecea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	2b0c      	cmp	r3, #12
 800ecf2:	d841      	bhi.n	800ed78 <HAL_TIM_OC_Start_IT+0x18c>
 800ecf4:	a201      	add	r2, pc, #4	; (adr r2, 800ecfc <HAL_TIM_OC_Start_IT+0x110>)
 800ecf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfa:	bf00      	nop
 800ecfc:	0800ed31 	.word	0x0800ed31
 800ed00:	0800ed79 	.word	0x0800ed79
 800ed04:	0800ed79 	.word	0x0800ed79
 800ed08:	0800ed79 	.word	0x0800ed79
 800ed0c:	0800ed43 	.word	0x0800ed43
 800ed10:	0800ed79 	.word	0x0800ed79
 800ed14:	0800ed79 	.word	0x0800ed79
 800ed18:	0800ed79 	.word	0x0800ed79
 800ed1c:	0800ed55 	.word	0x0800ed55
 800ed20:	0800ed79 	.word	0x0800ed79
 800ed24:	0800ed79 	.word	0x0800ed79
 800ed28:	0800ed79 	.word	0x0800ed79
 800ed2c:	0800ed67 	.word	0x0800ed67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68da      	ldr	r2, [r3, #12]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f042 0202 	orr.w	r2, r2, #2
 800ed3e:	60da      	str	r2, [r3, #12]
      break;
 800ed40:	e01d      	b.n	800ed7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	68da      	ldr	r2, [r3, #12]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f042 0204 	orr.w	r2, r2, #4
 800ed50:	60da      	str	r2, [r3, #12]
      break;
 800ed52:	e014      	b.n	800ed7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	68da      	ldr	r2, [r3, #12]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f042 0208 	orr.w	r2, r2, #8
 800ed62:	60da      	str	r2, [r3, #12]
      break;
 800ed64:	e00b      	b.n	800ed7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68da      	ldr	r2, [r3, #12]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f042 0210 	orr.w	r2, r2, #16
 800ed74:	60da      	str	r2, [r3, #12]
      break;
 800ed76:	e002      	b.n	800ed7e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d174      	bne.n	800ee6e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f001 f917 	bl	800ffc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a38      	ldr	r2, [pc, #224]	; (800ee78 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d013      	beq.n	800edc4 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a36      	ldr	r2, [pc, #216]	; (800ee7c <HAL_TIM_OC_Start_IT+0x290>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d00e      	beq.n	800edc4 <HAL_TIM_OC_Start_IT+0x1d8>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a35      	ldr	r2, [pc, #212]	; (800ee80 <HAL_TIM_OC_Start_IT+0x294>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d009      	beq.n	800edc4 <HAL_TIM_OC_Start_IT+0x1d8>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a33      	ldr	r2, [pc, #204]	; (800ee84 <HAL_TIM_OC_Start_IT+0x298>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d004      	beq.n	800edc4 <HAL_TIM_OC_Start_IT+0x1d8>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a32      	ldr	r2, [pc, #200]	; (800ee88 <HAL_TIM_OC_Start_IT+0x29c>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d101      	bne.n	800edc8 <HAL_TIM_OC_Start_IT+0x1dc>
 800edc4:	2301      	movs	r3, #1
 800edc6:	e000      	b.n	800edca <HAL_TIM_OC_Start_IT+0x1de>
 800edc8:	2300      	movs	r3, #0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d007      	beq.n	800edde <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4a25      	ldr	r2, [pc, #148]	; (800ee78 <HAL_TIM_OC_Start_IT+0x28c>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d022      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edf0:	d01d      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a25      	ldr	r2, [pc, #148]	; (800ee8c <HAL_TIM_OC_Start_IT+0x2a0>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d018      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a23      	ldr	r2, [pc, #140]	; (800ee90 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d013      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a22      	ldr	r2, [pc, #136]	; (800ee94 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d00e      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a19      	ldr	r2, [pc, #100]	; (800ee7c <HAL_TIM_OC_Start_IT+0x290>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d009      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a1e      	ldr	r2, [pc, #120]	; (800ee98 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d004      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0x242>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a15      	ldr	r2, [pc, #84]	; (800ee80 <HAL_TIM_OC_Start_IT+0x294>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d115      	bne.n	800ee5a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	4b19      	ldr	r3, [pc, #100]	; (800ee9c <HAL_TIM_OC_Start_IT+0x2b0>)
 800ee36:	4013      	ands	r3, r2
 800ee38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	2b06      	cmp	r3, #6
 800ee3e:	d015      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x280>
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee46:	d011      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f042 0201 	orr.w	r2, r2, #1
 800ee56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee58:	e008      	b.n	800ee6c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f042 0201 	orr.w	r2, r2, #1
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	e000      	b.n	800ee6e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee6c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	40010000 	.word	0x40010000
 800ee7c:	40010400 	.word	0x40010400
 800ee80:	40014000 	.word	0x40014000
 800ee84:	40014400 	.word	0x40014400
 800ee88:	40014800 	.word	0x40014800
 800ee8c:	40000400 	.word	0x40000400
 800ee90:	40000800 	.word	0x40000800
 800ee94:	40000c00 	.word	0x40000c00
 800ee98:	40001800 	.word	0x40001800
 800ee9c:	00010007 	.word	0x00010007

0800eea0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b0c      	cmp	r3, #12
 800eeb2:	d841      	bhi.n	800ef38 <HAL_TIM_OC_Stop_IT+0x98>
 800eeb4:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <HAL_TIM_OC_Stop_IT+0x1c>)
 800eeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeba:	bf00      	nop
 800eebc:	0800eef1 	.word	0x0800eef1
 800eec0:	0800ef39 	.word	0x0800ef39
 800eec4:	0800ef39 	.word	0x0800ef39
 800eec8:	0800ef39 	.word	0x0800ef39
 800eecc:	0800ef03 	.word	0x0800ef03
 800eed0:	0800ef39 	.word	0x0800ef39
 800eed4:	0800ef39 	.word	0x0800ef39
 800eed8:	0800ef39 	.word	0x0800ef39
 800eedc:	0800ef15 	.word	0x0800ef15
 800eee0:	0800ef39 	.word	0x0800ef39
 800eee4:	0800ef39 	.word	0x0800ef39
 800eee8:	0800ef39 	.word	0x0800ef39
 800eeec:	0800ef27 	.word	0x0800ef27
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68da      	ldr	r2, [r3, #12]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f022 0202 	bic.w	r2, r2, #2
 800eefe:	60da      	str	r2, [r3, #12]
      break;
 800ef00:	e01d      	b.n	800ef3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f022 0204 	bic.w	r2, r2, #4
 800ef10:	60da      	str	r2, [r3, #12]
      break;
 800ef12:	e014      	b.n	800ef3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68da      	ldr	r2, [r3, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f022 0208 	bic.w	r2, r2, #8
 800ef22:	60da      	str	r2, [r3, #12]
      break;
 800ef24:	e00b      	b.n	800ef3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68da      	ldr	r2, [r3, #12]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f022 0210 	bic.w	r2, r2, #16
 800ef34:	60da      	str	r2, [r3, #12]
      break;
 800ef36:	e002      	b.n	800ef3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef3c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 8081 	bne.w	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f001 f836 	bl	800ffc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a3e      	ldr	r2, [pc, #248]	; (800f054 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d013      	beq.n	800ef86 <HAL_TIM_OC_Stop_IT+0xe6>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a3d      	ldr	r2, [pc, #244]	; (800f058 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d00e      	beq.n	800ef86 <HAL_TIM_OC_Stop_IT+0xe6>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a3b      	ldr	r2, [pc, #236]	; (800f05c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d009      	beq.n	800ef86 <HAL_TIM_OC_Stop_IT+0xe6>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a3a      	ldr	r2, [pc, #232]	; (800f060 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d004      	beq.n	800ef86 <HAL_TIM_OC_Stop_IT+0xe6>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a38      	ldr	r2, [pc, #224]	; (800f064 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d101      	bne.n	800ef8a <HAL_TIM_OC_Stop_IT+0xea>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e000      	b.n	800ef8c <HAL_TIM_OC_Stop_IT+0xec>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d017      	beq.n	800efc0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	6a1a      	ldr	r2, [r3, #32]
 800ef96:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10f      	bne.n	800efc0 <HAL_TIM_OC_Stop_IT+0x120>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6a1a      	ldr	r2, [r3, #32]
 800efa6:	f240 4344 	movw	r3, #1092	; 0x444
 800efaa:	4013      	ands	r3, r2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d107      	bne.n	800efc0 <HAL_TIM_OC_Stop_IT+0x120>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800efbe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6a1a      	ldr	r2, [r3, #32]
 800efc6:	f241 1311 	movw	r3, #4369	; 0x1111
 800efca:	4013      	ands	r3, r2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10f      	bne.n	800eff0 <HAL_TIM_OC_Stop_IT+0x150>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6a1a      	ldr	r2, [r3, #32]
 800efd6:	f240 4344 	movw	r3, #1092	; 0x444
 800efda:	4013      	ands	r3, r2
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d107      	bne.n	800eff0 <HAL_TIM_OC_Stop_IT+0x150>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f022 0201 	bic.w	r2, r2, #1
 800efee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d104      	bne.n	800f000 <HAL_TIM_OC_Stop_IT+0x160>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2201      	movs	r2, #1
 800effa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800effe:	e023      	b.n	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b04      	cmp	r3, #4
 800f004:	d104      	bne.n	800f010 <HAL_TIM_OC_Stop_IT+0x170>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f00e:	e01b      	b.n	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b08      	cmp	r3, #8
 800f014:	d104      	bne.n	800f020 <HAL_TIM_OC_Stop_IT+0x180>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f01e:	e013      	b.n	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2b0c      	cmp	r3, #12
 800f024:	d104      	bne.n	800f030 <HAL_TIM_OC_Stop_IT+0x190>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f02e:	e00b      	b.n	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2b10      	cmp	r3, #16
 800f034:	d104      	bne.n	800f040 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f03e:	e003      	b.n	800f048 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f048:	7bfb      	ldrb	r3, [r7, #15]
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	40010000 	.word	0x40010000
 800f058:	40010400 	.word	0x40010400
 800f05c:	40014000 	.word	0x40014000
 800f060:	40014400 	.word	0x40014400
 800f064:	40014800 	.word	0x40014800

0800f068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	e049      	b.n	800f10e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b00      	cmp	r3, #0
 800f084:	d106      	bne.n	800f094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f841 	bl	800f116 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2202      	movs	r2, #2
 800f098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f000 fb70 	bl	800f78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f116:	b480      	push	{r7}
 800f118:	b083      	sub	sp, #12
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f11e:	bf00      	nop
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	f003 0302 	and.w	r3, r3, #2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d020      	beq.n	800f18e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f003 0302 	and.w	r3, r3, #2
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01b      	beq.n	800f18e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f06f 0202 	mvn.w	r2, #2
 800f15e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	699b      	ldr	r3, [r3, #24]
 800f16c:	f003 0303 	and.w	r3, r3, #3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 faeb 	bl	800f750 <HAL_TIM_IC_CaptureCallback>
 800f17a:	e005      	b.n	800f188 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7f2 f92d 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 faee 	bl	800f764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b00      	cmp	r3, #0
 800f196:	d020      	beq.n	800f1da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f003 0304 	and.w	r3, r3, #4
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d01b      	beq.n	800f1da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f06f 0204 	mvn.w	r2, #4
 800f1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2202      	movs	r2, #2
 800f1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	699b      	ldr	r3, [r3, #24]
 800f1b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d003      	beq.n	800f1c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fac5 	bl	800f750 <HAL_TIM_IC_CaptureCallback>
 800f1c6:	e005      	b.n	800f1d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7f2 f907 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fac8 	bl	800f764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f003 0308 	and.w	r3, r3, #8
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d020      	beq.n	800f226 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f003 0308 	and.w	r3, r3, #8
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d01b      	beq.n	800f226 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f06f 0208 	mvn.w	r2, #8
 800f1f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2204      	movs	r2, #4
 800f1fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	69db      	ldr	r3, [r3, #28]
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d003      	beq.n	800f214 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fa9f 	bl	800f750 <HAL_TIM_IC_CaptureCallback>
 800f212:	e005      	b.n	800f220 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7f2 f8e1 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 faa2 	bl	800f764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	f003 0310 	and.w	r3, r3, #16
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d020      	beq.n	800f272 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f003 0310 	and.w	r3, r3, #16
 800f236:	2b00      	cmp	r3, #0
 800f238:	d01b      	beq.n	800f272 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f06f 0210 	mvn.w	r2, #16
 800f242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2208      	movs	r2, #8
 800f248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69db      	ldr	r3, [r3, #28]
 800f250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f254:	2b00      	cmp	r3, #0
 800f256:	d003      	beq.n	800f260 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fa79 	bl	800f750 <HAL_TIM_IC_CaptureCallback>
 800f25e:	e005      	b.n	800f26c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7f2 f8bb 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fa7c 	bl	800f764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00c      	beq.n	800f296 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d007      	beq.n	800f296 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f06f 0201 	mvn.w	r2, #1
 800f28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7f2 ff01 	bl	8002098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d104      	bne.n	800f2aa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00c      	beq.n	800f2c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d007      	beq.n	800f2c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 ffba 	bl	8010238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d007      	beq.n	800f2e8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 ffb2 	bl	801024c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00c      	beq.n	800f30c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d007      	beq.n	800f30c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fa36 	bl	800f778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	f003 0320 	and.w	r3, r3, #32
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00c      	beq.n	800f330 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f003 0320 	and.w	r3, r3, #32
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f06f 0220 	mvn.w	r2, #32
 800f328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 ff7a 	bl	8010224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f330:	bf00      	nop
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d101      	bne.n	800f356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f352:	2302      	movs	r3, #2
 800f354:	e0ff      	b.n	800f556 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2b14      	cmp	r3, #20
 800f362:	f200 80f0 	bhi.w	800f546 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f366:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36c:	0800f3c1 	.word	0x0800f3c1
 800f370:	0800f547 	.word	0x0800f547
 800f374:	0800f547 	.word	0x0800f547
 800f378:	0800f547 	.word	0x0800f547
 800f37c:	0800f401 	.word	0x0800f401
 800f380:	0800f547 	.word	0x0800f547
 800f384:	0800f547 	.word	0x0800f547
 800f388:	0800f547 	.word	0x0800f547
 800f38c:	0800f443 	.word	0x0800f443
 800f390:	0800f547 	.word	0x0800f547
 800f394:	0800f547 	.word	0x0800f547
 800f398:	0800f547 	.word	0x0800f547
 800f39c:	0800f483 	.word	0x0800f483
 800f3a0:	0800f547 	.word	0x0800f547
 800f3a4:	0800f547 	.word	0x0800f547
 800f3a8:	0800f547 	.word	0x0800f547
 800f3ac:	0800f4c5 	.word	0x0800f4c5
 800f3b0:	0800f547 	.word	0x0800f547
 800f3b4:	0800f547 	.word	0x0800f547
 800f3b8:	0800f547 	.word	0x0800f547
 800f3bc:	0800f505 	.word	0x0800f505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fa86 	bl	800f8d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	699a      	ldr	r2, [r3, #24]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f042 0208 	orr.w	r2, r2, #8
 800f3da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	699a      	ldr	r2, [r3, #24]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f022 0204 	bic.w	r2, r2, #4
 800f3ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6999      	ldr	r1, [r3, #24]
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	691a      	ldr	r2, [r3, #16]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	619a      	str	r2, [r3, #24]
      break;
 800f3fe:	e0a5      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 faf6 	bl	800f9f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	699a      	ldr	r2, [r3, #24]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f41a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	699a      	ldr	r2, [r3, #24]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f42a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6999      	ldr	r1, [r3, #24]
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	021a      	lsls	r2, r3, #8
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	430a      	orrs	r2, r1
 800f43e:	619a      	str	r2, [r3, #24]
      break;
 800f440:	e084      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	4618      	mov	r0, r3
 800f44a:	f000 fb5f 	bl	800fb0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	69da      	ldr	r2, [r3, #28]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f042 0208 	orr.w	r2, r2, #8
 800f45c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	69da      	ldr	r2, [r3, #28]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0204 	bic.w	r2, r2, #4
 800f46c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	69d9      	ldr	r1, [r3, #28]
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	691a      	ldr	r2, [r3, #16]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	430a      	orrs	r2, r1
 800f47e:	61da      	str	r2, [r3, #28]
      break;
 800f480:	e064      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68b9      	ldr	r1, [r7, #8]
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fbc7 	bl	800fc1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	69da      	ldr	r2, [r3, #28]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f49c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	69da      	ldr	r2, [r3, #28]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	69d9      	ldr	r1, [r3, #28]
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	021a      	lsls	r2, r3, #8
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	430a      	orrs	r2, r1
 800f4c0:	61da      	str	r2, [r3, #28]
      break;
 800f4c2:	e043      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68b9      	ldr	r1, [r7, #8]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f000 fc10 	bl	800fcf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f042 0208 	orr.w	r2, r2, #8
 800f4de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f022 0204 	bic.w	r2, r2, #4
 800f4ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	691a      	ldr	r2, [r3, #16]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	430a      	orrs	r2, r1
 800f500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f502:	e023      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	68b9      	ldr	r1, [r7, #8]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 fc54 	bl	800fdb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f51e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f52e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	021a      	lsls	r2, r3, #8
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	430a      	orrs	r2, r1
 800f542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f544:	e002      	b.n	800f54c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	75fb      	strb	r3, [r7, #23]
      break;
 800f54a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f554:	7dfb      	ldrb	r3, [r7, #23]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop

0800f560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f574:	2b01      	cmp	r3, #1
 800f576:	d101      	bne.n	800f57c <HAL_TIM_ConfigClockSource+0x1c>
 800f578:	2302      	movs	r3, #2
 800f57a:	e0dc      	b.n	800f736 <HAL_TIM_ConfigClockSource+0x1d6>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2202      	movs	r2, #2
 800f588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	4b6a      	ldr	r3, [pc, #424]	; (800f740 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f598:	4013      	ands	r3, r2
 800f59a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f5a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a64      	ldr	r2, [pc, #400]	; (800f744 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	f000 80a9 	beq.w	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5b8:	4a62      	ldr	r2, [pc, #392]	; (800f744 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	f200 80ae 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f5c0:	4a61      	ldr	r2, [pc, #388]	; (800f748 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	f000 80a1 	beq.w	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5c8:	4a5f      	ldr	r2, [pc, #380]	; (800f748 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	f200 80a6 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f5d0:	4a5e      	ldr	r2, [pc, #376]	; (800f74c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	f000 8099 	beq.w	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5d8:	4a5c      	ldr	r2, [pc, #368]	; (800f74c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	f200 809e 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f5e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f5e4:	f000 8091 	beq.w	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f5ec:	f200 8096 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f5f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f4:	f000 8089 	beq.w	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5fc:	f200 808e 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f604:	d03e      	beq.n	800f684 <HAL_TIM_ConfigClockSource+0x124>
 800f606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f60a:	f200 8087 	bhi.w	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f612:	f000 8086 	beq.w	800f722 <HAL_TIM_ConfigClockSource+0x1c2>
 800f616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f61a:	d87f      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f61c:	2b70      	cmp	r3, #112	; 0x70
 800f61e:	d01a      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0xf6>
 800f620:	2b70      	cmp	r3, #112	; 0x70
 800f622:	d87b      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f624:	2b60      	cmp	r3, #96	; 0x60
 800f626:	d050      	beq.n	800f6ca <HAL_TIM_ConfigClockSource+0x16a>
 800f628:	2b60      	cmp	r3, #96	; 0x60
 800f62a:	d877      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f62c:	2b50      	cmp	r3, #80	; 0x50
 800f62e:	d03c      	beq.n	800f6aa <HAL_TIM_ConfigClockSource+0x14a>
 800f630:	2b50      	cmp	r3, #80	; 0x50
 800f632:	d873      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f634:	2b40      	cmp	r3, #64	; 0x40
 800f636:	d058      	beq.n	800f6ea <HAL_TIM_ConfigClockSource+0x18a>
 800f638:	2b40      	cmp	r3, #64	; 0x40
 800f63a:	d86f      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f63c:	2b30      	cmp	r3, #48	; 0x30
 800f63e:	d064      	beq.n	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f640:	2b30      	cmp	r3, #48	; 0x30
 800f642:	d86b      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f644:	2b20      	cmp	r3, #32
 800f646:	d060      	beq.n	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f648:	2b20      	cmp	r3, #32
 800f64a:	d867      	bhi.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d05c      	beq.n	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f650:	2b10      	cmp	r3, #16
 800f652:	d05a      	beq.n	800f70a <HAL_TIM_ConfigClockSource+0x1aa>
 800f654:	e062      	b.n	800f71c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6818      	ldr	r0, [r3, #0]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	6899      	ldr	r1, [r3, #8]
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	685a      	ldr	r2, [r3, #4]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f000 fc8b 	bl	800ff80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	609a      	str	r2, [r3, #8]
      break;
 800f682:	e04f      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6818      	ldr	r0, [r3, #0]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	6899      	ldr	r1, [r3, #8]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	f000 fc74 	bl	800ff80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	689a      	ldr	r2, [r3, #8]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f6a6:	609a      	str	r2, [r3, #8]
      break;
 800f6a8:	e03c      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6818      	ldr	r0, [r3, #0]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	6859      	ldr	r1, [r3, #4]
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f000 fbe4 	bl	800fe84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2150      	movs	r1, #80	; 0x50
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f000 fc3e 	bl	800ff44 <TIM_ITRx_SetConfig>
      break;
 800f6c8:	e02c      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6818      	ldr	r0, [r3, #0]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	6859      	ldr	r1, [r3, #4]
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	f000 fc03 	bl	800fee2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2160      	movs	r1, #96	; 0x60
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 fc2e 	bl	800ff44 <TIM_ITRx_SetConfig>
      break;
 800f6e8:	e01c      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	6859      	ldr	r1, [r3, #4]
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	f000 fbc4 	bl	800fe84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2140      	movs	r1, #64	; 0x40
 800f702:	4618      	mov	r0, r3
 800f704:	f000 fc1e 	bl	800ff44 <TIM_ITRx_SetConfig>
      break;
 800f708:	e00c      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4619      	mov	r1, r3
 800f714:	4610      	mov	r0, r2
 800f716:	f000 fc15 	bl	800ff44 <TIM_ITRx_SetConfig>
      break;
 800f71a:	e003      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f71c:	2301      	movs	r3, #1
 800f71e:	73fb      	strb	r3, [r7, #15]
      break;
 800f720:	e000      	b.n	800f724 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f734:	7bfb      	ldrb	r3, [r7, #15]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	ffceff88 	.word	0xffceff88
 800f744:	00100040 	.word	0x00100040
 800f748:	00100030 	.word	0x00100030
 800f74c:	00100020 	.word	0x00100020

0800f750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f76c:	bf00      	nop
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a46      	ldr	r2, [pc, #280]	; (800f8b8 <TIM_Base_SetConfig+0x12c>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d013      	beq.n	800f7cc <TIM_Base_SetConfig+0x40>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7aa:	d00f      	beq.n	800f7cc <TIM_Base_SetConfig+0x40>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a43      	ldr	r2, [pc, #268]	; (800f8bc <TIM_Base_SetConfig+0x130>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d00b      	beq.n	800f7cc <TIM_Base_SetConfig+0x40>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a42      	ldr	r2, [pc, #264]	; (800f8c0 <TIM_Base_SetConfig+0x134>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d007      	beq.n	800f7cc <TIM_Base_SetConfig+0x40>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a41      	ldr	r2, [pc, #260]	; (800f8c4 <TIM_Base_SetConfig+0x138>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d003      	beq.n	800f7cc <TIM_Base_SetConfig+0x40>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a40      	ldr	r2, [pc, #256]	; (800f8c8 <TIM_Base_SetConfig+0x13c>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d108      	bne.n	800f7de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a35      	ldr	r2, [pc, #212]	; (800f8b8 <TIM_Base_SetConfig+0x12c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d01f      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ec:	d01b      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a32      	ldr	r2, [pc, #200]	; (800f8bc <TIM_Base_SetConfig+0x130>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d017      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a31      	ldr	r2, [pc, #196]	; (800f8c0 <TIM_Base_SetConfig+0x134>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d013      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a30      	ldr	r2, [pc, #192]	; (800f8c4 <TIM_Base_SetConfig+0x138>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d00f      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a2f      	ldr	r2, [pc, #188]	; (800f8c8 <TIM_Base_SetConfig+0x13c>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d00b      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a2e      	ldr	r2, [pc, #184]	; (800f8cc <TIM_Base_SetConfig+0x140>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d007      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a2d      	ldr	r2, [pc, #180]	; (800f8d0 <TIM_Base_SetConfig+0x144>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d003      	beq.n	800f826 <TIM_Base_SetConfig+0x9a>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a2c      	ldr	r2, [pc, #176]	; (800f8d4 <TIM_Base_SetConfig+0x148>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d108      	bne.n	800f838 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4313      	orrs	r3, r2
 800f836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	695b      	ldr	r3, [r3, #20]
 800f842:	4313      	orrs	r3, r2
 800f844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	689a      	ldr	r2, [r3, #8]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a16      	ldr	r2, [pc, #88]	; (800f8b8 <TIM_Base_SetConfig+0x12c>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d00f      	beq.n	800f884 <TIM_Base_SetConfig+0xf8>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a18      	ldr	r2, [pc, #96]	; (800f8c8 <TIM_Base_SetConfig+0x13c>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00b      	beq.n	800f884 <TIM_Base_SetConfig+0xf8>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a17      	ldr	r2, [pc, #92]	; (800f8cc <TIM_Base_SetConfig+0x140>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d007      	beq.n	800f884 <TIM_Base_SetConfig+0xf8>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a16      	ldr	r2, [pc, #88]	; (800f8d0 <TIM_Base_SetConfig+0x144>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d003      	beq.n	800f884 <TIM_Base_SetConfig+0xf8>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a15      	ldr	r2, [pc, #84]	; (800f8d4 <TIM_Base_SetConfig+0x148>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d103      	bne.n	800f88c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	691a      	ldr	r2, [r3, #16]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d105      	bne.n	800f8aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	f023 0201 	bic.w	r2, r3, #1
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	611a      	str	r2, [r3, #16]
  }
}
 800f8aa:	bf00      	nop
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	40010000 	.word	0x40010000
 800f8bc:	40000400 	.word	0x40000400
 800f8c0:	40000800 	.word	0x40000800
 800f8c4:	40000c00 	.word	0x40000c00
 800f8c8:	40010400 	.word	0x40010400
 800f8cc:	40014000 	.word	0x40014000
 800f8d0:	40014400 	.word	0x40014400
 800f8d4:	40014800 	.word	0x40014800

0800f8d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a1b      	ldr	r3, [r3, #32]
 800f8ec:	f023 0201 	bic.w	r2, r3, #1
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	4b37      	ldr	r3, [pc, #220]	; (800f9e0 <TIM_OC1_SetConfig+0x108>)
 800f904:	4013      	ands	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f023 0303 	bic.w	r3, r3, #3
 800f90e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4313      	orrs	r3, r2
 800f918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f023 0302 	bic.w	r3, r3, #2
 800f920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	4313      	orrs	r3, r2
 800f92a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a2d      	ldr	r2, [pc, #180]	; (800f9e4 <TIM_OC1_SetConfig+0x10c>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d00f      	beq.n	800f954 <TIM_OC1_SetConfig+0x7c>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a2c      	ldr	r2, [pc, #176]	; (800f9e8 <TIM_OC1_SetConfig+0x110>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d00b      	beq.n	800f954 <TIM_OC1_SetConfig+0x7c>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a2b      	ldr	r2, [pc, #172]	; (800f9ec <TIM_OC1_SetConfig+0x114>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d007      	beq.n	800f954 <TIM_OC1_SetConfig+0x7c>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a2a      	ldr	r2, [pc, #168]	; (800f9f0 <TIM_OC1_SetConfig+0x118>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d003      	beq.n	800f954 <TIM_OC1_SetConfig+0x7c>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a29      	ldr	r2, [pc, #164]	; (800f9f4 <TIM_OC1_SetConfig+0x11c>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d10c      	bne.n	800f96e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f023 0308 	bic.w	r3, r3, #8
 800f95a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	4313      	orrs	r3, r2
 800f964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f023 0304 	bic.w	r3, r3, #4
 800f96c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a1c      	ldr	r2, [pc, #112]	; (800f9e4 <TIM_OC1_SetConfig+0x10c>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d00f      	beq.n	800f996 <TIM_OC1_SetConfig+0xbe>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a1b      	ldr	r2, [pc, #108]	; (800f9e8 <TIM_OC1_SetConfig+0x110>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d00b      	beq.n	800f996 <TIM_OC1_SetConfig+0xbe>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a1a      	ldr	r2, [pc, #104]	; (800f9ec <TIM_OC1_SetConfig+0x114>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d007      	beq.n	800f996 <TIM_OC1_SetConfig+0xbe>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a19      	ldr	r2, [pc, #100]	; (800f9f0 <TIM_OC1_SetConfig+0x118>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d003      	beq.n	800f996 <TIM_OC1_SetConfig+0xbe>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a18      	ldr	r2, [pc, #96]	; (800f9f4 <TIM_OC1_SetConfig+0x11c>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d111      	bne.n	800f9ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f99c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	693a      	ldr	r2, [r7, #16]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	693a      	ldr	r2, [r7, #16]
 800f9b6:	4313      	orrs	r3, r2
 800f9b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	621a      	str	r2, [r3, #32]
}
 800f9d4:	bf00      	nop
 800f9d6:	371c      	adds	r7, #28
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	fffeff8f 	.word	0xfffeff8f
 800f9e4:	40010000 	.word	0x40010000
 800f9e8:	40010400 	.word	0x40010400
 800f9ec:	40014000 	.word	0x40014000
 800f9f0:	40014400 	.word	0x40014400
 800f9f4:	40014800 	.word	0x40014800

0800f9f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a1b      	ldr	r3, [r3, #32]
 800fa0c:	f023 0210 	bic.w	r2, r3, #16
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	699b      	ldr	r3, [r3, #24]
 800fa1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	4b34      	ldr	r3, [pc, #208]	; (800faf4 <TIM_OC2_SetConfig+0xfc>)
 800fa24:	4013      	ands	r3, r2
 800fa26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	f023 0320 	bic.w	r3, r3, #32
 800fa42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	011b      	lsls	r3, r3, #4
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a29      	ldr	r2, [pc, #164]	; (800faf8 <TIM_OC2_SetConfig+0x100>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d003      	beq.n	800fa60 <TIM_OC2_SetConfig+0x68>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a28      	ldr	r2, [pc, #160]	; (800fafc <TIM_OC2_SetConfig+0x104>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d10d      	bne.n	800fa7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	011b      	lsls	r3, r3, #4
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a1e      	ldr	r2, [pc, #120]	; (800faf8 <TIM_OC2_SetConfig+0x100>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d00f      	beq.n	800faa4 <TIM_OC2_SetConfig+0xac>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a1d      	ldr	r2, [pc, #116]	; (800fafc <TIM_OC2_SetConfig+0x104>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d00b      	beq.n	800faa4 <TIM_OC2_SetConfig+0xac>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a1c      	ldr	r2, [pc, #112]	; (800fb00 <TIM_OC2_SetConfig+0x108>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d007      	beq.n	800faa4 <TIM_OC2_SetConfig+0xac>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a1b      	ldr	r2, [pc, #108]	; (800fb04 <TIM_OC2_SetConfig+0x10c>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d003      	beq.n	800faa4 <TIM_OC2_SetConfig+0xac>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a1a      	ldr	r2, [pc, #104]	; (800fb08 <TIM_OC2_SetConfig+0x110>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d113      	bne.n	800facc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800faaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	695b      	ldr	r3, [r3, #20]
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	693a      	ldr	r2, [r7, #16]
 800fac8:	4313      	orrs	r3, r2
 800faca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	621a      	str	r2, [r3, #32]
}
 800fae6:	bf00      	nop
 800fae8:	371c      	adds	r7, #28
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	feff8fff 	.word	0xfeff8fff
 800faf8:	40010000 	.word	0x40010000
 800fafc:	40010400 	.word	0x40010400
 800fb00:	40014000 	.word	0x40014000
 800fb04:	40014400 	.word	0x40014400
 800fb08:	40014800 	.word	0x40014800

0800fb0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b087      	sub	sp, #28
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	69db      	ldr	r3, [r3, #28]
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	4b33      	ldr	r3, [pc, #204]	; (800fc04 <TIM_OC3_SetConfig+0xf8>)
 800fb38:	4013      	ands	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f023 0303 	bic.w	r3, r3, #3
 800fb42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	021b      	lsls	r3, r3, #8
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a28      	ldr	r2, [pc, #160]	; (800fc08 <TIM_OC3_SetConfig+0xfc>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d003      	beq.n	800fb72 <TIM_OC3_SetConfig+0x66>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a27      	ldr	r2, [pc, #156]	; (800fc0c <TIM_OC3_SetConfig+0x100>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d10d      	bne.n	800fb8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	021b      	lsls	r3, r3, #8
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4a1d      	ldr	r2, [pc, #116]	; (800fc08 <TIM_OC3_SetConfig+0xfc>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d00f      	beq.n	800fbb6 <TIM_OC3_SetConfig+0xaa>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4a1c      	ldr	r2, [pc, #112]	; (800fc0c <TIM_OC3_SetConfig+0x100>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d00b      	beq.n	800fbb6 <TIM_OC3_SetConfig+0xaa>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4a1b      	ldr	r2, [pc, #108]	; (800fc10 <TIM_OC3_SetConfig+0x104>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d007      	beq.n	800fbb6 <TIM_OC3_SetConfig+0xaa>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4a1a      	ldr	r2, [pc, #104]	; (800fc14 <TIM_OC3_SetConfig+0x108>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d003      	beq.n	800fbb6 <TIM_OC3_SetConfig+0xaa>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4a19      	ldr	r2, [pc, #100]	; (800fc18 <TIM_OC3_SetConfig+0x10c>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d113      	bne.n	800fbde <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	695b      	ldr	r3, [r3, #20]
 800fbca:	011b      	lsls	r3, r3, #4
 800fbcc:	693a      	ldr	r2, [r7, #16]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	011b      	lsls	r3, r3, #4
 800fbd8:	693a      	ldr	r2, [r7, #16]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	621a      	str	r2, [r3, #32]
}
 800fbf8:	bf00      	nop
 800fbfa:	371c      	adds	r7, #28
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr
 800fc04:	fffeff8f 	.word	0xfffeff8f
 800fc08:	40010000 	.word	0x40010000
 800fc0c:	40010400 	.word	0x40010400
 800fc10:	40014000 	.word	0x40014000
 800fc14:	40014400 	.word	0x40014400
 800fc18:	40014800 	.word	0x40014800

0800fc1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b087      	sub	sp, #28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a1b      	ldr	r3, [r3, #32]
 800fc30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	4b24      	ldr	r3, [pc, #144]	; (800fcd8 <TIM_OC4_SetConfig+0xbc>)
 800fc48:	4013      	ands	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	021b      	lsls	r3, r3, #8
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	031b      	lsls	r3, r3, #12
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	4a19      	ldr	r2, [pc, #100]	; (800fcdc <TIM_OC4_SetConfig+0xc0>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d00f      	beq.n	800fc9c <TIM_OC4_SetConfig+0x80>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4a18      	ldr	r2, [pc, #96]	; (800fce0 <TIM_OC4_SetConfig+0xc4>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d00b      	beq.n	800fc9c <TIM_OC4_SetConfig+0x80>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a17      	ldr	r2, [pc, #92]	; (800fce4 <TIM_OC4_SetConfig+0xc8>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d007      	beq.n	800fc9c <TIM_OC4_SetConfig+0x80>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4a16      	ldr	r2, [pc, #88]	; (800fce8 <TIM_OC4_SetConfig+0xcc>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d003      	beq.n	800fc9c <TIM_OC4_SetConfig+0x80>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a15      	ldr	r2, [pc, #84]	; (800fcec <TIM_OC4_SetConfig+0xd0>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d109      	bne.n	800fcb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	019b      	lsls	r3, r3, #6
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	697a      	ldr	r2, [r7, #20]
 800fcb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	685a      	ldr	r2, [r3, #4]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	693a      	ldr	r2, [r7, #16]
 800fcc8:	621a      	str	r2, [r3, #32]
}
 800fcca:	bf00      	nop
 800fccc:	371c      	adds	r7, #28
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	feff8fff 	.word	0xfeff8fff
 800fcdc:	40010000 	.word	0x40010000
 800fce0:	40010400 	.word	0x40010400
 800fce4:	40014000 	.word	0x40014000
 800fce8:	40014400 	.word	0x40014400
 800fcec:	40014800 	.word	0x40014800

0800fcf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	4b21      	ldr	r3, [pc, #132]	; (800fda0 <TIM_OC5_SetConfig+0xb0>)
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fd30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	041b      	lsls	r3, r3, #16
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a18      	ldr	r2, [pc, #96]	; (800fda4 <TIM_OC5_SetConfig+0xb4>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d00f      	beq.n	800fd66 <TIM_OC5_SetConfig+0x76>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a17      	ldr	r2, [pc, #92]	; (800fda8 <TIM_OC5_SetConfig+0xb8>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d00b      	beq.n	800fd66 <TIM_OC5_SetConfig+0x76>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a16      	ldr	r2, [pc, #88]	; (800fdac <TIM_OC5_SetConfig+0xbc>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d007      	beq.n	800fd66 <TIM_OC5_SetConfig+0x76>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a15      	ldr	r2, [pc, #84]	; (800fdb0 <TIM_OC5_SetConfig+0xc0>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d003      	beq.n	800fd66 <TIM_OC5_SetConfig+0x76>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a14      	ldr	r2, [pc, #80]	; (800fdb4 <TIM_OC5_SetConfig+0xc4>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d109      	bne.n	800fd7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	021b      	lsls	r3, r3, #8
 800fd74:	697a      	ldr	r2, [r7, #20]
 800fd76:	4313      	orrs	r3, r2
 800fd78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	685a      	ldr	r2, [r3, #4]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	693a      	ldr	r2, [r7, #16]
 800fd92:	621a      	str	r2, [r3, #32]
}
 800fd94:	bf00      	nop
 800fd96:	371c      	adds	r7, #28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	fffeff8f 	.word	0xfffeff8f
 800fda4:	40010000 	.word	0x40010000
 800fda8:	40010400 	.word	0x40010400
 800fdac:	40014000 	.word	0x40014000
 800fdb0:	40014400 	.word	0x40014400
 800fdb4:	40014800 	.word	0x40014800

0800fdb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a1b      	ldr	r3, [r3, #32]
 800fdc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	4b22      	ldr	r3, [pc, #136]	; (800fe6c <TIM_OC6_SetConfig+0xb4>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	021b      	lsls	r3, r3, #8
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fdfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	051b      	lsls	r3, r3, #20
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	4a19      	ldr	r2, [pc, #100]	; (800fe70 <TIM_OC6_SetConfig+0xb8>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d00f      	beq.n	800fe30 <TIM_OC6_SetConfig+0x78>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4a18      	ldr	r2, [pc, #96]	; (800fe74 <TIM_OC6_SetConfig+0xbc>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d00b      	beq.n	800fe30 <TIM_OC6_SetConfig+0x78>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4a17      	ldr	r2, [pc, #92]	; (800fe78 <TIM_OC6_SetConfig+0xc0>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d007      	beq.n	800fe30 <TIM_OC6_SetConfig+0x78>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a16      	ldr	r2, [pc, #88]	; (800fe7c <TIM_OC6_SetConfig+0xc4>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d003      	beq.n	800fe30 <TIM_OC6_SetConfig+0x78>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4a15      	ldr	r2, [pc, #84]	; (800fe80 <TIM_OC6_SetConfig+0xc8>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d109      	bne.n	800fe44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fe36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	695b      	ldr	r3, [r3, #20]
 800fe3c:	029b      	lsls	r3, r3, #10
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	4313      	orrs	r3, r2
 800fe42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	697a      	ldr	r2, [r7, #20]
 800fe48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	621a      	str	r2, [r3, #32]
}
 800fe5e:	bf00      	nop
 800fe60:	371c      	adds	r7, #28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	feff8fff 	.word	0xfeff8fff
 800fe70:	40010000 	.word	0x40010000
 800fe74:	40010400 	.word	0x40010400
 800fe78:	40014000 	.word	0x40014000
 800fe7c:	40014400 	.word	0x40014400
 800fe80:	40014800 	.word	0x40014800

0800fe84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b087      	sub	sp, #28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6a1b      	ldr	r3, [r3, #32]
 800fe94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	f023 0201 	bic.w	r2, r3, #1
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	699b      	ldr	r3, [r3, #24]
 800fea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800feae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	011b      	lsls	r3, r3, #4
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	f023 030a 	bic.w	r3, r3, #10
 800fec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	693a      	ldr	r2, [r7, #16]
 800fece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	697a      	ldr	r2, [r7, #20]
 800fed4:	621a      	str	r2, [r3, #32]
}
 800fed6:	bf00      	nop
 800fed8:	371c      	adds	r7, #28
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr

0800fee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fee2:	b480      	push	{r7}
 800fee4:	b087      	sub	sp, #28
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	60f8      	str	r0, [r7, #12]
 800feea:	60b9      	str	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	f023 0210 	bic.w	r2, r3, #16
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	699b      	ldr	r3, [r3, #24]
 800ff04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	031b      	lsls	r3, r3, #12
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ff1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	011b      	lsls	r3, r3, #4
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	693a      	ldr	r2, [r7, #16]
 800ff2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	621a      	str	r2, [r3, #32]
}
 800ff36:	bf00      	nop
 800ff38:	371c      	adds	r7, #28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
	...

0800ff44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <TIM_ITRx_SetConfig+0x38>)
 800ff58:	4013      	ands	r3, r2
 800ff5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	4313      	orrs	r3, r2
 800ff62:	f043 0307 	orr.w	r3, r3, #7
 800ff66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	609a      	str	r2, [r3, #8]
}
 800ff6e:	bf00      	nop
 800ff70:	3714      	adds	r7, #20
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	ffcfff8f 	.word	0xffcfff8f

0800ff80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b087      	sub	sp, #28
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	021a      	lsls	r2, r3, #8
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	431a      	orrs	r2, r3
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	609a      	str	r2, [r3, #8]
}
 800ffb4:	bf00      	nop
 800ffb6:	371c      	adds	r7, #28
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	f003 031f 	and.w	r3, r3, #31
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6a1a      	ldr	r2, [r3, #32]
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	43db      	mvns	r3, r3
 800ffe2:	401a      	ands	r2, r3
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6a1a      	ldr	r2, [r3, #32]
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	f003 031f 	and.w	r3, r3, #31
 800fff2:	6879      	ldr	r1, [r7, #4]
 800fff4:	fa01 f303 	lsl.w	r3, r1, r3
 800fff8:	431a      	orrs	r2, r3
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	621a      	str	r2, [r3, #32]
}
 800fffe:	bf00      	nop
 8010000:	371c      	adds	r7, #28
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
	...

0801000c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801001c:	2b01      	cmp	r3, #1
 801001e:	d101      	bne.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010020:	2302      	movs	r3, #2
 8010022:	e06d      	b.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2202      	movs	r2, #2
 8010030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	689b      	ldr	r3, [r3, #8]
 8010042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a30      	ldr	r2, [pc, #192]	; (801010c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d004      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a2f      	ldr	r2, [pc, #188]	; (8010110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d108      	bne.n	801006a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801005e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	4313      	orrs	r3, r2
 8010068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	4313      	orrs	r3, r2
 801007a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a20      	ldr	r2, [pc, #128]	; (801010c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d022      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010096:	d01d      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a1d      	ldr	r2, [pc, #116]	; (8010114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d018      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a1c      	ldr	r2, [pc, #112]	; (8010118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d013      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a1a      	ldr	r2, [pc, #104]	; (801011c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d00e      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a15      	ldr	r2, [pc, #84]	; (8010110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d009      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4a16      	ldr	r2, [pc, #88]	; (8010120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d004      	beq.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4a15      	ldr	r2, [pc, #84]	; (8010124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d10c      	bne.n	80100ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2201      	movs	r2, #1
 80100f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100fe:	2300      	movs	r3, #0
}
 8010100:	4618      	mov	r0, r3
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr
 801010c:	40010000 	.word	0x40010000
 8010110:	40010400 	.word	0x40010400
 8010114:	40000400 	.word	0x40000400
 8010118:	40000800 	.word	0x40000800
 801011c:	40000c00 	.word	0x40000c00
 8010120:	40001800 	.word	0x40001800
 8010124:	40014000 	.word	0x40014000

08010128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010128:	b480      	push	{r7}
 801012a:	b085      	sub	sp, #20
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010132:	2300      	movs	r3, #0
 8010134:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801013c:	2b01      	cmp	r3, #1
 801013e:	d101      	bne.n	8010144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010140:	2302      	movs	r3, #2
 8010142:	e065      	b.n	8010210 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	4313      	orrs	r3, r2
 8010166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	4313      	orrs	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4313      	orrs	r3, r2
 8010182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	691b      	ldr	r3, [r3, #16]
 801018e:	4313      	orrs	r3, r2
 8010190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	695b      	ldr	r3, [r3, #20]
 801019c:	4313      	orrs	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101aa:	4313      	orrs	r3, r2
 80101ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	699b      	ldr	r3, [r3, #24]
 80101b8:	041b      	lsls	r3, r3, #16
 80101ba:	4313      	orrs	r3, r2
 80101bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a16      	ldr	r2, [pc, #88]	; (801021c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d004      	beq.n	80101d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a14      	ldr	r2, [pc, #80]	; (8010220 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d115      	bne.n	80101fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101dc:	051b      	lsls	r3, r3, #20
 80101de:	4313      	orrs	r3, r2
 80101e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	4313      	orrs	r3, r2
 80101ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	6a1b      	ldr	r3, [r3, #32]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	40010000 	.word	0x40010000
 8010220:	40010400 	.word	0x40010400

08010224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801022c:	bf00      	nop
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010254:	bf00      	nop
 8010256:	370c      	adds	r7, #12
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d101      	bne.n	8010272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801026e:	2301      	movs	r3, #1
 8010270:	e042      	b.n	80102f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010278:	2b00      	cmp	r3, #0
 801027a:	d106      	bne.n	801028a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7f3 fc07 	bl	8003a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2224      	movs	r2, #36	; 0x24
 801028e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f022 0201 	bic.w	r2, r2, #1
 80102a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d002      	beq.n	80102b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f001 fc42 	bl	8011b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fed7 	bl	8011064 <UART_SetConfig>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d101      	bne.n	80102c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80102bc:	2301      	movs	r3, #1
 80102be:	e01b      	b.n	80102f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	685a      	ldr	r2, [r3, #4]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80102ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	689a      	ldr	r2, [r3, #8]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80102de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	f042 0201 	orr.w	r2, r2, #1
 80102ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f001 fcc1 	bl	8011c78 <UART_CheckIdleState>
 80102f6:	4603      	mov	r3, r0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b08a      	sub	sp, #40	; 0x28
 8010304:	af02      	add	r7, sp, #8
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	4613      	mov	r3, r2
 801030e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010316:	2b20      	cmp	r3, #32
 8010318:	d17b      	bne.n	8010412 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <HAL_UART_Transmit+0x26>
 8010320:	88fb      	ldrh	r3, [r7, #6]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	e074      	b.n	8010414 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2221      	movs	r2, #33	; 0x21
 8010336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801033a:	f7f3 ff57 	bl	80041ec <HAL_GetTick>
 801033e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	88fa      	ldrh	r2, [r7, #6]
 8010344:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	88fa      	ldrh	r2, [r7, #6]
 801034c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010358:	d108      	bne.n	801036c <HAL_UART_Transmit+0x6c>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d104      	bne.n	801036c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010362:	2300      	movs	r3, #0
 8010364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	61bb      	str	r3, [r7, #24]
 801036a:	e003      	b.n	8010374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010374:	e030      	b.n	80103d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2200      	movs	r2, #0
 801037e:	2180      	movs	r1, #128	; 0x80
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f001 fd23 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d005      	beq.n	8010398 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2220      	movs	r2, #32
 8010390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010394:	2303      	movs	r3, #3
 8010396:	e03d      	b.n	8010414 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d10b      	bne.n	80103b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	461a      	mov	r2, r3
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80103ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	3302      	adds	r3, #2
 80103b2:	61bb      	str	r3, [r7, #24]
 80103b4:	e007      	b.n	80103c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	781a      	ldrb	r2, [r3, #0]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	3301      	adds	r3, #1
 80103c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	3b01      	subs	r3, #1
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80103de:	b29b      	uxth	r3, r3
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1c8      	bne.n	8010376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	9300      	str	r3, [sp, #0]
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	2200      	movs	r2, #0
 80103ec:	2140      	movs	r1, #64	; 0x40
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f001 fcec 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d005      	beq.n	8010406 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2220      	movs	r2, #32
 80103fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010402:	2303      	movs	r3, #3
 8010404:	e006      	b.n	8010414 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2220      	movs	r2, #32
 801040a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	e000      	b.n	8010414 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010412:	2302      	movs	r3, #2
  }
}
 8010414:	4618      	mov	r0, r3
 8010416:	3720      	adds	r7, #32
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b08a      	sub	sp, #40	; 0x28
 8010420:	af02      	add	r7, sp, #8
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	603b      	str	r3, [r7, #0]
 8010428:	4613      	mov	r3, r2
 801042a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010432:	2b20      	cmp	r3, #32
 8010434:	f040 80b5 	bne.w	80105a2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <HAL_UART_Receive+0x28>
 801043e:	88fb      	ldrh	r3, [r7, #6]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	e0ad      	b.n	80105a4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2222      	movs	r2, #34	; 0x22
 8010454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801045e:	f7f3 fec5 	bl	80041ec <HAL_GetTick>
 8010462:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	88fa      	ldrh	r2, [r7, #6]
 8010468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	88fa      	ldrh	r2, [r7, #6]
 8010470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801047c:	d10e      	bne.n	801049c <HAL_UART_Receive+0x80>
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	691b      	ldr	r3, [r3, #16]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d105      	bne.n	8010492 <HAL_UART_Receive+0x76>
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f240 12ff 	movw	r2, #511	; 0x1ff
 801048c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010490:	e02d      	b.n	80104ee <HAL_UART_Receive+0xd2>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	22ff      	movs	r2, #255	; 0xff
 8010496:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801049a:	e028      	b.n	80104ee <HAL_UART_Receive+0xd2>
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10d      	bne.n	80104c0 <HAL_UART_Receive+0xa4>
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d104      	bne.n	80104b6 <HAL_UART_Receive+0x9a>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	22ff      	movs	r2, #255	; 0xff
 80104b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104b4:	e01b      	b.n	80104ee <HAL_UART_Receive+0xd2>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	227f      	movs	r2, #127	; 0x7f
 80104ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104be:	e016      	b.n	80104ee <HAL_UART_Receive+0xd2>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80104c8:	d10d      	bne.n	80104e6 <HAL_UART_Receive+0xca>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	691b      	ldr	r3, [r3, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d104      	bne.n	80104dc <HAL_UART_Receive+0xc0>
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	227f      	movs	r2, #127	; 0x7f
 80104d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104da:	e008      	b.n	80104ee <HAL_UART_Receive+0xd2>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	223f      	movs	r2, #63	; 0x3f
 80104e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104e4:	e003      	b.n	80104ee <HAL_UART_Receive+0xd2>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104fe:	d108      	bne.n	8010512 <HAL_UART_Receive+0xf6>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d104      	bne.n	8010512 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010508:	2300      	movs	r3, #0
 801050a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	61bb      	str	r3, [r7, #24]
 8010510:	e003      	b.n	801051a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010516:	2300      	movs	r3, #0
 8010518:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801051a:	e036      	b.n	801058a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	2200      	movs	r2, #0
 8010524:	2120      	movs	r1, #32
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f001 fc50 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d005      	beq.n	801053e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2220      	movs	r2, #32
 8010536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801053a:	2303      	movs	r3, #3
 801053c:	e032      	b.n	80105a4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10c      	bne.n	801055e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801054a:	b29a      	uxth	r2, r3
 801054c:	8a7b      	ldrh	r3, [r7, #18]
 801054e:	4013      	ands	r3, r2
 8010550:	b29a      	uxth	r2, r3
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	3302      	adds	r3, #2
 801055a:	61bb      	str	r3, [r7, #24]
 801055c:	e00c      	b.n	8010578 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010564:	b2da      	uxtb	r2, r3
 8010566:	8a7b      	ldrh	r3, [r7, #18]
 8010568:	b2db      	uxtb	r3, r3
 801056a:	4013      	ands	r3, r2
 801056c:	b2da      	uxtb	r2, r3
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	3301      	adds	r3, #1
 8010576:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801057e:	b29b      	uxth	r3, r3
 8010580:	3b01      	subs	r3, #1
 8010582:	b29a      	uxth	r2, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010590:	b29b      	uxth	r3, r3
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1c2      	bne.n	801051c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2220      	movs	r2, #32
 801059a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801059e:	2300      	movs	r3, #0
 80105a0:	e000      	b.n	80105a4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80105a2:	2302      	movs	r3, #2
  }
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3720      	adds	r7, #32
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08a      	sub	sp, #40	; 0x28
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	4613      	mov	r3, r2
 80105b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105c0:	2b20      	cmp	r3, #32
 80105c2:	d137      	bne.n	8010634 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <HAL_UART_Receive_IT+0x24>
 80105ca:	88fb      	ldrh	r3, [r7, #6]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80105d0:	2301      	movs	r3, #1
 80105d2:	e030      	b.n	8010636 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a18      	ldr	r2, [pc, #96]	; (8010640 <HAL_UART_Receive_IT+0x94>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d01f      	beq.n	8010624 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d018      	beq.n	8010624 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010606:	627b      	str	r3, [r7, #36]	; 0x24
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	461a      	mov	r2, r3
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	623b      	str	r3, [r7, #32]
 8010612:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	69f9      	ldr	r1, [r7, #28]
 8010616:	6a3a      	ldr	r2, [r7, #32]
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	61bb      	str	r3, [r7, #24]
   return(result);
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e6      	bne.n	80105f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010624:	88fb      	ldrh	r3, [r7, #6]
 8010626:	461a      	mov	r2, r3
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f001 fc3c 	bl	8011ea8 <UART_Start_Receive_IT>
 8010630:	4603      	mov	r3, r0
 8010632:	e000      	b.n	8010636 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010634:	2302      	movs	r3, #2
  }
}
 8010636:	4618      	mov	r0, r3
 8010638:	3728      	adds	r7, #40	; 0x28
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	58000c00 	.word	0x58000c00

08010644 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b08a      	sub	sp, #40	; 0x28
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	4613      	mov	r3, r2
 8010650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010658:	2b20      	cmp	r3, #32
 801065a:	d167      	bne.n	801072c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d002      	beq.n	8010668 <HAL_UART_Transmit_DMA+0x24>
 8010662:	88fb      	ldrh	r3, [r7, #6]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d101      	bne.n	801066c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010668:	2301      	movs	r3, #1
 801066a:	e060      	b.n	801072e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	88fa      	ldrh	r2, [r7, #6]
 8010676:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	88fa      	ldrh	r2, [r7, #6]
 801067e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2221      	movs	r2, #33	; 0x21
 801068e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010696:	2b00      	cmp	r3, #0
 8010698:	d028      	beq.n	80106ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801069e:	4a26      	ldr	r2, [pc, #152]	; (8010738 <HAL_UART_Transmit_DMA+0xf4>)
 80106a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106a6:	4a25      	ldr	r2, [pc, #148]	; (801073c <HAL_UART_Transmit_DMA+0xf8>)
 80106a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106ae:	4a24      	ldr	r2, [pc, #144]	; (8010740 <HAL_UART_Transmit_DMA+0xfc>)
 80106b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b6:	2200      	movs	r2, #0
 80106b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106c2:	4619      	mov	r1, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	3328      	adds	r3, #40	; 0x28
 80106ca:	461a      	mov	r2, r3
 80106cc:	88fb      	ldrh	r3, [r7, #6]
 80106ce:	f7f6 fa11 	bl	8006af4 <HAL_DMA_Start_IT>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d009      	beq.n	80106ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2210      	movs	r2, #16
 80106dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2220      	movs	r2, #32
 80106e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e020      	b.n	801072e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2240      	movs	r2, #64	; 0x40
 80106f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3308      	adds	r3, #8
 80106fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	e853 3f00 	ldrex	r3, [r3]
 8010702:	613b      	str	r3, [r7, #16]
   return(result);
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801070a:	627b      	str	r3, [r7, #36]	; 0x24
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3308      	adds	r3, #8
 8010712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010714:	623a      	str	r2, [r7, #32]
 8010716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010718:	69f9      	ldr	r1, [r7, #28]
 801071a:	6a3a      	ldr	r2, [r7, #32]
 801071c:	e841 2300 	strex	r3, r2, [r1]
 8010720:	61bb      	str	r3, [r7, #24]
   return(result);
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d1e5      	bne.n	80106f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	e000      	b.n	801072e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801072c:	2302      	movs	r3, #2
  }
}
 801072e:	4618      	mov	r0, r3
 8010730:	3728      	adds	r7, #40	; 0x28
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	0801223d 	.word	0x0801223d
 801073c:	080122d3 	.word	0x080122d3
 8010740:	080122ef 	.word	0x080122ef

08010744 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b09a      	sub	sp, #104	; 0x68
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010754:	e853 3f00 	ldrex	r3, [r3]
 8010758:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801075a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801075c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010760:	667b      	str	r3, [r7, #100]	; 0x64
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	461a      	mov	r2, r3
 8010768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801076a:	657b      	str	r3, [r7, #84]	; 0x54
 801076c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010772:	e841 2300 	strex	r3, r2, [r1]
 8010776:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1e6      	bne.n	801074c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	3308      	adds	r3, #8
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010788:	e853 3f00 	ldrex	r3, [r3]
 801078c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801078e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010790:	4b46      	ldr	r3, [pc, #280]	; (80108ac <HAL_UART_AbortReceive+0x168>)
 8010792:	4013      	ands	r3, r2
 8010794:	663b      	str	r3, [r7, #96]	; 0x60
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3308      	adds	r3, #8
 801079c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801079e:	643a      	str	r2, [r7, #64]	; 0x40
 80107a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e5      	bne.n	801077e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d118      	bne.n	80107ec <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	e853 3f00 	ldrex	r3, [r3]
 80107c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f023 0310 	bic.w	r3, r3, #16
 80107ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	461a      	mov	r2, r3
 80107d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e0:	e841 2300 	strex	r3, r2, [r1]
 80107e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1e6      	bne.n	80107ba <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f6:	2b40      	cmp	r3, #64	; 0x40
 80107f8:	d13b      	bne.n	8010872 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3308      	adds	r3, #8
 8010800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	e853 3f00 	ldrex	r3, [r3]
 8010808:	60bb      	str	r3, [r7, #8]
   return(result);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010810:	65bb      	str	r3, [r7, #88]	; 0x58
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3308      	adds	r3, #8
 8010818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801081a:	61ba      	str	r2, [r7, #24]
 801081c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081e:	6979      	ldr	r1, [r7, #20]
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	e841 2300 	strex	r3, r2, [r1]
 8010826:	613b      	str	r3, [r7, #16]
   return(result);
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1e5      	bne.n	80107fa <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010834:	2b00      	cmp	r3, #0
 8010836:	d01c      	beq.n	8010872 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801083e:	2200      	movs	r2, #0
 8010840:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010848:	4618      	mov	r0, r3
 801084a:	f7f6 fbbd 	bl	8006fc8 <HAL_DMA_Abort>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00e      	beq.n	8010872 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801085a:	4618      	mov	r0, r3
 801085c:	f7f8 f842 	bl	80088e4 <HAL_DMA_GetError>
 8010860:	4603      	mov	r3, r0
 8010862:	2b20      	cmp	r3, #32
 8010864:	d105      	bne.n	8010872 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2210      	movs	r2, #16
 801086a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801086e:	2303      	movs	r3, #3
 8010870:	e017      	b.n	80108a2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	220f      	movs	r2, #15
 8010880:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	699a      	ldr	r2, [r3, #24]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f042 0208 	orr.w	r2, r2, #8
 8010890:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2220      	movs	r2, #32
 8010896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3768      	adds	r7, #104	; 0x68
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	effffffe 	.word	0xeffffffe

080108b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b0ba      	sub	sp, #232	; 0xe8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	69db      	ldr	r3, [r3, #28]
 80108be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80108d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80108da:	f640 030f 	movw	r3, #2063	; 0x80f
 80108de:	4013      	ands	r3, r2
 80108e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80108e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d11b      	bne.n	8010924 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80108ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108f0:	f003 0320 	and.w	r3, r3, #32
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d015      	beq.n	8010924 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80108f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108fc:	f003 0320 	and.w	r3, r3, #32
 8010900:	2b00      	cmp	r3, #0
 8010902:	d105      	bne.n	8010910 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d009      	beq.n	8010924 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8377 	beq.w	8011008 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	4798      	blx	r3
      }
      return;
 8010922:	e371      	b.n	8011008 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 8123 	beq.w	8010b74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801092e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010932:	4b8d      	ldr	r3, [pc, #564]	; (8010b68 <HAL_UART_IRQHandler+0x2b8>)
 8010934:	4013      	ands	r3, r2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d106      	bne.n	8010948 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801093a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801093e:	4b8b      	ldr	r3, [pc, #556]	; (8010b6c <HAL_UART_IRQHandler+0x2bc>)
 8010940:	4013      	ands	r3, r2
 8010942:	2b00      	cmp	r3, #0
 8010944:	f000 8116 	beq.w	8010b74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801094c:	f003 0301 	and.w	r3, r3, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	d011      	beq.n	8010978 <HAL_UART_IRQHandler+0xc8>
 8010954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00b      	beq.n	8010978 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2201      	movs	r2, #1
 8010966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801096e:	f043 0201 	orr.w	r2, r3, #1
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801097c:	f003 0302 	and.w	r3, r3, #2
 8010980:	2b00      	cmp	r3, #0
 8010982:	d011      	beq.n	80109a8 <HAL_UART_IRQHandler+0xf8>
 8010984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010988:	f003 0301 	and.w	r3, r3, #1
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00b      	beq.n	80109a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2202      	movs	r2, #2
 8010996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801099e:	f043 0204 	orr.w	r2, r3, #4
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d011      	beq.n	80109d8 <HAL_UART_IRQHandler+0x128>
 80109b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109b8:	f003 0301 	and.w	r3, r3, #1
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00b      	beq.n	80109d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2204      	movs	r2, #4
 80109c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109ce:	f043 0202 	orr.w	r2, r3, #2
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80109d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109dc:	f003 0308 	and.w	r3, r3, #8
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d017      	beq.n	8010a14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80109e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109e8:	f003 0320 	and.w	r3, r3, #32
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d105      	bne.n	80109fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80109f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80109f4:	4b5c      	ldr	r3, [pc, #368]	; (8010b68 <HAL_UART_IRQHandler+0x2b8>)
 80109f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2208      	movs	r2, #8
 8010a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a0a:	f043 0208 	orr.w	r2, r3, #8
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d012      	beq.n	8010a46 <HAL_UART_IRQHandler+0x196>
 8010a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00c      	beq.n	8010a46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a3c:	f043 0220 	orr.w	r2, r3, #32
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 82dd 	beq.w	801100c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a56:	f003 0320 	and.w	r3, r3, #32
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d013      	beq.n	8010a86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a62:	f003 0320 	and.w	r3, r3, #32
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d105      	bne.n	8010a76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d007      	beq.n	8010a86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d003      	beq.n	8010a86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a9a:	2b40      	cmp	r3, #64	; 0x40
 8010a9c:	d005      	beq.n	8010aaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d054      	beq.n	8010b54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f001 fb60 	bl	8012170 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aba:	2b40      	cmp	r3, #64	; 0x40
 8010abc:	d146      	bne.n	8010b4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	3308      	adds	r3, #8
 8010ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010acc:	e853 3f00 	ldrex	r3, [r3]
 8010ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3308      	adds	r3, #8
 8010ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010afa:	e841 2300 	strex	r3, r2, [r1]
 8010afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1d9      	bne.n	8010abe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d017      	beq.n	8010b44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1a:	4a15      	ldr	r2, [pc, #84]	; (8010b70 <HAL_UART_IRQHandler+0x2c0>)
 8010b1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7f6 fd6d 	bl	8007604 <HAL_DMA_Abort_IT>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d019      	beq.n	8010b64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010b3e:	4610      	mov	r0, r2
 8010b40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b42:	e00f      	b.n	8010b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 fa77 	bl	8011038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b4a:	e00b      	b.n	8010b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 fa73 	bl	8011038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b52:	e007      	b.n	8010b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fa6f 	bl	8011038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010b62:	e253      	b.n	801100c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b64:	bf00      	nop
    return;
 8010b66:	e251      	b.n	801100c <HAL_UART_IRQHandler+0x75c>
 8010b68:	10000001 	.word	0x10000001
 8010b6c:	04000120 	.word	0x04000120
 8010b70:	0801236f 	.word	0x0801236f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	f040 81e7 	bne.w	8010f4c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b82:	f003 0310 	and.w	r3, r3, #16
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 81e0 	beq.w	8010f4c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b90:	f003 0310 	and.w	r3, r3, #16
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f000 81d9 	beq.w	8010f4c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2210      	movs	r2, #16
 8010ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	689b      	ldr	r3, [r3, #8]
 8010ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bac:	2b40      	cmp	r3, #64	; 0x40
 8010bae:	f040 8151 	bne.w	8010e54 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a96      	ldr	r2, [pc, #600]	; (8010e14 <HAL_UART_IRQHandler+0x564>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d068      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a93      	ldr	r2, [pc, #588]	; (8010e18 <HAL_UART_IRQHandler+0x568>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d061      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a91      	ldr	r2, [pc, #580]	; (8010e1c <HAL_UART_IRQHandler+0x56c>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d05a      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a8e      	ldr	r2, [pc, #568]	; (8010e20 <HAL_UART_IRQHandler+0x570>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d053      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a8c      	ldr	r2, [pc, #560]	; (8010e24 <HAL_UART_IRQHandler+0x574>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d04c      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a89      	ldr	r2, [pc, #548]	; (8010e28 <HAL_UART_IRQHandler+0x578>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d045      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4a87      	ldr	r2, [pc, #540]	; (8010e2c <HAL_UART_IRQHandler+0x57c>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d03e      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a84      	ldr	r2, [pc, #528]	; (8010e30 <HAL_UART_IRQHandler+0x580>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d037      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a82      	ldr	r2, [pc, #520]	; (8010e34 <HAL_UART_IRQHandler+0x584>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d030      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a7f      	ldr	r2, [pc, #508]	; (8010e38 <HAL_UART_IRQHandler+0x588>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d029      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4a7d      	ldr	r2, [pc, #500]	; (8010e3c <HAL_UART_IRQHandler+0x58c>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d022      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a7a      	ldr	r2, [pc, #488]	; (8010e40 <HAL_UART_IRQHandler+0x590>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d01b      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a78      	ldr	r2, [pc, #480]	; (8010e44 <HAL_UART_IRQHandler+0x594>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d014      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a75      	ldr	r2, [pc, #468]	; (8010e48 <HAL_UART_IRQHandler+0x598>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d00d      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a73      	ldr	r2, [pc, #460]	; (8010e4c <HAL_UART_IRQHandler+0x59c>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d006      	beq.n	8010c92 <HAL_UART_IRQHandler+0x3e2>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a70      	ldr	r2, [pc, #448]	; (8010e50 <HAL_UART_IRQHandler+0x5a0>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d106      	bne.n	8010ca0 <HAL_UART_IRQHandler+0x3f0>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	e005      	b.n	8010cac <HAL_UART_IRQHandler+0x3fc>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 81ab 	beq.w	8011010 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010cc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	f080 81a3 	bcs.w	8011010 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cda:	69db      	ldr	r3, [r3, #28]
 8010cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce0:	f000 8087 	beq.w	8010df2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cf0:	e853 3f00 	ldrex	r3, [r3]
 8010cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	461a      	mov	r2, r3
 8010d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010d12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010d1e:	e841 2300 	strex	r3, r2, [r1]
 8010d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1da      	bne.n	8010ce4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d38:	e853 3f00 	ldrex	r3, [r3]
 8010d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d40:	f023 0301 	bic.w	r3, r3, #1
 8010d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d5e:	e841 2300 	strex	r3, r2, [r1]
 8010d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1e1      	bne.n	8010d2e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3308      	adds	r3, #8
 8010d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d74:	e853 3f00 	ldrex	r3, [r3]
 8010d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3308      	adds	r3, #8
 8010d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010d96:	e841 2300 	strex	r3, r2, [r1]
 8010d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1e3      	bne.n	8010d6a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2220      	movs	r2, #32
 8010da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2200      	movs	r2, #0
 8010dae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010db8:	e853 3f00 	ldrex	r3, [r3]
 8010dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc0:	f023 0310 	bic.w	r3, r3, #16
 8010dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010dd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8010dd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010dda:	e841 2300 	strex	r3, r2, [r1]
 8010dde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1e4      	bne.n	8010db0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f6 f8eb 	bl	8006fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2202      	movs	r2, #2
 8010df6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f91d 	bl	801104c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e12:	e0fd      	b.n	8011010 <HAL_UART_IRQHandler+0x760>
 8010e14:	40020010 	.word	0x40020010
 8010e18:	40020028 	.word	0x40020028
 8010e1c:	40020040 	.word	0x40020040
 8010e20:	40020058 	.word	0x40020058
 8010e24:	40020070 	.word	0x40020070
 8010e28:	40020088 	.word	0x40020088
 8010e2c:	400200a0 	.word	0x400200a0
 8010e30:	400200b8 	.word	0x400200b8
 8010e34:	40020410 	.word	0x40020410
 8010e38:	40020428 	.word	0x40020428
 8010e3c:	40020440 	.word	0x40020440
 8010e40:	40020458 	.word	0x40020458
 8010e44:	40020470 	.word	0x40020470
 8010e48:	40020488 	.word	0x40020488
 8010e4c:	400204a0 	.word	0x400204a0
 8010e50:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f000 80cf 	beq.w	8011014 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 80ca 	beq.w	8011014 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	e853 3f00 	ldrex	r3, [r3]
 8010e8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eaa:	e841 2300 	strex	r3, r2, [r1]
 8010eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1e4      	bne.n	8010e80 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3308      	adds	r3, #8
 8010ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec0:	e853 3f00 	ldrex	r3, [r3]
 8010ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ec6:	6a3a      	ldr	r2, [r7, #32]
 8010ec8:	4b55      	ldr	r3, [pc, #340]	; (8011020 <HAL_UART_IRQHandler+0x770>)
 8010eca:	4013      	ands	r3, r2
 8010ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	3308      	adds	r3, #8
 8010ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010eda:	633a      	str	r2, [r7, #48]	; 0x30
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ee2:	e841 2300 	strex	r3, r2, [r1]
 8010ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1e3      	bne.n	8010eb6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2220      	movs	r2, #32
 8010ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	e853 3f00 	ldrex	r3, [r3]
 8010f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f023 0310 	bic.w	r3, r3, #16
 8010f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f24:	61fb      	str	r3, [r7, #28]
 8010f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f28:	69b9      	ldr	r1, [r7, #24]
 8010f2a:	69fa      	ldr	r2, [r7, #28]
 8010f2c:	e841 2300 	strex	r3, r2, [r1]
 8010f30:	617b      	str	r3, [r7, #20]
   return(result);
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e4      	bne.n	8010f02 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2202      	movs	r2, #2
 8010f3c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f42:	4619      	mov	r1, r3
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f881 	bl	801104c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010f4a:	e063      	b.n	8011014 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00e      	beq.n	8010f76 <HAL_UART_IRQHandler+0x6c6>
 8010f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d008      	beq.n	8010f76 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f001 ff5a 	bl	8012e28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f74:	e051      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d014      	beq.n	8010fac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d105      	bne.n	8010f9a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d008      	beq.n	8010fac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d03a      	beq.n	8011018 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	4798      	blx	r3
    }
    return;
 8010faa:	e035      	b.n	8011018 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d009      	beq.n	8010fcc <HAL_UART_IRQHandler+0x71c>
 8010fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d003      	beq.n	8010fcc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f001 f9e8 	bl	801239a <UART_EndTransmit_IT>
    return;
 8010fca:	e026      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d009      	beq.n	8010fec <HAL_UART_IRQHandler+0x73c>
 8010fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f001 ff33 	bl	8012e50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010fea:	e016      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d010      	beq.n	801101a <HAL_UART_IRQHandler+0x76a>
 8010ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	da0c      	bge.n	801101a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f001 ff1b 	bl	8012e3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011006:	e008      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
      return;
 8011008:	bf00      	nop
 801100a:	e006      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
    return;
 801100c:	bf00      	nop
 801100e:	e004      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
      return;
 8011010:	bf00      	nop
 8011012:	e002      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
      return;
 8011014:	bf00      	nop
 8011016:	e000      	b.n	801101a <HAL_UART_IRQHandler+0x76a>
    return;
 8011018:	bf00      	nop
  }
}
 801101a:	37e8      	adds	r7, #232	; 0xe8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	effffffe 	.word	0xeffffffe

08011024 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	460b      	mov	r3, r1
 8011056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011068:	b092      	sub	sp, #72	; 0x48
 801106a:	af00      	add	r7, sp, #0
 801106c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	689a      	ldr	r2, [r3, #8]
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	431a      	orrs	r2, r3
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	695b      	ldr	r3, [r3, #20]
 8011082:	431a      	orrs	r2, r3
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	69db      	ldr	r3, [r3, #28]
 8011088:	4313      	orrs	r3, r2
 801108a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	4bbe      	ldr	r3, [pc, #760]	; (801138c <UART_SetConfig+0x328>)
 8011094:	4013      	ands	r3, r2
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	6812      	ldr	r2, [r2, #0]
 801109a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801109c:	430b      	orrs	r3, r1
 801109e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	68da      	ldr	r2, [r3, #12]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	430a      	orrs	r2, r1
 80110b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4ab3      	ldr	r2, [pc, #716]	; (8011390 <UART_SetConfig+0x32c>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d004      	beq.n	80110d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	6a1b      	ldr	r3, [r3, #32]
 80110ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110cc:	4313      	orrs	r3, r2
 80110ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	689a      	ldr	r2, [r3, #8]
 80110d6:	4baf      	ldr	r3, [pc, #700]	; (8011394 <UART_SetConfig+0x330>)
 80110d8:	4013      	ands	r3, r2
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	6812      	ldr	r2, [r2, #0]
 80110de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110e0:	430b      	orrs	r3, r1
 80110e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ea:	f023 010f 	bic.w	r1, r3, #15
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	430a      	orrs	r2, r1
 80110f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4aa6      	ldr	r2, [pc, #664]	; (8011398 <UART_SetConfig+0x334>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d177      	bne.n	80111f4 <UART_SetConfig+0x190>
 8011104:	4ba5      	ldr	r3, [pc, #660]	; (801139c <UART_SetConfig+0x338>)
 8011106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801110c:	2b28      	cmp	r3, #40	; 0x28
 801110e:	d86d      	bhi.n	80111ec <UART_SetConfig+0x188>
 8011110:	a201      	add	r2, pc, #4	; (adr r2, 8011118 <UART_SetConfig+0xb4>)
 8011112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011116:	bf00      	nop
 8011118:	080111bd 	.word	0x080111bd
 801111c:	080111ed 	.word	0x080111ed
 8011120:	080111ed 	.word	0x080111ed
 8011124:	080111ed 	.word	0x080111ed
 8011128:	080111ed 	.word	0x080111ed
 801112c:	080111ed 	.word	0x080111ed
 8011130:	080111ed 	.word	0x080111ed
 8011134:	080111ed 	.word	0x080111ed
 8011138:	080111c5 	.word	0x080111c5
 801113c:	080111ed 	.word	0x080111ed
 8011140:	080111ed 	.word	0x080111ed
 8011144:	080111ed 	.word	0x080111ed
 8011148:	080111ed 	.word	0x080111ed
 801114c:	080111ed 	.word	0x080111ed
 8011150:	080111ed 	.word	0x080111ed
 8011154:	080111ed 	.word	0x080111ed
 8011158:	080111cd 	.word	0x080111cd
 801115c:	080111ed 	.word	0x080111ed
 8011160:	080111ed 	.word	0x080111ed
 8011164:	080111ed 	.word	0x080111ed
 8011168:	080111ed 	.word	0x080111ed
 801116c:	080111ed 	.word	0x080111ed
 8011170:	080111ed 	.word	0x080111ed
 8011174:	080111ed 	.word	0x080111ed
 8011178:	080111d5 	.word	0x080111d5
 801117c:	080111ed 	.word	0x080111ed
 8011180:	080111ed 	.word	0x080111ed
 8011184:	080111ed 	.word	0x080111ed
 8011188:	080111ed 	.word	0x080111ed
 801118c:	080111ed 	.word	0x080111ed
 8011190:	080111ed 	.word	0x080111ed
 8011194:	080111ed 	.word	0x080111ed
 8011198:	080111dd 	.word	0x080111dd
 801119c:	080111ed 	.word	0x080111ed
 80111a0:	080111ed 	.word	0x080111ed
 80111a4:	080111ed 	.word	0x080111ed
 80111a8:	080111ed 	.word	0x080111ed
 80111ac:	080111ed 	.word	0x080111ed
 80111b0:	080111ed 	.word	0x080111ed
 80111b4:	080111ed 	.word	0x080111ed
 80111b8:	080111e5 	.word	0x080111e5
 80111bc:	2301      	movs	r3, #1
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e222      	b.n	801160a <UART_SetConfig+0x5a6>
 80111c4:	2304      	movs	r3, #4
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e21e      	b.n	801160a <UART_SetConfig+0x5a6>
 80111cc:	2308      	movs	r3, #8
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e21a      	b.n	801160a <UART_SetConfig+0x5a6>
 80111d4:	2310      	movs	r3, #16
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e216      	b.n	801160a <UART_SetConfig+0x5a6>
 80111dc:	2320      	movs	r3, #32
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e212      	b.n	801160a <UART_SetConfig+0x5a6>
 80111e4:	2340      	movs	r3, #64	; 0x40
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e20e      	b.n	801160a <UART_SetConfig+0x5a6>
 80111ec:	2380      	movs	r3, #128	; 0x80
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e20a      	b.n	801160a <UART_SetConfig+0x5a6>
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a69      	ldr	r2, [pc, #420]	; (80113a0 <UART_SetConfig+0x33c>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d130      	bne.n	8011260 <UART_SetConfig+0x1fc>
 80111fe:	4b67      	ldr	r3, [pc, #412]	; (801139c <UART_SetConfig+0x338>)
 8011200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011202:	f003 0307 	and.w	r3, r3, #7
 8011206:	2b05      	cmp	r3, #5
 8011208:	d826      	bhi.n	8011258 <UART_SetConfig+0x1f4>
 801120a:	a201      	add	r2, pc, #4	; (adr r2, 8011210 <UART_SetConfig+0x1ac>)
 801120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011210:	08011229 	.word	0x08011229
 8011214:	08011231 	.word	0x08011231
 8011218:	08011239 	.word	0x08011239
 801121c:	08011241 	.word	0x08011241
 8011220:	08011249 	.word	0x08011249
 8011224:	08011251 	.word	0x08011251
 8011228:	2300      	movs	r3, #0
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e1ec      	b.n	801160a <UART_SetConfig+0x5a6>
 8011230:	2304      	movs	r3, #4
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e1e8      	b.n	801160a <UART_SetConfig+0x5a6>
 8011238:	2308      	movs	r3, #8
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e1e4      	b.n	801160a <UART_SetConfig+0x5a6>
 8011240:	2310      	movs	r3, #16
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e1e0      	b.n	801160a <UART_SetConfig+0x5a6>
 8011248:	2320      	movs	r3, #32
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124e:	e1dc      	b.n	801160a <UART_SetConfig+0x5a6>
 8011250:	2340      	movs	r3, #64	; 0x40
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011256:	e1d8      	b.n	801160a <UART_SetConfig+0x5a6>
 8011258:	2380      	movs	r3, #128	; 0x80
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e1d4      	b.n	801160a <UART_SetConfig+0x5a6>
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a4f      	ldr	r2, [pc, #316]	; (80113a4 <UART_SetConfig+0x340>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d130      	bne.n	80112cc <UART_SetConfig+0x268>
 801126a:	4b4c      	ldr	r3, [pc, #304]	; (801139c <UART_SetConfig+0x338>)
 801126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126e:	f003 0307 	and.w	r3, r3, #7
 8011272:	2b05      	cmp	r3, #5
 8011274:	d826      	bhi.n	80112c4 <UART_SetConfig+0x260>
 8011276:	a201      	add	r2, pc, #4	; (adr r2, 801127c <UART_SetConfig+0x218>)
 8011278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801127c:	08011295 	.word	0x08011295
 8011280:	0801129d 	.word	0x0801129d
 8011284:	080112a5 	.word	0x080112a5
 8011288:	080112ad 	.word	0x080112ad
 801128c:	080112b5 	.word	0x080112b5
 8011290:	080112bd 	.word	0x080112bd
 8011294:	2300      	movs	r3, #0
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e1b6      	b.n	801160a <UART_SetConfig+0x5a6>
 801129c:	2304      	movs	r3, #4
 801129e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a2:	e1b2      	b.n	801160a <UART_SetConfig+0x5a6>
 80112a4:	2308      	movs	r3, #8
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e1ae      	b.n	801160a <UART_SetConfig+0x5a6>
 80112ac:	2310      	movs	r3, #16
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e1aa      	b.n	801160a <UART_SetConfig+0x5a6>
 80112b4:	2320      	movs	r3, #32
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e1a6      	b.n	801160a <UART_SetConfig+0x5a6>
 80112bc:	2340      	movs	r3, #64	; 0x40
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e1a2      	b.n	801160a <UART_SetConfig+0x5a6>
 80112c4:	2380      	movs	r3, #128	; 0x80
 80112c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ca:	e19e      	b.n	801160a <UART_SetConfig+0x5a6>
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a35      	ldr	r2, [pc, #212]	; (80113a8 <UART_SetConfig+0x344>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d130      	bne.n	8011338 <UART_SetConfig+0x2d4>
 80112d6:	4b31      	ldr	r3, [pc, #196]	; (801139c <UART_SetConfig+0x338>)
 80112d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112da:	f003 0307 	and.w	r3, r3, #7
 80112de:	2b05      	cmp	r3, #5
 80112e0:	d826      	bhi.n	8011330 <UART_SetConfig+0x2cc>
 80112e2:	a201      	add	r2, pc, #4	; (adr r2, 80112e8 <UART_SetConfig+0x284>)
 80112e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e8:	08011301 	.word	0x08011301
 80112ec:	08011309 	.word	0x08011309
 80112f0:	08011311 	.word	0x08011311
 80112f4:	08011319 	.word	0x08011319
 80112f8:	08011321 	.word	0x08011321
 80112fc:	08011329 	.word	0x08011329
 8011300:	2300      	movs	r3, #0
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e180      	b.n	801160a <UART_SetConfig+0x5a6>
 8011308:	2304      	movs	r3, #4
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e17c      	b.n	801160a <UART_SetConfig+0x5a6>
 8011310:	2308      	movs	r3, #8
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e178      	b.n	801160a <UART_SetConfig+0x5a6>
 8011318:	2310      	movs	r3, #16
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e174      	b.n	801160a <UART_SetConfig+0x5a6>
 8011320:	2320      	movs	r3, #32
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e170      	b.n	801160a <UART_SetConfig+0x5a6>
 8011328:	2340      	movs	r3, #64	; 0x40
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e16c      	b.n	801160a <UART_SetConfig+0x5a6>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e168      	b.n	801160a <UART_SetConfig+0x5a6>
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a1b      	ldr	r2, [pc, #108]	; (80113ac <UART_SetConfig+0x348>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d142      	bne.n	80113c8 <UART_SetConfig+0x364>
 8011342:	4b16      	ldr	r3, [pc, #88]	; (801139c <UART_SetConfig+0x338>)
 8011344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011346:	f003 0307 	and.w	r3, r3, #7
 801134a:	2b05      	cmp	r3, #5
 801134c:	d838      	bhi.n	80113c0 <UART_SetConfig+0x35c>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <UART_SetConfig+0x2f0>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	0801136d 	.word	0x0801136d
 8011358:	08011375 	.word	0x08011375
 801135c:	0801137d 	.word	0x0801137d
 8011360:	08011385 	.word	0x08011385
 8011364:	080113b1 	.word	0x080113b1
 8011368:	080113b9 	.word	0x080113b9
 801136c:	2300      	movs	r3, #0
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e14a      	b.n	801160a <UART_SetConfig+0x5a6>
 8011374:	2304      	movs	r3, #4
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e146      	b.n	801160a <UART_SetConfig+0x5a6>
 801137c:	2308      	movs	r3, #8
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e142      	b.n	801160a <UART_SetConfig+0x5a6>
 8011384:	2310      	movs	r3, #16
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e13e      	b.n	801160a <UART_SetConfig+0x5a6>
 801138c:	cfff69f3 	.word	0xcfff69f3
 8011390:	58000c00 	.word	0x58000c00
 8011394:	11fff4ff 	.word	0x11fff4ff
 8011398:	40011000 	.word	0x40011000
 801139c:	58024400 	.word	0x58024400
 80113a0:	40004400 	.word	0x40004400
 80113a4:	40004800 	.word	0x40004800
 80113a8:	40004c00 	.word	0x40004c00
 80113ac:	40005000 	.word	0x40005000
 80113b0:	2320      	movs	r3, #32
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e128      	b.n	801160a <UART_SetConfig+0x5a6>
 80113b8:	2340      	movs	r3, #64	; 0x40
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e124      	b.n	801160a <UART_SetConfig+0x5a6>
 80113c0:	2380      	movs	r3, #128	; 0x80
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e120      	b.n	801160a <UART_SetConfig+0x5a6>
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4acb      	ldr	r2, [pc, #812]	; (80116fc <UART_SetConfig+0x698>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d176      	bne.n	80114c0 <UART_SetConfig+0x45c>
 80113d2:	4bcb      	ldr	r3, [pc, #812]	; (8011700 <UART_SetConfig+0x69c>)
 80113d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113da:	2b28      	cmp	r3, #40	; 0x28
 80113dc:	d86c      	bhi.n	80114b8 <UART_SetConfig+0x454>
 80113de:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <UART_SetConfig+0x380>)
 80113e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e4:	08011489 	.word	0x08011489
 80113e8:	080114b9 	.word	0x080114b9
 80113ec:	080114b9 	.word	0x080114b9
 80113f0:	080114b9 	.word	0x080114b9
 80113f4:	080114b9 	.word	0x080114b9
 80113f8:	080114b9 	.word	0x080114b9
 80113fc:	080114b9 	.word	0x080114b9
 8011400:	080114b9 	.word	0x080114b9
 8011404:	08011491 	.word	0x08011491
 8011408:	080114b9 	.word	0x080114b9
 801140c:	080114b9 	.word	0x080114b9
 8011410:	080114b9 	.word	0x080114b9
 8011414:	080114b9 	.word	0x080114b9
 8011418:	080114b9 	.word	0x080114b9
 801141c:	080114b9 	.word	0x080114b9
 8011420:	080114b9 	.word	0x080114b9
 8011424:	08011499 	.word	0x08011499
 8011428:	080114b9 	.word	0x080114b9
 801142c:	080114b9 	.word	0x080114b9
 8011430:	080114b9 	.word	0x080114b9
 8011434:	080114b9 	.word	0x080114b9
 8011438:	080114b9 	.word	0x080114b9
 801143c:	080114b9 	.word	0x080114b9
 8011440:	080114b9 	.word	0x080114b9
 8011444:	080114a1 	.word	0x080114a1
 8011448:	080114b9 	.word	0x080114b9
 801144c:	080114b9 	.word	0x080114b9
 8011450:	080114b9 	.word	0x080114b9
 8011454:	080114b9 	.word	0x080114b9
 8011458:	080114b9 	.word	0x080114b9
 801145c:	080114b9 	.word	0x080114b9
 8011460:	080114b9 	.word	0x080114b9
 8011464:	080114a9 	.word	0x080114a9
 8011468:	080114b9 	.word	0x080114b9
 801146c:	080114b9 	.word	0x080114b9
 8011470:	080114b9 	.word	0x080114b9
 8011474:	080114b9 	.word	0x080114b9
 8011478:	080114b9 	.word	0x080114b9
 801147c:	080114b9 	.word	0x080114b9
 8011480:	080114b9 	.word	0x080114b9
 8011484:	080114b1 	.word	0x080114b1
 8011488:	2301      	movs	r3, #1
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e0bc      	b.n	801160a <UART_SetConfig+0x5a6>
 8011490:	2304      	movs	r3, #4
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e0b8      	b.n	801160a <UART_SetConfig+0x5a6>
 8011498:	2308      	movs	r3, #8
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e0b4      	b.n	801160a <UART_SetConfig+0x5a6>
 80114a0:	2310      	movs	r3, #16
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e0b0      	b.n	801160a <UART_SetConfig+0x5a6>
 80114a8:	2320      	movs	r3, #32
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e0ac      	b.n	801160a <UART_SetConfig+0x5a6>
 80114b0:	2340      	movs	r3, #64	; 0x40
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e0a8      	b.n	801160a <UART_SetConfig+0x5a6>
 80114b8:	2380      	movs	r3, #128	; 0x80
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e0a4      	b.n	801160a <UART_SetConfig+0x5a6>
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a8f      	ldr	r2, [pc, #572]	; (8011704 <UART_SetConfig+0x6a0>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d130      	bne.n	801152c <UART_SetConfig+0x4c8>
 80114ca:	4b8d      	ldr	r3, [pc, #564]	; (8011700 <UART_SetConfig+0x69c>)
 80114cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ce:	f003 0307 	and.w	r3, r3, #7
 80114d2:	2b05      	cmp	r3, #5
 80114d4:	d826      	bhi.n	8011524 <UART_SetConfig+0x4c0>
 80114d6:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <UART_SetConfig+0x478>)
 80114d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114dc:	080114f5 	.word	0x080114f5
 80114e0:	080114fd 	.word	0x080114fd
 80114e4:	08011505 	.word	0x08011505
 80114e8:	0801150d 	.word	0x0801150d
 80114ec:	08011515 	.word	0x08011515
 80114f0:	0801151d 	.word	0x0801151d
 80114f4:	2300      	movs	r3, #0
 80114f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fa:	e086      	b.n	801160a <UART_SetConfig+0x5a6>
 80114fc:	2304      	movs	r3, #4
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e082      	b.n	801160a <UART_SetConfig+0x5a6>
 8011504:	2308      	movs	r3, #8
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e07e      	b.n	801160a <UART_SetConfig+0x5a6>
 801150c:	2310      	movs	r3, #16
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e07a      	b.n	801160a <UART_SetConfig+0x5a6>
 8011514:	2320      	movs	r3, #32
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e076      	b.n	801160a <UART_SetConfig+0x5a6>
 801151c:	2340      	movs	r3, #64	; 0x40
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e072      	b.n	801160a <UART_SetConfig+0x5a6>
 8011524:	2380      	movs	r3, #128	; 0x80
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e06e      	b.n	801160a <UART_SetConfig+0x5a6>
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a75      	ldr	r2, [pc, #468]	; (8011708 <UART_SetConfig+0x6a4>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d130      	bne.n	8011598 <UART_SetConfig+0x534>
 8011536:	4b72      	ldr	r3, [pc, #456]	; (8011700 <UART_SetConfig+0x69c>)
 8011538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801153a:	f003 0307 	and.w	r3, r3, #7
 801153e:	2b05      	cmp	r3, #5
 8011540:	d826      	bhi.n	8011590 <UART_SetConfig+0x52c>
 8011542:	a201      	add	r2, pc, #4	; (adr r2, 8011548 <UART_SetConfig+0x4e4>)
 8011544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011548:	08011561 	.word	0x08011561
 801154c:	08011569 	.word	0x08011569
 8011550:	08011571 	.word	0x08011571
 8011554:	08011579 	.word	0x08011579
 8011558:	08011581 	.word	0x08011581
 801155c:	08011589 	.word	0x08011589
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e050      	b.n	801160a <UART_SetConfig+0x5a6>
 8011568:	2304      	movs	r3, #4
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e04c      	b.n	801160a <UART_SetConfig+0x5a6>
 8011570:	2308      	movs	r3, #8
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e048      	b.n	801160a <UART_SetConfig+0x5a6>
 8011578:	2310      	movs	r3, #16
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157e:	e044      	b.n	801160a <UART_SetConfig+0x5a6>
 8011580:	2320      	movs	r3, #32
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e040      	b.n	801160a <UART_SetConfig+0x5a6>
 8011588:	2340      	movs	r3, #64	; 0x40
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e03c      	b.n	801160a <UART_SetConfig+0x5a6>
 8011590:	2380      	movs	r3, #128	; 0x80
 8011592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011596:	e038      	b.n	801160a <UART_SetConfig+0x5a6>
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4a5b      	ldr	r2, [pc, #364]	; (801170c <UART_SetConfig+0x6a8>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d130      	bne.n	8011604 <UART_SetConfig+0x5a0>
 80115a2:	4b57      	ldr	r3, [pc, #348]	; (8011700 <UART_SetConfig+0x69c>)
 80115a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115a6:	f003 0307 	and.w	r3, r3, #7
 80115aa:	2b05      	cmp	r3, #5
 80115ac:	d826      	bhi.n	80115fc <UART_SetConfig+0x598>
 80115ae:	a201      	add	r2, pc, #4	; (adr r2, 80115b4 <UART_SetConfig+0x550>)
 80115b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b4:	080115cd 	.word	0x080115cd
 80115b8:	080115d5 	.word	0x080115d5
 80115bc:	080115dd 	.word	0x080115dd
 80115c0:	080115e5 	.word	0x080115e5
 80115c4:	080115ed 	.word	0x080115ed
 80115c8:	080115f5 	.word	0x080115f5
 80115cc:	2302      	movs	r3, #2
 80115ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d2:	e01a      	b.n	801160a <UART_SetConfig+0x5a6>
 80115d4:	2304      	movs	r3, #4
 80115d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115da:	e016      	b.n	801160a <UART_SetConfig+0x5a6>
 80115dc:	2308      	movs	r3, #8
 80115de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115e2:	e012      	b.n	801160a <UART_SetConfig+0x5a6>
 80115e4:	2310      	movs	r3, #16
 80115e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ea:	e00e      	b.n	801160a <UART_SetConfig+0x5a6>
 80115ec:	2320      	movs	r3, #32
 80115ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f2:	e00a      	b.n	801160a <UART_SetConfig+0x5a6>
 80115f4:	2340      	movs	r3, #64	; 0x40
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e006      	b.n	801160a <UART_SetConfig+0x5a6>
 80115fc:	2380      	movs	r3, #128	; 0x80
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e002      	b.n	801160a <UART_SetConfig+0x5a6>
 8011604:	2380      	movs	r3, #128	; 0x80
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4a3f      	ldr	r2, [pc, #252]	; (801170c <UART_SetConfig+0x6a8>)
 8011610:	4293      	cmp	r3, r2
 8011612:	f040 80f8 	bne.w	8011806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011616:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801161a:	2b20      	cmp	r3, #32
 801161c:	dc46      	bgt.n	80116ac <UART_SetConfig+0x648>
 801161e:	2b02      	cmp	r3, #2
 8011620:	f2c0 8082 	blt.w	8011728 <UART_SetConfig+0x6c4>
 8011624:	3b02      	subs	r3, #2
 8011626:	2b1e      	cmp	r3, #30
 8011628:	d87e      	bhi.n	8011728 <UART_SetConfig+0x6c4>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <UART_SetConfig+0x5cc>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	080116b3 	.word	0x080116b3
 8011634:	08011729 	.word	0x08011729
 8011638:	080116bb 	.word	0x080116bb
 801163c:	08011729 	.word	0x08011729
 8011640:	08011729 	.word	0x08011729
 8011644:	08011729 	.word	0x08011729
 8011648:	080116cb 	.word	0x080116cb
 801164c:	08011729 	.word	0x08011729
 8011650:	08011729 	.word	0x08011729
 8011654:	08011729 	.word	0x08011729
 8011658:	08011729 	.word	0x08011729
 801165c:	08011729 	.word	0x08011729
 8011660:	08011729 	.word	0x08011729
 8011664:	08011729 	.word	0x08011729
 8011668:	080116db 	.word	0x080116db
 801166c:	08011729 	.word	0x08011729
 8011670:	08011729 	.word	0x08011729
 8011674:	08011729 	.word	0x08011729
 8011678:	08011729 	.word	0x08011729
 801167c:	08011729 	.word	0x08011729
 8011680:	08011729 	.word	0x08011729
 8011684:	08011729 	.word	0x08011729
 8011688:	08011729 	.word	0x08011729
 801168c:	08011729 	.word	0x08011729
 8011690:	08011729 	.word	0x08011729
 8011694:	08011729 	.word	0x08011729
 8011698:	08011729 	.word	0x08011729
 801169c:	08011729 	.word	0x08011729
 80116a0:	08011729 	.word	0x08011729
 80116a4:	08011729 	.word	0x08011729
 80116a8:	0801171b 	.word	0x0801171b
 80116ac:	2b40      	cmp	r3, #64	; 0x40
 80116ae:	d037      	beq.n	8011720 <UART_SetConfig+0x6bc>
 80116b0:	e03a      	b.n	8011728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80116b2:	f7fb fce5 	bl	800d080 <HAL_RCCEx_GetD3PCLK1Freq>
 80116b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116b8:	e03c      	b.n	8011734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fb fcf4 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c8:	e034      	b.n	8011734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ca:	f107 0318 	add.w	r3, r7, #24
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fb fe40 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d8:	e02c      	b.n	8011734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116da:	4b09      	ldr	r3, [pc, #36]	; (8011700 <UART_SetConfig+0x69c>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f003 0320 	and.w	r3, r3, #32
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d016      	beq.n	8011714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116e6:	4b06      	ldr	r3, [pc, #24]	; (8011700 <UART_SetConfig+0x69c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	08db      	lsrs	r3, r3, #3
 80116ec:	f003 0303 	and.w	r3, r3, #3
 80116f0:	4a07      	ldr	r2, [pc, #28]	; (8011710 <UART_SetConfig+0x6ac>)
 80116f2:	fa22 f303 	lsr.w	r3, r2, r3
 80116f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116f8:	e01c      	b.n	8011734 <UART_SetConfig+0x6d0>
 80116fa:	bf00      	nop
 80116fc:	40011400 	.word	0x40011400
 8011700:	58024400 	.word	0x58024400
 8011704:	40007800 	.word	0x40007800
 8011708:	40007c00 	.word	0x40007c00
 801170c:	58000c00 	.word	0x58000c00
 8011710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011714:	4b9d      	ldr	r3, [pc, #628]	; (801198c <UART_SetConfig+0x928>)
 8011716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011718:	e00c      	b.n	8011734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801171a:	4b9d      	ldr	r3, [pc, #628]	; (8011990 <UART_SetConfig+0x92c>)
 801171c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801171e:	e009      	b.n	8011734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011726:	e005      	b.n	8011734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011728:	2300      	movs	r3, #0
 801172a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801172c:	2301      	movs	r3, #1
 801172e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011736:	2b00      	cmp	r3, #0
 8011738:	f000 81de 	beq.w	8011af8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011740:	4a94      	ldr	r2, [pc, #592]	; (8011994 <UART_SetConfig+0x930>)
 8011742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011746:	461a      	mov	r2, r3
 8011748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801174a:	fbb3 f3f2 	udiv	r3, r3, r2
 801174e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	685a      	ldr	r2, [r3, #4]
 8011754:	4613      	mov	r3, r2
 8011756:	005b      	lsls	r3, r3, #1
 8011758:	4413      	add	r3, r2
 801175a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801175c:	429a      	cmp	r2, r3
 801175e:	d305      	bcc.n	801176c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011768:	429a      	cmp	r2, r3
 801176a:	d903      	bls.n	8011774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801176c:	2301      	movs	r3, #1
 801176e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011772:	e1c1      	b.n	8011af8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011776:	2200      	movs	r2, #0
 8011778:	60bb      	str	r3, [r7, #8]
 801177a:	60fa      	str	r2, [r7, #12]
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	4a84      	ldr	r2, [pc, #528]	; (8011994 <UART_SetConfig+0x930>)
 8011782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011786:	b29b      	uxth	r3, r3
 8011788:	2200      	movs	r2, #0
 801178a:	603b      	str	r3, [r7, #0]
 801178c:	607a      	str	r2, [r7, #4]
 801178e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011796:	f7ee fda3 	bl	80002e0 <__aeabi_uldivmod>
 801179a:	4602      	mov	r2, r0
 801179c:	460b      	mov	r3, r1
 801179e:	4610      	mov	r0, r2
 80117a0:	4619      	mov	r1, r3
 80117a2:	f04f 0200 	mov.w	r2, #0
 80117a6:	f04f 0300 	mov.w	r3, #0
 80117aa:	020b      	lsls	r3, r1, #8
 80117ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117b0:	0202      	lsls	r2, r0, #8
 80117b2:	6979      	ldr	r1, [r7, #20]
 80117b4:	6849      	ldr	r1, [r1, #4]
 80117b6:	0849      	lsrs	r1, r1, #1
 80117b8:	2000      	movs	r0, #0
 80117ba:	460c      	mov	r4, r1
 80117bc:	4605      	mov	r5, r0
 80117be:	eb12 0804 	adds.w	r8, r2, r4
 80117c2:	eb43 0905 	adc.w	r9, r3, r5
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	2200      	movs	r2, #0
 80117cc:	469a      	mov	sl, r3
 80117ce:	4693      	mov	fp, r2
 80117d0:	4652      	mov	r2, sl
 80117d2:	465b      	mov	r3, fp
 80117d4:	4640      	mov	r0, r8
 80117d6:	4649      	mov	r1, r9
 80117d8:	f7ee fd82 	bl	80002e0 <__aeabi_uldivmod>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	4613      	mov	r3, r2
 80117e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80117e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80117ea:	d308      	bcc.n	80117fe <UART_SetConfig+0x79a>
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117f2:	d204      	bcs.n	80117fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117fa:	60da      	str	r2, [r3, #12]
 80117fc:	e17c      	b.n	8011af8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80117fe:	2301      	movs	r3, #1
 8011800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011804:	e178      	b.n	8011af8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	69db      	ldr	r3, [r3, #28]
 801180a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801180e:	f040 80c5 	bne.w	801199c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011816:	2b20      	cmp	r3, #32
 8011818:	dc48      	bgt.n	80118ac <UART_SetConfig+0x848>
 801181a:	2b00      	cmp	r3, #0
 801181c:	db7b      	blt.n	8011916 <UART_SetConfig+0x8b2>
 801181e:	2b20      	cmp	r3, #32
 8011820:	d879      	bhi.n	8011916 <UART_SetConfig+0x8b2>
 8011822:	a201      	add	r2, pc, #4	; (adr r2, 8011828 <UART_SetConfig+0x7c4>)
 8011824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011828:	080118b3 	.word	0x080118b3
 801182c:	080118bb 	.word	0x080118bb
 8011830:	08011917 	.word	0x08011917
 8011834:	08011917 	.word	0x08011917
 8011838:	080118c3 	.word	0x080118c3
 801183c:	08011917 	.word	0x08011917
 8011840:	08011917 	.word	0x08011917
 8011844:	08011917 	.word	0x08011917
 8011848:	080118d3 	.word	0x080118d3
 801184c:	08011917 	.word	0x08011917
 8011850:	08011917 	.word	0x08011917
 8011854:	08011917 	.word	0x08011917
 8011858:	08011917 	.word	0x08011917
 801185c:	08011917 	.word	0x08011917
 8011860:	08011917 	.word	0x08011917
 8011864:	08011917 	.word	0x08011917
 8011868:	080118e3 	.word	0x080118e3
 801186c:	08011917 	.word	0x08011917
 8011870:	08011917 	.word	0x08011917
 8011874:	08011917 	.word	0x08011917
 8011878:	08011917 	.word	0x08011917
 801187c:	08011917 	.word	0x08011917
 8011880:	08011917 	.word	0x08011917
 8011884:	08011917 	.word	0x08011917
 8011888:	08011917 	.word	0x08011917
 801188c:	08011917 	.word	0x08011917
 8011890:	08011917 	.word	0x08011917
 8011894:	08011917 	.word	0x08011917
 8011898:	08011917 	.word	0x08011917
 801189c:	08011917 	.word	0x08011917
 80118a0:	08011917 	.word	0x08011917
 80118a4:	08011917 	.word	0x08011917
 80118a8:	08011909 	.word	0x08011909
 80118ac:	2b40      	cmp	r3, #64	; 0x40
 80118ae:	d02e      	beq.n	801190e <UART_SetConfig+0x8aa>
 80118b0:	e031      	b.n	8011916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118b2:	f7f9 fbed 	bl	800b090 <HAL_RCC_GetPCLK1Freq>
 80118b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118b8:	e033      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118ba:	f7f9 fbff 	bl	800b0bc <HAL_RCC_GetPCLK2Freq>
 80118be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118c0:	e02f      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fb fbf0 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118d0:	e027      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118d2:	f107 0318 	add.w	r3, r7, #24
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fb fd3c 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e0:	e01f      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118e2:	4b2d      	ldr	r3, [pc, #180]	; (8011998 <UART_SetConfig+0x934>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f003 0320 	and.w	r3, r3, #32
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d009      	beq.n	8011902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118ee:	4b2a      	ldr	r3, [pc, #168]	; (8011998 <UART_SetConfig+0x934>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	08db      	lsrs	r3, r3, #3
 80118f4:	f003 0303 	and.w	r3, r3, #3
 80118f8:	4a24      	ldr	r2, [pc, #144]	; (801198c <UART_SetConfig+0x928>)
 80118fa:	fa22 f303 	lsr.w	r3, r2, r3
 80118fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011900:	e00f      	b.n	8011922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011902:	4b22      	ldr	r3, [pc, #136]	; (801198c <UART_SetConfig+0x928>)
 8011904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011906:	e00c      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011908:	4b21      	ldr	r3, [pc, #132]	; (8011990 <UART_SetConfig+0x92c>)
 801190a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801190c:	e009      	b.n	8011922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801190e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011914:	e005      	b.n	8011922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011916:	2300      	movs	r3, #0
 8011918:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011924:	2b00      	cmp	r3, #0
 8011926:	f000 80e7 	beq.w	8011af8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192e:	4a19      	ldr	r2, [pc, #100]	; (8011994 <UART_SetConfig+0x930>)
 8011930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011934:	461a      	mov	r2, r3
 8011936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011938:	fbb3 f3f2 	udiv	r3, r3, r2
 801193c:	005a      	lsls	r2, r3, #1
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	085b      	lsrs	r3, r3, #1
 8011944:	441a      	add	r2, r3
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	fbb2 f3f3 	udiv	r3, r2, r3
 801194e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011952:	2b0f      	cmp	r3, #15
 8011954:	d916      	bls.n	8011984 <UART_SetConfig+0x920>
 8011956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801195c:	d212      	bcs.n	8011984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011960:	b29b      	uxth	r3, r3
 8011962:	f023 030f 	bic.w	r3, r3, #15
 8011966:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196a:	085b      	lsrs	r3, r3, #1
 801196c:	b29b      	uxth	r3, r3
 801196e:	f003 0307 	and.w	r3, r3, #7
 8011972:	b29a      	uxth	r2, r3
 8011974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011976:	4313      	orrs	r3, r2
 8011978:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011980:	60da      	str	r2, [r3, #12]
 8011982:	e0b9      	b.n	8011af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801198a:	e0b5      	b.n	8011af8 <UART_SetConfig+0xa94>
 801198c:	03d09000 	.word	0x03d09000
 8011990:	003d0900 	.word	0x003d0900
 8011994:	080176c0 	.word	0x080176c0
 8011998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801199c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119a0:	2b20      	cmp	r3, #32
 80119a2:	dc49      	bgt.n	8011a38 <UART_SetConfig+0x9d4>
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	db7c      	blt.n	8011aa2 <UART_SetConfig+0xa3e>
 80119a8:	2b20      	cmp	r3, #32
 80119aa:	d87a      	bhi.n	8011aa2 <UART_SetConfig+0xa3e>
 80119ac:	a201      	add	r2, pc, #4	; (adr r2, 80119b4 <UART_SetConfig+0x950>)
 80119ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b2:	bf00      	nop
 80119b4:	08011a3f 	.word	0x08011a3f
 80119b8:	08011a47 	.word	0x08011a47
 80119bc:	08011aa3 	.word	0x08011aa3
 80119c0:	08011aa3 	.word	0x08011aa3
 80119c4:	08011a4f 	.word	0x08011a4f
 80119c8:	08011aa3 	.word	0x08011aa3
 80119cc:	08011aa3 	.word	0x08011aa3
 80119d0:	08011aa3 	.word	0x08011aa3
 80119d4:	08011a5f 	.word	0x08011a5f
 80119d8:	08011aa3 	.word	0x08011aa3
 80119dc:	08011aa3 	.word	0x08011aa3
 80119e0:	08011aa3 	.word	0x08011aa3
 80119e4:	08011aa3 	.word	0x08011aa3
 80119e8:	08011aa3 	.word	0x08011aa3
 80119ec:	08011aa3 	.word	0x08011aa3
 80119f0:	08011aa3 	.word	0x08011aa3
 80119f4:	08011a6f 	.word	0x08011a6f
 80119f8:	08011aa3 	.word	0x08011aa3
 80119fc:	08011aa3 	.word	0x08011aa3
 8011a00:	08011aa3 	.word	0x08011aa3
 8011a04:	08011aa3 	.word	0x08011aa3
 8011a08:	08011aa3 	.word	0x08011aa3
 8011a0c:	08011aa3 	.word	0x08011aa3
 8011a10:	08011aa3 	.word	0x08011aa3
 8011a14:	08011aa3 	.word	0x08011aa3
 8011a18:	08011aa3 	.word	0x08011aa3
 8011a1c:	08011aa3 	.word	0x08011aa3
 8011a20:	08011aa3 	.word	0x08011aa3
 8011a24:	08011aa3 	.word	0x08011aa3
 8011a28:	08011aa3 	.word	0x08011aa3
 8011a2c:	08011aa3 	.word	0x08011aa3
 8011a30:	08011aa3 	.word	0x08011aa3
 8011a34:	08011a95 	.word	0x08011a95
 8011a38:	2b40      	cmp	r3, #64	; 0x40
 8011a3a:	d02e      	beq.n	8011a9a <UART_SetConfig+0xa36>
 8011a3c:	e031      	b.n	8011aa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a3e:	f7f9 fb27 	bl	800b090 <HAL_RCC_GetPCLK1Freq>
 8011a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a44:	e033      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a46:	f7f9 fb39 	bl	800b0bc <HAL_RCC_GetPCLK2Freq>
 8011a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a4c:	e02f      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fb fb2a 	bl	800d0ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a5c:	e027      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a5e:	f107 0318 	add.w	r3, r7, #24
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fb fc76 	bl	800d354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a6c:	e01f      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a6e:	4b2d      	ldr	r3, [pc, #180]	; (8011b24 <UART_SetConfig+0xac0>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f003 0320 	and.w	r3, r3, #32
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d009      	beq.n	8011a8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a7a:	4b2a      	ldr	r3, [pc, #168]	; (8011b24 <UART_SetConfig+0xac0>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	08db      	lsrs	r3, r3, #3
 8011a80:	f003 0303 	and.w	r3, r3, #3
 8011a84:	4a28      	ldr	r2, [pc, #160]	; (8011b28 <UART_SetConfig+0xac4>)
 8011a86:	fa22 f303 	lsr.w	r3, r2, r3
 8011a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a8c:	e00f      	b.n	8011aae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011a8e:	4b26      	ldr	r3, [pc, #152]	; (8011b28 <UART_SetConfig+0xac4>)
 8011a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a92:	e00c      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a94:	4b25      	ldr	r3, [pc, #148]	; (8011b2c <UART_SetConfig+0xac8>)
 8011a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a98:	e009      	b.n	8011aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa0:	e005      	b.n	8011aae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011aac:	bf00      	nop
    }

    if (pclk != 0U)
 8011aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d021      	beq.n	8011af8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab8:	4a1d      	ldr	r2, [pc, #116]	; (8011b30 <UART_SetConfig+0xacc>)
 8011aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	085b      	lsrs	r3, r3, #1
 8011acc:	441a      	add	r2, r3
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ad6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ada:	2b0f      	cmp	r3, #15
 8011adc:	d909      	bls.n	8011af2 <UART_SetConfig+0xa8e>
 8011ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ae4:	d205      	bcs.n	8011af2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	60da      	str	r2, [r3, #12]
 8011af0:	e002      	b.n	8011af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	2201      	movs	r2, #1
 8011afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2201      	movs	r2, #1
 8011b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2200      	movs	r2, #0
 8011b12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011b14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3748      	adds	r7, #72	; 0x48
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b22:	bf00      	nop
 8011b24:	58024400 	.word	0x58024400
 8011b28:	03d09000 	.word	0x03d09000
 8011b2c:	003d0900 	.word	0x003d0900
 8011b30:	080176c0 	.word	0x080176c0

08011b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b083      	sub	sp, #12
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b40:	f003 0308 	and.w	r3, r3, #8
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00a      	beq.n	8011b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	430a      	orrs	r2, r1
 8011b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b62:	f003 0301 	and.w	r3, r3, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00a      	beq.n	8011b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	430a      	orrs	r2, r1
 8011b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b84:	f003 0302 	and.w	r3, r3, #2
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d00a      	beq.n	8011ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	430a      	orrs	r2, r1
 8011ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba6:	f003 0304 	and.w	r3, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00a      	beq.n	8011bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	430a      	orrs	r2, r1
 8011bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc8:	f003 0310 	and.w	r3, r3, #16
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00a      	beq.n	8011be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	689b      	ldr	r3, [r3, #8]
 8011bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	430a      	orrs	r2, r1
 8011be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bea:	f003 0320 	and.w	r3, r3, #32
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00a      	beq.n	8011c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	430a      	orrs	r2, r1
 8011c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d01a      	beq.n	8011c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	430a      	orrs	r2, r1
 8011c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c32:	d10a      	bne.n	8011c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	430a      	orrs	r2, r1
 8011c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00a      	beq.n	8011c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	430a      	orrs	r2, r1
 8011c6a:	605a      	str	r2, [r3, #4]
  }
}
 8011c6c:	bf00      	nop
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b098      	sub	sp, #96	; 0x60
 8011c7c:	af02      	add	r7, sp, #8
 8011c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011c88:	f7f2 fab0 	bl	80041ec <HAL_GetTick>
 8011c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f003 0308 	and.w	r3, r3, #8
 8011c98:	2b08      	cmp	r3, #8
 8011c9a:	d12f      	bne.n	8011cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f88e 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d022      	beq.n	8011cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbe:	e853 3f00 	ldrex	r3, [r3]
 8011cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cca:	653b      	str	r3, [r7, #80]	; 0x50
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8011cd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cdc:	e841 2300 	strex	r3, r2, [r1]
 8011ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1e6      	bne.n	8011cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2220      	movs	r2, #32
 8011cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011cf8:	2303      	movs	r3, #3
 8011cfa:	e063      	b.n	8011dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f003 0304 	and.w	r3, r3, #4
 8011d06:	2b04      	cmp	r3, #4
 8011d08:	d149      	bne.n	8011d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d12:	2200      	movs	r2, #0
 8011d14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 f857 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d03c      	beq.n	8011d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	e853 3f00 	ldrex	r3, [r3]
 8011d30:	623b      	str	r3, [r7, #32]
   return(result);
 8011d32:	6a3b      	ldr	r3, [r7, #32]
 8011d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d42:	633b      	str	r3, [r7, #48]	; 0x30
 8011d44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d4a:	e841 2300 	strex	r3, r2, [r1]
 8011d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e6      	bne.n	8011d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	3308      	adds	r3, #8
 8011d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	e853 3f00 	ldrex	r3, [r3]
 8011d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f023 0301 	bic.w	r3, r3, #1
 8011d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3308      	adds	r3, #8
 8011d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d76:	61fa      	str	r2, [r7, #28]
 8011d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	69b9      	ldr	r1, [r7, #24]
 8011d7c:	69fa      	ldr	r2, [r7, #28]
 8011d7e:	e841 2300 	strex	r3, r2, [r1]
 8011d82:	617b      	str	r3, [r7, #20]
   return(result);
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1e5      	bne.n	8011d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2220      	movs	r2, #32
 8011d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2200      	movs	r2, #0
 8011d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d9a:	2303      	movs	r3, #3
 8011d9c:	e012      	b.n	8011dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2220      	movs	r2, #32
 8011da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2220      	movs	r2, #32
 8011daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2200      	movs	r2, #0
 8011db8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3758      	adds	r7, #88	; 0x58
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	603b      	str	r3, [r7, #0]
 8011dd8:	4613      	mov	r3, r2
 8011dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ddc:	e04f      	b.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011de4:	d04b      	beq.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011de6:	f7f2 fa01 	bl	80041ec <HAL_GetTick>
 8011dea:	4602      	mov	r2, r0
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	69ba      	ldr	r2, [r7, #24]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d302      	bcc.n	8011dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d101      	bne.n	8011e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	e04e      	b.n	8011e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 0304 	and.w	r3, r3, #4
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d037      	beq.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	2b80      	cmp	r3, #128	; 0x80
 8011e12:	d034      	beq.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2b40      	cmp	r3, #64	; 0x40
 8011e18:	d031      	beq.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	69db      	ldr	r3, [r3, #28]
 8011e20:	f003 0308 	and.w	r3, r3, #8
 8011e24:	2b08      	cmp	r3, #8
 8011e26:	d110      	bne.n	8011e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2208      	movs	r2, #8
 8011e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e30:	68f8      	ldr	r0, [r7, #12]
 8011e32:	f000 f99d 	bl	8012170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2208      	movs	r2, #8
 8011e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011e46:	2301      	movs	r3, #1
 8011e48:	e029      	b.n	8011e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	69db      	ldr	r3, [r3, #28]
 8011e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e58:	d111      	bne.n	8011e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 f983 	bl	8012170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2220      	movs	r2, #32
 8011e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011e7a:	2303      	movs	r3, #3
 8011e7c:	e00f      	b.n	8011e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	69da      	ldr	r2, [r3, #28]
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	4013      	ands	r3, r2
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	bf0c      	ite	eq
 8011e8e:	2301      	moveq	r3, #1
 8011e90:	2300      	movne	r3, #0
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	461a      	mov	r2, r3
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d0a0      	beq.n	8011dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
	...

08011ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b0a3      	sub	sp, #140	; 0x8c
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	88fa      	ldrh	r2, [r7, #6]
 8011ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	88fa      	ldrh	r2, [r7, #6]
 8011ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eda:	d10e      	bne.n	8011efa <UART_Start_Receive_IT+0x52>
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d105      	bne.n	8011ef0 <UART_Start_Receive_IT+0x48>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011eee:	e02d      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	22ff      	movs	r2, #255	; 0xff
 8011ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ef8:	e028      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d10d      	bne.n	8011f1e <UART_Start_Receive_IT+0x76>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	691b      	ldr	r3, [r3, #16]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d104      	bne.n	8011f14 <UART_Start_Receive_IT+0x6c>
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	22ff      	movs	r2, #255	; 0xff
 8011f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f12:	e01b      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	227f      	movs	r2, #127	; 0x7f
 8011f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f1c:	e016      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f26:	d10d      	bne.n	8011f44 <UART_Start_Receive_IT+0x9c>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	691b      	ldr	r3, [r3, #16]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d104      	bne.n	8011f3a <UART_Start_Receive_IT+0x92>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	227f      	movs	r2, #127	; 0x7f
 8011f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f38:	e008      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	223f      	movs	r2, #63	; 0x3f
 8011f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f42:	e003      	b.n	8011f4c <UART_Start_Receive_IT+0xa4>
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2222      	movs	r2, #34	; 0x22
 8011f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3308      	adds	r3, #8
 8011f62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f66:	e853 3f00 	ldrex	r3, [r3]
 8011f6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f6e:	f043 0301 	orr.w	r3, r3, #1
 8011f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	3308      	adds	r3, #8
 8011f7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011f80:	673a      	str	r2, [r7, #112]	; 0x70
 8011f82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011f86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f88:	e841 2300 	strex	r3, r2, [r1]
 8011f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d1e3      	bne.n	8011f5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f9c:	d14f      	bne.n	801203e <UART_Start_Receive_IT+0x196>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fa4:	88fa      	ldrh	r2, [r7, #6]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d349      	bcc.n	801203e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	689b      	ldr	r3, [r3, #8]
 8011fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fb2:	d107      	bne.n	8011fc4 <UART_Start_Receive_IT+0x11c>
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	691b      	ldr	r3, [r3, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d103      	bne.n	8011fc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	4a47      	ldr	r2, [pc, #284]	; (80120dc <UART_Start_Receive_IT+0x234>)
 8011fc0:	675a      	str	r2, [r3, #116]	; 0x74
 8011fc2:	e002      	b.n	8011fca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	4a46      	ldr	r2, [pc, #280]	; (80120e0 <UART_Start_Receive_IT+0x238>)
 8011fc8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d01a      	beq.n	8012008 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fda:	e853 3f00 	ldrex	r3, [r3]
 8011fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ff6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ffa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ffc:	e841 2300 	strex	r3, r2, [r1]
 8012000:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012004:	2b00      	cmp	r3, #0
 8012006:	d1e4      	bne.n	8011fd2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3308      	adds	r3, #8
 801200e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801201e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	3308      	adds	r3, #8
 8012026:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012028:	64ba      	str	r2, [r7, #72]	; 0x48
 801202a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801202e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e5      	bne.n	8012008 <UART_Start_Receive_IT+0x160>
 801203c:	e046      	b.n	80120cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012046:	d107      	bne.n	8012058 <UART_Start_Receive_IT+0x1b0>
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	691b      	ldr	r3, [r3, #16]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	4a24      	ldr	r2, [pc, #144]	; (80120e4 <UART_Start_Receive_IT+0x23c>)
 8012054:	675a      	str	r2, [r3, #116]	; 0x74
 8012056:	e002      	b.n	801205e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4a23      	ldr	r2, [pc, #140]	; (80120e8 <UART_Start_Receive_IT+0x240>)
 801205c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d019      	beq.n	801209a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206e:	e853 3f00 	ldrex	r3, [r3]
 8012072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801207a:	677b      	str	r3, [r7, #116]	; 0x74
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	461a      	mov	r2, r3
 8012082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012084:	637b      	str	r3, [r7, #52]	; 0x34
 8012086:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801208a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801208c:	e841 2300 	strex	r3, r2, [r1]
 8012090:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1e6      	bne.n	8012066 <UART_Start_Receive_IT+0x1be>
 8012098:	e018      	b.n	80120cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	e853 3f00 	ldrex	r3, [r3]
 80120a6:	613b      	str	r3, [r7, #16]
   return(result);
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	f043 0320 	orr.w	r3, r3, #32
 80120ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	461a      	mov	r2, r3
 80120b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120b8:	623b      	str	r3, [r7, #32]
 80120ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120bc:	69f9      	ldr	r1, [r7, #28]
 80120be:	6a3a      	ldr	r2, [r7, #32]
 80120c0:	e841 2300 	strex	r3, r2, [r1]
 80120c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1e6      	bne.n	801209a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	378c      	adds	r7, #140	; 0x8c
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	08012ac1 	.word	0x08012ac1
 80120e0:	08012761 	.word	0x08012761
 80120e4:	080125a9 	.word	0x080125a9
 80120e8:	080123f1 	.word	0x080123f1

080120ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80120ec:	b480      	push	{r7}
 80120ee:	b08f      	sub	sp, #60	; 0x3c
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	61fb      	str	r3, [r7, #28]
   return(result);
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012108:	637b      	str	r3, [r7, #52]	; 0x34
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	461a      	mov	r2, r3
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012114:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801211a:	e841 2300 	strex	r3, r2, [r1]
 801211e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e6      	bne.n	80120f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3308      	adds	r3, #8
 801212c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	e853 3f00 	ldrex	r3, [r3]
 8012134:	60bb      	str	r3, [r7, #8]
   return(result);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801213c:	633b      	str	r3, [r7, #48]	; 0x30
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3308      	adds	r3, #8
 8012144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012146:	61ba      	str	r2, [r7, #24]
 8012148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214a:	6979      	ldr	r1, [r7, #20]
 801214c:	69ba      	ldr	r2, [r7, #24]
 801214e:	e841 2300 	strex	r3, r2, [r1]
 8012152:	613b      	str	r3, [r7, #16]
   return(result);
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1e5      	bne.n	8012126 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2220      	movs	r2, #32
 801215e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8012162:	bf00      	nop
 8012164:	373c      	adds	r7, #60	; 0x3c
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr
	...

08012170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012170:	b480      	push	{r7}
 8012172:	b095      	sub	sp, #84	; 0x54
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012180:	e853 3f00 	ldrex	r3, [r3]
 8012184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801218c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	461a      	mov	r2, r3
 8012194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012196:	643b      	str	r3, [r7, #64]	; 0x40
 8012198:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801219a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801219c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801219e:	e841 2300 	strex	r3, r2, [r1]
 80121a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80121a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d1e6      	bne.n	8012178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	3308      	adds	r3, #8
 80121b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	e853 3f00 	ldrex	r3, [r3]
 80121b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	4b1e      	ldr	r3, [pc, #120]	; (8012238 <UART_EndRxTransfer+0xc8>)
 80121be:	4013      	ands	r3, r2
 80121c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	3308      	adds	r3, #8
 80121c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d2:	e841 2300 	strex	r3, r2, [r1]
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1e5      	bne.n	80121aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d118      	bne.n	8012218 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	e853 3f00 	ldrex	r3, [r3]
 80121f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	f023 0310 	bic.w	r3, r3, #16
 80121fa:	647b      	str	r3, [r7, #68]	; 0x44
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	461a      	mov	r2, r3
 8012202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012204:	61bb      	str	r3, [r7, #24]
 8012206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012208:	6979      	ldr	r1, [r7, #20]
 801220a:	69ba      	ldr	r2, [r7, #24]
 801220c:	e841 2300 	strex	r3, r2, [r1]
 8012210:	613b      	str	r3, [r7, #16]
   return(result);
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d1e6      	bne.n	80121e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2220      	movs	r2, #32
 801221c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801222c:	bf00      	nop
 801222e:	3754      	adds	r7, #84	; 0x54
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr
 8012238:	effffffe 	.word	0xeffffffe

0801223c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b090      	sub	sp, #64	; 0x40
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012248:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	69db      	ldr	r3, [r3, #28]
 801224e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012252:	d037      	beq.n	80122c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012256:	2200      	movs	r2, #0
 8012258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3308      	adds	r3, #8
 8012262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	e853 3f00 	ldrex	r3, [r3]
 801226a:	623b      	str	r3, [r7, #32]
   return(result);
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012272:	63bb      	str	r3, [r7, #56]	; 0x38
 8012274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	3308      	adds	r3, #8
 801227a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801227c:	633a      	str	r2, [r7, #48]	; 0x30
 801227e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012284:	e841 2300 	strex	r3, r2, [r1]
 8012288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1e5      	bne.n	801225c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	e853 3f00 	ldrex	r3, [r3]
 801229c:	60fb      	str	r3, [r7, #12]
   return(result);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122a4:	637b      	str	r3, [r7, #52]	; 0x34
 80122a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	461a      	mov	r2, r3
 80122ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ae:	61fb      	str	r3, [r7, #28]
 80122b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b2:	69b9      	ldr	r1, [r7, #24]
 80122b4:	69fa      	ldr	r2, [r7, #28]
 80122b6:	e841 2300 	strex	r3, r2, [r1]
 80122ba:	617b      	str	r3, [r7, #20]
   return(result);
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1e6      	bne.n	8012290 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80122c2:	e002      	b.n	80122ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80122c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80122c6:	f7ef fd13 	bl	8001cf0 <HAL_UART_TxCpltCallback>
}
 80122ca:	bf00      	nop
 80122cc:	3740      	adds	r7, #64	; 0x40
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b084      	sub	sp, #16
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7fe fe9f 	bl	8011024 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122e6:	bf00      	nop
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b086      	sub	sp, #24
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012302:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801230a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	689b      	ldr	r3, [r3, #8]
 8012312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012316:	2b80      	cmp	r3, #128	; 0x80
 8012318:	d109      	bne.n	801232e <UART_DMAError+0x40>
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	2b21      	cmp	r3, #33	; 0x21
 801231e:	d106      	bne.n	801232e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	2200      	movs	r2, #0
 8012324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012328:	6978      	ldr	r0, [r7, #20]
 801232a:	f7ff fedf 	bl	80120ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012338:	2b40      	cmp	r3, #64	; 0x40
 801233a:	d109      	bne.n	8012350 <UART_DMAError+0x62>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b22      	cmp	r3, #34	; 0x22
 8012340:	d106      	bne.n	8012350 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	2200      	movs	r2, #0
 8012346:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801234a:	6978      	ldr	r0, [r7, #20]
 801234c:	f7ff ff10 	bl	8012170 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012356:	f043 0210 	orr.w	r2, r3, #16
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012360:	6978      	ldr	r0, [r7, #20]
 8012362:	f7fe fe69 	bl	8011038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012366:	bf00      	nop
 8012368:	3718      	adds	r7, #24
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}

0801236e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801236e:	b580      	push	{r7, lr}
 8012370:	b084      	sub	sp, #16
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801237a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2200      	movs	r2, #0
 8012380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7fe fe53 	bl	8011038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012392:	bf00      	nop
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b088      	sub	sp, #32
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	e853 3f00 	ldrex	r3, [r3]
 80123ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123b6:	61fb      	str	r3, [r7, #28]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	461a      	mov	r2, r3
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	61bb      	str	r3, [r7, #24]
 80123c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c4:	6979      	ldr	r1, [r7, #20]
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	e841 2300 	strex	r3, r2, [r1]
 80123cc:	613b      	str	r3, [r7, #16]
   return(result);
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1e6      	bne.n	80123a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2220      	movs	r2, #32
 80123d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7ef fc84 	bl	8001cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123e8:	bf00      	nop
 80123ea:	3720      	adds	r7, #32
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b09c      	sub	sp, #112	; 0x70
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012408:	2b22      	cmp	r3, #34	; 0x22
 801240a:	f040 80be 	bne.w	801258a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012418:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801241c:	b2d9      	uxtb	r1, r3
 801241e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012422:	b2da      	uxtb	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012428:	400a      	ands	r2, r1
 801242a:	b2d2      	uxtb	r2, r2
 801242c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012432:	1c5a      	adds	r2, r3, #1
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801243e:	b29b      	uxth	r3, r3
 8012440:	3b01      	subs	r3, #1
 8012442:	b29a      	uxth	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012450:	b29b      	uxth	r3, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	f040 80a1 	bne.w	801259a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012460:	e853 3f00 	ldrex	r3, [r3]
 8012464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801246c:	66bb      	str	r3, [r7, #104]	; 0x68
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012476:	65bb      	str	r3, [r7, #88]	; 0x58
 8012478:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801247a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801247c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801247e:	e841 2300 	strex	r3, r2, [r1]
 8012482:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1e6      	bne.n	8012458 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3308      	adds	r3, #8
 8012490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012494:	e853 3f00 	ldrex	r3, [r3]
 8012498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249c:	f023 0301 	bic.w	r3, r3, #1
 80124a0:	667b      	str	r3, [r7, #100]	; 0x64
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	3308      	adds	r3, #8
 80124a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80124aa:	647a      	str	r2, [r7, #68]	; 0x44
 80124ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124b2:	e841 2300 	strex	r3, r2, [r1]
 80124b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80124b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1e5      	bne.n	801248a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2220      	movs	r2, #32
 80124c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a33      	ldr	r2, [pc, #204]	; (80125a4 <UART_RxISR_8BIT+0x1b4>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d01f      	beq.n	801251c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d018      	beq.n	801251c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	e853 3f00 	ldrex	r3, [r3]
 80124f6:	623b      	str	r3, [r7, #32]
   return(result);
 80124f8:	6a3b      	ldr	r3, [r7, #32]
 80124fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80124fe:	663b      	str	r3, [r7, #96]	; 0x60
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	461a      	mov	r2, r3
 8012506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012508:	633b      	str	r3, [r7, #48]	; 0x30
 801250a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801250c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801250e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012510:	e841 2300 	strex	r3, r2, [r1]
 8012514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1e6      	bne.n	80124ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012520:	2b01      	cmp	r3, #1
 8012522:	d12e      	bne.n	8012582 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	e853 3f00 	ldrex	r3, [r3]
 8012536:	60fb      	str	r3, [r7, #12]
   return(result);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f023 0310 	bic.w	r3, r3, #16
 801253e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	461a      	mov	r2, r3
 8012546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012548:	61fb      	str	r3, [r7, #28]
 801254a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801254c:	69b9      	ldr	r1, [r7, #24]
 801254e:	69fa      	ldr	r2, [r7, #28]
 8012550:	e841 2300 	strex	r3, r2, [r1]
 8012554:	617b      	str	r3, [r7, #20]
   return(result);
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1e6      	bne.n	801252a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	69db      	ldr	r3, [r3, #28]
 8012562:	f003 0310 	and.w	r3, r3, #16
 8012566:	2b10      	cmp	r3, #16
 8012568:	d103      	bne.n	8012572 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2210      	movs	r2, #16
 8012570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7fe fd66 	bl	801104c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012580:	e00b      	b.n	801259a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ee ff70 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 8012588:	e007      	b.n	801259a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	699a      	ldr	r2, [r3, #24]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f042 0208 	orr.w	r2, r2, #8
 8012598:	619a      	str	r2, [r3, #24]
}
 801259a:	bf00      	nop
 801259c:	3770      	adds	r7, #112	; 0x70
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	58000c00 	.word	0x58000c00

080125a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b09c      	sub	sp, #112	; 0x70
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125c0:	2b22      	cmp	r3, #34	; 0x22
 80125c2:	f040 80be 	bne.w	8012742 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80125d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80125da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80125de:	4013      	ands	r3, r2
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80125e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ea:	1c9a      	adds	r2, r3, #2
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	3b01      	subs	r3, #1
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012608:	b29b      	uxth	r3, r3
 801260a:	2b00      	cmp	r3, #0
 801260c:	f040 80a1 	bne.w	8012752 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012618:	e853 3f00 	ldrex	r3, [r3]
 801261c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012624:	667b      	str	r3, [r7, #100]	; 0x64
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	461a      	mov	r2, r3
 801262c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801262e:	657b      	str	r3, [r7, #84]	; 0x54
 8012630:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012636:	e841 2300 	strex	r3, r2, [r1]
 801263a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801263c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1e6      	bne.n	8012610 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	3308      	adds	r3, #8
 8012648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801264c:	e853 3f00 	ldrex	r3, [r3]
 8012650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012654:	f023 0301 	bic.w	r3, r3, #1
 8012658:	663b      	str	r3, [r7, #96]	; 0x60
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	3308      	adds	r3, #8
 8012660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012662:	643a      	str	r2, [r7, #64]	; 0x40
 8012664:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801266a:	e841 2300 	strex	r3, r2, [r1]
 801266e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1e5      	bne.n	8012642 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2220      	movs	r2, #32
 801267a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	4a33      	ldr	r2, [pc, #204]	; (801275c <UART_RxISR_16BIT+0x1b4>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d01f      	beq.n	80126d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d018      	beq.n	80126d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	e853 3f00 	ldrex	r3, [r3]
 80126ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	461a      	mov	r2, r3
 80126be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126c8:	e841 2300 	strex	r3, r2, [r1]
 80126cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e6      	bne.n	80126a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d12e      	bne.n	801273a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2200      	movs	r2, #0
 80126e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	e853 3f00 	ldrex	r3, [r3]
 80126ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	f023 0310 	bic.w	r3, r3, #16
 80126f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	461a      	mov	r2, r3
 80126fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012700:	61bb      	str	r3, [r7, #24]
 8012702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012704:	6979      	ldr	r1, [r7, #20]
 8012706:	69ba      	ldr	r2, [r7, #24]
 8012708:	e841 2300 	strex	r3, r2, [r1]
 801270c:	613b      	str	r3, [r7, #16]
   return(result);
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d1e6      	bne.n	80126e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	69db      	ldr	r3, [r3, #28]
 801271a:	f003 0310 	and.w	r3, r3, #16
 801271e:	2b10      	cmp	r3, #16
 8012720:	d103      	bne.n	801272a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2210      	movs	r2, #16
 8012728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012730:	4619      	mov	r1, r3
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7fe fc8a 	bl	801104c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012738:	e00b      	b.n	8012752 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7ee fe94 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 8012740:	e007      	b.n	8012752 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	699a      	ldr	r2, [r3, #24]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f042 0208 	orr.w	r2, r2, #8
 8012750:	619a      	str	r2, [r3, #24]
}
 8012752:	bf00      	nop
 8012754:	3770      	adds	r7, #112	; 0x70
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	58000c00 	.word	0x58000c00

08012760 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b0ac      	sub	sp, #176	; 0xb0
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801276e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	69db      	ldr	r3, [r3, #28]
 8012778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012796:	2b22      	cmp	r3, #34	; 0x22
 8012798:	f040 8180 	bne.w	8012a9c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127a6:	e123      	b.n	80129f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80127b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80127b6:	b2d9      	uxtb	r1, r3
 80127b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80127bc:	b2da      	uxtb	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127c2:	400a      	ands	r2, r1
 80127c4:	b2d2      	uxtb	r2, r2
 80127c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127cc:	1c5a      	adds	r2, r3, #1
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127d8:	b29b      	uxth	r3, r3
 80127da:	3b01      	subs	r3, #1
 80127dc:	b29a      	uxth	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127f2:	f003 0307 	and.w	r3, r3, #7
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d053      	beq.n	80128a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127fe:	f003 0301 	and.w	r3, r3, #1
 8012802:	2b00      	cmp	r3, #0
 8012804:	d011      	beq.n	801282a <UART_RxISR_8BIT_FIFOEN+0xca>
 8012806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801280e:	2b00      	cmp	r3, #0
 8012810:	d00b      	beq.n	801282a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2201      	movs	r2, #1
 8012818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012820:	f043 0201 	orr.w	r2, r3, #1
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801282a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801282e:	f003 0302 	and.w	r3, r3, #2
 8012832:	2b00      	cmp	r3, #0
 8012834:	d011      	beq.n	801285a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801283a:	f003 0301 	and.w	r3, r3, #1
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00b      	beq.n	801285a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2202      	movs	r2, #2
 8012848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012850:	f043 0204 	orr.w	r2, r3, #4
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801285e:	f003 0304 	and.w	r3, r3, #4
 8012862:	2b00      	cmp	r3, #0
 8012864:	d011      	beq.n	801288a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801286a:	f003 0301 	and.w	r3, r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00b      	beq.n	801288a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2204      	movs	r2, #4
 8012878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012880:	f043 0202 	orr.w	r2, r3, #2
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012890:	2b00      	cmp	r3, #0
 8012892:	d006      	beq.n	80128a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7fe fbcf 	bl	8011038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f040 80a0 	bne.w	80129f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128b8:	e853 3f00 	ldrex	r3, [r3]
 80128bc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80128be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	461a      	mov	r2, r3
 80128ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80128d4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80128d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80128da:	e841 2300 	strex	r3, r2, [r1]
 80128de:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80128e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1e4      	bne.n	80128b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3308      	adds	r3, #8
 80128ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128f0:	e853 3f00 	ldrex	r3, [r3]
 80128f4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80128f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80128f8:	4b6e      	ldr	r3, [pc, #440]	; (8012ab4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80128fa:	4013      	ands	r3, r2
 80128fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	3308      	adds	r3, #8
 8012906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801290a:	66ba      	str	r2, [r7, #104]	; 0x68
 801290c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012912:	e841 2300 	strex	r3, r2, [r1]
 8012916:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1e3      	bne.n	80128e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2220      	movs	r2, #32
 8012922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2200      	movs	r2, #0
 8012930:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a60      	ldr	r2, [pc, #384]	; (8012ab8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d021      	beq.n	8012980 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012946:	2b00      	cmp	r3, #0
 8012948:	d01a      	beq.n	8012980 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012952:	e853 3f00 	ldrex	r3, [r3]
 8012956:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801295a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801295e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	461a      	mov	r2, r3
 8012968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801296c:	657b      	str	r3, [r7, #84]	; 0x54
 801296e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012970:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012974:	e841 2300 	strex	r3, r2, [r1]
 8012978:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801297c:	2b00      	cmp	r3, #0
 801297e:	d1e4      	bne.n	801294a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012984:	2b01      	cmp	r3, #1
 8012986:	d130      	bne.n	80129ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012996:	e853 3f00 	ldrex	r3, [r3]
 801299a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299e:	f023 0310 	bic.w	r3, r3, #16
 80129a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	461a      	mov	r2, r3
 80129ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80129b0:	643b      	str	r3, [r7, #64]	; 0x40
 80129b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129b8:	e841 2300 	strex	r3, r2, [r1]
 80129bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80129be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1e4      	bne.n	801298e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	69db      	ldr	r3, [r3, #28]
 80129ca:	f003 0310 	and.w	r3, r3, #16
 80129ce:	2b10      	cmp	r3, #16
 80129d0:	d103      	bne.n	80129da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2210      	movs	r2, #16
 80129d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129e0:	4619      	mov	r1, r3
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f7fe fb32 	bl	801104c <HAL_UARTEx_RxEventCallback>
 80129e8:	e002      	b.n	80129f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f7ee fd3c 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d006      	beq.n	8012a06 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80129f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129fc:	f003 0320 	and.w	r3, r3, #32
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f47f aed1 	bne.w	80127a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d049      	beq.n	8012aac <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a1e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d242      	bcs.n	8012aac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	3308      	adds	r3, #8
 8012a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a2e:	6a3b      	ldr	r3, [r7, #32]
 8012a30:	e853 3f00 	ldrex	r3, [r3]
 8012a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a36:	69fb      	ldr	r3, [r7, #28]
 8012a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	3308      	adds	r3, #8
 8012a46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a52:	e841 2300 	strex	r3, r2, [r1]
 8012a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d1e3      	bne.n	8012a26 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4a16      	ldr	r2, [pc, #88]	; (8012abc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012a62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	e853 3f00 	ldrex	r3, [r3]
 8012a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	f043 0320 	orr.w	r3, r3, #32
 8012a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	461a      	mov	r2, r3
 8012a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a86:	61bb      	str	r3, [r7, #24]
 8012a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a8a:	6979      	ldr	r1, [r7, #20]
 8012a8c:	69ba      	ldr	r2, [r7, #24]
 8012a8e:	e841 2300 	strex	r3, r2, [r1]
 8012a92:	613b      	str	r3, [r7, #16]
   return(result);
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d1e4      	bne.n	8012a64 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a9a:	e007      	b.n	8012aac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	699a      	ldr	r2, [r3, #24]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f042 0208 	orr.w	r2, r2, #8
 8012aaa:	619a      	str	r2, [r3, #24]
}
 8012aac:	bf00      	nop
 8012aae:	37b0      	adds	r7, #176	; 0xb0
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	effffffe 	.word	0xeffffffe
 8012ab8:	58000c00 	.word	0x58000c00
 8012abc:	080123f1 	.word	0x080123f1

08012ac0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b0ae      	sub	sp, #184	; 0xb8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ace:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	69db      	ldr	r3, [r3, #28]
 8012ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	689b      	ldr	r3, [r3, #8]
 8012aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012af6:	2b22      	cmp	r3, #34	; 0x22
 8012af8:	f040 8184 	bne.w	8012e04 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b02:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012b06:	e127      	b.n	8012d58 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012b1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012b1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012b22:	4013      	ands	r3, r2
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b30:	1c9a      	adds	r2, r3, #2
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	69db      	ldr	r3, [r3, #28]
 8012b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b56:	f003 0307 	and.w	r3, r3, #7
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d053      	beq.n	8012c06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b62:	f003 0301 	and.w	r3, r3, #1
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d011      	beq.n	8012b8e <UART_RxISR_16BIT_FIFOEN+0xce>
 8012b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d00b      	beq.n	8012b8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b84:	f043 0201 	orr.w	r2, r3, #1
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b92:	f003 0302 	and.w	r3, r3, #2
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d011      	beq.n	8012bbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b9e:	f003 0301 	and.w	r3, r3, #1
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00b      	beq.n	8012bbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2202      	movs	r2, #2
 8012bac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bb4:	f043 0204 	orr.w	r2, r3, #4
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012bc2:	f003 0304 	and.w	r3, r3, #4
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d011      	beq.n	8012bee <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012bce:	f003 0301 	and.w	r3, r3, #1
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d00b      	beq.n	8012bee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2204      	movs	r2, #4
 8012bdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012be4:	f043 0202 	orr.w	r2, r3, #2
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d006      	beq.n	8012c06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7fe fa1d 	bl	8011038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f040 80a2 	bne.w	8012d58 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c1c:	e853 3f00 	ldrex	r3, [r3]
 8012c20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	461a      	mov	r2, r3
 8012c32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012c3a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c42:	e841 2300 	strex	r3, r2, [r1]
 8012c46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d1e2      	bne.n	8012c14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3308      	adds	r3, #8
 8012c54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c58:	e853 3f00 	ldrex	r3, [r3]
 8012c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012c60:	4b6e      	ldr	r3, [pc, #440]	; (8012e1c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012c62:	4013      	ands	r3, r2
 8012c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012c72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012c74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012c7a:	e841 2300 	strex	r3, r2, [r1]
 8012c7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d1e3      	bne.n	8012c4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2220      	movs	r2, #32
 8012c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4a60      	ldr	r2, [pc, #384]	; (8012e20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d021      	beq.n	8012ce8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d01a      	beq.n	8012ce8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cba:	e853 3f00 	ldrex	r3, [r3]
 8012cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8012cd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012cda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012cdc:	e841 2300 	strex	r3, r2, [r1]
 8012ce0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d1e4      	bne.n	8012cb2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d130      	bne.n	8012d52 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfe:	e853 3f00 	ldrex	r3, [r3]
 8012d02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d06:	f023 0310 	bic.w	r3, r3, #16
 8012d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	461a      	mov	r2, r3
 8012d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012d18:	647b      	str	r3, [r7, #68]	; 0x44
 8012d1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d20:	e841 2300 	strex	r3, r2, [r1]
 8012d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1e4      	bne.n	8012cf6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	69db      	ldr	r3, [r3, #28]
 8012d32:	f003 0310 	and.w	r3, r3, #16
 8012d36:	2b10      	cmp	r3, #16
 8012d38:	d103      	bne.n	8012d42 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2210      	movs	r2, #16
 8012d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012d48:	4619      	mov	r1, r3
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7fe f97e 	bl	801104c <HAL_UARTEx_RxEventCallback>
 8012d50:	e002      	b.n	8012d58 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ee fb88 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012d58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d006      	beq.n	8012d6e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012d64:	f003 0320 	and.w	r3, r3, #32
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f47f aecd 	bne.w	8012b08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012d74:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012d78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d049      	beq.n	8012e14 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d86:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d242      	bcs.n	8012e14 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	3308      	adds	r3, #8
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d98:	e853 3f00 	ldrex	r3, [r3]
 8012d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8012d9e:	6a3b      	ldr	r3, [r7, #32]
 8012da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	3308      	adds	r3, #8
 8012dae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012db2:	633a      	str	r2, [r7, #48]	; 0x30
 8012db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dba:	e841 2300 	strex	r3, r2, [r1]
 8012dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1e3      	bne.n	8012d8e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4a16      	ldr	r2, [pc, #88]	; (8012e24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012dca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	e853 3f00 	ldrex	r3, [r3]
 8012dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f043 0320 	orr.w	r3, r3, #32
 8012de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dee:	61fb      	str	r3, [r7, #28]
 8012df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df2:	69b9      	ldr	r1, [r7, #24]
 8012df4:	69fa      	ldr	r2, [r7, #28]
 8012df6:	e841 2300 	strex	r3, r2, [r1]
 8012dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1e4      	bne.n	8012dcc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012e02:	e007      	b.n	8012e14 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	699a      	ldr	r2, [r3, #24]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f042 0208 	orr.w	r2, r2, #8
 8012e12:	619a      	str	r2, [r3, #24]
}
 8012e14:	bf00      	nop
 8012e16:	37b8      	adds	r7, #184	; 0xb8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	effffffe 	.word	0xeffffffe
 8012e20:	58000c00 	.word	0x58000c00
 8012e24:	080125a9 	.word	0x080125a9

08012e28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012e30:	bf00      	nop
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012e44:	bf00      	nop
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012e58:	bf00      	nop
 8012e5a:	370c      	adds	r7, #12
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d101      	bne.n	8012e7a <HAL_UARTEx_DisableFifoMode+0x16>
 8012e76:	2302      	movs	r3, #2
 8012e78:	e027      	b.n	8012eca <HAL_UARTEx_DisableFifoMode+0x66>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2224      	movs	r2, #36	; 0x24
 8012e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f022 0201 	bic.w	r2, r2, #1
 8012ea0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2220      	movs	r2, #32
 8012ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3714      	adds	r7, #20
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed4:	4770      	bx	lr

08012ed6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b084      	sub	sp, #16
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
 8012ede:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d101      	bne.n	8012eee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012eea:	2302      	movs	r3, #2
 8012eec:	e02d      	b.n	8012f4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2224      	movs	r2, #36	; 0x24
 8012efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f022 0201 	bic.w	r2, r2, #1
 8012f14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	689b      	ldr	r3, [r3, #8]
 8012f1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	430a      	orrs	r2, r1
 8012f28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 f850 	bl	8012fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	68fa      	ldr	r2, [r7, #12]
 8012f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2220      	movs	r2, #32
 8012f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b084      	sub	sp, #16
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
 8012f5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d101      	bne.n	8012f6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f66:	2302      	movs	r3, #2
 8012f68:	e02d      	b.n	8012fc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2224      	movs	r2, #36	; 0x24
 8012f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f022 0201 	bic.w	r2, r2, #1
 8012f90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	430a      	orrs	r2, r1
 8012fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 f812 	bl	8012fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	68fa      	ldr	r2, [r7, #12]
 8012fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2220      	movs	r2, #32
 8012fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fc4:	2300      	movs	r3, #0
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
	...

08012fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d108      	bne.n	8012ff2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2201      	movs	r2, #1
 8012fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ff0:	e031      	b.n	8013056 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ff2:	2310      	movs	r3, #16
 8012ff4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ff6:	2310      	movs	r3, #16
 8012ff8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	0e5b      	lsrs	r3, r3, #25
 8013002:	b2db      	uxtb	r3, r3
 8013004:	f003 0307 	and.w	r3, r3, #7
 8013008:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	0f5b      	lsrs	r3, r3, #29
 8013012:	b2db      	uxtb	r3, r3
 8013014:	f003 0307 	and.w	r3, r3, #7
 8013018:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801301a:	7bbb      	ldrb	r3, [r7, #14]
 801301c:	7b3a      	ldrb	r2, [r7, #12]
 801301e:	4911      	ldr	r1, [pc, #68]	; (8013064 <UARTEx_SetNbDataToProcess+0x94>)
 8013020:	5c8a      	ldrb	r2, [r1, r2]
 8013022:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013026:	7b3a      	ldrb	r2, [r7, #12]
 8013028:	490f      	ldr	r1, [pc, #60]	; (8013068 <UARTEx_SetNbDataToProcess+0x98>)
 801302a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801302c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013030:	b29a      	uxth	r2, r3
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013038:	7bfb      	ldrb	r3, [r7, #15]
 801303a:	7b7a      	ldrb	r2, [r7, #13]
 801303c:	4909      	ldr	r1, [pc, #36]	; (8013064 <UARTEx_SetNbDataToProcess+0x94>)
 801303e:	5c8a      	ldrb	r2, [r1, r2]
 8013040:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013044:	7b7a      	ldrb	r2, [r7, #13]
 8013046:	4908      	ldr	r1, [pc, #32]	; (8013068 <UARTEx_SetNbDataToProcess+0x98>)
 8013048:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801304a:	fb93 f3f2 	sdiv	r3, r3, r2
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013056:	bf00      	nop
 8013058:	3714      	adds	r7, #20
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr
 8013062:	bf00      	nop
 8013064:	080176d8 	.word	0x080176d8
 8013068:	080176e0 	.word	0x080176e0

0801306c <__NVIC_SetPriority>:
{
 801306c:	b480      	push	{r7}
 801306e:	b083      	sub	sp, #12
 8013070:	af00      	add	r7, sp, #0
 8013072:	4603      	mov	r3, r0
 8013074:	6039      	str	r1, [r7, #0]
 8013076:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801307c:	2b00      	cmp	r3, #0
 801307e:	db0a      	blt.n	8013096 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	b2da      	uxtb	r2, r3
 8013084:	490c      	ldr	r1, [pc, #48]	; (80130b8 <__NVIC_SetPriority+0x4c>)
 8013086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801308a:	0112      	lsls	r2, r2, #4
 801308c:	b2d2      	uxtb	r2, r2
 801308e:	440b      	add	r3, r1
 8013090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013094:	e00a      	b.n	80130ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	b2da      	uxtb	r2, r3
 801309a:	4908      	ldr	r1, [pc, #32]	; (80130bc <__NVIC_SetPriority+0x50>)
 801309c:	88fb      	ldrh	r3, [r7, #6]
 801309e:	f003 030f 	and.w	r3, r3, #15
 80130a2:	3b04      	subs	r3, #4
 80130a4:	0112      	lsls	r2, r2, #4
 80130a6:	b2d2      	uxtb	r2, r2
 80130a8:	440b      	add	r3, r1
 80130aa:	761a      	strb	r2, [r3, #24]
}
 80130ac:	bf00      	nop
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	e000e100 	.word	0xe000e100
 80130bc:	e000ed00 	.word	0xe000ed00

080130c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80130c0:	b580      	push	{r7, lr}
 80130c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80130c4:	4b05      	ldr	r3, [pc, #20]	; (80130dc <SysTick_Handler+0x1c>)
 80130c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80130c8:	f002 fae2 	bl	8015690 <xTaskGetSchedulerState>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d001      	beq.n	80130d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80130d2:	f003 f901 	bl	80162d8 <xPortSysTickHandler>
  }
}
 80130d6:	bf00      	nop
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	e000e010 	.word	0xe000e010

080130e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80130e0:	b580      	push	{r7, lr}
 80130e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80130e4:	2100      	movs	r1, #0
 80130e6:	f06f 0004 	mvn.w	r0, #4
 80130ea:	f7ff ffbf 	bl	801306c <__NVIC_SetPriority>
#endif
}
 80130ee:	bf00      	nop
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130fa:	f3ef 8305 	mrs	r3, IPSR
 80130fe:	603b      	str	r3, [r7, #0]
  return(result);
 8013100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013102:	2b00      	cmp	r3, #0
 8013104:	d003      	beq.n	801310e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013106:	f06f 0305 	mvn.w	r3, #5
 801310a:	607b      	str	r3, [r7, #4]
 801310c:	e00c      	b.n	8013128 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801310e:	4b0a      	ldr	r3, [pc, #40]	; (8013138 <osKernelInitialize+0x44>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d105      	bne.n	8013122 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013116:	4b08      	ldr	r3, [pc, #32]	; (8013138 <osKernelInitialize+0x44>)
 8013118:	2201      	movs	r2, #1
 801311a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801311c:	2300      	movs	r3, #0
 801311e:	607b      	str	r3, [r7, #4]
 8013120:	e002      	b.n	8013128 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013128:	687b      	ldr	r3, [r7, #4]
}
 801312a:	4618      	mov	r0, r3
 801312c:	370c      	adds	r7, #12
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	24000cb0 	.word	0x24000cb0

0801313c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013142:	f3ef 8305 	mrs	r3, IPSR
 8013146:	603b      	str	r3, [r7, #0]
  return(result);
 8013148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801314a:	2b00      	cmp	r3, #0
 801314c:	d003      	beq.n	8013156 <osKernelStart+0x1a>
    stat = osErrorISR;
 801314e:	f06f 0305 	mvn.w	r3, #5
 8013152:	607b      	str	r3, [r7, #4]
 8013154:	e010      	b.n	8013178 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013156:	4b0b      	ldr	r3, [pc, #44]	; (8013184 <osKernelStart+0x48>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2b01      	cmp	r3, #1
 801315c:	d109      	bne.n	8013172 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801315e:	f7ff ffbf 	bl	80130e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013162:	4b08      	ldr	r3, [pc, #32]	; (8013184 <osKernelStart+0x48>)
 8013164:	2202      	movs	r2, #2
 8013166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013168:	f001 fda4 	bl	8014cb4 <vTaskStartScheduler>
      stat = osOK;
 801316c:	2300      	movs	r3, #0
 801316e:	607b      	str	r3, [r7, #4]
 8013170:	e002      	b.n	8013178 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013178:	687b      	ldr	r3, [r7, #4]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	24000cb0 	.word	0x24000cb0

08013188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013188:	b580      	push	{r7, lr}
 801318a:	b08e      	sub	sp, #56	; 0x38
 801318c:	af04      	add	r7, sp, #16
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013194:	2300      	movs	r3, #0
 8013196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013198:	f3ef 8305 	mrs	r3, IPSR
 801319c:	617b      	str	r3, [r7, #20]
  return(result);
 801319e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d17e      	bne.n	80132a2 <osThreadNew+0x11a>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d07b      	beq.n	80132a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80131aa:	2380      	movs	r3, #128	; 0x80
 80131ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80131ae:	2318      	movs	r3, #24
 80131b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80131b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d045      	beq.n	801324e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d002      	beq.n	80131d0 <osThreadNew+0x48>
        name = attr->name;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	699b      	ldr	r3, [r3, #24]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d002      	beq.n	80131de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d008      	beq.n	80131f6 <osThreadNew+0x6e>
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	2b38      	cmp	r3, #56	; 0x38
 80131e8:	d805      	bhi.n	80131f6 <osThreadNew+0x6e>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	f003 0301 	and.w	r3, r3, #1
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d001      	beq.n	80131fa <osThreadNew+0x72>
        return (NULL);
 80131f6:	2300      	movs	r3, #0
 80131f8:	e054      	b.n	80132a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	695b      	ldr	r3, [r3, #20]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	695b      	ldr	r3, [r3, #20]
 8013206:	089b      	lsrs	r3, r3, #2
 8013208:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00e      	beq.n	8013230 <osThreadNew+0xa8>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	2b5b      	cmp	r3, #91	; 0x5b
 8013218:	d90a      	bls.n	8013230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801321e:	2b00      	cmp	r3, #0
 8013220:	d006      	beq.n	8013230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	695b      	ldr	r3, [r3, #20]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d002      	beq.n	8013230 <osThreadNew+0xa8>
        mem = 1;
 801322a:	2301      	movs	r3, #1
 801322c:	61bb      	str	r3, [r7, #24]
 801322e:	e010      	b.n	8013252 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d10c      	bne.n	8013252 <osThreadNew+0xca>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d108      	bne.n	8013252 <osThreadNew+0xca>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	691b      	ldr	r3, [r3, #16]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d104      	bne.n	8013252 <osThreadNew+0xca>
          mem = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	61bb      	str	r3, [r7, #24]
 801324c:	e001      	b.n	8013252 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	2b01      	cmp	r3, #1
 8013256:	d110      	bne.n	801327a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013260:	9202      	str	r2, [sp, #8]
 8013262:	9301      	str	r3, [sp, #4]
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	6a3a      	ldr	r2, [r7, #32]
 801326c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f001 fb4a 	bl	8014908 <xTaskCreateStatic>
 8013274:	4603      	mov	r3, r0
 8013276:	613b      	str	r3, [r7, #16]
 8013278:	e013      	b.n	80132a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d110      	bne.n	80132a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	b29a      	uxth	r2, r3
 8013284:	f107 0310 	add.w	r3, r7, #16
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f001 fb95 	bl	80149c2 <xTaskCreate>
 8013298:	4603      	mov	r3, r0
 801329a:	2b01      	cmp	r3, #1
 801329c:	d001      	beq.n	80132a2 <osThreadNew+0x11a>
            hTask = NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132a2:	693b      	ldr	r3, [r7, #16]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3728      	adds	r7, #40	; 0x28
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132b2:	f3ef 8305 	mrs	r3, IPSR
 80132b6:	603b      	str	r3, [r7, #0]
  return(result);
 80132b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d003      	beq.n	80132c6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80132be:	f06f 0305 	mvn.w	r3, #5
 80132c2:	607b      	str	r3, [r7, #4]
 80132c4:	e009      	b.n	80132da <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80132c6:	2300      	movs	r3, #0
 80132c8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80132ca:	4b07      	ldr	r3, [pc, #28]	; (80132e8 <osThreadYield+0x3c>)
 80132cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d0:	601a      	str	r2, [r3, #0]
 80132d2:	f3bf 8f4f 	dsb	sy
 80132d6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80132da:	687b      	ldr	r3, [r7, #4]
}
 80132dc:	4618      	mov	r0, r3
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr
 80132e8:	e000ed04 	.word	0xe000ed04

080132ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132f4:	f3ef 8305 	mrs	r3, IPSR
 80132f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80132fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d003      	beq.n	8013308 <osDelay+0x1c>
    stat = osErrorISR;
 8013300:	f06f 0305 	mvn.w	r3, #5
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	e007      	b.n	8013318 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013308:	2300      	movs	r3, #0
 801330a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d002      	beq.n	8013318 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f001 fc9a 	bl	8014c4c <vTaskDelay>
    }
  }

  return (stat);
 8013318:	68fb      	ldr	r3, [r7, #12]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013322:	b580      	push	{r7, lr}
 8013324:	b086      	sub	sp, #24
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801332a:	2300      	movs	r3, #0
 801332c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801332e:	f3ef 8305 	mrs	r3, IPSR
 8013332:	60fb      	str	r3, [r7, #12]
  return(result);
 8013334:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013336:	2b00      	cmp	r3, #0
 8013338:	d12d      	bne.n	8013396 <osEventFlagsNew+0x74>
    mem = -1;
 801333a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801333e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d015      	beq.n	8013372 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	689b      	ldr	r3, [r3, #8]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d006      	beq.n	801335c <osEventFlagsNew+0x3a>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	2b1f      	cmp	r3, #31
 8013354:	d902      	bls.n	801335c <osEventFlagsNew+0x3a>
        mem = 1;
 8013356:	2301      	movs	r3, #1
 8013358:	613b      	str	r3, [r7, #16]
 801335a:	e00c      	b.n	8013376 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d108      	bne.n	8013376 <osEventFlagsNew+0x54>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d104      	bne.n	8013376 <osEventFlagsNew+0x54>
          mem = 0;
 801336c:	2300      	movs	r3, #0
 801336e:	613b      	str	r3, [r7, #16]
 8013370:	e001      	b.n	8013376 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013372:	2300      	movs	r3, #0
 8013374:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d106      	bne.n	801338a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	689b      	ldr	r3, [r3, #8]
 8013380:	4618      	mov	r0, r3
 8013382:	f000 fa3d 	bl	8013800 <xEventGroupCreateStatic>
 8013386:	6178      	str	r0, [r7, #20]
 8013388:	e005      	b.n	8013396 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d102      	bne.n	8013396 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013390:	f000 fa6d 	bl	801386e <xEventGroupCreate>
 8013394:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013396:	697b      	ldr	r3, [r7, #20]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3718      	adds	r7, #24
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b086      	sub	sp, #24
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <osEventFlagsSet+0x1e>
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d003      	beq.n	80133c6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80133be:	f06f 0303 	mvn.w	r3, #3
 80133c2:	617b      	str	r3, [r7, #20]
 80133c4:	e028      	b.n	8013418 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133c6:	f3ef 8305 	mrs	r3, IPSR
 80133ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80133cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d01d      	beq.n	801340e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80133d2:	2300      	movs	r3, #0
 80133d4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80133d6:	f107 0308 	add.w	r3, r7, #8
 80133da:	461a      	mov	r2, r3
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6938      	ldr	r0, [r7, #16]
 80133e0:	f000 fbe8 	bl	8013bb4 <xEventGroupSetBitsFromISR>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d103      	bne.n	80133f2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80133ea:	f06f 0302 	mvn.w	r3, #2
 80133ee:	617b      	str	r3, [r7, #20]
 80133f0:	e012      	b.n	8013418 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d00d      	beq.n	8013418 <osEventFlagsSet+0x78>
 80133fc:	4b09      	ldr	r3, [pc, #36]	; (8013424 <osEventFlagsSet+0x84>)
 80133fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013402:	601a      	str	r2, [r3, #0]
 8013404:	f3bf 8f4f 	dsb	sy
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	e004      	b.n	8013418 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801340e:	6839      	ldr	r1, [r7, #0]
 8013410:	6938      	ldr	r0, [r7, #16]
 8013412:	f000 fb15 	bl	8013a40 <xEventGroupSetBits>
 8013416:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013418:	697b      	ldr	r3, [r7, #20]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3718      	adds	r7, #24
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	e000ed04 	.word	0xe000ed04

08013428 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013428:	b580      	push	{r7, lr}
 801342a:	b08c      	sub	sp, #48	; 0x30
 801342c:	af02      	add	r7, sp, #8
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d004      	beq.n	801344a <osEventFlagsWait+0x22>
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801344a:	f06f 0303 	mvn.w	r3, #3
 801344e:	61fb      	str	r3, [r7, #28]
 8013450:	e04b      	b.n	80134ea <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013452:	f3ef 8305 	mrs	r3, IPSR
 8013456:	617b      	str	r3, [r7, #20]
  return(result);
 8013458:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801345a:	2b00      	cmp	r3, #0
 801345c:	d003      	beq.n	8013466 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801345e:	f06f 0305 	mvn.w	r3, #5
 8013462:	61fb      	str	r3, [r7, #28]
 8013464:	e041      	b.n	80134ea <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f003 0301 	and.w	r3, r3, #1
 801346c:	2b00      	cmp	r3, #0
 801346e:	d002      	beq.n	8013476 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013470:	2301      	movs	r3, #1
 8013472:	627b      	str	r3, [r7, #36]	; 0x24
 8013474:	e001      	b.n	801347a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013476:	2300      	movs	r3, #0
 8013478:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f003 0302 	and.w	r3, r3, #2
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013484:	2300      	movs	r3, #0
 8013486:	623b      	str	r3, [r7, #32]
 8013488:	e001      	b.n	801348e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801348a:	2301      	movs	r3, #1
 801348c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	6a3a      	ldr	r2, [r7, #32]
 8013496:	68b9      	ldr	r1, [r7, #8]
 8013498:	69b8      	ldr	r0, [r7, #24]
 801349a:	f000 fa03 	bl	80138a4 <xEventGroupWaitBits>
 801349e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f003 0301 	and.w	r3, r3, #1
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d010      	beq.n	80134cc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80134aa:	68ba      	ldr	r2, [r7, #8]
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	4013      	ands	r3, r2
 80134b0:	68ba      	ldr	r2, [r7, #8]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d019      	beq.n	80134ea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d003      	beq.n	80134c4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80134bc:	f06f 0301 	mvn.w	r3, #1
 80134c0:	61fb      	str	r3, [r7, #28]
 80134c2:	e012      	b.n	80134ea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80134c4:	f06f 0302 	mvn.w	r3, #2
 80134c8:	61fb      	str	r3, [r7, #28]
 80134ca:	e00e      	b.n	80134ea <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	4013      	ands	r3, r2
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d109      	bne.n	80134ea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d003      	beq.n	80134e4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80134dc:	f06f 0301 	mvn.w	r3, #1
 80134e0:	61fb      	str	r3, [r7, #28]
 80134e2:	e002      	b.n	80134ea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80134e4:	f06f 0302 	mvn.w	r3, #2
 80134e8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80134ea:	69fb      	ldr	r3, [r7, #28]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3728      	adds	r7, #40	; 0x28
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08a      	sub	sp, #40	; 0x28
 80134f8:	af02      	add	r7, sp, #8
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013500:	2300      	movs	r3, #0
 8013502:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013504:	f3ef 8305 	mrs	r3, IPSR
 8013508:	613b      	str	r3, [r7, #16]
  return(result);
 801350a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801350c:	2b00      	cmp	r3, #0
 801350e:	d15f      	bne.n	80135d0 <osMessageQueueNew+0xdc>
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d05c      	beq.n	80135d0 <osMessageQueueNew+0xdc>
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d059      	beq.n	80135d0 <osMessageQueueNew+0xdc>
    mem = -1;
 801351c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013520:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d029      	beq.n	801357c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d012      	beq.n	8013556 <osMessageQueueNew+0x62>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	2b4f      	cmp	r3, #79	; 0x4f
 8013536:	d90e      	bls.n	8013556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00a      	beq.n	8013556 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	695a      	ldr	r2, [r3, #20]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	68b9      	ldr	r1, [r7, #8]
 8013548:	fb01 f303 	mul.w	r3, r1, r3
 801354c:	429a      	cmp	r2, r3
 801354e:	d302      	bcc.n	8013556 <osMessageQueueNew+0x62>
        mem = 1;
 8013550:	2301      	movs	r3, #1
 8013552:	61bb      	str	r3, [r7, #24]
 8013554:	e014      	b.n	8013580 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d110      	bne.n	8013580 <osMessageQueueNew+0x8c>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d10c      	bne.n	8013580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801356a:	2b00      	cmp	r3, #0
 801356c:	d108      	bne.n	8013580 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	695b      	ldr	r3, [r3, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d104      	bne.n	8013580 <osMessageQueueNew+0x8c>
          mem = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	61bb      	str	r3, [r7, #24]
 801357a:	e001      	b.n	8013580 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801357c:	2300      	movs	r3, #0
 801357e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d10b      	bne.n	801359e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	691a      	ldr	r2, [r3, #16]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	2100      	movs	r1, #0
 8013590:	9100      	str	r1, [sp, #0]
 8013592:	68b9      	ldr	r1, [r7, #8]
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f000 fc3d 	bl	8013e14 <xQueueGenericCreateStatic>
 801359a:	61f8      	str	r0, [r7, #28]
 801359c:	e008      	b.n	80135b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801359e:	69bb      	ldr	r3, [r7, #24]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d105      	bne.n	80135b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80135a4:	2200      	movs	r2, #0
 80135a6:	68b9      	ldr	r1, [r7, #8]
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f000 fcab 	bl	8013f04 <xQueueGenericCreate>
 80135ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d00c      	beq.n	80135d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d003      	beq.n	80135c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	617b      	str	r3, [r7, #20]
 80135c2:	e001      	b.n	80135c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80135c4:	2300      	movs	r3, #0
 80135c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80135c8:	6979      	ldr	r1, [r7, #20]
 80135ca:	69f8      	ldr	r0, [r7, #28]
 80135cc:	f001 f93e 	bl	801484c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80135d0:	69fb      	ldr	r3, [r7, #28]
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3720      	adds	r7, #32
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80135dc:	b580      	push	{r7, lr}
 80135de:	b088      	sub	sp, #32
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	603b      	str	r3, [r7, #0]
 80135e8:	4613      	mov	r3, r2
 80135ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80135f0:	2300      	movs	r3, #0
 80135f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135f4:	f3ef 8305 	mrs	r3, IPSR
 80135f8:	617b      	str	r3, [r7, #20]
  return(result);
 80135fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d028      	beq.n	8013652 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d005      	beq.n	8013612 <osMessageQueuePut+0x36>
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d002      	beq.n	8013612 <osMessageQueuePut+0x36>
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d003      	beq.n	801361a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013612:	f06f 0303 	mvn.w	r3, #3
 8013616:	61fb      	str	r3, [r7, #28]
 8013618:	e038      	b.n	801368c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801361a:	2300      	movs	r3, #0
 801361c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801361e:	f107 0210 	add.w	r2, r7, #16
 8013622:	2300      	movs	r3, #0
 8013624:	68b9      	ldr	r1, [r7, #8]
 8013626:	69b8      	ldr	r0, [r7, #24]
 8013628:	f000 fdc8 	bl	80141bc <xQueueGenericSendFromISR>
 801362c:	4603      	mov	r3, r0
 801362e:	2b01      	cmp	r3, #1
 8013630:	d003      	beq.n	801363a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013632:	f06f 0302 	mvn.w	r3, #2
 8013636:	61fb      	str	r3, [r7, #28]
 8013638:	e028      	b.n	801368c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d025      	beq.n	801368c <osMessageQueuePut+0xb0>
 8013640:	4b15      	ldr	r3, [pc, #84]	; (8013698 <osMessageQueuePut+0xbc>)
 8013642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013646:	601a      	str	r2, [r3, #0]
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	e01c      	b.n	801368c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d002      	beq.n	801365e <osMessageQueuePut+0x82>
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d103      	bne.n	8013666 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801365e:	f06f 0303 	mvn.w	r3, #3
 8013662:	61fb      	str	r3, [r7, #28]
 8013664:	e012      	b.n	801368c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013666:	2300      	movs	r3, #0
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	68b9      	ldr	r1, [r7, #8]
 801366c:	69b8      	ldr	r0, [r7, #24]
 801366e:	f000 fca7 	bl	8013fc0 <xQueueGenericSend>
 8013672:	4603      	mov	r3, r0
 8013674:	2b01      	cmp	r3, #1
 8013676:	d009      	beq.n	801368c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d003      	beq.n	8013686 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801367e:	f06f 0301 	mvn.w	r3, #1
 8013682:	61fb      	str	r3, [r7, #28]
 8013684:	e002      	b.n	801368c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013686:	f06f 0302 	mvn.w	r3, #2
 801368a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801368c:	69fb      	ldr	r3, [r7, #28]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3720      	adds	r7, #32
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	e000ed04 	.word	0xe000ed04

0801369c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801369c:	b580      	push	{r7, lr}
 801369e:	b088      	sub	sp, #32
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
 80136a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80136ae:	2300      	movs	r3, #0
 80136b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136b2:	f3ef 8305 	mrs	r3, IPSR
 80136b6:	617b      	str	r3, [r7, #20]
  return(result);
 80136b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d028      	beq.n	8013710 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d005      	beq.n	80136d0 <osMessageQueueGet+0x34>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d002      	beq.n	80136d0 <osMessageQueueGet+0x34>
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d003      	beq.n	80136d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80136d0:	f06f 0303 	mvn.w	r3, #3
 80136d4:	61fb      	str	r3, [r7, #28]
 80136d6:	e037      	b.n	8013748 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80136d8:	2300      	movs	r3, #0
 80136da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80136dc:	f107 0310 	add.w	r3, r7, #16
 80136e0:	461a      	mov	r2, r3
 80136e2:	68b9      	ldr	r1, [r7, #8]
 80136e4:	69b8      	ldr	r0, [r7, #24]
 80136e6:	f000 fee5 	bl	80144b4 <xQueueReceiveFromISR>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d003      	beq.n	80136f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80136f0:	f06f 0302 	mvn.w	r3, #2
 80136f4:	61fb      	str	r3, [r7, #28]
 80136f6:	e027      	b.n	8013748 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d024      	beq.n	8013748 <osMessageQueueGet+0xac>
 80136fe:	4b15      	ldr	r3, [pc, #84]	; (8013754 <osMessageQueueGet+0xb8>)
 8013700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	f3bf 8f4f 	dsb	sy
 801370a:	f3bf 8f6f 	isb	sy
 801370e:	e01b      	b.n	8013748 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d002      	beq.n	801371c <osMessageQueueGet+0x80>
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d103      	bne.n	8013724 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801371c:	f06f 0303 	mvn.w	r3, #3
 8013720:	61fb      	str	r3, [r7, #28]
 8013722:	e011      	b.n	8013748 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013724:	683a      	ldr	r2, [r7, #0]
 8013726:	68b9      	ldr	r1, [r7, #8]
 8013728:	69b8      	ldr	r0, [r7, #24]
 801372a:	f000 fde3 	bl	80142f4 <xQueueReceive>
 801372e:	4603      	mov	r3, r0
 8013730:	2b01      	cmp	r3, #1
 8013732:	d009      	beq.n	8013748 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d003      	beq.n	8013742 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801373a:	f06f 0301 	mvn.w	r3, #1
 801373e:	61fb      	str	r3, [r7, #28]
 8013740:	e002      	b.n	8013748 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013742:	f06f 0302 	mvn.w	r3, #2
 8013746:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013748:	69fb      	ldr	r3, [r7, #28]
}
 801374a:	4618      	mov	r0, r3
 801374c:	3720      	adds	r7, #32
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	e000ed04 	.word	0xe000ed04

08013758 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8013758:	b580      	push	{r7, lr}
 801375a:	b086      	sub	sp, #24
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <osMessageQueueGetCount+0x18>
    count = 0U;
 801376a:	2300      	movs	r3, #0
 801376c:	617b      	str	r3, [r7, #20]
 801376e:	e00e      	b.n	801378e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013770:	f3ef 8305 	mrs	r3, IPSR
 8013774:	60fb      	str	r3, [r7, #12]
  return(result);
 8013776:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013778:	2b00      	cmp	r3, #0
 801377a:	d004      	beq.n	8013786 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801377c:	6938      	ldr	r0, [r7, #16]
 801377e:	f000 ff37 	bl	80145f0 <uxQueueMessagesWaitingFromISR>
 8013782:	6178      	str	r0, [r7, #20]
 8013784:	e003      	b.n	801378e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8013786:	6938      	ldr	r0, [r7, #16]
 8013788:	f000 ff14 	bl	80145b4 <uxQueueMessagesWaiting>
 801378c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801378e:	697b      	ldr	r3, [r7, #20]
}
 8013790:	4618      	mov	r0, r3
 8013792:	3718      	adds	r7, #24
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013798:	b480      	push	{r7}
 801379a:	b085      	sub	sp, #20
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	4a07      	ldr	r2, [pc, #28]	; (80137c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80137a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	4a06      	ldr	r2, [pc, #24]	; (80137c8 <vApplicationGetIdleTaskMemory+0x30>)
 80137ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2280      	movs	r2, #128	; 0x80
 80137b4:	601a      	str	r2, [r3, #0]
}
 80137b6:	bf00      	nop
 80137b8:	3714      	adds	r7, #20
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop
 80137c4:	24000cb4 	.word	0x24000cb4
 80137c8:	24000d10 	.word	0x24000d10

080137cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80137cc:	b480      	push	{r7}
 80137ce:	b085      	sub	sp, #20
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	4a07      	ldr	r2, [pc, #28]	; (80137f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80137dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	4a06      	ldr	r2, [pc, #24]	; (80137fc <vApplicationGetTimerTaskMemory+0x30>)
 80137e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80137ea:	601a      	str	r2, [r3, #0]
}
 80137ec:	bf00      	nop
 80137ee:	3714      	adds	r7, #20
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr
 80137f8:	24000f10 	.word	0x24000f10
 80137fc:	24000f6c 	.word	0x24000f6c

08013800 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013800:	b580      	push	{r7, lr}
 8013802:	b086      	sub	sp, #24
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10a      	bne.n	8013824 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013812:	f383 8811 	msr	BASEPRI, r3
 8013816:	f3bf 8f6f 	isb	sy
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013820:	bf00      	nop
 8013822:	e7fe      	b.n	8013822 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013824:	2320      	movs	r3, #32
 8013826:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	2b20      	cmp	r3, #32
 801382c:	d00a      	beq.n	8013844 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013832:	f383 8811 	msr	BASEPRI, r3
 8013836:	f3bf 8f6f 	isb	sy
 801383a:	f3bf 8f4f 	dsb	sy
 801383e:	60fb      	str	r3, [r7, #12]
}
 8013840:	bf00      	nop
 8013842:	e7fe      	b.n	8013842 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d00a      	beq.n	8013864 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	2200      	movs	r2, #0
 8013852:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	3304      	adds	r3, #4
 8013858:	4618      	mov	r0, r3
 801385a:	f000 f9bf 	bl	8013bdc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	2201      	movs	r2, #1
 8013862:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013864:	697b      	ldr	r3, [r7, #20]
	}
 8013866:	4618      	mov	r0, r3
 8013868:	3718      	adds	r7, #24
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801386e:	b580      	push	{r7, lr}
 8013870:	b082      	sub	sp, #8
 8013872:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013874:	2020      	movs	r0, #32
 8013876:	f002 fdbf 	bl	80163f8 <pvPortMalloc>
 801387a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00a      	beq.n	8013898 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2200      	movs	r2, #0
 8013886:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	3304      	adds	r3, #4
 801388c:	4618      	mov	r0, r3
 801388e:	f000 f9a5 	bl	8013bdc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013898:	687b      	ldr	r3, [r7, #4]
	}
 801389a:	4618      	mov	r0, r3
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
	...

080138a4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b090      	sub	sp, #64	; 0x40
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80138ba:	2300      	movs	r3, #0
 80138bc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d10a      	bne.n	80138da <xEventGroupWaitBits+0x36>
	__asm volatile
 80138c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c8:	f383 8811 	msr	BASEPRI, r3
 80138cc:	f3bf 8f6f 	isb	sy
 80138d0:	f3bf 8f4f 	dsb	sy
 80138d4:	623b      	str	r3, [r7, #32]
}
 80138d6:	bf00      	nop
 80138d8:	e7fe      	b.n	80138d8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00a      	beq.n	80138fa <xEventGroupWaitBits+0x56>
	__asm volatile
 80138e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e8:	f383 8811 	msr	BASEPRI, r3
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	61fb      	str	r3, [r7, #28]
}
 80138f6:	bf00      	nop
 80138f8:	e7fe      	b.n	80138f8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d10a      	bne.n	8013916 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	61bb      	str	r3, [r7, #24]
}
 8013912:	bf00      	nop
 8013914:	e7fe      	b.n	8013914 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013916:	f001 febb 	bl	8015690 <xTaskGetSchedulerState>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d102      	bne.n	8013926 <xEventGroupWaitBits+0x82>
 8013920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013922:	2b00      	cmp	r3, #0
 8013924:	d101      	bne.n	801392a <xEventGroupWaitBits+0x86>
 8013926:	2301      	movs	r3, #1
 8013928:	e000      	b.n	801392c <xEventGroupWaitBits+0x88>
 801392a:	2300      	movs	r3, #0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d10a      	bne.n	8013946 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013934:	f383 8811 	msr	BASEPRI, r3
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	617b      	str	r3, [r7, #20]
}
 8013942:	bf00      	nop
 8013944:	e7fe      	b.n	8013944 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013946:	f001 fa1b 	bl	8014d80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013950:	683a      	ldr	r2, [r7, #0]
 8013952:	68b9      	ldr	r1, [r7, #8]
 8013954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013956:	f000 f90b 	bl	8013b70 <prvTestWaitCondition>
 801395a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00e      	beq.n	8013980 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013964:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013966:	2300      	movs	r3, #0
 8013968:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d028      	beq.n	80139c2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	43db      	mvns	r3, r3
 8013978:	401a      	ands	r2, r3
 801397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397c:	601a      	str	r2, [r3, #0]
 801397e:	e020      	b.n	80139c2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013982:	2b00      	cmp	r3, #0
 8013984:	d104      	bne.n	8013990 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013988:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801398a:	2301      	movs	r3, #1
 801398c:	633b      	str	r3, [r7, #48]	; 0x30
 801398e:	e018      	b.n	80139c2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d003      	beq.n	801399e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801399c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d003      	beq.n	80139ac <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80139aa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80139ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ae:	1d18      	adds	r0, r3, #4
 80139b0:	68ba      	ldr	r2, [r7, #8]
 80139b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b4:	4313      	orrs	r3, r2
 80139b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139b8:	4619      	mov	r1, r3
 80139ba:	f001 fbe1 	bl	8015180 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80139be:	2300      	movs	r3, #0
 80139c0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80139c2:	f001 f9eb 	bl	8014d9c <xTaskResumeAll>
 80139c6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80139c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d031      	beq.n	8013a32 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80139ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d107      	bne.n	80139e4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80139d4:	4b19      	ldr	r3, [pc, #100]	; (8013a3c <xEventGroupWaitBits+0x198>)
 80139d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139da:	601a      	str	r2, [r3, #0]
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80139e4:	f001 fee0 	bl	80157a8 <uxTaskResetEventItemValue>
 80139e8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80139ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d11a      	bne.n	8013a2a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80139f4:	f002 fbde 	bl	80161b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80139f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80139fe:	683a      	ldr	r2, [r7, #0]
 8013a00:	68b9      	ldr	r1, [r7, #8]
 8013a02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a04:	f000 f8b4 	bl	8013b70 <prvTestWaitCondition>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d009      	beq.n	8013a22 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d006      	beq.n	8013a22 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	43db      	mvns	r3, r3
 8013a1c:	401a      	ands	r2, r3
 8013a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a20:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013a22:	2301      	movs	r3, #1
 8013a24:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013a26:	f002 fbf5 	bl	8016214 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a30:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3740      	adds	r7, #64	; 0x40
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	e000ed04 	.word	0xe000ed04

08013a40 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b08e      	sub	sp, #56	; 0x38
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013a52:	2300      	movs	r3, #0
 8013a54:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10a      	bne.n	8013a72 <xEventGroupSetBits+0x32>
	__asm volatile
 8013a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	613b      	str	r3, [r7, #16]
}
 8013a6e:	bf00      	nop
 8013a70:	e7fe      	b.n	8013a70 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d00a      	beq.n	8013a92 <xEventGroupSetBits+0x52>
	__asm volatile
 8013a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	60fb      	str	r3, [r7, #12]
}
 8013a8e:	bf00      	nop
 8013a90:	e7fe      	b.n	8013a90 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a94:	3304      	adds	r3, #4
 8013a96:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9a:	3308      	adds	r3, #8
 8013a9c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013a9e:	f001 f96f 	bl	8014d80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	68db      	ldr	r3, [r3, #12]
 8013aa6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	431a      	orrs	r2, r3
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013ab4:	e03c      	b.n	8013b30 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013acc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013ad4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d108      	bne.n	8013af2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	4013      	ands	r3, r2
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d00b      	beq.n	8013b04 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013aec:	2301      	movs	r3, #1
 8013aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013af0:	e008      	b.n	8013b04 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	4013      	ands	r3, r2
 8013afa:	69ba      	ldr	r2, [r7, #24]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d101      	bne.n	8013b04 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013b00:	2301      	movs	r3, #1
 8013b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d010      	beq.n	8013b2c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d003      	beq.n	8013b1c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013b24:	4619      	mov	r1, r3
 8013b26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b28:	f001 fbf6 	bl	8015318 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b32:	6a3b      	ldr	r3, [r7, #32]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d1be      	bne.n	8013ab6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3e:	43db      	mvns	r3, r3
 8013b40:	401a      	ands	r2, r3
 8013b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b44:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013b46:	f001 f929 	bl	8014d9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4c:	681b      	ldr	r3, [r3, #0]
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3738      	adds	r7, #56	; 0x38
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b082      	sub	sp, #8
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013b60:	6839      	ldr	r1, [r7, #0]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f7ff ff6c 	bl	8013a40 <xEventGroupSetBits>
}
 8013b68:	bf00      	nop
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013b70:	b480      	push	{r7}
 8013b72:	b087      	sub	sp, #28
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d107      	bne.n	8013b96 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013b86:	68fa      	ldr	r2, [r7, #12]
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	4013      	ands	r3, r2
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d00a      	beq.n	8013ba6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013b90:	2301      	movs	r3, #1
 8013b92:	617b      	str	r3, [r7, #20]
 8013b94:	e007      	b.n	8013ba6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013b96:	68fa      	ldr	r2, [r7, #12]
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	68ba      	ldr	r2, [r7, #8]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d101      	bne.n	8013ba6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013ba6:	697b      	ldr	r3, [r7, #20]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	371c      	adds	r7, #28
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b086      	sub	sp, #24
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	60b9      	str	r1, [r7, #8]
 8013bbe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	68f9      	ldr	r1, [r7, #12]
 8013bc6:	4804      	ldr	r0, [pc, #16]	; (8013bd8 <xEventGroupSetBitsFromISR+0x24>)
 8013bc8:	f002 f9a8 	bl	8015f1c <xTimerPendFunctionCallFromISR>
 8013bcc:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013bce:	697b      	ldr	r3, [r7, #20]
	}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}
 8013bd8:	08013b57 	.word	0x08013b57

08013bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f103 0208 	add.w	r2, r3, #8
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f103 0208 	add.w	r2, r3, #8
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f103 0208 	add.w	r2, r3, #8
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013c10:	bf00      	nop
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013c2a:	bf00      	nop
 8013c2c:	370c      	adds	r7, #12
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr

08013c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c36:	b480      	push	{r7}
 8013c38:	b085      	sub	sp, #20
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	689a      	ldr	r2, [r3, #8]
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	689b      	ldr	r3, [r3, #8]
 8013c58:	683a      	ldr	r2, [r7, #0]
 8013c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	683a      	ldr	r2, [r7, #0]
 8013c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	1c5a      	adds	r2, r3, #1
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	601a      	str	r2, [r3, #0]
}
 8013c72:	bf00      	nop
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr

08013c7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c7e:	b480      	push	{r7}
 8013c80:	b085      	sub	sp, #20
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	6078      	str	r0, [r7, #4]
 8013c86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c94:	d103      	bne.n	8013c9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	691b      	ldr	r3, [r3, #16]
 8013c9a:	60fb      	str	r3, [r7, #12]
 8013c9c:	e00c      	b.n	8013cb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	60fb      	str	r3, [r7, #12]
 8013ca4:	e002      	b.n	8013cac <vListInsert+0x2e>
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	60fb      	str	r3, [r7, #12]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	68ba      	ldr	r2, [r7, #8]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d2f6      	bcs.n	8013ca6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	685a      	ldr	r2, [r3, #4]
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	683a      	ldr	r2, [r7, #0]
 8013cc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	683a      	ldr	r2, [r7, #0]
 8013cd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	1c5a      	adds	r2, r3, #1
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	601a      	str	r2, [r3, #0]
}
 8013ce4:	bf00      	nop
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b085      	sub	sp, #20
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	6892      	ldr	r2, [r2, #8]
 8013d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	689b      	ldr	r3, [r3, #8]
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	6852      	ldr	r2, [r2, #4]
 8013d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d103      	bne.n	8013d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	689a      	ldr	r2, [r3, #8]
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2200      	movs	r2, #0
 8013d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	1e5a      	subs	r2, r3, #1
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	681b      	ldr	r3, [r3, #0]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d10a      	bne.n	8013d6e <xQueueGenericReset+0x2a>
	__asm volatile
 8013d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d5c:	f383 8811 	msr	BASEPRI, r3
 8013d60:	f3bf 8f6f 	isb	sy
 8013d64:	f3bf 8f4f 	dsb	sy
 8013d68:	60bb      	str	r3, [r7, #8]
}
 8013d6a:	bf00      	nop
 8013d6c:	e7fe      	b.n	8013d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013d6e:	f002 fa21 	bl	80161b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d7a:	68f9      	ldr	r1, [r7, #12]
 8013d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d7e:	fb01 f303 	mul.w	r3, r1, r3
 8013d82:	441a      	add	r2, r3
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	68f9      	ldr	r1, [r7, #12]
 8013da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013da4:	fb01 f303 	mul.w	r3, r1, r3
 8013da8:	441a      	add	r2, r3
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	22ff      	movs	r2, #255	; 0xff
 8013db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	22ff      	movs	r2, #255	; 0xff
 8013dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d114      	bne.n	8013dee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	691b      	ldr	r3, [r3, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d01a      	beq.n	8013e02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	3310      	adds	r3, #16
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f001 fa3d 	bl	8015250 <xTaskRemoveFromEventList>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d012      	beq.n	8013e02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013ddc:	4b0c      	ldr	r3, [pc, #48]	; (8013e10 <xQueueGenericReset+0xcc>)
 8013dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013de2:	601a      	str	r2, [r3, #0]
 8013de4:	f3bf 8f4f 	dsb	sy
 8013de8:	f3bf 8f6f 	isb	sy
 8013dec:	e009      	b.n	8013e02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	3310      	adds	r3, #16
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ff fef2 	bl	8013bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	3324      	adds	r3, #36	; 0x24
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7ff feed 	bl	8013bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013e02:	f002 fa07 	bl	8016214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013e06:	2301      	movs	r3, #1
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	e000ed04 	.word	0xe000ed04

08013e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b08e      	sub	sp, #56	; 0x38
 8013e18:	af02      	add	r7, sp, #8
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
 8013e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10a      	bne.n	8013e3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e2c:	f383 8811 	msr	BASEPRI, r3
 8013e30:	f3bf 8f6f 	isb	sy
 8013e34:	f3bf 8f4f 	dsb	sy
 8013e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e3a:	bf00      	nop
 8013e3c:	e7fe      	b.n	8013e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10a      	bne.n	8013e5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e48:	f383 8811 	msr	BASEPRI, r3
 8013e4c:	f3bf 8f6f 	isb	sy
 8013e50:	f3bf 8f4f 	dsb	sy
 8013e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e56:	bf00      	nop
 8013e58:	e7fe      	b.n	8013e58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <xQueueGenericCreateStatic+0x52>
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d001      	beq.n	8013e6a <xQueueGenericCreateStatic+0x56>
 8013e66:	2301      	movs	r3, #1
 8013e68:	e000      	b.n	8013e6c <xQueueGenericCreateStatic+0x58>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d10a      	bne.n	8013e86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e74:	f383 8811 	msr	BASEPRI, r3
 8013e78:	f3bf 8f6f 	isb	sy
 8013e7c:	f3bf 8f4f 	dsb	sy
 8013e80:	623b      	str	r3, [r7, #32]
}
 8013e82:	bf00      	nop
 8013e84:	e7fe      	b.n	8013e84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d102      	bne.n	8013e92 <xQueueGenericCreateStatic+0x7e>
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <xQueueGenericCreateStatic+0x82>
 8013e92:	2301      	movs	r3, #1
 8013e94:	e000      	b.n	8013e98 <xQueueGenericCreateStatic+0x84>
 8013e96:	2300      	movs	r3, #0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d10a      	bne.n	8013eb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea0:	f383 8811 	msr	BASEPRI, r3
 8013ea4:	f3bf 8f6f 	isb	sy
 8013ea8:	f3bf 8f4f 	dsb	sy
 8013eac:	61fb      	str	r3, [r7, #28]
}
 8013eae:	bf00      	nop
 8013eb0:	e7fe      	b.n	8013eb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013eb2:	2350      	movs	r3, #80	; 0x50
 8013eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	2b50      	cmp	r3, #80	; 0x50
 8013eba:	d00a      	beq.n	8013ed2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec0:	f383 8811 	msr	BASEPRI, r3
 8013ec4:	f3bf 8f6f 	isb	sy
 8013ec8:	f3bf 8f4f 	dsb	sy
 8013ecc:	61bb      	str	r3, [r7, #24]
}
 8013ece:	bf00      	nop
 8013ed0:	e7fe      	b.n	8013ed0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013ed2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00d      	beq.n	8013efa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	68b9      	ldr	r1, [r7, #8]
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f000 f83f 	bl	8013f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3730      	adds	r7, #48	; 0x30
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b08a      	sub	sp, #40	; 0x28
 8013f08:	af02      	add	r7, sp, #8
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	4613      	mov	r3, r2
 8013f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10a      	bne.n	8013f2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1c:	f383 8811 	msr	BASEPRI, r3
 8013f20:	f3bf 8f6f 	isb	sy
 8013f24:	f3bf 8f4f 	dsb	sy
 8013f28:	613b      	str	r3, [r7, #16]
}
 8013f2a:	bf00      	nop
 8013f2c:	e7fe      	b.n	8013f2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	fb02 f303 	mul.w	r3, r2, r3
 8013f36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	3350      	adds	r3, #80	; 0x50
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f002 fa5b 	bl	80163f8 <pvPortMalloc>
 8013f42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013f44:	69bb      	ldr	r3, [r7, #24]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d011      	beq.n	8013f6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	3350      	adds	r3, #80	; 0x50
 8013f52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013f54:	69bb      	ldr	r3, [r7, #24]
 8013f56:	2200      	movs	r2, #0
 8013f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013f5c:	79fa      	ldrb	r2, [r7, #7]
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4613      	mov	r3, r2
 8013f64:	697a      	ldr	r2, [r7, #20]
 8013f66:	68b9      	ldr	r1, [r7, #8]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f000 f805 	bl	8013f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3720      	adds	r7, #32
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	60f8      	str	r0, [r7, #12]
 8013f80:	60b9      	str	r1, [r7, #8]
 8013f82:	607a      	str	r2, [r7, #4]
 8013f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d103      	bne.n	8013f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	69ba      	ldr	r2, [r7, #24]
 8013f90:	601a      	str	r2, [r3, #0]
 8013f92:	e002      	b.n	8013f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	68fa      	ldr	r2, [r7, #12]
 8013f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	68ba      	ldr	r2, [r7, #8]
 8013fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	69b8      	ldr	r0, [r7, #24]
 8013faa:	f7ff fecb 	bl	8013d44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013fae:	69bb      	ldr	r3, [r7, #24]
 8013fb0:	78fa      	ldrb	r2, [r7, #3]
 8013fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013fb6:	bf00      	nop
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
	...

08013fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b08e      	sub	sp, #56	; 0x38
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
 8013fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d10a      	bne.n	8013ff2 <xQueueGenericSend+0x32>
	__asm volatile
 8013fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe0:	f383 8811 	msr	BASEPRI, r3
 8013fe4:	f3bf 8f6f 	isb	sy
 8013fe8:	f3bf 8f4f 	dsb	sy
 8013fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013fee:	bf00      	nop
 8013ff0:	e7fe      	b.n	8013ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d103      	bne.n	8014000 <xQueueGenericSend+0x40>
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d101      	bne.n	8014004 <xQueueGenericSend+0x44>
 8014000:	2301      	movs	r3, #1
 8014002:	e000      	b.n	8014006 <xQueueGenericSend+0x46>
 8014004:	2300      	movs	r3, #0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d10a      	bne.n	8014020 <xQueueGenericSend+0x60>
	__asm volatile
 801400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400e:	f383 8811 	msr	BASEPRI, r3
 8014012:	f3bf 8f6f 	isb	sy
 8014016:	f3bf 8f4f 	dsb	sy
 801401a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801401c:	bf00      	nop
 801401e:	e7fe      	b.n	801401e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2b02      	cmp	r3, #2
 8014024:	d103      	bne.n	801402e <xQueueGenericSend+0x6e>
 8014026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801402a:	2b01      	cmp	r3, #1
 801402c:	d101      	bne.n	8014032 <xQueueGenericSend+0x72>
 801402e:	2301      	movs	r3, #1
 8014030:	e000      	b.n	8014034 <xQueueGenericSend+0x74>
 8014032:	2300      	movs	r3, #0
 8014034:	2b00      	cmp	r3, #0
 8014036:	d10a      	bne.n	801404e <xQueueGenericSend+0x8e>
	__asm volatile
 8014038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801403c:	f383 8811 	msr	BASEPRI, r3
 8014040:	f3bf 8f6f 	isb	sy
 8014044:	f3bf 8f4f 	dsb	sy
 8014048:	623b      	str	r3, [r7, #32]
}
 801404a:	bf00      	nop
 801404c:	e7fe      	b.n	801404c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801404e:	f001 fb1f 	bl	8015690 <xTaskGetSchedulerState>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d102      	bne.n	801405e <xQueueGenericSend+0x9e>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d101      	bne.n	8014062 <xQueueGenericSend+0xa2>
 801405e:	2301      	movs	r3, #1
 8014060:	e000      	b.n	8014064 <xQueueGenericSend+0xa4>
 8014062:	2300      	movs	r3, #0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d10a      	bne.n	801407e <xQueueGenericSend+0xbe>
	__asm volatile
 8014068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801406c:	f383 8811 	msr	BASEPRI, r3
 8014070:	f3bf 8f6f 	isb	sy
 8014074:	f3bf 8f4f 	dsb	sy
 8014078:	61fb      	str	r3, [r7, #28]
}
 801407a:	bf00      	nop
 801407c:	e7fe      	b.n	801407c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801407e:	f002 f899 	bl	80161b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801408a:	429a      	cmp	r2, r3
 801408c:	d302      	bcc.n	8014094 <xQueueGenericSend+0xd4>
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d129      	bne.n	80140e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014094:	683a      	ldr	r2, [r7, #0]
 8014096:	68b9      	ldr	r1, [r7, #8]
 8014098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801409a:	f000 fac7 	bl	801462c <prvCopyDataToQueue>
 801409e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80140a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d010      	beq.n	80140ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80140a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140aa:	3324      	adds	r3, #36	; 0x24
 80140ac:	4618      	mov	r0, r3
 80140ae:	f001 f8cf 	bl	8015250 <xTaskRemoveFromEventList>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d013      	beq.n	80140e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80140b8:	4b3f      	ldr	r3, [pc, #252]	; (80141b8 <xQueueGenericSend+0x1f8>)
 80140ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140be:	601a      	str	r2, [r3, #0]
 80140c0:	f3bf 8f4f 	dsb	sy
 80140c4:	f3bf 8f6f 	isb	sy
 80140c8:	e00a      	b.n	80140e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80140ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d007      	beq.n	80140e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80140d0:	4b39      	ldr	r3, [pc, #228]	; (80141b8 <xQueueGenericSend+0x1f8>)
 80140d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140d6:	601a      	str	r2, [r3, #0]
 80140d8:	f3bf 8f4f 	dsb	sy
 80140dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80140e0:	f002 f898 	bl	8016214 <vPortExitCritical>
				return pdPASS;
 80140e4:	2301      	movs	r3, #1
 80140e6:	e063      	b.n	80141b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d103      	bne.n	80140f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80140ee:	f002 f891 	bl	8016214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80140f2:	2300      	movs	r3, #0
 80140f4:	e05c      	b.n	80141b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d106      	bne.n	801410a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140fc:	f107 0314 	add.w	r3, r7, #20
 8014100:	4618      	mov	r0, r3
 8014102:	f001 f96b 	bl	80153dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014106:	2301      	movs	r3, #1
 8014108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801410a:	f002 f883 	bl	8016214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801410e:	f000 fe37 	bl	8014d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014112:	f002 f84f 	bl	80161b4 <vPortEnterCritical>
 8014116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801411c:	b25b      	sxtb	r3, r3
 801411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014122:	d103      	bne.n	801412c <xQueueGenericSend+0x16c>
 8014124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014132:	b25b      	sxtb	r3, r3
 8014134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014138:	d103      	bne.n	8014142 <xQueueGenericSend+0x182>
 801413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413c:	2200      	movs	r2, #0
 801413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014142:	f002 f867 	bl	8016214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014146:	1d3a      	adds	r2, r7, #4
 8014148:	f107 0314 	add.w	r3, r7, #20
 801414c:	4611      	mov	r1, r2
 801414e:	4618      	mov	r0, r3
 8014150:	f001 f95a 	bl	8015408 <xTaskCheckForTimeOut>
 8014154:	4603      	mov	r3, r0
 8014156:	2b00      	cmp	r3, #0
 8014158:	d124      	bne.n	80141a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801415a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801415c:	f000 fb5e 	bl	801481c <prvIsQueueFull>
 8014160:	4603      	mov	r3, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	d018      	beq.n	8014198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	3310      	adds	r3, #16
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	4611      	mov	r1, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f000 ffe2 	bl	8015138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014176:	f000 fae9 	bl	801474c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801417a:	f000 fe0f 	bl	8014d9c <xTaskResumeAll>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	f47f af7c 	bne.w	801407e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014186:	4b0c      	ldr	r3, [pc, #48]	; (80141b8 <xQueueGenericSend+0x1f8>)
 8014188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801418c:	601a      	str	r2, [r3, #0]
 801418e:	f3bf 8f4f 	dsb	sy
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	e772      	b.n	801407e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801419a:	f000 fad7 	bl	801474c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801419e:	f000 fdfd 	bl	8014d9c <xTaskResumeAll>
 80141a2:	e76c      	b.n	801407e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80141a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141a6:	f000 fad1 	bl	801474c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80141aa:	f000 fdf7 	bl	8014d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80141ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3738      	adds	r7, #56	; 0x38
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	e000ed04 	.word	0xe000ed04

080141bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b090      	sub	sp, #64	; 0x40
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
 80141c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80141ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d10a      	bne.n	80141ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80141d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d8:	f383 8811 	msr	BASEPRI, r3
 80141dc:	f3bf 8f6f 	isb	sy
 80141e0:	f3bf 8f4f 	dsb	sy
 80141e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141e6:	bf00      	nop
 80141e8:	e7fe      	b.n	80141e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d103      	bne.n	80141f8 <xQueueGenericSendFromISR+0x3c>
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d101      	bne.n	80141fc <xQueueGenericSendFromISR+0x40>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e000      	b.n	80141fe <xQueueGenericSendFromISR+0x42>
 80141fc:	2300      	movs	r3, #0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d10a      	bne.n	8014218 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014206:	f383 8811 	msr	BASEPRI, r3
 801420a:	f3bf 8f6f 	isb	sy
 801420e:	f3bf 8f4f 	dsb	sy
 8014212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014214:	bf00      	nop
 8014216:	e7fe      	b.n	8014216 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	2b02      	cmp	r3, #2
 801421c:	d103      	bne.n	8014226 <xQueueGenericSendFromISR+0x6a>
 801421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014222:	2b01      	cmp	r3, #1
 8014224:	d101      	bne.n	801422a <xQueueGenericSendFromISR+0x6e>
 8014226:	2301      	movs	r3, #1
 8014228:	e000      	b.n	801422c <xQueueGenericSendFromISR+0x70>
 801422a:	2300      	movs	r3, #0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d10a      	bne.n	8014246 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	623b      	str	r3, [r7, #32]
}
 8014242:	bf00      	nop
 8014244:	e7fe      	b.n	8014244 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014246:	f002 f897 	bl	8016378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801424a:	f3ef 8211 	mrs	r2, BASEPRI
 801424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	61fa      	str	r2, [r7, #28]
 8014260:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014262:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014264:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801426e:	429a      	cmp	r2, r3
 8014270:	d302      	bcc.n	8014278 <xQueueGenericSendFromISR+0xbc>
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	2b02      	cmp	r3, #2
 8014276:	d12f      	bne.n	80142d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801427e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014286:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014288:	683a      	ldr	r2, [r7, #0]
 801428a:	68b9      	ldr	r1, [r7, #8]
 801428c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801428e:	f000 f9cd 	bl	801462c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014292:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801429a:	d112      	bne.n	80142c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d016      	beq.n	80142d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a6:	3324      	adds	r3, #36	; 0x24
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 ffd1 	bl	8015250 <xTaskRemoveFromEventList>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d00e      	beq.n	80142d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00b      	beq.n	80142d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2201      	movs	r2, #1
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	e007      	b.n	80142d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80142c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80142c6:	3301      	adds	r3, #1
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	b25a      	sxtb	r2, r3
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80142d2:	2301      	movs	r3, #1
 80142d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80142d6:	e001      	b.n	80142dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80142d8:	2300      	movs	r3, #0
 80142da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80142e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3740      	adds	r7, #64	; 0x40
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
	...

080142f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08c      	sub	sp, #48	; 0x30
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014300:	2300      	movs	r3, #0
 8014302:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430a:	2b00      	cmp	r3, #0
 801430c:	d10a      	bne.n	8014324 <xQueueReceive+0x30>
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	623b      	str	r3, [r7, #32]
}
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d103      	bne.n	8014332 <xQueueReceive+0x3e>
 801432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801432e:	2b00      	cmp	r3, #0
 8014330:	d101      	bne.n	8014336 <xQueueReceive+0x42>
 8014332:	2301      	movs	r3, #1
 8014334:	e000      	b.n	8014338 <xQueueReceive+0x44>
 8014336:	2300      	movs	r3, #0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d10a      	bne.n	8014352 <xQueueReceive+0x5e>
	__asm volatile
 801433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014340:	f383 8811 	msr	BASEPRI, r3
 8014344:	f3bf 8f6f 	isb	sy
 8014348:	f3bf 8f4f 	dsb	sy
 801434c:	61fb      	str	r3, [r7, #28]
}
 801434e:	bf00      	nop
 8014350:	e7fe      	b.n	8014350 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014352:	f001 f99d 	bl	8015690 <xTaskGetSchedulerState>
 8014356:	4603      	mov	r3, r0
 8014358:	2b00      	cmp	r3, #0
 801435a:	d102      	bne.n	8014362 <xQueueReceive+0x6e>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d101      	bne.n	8014366 <xQueueReceive+0x72>
 8014362:	2301      	movs	r3, #1
 8014364:	e000      	b.n	8014368 <xQueueReceive+0x74>
 8014366:	2300      	movs	r3, #0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <xQueueReceive+0x8e>
	__asm volatile
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	61bb      	str	r3, [r7, #24]
}
 801437e:	bf00      	nop
 8014380:	e7fe      	b.n	8014380 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014382:	f001 ff17 	bl	80161b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801438a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438e:	2b00      	cmp	r3, #0
 8014390:	d01f      	beq.n	80143d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014392:	68b9      	ldr	r1, [r7, #8]
 8014394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014396:	f000 f9b3 	bl	8014700 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439c:	1e5a      	subs	r2, r3, #1
 801439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a4:	691b      	ldr	r3, [r3, #16]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00f      	beq.n	80143ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ac:	3310      	adds	r3, #16
 80143ae:	4618      	mov	r0, r3
 80143b0:	f000 ff4e 	bl	8015250 <xTaskRemoveFromEventList>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d007      	beq.n	80143ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80143ba:	4b3d      	ldr	r3, [pc, #244]	; (80144b0 <xQueueReceive+0x1bc>)
 80143bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143c0:	601a      	str	r2, [r3, #0]
 80143c2:	f3bf 8f4f 	dsb	sy
 80143c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80143ca:	f001 ff23 	bl	8016214 <vPortExitCritical>
				return pdPASS;
 80143ce:	2301      	movs	r3, #1
 80143d0:	e069      	b.n	80144a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d103      	bne.n	80143e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80143d8:	f001 ff1c 	bl	8016214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80143dc:	2300      	movs	r3, #0
 80143de:	e062      	b.n	80144a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80143e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80143e6:	f107 0310 	add.w	r3, r7, #16
 80143ea:	4618      	mov	r0, r3
 80143ec:	f000 fff6 	bl	80153dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80143f0:	2301      	movs	r3, #1
 80143f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80143f4:	f001 ff0e 	bl	8016214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80143f8:	f000 fcc2 	bl	8014d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80143fc:	f001 feda 	bl	80161b4 <vPortEnterCritical>
 8014400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014406:	b25b      	sxtb	r3, r3
 8014408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801440c:	d103      	bne.n	8014416 <xQueueReceive+0x122>
 801440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014410:	2200      	movs	r2, #0
 8014412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801441c:	b25b      	sxtb	r3, r3
 801441e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014422:	d103      	bne.n	801442c <xQueueReceive+0x138>
 8014424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014426:	2200      	movs	r2, #0
 8014428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801442c:	f001 fef2 	bl	8016214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014430:	1d3a      	adds	r2, r7, #4
 8014432:	f107 0310 	add.w	r3, r7, #16
 8014436:	4611      	mov	r1, r2
 8014438:	4618      	mov	r0, r3
 801443a:	f000 ffe5 	bl	8015408 <xTaskCheckForTimeOut>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d123      	bne.n	801448c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014446:	f000 f9d3 	bl	80147f0 <prvIsQueueEmpty>
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d017      	beq.n	8014480 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014452:	3324      	adds	r3, #36	; 0x24
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	4611      	mov	r1, r2
 8014458:	4618      	mov	r0, r3
 801445a:	f000 fe6d 	bl	8015138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801445e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014460:	f000 f974 	bl	801474c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014464:	f000 fc9a 	bl	8014d9c <xTaskResumeAll>
 8014468:	4603      	mov	r3, r0
 801446a:	2b00      	cmp	r3, #0
 801446c:	d189      	bne.n	8014382 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801446e:	4b10      	ldr	r3, [pc, #64]	; (80144b0 <xQueueReceive+0x1bc>)
 8014470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	f3bf 8f4f 	dsb	sy
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	e780      	b.n	8014382 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014482:	f000 f963 	bl	801474c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014486:	f000 fc89 	bl	8014d9c <xTaskResumeAll>
 801448a:	e77a      	b.n	8014382 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801448c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801448e:	f000 f95d 	bl	801474c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014492:	f000 fc83 	bl	8014d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014498:	f000 f9aa 	bl	80147f0 <prvIsQueueEmpty>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f43f af6f 	beq.w	8014382 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80144a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3730      	adds	r7, #48	; 0x30
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	e000ed04 	.word	0xe000ed04

080144b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b08e      	sub	sp, #56	; 0x38
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80144c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d10a      	bne.n	80144e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80144ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ce:	f383 8811 	msr	BASEPRI, r3
 80144d2:	f3bf 8f6f 	isb	sy
 80144d6:	f3bf 8f4f 	dsb	sy
 80144da:	623b      	str	r3, [r7, #32]
}
 80144dc:	bf00      	nop
 80144de:	e7fe      	b.n	80144de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d103      	bne.n	80144ee <xQueueReceiveFromISR+0x3a>
 80144e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d101      	bne.n	80144f2 <xQueueReceiveFromISR+0x3e>
 80144ee:	2301      	movs	r3, #1
 80144f0:	e000      	b.n	80144f4 <xQueueReceiveFromISR+0x40>
 80144f2:	2300      	movs	r3, #0
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d10a      	bne.n	801450e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80144f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144fc:	f383 8811 	msr	BASEPRI, r3
 8014500:	f3bf 8f6f 	isb	sy
 8014504:	f3bf 8f4f 	dsb	sy
 8014508:	61fb      	str	r3, [r7, #28]
}
 801450a:	bf00      	nop
 801450c:	e7fe      	b.n	801450c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801450e:	f001 ff33 	bl	8016378 <vPortValidateInterruptPriority>
	__asm volatile
 8014512:	f3ef 8211 	mrs	r2, BASEPRI
 8014516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451a:	f383 8811 	msr	BASEPRI, r3
 801451e:	f3bf 8f6f 	isb	sy
 8014522:	f3bf 8f4f 	dsb	sy
 8014526:	61ba      	str	r2, [r7, #24]
 8014528:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801452a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801452c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014532:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014536:	2b00      	cmp	r3, #0
 8014538:	d02f      	beq.n	801459a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014544:	68b9      	ldr	r1, [r7, #8]
 8014546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014548:	f000 f8da 	bl	8014700 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454e:	1e5a      	subs	r2, r3, #1
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801455c:	d112      	bne.n	8014584 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d016      	beq.n	8014594 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	3310      	adds	r3, #16
 801456a:	4618      	mov	r0, r3
 801456c:	f000 fe70 	bl	8015250 <xTaskRemoveFromEventList>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d00e      	beq.n	8014594 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00b      	beq.n	8014594 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2201      	movs	r2, #1
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	e007      	b.n	8014594 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014588:	3301      	adds	r3, #1
 801458a:	b2db      	uxtb	r3, r3
 801458c:	b25a      	sxtb	r2, r3
 801458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014594:	2301      	movs	r3, #1
 8014596:	637b      	str	r3, [r7, #52]	; 0x34
 8014598:	e001      	b.n	801459e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801459a:	2300      	movs	r3, #0
 801459c:	637b      	str	r3, [r7, #52]	; 0x34
 801459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	f383 8811 	msr	BASEPRI, r3
}
 80145a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80145aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3738      	adds	r7, #56	; 0x38
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d10a      	bne.n	80145d8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80145c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	60bb      	str	r3, [r7, #8]
}
 80145d4:	bf00      	nop
 80145d6:	e7fe      	b.n	80145d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80145d8:	f001 fdec 	bl	80161b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80145e2:	f001 fe17 	bl	8016214 <vPortExitCritical>

	return uxReturn;
 80145e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80145e8:	4618      	mov	r0, r3
 80145ea:	3710      	adds	r7, #16
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80145f0:	b480      	push	{r7}
 80145f2:	b087      	sub	sp, #28
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d10a      	bne.n	8014618 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8014602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014606:	f383 8811 	msr	BASEPRI, r3
 801460a:	f3bf 8f6f 	isb	sy
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	60fb      	str	r3, [r7, #12]
}
 8014614:	bf00      	nop
 8014616:	e7fe      	b.n	8014616 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801461c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801461e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014620:	4618      	mov	r0, r3
 8014622:	371c      	adds	r7, #28
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b086      	sub	sp, #24
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014638:	2300      	movs	r3, #0
 801463a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014646:	2b00      	cmp	r3, #0
 8014648:	d10d      	bne.n	8014666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d14d      	bne.n	80146ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	689b      	ldr	r3, [r3, #8]
 8014656:	4618      	mov	r0, r3
 8014658:	f001 f838 	bl	80156cc <xTaskPriorityDisinherit>
 801465c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2200      	movs	r2, #0
 8014662:	609a      	str	r2, [r3, #8]
 8014664:	e043      	b.n	80146ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d119      	bne.n	80146a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	6858      	ldr	r0, [r3, #4]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014674:	461a      	mov	r2, r3
 8014676:	68b9      	ldr	r1, [r7, #8]
 8014678:	f002 f8e2 	bl	8016840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	685a      	ldr	r2, [r3, #4]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014684:	441a      	add	r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	429a      	cmp	r2, r3
 8014694:	d32b      	bcc.n	80146ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	605a      	str	r2, [r3, #4]
 801469e:	e026      	b.n	80146ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	68d8      	ldr	r0, [r3, #12]
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146a8:	461a      	mov	r2, r3
 80146aa:	68b9      	ldr	r1, [r7, #8]
 80146ac:	f002 f8c8 	bl	8016840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	68da      	ldr	r2, [r3, #12]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b8:	425b      	negs	r3, r3
 80146ba:	441a      	add	r2, r3
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	68da      	ldr	r2, [r3, #12]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d207      	bcs.n	80146dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	689a      	ldr	r2, [r3, #8]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146d4:	425b      	negs	r3, r3
 80146d6:	441a      	add	r2, r3
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d105      	bne.n	80146ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	3b01      	subs	r3, #1
 80146ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	1c5a      	adds	r2, r3, #1
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80146f6:	697b      	ldr	r3, [r7, #20]
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3718      	adds	r7, #24
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801470e:	2b00      	cmp	r3, #0
 8014710:	d018      	beq.n	8014744 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	68da      	ldr	r2, [r3, #12]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801471a:	441a      	add	r2, r3
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	68da      	ldr	r2, [r3, #12]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	429a      	cmp	r2, r3
 801472a:	d303      	bcc.n	8014734 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	68d9      	ldr	r1, [r3, #12]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801473c:	461a      	mov	r2, r3
 801473e:	6838      	ldr	r0, [r7, #0]
 8014740:	f002 f87e 	bl	8016840 <memcpy>
	}
}
 8014744:	bf00      	nop
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014754:	f001 fd2e 	bl	80161b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801475e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014760:	e011      	b.n	8014786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014766:	2b00      	cmp	r3, #0
 8014768:	d012      	beq.n	8014790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3324      	adds	r3, #36	; 0x24
 801476e:	4618      	mov	r0, r3
 8014770:	f000 fd6e 	bl	8015250 <xTaskRemoveFromEventList>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d001      	beq.n	801477e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801477a:	f000 fea7 	bl	80154cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801477e:	7bfb      	ldrb	r3, [r7, #15]
 8014780:	3b01      	subs	r3, #1
 8014782:	b2db      	uxtb	r3, r3
 8014784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801478a:	2b00      	cmp	r3, #0
 801478c:	dce9      	bgt.n	8014762 <prvUnlockQueue+0x16>
 801478e:	e000      	b.n	8014792 <prvUnlockQueue+0x46>
					break;
 8014790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	22ff      	movs	r2, #255	; 0xff
 8014796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801479a:	f001 fd3b 	bl	8016214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801479e:	f001 fd09 	bl	80161b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80147aa:	e011      	b.n	80147d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	691b      	ldr	r3, [r3, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d012      	beq.n	80147da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3310      	adds	r3, #16
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 fd49 	bl	8015250 <xTaskRemoveFromEventList>
 80147be:	4603      	mov	r3, r0
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d001      	beq.n	80147c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80147c4:	f000 fe82 	bl	80154cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80147c8:	7bbb      	ldrb	r3, [r7, #14]
 80147ca:	3b01      	subs	r3, #1
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80147d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	dce9      	bgt.n	80147ac <prvUnlockQueue+0x60>
 80147d8:	e000      	b.n	80147dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80147da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	22ff      	movs	r2, #255	; 0xff
 80147e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80147e4:	f001 fd16 	bl	8016214 <vPortExitCritical>
}
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80147f8:	f001 fcdc 	bl	80161b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014800:	2b00      	cmp	r3, #0
 8014802:	d102      	bne.n	801480a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014804:	2301      	movs	r3, #1
 8014806:	60fb      	str	r3, [r7, #12]
 8014808:	e001      	b.n	801480e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801480a:	2300      	movs	r3, #0
 801480c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801480e:	f001 fd01 	bl	8016214 <vPortExitCritical>

	return xReturn;
 8014812:	68fb      	ldr	r3, [r7, #12]
}
 8014814:	4618      	mov	r0, r3
 8014816:	3710      	adds	r7, #16
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014824:	f001 fcc6 	bl	80161b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014830:	429a      	cmp	r2, r3
 8014832:	d102      	bne.n	801483a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014834:	2301      	movs	r3, #1
 8014836:	60fb      	str	r3, [r7, #12]
 8014838:	e001      	b.n	801483e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801483a:	2300      	movs	r3, #0
 801483c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801483e:	f001 fce9 	bl	8016214 <vPortExitCritical>

	return xReturn;
 8014842:	68fb      	ldr	r3, [r7, #12]
}
 8014844:	4618      	mov	r0, r3
 8014846:	3710      	adds	r7, #16
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801484c:	b480      	push	{r7}
 801484e:	b085      	sub	sp, #20
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014856:	2300      	movs	r3, #0
 8014858:	60fb      	str	r3, [r7, #12]
 801485a:	e014      	b.n	8014886 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801485c:	4a0f      	ldr	r2, [pc, #60]	; (801489c <vQueueAddToRegistry+0x50>)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d10b      	bne.n	8014880 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014868:	490c      	ldr	r1, [pc, #48]	; (801489c <vQueueAddToRegistry+0x50>)
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	683a      	ldr	r2, [r7, #0]
 801486e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014872:	4a0a      	ldr	r2, [pc, #40]	; (801489c <vQueueAddToRegistry+0x50>)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	00db      	lsls	r3, r3, #3
 8014878:	4413      	add	r3, r2
 801487a:	687a      	ldr	r2, [r7, #4]
 801487c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801487e:	e006      	b.n	801488e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	3301      	adds	r3, #1
 8014884:	60fb      	str	r3, [r7, #12]
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b07      	cmp	r3, #7
 801488a:	d9e7      	bls.n	801485c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801488c:	bf00      	nop
 801488e:	bf00      	nop
 8014890:	3714      	adds	r7, #20
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop
 801489c:	2400136c 	.word	0x2400136c

080148a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80148b0:	f001 fc80 	bl	80161b4 <vPortEnterCritical>
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ba:	b25b      	sxtb	r3, r3
 80148bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148c0:	d103      	bne.n	80148ca <vQueueWaitForMessageRestricted+0x2a>
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	2200      	movs	r2, #0
 80148c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148d0:	b25b      	sxtb	r3, r3
 80148d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148d6:	d103      	bne.n	80148e0 <vQueueWaitForMessageRestricted+0x40>
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	2200      	movs	r2, #0
 80148dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148e0:	f001 fc98 	bl	8016214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d106      	bne.n	80148fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	3324      	adds	r3, #36	; 0x24
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	68b9      	ldr	r1, [r7, #8]
 80148f4:	4618      	mov	r0, r3
 80148f6:	f000 fc7f 	bl	80151f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80148fa:	6978      	ldr	r0, [r7, #20]
 80148fc:	f7ff ff26 	bl	801474c <prvUnlockQueue>
	}
 8014900:	bf00      	nop
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014908:	b580      	push	{r7, lr}
 801490a:	b08e      	sub	sp, #56	; 0x38
 801490c:	af04      	add	r7, sp, #16
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	607a      	str	r2, [r7, #4]
 8014914:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014918:	2b00      	cmp	r3, #0
 801491a:	d10a      	bne.n	8014932 <xTaskCreateStatic+0x2a>
	__asm volatile
 801491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	623b      	str	r3, [r7, #32]
}
 801492e:	bf00      	nop
 8014930:	e7fe      	b.n	8014930 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014934:	2b00      	cmp	r3, #0
 8014936:	d10a      	bne.n	801494e <xTaskCreateStatic+0x46>
	__asm volatile
 8014938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493c:	f383 8811 	msr	BASEPRI, r3
 8014940:	f3bf 8f6f 	isb	sy
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	61fb      	str	r3, [r7, #28]
}
 801494a:	bf00      	nop
 801494c:	e7fe      	b.n	801494c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801494e:	235c      	movs	r3, #92	; 0x5c
 8014950:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	2b5c      	cmp	r3, #92	; 0x5c
 8014956:	d00a      	beq.n	801496e <xTaskCreateStatic+0x66>
	__asm volatile
 8014958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495c:	f383 8811 	msr	BASEPRI, r3
 8014960:	f3bf 8f6f 	isb	sy
 8014964:	f3bf 8f4f 	dsb	sy
 8014968:	61bb      	str	r3, [r7, #24]
}
 801496a:	bf00      	nop
 801496c:	e7fe      	b.n	801496c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801496e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014972:	2b00      	cmp	r3, #0
 8014974:	d01e      	beq.n	80149b4 <xTaskCreateStatic+0xac>
 8014976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014978:	2b00      	cmp	r3, #0
 801497a:	d01b      	beq.n	80149b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014984:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	2202      	movs	r2, #2
 801498a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801498e:	2300      	movs	r3, #0
 8014990:	9303      	str	r3, [sp, #12]
 8014992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014994:	9302      	str	r3, [sp, #8]
 8014996:	f107 0314 	add.w	r3, r7, #20
 801499a:	9301      	str	r3, [sp, #4]
 801499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	68b9      	ldr	r1, [r7, #8]
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f000 f850 	bl	8014a4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80149ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149ae:	f000 f8dd 	bl	8014b6c <prvAddNewTaskToReadyList>
 80149b2:	e001      	b.n	80149b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80149b4:	2300      	movs	r3, #0
 80149b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80149b8:	697b      	ldr	r3, [r7, #20]
	}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3728      	adds	r7, #40	; 0x28
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b08c      	sub	sp, #48	; 0x30
 80149c6:	af04      	add	r7, sp, #16
 80149c8:	60f8      	str	r0, [r7, #12]
 80149ca:	60b9      	str	r1, [r7, #8]
 80149cc:	603b      	str	r3, [r7, #0]
 80149ce:	4613      	mov	r3, r2
 80149d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80149d2:	88fb      	ldrh	r3, [r7, #6]
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f001 fd0e 	bl	80163f8 <pvPortMalloc>
 80149dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00e      	beq.n	8014a02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80149e4:	205c      	movs	r0, #92	; 0x5c
 80149e6:	f001 fd07 	bl	80163f8 <pvPortMalloc>
 80149ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d003      	beq.n	80149fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80149f2:	69fb      	ldr	r3, [r7, #28]
 80149f4:	697a      	ldr	r2, [r7, #20]
 80149f6:	631a      	str	r2, [r3, #48]	; 0x30
 80149f8:	e005      	b.n	8014a06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80149fa:	6978      	ldr	r0, [r7, #20]
 80149fc:	f001 fdc8 	bl	8016590 <vPortFree>
 8014a00:	e001      	b.n	8014a06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014a02:	2300      	movs	r3, #0
 8014a04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014a06:	69fb      	ldr	r3, [r7, #28]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d017      	beq.n	8014a3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014a14:	88fa      	ldrh	r2, [r7, #6]
 8014a16:	2300      	movs	r3, #0
 8014a18:	9303      	str	r3, [sp, #12]
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	9302      	str	r3, [sp, #8]
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a20:	9301      	str	r3, [sp, #4]
 8014a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a24:	9300      	str	r3, [sp, #0]
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	68b9      	ldr	r1, [r7, #8]
 8014a2a:	68f8      	ldr	r0, [r7, #12]
 8014a2c:	f000 f80e 	bl	8014a4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a30:	69f8      	ldr	r0, [r7, #28]
 8014a32:	f000 f89b 	bl	8014b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014a36:	2301      	movs	r3, #1
 8014a38:	61bb      	str	r3, [r7, #24]
 8014a3a:	e002      	b.n	8014a42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014a42:	69bb      	ldr	r3, [r7, #24]
	}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3720      	adds	r7, #32
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b088      	sub	sp, #32
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
 8014a58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	009b      	lsls	r3, r3, #2
 8014a62:	461a      	mov	r2, r3
 8014a64:	21a5      	movs	r1, #165	; 0xa5
 8014a66:	f001 fef9 	bl	801685c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a6e:	6879      	ldr	r1, [r7, #4]
 8014a70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014a74:	440b      	add	r3, r1
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4413      	add	r3, r2
 8014a7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	f023 0307 	bic.w	r3, r3, #7
 8014a82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	f003 0307 	and.w	r3, r3, #7
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00a      	beq.n	8014aa4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	617b      	str	r3, [r7, #20]
}
 8014aa0:	bf00      	nop
 8014aa2:	e7fe      	b.n	8014aa2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d01f      	beq.n	8014aea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014aaa:	2300      	movs	r3, #0
 8014aac:	61fb      	str	r3, [r7, #28]
 8014aae:	e012      	b.n	8014ad6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014ab0:	68ba      	ldr	r2, [r7, #8]
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	7819      	ldrb	r1, [r3, #0]
 8014ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	4413      	add	r3, r2
 8014abe:	3334      	adds	r3, #52	; 0x34
 8014ac0:	460a      	mov	r2, r1
 8014ac2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	4413      	add	r3, r2
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d006      	beq.n	8014ade <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	61fb      	str	r3, [r7, #28]
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	2b0f      	cmp	r3, #15
 8014ada:	d9e9      	bls.n	8014ab0 <prvInitialiseNewTask+0x64>
 8014adc:	e000      	b.n	8014ae0 <prvInitialiseNewTask+0x94>
			{
				break;
 8014ade:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014ae8:	e003      	b.n	8014af2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aec:	2200      	movs	r2, #0
 8014aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af4:	2b37      	cmp	r3, #55	; 0x37
 8014af6:	d901      	bls.n	8014afc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014af8:	2337      	movs	r3, #55	; 0x37
 8014afa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b10:	3304      	adds	r3, #4
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7ff f882 	bl	8013c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1a:	3318      	adds	r3, #24
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7ff f87d 	bl	8013c1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b40:	2200      	movs	r2, #0
 8014b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014b46:	683a      	ldr	r2, [r7, #0]
 8014b48:	68f9      	ldr	r1, [r7, #12]
 8014b4a:	69b8      	ldr	r0, [r7, #24]
 8014b4c:	f001 fa06 	bl	8015f5c <pxPortInitialiseStack>
 8014b50:	4602      	mov	r2, r0
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d002      	beq.n	8014b62 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b62:	bf00      	nop
 8014b64:	3720      	adds	r7, #32
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
	...

08014b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014b74:	f001 fb1e 	bl	80161b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014b78:	4b2d      	ldr	r3, [pc, #180]	; (8014c30 <prvAddNewTaskToReadyList+0xc4>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	4a2c      	ldr	r2, [pc, #176]	; (8014c30 <prvAddNewTaskToReadyList+0xc4>)
 8014b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014b82:	4b2c      	ldr	r3, [pc, #176]	; (8014c34 <prvAddNewTaskToReadyList+0xc8>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d109      	bne.n	8014b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014b8a:	4a2a      	ldr	r2, [pc, #168]	; (8014c34 <prvAddNewTaskToReadyList+0xc8>)
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014b90:	4b27      	ldr	r3, [pc, #156]	; (8014c30 <prvAddNewTaskToReadyList+0xc4>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d110      	bne.n	8014bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014b98:	f000 fcbc 	bl	8015514 <prvInitialiseTaskLists>
 8014b9c:	e00d      	b.n	8014bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014b9e:	4b26      	ldr	r3, [pc, #152]	; (8014c38 <prvAddNewTaskToReadyList+0xcc>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d109      	bne.n	8014bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014ba6:	4b23      	ldr	r3, [pc, #140]	; (8014c34 <prvAddNewTaskToReadyList+0xc8>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d802      	bhi.n	8014bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014bb4:	4a1f      	ldr	r2, [pc, #124]	; (8014c34 <prvAddNewTaskToReadyList+0xc8>)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014bba:	4b20      	ldr	r3, [pc, #128]	; (8014c3c <prvAddNewTaskToReadyList+0xd0>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	4a1e      	ldr	r2, [pc, #120]	; (8014c3c <prvAddNewTaskToReadyList+0xd0>)
 8014bc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014bc4:	4b1d      	ldr	r3, [pc, #116]	; (8014c3c <prvAddNewTaskToReadyList+0xd0>)
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bd0:	4b1b      	ldr	r3, [pc, #108]	; (8014c40 <prvAddNewTaskToReadyList+0xd4>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d903      	bls.n	8014be0 <prvAddNewTaskToReadyList+0x74>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bdc:	4a18      	ldr	r2, [pc, #96]	; (8014c40 <prvAddNewTaskToReadyList+0xd4>)
 8014bde:	6013      	str	r3, [r2, #0]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014be4:	4613      	mov	r3, r2
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	4413      	add	r3, r2
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	4a15      	ldr	r2, [pc, #84]	; (8014c44 <prvAddNewTaskToReadyList+0xd8>)
 8014bee:	441a      	add	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	f7ff f81d 	bl	8013c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014bfc:	f001 fb0a 	bl	8016214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014c00:	4b0d      	ldr	r3, [pc, #52]	; (8014c38 <prvAddNewTaskToReadyList+0xcc>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00e      	beq.n	8014c26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014c08:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <prvAddNewTaskToReadyList+0xc8>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d207      	bcs.n	8014c26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014c16:	4b0c      	ldr	r3, [pc, #48]	; (8014c48 <prvAddNewTaskToReadyList+0xdc>)
 8014c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c1c:	601a      	str	r2, [r3, #0]
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c26:	bf00      	nop
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	24001880 	.word	0x24001880
 8014c34:	240013ac 	.word	0x240013ac
 8014c38:	2400188c 	.word	0x2400188c
 8014c3c:	2400189c 	.word	0x2400189c
 8014c40:	24001888 	.word	0x24001888
 8014c44:	240013b0 	.word	0x240013b0
 8014c48:	e000ed04 	.word	0xe000ed04

08014c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014c54:	2300      	movs	r3, #0
 8014c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d017      	beq.n	8014c8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014c5e:	4b13      	ldr	r3, [pc, #76]	; (8014cac <vTaskDelay+0x60>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00a      	beq.n	8014c7c <vTaskDelay+0x30>
	__asm volatile
 8014c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6a:	f383 8811 	msr	BASEPRI, r3
 8014c6e:	f3bf 8f6f 	isb	sy
 8014c72:	f3bf 8f4f 	dsb	sy
 8014c76:	60bb      	str	r3, [r7, #8]
}
 8014c78:	bf00      	nop
 8014c7a:	e7fe      	b.n	8014c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014c7c:	f000 f880 	bl	8014d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014c80:	2100      	movs	r1, #0
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 fda8 	bl	80157d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014c88:	f000 f888 	bl	8014d9c <xTaskResumeAll>
 8014c8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d107      	bne.n	8014ca4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014c94:	4b06      	ldr	r3, [pc, #24]	; (8014cb0 <vTaskDelay+0x64>)
 8014c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	f3bf 8f4f 	dsb	sy
 8014ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ca4:	bf00      	nop
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	240018a8 	.word	0x240018a8
 8014cb0:	e000ed04 	.word	0xe000ed04

08014cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b08a      	sub	sp, #40	; 0x28
 8014cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014cc2:	463a      	mov	r2, r7
 8014cc4:	1d39      	adds	r1, r7, #4
 8014cc6:	f107 0308 	add.w	r3, r7, #8
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe fd64 	bl	8013798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014cd0:	6839      	ldr	r1, [r7, #0]
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	9202      	str	r2, [sp, #8]
 8014cd8:	9301      	str	r3, [sp, #4]
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	2300      	movs	r3, #0
 8014ce0:	460a      	mov	r2, r1
 8014ce2:	4921      	ldr	r1, [pc, #132]	; (8014d68 <vTaskStartScheduler+0xb4>)
 8014ce4:	4821      	ldr	r0, [pc, #132]	; (8014d6c <vTaskStartScheduler+0xb8>)
 8014ce6:	f7ff fe0f 	bl	8014908 <xTaskCreateStatic>
 8014cea:	4603      	mov	r3, r0
 8014cec:	4a20      	ldr	r2, [pc, #128]	; (8014d70 <vTaskStartScheduler+0xbc>)
 8014cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014cf0:	4b1f      	ldr	r3, [pc, #124]	; (8014d70 <vTaskStartScheduler+0xbc>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d002      	beq.n	8014cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	617b      	str	r3, [r7, #20]
 8014cfc:	e001      	b.n	8014d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d102      	bne.n	8014d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014d08:	f000 fdba 	bl	8015880 <xTimerCreateTimerTask>
 8014d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d116      	bne.n	8014d42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d18:	f383 8811 	msr	BASEPRI, r3
 8014d1c:	f3bf 8f6f 	isb	sy
 8014d20:	f3bf 8f4f 	dsb	sy
 8014d24:	613b      	str	r3, [r7, #16]
}
 8014d26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014d28:	4b12      	ldr	r3, [pc, #72]	; (8014d74 <vTaskStartScheduler+0xc0>)
 8014d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014d30:	4b11      	ldr	r3, [pc, #68]	; (8014d78 <vTaskStartScheduler+0xc4>)
 8014d32:	2201      	movs	r2, #1
 8014d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014d36:	4b11      	ldr	r3, [pc, #68]	; (8014d7c <vTaskStartScheduler+0xc8>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014d3c:	f001 f998 	bl	8016070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014d40:	e00e      	b.n	8014d60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d48:	d10a      	bne.n	8014d60 <vTaskStartScheduler+0xac>
	__asm volatile
 8014d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d4e:	f383 8811 	msr	BASEPRI, r3
 8014d52:	f3bf 8f6f 	isb	sy
 8014d56:	f3bf 8f4f 	dsb	sy
 8014d5a:	60fb      	str	r3, [r7, #12]
}
 8014d5c:	bf00      	nop
 8014d5e:	e7fe      	b.n	8014d5e <vTaskStartScheduler+0xaa>
}
 8014d60:	bf00      	nop
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	080174e0 	.word	0x080174e0
 8014d6c:	080154e5 	.word	0x080154e5
 8014d70:	240018a4 	.word	0x240018a4
 8014d74:	240018a0 	.word	0x240018a0
 8014d78:	2400188c 	.word	0x2400188c
 8014d7c:	24001884 	.word	0x24001884

08014d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014d80:	b480      	push	{r7}
 8014d82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014d84:	4b04      	ldr	r3, [pc, #16]	; (8014d98 <vTaskSuspendAll+0x18>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	4a03      	ldr	r2, [pc, #12]	; (8014d98 <vTaskSuspendAll+0x18>)
 8014d8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014d8e:	bf00      	nop
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr
 8014d98:	240018a8 	.word	0x240018a8

08014d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014da2:	2300      	movs	r3, #0
 8014da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014da6:	2300      	movs	r3, #0
 8014da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014daa:	4b42      	ldr	r3, [pc, #264]	; (8014eb4 <xTaskResumeAll+0x118>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d10a      	bne.n	8014dc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8014db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db6:	f383 8811 	msr	BASEPRI, r3
 8014dba:	f3bf 8f6f 	isb	sy
 8014dbe:	f3bf 8f4f 	dsb	sy
 8014dc2:	603b      	str	r3, [r7, #0]
}
 8014dc4:	bf00      	nop
 8014dc6:	e7fe      	b.n	8014dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014dc8:	f001 f9f4 	bl	80161b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014dcc:	4b39      	ldr	r3, [pc, #228]	; (8014eb4 <xTaskResumeAll+0x118>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	4a38      	ldr	r2, [pc, #224]	; (8014eb4 <xTaskResumeAll+0x118>)
 8014dd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014dd6:	4b37      	ldr	r3, [pc, #220]	; (8014eb4 <xTaskResumeAll+0x118>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d162      	bne.n	8014ea4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014dde:	4b36      	ldr	r3, [pc, #216]	; (8014eb8 <xTaskResumeAll+0x11c>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d05e      	beq.n	8014ea4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014de6:	e02f      	b.n	8014e48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014de8:	4b34      	ldr	r3, [pc, #208]	; (8014ebc <xTaskResumeAll+0x120>)
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	3318      	adds	r3, #24
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fe ff7b 	bl	8013cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fe ff76 	bl	8013cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e08:	4b2d      	ldr	r3, [pc, #180]	; (8014ec0 <xTaskResumeAll+0x124>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d903      	bls.n	8014e18 <xTaskResumeAll+0x7c>
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e14:	4a2a      	ldr	r2, [pc, #168]	; (8014ec0 <xTaskResumeAll+0x124>)
 8014e16:	6013      	str	r3, [r2, #0]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	4413      	add	r3, r2
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	4a27      	ldr	r2, [pc, #156]	; (8014ec4 <xTaskResumeAll+0x128>)
 8014e26:	441a      	add	r2, r3
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	3304      	adds	r3, #4
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	4610      	mov	r0, r2
 8014e30:	f7fe ff01 	bl	8013c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e38:	4b23      	ldr	r3, [pc, #140]	; (8014ec8 <xTaskResumeAll+0x12c>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d302      	bcc.n	8014e48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014e42:	4b22      	ldr	r3, [pc, #136]	; (8014ecc <xTaskResumeAll+0x130>)
 8014e44:	2201      	movs	r2, #1
 8014e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e48:	4b1c      	ldr	r3, [pc, #112]	; (8014ebc <xTaskResumeAll+0x120>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d1cb      	bne.n	8014de8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d001      	beq.n	8014e5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014e56:	f000 fbfb 	bl	8015650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014e5a:	4b1d      	ldr	r3, [pc, #116]	; (8014ed0 <xTaskResumeAll+0x134>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d010      	beq.n	8014e88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014e66:	f000 f847 	bl	8014ef8 <xTaskIncrementTick>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d002      	beq.n	8014e76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014e70:	4b16      	ldr	r3, [pc, #88]	; (8014ecc <xTaskResumeAll+0x130>)
 8014e72:	2201      	movs	r2, #1
 8014e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d1f1      	bne.n	8014e66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014e82:	4b13      	ldr	r3, [pc, #76]	; (8014ed0 <xTaskResumeAll+0x134>)
 8014e84:	2200      	movs	r2, #0
 8014e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014e88:	4b10      	ldr	r3, [pc, #64]	; (8014ecc <xTaskResumeAll+0x130>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d009      	beq.n	8014ea4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014e90:	2301      	movs	r3, #1
 8014e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014e94:	4b0f      	ldr	r3, [pc, #60]	; (8014ed4 <xTaskResumeAll+0x138>)
 8014e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e9a:	601a      	str	r2, [r3, #0]
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ea4:	f001 f9b6 	bl	8016214 <vPortExitCritical>

	return xAlreadyYielded;
 8014ea8:	68bb      	ldr	r3, [r7, #8]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3710      	adds	r7, #16
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	240018a8 	.word	0x240018a8
 8014eb8:	24001880 	.word	0x24001880
 8014ebc:	24001840 	.word	0x24001840
 8014ec0:	24001888 	.word	0x24001888
 8014ec4:	240013b0 	.word	0x240013b0
 8014ec8:	240013ac 	.word	0x240013ac
 8014ecc:	24001894 	.word	0x24001894
 8014ed0:	24001890 	.word	0x24001890
 8014ed4:	e000ed04 	.word	0xe000ed04

08014ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014ede:	4b05      	ldr	r3, [pc, #20]	; (8014ef4 <xTaskGetTickCount+0x1c>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014ee4:	687b      	ldr	r3, [r7, #4]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	370c      	adds	r7, #12
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr
 8014ef2:	bf00      	nop
 8014ef4:	24001884 	.word	0x24001884

08014ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b086      	sub	sp, #24
 8014efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014efe:	2300      	movs	r3, #0
 8014f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f02:	4b53      	ldr	r3, [pc, #332]	; (8015050 <xTaskIncrementTick+0x158>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	f040 8095 	bne.w	8015036 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014f0c:	4b51      	ldr	r3, [pc, #324]	; (8015054 <xTaskIncrementTick+0x15c>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	3301      	adds	r3, #1
 8014f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014f14:	4a4f      	ldr	r2, [pc, #316]	; (8015054 <xTaskIncrementTick+0x15c>)
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d120      	bne.n	8014f62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014f20:	4b4d      	ldr	r3, [pc, #308]	; (8015058 <xTaskIncrementTick+0x160>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d00a      	beq.n	8014f40 <xTaskIncrementTick+0x48>
	__asm volatile
 8014f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	603b      	str	r3, [r7, #0]
}
 8014f3c:	bf00      	nop
 8014f3e:	e7fe      	b.n	8014f3e <xTaskIncrementTick+0x46>
 8014f40:	4b45      	ldr	r3, [pc, #276]	; (8015058 <xTaskIncrementTick+0x160>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	60fb      	str	r3, [r7, #12]
 8014f46:	4b45      	ldr	r3, [pc, #276]	; (801505c <xTaskIncrementTick+0x164>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	4a43      	ldr	r2, [pc, #268]	; (8015058 <xTaskIncrementTick+0x160>)
 8014f4c:	6013      	str	r3, [r2, #0]
 8014f4e:	4a43      	ldr	r2, [pc, #268]	; (801505c <xTaskIncrementTick+0x164>)
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	6013      	str	r3, [r2, #0]
 8014f54:	4b42      	ldr	r3, [pc, #264]	; (8015060 <xTaskIncrementTick+0x168>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	4a41      	ldr	r2, [pc, #260]	; (8015060 <xTaskIncrementTick+0x168>)
 8014f5c:	6013      	str	r3, [r2, #0]
 8014f5e:	f000 fb77 	bl	8015650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014f62:	4b40      	ldr	r3, [pc, #256]	; (8015064 <xTaskIncrementTick+0x16c>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	693a      	ldr	r2, [r7, #16]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d349      	bcc.n	8015000 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f6c:	4b3a      	ldr	r3, [pc, #232]	; (8015058 <xTaskIncrementTick+0x160>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d104      	bne.n	8014f80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f76:	4b3b      	ldr	r3, [pc, #236]	; (8015064 <xTaskIncrementTick+0x16c>)
 8014f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f7c:	601a      	str	r2, [r3, #0]
					break;
 8014f7e:	e03f      	b.n	8015000 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f80:	4b35      	ldr	r3, [pc, #212]	; (8015058 <xTaskIncrementTick+0x160>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014f90:	693a      	ldr	r2, [r7, #16]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d203      	bcs.n	8014fa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014f98:	4a32      	ldr	r2, [pc, #200]	; (8015064 <xTaskIncrementTick+0x16c>)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014f9e:	e02f      	b.n	8015000 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fe fea3 	bl	8013cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d004      	beq.n	8014fbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	3318      	adds	r3, #24
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fe fe9a 	bl	8013cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc0:	4b29      	ldr	r3, [pc, #164]	; (8015068 <xTaskIncrementTick+0x170>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d903      	bls.n	8014fd0 <xTaskIncrementTick+0xd8>
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fcc:	4a26      	ldr	r2, [pc, #152]	; (8015068 <xTaskIncrementTick+0x170>)
 8014fce:	6013      	str	r3, [r2, #0]
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	009b      	lsls	r3, r3, #2
 8014fd8:	4413      	add	r3, r2
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4a23      	ldr	r2, [pc, #140]	; (801506c <xTaskIncrementTick+0x174>)
 8014fde:	441a      	add	r2, r3
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	4610      	mov	r0, r2
 8014fe8:	f7fe fe25 	bl	8013c36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff0:	4b1f      	ldr	r3, [pc, #124]	; (8015070 <xTaskIncrementTick+0x178>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d3b8      	bcc.n	8014f6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ffe:	e7b5      	b.n	8014f6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015000:	4b1b      	ldr	r3, [pc, #108]	; (8015070 <xTaskIncrementTick+0x178>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015006:	4919      	ldr	r1, [pc, #100]	; (801506c <xTaskIncrementTick+0x174>)
 8015008:	4613      	mov	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4413      	add	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	440b      	add	r3, r1
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b01      	cmp	r3, #1
 8015016:	d901      	bls.n	801501c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015018:	2301      	movs	r3, #1
 801501a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801501c:	4b15      	ldr	r3, [pc, #84]	; (8015074 <xTaskIncrementTick+0x17c>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d101      	bne.n	8015028 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015024:	f7eb fe98 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015028:	4b13      	ldr	r3, [pc, #76]	; (8015078 <xTaskIncrementTick+0x180>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d009      	beq.n	8015044 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015030:	2301      	movs	r3, #1
 8015032:	617b      	str	r3, [r7, #20]
 8015034:	e006      	b.n	8015044 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015036:	4b0f      	ldr	r3, [pc, #60]	; (8015074 <xTaskIncrementTick+0x17c>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	3301      	adds	r3, #1
 801503c:	4a0d      	ldr	r2, [pc, #52]	; (8015074 <xTaskIncrementTick+0x17c>)
 801503e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015040:	f7eb fe8a 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015044:	697b      	ldr	r3, [r7, #20]
}
 8015046:	4618      	mov	r0, r3
 8015048:	3718      	adds	r7, #24
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	240018a8 	.word	0x240018a8
 8015054:	24001884 	.word	0x24001884
 8015058:	24001838 	.word	0x24001838
 801505c:	2400183c 	.word	0x2400183c
 8015060:	24001898 	.word	0x24001898
 8015064:	240018a0 	.word	0x240018a0
 8015068:	24001888 	.word	0x24001888
 801506c:	240013b0 	.word	0x240013b0
 8015070:	240013ac 	.word	0x240013ac
 8015074:	24001890 	.word	0x24001890
 8015078:	24001894 	.word	0x24001894

0801507c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015082:	4b28      	ldr	r3, [pc, #160]	; (8015124 <vTaskSwitchContext+0xa8>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d003      	beq.n	8015092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801508a:	4b27      	ldr	r3, [pc, #156]	; (8015128 <vTaskSwitchContext+0xac>)
 801508c:	2201      	movs	r2, #1
 801508e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015090:	e041      	b.n	8015116 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015092:	4b25      	ldr	r3, [pc, #148]	; (8015128 <vTaskSwitchContext+0xac>)
 8015094:	2200      	movs	r2, #0
 8015096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015098:	4b24      	ldr	r3, [pc, #144]	; (801512c <vTaskSwitchContext+0xb0>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	60fb      	str	r3, [r7, #12]
 801509e:	e010      	b.n	80150c2 <vTaskSwitchContext+0x46>
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d10a      	bne.n	80150bc <vTaskSwitchContext+0x40>
	__asm volatile
 80150a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150aa:	f383 8811 	msr	BASEPRI, r3
 80150ae:	f3bf 8f6f 	isb	sy
 80150b2:	f3bf 8f4f 	dsb	sy
 80150b6:	607b      	str	r3, [r7, #4]
}
 80150b8:	bf00      	nop
 80150ba:	e7fe      	b.n	80150ba <vTaskSwitchContext+0x3e>
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	3b01      	subs	r3, #1
 80150c0:	60fb      	str	r3, [r7, #12]
 80150c2:	491b      	ldr	r1, [pc, #108]	; (8015130 <vTaskSwitchContext+0xb4>)
 80150c4:	68fa      	ldr	r2, [r7, #12]
 80150c6:	4613      	mov	r3, r2
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	4413      	add	r3, r2
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	440b      	add	r3, r1
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d0e4      	beq.n	80150a0 <vTaskSwitchContext+0x24>
 80150d6:	68fa      	ldr	r2, [r7, #12]
 80150d8:	4613      	mov	r3, r2
 80150da:	009b      	lsls	r3, r3, #2
 80150dc:	4413      	add	r3, r2
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	4a13      	ldr	r2, [pc, #76]	; (8015130 <vTaskSwitchContext+0xb4>)
 80150e2:	4413      	add	r3, r2
 80150e4:	60bb      	str	r3, [r7, #8]
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	685a      	ldr	r2, [r3, #4]
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	605a      	str	r2, [r3, #4]
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	685a      	ldr	r2, [r3, #4]
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	3308      	adds	r3, #8
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d104      	bne.n	8015106 <vTaskSwitchContext+0x8a>
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	685a      	ldr	r2, [r3, #4]
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	605a      	str	r2, [r3, #4]
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	4a09      	ldr	r2, [pc, #36]	; (8015134 <vTaskSwitchContext+0xb8>)
 801510e:	6013      	str	r3, [r2, #0]
 8015110:	4a06      	ldr	r2, [pc, #24]	; (801512c <vTaskSwitchContext+0xb0>)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6013      	str	r3, [r2, #0]
}
 8015116:	bf00      	nop
 8015118:	3714      	adds	r7, #20
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	240018a8 	.word	0x240018a8
 8015128:	24001894 	.word	0x24001894
 801512c:	24001888 	.word	0x24001888
 8015130:	240013b0 	.word	0x240013b0
 8015134:	240013ac 	.word	0x240013ac

08015138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d10a      	bne.n	801515e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801514c:	f383 8811 	msr	BASEPRI, r3
 8015150:	f3bf 8f6f 	isb	sy
 8015154:	f3bf 8f4f 	dsb	sy
 8015158:	60fb      	str	r3, [r7, #12]
}
 801515a:	bf00      	nop
 801515c:	e7fe      	b.n	801515c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801515e:	4b07      	ldr	r3, [pc, #28]	; (801517c <vTaskPlaceOnEventList+0x44>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	3318      	adds	r3, #24
 8015164:	4619      	mov	r1, r3
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7fe fd89 	bl	8013c7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801516c:	2101      	movs	r1, #1
 801516e:	6838      	ldr	r0, [r7, #0]
 8015170:	f000 fb32 	bl	80157d8 <prvAddCurrentTaskToDelayedList>
}
 8015174:	bf00      	nop
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	240013ac 	.word	0x240013ac

08015180 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b086      	sub	sp, #24
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d10a      	bne.n	80151a8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015196:	f383 8811 	msr	BASEPRI, r3
 801519a:	f3bf 8f6f 	isb	sy
 801519e:	f3bf 8f4f 	dsb	sy
 80151a2:	617b      	str	r3, [r7, #20]
}
 80151a4:	bf00      	nop
 80151a6:	e7fe      	b.n	80151a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80151a8:	4b11      	ldr	r3, [pc, #68]	; (80151f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d10a      	bne.n	80151c6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80151b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b4:	f383 8811 	msr	BASEPRI, r3
 80151b8:	f3bf 8f6f 	isb	sy
 80151bc:	f3bf 8f4f 	dsb	sy
 80151c0:	613b      	str	r3, [r7, #16]
}
 80151c2:	bf00      	nop
 80151c4:	e7fe      	b.n	80151c4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80151c6:	4b0b      	ldr	r3, [pc, #44]	; (80151f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80151d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80151d2:	4b08      	ldr	r3, [pc, #32]	; (80151f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	3318      	adds	r3, #24
 80151d8:	4619      	mov	r1, r3
 80151da:	68f8      	ldr	r0, [r7, #12]
 80151dc:	f7fe fd2b 	bl	8013c36 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80151e0:	2101      	movs	r1, #1
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 faf8 	bl	80157d8 <prvAddCurrentTaskToDelayedList>
}
 80151e8:	bf00      	nop
 80151ea:	3718      	adds	r7, #24
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	240018a8 	.word	0x240018a8
 80151f4:	240013ac 	.word	0x240013ac

080151f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b086      	sub	sp, #24
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d10a      	bne.n	8015220 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520e:	f383 8811 	msr	BASEPRI, r3
 8015212:	f3bf 8f6f 	isb	sy
 8015216:	f3bf 8f4f 	dsb	sy
 801521a:	617b      	str	r3, [r7, #20]
}
 801521c:	bf00      	nop
 801521e:	e7fe      	b.n	801521e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015220:	4b0a      	ldr	r3, [pc, #40]	; (801524c <vTaskPlaceOnEventListRestricted+0x54>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	3318      	adds	r3, #24
 8015226:	4619      	mov	r1, r3
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f7fe fd04 	bl	8013c36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d002      	beq.n	801523a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015238:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801523a:	6879      	ldr	r1, [r7, #4]
 801523c:	68b8      	ldr	r0, [r7, #8]
 801523e:	f000 facb 	bl	80157d8 <prvAddCurrentTaskToDelayedList>
	}
 8015242:	bf00      	nop
 8015244:	3718      	adds	r7, #24
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	240013ac 	.word	0x240013ac

08015250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b086      	sub	sp, #24
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	68db      	ldr	r3, [r3, #12]
 801525e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d10a      	bne.n	801527c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801526a:	f383 8811 	msr	BASEPRI, r3
 801526e:	f3bf 8f6f 	isb	sy
 8015272:	f3bf 8f4f 	dsb	sy
 8015276:	60fb      	str	r3, [r7, #12]
}
 8015278:	bf00      	nop
 801527a:	e7fe      	b.n	801527a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	3318      	adds	r3, #24
 8015280:	4618      	mov	r0, r3
 8015282:	f7fe fd35 	bl	8013cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015286:	4b1e      	ldr	r3, [pc, #120]	; (8015300 <xTaskRemoveFromEventList+0xb0>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d11d      	bne.n	80152ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	3304      	adds	r3, #4
 8015292:	4618      	mov	r0, r3
 8015294:	f7fe fd2c 	bl	8013cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801529c:	4b19      	ldr	r3, [pc, #100]	; (8015304 <xTaskRemoveFromEventList+0xb4>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d903      	bls.n	80152ac <xTaskRemoveFromEventList+0x5c>
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a8:	4a16      	ldr	r2, [pc, #88]	; (8015304 <xTaskRemoveFromEventList+0xb4>)
 80152aa:	6013      	str	r3, [r2, #0]
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b0:	4613      	mov	r3, r2
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	4413      	add	r3, r2
 80152b6:	009b      	lsls	r3, r3, #2
 80152b8:	4a13      	ldr	r2, [pc, #76]	; (8015308 <xTaskRemoveFromEventList+0xb8>)
 80152ba:	441a      	add	r2, r3
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	3304      	adds	r3, #4
 80152c0:	4619      	mov	r1, r3
 80152c2:	4610      	mov	r0, r2
 80152c4:	f7fe fcb7 	bl	8013c36 <vListInsertEnd>
 80152c8:	e005      	b.n	80152d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	3318      	adds	r3, #24
 80152ce:	4619      	mov	r1, r3
 80152d0:	480e      	ldr	r0, [pc, #56]	; (801530c <xTaskRemoveFromEventList+0xbc>)
 80152d2:	f7fe fcb0 	bl	8013c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152da:	4b0d      	ldr	r3, [pc, #52]	; (8015310 <xTaskRemoveFromEventList+0xc0>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d905      	bls.n	80152f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80152e4:	2301      	movs	r3, #1
 80152e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80152e8:	4b0a      	ldr	r3, [pc, #40]	; (8015314 <xTaskRemoveFromEventList+0xc4>)
 80152ea:	2201      	movs	r2, #1
 80152ec:	601a      	str	r2, [r3, #0]
 80152ee:	e001      	b.n	80152f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80152f0:	2300      	movs	r3, #0
 80152f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80152f4:	697b      	ldr	r3, [r7, #20]
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3718      	adds	r7, #24
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}
 80152fe:	bf00      	nop
 8015300:	240018a8 	.word	0x240018a8
 8015304:	24001888 	.word	0x24001888
 8015308:	240013b0 	.word	0x240013b0
 801530c:	24001840 	.word	0x24001840
 8015310:	240013ac 	.word	0x240013ac
 8015314:	24001894 	.word	0x24001894

08015318 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015322:	4b29      	ldr	r3, [pc, #164]	; (80153c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d10a      	bne.n	8015340 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801532e:	f383 8811 	msr	BASEPRI, r3
 8015332:	f3bf 8f6f 	isb	sy
 8015336:	f3bf 8f4f 	dsb	sy
 801533a:	613b      	str	r3, [r7, #16]
}
 801533c:	bf00      	nop
 801533e:	e7fe      	b.n	801533e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10a      	bne.n	801536c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8015356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	60fb      	str	r3, [r7, #12]
}
 8015368:	bf00      	nop
 801536a:	e7fe      	b.n	801536a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f7fe fcbf 	bl	8013cf0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	3304      	adds	r3, #4
 8015376:	4618      	mov	r0, r3
 8015378:	f7fe fcba 	bl	8013cf0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015380:	4b12      	ldr	r3, [pc, #72]	; (80153cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	429a      	cmp	r2, r3
 8015386:	d903      	bls.n	8015390 <vTaskRemoveFromUnorderedEventList+0x78>
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801538c:	4a0f      	ldr	r2, [pc, #60]	; (80153cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 801538e:	6013      	str	r3, [r2, #0]
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015394:	4613      	mov	r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	4413      	add	r3, r2
 801539a:	009b      	lsls	r3, r3, #2
 801539c:	4a0c      	ldr	r2, [pc, #48]	; (80153d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801539e:	441a      	add	r2, r3
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	3304      	adds	r3, #4
 80153a4:	4619      	mov	r1, r3
 80153a6:	4610      	mov	r0, r2
 80153a8:	f7fe fc45 	bl	8013c36 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153b0:	4b08      	ldr	r3, [pc, #32]	; (80153d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d902      	bls.n	80153c0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80153ba:	4b07      	ldr	r3, [pc, #28]	; (80153d8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80153bc:	2201      	movs	r2, #1
 80153be:	601a      	str	r2, [r3, #0]
	}
}
 80153c0:	bf00      	nop
 80153c2:	3718      	adds	r7, #24
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	240018a8 	.word	0x240018a8
 80153cc:	24001888 	.word	0x24001888
 80153d0:	240013b0 	.word	0x240013b0
 80153d4:	240013ac 	.word	0x240013ac
 80153d8:	24001894 	.word	0x24001894

080153dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80153dc:	b480      	push	{r7}
 80153de:	b083      	sub	sp, #12
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80153e4:	4b06      	ldr	r3, [pc, #24]	; (8015400 <vTaskInternalSetTimeOutState+0x24>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80153ec:	4b05      	ldr	r3, [pc, #20]	; (8015404 <vTaskInternalSetTimeOutState+0x28>)
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	605a      	str	r2, [r3, #4]
}
 80153f4:	bf00      	nop
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr
 8015400:	24001898 	.word	0x24001898
 8015404:	24001884 	.word	0x24001884

08015408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b088      	sub	sp, #32
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10a      	bne.n	801542e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541c:	f383 8811 	msr	BASEPRI, r3
 8015420:	f3bf 8f6f 	isb	sy
 8015424:	f3bf 8f4f 	dsb	sy
 8015428:	613b      	str	r3, [r7, #16]
}
 801542a:	bf00      	nop
 801542c:	e7fe      	b.n	801542c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d10a      	bne.n	801544a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	60fb      	str	r3, [r7, #12]
}
 8015446:	bf00      	nop
 8015448:	e7fe      	b.n	8015448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801544a:	f000 feb3 	bl	80161b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801544e:	4b1d      	ldr	r3, [pc, #116]	; (80154c4 <xTaskCheckForTimeOut+0xbc>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	69ba      	ldr	r2, [r7, #24]
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015466:	d102      	bne.n	801546e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015468:	2300      	movs	r3, #0
 801546a:	61fb      	str	r3, [r7, #28]
 801546c:	e023      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	4b15      	ldr	r3, [pc, #84]	; (80154c8 <xTaskCheckForTimeOut+0xc0>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	429a      	cmp	r2, r3
 8015478:	d007      	beq.n	801548a <xTaskCheckForTimeOut+0x82>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	69ba      	ldr	r2, [r7, #24]
 8015480:	429a      	cmp	r2, r3
 8015482:	d302      	bcc.n	801548a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015484:	2301      	movs	r3, #1
 8015486:	61fb      	str	r3, [r7, #28]
 8015488:	e015      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	697a      	ldr	r2, [r7, #20]
 8015490:	429a      	cmp	r2, r3
 8015492:	d20b      	bcs.n	80154ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	1ad2      	subs	r2, r2, r3
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7ff ff9b 	bl	80153dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80154a6:	2300      	movs	r3, #0
 80154a8:	61fb      	str	r3, [r7, #28]
 80154aa:	e004      	b.n	80154b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	2200      	movs	r2, #0
 80154b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80154b2:	2301      	movs	r3, #1
 80154b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80154b6:	f000 fead 	bl	8016214 <vPortExitCritical>

	return xReturn;
 80154ba:	69fb      	ldr	r3, [r7, #28]
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3720      	adds	r7, #32
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	24001884 	.word	0x24001884
 80154c8:	24001898 	.word	0x24001898

080154cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80154cc:	b480      	push	{r7}
 80154ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80154d0:	4b03      	ldr	r3, [pc, #12]	; (80154e0 <vTaskMissedYield+0x14>)
 80154d2:	2201      	movs	r2, #1
 80154d4:	601a      	str	r2, [r3, #0]
}
 80154d6:	bf00      	nop
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr
 80154e0:	24001894 	.word	0x24001894

080154e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80154ec:	f000 f852 	bl	8015594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80154f0:	4b06      	ldr	r3, [pc, #24]	; (801550c <prvIdleTask+0x28>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	d9f9      	bls.n	80154ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80154f8:	4b05      	ldr	r3, [pc, #20]	; (8015510 <prvIdleTask+0x2c>)
 80154fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fe:	601a      	str	r2, [r3, #0]
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015508:	e7f0      	b.n	80154ec <prvIdleTask+0x8>
 801550a:	bf00      	nop
 801550c:	240013b0 	.word	0x240013b0
 8015510:	e000ed04 	.word	0xe000ed04

08015514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801551a:	2300      	movs	r3, #0
 801551c:	607b      	str	r3, [r7, #4]
 801551e:	e00c      	b.n	801553a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	4613      	mov	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4413      	add	r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	4a12      	ldr	r2, [pc, #72]	; (8015574 <prvInitialiseTaskLists+0x60>)
 801552c:	4413      	add	r3, r2
 801552e:	4618      	mov	r0, r3
 8015530:	f7fe fb54 	bl	8013bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	3301      	adds	r3, #1
 8015538:	607b      	str	r3, [r7, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b37      	cmp	r3, #55	; 0x37
 801553e:	d9ef      	bls.n	8015520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015540:	480d      	ldr	r0, [pc, #52]	; (8015578 <prvInitialiseTaskLists+0x64>)
 8015542:	f7fe fb4b 	bl	8013bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015546:	480d      	ldr	r0, [pc, #52]	; (801557c <prvInitialiseTaskLists+0x68>)
 8015548:	f7fe fb48 	bl	8013bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801554c:	480c      	ldr	r0, [pc, #48]	; (8015580 <prvInitialiseTaskLists+0x6c>)
 801554e:	f7fe fb45 	bl	8013bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015552:	480c      	ldr	r0, [pc, #48]	; (8015584 <prvInitialiseTaskLists+0x70>)
 8015554:	f7fe fb42 	bl	8013bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015558:	480b      	ldr	r0, [pc, #44]	; (8015588 <prvInitialiseTaskLists+0x74>)
 801555a:	f7fe fb3f 	bl	8013bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801555e:	4b0b      	ldr	r3, [pc, #44]	; (801558c <prvInitialiseTaskLists+0x78>)
 8015560:	4a05      	ldr	r2, [pc, #20]	; (8015578 <prvInitialiseTaskLists+0x64>)
 8015562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015564:	4b0a      	ldr	r3, [pc, #40]	; (8015590 <prvInitialiseTaskLists+0x7c>)
 8015566:	4a05      	ldr	r2, [pc, #20]	; (801557c <prvInitialiseTaskLists+0x68>)
 8015568:	601a      	str	r2, [r3, #0]
}
 801556a:	bf00      	nop
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	240013b0 	.word	0x240013b0
 8015578:	24001810 	.word	0x24001810
 801557c:	24001824 	.word	0x24001824
 8015580:	24001840 	.word	0x24001840
 8015584:	24001854 	.word	0x24001854
 8015588:	2400186c 	.word	0x2400186c
 801558c:	24001838 	.word	0x24001838
 8015590:	2400183c 	.word	0x2400183c

08015594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801559a:	e019      	b.n	80155d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801559c:	f000 fe0a 	bl	80161b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155a0:	4b10      	ldr	r3, [pc, #64]	; (80155e4 <prvCheckTasksWaitingTermination+0x50>)
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	3304      	adds	r3, #4
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fe fb9f 	bl	8013cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80155b2:	4b0d      	ldr	r3, [pc, #52]	; (80155e8 <prvCheckTasksWaitingTermination+0x54>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	3b01      	subs	r3, #1
 80155b8:	4a0b      	ldr	r2, [pc, #44]	; (80155e8 <prvCheckTasksWaitingTermination+0x54>)
 80155ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80155bc:	4b0b      	ldr	r3, [pc, #44]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3b01      	subs	r3, #1
 80155c2:	4a0a      	ldr	r2, [pc, #40]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80155c6:	f000 fe25 	bl	8016214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f000 f810 	bl	80155f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80155d0:	4b06      	ldr	r3, [pc, #24]	; (80155ec <prvCheckTasksWaitingTermination+0x58>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d1e1      	bne.n	801559c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80155d8:	bf00      	nop
 80155da:	bf00      	nop
 80155dc:	3708      	adds	r7, #8
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}
 80155e2:	bf00      	nop
 80155e4:	24001854 	.word	0x24001854
 80155e8:	24001880 	.word	0x24001880
 80155ec:	24001868 	.word	0x24001868

080155f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d108      	bne.n	8015614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015606:	4618      	mov	r0, r3
 8015608:	f000 ffc2 	bl	8016590 <vPortFree>
				vPortFree( pxTCB );
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f000 ffbf 	bl	8016590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015612:	e018      	b.n	8015646 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801561a:	2b01      	cmp	r3, #1
 801561c:	d103      	bne.n	8015626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f000 ffb6 	bl	8016590 <vPortFree>
	}
 8015624:	e00f      	b.n	8015646 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801562c:	2b02      	cmp	r3, #2
 801562e:	d00a      	beq.n	8015646 <prvDeleteTCB+0x56>
	__asm volatile
 8015630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015634:	f383 8811 	msr	BASEPRI, r3
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	60fb      	str	r3, [r7, #12]
}
 8015642:	bf00      	nop
 8015644:	e7fe      	b.n	8015644 <prvDeleteTCB+0x54>
	}
 8015646:	bf00      	nop
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
	...

08015650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015656:	4b0c      	ldr	r3, [pc, #48]	; (8015688 <prvResetNextTaskUnblockTime+0x38>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d104      	bne.n	801566a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015660:	4b0a      	ldr	r3, [pc, #40]	; (801568c <prvResetNextTaskUnblockTime+0x3c>)
 8015662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015668:	e008      	b.n	801567c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801566a:	4b07      	ldr	r3, [pc, #28]	; (8015688 <prvResetNextTaskUnblockTime+0x38>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	4a04      	ldr	r2, [pc, #16]	; (801568c <prvResetNextTaskUnblockTime+0x3c>)
 801567a:	6013      	str	r3, [r2, #0]
}
 801567c:	bf00      	nop
 801567e:	370c      	adds	r7, #12
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr
 8015688:	24001838 	.word	0x24001838
 801568c:	240018a0 	.word	0x240018a0

08015690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015696:	4b0b      	ldr	r3, [pc, #44]	; (80156c4 <xTaskGetSchedulerState+0x34>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d102      	bne.n	80156a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801569e:	2301      	movs	r3, #1
 80156a0:	607b      	str	r3, [r7, #4]
 80156a2:	e008      	b.n	80156b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80156a4:	4b08      	ldr	r3, [pc, #32]	; (80156c8 <xTaskGetSchedulerState+0x38>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d102      	bne.n	80156b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80156ac:	2302      	movs	r3, #2
 80156ae:	607b      	str	r3, [r7, #4]
 80156b0:	e001      	b.n	80156b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80156b2:	2300      	movs	r3, #0
 80156b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80156b6:	687b      	ldr	r3, [r7, #4]
	}
 80156b8:	4618      	mov	r0, r3
 80156ba:	370c      	adds	r7, #12
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr
 80156c4:	2400188c 	.word	0x2400188c
 80156c8:	240018a8 	.word	0x240018a8

080156cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80156d8:	2300      	movs	r3, #0
 80156da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d056      	beq.n	8015790 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80156e2:	4b2e      	ldr	r3, [pc, #184]	; (801579c <xTaskPriorityDisinherit+0xd0>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	693a      	ldr	r2, [r7, #16]
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d00a      	beq.n	8015702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80156ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f0:	f383 8811 	msr	BASEPRI, r3
 80156f4:	f3bf 8f6f 	isb	sy
 80156f8:	f3bf 8f4f 	dsb	sy
 80156fc:	60fb      	str	r3, [r7, #12]
}
 80156fe:	bf00      	nop
 8015700:	e7fe      	b.n	8015700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015706:	2b00      	cmp	r3, #0
 8015708:	d10a      	bne.n	8015720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801570e:	f383 8811 	msr	BASEPRI, r3
 8015712:	f3bf 8f6f 	isb	sy
 8015716:	f3bf 8f4f 	dsb	sy
 801571a:	60bb      	str	r3, [r7, #8]
}
 801571c:	bf00      	nop
 801571e:	e7fe      	b.n	801571e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015724:	1e5a      	subs	r2, r3, #1
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015732:	429a      	cmp	r2, r3
 8015734:	d02c      	beq.n	8015790 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801573a:	2b00      	cmp	r3, #0
 801573c:	d128      	bne.n	8015790 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	3304      	adds	r3, #4
 8015742:	4618      	mov	r0, r3
 8015744:	f7fe fad4 	bl	8013cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015754:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015760:	4b0f      	ldr	r3, [pc, #60]	; (80157a0 <xTaskPriorityDisinherit+0xd4>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	429a      	cmp	r2, r3
 8015766:	d903      	bls.n	8015770 <xTaskPriorityDisinherit+0xa4>
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801576c:	4a0c      	ldr	r2, [pc, #48]	; (80157a0 <xTaskPriorityDisinherit+0xd4>)
 801576e:	6013      	str	r3, [r2, #0]
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015774:	4613      	mov	r3, r2
 8015776:	009b      	lsls	r3, r3, #2
 8015778:	4413      	add	r3, r2
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	4a09      	ldr	r2, [pc, #36]	; (80157a4 <xTaskPriorityDisinherit+0xd8>)
 801577e:	441a      	add	r2, r3
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	3304      	adds	r3, #4
 8015784:	4619      	mov	r1, r3
 8015786:	4610      	mov	r0, r2
 8015788:	f7fe fa55 	bl	8013c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801578c:	2301      	movs	r3, #1
 801578e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015790:	697b      	ldr	r3, [r7, #20]
	}
 8015792:	4618      	mov	r0, r3
 8015794:	3718      	adds	r7, #24
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	240013ac 	.word	0x240013ac
 80157a0:	24001888 	.word	0x24001888
 80157a4:	240013b0 	.word	0x240013b0

080157a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80157ae:	4b09      	ldr	r3, [pc, #36]	; (80157d4 <uxTaskResetEventItemValue+0x2c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	699b      	ldr	r3, [r3, #24]
 80157b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157b6:	4b07      	ldr	r3, [pc, #28]	; (80157d4 <uxTaskResetEventItemValue+0x2c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157bc:	4b05      	ldr	r3, [pc, #20]	; (80157d4 <uxTaskResetEventItemValue+0x2c>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80157c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80157c6:	687b      	ldr	r3, [r7, #4]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	240013ac 	.word	0x240013ac

080157d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80157e2:	4b21      	ldr	r3, [pc, #132]	; (8015868 <prvAddCurrentTaskToDelayedList+0x90>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157e8:	4b20      	ldr	r3, [pc, #128]	; (801586c <prvAddCurrentTaskToDelayedList+0x94>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	3304      	adds	r3, #4
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7fe fa7e 	bl	8013cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157fa:	d10a      	bne.n	8015812 <prvAddCurrentTaskToDelayedList+0x3a>
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d007      	beq.n	8015812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015802:	4b1a      	ldr	r3, [pc, #104]	; (801586c <prvAddCurrentTaskToDelayedList+0x94>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	3304      	adds	r3, #4
 8015808:	4619      	mov	r1, r3
 801580a:	4819      	ldr	r0, [pc, #100]	; (8015870 <prvAddCurrentTaskToDelayedList+0x98>)
 801580c:	f7fe fa13 	bl	8013c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015810:	e026      	b.n	8015860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015812:	68fa      	ldr	r2, [r7, #12]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	4413      	add	r3, r2
 8015818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801581a:	4b14      	ldr	r3, [pc, #80]	; (801586c <prvAddCurrentTaskToDelayedList+0x94>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	68ba      	ldr	r2, [r7, #8]
 8015820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	429a      	cmp	r2, r3
 8015828:	d209      	bcs.n	801583e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801582a:	4b12      	ldr	r3, [pc, #72]	; (8015874 <prvAddCurrentTaskToDelayedList+0x9c>)
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	4b0f      	ldr	r3, [pc, #60]	; (801586c <prvAddCurrentTaskToDelayedList+0x94>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	3304      	adds	r3, #4
 8015834:	4619      	mov	r1, r3
 8015836:	4610      	mov	r0, r2
 8015838:	f7fe fa21 	bl	8013c7e <vListInsert>
}
 801583c:	e010      	b.n	8015860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801583e:	4b0e      	ldr	r3, [pc, #56]	; (8015878 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	4b0a      	ldr	r3, [pc, #40]	; (801586c <prvAddCurrentTaskToDelayedList+0x94>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	3304      	adds	r3, #4
 8015848:	4619      	mov	r1, r3
 801584a:	4610      	mov	r0, r2
 801584c:	f7fe fa17 	bl	8013c7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015850:	4b0a      	ldr	r3, [pc, #40]	; (801587c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	68ba      	ldr	r2, [r7, #8]
 8015856:	429a      	cmp	r2, r3
 8015858:	d202      	bcs.n	8015860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801585a:	4a08      	ldr	r2, [pc, #32]	; (801587c <prvAddCurrentTaskToDelayedList+0xa4>)
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	6013      	str	r3, [r2, #0]
}
 8015860:	bf00      	nop
 8015862:	3710      	adds	r7, #16
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}
 8015868:	24001884 	.word	0x24001884
 801586c:	240013ac 	.word	0x240013ac
 8015870:	2400186c 	.word	0x2400186c
 8015874:	2400183c 	.word	0x2400183c
 8015878:	24001838 	.word	0x24001838
 801587c:	240018a0 	.word	0x240018a0

08015880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b08a      	sub	sp, #40	; 0x28
 8015884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015886:	2300      	movs	r3, #0
 8015888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801588a:	f000 fb07 	bl	8015e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801588e:	4b1c      	ldr	r3, [pc, #112]	; (8015900 <xTimerCreateTimerTask+0x80>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d021      	beq.n	80158da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015896:	2300      	movs	r3, #0
 8015898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801589a:	2300      	movs	r3, #0
 801589c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801589e:	1d3a      	adds	r2, r7, #4
 80158a0:	f107 0108 	add.w	r1, r7, #8
 80158a4:	f107 030c 	add.w	r3, r7, #12
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fd ff8f 	bl	80137cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80158ae:	6879      	ldr	r1, [r7, #4]
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	9202      	str	r2, [sp, #8]
 80158b6:	9301      	str	r3, [sp, #4]
 80158b8:	2302      	movs	r3, #2
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	2300      	movs	r3, #0
 80158be:	460a      	mov	r2, r1
 80158c0:	4910      	ldr	r1, [pc, #64]	; (8015904 <xTimerCreateTimerTask+0x84>)
 80158c2:	4811      	ldr	r0, [pc, #68]	; (8015908 <xTimerCreateTimerTask+0x88>)
 80158c4:	f7ff f820 	bl	8014908 <xTaskCreateStatic>
 80158c8:	4603      	mov	r3, r0
 80158ca:	4a10      	ldr	r2, [pc, #64]	; (801590c <xTimerCreateTimerTask+0x8c>)
 80158cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80158ce:	4b0f      	ldr	r3, [pc, #60]	; (801590c <xTimerCreateTimerTask+0x8c>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d001      	beq.n	80158da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80158d6:	2301      	movs	r3, #1
 80158d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10a      	bne.n	80158f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80158e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e4:	f383 8811 	msr	BASEPRI, r3
 80158e8:	f3bf 8f6f 	isb	sy
 80158ec:	f3bf 8f4f 	dsb	sy
 80158f0:	613b      	str	r3, [r7, #16]
}
 80158f2:	bf00      	nop
 80158f4:	e7fe      	b.n	80158f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80158f6:	697b      	ldr	r3, [r7, #20]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3718      	adds	r7, #24
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	240018dc 	.word	0x240018dc
 8015904:	080174e8 	.word	0x080174e8
 8015908:	08015a45 	.word	0x08015a45
 801590c:	240018e0 	.word	0x240018e0

08015910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b08a      	sub	sp, #40	; 0x28
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	60b9      	str	r1, [r7, #8]
 801591a:	607a      	str	r2, [r7, #4]
 801591c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801591e:	2300      	movs	r3, #0
 8015920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <xTimerGenericCommand+0x2e>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	623b      	str	r3, [r7, #32]
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801593e:	4b1a      	ldr	r3, [pc, #104]	; (80159a8 <xTimerGenericCommand+0x98>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d02a      	beq.n	801599c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	2b05      	cmp	r3, #5
 8015956:	dc18      	bgt.n	801598a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015958:	f7ff fe9a 	bl	8015690 <xTaskGetSchedulerState>
 801595c:	4603      	mov	r3, r0
 801595e:	2b02      	cmp	r3, #2
 8015960:	d109      	bne.n	8015976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015962:	4b11      	ldr	r3, [pc, #68]	; (80159a8 <xTimerGenericCommand+0x98>)
 8015964:	6818      	ldr	r0, [r3, #0]
 8015966:	f107 0110 	add.w	r1, r7, #16
 801596a:	2300      	movs	r3, #0
 801596c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801596e:	f7fe fb27 	bl	8013fc0 <xQueueGenericSend>
 8015972:	6278      	str	r0, [r7, #36]	; 0x24
 8015974:	e012      	b.n	801599c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015976:	4b0c      	ldr	r3, [pc, #48]	; (80159a8 <xTimerGenericCommand+0x98>)
 8015978:	6818      	ldr	r0, [r3, #0]
 801597a:	f107 0110 	add.w	r1, r7, #16
 801597e:	2300      	movs	r3, #0
 8015980:	2200      	movs	r2, #0
 8015982:	f7fe fb1d 	bl	8013fc0 <xQueueGenericSend>
 8015986:	6278      	str	r0, [r7, #36]	; 0x24
 8015988:	e008      	b.n	801599c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801598a:	4b07      	ldr	r3, [pc, #28]	; (80159a8 <xTimerGenericCommand+0x98>)
 801598c:	6818      	ldr	r0, [r3, #0]
 801598e:	f107 0110 	add.w	r1, r7, #16
 8015992:	2300      	movs	r3, #0
 8015994:	683a      	ldr	r2, [r7, #0]
 8015996:	f7fe fc11 	bl	80141bc <xQueueGenericSendFromISR>
 801599a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3728      	adds	r7, #40	; 0x28
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	240018dc 	.word	0x240018dc

080159ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b088      	sub	sp, #32
 80159b0:	af02      	add	r7, sp, #8
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159b6:	4b22      	ldr	r3, [pc, #136]	; (8015a40 <prvProcessExpiredTimer+0x94>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	3304      	adds	r3, #4
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7fe f993 	bl	8013cf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159d0:	f003 0304 	and.w	r3, r3, #4
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d022      	beq.n	8015a1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	699a      	ldr	r2, [r3, #24]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	18d1      	adds	r1, r2, r3
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	683a      	ldr	r2, [r7, #0]
 80159e4:	6978      	ldr	r0, [r7, #20]
 80159e6:	f000 f8d1 	bl	8015b8c <prvInsertTimerInActiveList>
 80159ea:	4603      	mov	r3, r0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d01f      	beq.n	8015a30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80159f0:	2300      	movs	r3, #0
 80159f2:	9300      	str	r3, [sp, #0]
 80159f4:	2300      	movs	r3, #0
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	2100      	movs	r1, #0
 80159fa:	6978      	ldr	r0, [r7, #20]
 80159fc:	f7ff ff88 	bl	8015910 <xTimerGenericCommand>
 8015a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d113      	bne.n	8015a30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0c:	f383 8811 	msr	BASEPRI, r3
 8015a10:	f3bf 8f6f 	isb	sy
 8015a14:	f3bf 8f4f 	dsb	sy
 8015a18:	60fb      	str	r3, [r7, #12]
}
 8015a1a:	bf00      	nop
 8015a1c:	e7fe      	b.n	8015a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a24:	f023 0301 	bic.w	r3, r3, #1
 8015a28:	b2da      	uxtb	r2, r3
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	6a1b      	ldr	r3, [r3, #32]
 8015a34:	6978      	ldr	r0, [r7, #20]
 8015a36:	4798      	blx	r3
}
 8015a38:	bf00      	nop
 8015a3a:	3718      	adds	r7, #24
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	240018d4 	.word	0x240018d4

08015a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b084      	sub	sp, #16
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015a4c:	f107 0308 	add.w	r3, r7, #8
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f857 	bl	8015b04 <prvGetNextExpireTime>
 8015a56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	68f8      	ldr	r0, [r7, #12]
 8015a5e:	f000 f803 	bl	8015a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015a62:	f000 f8d5 	bl	8015c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015a66:	e7f1      	b.n	8015a4c <prvTimerTask+0x8>

08015a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015a72:	f7ff f985 	bl	8014d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015a76:	f107 0308 	add.w	r3, r7, #8
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 f866 	bl	8015b4c <prvSampleTimeNow>
 8015a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d130      	bne.n	8015aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d10a      	bne.n	8015aa4 <prvProcessTimerOrBlockTask+0x3c>
 8015a8e:	687a      	ldr	r2, [r7, #4]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d806      	bhi.n	8015aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015a96:	f7ff f981 	bl	8014d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015a9a:	68f9      	ldr	r1, [r7, #12]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7ff ff85 	bl	80159ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015aa2:	e024      	b.n	8015aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d008      	beq.n	8015abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015aaa:	4b13      	ldr	r3, [pc, #76]	; (8015af8 <prvProcessTimerOrBlockTask+0x90>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d101      	bne.n	8015ab8 <prvProcessTimerOrBlockTask+0x50>
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e000      	b.n	8015aba <prvProcessTimerOrBlockTask+0x52>
 8015ab8:	2300      	movs	r3, #0
 8015aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015abc:	4b0f      	ldr	r3, [pc, #60]	; (8015afc <prvProcessTimerOrBlockTask+0x94>)
 8015abe:	6818      	ldr	r0, [r3, #0]
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	1ad3      	subs	r3, r2, r3
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	4619      	mov	r1, r3
 8015aca:	f7fe fee9 	bl	80148a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015ace:	f7ff f965 	bl	8014d9c <xTaskResumeAll>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d10a      	bne.n	8015aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015ad8:	4b09      	ldr	r3, [pc, #36]	; (8015b00 <prvProcessTimerOrBlockTask+0x98>)
 8015ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ade:	601a      	str	r2, [r3, #0]
 8015ae0:	f3bf 8f4f 	dsb	sy
 8015ae4:	f3bf 8f6f 	isb	sy
}
 8015ae8:	e001      	b.n	8015aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015aea:	f7ff f957 	bl	8014d9c <xTaskResumeAll>
}
 8015aee:	bf00      	nop
 8015af0:	3710      	adds	r7, #16
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	240018d8 	.word	0x240018d8
 8015afc:	240018dc 	.word	0x240018dc
 8015b00:	e000ed04 	.word	0xe000ed04

08015b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015b04:	b480      	push	{r7}
 8015b06:	b085      	sub	sp, #20
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015b0c:	4b0e      	ldr	r3, [pc, #56]	; (8015b48 <prvGetNextExpireTime+0x44>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <prvGetNextExpireTime+0x16>
 8015b16:	2201      	movs	r2, #1
 8015b18:	e000      	b.n	8015b1c <prvGetNextExpireTime+0x18>
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d105      	bne.n	8015b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b28:	4b07      	ldr	r3, [pc, #28]	; (8015b48 <prvGetNextExpireTime+0x44>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	60fb      	str	r3, [r7, #12]
 8015b32:	e001      	b.n	8015b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015b34:	2300      	movs	r3, #0
 8015b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015b38:	68fb      	ldr	r3, [r7, #12]
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3714      	adds	r7, #20
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop
 8015b48:	240018d4 	.word	0x240018d4

08015b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015b54:	f7ff f9c0 	bl	8014ed8 <xTaskGetTickCount>
 8015b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015b5a:	4b0b      	ldr	r3, [pc, #44]	; (8015b88 <prvSampleTimeNow+0x3c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	68fa      	ldr	r2, [r7, #12]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d205      	bcs.n	8015b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015b64:	f000 f936 	bl	8015dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	601a      	str	r2, [r3, #0]
 8015b6e:	e002      	b.n	8015b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2200      	movs	r2, #0
 8015b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015b76:	4a04      	ldr	r2, [pc, #16]	; (8015b88 <prvSampleTimeNow+0x3c>)
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	240018e4 	.word	0x240018e4

08015b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b086      	sub	sp, #24
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	607a      	str	r2, [r7, #4]
 8015b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	68ba      	ldr	r2, [r7, #8]
 8015ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015baa:	68ba      	ldr	r2, [r7, #8]
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d812      	bhi.n	8015bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bb2:	687a      	ldr	r2, [r7, #4]
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	1ad2      	subs	r2, r2, r3
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	699b      	ldr	r3, [r3, #24]
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	d302      	bcc.n	8015bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	617b      	str	r3, [r7, #20]
 8015bc4:	e01b      	b.n	8015bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015bc6:	4b10      	ldr	r3, [pc, #64]	; (8015c08 <prvInsertTimerInActiveList+0x7c>)
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	3304      	adds	r3, #4
 8015bce:	4619      	mov	r1, r3
 8015bd0:	4610      	mov	r0, r2
 8015bd2:	f7fe f854 	bl	8013c7e <vListInsert>
 8015bd6:	e012      	b.n	8015bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d206      	bcs.n	8015bee <prvInsertTimerInActiveList+0x62>
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d302      	bcc.n	8015bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015be8:	2301      	movs	r3, #1
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	e007      	b.n	8015bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015bee:	4b07      	ldr	r3, [pc, #28]	; (8015c0c <prvInsertTimerInActiveList+0x80>)
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	3304      	adds	r3, #4
 8015bf6:	4619      	mov	r1, r3
 8015bf8:	4610      	mov	r0, r2
 8015bfa:	f7fe f840 	bl	8013c7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015bfe:	697b      	ldr	r3, [r7, #20]
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3718      	adds	r7, #24
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	240018d8 	.word	0x240018d8
 8015c0c:	240018d4 	.word	0x240018d4

08015c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b08e      	sub	sp, #56	; 0x38
 8015c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c16:	e0ca      	b.n	8015dae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	da18      	bge.n	8015c50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015c1e:	1d3b      	adds	r3, r7, #4
 8015c20:	3304      	adds	r3, #4
 8015c22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d10a      	bne.n	8015c40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c2e:	f383 8811 	msr	BASEPRI, r3
 8015c32:	f3bf 8f6f 	isb	sy
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	61fb      	str	r3, [r7, #28]
}
 8015c3c:	bf00      	nop
 8015c3e:	e7fe      	b.n	8015c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c46:	6850      	ldr	r0, [r2, #4]
 8015c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c4a:	6892      	ldr	r2, [r2, #8]
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	f2c0 80aa 	blt.w	8015dac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5e:	695b      	ldr	r3, [r3, #20]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d004      	beq.n	8015c6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c66:	3304      	adds	r3, #4
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7fe f841 	bl	8013cf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015c6e:	463b      	mov	r3, r7
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7ff ff6b 	bl	8015b4c <prvSampleTimeNow>
 8015c76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b09      	cmp	r3, #9
 8015c7c:	f200 8097 	bhi.w	8015dae <prvProcessReceivedCommands+0x19e>
 8015c80:	a201      	add	r2, pc, #4	; (adr r2, 8015c88 <prvProcessReceivedCommands+0x78>)
 8015c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c86:	bf00      	nop
 8015c88:	08015cb1 	.word	0x08015cb1
 8015c8c:	08015cb1 	.word	0x08015cb1
 8015c90:	08015cb1 	.word	0x08015cb1
 8015c94:	08015d25 	.word	0x08015d25
 8015c98:	08015d39 	.word	0x08015d39
 8015c9c:	08015d83 	.word	0x08015d83
 8015ca0:	08015cb1 	.word	0x08015cb1
 8015ca4:	08015cb1 	.word	0x08015cb1
 8015ca8:	08015d25 	.word	0x08015d25
 8015cac:	08015d39 	.word	0x08015d39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015cb6:	f043 0301 	orr.w	r3, r3, #1
 8015cba:	b2da      	uxtb	r2, r3
 8015cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	699b      	ldr	r3, [r3, #24]
 8015cc8:	18d1      	adds	r1, r2, r3
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cd0:	f7ff ff5c 	bl	8015b8c <prvInsertTimerInActiveList>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d069      	beq.n	8015dae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	6a1b      	ldr	r3, [r3, #32]
 8015cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ce8:	f003 0304 	and.w	r3, r3, #4
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d05e      	beq.n	8015dae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015cf0:	68ba      	ldr	r2, [r7, #8]
 8015cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf4:	699b      	ldr	r3, [r3, #24]
 8015cf6:	441a      	add	r2, r3
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	2100      	movs	r1, #0
 8015d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d02:	f7ff fe05 	bl	8015910 <xTimerGenericCommand>
 8015d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015d08:	6a3b      	ldr	r3, [r7, #32]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d14f      	bne.n	8015dae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d12:	f383 8811 	msr	BASEPRI, r3
 8015d16:	f3bf 8f6f 	isb	sy
 8015d1a:	f3bf 8f4f 	dsb	sy
 8015d1e:	61bb      	str	r3, [r7, #24]
}
 8015d20:	bf00      	nop
 8015d22:	e7fe      	b.n	8015d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d2a:	f023 0301 	bic.w	r3, r3, #1
 8015d2e:	b2da      	uxtb	r2, r3
 8015d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015d36:	e03a      	b.n	8015dae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d3e:	f043 0301 	orr.w	r3, r3, #1
 8015d42:	b2da      	uxtb	r2, r3
 8015d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d52:	699b      	ldr	r3, [r3, #24]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d10a      	bne.n	8015d6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5c:	f383 8811 	msr	BASEPRI, r3
 8015d60:	f3bf 8f6f 	isb	sy
 8015d64:	f3bf 8f4f 	dsb	sy
 8015d68:	617b      	str	r3, [r7, #20]
}
 8015d6a:	bf00      	nop
 8015d6c:	e7fe      	b.n	8015d6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d70:	699a      	ldr	r2, [r3, #24]
 8015d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d74:	18d1      	adds	r1, r2, r3
 8015d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d7c:	f7ff ff06 	bl	8015b8c <prvInsertTimerInActiveList>
					break;
 8015d80:	e015      	b.n	8015dae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d88:	f003 0302 	and.w	r3, r3, #2
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d103      	bne.n	8015d98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d92:	f000 fbfd 	bl	8016590 <vPortFree>
 8015d96:	e00a      	b.n	8015dae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d9e:	f023 0301 	bic.w	r3, r3, #1
 8015da2:	b2da      	uxtb	r2, r3
 8015da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015daa:	e000      	b.n	8015dae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015dae:	4b08      	ldr	r3, [pc, #32]	; (8015dd0 <prvProcessReceivedCommands+0x1c0>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	1d39      	adds	r1, r7, #4
 8015db4:	2200      	movs	r2, #0
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7fe fa9c 	bl	80142f4 <xQueueReceive>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f47f af2a 	bne.w	8015c18 <prvProcessReceivedCommands+0x8>
	}
}
 8015dc4:	bf00      	nop
 8015dc6:	bf00      	nop
 8015dc8:	3730      	adds	r7, #48	; 0x30
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	240018dc 	.word	0x240018dc

08015dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b088      	sub	sp, #32
 8015dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015dda:	e048      	b.n	8015e6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015ddc:	4b2d      	ldr	r3, [pc, #180]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015de6:	4b2b      	ldr	r3, [pc, #172]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	3304      	adds	r3, #4
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fd ff7b 	bl	8013cf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	6a1b      	ldr	r3, [r3, #32]
 8015dfe:	68f8      	ldr	r0, [r7, #12]
 8015e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e08:	f003 0304 	and.w	r3, r3, #4
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d02e      	beq.n	8015e6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	699b      	ldr	r3, [r3, #24]
 8015e14:	693a      	ldr	r2, [r7, #16]
 8015e16:	4413      	add	r3, r2
 8015e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015e1a:	68ba      	ldr	r2, [r7, #8]
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d90e      	bls.n	8015e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	68ba      	ldr	r2, [r7, #8]
 8015e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	68fa      	ldr	r2, [r7, #12]
 8015e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e2e:	4b19      	ldr	r3, [pc, #100]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	3304      	adds	r3, #4
 8015e36:	4619      	mov	r1, r3
 8015e38:	4610      	mov	r0, r2
 8015e3a:	f7fd ff20 	bl	8013c7e <vListInsert>
 8015e3e:	e016      	b.n	8015e6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015e40:	2300      	movs	r3, #0
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	2300      	movs	r3, #0
 8015e46:	693a      	ldr	r2, [r7, #16]
 8015e48:	2100      	movs	r1, #0
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7ff fd60 	bl	8015910 <xTimerGenericCommand>
 8015e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d10a      	bne.n	8015e6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5c:	f383 8811 	msr	BASEPRI, r3
 8015e60:	f3bf 8f6f 	isb	sy
 8015e64:	f3bf 8f4f 	dsb	sy
 8015e68:	603b      	str	r3, [r7, #0]
}
 8015e6a:	bf00      	nop
 8015e6c:	e7fe      	b.n	8015e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015e6e:	4b09      	ldr	r3, [pc, #36]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d1b1      	bne.n	8015ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015e78:	4b06      	ldr	r3, [pc, #24]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015e7e:	4b06      	ldr	r3, [pc, #24]	; (8015e98 <prvSwitchTimerLists+0xc4>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	4a04      	ldr	r2, [pc, #16]	; (8015e94 <prvSwitchTimerLists+0xc0>)
 8015e84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015e86:	4a04      	ldr	r2, [pc, #16]	; (8015e98 <prvSwitchTimerLists+0xc4>)
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	6013      	str	r3, [r2, #0]
}
 8015e8c:	bf00      	nop
 8015e8e:	3718      	adds	r7, #24
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	240018d4 	.word	0x240018d4
 8015e98:	240018d8 	.word	0x240018d8

08015e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ea2:	f000 f987 	bl	80161b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015ea6:	4b15      	ldr	r3, [pc, #84]	; (8015efc <prvCheckForValidListAndQueue+0x60>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d120      	bne.n	8015ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015eae:	4814      	ldr	r0, [pc, #80]	; (8015f00 <prvCheckForValidListAndQueue+0x64>)
 8015eb0:	f7fd fe94 	bl	8013bdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015eb4:	4813      	ldr	r0, [pc, #76]	; (8015f04 <prvCheckForValidListAndQueue+0x68>)
 8015eb6:	f7fd fe91 	bl	8013bdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015eba:	4b13      	ldr	r3, [pc, #76]	; (8015f08 <prvCheckForValidListAndQueue+0x6c>)
 8015ebc:	4a10      	ldr	r2, [pc, #64]	; (8015f00 <prvCheckForValidListAndQueue+0x64>)
 8015ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015ec0:	4b12      	ldr	r3, [pc, #72]	; (8015f0c <prvCheckForValidListAndQueue+0x70>)
 8015ec2:	4a10      	ldr	r2, [pc, #64]	; (8015f04 <prvCheckForValidListAndQueue+0x68>)
 8015ec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	4b11      	ldr	r3, [pc, #68]	; (8015f10 <prvCheckForValidListAndQueue+0x74>)
 8015ecc:	4a11      	ldr	r2, [pc, #68]	; (8015f14 <prvCheckForValidListAndQueue+0x78>)
 8015ece:	2110      	movs	r1, #16
 8015ed0:	200a      	movs	r0, #10
 8015ed2:	f7fd ff9f 	bl	8013e14 <xQueueGenericCreateStatic>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	4a08      	ldr	r2, [pc, #32]	; (8015efc <prvCheckForValidListAndQueue+0x60>)
 8015eda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015edc:	4b07      	ldr	r3, [pc, #28]	; (8015efc <prvCheckForValidListAndQueue+0x60>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d005      	beq.n	8015ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015ee4:	4b05      	ldr	r3, [pc, #20]	; (8015efc <prvCheckForValidListAndQueue+0x60>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	490b      	ldr	r1, [pc, #44]	; (8015f18 <prvCheckForValidListAndQueue+0x7c>)
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7fe fcae 	bl	801484c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015ef0:	f000 f990 	bl	8016214 <vPortExitCritical>
}
 8015ef4:	bf00      	nop
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	240018dc 	.word	0x240018dc
 8015f00:	240018ac 	.word	0x240018ac
 8015f04:	240018c0 	.word	0x240018c0
 8015f08:	240018d4 	.word	0x240018d4
 8015f0c:	240018d8 	.word	0x240018d8
 8015f10:	24001988 	.word	0x24001988
 8015f14:	240018e8 	.word	0x240018e8
 8015f18:	080174f0 	.word	0x080174f0

08015f1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b08a      	sub	sp, #40	; 0x28
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	607a      	str	r2, [r7, #4]
 8015f28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015f2a:	f06f 0301 	mvn.w	r3, #1
 8015f2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015f3c:	4b06      	ldr	r3, [pc, #24]	; (8015f58 <xTimerPendFunctionCallFromISR+0x3c>)
 8015f3e:	6818      	ldr	r0, [r3, #0]
 8015f40:	f107 0114 	add.w	r1, r7, #20
 8015f44:	2300      	movs	r3, #0
 8015f46:	683a      	ldr	r2, [r7, #0]
 8015f48:	f7fe f938 	bl	80141bc <xQueueGenericSendFromISR>
 8015f4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3728      	adds	r7, #40	; 0x28
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	240018dc 	.word	0x240018dc

08015f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b085      	sub	sp, #20
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	3b04      	subs	r3, #4
 8015f6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	3b04      	subs	r3, #4
 8015f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	f023 0201 	bic.w	r2, r3, #1
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	3b04      	subs	r3, #4
 8015f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015f8c:	4a0c      	ldr	r2, [pc, #48]	; (8015fc0 <pxPortInitialiseStack+0x64>)
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	3b14      	subs	r3, #20
 8015f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	3b04      	subs	r3, #4
 8015fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	f06f 0202 	mvn.w	r2, #2
 8015faa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	3b20      	subs	r3, #32
 8015fb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3714      	adds	r7, #20
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr
 8015fc0:	08015fc5 	.word	0x08015fc5

08015fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b085      	sub	sp, #20
 8015fc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015fce:	4b12      	ldr	r3, [pc, #72]	; (8016018 <prvTaskExitError+0x54>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fd6:	d00a      	beq.n	8015fee <prvTaskExitError+0x2a>
	__asm volatile
 8015fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fdc:	f383 8811 	msr	BASEPRI, r3
 8015fe0:	f3bf 8f6f 	isb	sy
 8015fe4:	f3bf 8f4f 	dsb	sy
 8015fe8:	60fb      	str	r3, [r7, #12]
}
 8015fea:	bf00      	nop
 8015fec:	e7fe      	b.n	8015fec <prvTaskExitError+0x28>
	__asm volatile
 8015fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff2:	f383 8811 	msr	BASEPRI, r3
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	f3bf 8f4f 	dsb	sy
 8015ffe:	60bb      	str	r3, [r7, #8]
}
 8016000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016002:	bf00      	nop
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d0fc      	beq.n	8016004 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801600a:	bf00      	nop
 801600c:	bf00      	nop
 801600e:	3714      	adds	r7, #20
 8016010:	46bd      	mov	sp, r7
 8016012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016016:	4770      	bx	lr
 8016018:	2400009c 	.word	0x2400009c
 801601c:	00000000 	.word	0x00000000

08016020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016020:	4b07      	ldr	r3, [pc, #28]	; (8016040 <pxCurrentTCBConst2>)
 8016022:	6819      	ldr	r1, [r3, #0]
 8016024:	6808      	ldr	r0, [r1, #0]
 8016026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801602a:	f380 8809 	msr	PSP, r0
 801602e:	f3bf 8f6f 	isb	sy
 8016032:	f04f 0000 	mov.w	r0, #0
 8016036:	f380 8811 	msr	BASEPRI, r0
 801603a:	4770      	bx	lr
 801603c:	f3af 8000 	nop.w

08016040 <pxCurrentTCBConst2>:
 8016040:	240013ac 	.word	0x240013ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016044:	bf00      	nop
 8016046:	bf00      	nop

08016048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016048:	4808      	ldr	r0, [pc, #32]	; (801606c <prvPortStartFirstTask+0x24>)
 801604a:	6800      	ldr	r0, [r0, #0]
 801604c:	6800      	ldr	r0, [r0, #0]
 801604e:	f380 8808 	msr	MSP, r0
 8016052:	f04f 0000 	mov.w	r0, #0
 8016056:	f380 8814 	msr	CONTROL, r0
 801605a:	b662      	cpsie	i
 801605c:	b661      	cpsie	f
 801605e:	f3bf 8f4f 	dsb	sy
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	df00      	svc	0
 8016068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801606a:	bf00      	nop
 801606c:	e000ed08 	.word	0xe000ed08

08016070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b086      	sub	sp, #24
 8016074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016076:	4b46      	ldr	r3, [pc, #280]	; (8016190 <xPortStartScheduler+0x120>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	4a46      	ldr	r2, [pc, #280]	; (8016194 <xPortStartScheduler+0x124>)
 801607c:	4293      	cmp	r3, r2
 801607e:	d10a      	bne.n	8016096 <xPortStartScheduler+0x26>
	__asm volatile
 8016080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016084:	f383 8811 	msr	BASEPRI, r3
 8016088:	f3bf 8f6f 	isb	sy
 801608c:	f3bf 8f4f 	dsb	sy
 8016090:	613b      	str	r3, [r7, #16]
}
 8016092:	bf00      	nop
 8016094:	e7fe      	b.n	8016094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016096:	4b3e      	ldr	r3, [pc, #248]	; (8016190 <xPortStartScheduler+0x120>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	4a3f      	ldr	r2, [pc, #252]	; (8016198 <xPortStartScheduler+0x128>)
 801609c:	4293      	cmp	r3, r2
 801609e:	d10a      	bne.n	80160b6 <xPortStartScheduler+0x46>
	__asm volatile
 80160a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a4:	f383 8811 	msr	BASEPRI, r3
 80160a8:	f3bf 8f6f 	isb	sy
 80160ac:	f3bf 8f4f 	dsb	sy
 80160b0:	60fb      	str	r3, [r7, #12]
}
 80160b2:	bf00      	nop
 80160b4:	e7fe      	b.n	80160b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80160b6:	4b39      	ldr	r3, [pc, #228]	; (801619c <xPortStartScheduler+0x12c>)
 80160b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	b2db      	uxtb	r3, r3
 80160c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	22ff      	movs	r2, #255	; 0xff
 80160c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80160d0:	78fb      	ldrb	r3, [r7, #3]
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80160d8:	b2da      	uxtb	r2, r3
 80160da:	4b31      	ldr	r3, [pc, #196]	; (80161a0 <xPortStartScheduler+0x130>)
 80160dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80160de:	4b31      	ldr	r3, [pc, #196]	; (80161a4 <xPortStartScheduler+0x134>)
 80160e0:	2207      	movs	r2, #7
 80160e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80160e4:	e009      	b.n	80160fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80160e6:	4b2f      	ldr	r3, [pc, #188]	; (80161a4 <xPortStartScheduler+0x134>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	3b01      	subs	r3, #1
 80160ec:	4a2d      	ldr	r2, [pc, #180]	; (80161a4 <xPortStartScheduler+0x134>)
 80160ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80160f0:	78fb      	ldrb	r3, [r7, #3]
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	005b      	lsls	r3, r3, #1
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80160fa:	78fb      	ldrb	r3, [r7, #3]
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016102:	2b80      	cmp	r3, #128	; 0x80
 8016104:	d0ef      	beq.n	80160e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016106:	4b27      	ldr	r3, [pc, #156]	; (80161a4 <xPortStartScheduler+0x134>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	f1c3 0307 	rsb	r3, r3, #7
 801610e:	2b04      	cmp	r3, #4
 8016110:	d00a      	beq.n	8016128 <xPortStartScheduler+0xb8>
	__asm volatile
 8016112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016116:	f383 8811 	msr	BASEPRI, r3
 801611a:	f3bf 8f6f 	isb	sy
 801611e:	f3bf 8f4f 	dsb	sy
 8016122:	60bb      	str	r3, [r7, #8]
}
 8016124:	bf00      	nop
 8016126:	e7fe      	b.n	8016126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016128:	4b1e      	ldr	r3, [pc, #120]	; (80161a4 <xPortStartScheduler+0x134>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	021b      	lsls	r3, r3, #8
 801612e:	4a1d      	ldr	r2, [pc, #116]	; (80161a4 <xPortStartScheduler+0x134>)
 8016130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016132:	4b1c      	ldr	r3, [pc, #112]	; (80161a4 <xPortStartScheduler+0x134>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801613a:	4a1a      	ldr	r2, [pc, #104]	; (80161a4 <xPortStartScheduler+0x134>)
 801613c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	b2da      	uxtb	r2, r3
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016146:	4b18      	ldr	r3, [pc, #96]	; (80161a8 <xPortStartScheduler+0x138>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	4a17      	ldr	r2, [pc, #92]	; (80161a8 <xPortStartScheduler+0x138>)
 801614c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016152:	4b15      	ldr	r3, [pc, #84]	; (80161a8 <xPortStartScheduler+0x138>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	4a14      	ldr	r2, [pc, #80]	; (80161a8 <xPortStartScheduler+0x138>)
 8016158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801615c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801615e:	f000 f8dd 	bl	801631c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016162:	4b12      	ldr	r3, [pc, #72]	; (80161ac <xPortStartScheduler+0x13c>)
 8016164:	2200      	movs	r2, #0
 8016166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016168:	f000 f8fc 	bl	8016364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801616c:	4b10      	ldr	r3, [pc, #64]	; (80161b0 <xPortStartScheduler+0x140>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4a0f      	ldr	r2, [pc, #60]	; (80161b0 <xPortStartScheduler+0x140>)
 8016172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016178:	f7ff ff66 	bl	8016048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801617c:	f7fe ff7e 	bl	801507c <vTaskSwitchContext>
	prvTaskExitError();
 8016180:	f7ff ff20 	bl	8015fc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016184:	2300      	movs	r3, #0
}
 8016186:	4618      	mov	r0, r3
 8016188:	3718      	adds	r7, #24
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	e000ed00 	.word	0xe000ed00
 8016194:	410fc271 	.word	0x410fc271
 8016198:	410fc270 	.word	0x410fc270
 801619c:	e000e400 	.word	0xe000e400
 80161a0:	240019d8 	.word	0x240019d8
 80161a4:	240019dc 	.word	0x240019dc
 80161a8:	e000ed20 	.word	0xe000ed20
 80161ac:	2400009c 	.word	0x2400009c
 80161b0:	e000ef34 	.word	0xe000ef34

080161b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80161b4:	b480      	push	{r7}
 80161b6:	b083      	sub	sp, #12
 80161b8:	af00      	add	r7, sp, #0
	__asm volatile
 80161ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161be:	f383 8811 	msr	BASEPRI, r3
 80161c2:	f3bf 8f6f 	isb	sy
 80161c6:	f3bf 8f4f 	dsb	sy
 80161ca:	607b      	str	r3, [r7, #4]
}
 80161cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80161ce:	4b0f      	ldr	r3, [pc, #60]	; (801620c <vPortEnterCritical+0x58>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	3301      	adds	r3, #1
 80161d4:	4a0d      	ldr	r2, [pc, #52]	; (801620c <vPortEnterCritical+0x58>)
 80161d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80161d8:	4b0c      	ldr	r3, [pc, #48]	; (801620c <vPortEnterCritical+0x58>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d10f      	bne.n	8016200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80161e0:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <vPortEnterCritical+0x5c>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00a      	beq.n	8016200 <vPortEnterCritical+0x4c>
	__asm volatile
 80161ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ee:	f383 8811 	msr	BASEPRI, r3
 80161f2:	f3bf 8f6f 	isb	sy
 80161f6:	f3bf 8f4f 	dsb	sy
 80161fa:	603b      	str	r3, [r7, #0]
}
 80161fc:	bf00      	nop
 80161fe:	e7fe      	b.n	80161fe <vPortEnterCritical+0x4a>
	}
}
 8016200:	bf00      	nop
 8016202:	370c      	adds	r7, #12
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr
 801620c:	2400009c 	.word	0x2400009c
 8016210:	e000ed04 	.word	0xe000ed04

08016214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016214:	b480      	push	{r7}
 8016216:	b083      	sub	sp, #12
 8016218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801621a:	4b12      	ldr	r3, [pc, #72]	; (8016264 <vPortExitCritical+0x50>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10a      	bne.n	8016238 <vPortExitCritical+0x24>
	__asm volatile
 8016222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016226:	f383 8811 	msr	BASEPRI, r3
 801622a:	f3bf 8f6f 	isb	sy
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	607b      	str	r3, [r7, #4]
}
 8016234:	bf00      	nop
 8016236:	e7fe      	b.n	8016236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016238:	4b0a      	ldr	r3, [pc, #40]	; (8016264 <vPortExitCritical+0x50>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	3b01      	subs	r3, #1
 801623e:	4a09      	ldr	r2, [pc, #36]	; (8016264 <vPortExitCritical+0x50>)
 8016240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016242:	4b08      	ldr	r3, [pc, #32]	; (8016264 <vPortExitCritical+0x50>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d105      	bne.n	8016256 <vPortExitCritical+0x42>
 801624a:	2300      	movs	r3, #0
 801624c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	f383 8811 	msr	BASEPRI, r3
}
 8016254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016256:	bf00      	nop
 8016258:	370c      	adds	r7, #12
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr
 8016262:	bf00      	nop
 8016264:	2400009c 	.word	0x2400009c
	...

08016270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016270:	f3ef 8009 	mrs	r0, PSP
 8016274:	f3bf 8f6f 	isb	sy
 8016278:	4b15      	ldr	r3, [pc, #84]	; (80162d0 <pxCurrentTCBConst>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	f01e 0f10 	tst.w	lr, #16
 8016280:	bf08      	it	eq
 8016282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801628a:	6010      	str	r0, [r2, #0]
 801628c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016294:	f380 8811 	msr	BASEPRI, r0
 8016298:	f3bf 8f4f 	dsb	sy
 801629c:	f3bf 8f6f 	isb	sy
 80162a0:	f7fe feec 	bl	801507c <vTaskSwitchContext>
 80162a4:	f04f 0000 	mov.w	r0, #0
 80162a8:	f380 8811 	msr	BASEPRI, r0
 80162ac:	bc09      	pop	{r0, r3}
 80162ae:	6819      	ldr	r1, [r3, #0]
 80162b0:	6808      	ldr	r0, [r1, #0]
 80162b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b6:	f01e 0f10 	tst.w	lr, #16
 80162ba:	bf08      	it	eq
 80162bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80162c0:	f380 8809 	msr	PSP, r0
 80162c4:	f3bf 8f6f 	isb	sy
 80162c8:	4770      	bx	lr
 80162ca:	bf00      	nop
 80162cc:	f3af 8000 	nop.w

080162d0 <pxCurrentTCBConst>:
 80162d0:	240013ac 	.word	0x240013ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80162d4:	bf00      	nop
 80162d6:	bf00      	nop

080162d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
	__asm volatile
 80162de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e2:	f383 8811 	msr	BASEPRI, r3
 80162e6:	f3bf 8f6f 	isb	sy
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	607b      	str	r3, [r7, #4]
}
 80162f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80162f2:	f7fe fe01 	bl	8014ef8 <xTaskIncrementTick>
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d003      	beq.n	8016304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80162fc:	4b06      	ldr	r3, [pc, #24]	; (8016318 <xPortSysTickHandler+0x40>)
 80162fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016302:	601a      	str	r2, [r3, #0]
 8016304:	2300      	movs	r3, #0
 8016306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	f383 8811 	msr	BASEPRI, r3
}
 801630e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016310:	bf00      	nop
 8016312:	3708      	adds	r7, #8
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}
 8016318:	e000ed04 	.word	0xe000ed04

0801631c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801631c:	b480      	push	{r7}
 801631e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016320:	4b0b      	ldr	r3, [pc, #44]	; (8016350 <vPortSetupTimerInterrupt+0x34>)
 8016322:	2200      	movs	r2, #0
 8016324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016326:	4b0b      	ldr	r3, [pc, #44]	; (8016354 <vPortSetupTimerInterrupt+0x38>)
 8016328:	2200      	movs	r2, #0
 801632a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801632c:	4b0a      	ldr	r3, [pc, #40]	; (8016358 <vPortSetupTimerInterrupt+0x3c>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a0a      	ldr	r2, [pc, #40]	; (801635c <vPortSetupTimerInterrupt+0x40>)
 8016332:	fba2 2303 	umull	r2, r3, r2, r3
 8016336:	099b      	lsrs	r3, r3, #6
 8016338:	4a09      	ldr	r2, [pc, #36]	; (8016360 <vPortSetupTimerInterrupt+0x44>)
 801633a:	3b01      	subs	r3, #1
 801633c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801633e:	4b04      	ldr	r3, [pc, #16]	; (8016350 <vPortSetupTimerInterrupt+0x34>)
 8016340:	2207      	movs	r2, #7
 8016342:	601a      	str	r2, [r3, #0]
}
 8016344:	bf00      	nop
 8016346:	46bd      	mov	sp, r7
 8016348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634c:	4770      	bx	lr
 801634e:	bf00      	nop
 8016350:	e000e010 	.word	0xe000e010
 8016354:	e000e018 	.word	0xe000e018
 8016358:	2400008c 	.word	0x2400008c
 801635c:	10624dd3 	.word	0x10624dd3
 8016360:	e000e014 	.word	0xe000e014

08016364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016374 <vPortEnableVFP+0x10>
 8016368:	6801      	ldr	r1, [r0, #0]
 801636a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801636e:	6001      	str	r1, [r0, #0]
 8016370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016372:	bf00      	nop
 8016374:	e000ed88 	.word	0xe000ed88

08016378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801637e:	f3ef 8305 	mrs	r3, IPSR
 8016382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2b0f      	cmp	r3, #15
 8016388:	d914      	bls.n	80163b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801638a:	4a17      	ldr	r2, [pc, #92]	; (80163e8 <vPortValidateInterruptPriority+0x70>)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	4413      	add	r3, r2
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016394:	4b15      	ldr	r3, [pc, #84]	; (80163ec <vPortValidateInterruptPriority+0x74>)
 8016396:	781b      	ldrb	r3, [r3, #0]
 8016398:	7afa      	ldrb	r2, [r7, #11]
 801639a:	429a      	cmp	r2, r3
 801639c:	d20a      	bcs.n	80163b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a2:	f383 8811 	msr	BASEPRI, r3
 80163a6:	f3bf 8f6f 	isb	sy
 80163aa:	f3bf 8f4f 	dsb	sy
 80163ae:	607b      	str	r3, [r7, #4]
}
 80163b0:	bf00      	nop
 80163b2:	e7fe      	b.n	80163b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80163b4:	4b0e      	ldr	r3, [pc, #56]	; (80163f0 <vPortValidateInterruptPriority+0x78>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80163bc:	4b0d      	ldr	r3, [pc, #52]	; (80163f4 <vPortValidateInterruptPriority+0x7c>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d90a      	bls.n	80163da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80163c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c8:	f383 8811 	msr	BASEPRI, r3
 80163cc:	f3bf 8f6f 	isb	sy
 80163d0:	f3bf 8f4f 	dsb	sy
 80163d4:	603b      	str	r3, [r7, #0]
}
 80163d6:	bf00      	nop
 80163d8:	e7fe      	b.n	80163d8 <vPortValidateInterruptPriority+0x60>
	}
 80163da:	bf00      	nop
 80163dc:	3714      	adds	r7, #20
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop
 80163e8:	e000e3f0 	.word	0xe000e3f0
 80163ec:	240019d8 	.word	0x240019d8
 80163f0:	e000ed0c 	.word	0xe000ed0c
 80163f4:	240019dc 	.word	0x240019dc

080163f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b08a      	sub	sp, #40	; 0x28
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016400:	2300      	movs	r3, #0
 8016402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016404:	f7fe fcbc 	bl	8014d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016408:	4b5b      	ldr	r3, [pc, #364]	; (8016578 <pvPortMalloc+0x180>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d101      	bne.n	8016414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016410:	f000 f920 	bl	8016654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016414:	4b59      	ldr	r3, [pc, #356]	; (801657c <pvPortMalloc+0x184>)
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	4013      	ands	r3, r2
 801641c:	2b00      	cmp	r3, #0
 801641e:	f040 8093 	bne.w	8016548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d01d      	beq.n	8016464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016428:	2208      	movs	r2, #8
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4413      	add	r3, r2
 801642e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f003 0307 	and.w	r3, r3, #7
 8016436:	2b00      	cmp	r3, #0
 8016438:	d014      	beq.n	8016464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f023 0307 	bic.w	r3, r3, #7
 8016440:	3308      	adds	r3, #8
 8016442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f003 0307 	and.w	r3, r3, #7
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00a      	beq.n	8016464 <pvPortMalloc+0x6c>
	__asm volatile
 801644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016452:	f383 8811 	msr	BASEPRI, r3
 8016456:	f3bf 8f6f 	isb	sy
 801645a:	f3bf 8f4f 	dsb	sy
 801645e:	617b      	str	r3, [r7, #20]
}
 8016460:	bf00      	nop
 8016462:	e7fe      	b.n	8016462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d06e      	beq.n	8016548 <pvPortMalloc+0x150>
 801646a:	4b45      	ldr	r3, [pc, #276]	; (8016580 <pvPortMalloc+0x188>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	429a      	cmp	r2, r3
 8016472:	d869      	bhi.n	8016548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016474:	4b43      	ldr	r3, [pc, #268]	; (8016584 <pvPortMalloc+0x18c>)
 8016476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016478:	4b42      	ldr	r3, [pc, #264]	; (8016584 <pvPortMalloc+0x18c>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801647e:	e004      	b.n	801648a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	429a      	cmp	r2, r3
 8016492:	d903      	bls.n	801649c <pvPortMalloc+0xa4>
 8016494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d1f1      	bne.n	8016480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801649c:	4b36      	ldr	r3, [pc, #216]	; (8016578 <pvPortMalloc+0x180>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d050      	beq.n	8016548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80164a6:	6a3b      	ldr	r3, [r7, #32]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2208      	movs	r2, #8
 80164ac:	4413      	add	r3, r2
 80164ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80164b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	6a3b      	ldr	r3, [r7, #32]
 80164b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80164b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ba:	685a      	ldr	r2, [r3, #4]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	1ad2      	subs	r2, r2, r3
 80164c0:	2308      	movs	r3, #8
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d91f      	bls.n	8016508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80164c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	4413      	add	r3, r2
 80164ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80164d0:	69bb      	ldr	r3, [r7, #24]
 80164d2:	f003 0307 	and.w	r3, r3, #7
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00a      	beq.n	80164f0 <pvPortMalloc+0xf8>
	__asm volatile
 80164da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164de:	f383 8811 	msr	BASEPRI, r3
 80164e2:	f3bf 8f6f 	isb	sy
 80164e6:	f3bf 8f4f 	dsb	sy
 80164ea:	613b      	str	r3, [r7, #16]
}
 80164ec:	bf00      	nop
 80164ee:	e7fe      	b.n	80164ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80164f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f2:	685a      	ldr	r2, [r3, #4]
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	1ad2      	subs	r2, r2, r3
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016502:	69b8      	ldr	r0, [r7, #24]
 8016504:	f000 f908 	bl	8016718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016508:	4b1d      	ldr	r3, [pc, #116]	; (8016580 <pvPortMalloc+0x188>)
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	1ad3      	subs	r3, r2, r3
 8016512:	4a1b      	ldr	r2, [pc, #108]	; (8016580 <pvPortMalloc+0x188>)
 8016514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016516:	4b1a      	ldr	r3, [pc, #104]	; (8016580 <pvPortMalloc+0x188>)
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	4b1b      	ldr	r3, [pc, #108]	; (8016588 <pvPortMalloc+0x190>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	429a      	cmp	r2, r3
 8016520:	d203      	bcs.n	801652a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016522:	4b17      	ldr	r3, [pc, #92]	; (8016580 <pvPortMalloc+0x188>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	4a18      	ldr	r2, [pc, #96]	; (8016588 <pvPortMalloc+0x190>)
 8016528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652c:	685a      	ldr	r2, [r3, #4]
 801652e:	4b13      	ldr	r3, [pc, #76]	; (801657c <pvPortMalloc+0x184>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	431a      	orrs	r2, r3
 8016534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653a:	2200      	movs	r2, #0
 801653c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801653e:	4b13      	ldr	r3, [pc, #76]	; (801658c <pvPortMalloc+0x194>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	3301      	adds	r3, #1
 8016544:	4a11      	ldr	r2, [pc, #68]	; (801658c <pvPortMalloc+0x194>)
 8016546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016548:	f7fe fc28 	bl	8014d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801654c:	69fb      	ldr	r3, [r7, #28]
 801654e:	f003 0307 	and.w	r3, r3, #7
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00a      	beq.n	801656c <pvPortMalloc+0x174>
	__asm volatile
 8016556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655a:	f383 8811 	msr	BASEPRI, r3
 801655e:	f3bf 8f6f 	isb	sy
 8016562:	f3bf 8f4f 	dsb	sy
 8016566:	60fb      	str	r3, [r7, #12]
}
 8016568:	bf00      	nop
 801656a:	e7fe      	b.n	801656a <pvPortMalloc+0x172>
	return pvReturn;
 801656c:	69fb      	ldr	r3, [r7, #28]
}
 801656e:	4618      	mov	r0, r3
 8016570:	3728      	adds	r7, #40	; 0x28
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	240055e8 	.word	0x240055e8
 801657c:	240055fc 	.word	0x240055fc
 8016580:	240055ec 	.word	0x240055ec
 8016584:	240055e0 	.word	0x240055e0
 8016588:	240055f0 	.word	0x240055f0
 801658c:	240055f4 	.word	0x240055f4

08016590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b086      	sub	sp, #24
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d04d      	beq.n	801663e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80165a2:	2308      	movs	r3, #8
 80165a4:	425b      	negs	r3, r3
 80165a6:	697a      	ldr	r2, [r7, #20]
 80165a8:	4413      	add	r3, r2
 80165aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	685a      	ldr	r2, [r3, #4]
 80165b4:	4b24      	ldr	r3, [pc, #144]	; (8016648 <vPortFree+0xb8>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4013      	ands	r3, r2
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d10a      	bne.n	80165d4 <vPortFree+0x44>
	__asm volatile
 80165be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165c2:	f383 8811 	msr	BASEPRI, r3
 80165c6:	f3bf 8f6f 	isb	sy
 80165ca:	f3bf 8f4f 	dsb	sy
 80165ce:	60fb      	str	r3, [r7, #12]
}
 80165d0:	bf00      	nop
 80165d2:	e7fe      	b.n	80165d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00a      	beq.n	80165f2 <vPortFree+0x62>
	__asm volatile
 80165dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e0:	f383 8811 	msr	BASEPRI, r3
 80165e4:	f3bf 8f6f 	isb	sy
 80165e8:	f3bf 8f4f 	dsb	sy
 80165ec:	60bb      	str	r3, [r7, #8]
}
 80165ee:	bf00      	nop
 80165f0:	e7fe      	b.n	80165f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80165f2:	693b      	ldr	r3, [r7, #16]
 80165f4:	685a      	ldr	r2, [r3, #4]
 80165f6:	4b14      	ldr	r3, [pc, #80]	; (8016648 <vPortFree+0xb8>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	4013      	ands	r3, r2
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d01e      	beq.n	801663e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d11a      	bne.n	801663e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	685a      	ldr	r2, [r3, #4]
 801660c:	4b0e      	ldr	r3, [pc, #56]	; (8016648 <vPortFree+0xb8>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	43db      	mvns	r3, r3
 8016612:	401a      	ands	r2, r3
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016618:	f7fe fbb2 	bl	8014d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	685a      	ldr	r2, [r3, #4]
 8016620:	4b0a      	ldr	r3, [pc, #40]	; (801664c <vPortFree+0xbc>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4413      	add	r3, r2
 8016626:	4a09      	ldr	r2, [pc, #36]	; (801664c <vPortFree+0xbc>)
 8016628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801662a:	6938      	ldr	r0, [r7, #16]
 801662c:	f000 f874 	bl	8016718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016630:	4b07      	ldr	r3, [pc, #28]	; (8016650 <vPortFree+0xc0>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	3301      	adds	r3, #1
 8016636:	4a06      	ldr	r2, [pc, #24]	; (8016650 <vPortFree+0xc0>)
 8016638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801663a:	f7fe fbaf 	bl	8014d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801663e:	bf00      	nop
 8016640:	3718      	adds	r7, #24
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	240055fc 	.word	0x240055fc
 801664c:	240055ec 	.word	0x240055ec
 8016650:	240055f8 	.word	0x240055f8

08016654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801665a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801665e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016660:	4b27      	ldr	r3, [pc, #156]	; (8016700 <prvHeapInit+0xac>)
 8016662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f003 0307 	and.w	r3, r3, #7
 801666a:	2b00      	cmp	r3, #0
 801666c:	d00c      	beq.n	8016688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	3307      	adds	r3, #7
 8016672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	f023 0307 	bic.w	r3, r3, #7
 801667a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801667c:	68ba      	ldr	r2, [r7, #8]
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	4a1f      	ldr	r2, [pc, #124]	; (8016700 <prvHeapInit+0xac>)
 8016684:	4413      	add	r3, r2
 8016686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801668c:	4a1d      	ldr	r2, [pc, #116]	; (8016704 <prvHeapInit+0xb0>)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016692:	4b1c      	ldr	r3, [pc, #112]	; (8016704 <prvHeapInit+0xb0>)
 8016694:	2200      	movs	r2, #0
 8016696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	68ba      	ldr	r2, [r7, #8]
 801669c:	4413      	add	r3, r2
 801669e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80166a0:	2208      	movs	r2, #8
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	1a9b      	subs	r3, r3, r2
 80166a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	f023 0307 	bic.w	r3, r3, #7
 80166ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	4a15      	ldr	r2, [pc, #84]	; (8016708 <prvHeapInit+0xb4>)
 80166b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80166b6:	4b14      	ldr	r3, [pc, #80]	; (8016708 <prvHeapInit+0xb4>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2200      	movs	r2, #0
 80166bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80166be:	4b12      	ldr	r3, [pc, #72]	; (8016708 <prvHeapInit+0xb4>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2200      	movs	r2, #0
 80166c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	68fa      	ldr	r2, [r7, #12]
 80166ce:	1ad2      	subs	r2, r2, r3
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80166d4:	4b0c      	ldr	r3, [pc, #48]	; (8016708 <prvHeapInit+0xb4>)
 80166d6:	681a      	ldr	r2, [r3, #0]
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	4a0a      	ldr	r2, [pc, #40]	; (801670c <prvHeapInit+0xb8>)
 80166e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	685b      	ldr	r3, [r3, #4]
 80166e8:	4a09      	ldr	r2, [pc, #36]	; (8016710 <prvHeapInit+0xbc>)
 80166ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80166ec:	4b09      	ldr	r3, [pc, #36]	; (8016714 <prvHeapInit+0xc0>)
 80166ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80166f2:	601a      	str	r2, [r3, #0]
}
 80166f4:	bf00      	nop
 80166f6:	3714      	adds	r7, #20
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr
 8016700:	240019e0 	.word	0x240019e0
 8016704:	240055e0 	.word	0x240055e0
 8016708:	240055e8 	.word	0x240055e8
 801670c:	240055f0 	.word	0x240055f0
 8016710:	240055ec 	.word	0x240055ec
 8016714:	240055fc 	.word	0x240055fc

08016718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016718:	b480      	push	{r7}
 801671a:	b085      	sub	sp, #20
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016720:	4b28      	ldr	r3, [pc, #160]	; (80167c4 <prvInsertBlockIntoFreeList+0xac>)
 8016722:	60fb      	str	r3, [r7, #12]
 8016724:	e002      	b.n	801672c <prvInsertBlockIntoFreeList+0x14>
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	60fb      	str	r3, [r7, #12]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	687a      	ldr	r2, [r7, #4]
 8016732:	429a      	cmp	r2, r3
 8016734:	d8f7      	bhi.n	8016726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	68ba      	ldr	r2, [r7, #8]
 8016740:	4413      	add	r3, r2
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	429a      	cmp	r2, r3
 8016746:	d108      	bne.n	801675a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	685a      	ldr	r2, [r3, #4]
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	441a      	add	r2, r3
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	68ba      	ldr	r2, [r7, #8]
 8016764:	441a      	add	r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	429a      	cmp	r2, r3
 801676c:	d118      	bne.n	80167a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	4b15      	ldr	r3, [pc, #84]	; (80167c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	429a      	cmp	r2, r3
 8016778:	d00d      	beq.n	8016796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	685a      	ldr	r2, [r3, #4]
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	685b      	ldr	r3, [r3, #4]
 8016784:	441a      	add	r2, r3
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	601a      	str	r2, [r3, #0]
 8016794:	e008      	b.n	80167a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016796:	4b0c      	ldr	r3, [pc, #48]	; (80167c8 <prvInsertBlockIntoFreeList+0xb0>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	601a      	str	r2, [r3, #0]
 801679e:	e003      	b.n	80167a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	681a      	ldr	r2, [r3, #0]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80167a8:	68fa      	ldr	r2, [r7, #12]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d002      	beq.n	80167b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167b6:	bf00      	nop
 80167b8:	3714      	adds	r7, #20
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr
 80167c2:	bf00      	nop
 80167c4:	240055e0 	.word	0x240055e0
 80167c8:	240055e8 	.word	0x240055e8

080167cc <__errno>:
 80167cc:	4b01      	ldr	r3, [pc, #4]	; (80167d4 <__errno+0x8>)
 80167ce:	6818      	ldr	r0, [r3, #0]
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop
 80167d4:	240000a0 	.word	0x240000a0

080167d8 <__libc_init_array>:
 80167d8:	b570      	push	{r4, r5, r6, lr}
 80167da:	4d0d      	ldr	r5, [pc, #52]	; (8016810 <__libc_init_array+0x38>)
 80167dc:	4c0d      	ldr	r4, [pc, #52]	; (8016814 <__libc_init_array+0x3c>)
 80167de:	1b64      	subs	r4, r4, r5
 80167e0:	10a4      	asrs	r4, r4, #2
 80167e2:	2600      	movs	r6, #0
 80167e4:	42a6      	cmp	r6, r4
 80167e6:	d109      	bne.n	80167fc <__libc_init_array+0x24>
 80167e8:	4d0b      	ldr	r5, [pc, #44]	; (8016818 <__libc_init_array+0x40>)
 80167ea:	4c0c      	ldr	r4, [pc, #48]	; (801681c <__libc_init_array+0x44>)
 80167ec:	f000 fd3c 	bl	8017268 <_init>
 80167f0:	1b64      	subs	r4, r4, r5
 80167f2:	10a4      	asrs	r4, r4, #2
 80167f4:	2600      	movs	r6, #0
 80167f6:	42a6      	cmp	r6, r4
 80167f8:	d105      	bne.n	8016806 <__libc_init_array+0x2e>
 80167fa:	bd70      	pop	{r4, r5, r6, pc}
 80167fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016800:	4798      	blx	r3
 8016802:	3601      	adds	r6, #1
 8016804:	e7ee      	b.n	80167e4 <__libc_init_array+0xc>
 8016806:	f855 3b04 	ldr.w	r3, [r5], #4
 801680a:	4798      	blx	r3
 801680c:	3601      	adds	r6, #1
 801680e:	e7f2      	b.n	80167f6 <__libc_init_array+0x1e>
 8016810:	08017754 	.word	0x08017754
 8016814:	08017754 	.word	0x08017754
 8016818:	08017754 	.word	0x08017754
 801681c:	08017758 	.word	0x08017758

08016820 <malloc>:
 8016820:	4b02      	ldr	r3, [pc, #8]	; (801682c <malloc+0xc>)
 8016822:	4601      	mov	r1, r0
 8016824:	6818      	ldr	r0, [r3, #0]
 8016826:	f000 b88d 	b.w	8016944 <_malloc_r>
 801682a:	bf00      	nop
 801682c:	240000a0 	.word	0x240000a0

08016830 <free>:
 8016830:	4b02      	ldr	r3, [pc, #8]	; (801683c <free+0xc>)
 8016832:	4601      	mov	r1, r0
 8016834:	6818      	ldr	r0, [r3, #0]
 8016836:	f000 b819 	b.w	801686c <_free_r>
 801683a:	bf00      	nop
 801683c:	240000a0 	.word	0x240000a0

08016840 <memcpy>:
 8016840:	440a      	add	r2, r1
 8016842:	4291      	cmp	r1, r2
 8016844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016848:	d100      	bne.n	801684c <memcpy+0xc>
 801684a:	4770      	bx	lr
 801684c:	b510      	push	{r4, lr}
 801684e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016856:	4291      	cmp	r1, r2
 8016858:	d1f9      	bne.n	801684e <memcpy+0xe>
 801685a:	bd10      	pop	{r4, pc}

0801685c <memset>:
 801685c:	4402      	add	r2, r0
 801685e:	4603      	mov	r3, r0
 8016860:	4293      	cmp	r3, r2
 8016862:	d100      	bne.n	8016866 <memset+0xa>
 8016864:	4770      	bx	lr
 8016866:	f803 1b01 	strb.w	r1, [r3], #1
 801686a:	e7f9      	b.n	8016860 <memset+0x4>

0801686c <_free_r>:
 801686c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801686e:	2900      	cmp	r1, #0
 8016870:	d044      	beq.n	80168fc <_free_r+0x90>
 8016872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016876:	9001      	str	r0, [sp, #4]
 8016878:	2b00      	cmp	r3, #0
 801687a:	f1a1 0404 	sub.w	r4, r1, #4
 801687e:	bfb8      	it	lt
 8016880:	18e4      	addlt	r4, r4, r3
 8016882:	f000 fc39 	bl	80170f8 <__malloc_lock>
 8016886:	4a1e      	ldr	r2, [pc, #120]	; (8016900 <_free_r+0x94>)
 8016888:	9801      	ldr	r0, [sp, #4]
 801688a:	6813      	ldr	r3, [r2, #0]
 801688c:	b933      	cbnz	r3, 801689c <_free_r+0x30>
 801688e:	6063      	str	r3, [r4, #4]
 8016890:	6014      	str	r4, [r2, #0]
 8016892:	b003      	add	sp, #12
 8016894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016898:	f000 bc34 	b.w	8017104 <__malloc_unlock>
 801689c:	42a3      	cmp	r3, r4
 801689e:	d908      	bls.n	80168b2 <_free_r+0x46>
 80168a0:	6825      	ldr	r5, [r4, #0]
 80168a2:	1961      	adds	r1, r4, r5
 80168a4:	428b      	cmp	r3, r1
 80168a6:	bf01      	itttt	eq
 80168a8:	6819      	ldreq	r1, [r3, #0]
 80168aa:	685b      	ldreq	r3, [r3, #4]
 80168ac:	1949      	addeq	r1, r1, r5
 80168ae:	6021      	streq	r1, [r4, #0]
 80168b0:	e7ed      	b.n	801688e <_free_r+0x22>
 80168b2:	461a      	mov	r2, r3
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	b10b      	cbz	r3, 80168bc <_free_r+0x50>
 80168b8:	42a3      	cmp	r3, r4
 80168ba:	d9fa      	bls.n	80168b2 <_free_r+0x46>
 80168bc:	6811      	ldr	r1, [r2, #0]
 80168be:	1855      	adds	r5, r2, r1
 80168c0:	42a5      	cmp	r5, r4
 80168c2:	d10b      	bne.n	80168dc <_free_r+0x70>
 80168c4:	6824      	ldr	r4, [r4, #0]
 80168c6:	4421      	add	r1, r4
 80168c8:	1854      	adds	r4, r2, r1
 80168ca:	42a3      	cmp	r3, r4
 80168cc:	6011      	str	r1, [r2, #0]
 80168ce:	d1e0      	bne.n	8016892 <_free_r+0x26>
 80168d0:	681c      	ldr	r4, [r3, #0]
 80168d2:	685b      	ldr	r3, [r3, #4]
 80168d4:	6053      	str	r3, [r2, #4]
 80168d6:	4421      	add	r1, r4
 80168d8:	6011      	str	r1, [r2, #0]
 80168da:	e7da      	b.n	8016892 <_free_r+0x26>
 80168dc:	d902      	bls.n	80168e4 <_free_r+0x78>
 80168de:	230c      	movs	r3, #12
 80168e0:	6003      	str	r3, [r0, #0]
 80168e2:	e7d6      	b.n	8016892 <_free_r+0x26>
 80168e4:	6825      	ldr	r5, [r4, #0]
 80168e6:	1961      	adds	r1, r4, r5
 80168e8:	428b      	cmp	r3, r1
 80168ea:	bf04      	itt	eq
 80168ec:	6819      	ldreq	r1, [r3, #0]
 80168ee:	685b      	ldreq	r3, [r3, #4]
 80168f0:	6063      	str	r3, [r4, #4]
 80168f2:	bf04      	itt	eq
 80168f4:	1949      	addeq	r1, r1, r5
 80168f6:	6021      	streq	r1, [r4, #0]
 80168f8:	6054      	str	r4, [r2, #4]
 80168fa:	e7ca      	b.n	8016892 <_free_r+0x26>
 80168fc:	b003      	add	sp, #12
 80168fe:	bd30      	pop	{r4, r5, pc}
 8016900:	24005600 	.word	0x24005600

08016904 <sbrk_aligned>:
 8016904:	b570      	push	{r4, r5, r6, lr}
 8016906:	4e0e      	ldr	r6, [pc, #56]	; (8016940 <sbrk_aligned+0x3c>)
 8016908:	460c      	mov	r4, r1
 801690a:	6831      	ldr	r1, [r6, #0]
 801690c:	4605      	mov	r5, r0
 801690e:	b911      	cbnz	r1, 8016916 <sbrk_aligned+0x12>
 8016910:	f000 f902 	bl	8016b18 <_sbrk_r>
 8016914:	6030      	str	r0, [r6, #0]
 8016916:	4621      	mov	r1, r4
 8016918:	4628      	mov	r0, r5
 801691a:	f000 f8fd 	bl	8016b18 <_sbrk_r>
 801691e:	1c43      	adds	r3, r0, #1
 8016920:	d00a      	beq.n	8016938 <sbrk_aligned+0x34>
 8016922:	1cc4      	adds	r4, r0, #3
 8016924:	f024 0403 	bic.w	r4, r4, #3
 8016928:	42a0      	cmp	r0, r4
 801692a:	d007      	beq.n	801693c <sbrk_aligned+0x38>
 801692c:	1a21      	subs	r1, r4, r0
 801692e:	4628      	mov	r0, r5
 8016930:	f000 f8f2 	bl	8016b18 <_sbrk_r>
 8016934:	3001      	adds	r0, #1
 8016936:	d101      	bne.n	801693c <sbrk_aligned+0x38>
 8016938:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801693c:	4620      	mov	r0, r4
 801693e:	bd70      	pop	{r4, r5, r6, pc}
 8016940:	24005604 	.word	0x24005604

08016944 <_malloc_r>:
 8016944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016948:	1ccd      	adds	r5, r1, #3
 801694a:	f025 0503 	bic.w	r5, r5, #3
 801694e:	3508      	adds	r5, #8
 8016950:	2d0c      	cmp	r5, #12
 8016952:	bf38      	it	cc
 8016954:	250c      	movcc	r5, #12
 8016956:	2d00      	cmp	r5, #0
 8016958:	4607      	mov	r7, r0
 801695a:	db01      	blt.n	8016960 <_malloc_r+0x1c>
 801695c:	42a9      	cmp	r1, r5
 801695e:	d905      	bls.n	801696c <_malloc_r+0x28>
 8016960:	230c      	movs	r3, #12
 8016962:	603b      	str	r3, [r7, #0]
 8016964:	2600      	movs	r6, #0
 8016966:	4630      	mov	r0, r6
 8016968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801696c:	4e2e      	ldr	r6, [pc, #184]	; (8016a28 <_malloc_r+0xe4>)
 801696e:	f000 fbc3 	bl	80170f8 <__malloc_lock>
 8016972:	6833      	ldr	r3, [r6, #0]
 8016974:	461c      	mov	r4, r3
 8016976:	bb34      	cbnz	r4, 80169c6 <_malloc_r+0x82>
 8016978:	4629      	mov	r1, r5
 801697a:	4638      	mov	r0, r7
 801697c:	f7ff ffc2 	bl	8016904 <sbrk_aligned>
 8016980:	1c43      	adds	r3, r0, #1
 8016982:	4604      	mov	r4, r0
 8016984:	d14d      	bne.n	8016a22 <_malloc_r+0xde>
 8016986:	6834      	ldr	r4, [r6, #0]
 8016988:	4626      	mov	r6, r4
 801698a:	2e00      	cmp	r6, #0
 801698c:	d140      	bne.n	8016a10 <_malloc_r+0xcc>
 801698e:	6823      	ldr	r3, [r4, #0]
 8016990:	4631      	mov	r1, r6
 8016992:	4638      	mov	r0, r7
 8016994:	eb04 0803 	add.w	r8, r4, r3
 8016998:	f000 f8be 	bl	8016b18 <_sbrk_r>
 801699c:	4580      	cmp	r8, r0
 801699e:	d13a      	bne.n	8016a16 <_malloc_r+0xd2>
 80169a0:	6821      	ldr	r1, [r4, #0]
 80169a2:	3503      	adds	r5, #3
 80169a4:	1a6d      	subs	r5, r5, r1
 80169a6:	f025 0503 	bic.w	r5, r5, #3
 80169aa:	3508      	adds	r5, #8
 80169ac:	2d0c      	cmp	r5, #12
 80169ae:	bf38      	it	cc
 80169b0:	250c      	movcc	r5, #12
 80169b2:	4629      	mov	r1, r5
 80169b4:	4638      	mov	r0, r7
 80169b6:	f7ff ffa5 	bl	8016904 <sbrk_aligned>
 80169ba:	3001      	adds	r0, #1
 80169bc:	d02b      	beq.n	8016a16 <_malloc_r+0xd2>
 80169be:	6823      	ldr	r3, [r4, #0]
 80169c0:	442b      	add	r3, r5
 80169c2:	6023      	str	r3, [r4, #0]
 80169c4:	e00e      	b.n	80169e4 <_malloc_r+0xa0>
 80169c6:	6822      	ldr	r2, [r4, #0]
 80169c8:	1b52      	subs	r2, r2, r5
 80169ca:	d41e      	bmi.n	8016a0a <_malloc_r+0xc6>
 80169cc:	2a0b      	cmp	r2, #11
 80169ce:	d916      	bls.n	80169fe <_malloc_r+0xba>
 80169d0:	1961      	adds	r1, r4, r5
 80169d2:	42a3      	cmp	r3, r4
 80169d4:	6025      	str	r5, [r4, #0]
 80169d6:	bf18      	it	ne
 80169d8:	6059      	strne	r1, [r3, #4]
 80169da:	6863      	ldr	r3, [r4, #4]
 80169dc:	bf08      	it	eq
 80169de:	6031      	streq	r1, [r6, #0]
 80169e0:	5162      	str	r2, [r4, r5]
 80169e2:	604b      	str	r3, [r1, #4]
 80169e4:	4638      	mov	r0, r7
 80169e6:	f104 060b 	add.w	r6, r4, #11
 80169ea:	f000 fb8b 	bl	8017104 <__malloc_unlock>
 80169ee:	f026 0607 	bic.w	r6, r6, #7
 80169f2:	1d23      	adds	r3, r4, #4
 80169f4:	1af2      	subs	r2, r6, r3
 80169f6:	d0b6      	beq.n	8016966 <_malloc_r+0x22>
 80169f8:	1b9b      	subs	r3, r3, r6
 80169fa:	50a3      	str	r3, [r4, r2]
 80169fc:	e7b3      	b.n	8016966 <_malloc_r+0x22>
 80169fe:	6862      	ldr	r2, [r4, #4]
 8016a00:	42a3      	cmp	r3, r4
 8016a02:	bf0c      	ite	eq
 8016a04:	6032      	streq	r2, [r6, #0]
 8016a06:	605a      	strne	r2, [r3, #4]
 8016a08:	e7ec      	b.n	80169e4 <_malloc_r+0xa0>
 8016a0a:	4623      	mov	r3, r4
 8016a0c:	6864      	ldr	r4, [r4, #4]
 8016a0e:	e7b2      	b.n	8016976 <_malloc_r+0x32>
 8016a10:	4634      	mov	r4, r6
 8016a12:	6876      	ldr	r6, [r6, #4]
 8016a14:	e7b9      	b.n	801698a <_malloc_r+0x46>
 8016a16:	230c      	movs	r3, #12
 8016a18:	603b      	str	r3, [r7, #0]
 8016a1a:	4638      	mov	r0, r7
 8016a1c:	f000 fb72 	bl	8017104 <__malloc_unlock>
 8016a20:	e7a1      	b.n	8016966 <_malloc_r+0x22>
 8016a22:	6025      	str	r5, [r4, #0]
 8016a24:	e7de      	b.n	80169e4 <_malloc_r+0xa0>
 8016a26:	bf00      	nop
 8016a28:	24005600 	.word	0x24005600

08016a2c <_puts_r>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	460e      	mov	r6, r1
 8016a30:	4605      	mov	r5, r0
 8016a32:	b118      	cbz	r0, 8016a3c <_puts_r+0x10>
 8016a34:	6983      	ldr	r3, [r0, #24]
 8016a36:	b90b      	cbnz	r3, 8016a3c <_puts_r+0x10>
 8016a38:	f000 fa58 	bl	8016eec <__sinit>
 8016a3c:	69ab      	ldr	r3, [r5, #24]
 8016a3e:	68ac      	ldr	r4, [r5, #8]
 8016a40:	b913      	cbnz	r3, 8016a48 <_puts_r+0x1c>
 8016a42:	4628      	mov	r0, r5
 8016a44:	f000 fa52 	bl	8016eec <__sinit>
 8016a48:	4b2c      	ldr	r3, [pc, #176]	; (8016afc <_puts_r+0xd0>)
 8016a4a:	429c      	cmp	r4, r3
 8016a4c:	d120      	bne.n	8016a90 <_puts_r+0x64>
 8016a4e:	686c      	ldr	r4, [r5, #4]
 8016a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a52:	07db      	lsls	r3, r3, #31
 8016a54:	d405      	bmi.n	8016a62 <_puts_r+0x36>
 8016a56:	89a3      	ldrh	r3, [r4, #12]
 8016a58:	0598      	lsls	r0, r3, #22
 8016a5a:	d402      	bmi.n	8016a62 <_puts_r+0x36>
 8016a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a5e:	f000 fae3 	bl	8017028 <__retarget_lock_acquire_recursive>
 8016a62:	89a3      	ldrh	r3, [r4, #12]
 8016a64:	0719      	lsls	r1, r3, #28
 8016a66:	d51d      	bpl.n	8016aa4 <_puts_r+0x78>
 8016a68:	6923      	ldr	r3, [r4, #16]
 8016a6a:	b1db      	cbz	r3, 8016aa4 <_puts_r+0x78>
 8016a6c:	3e01      	subs	r6, #1
 8016a6e:	68a3      	ldr	r3, [r4, #8]
 8016a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a74:	3b01      	subs	r3, #1
 8016a76:	60a3      	str	r3, [r4, #8]
 8016a78:	bb39      	cbnz	r1, 8016aca <_puts_r+0x9e>
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	da38      	bge.n	8016af0 <_puts_r+0xc4>
 8016a7e:	4622      	mov	r2, r4
 8016a80:	210a      	movs	r1, #10
 8016a82:	4628      	mov	r0, r5
 8016a84:	f000 f858 	bl	8016b38 <__swbuf_r>
 8016a88:	3001      	adds	r0, #1
 8016a8a:	d011      	beq.n	8016ab0 <_puts_r+0x84>
 8016a8c:	250a      	movs	r5, #10
 8016a8e:	e011      	b.n	8016ab4 <_puts_r+0x88>
 8016a90:	4b1b      	ldr	r3, [pc, #108]	; (8016b00 <_puts_r+0xd4>)
 8016a92:	429c      	cmp	r4, r3
 8016a94:	d101      	bne.n	8016a9a <_puts_r+0x6e>
 8016a96:	68ac      	ldr	r4, [r5, #8]
 8016a98:	e7da      	b.n	8016a50 <_puts_r+0x24>
 8016a9a:	4b1a      	ldr	r3, [pc, #104]	; (8016b04 <_puts_r+0xd8>)
 8016a9c:	429c      	cmp	r4, r3
 8016a9e:	bf08      	it	eq
 8016aa0:	68ec      	ldreq	r4, [r5, #12]
 8016aa2:	e7d5      	b.n	8016a50 <_puts_r+0x24>
 8016aa4:	4621      	mov	r1, r4
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	f000 f898 	bl	8016bdc <__swsetup_r>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d0dd      	beq.n	8016a6c <_puts_r+0x40>
 8016ab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ab6:	07da      	lsls	r2, r3, #31
 8016ab8:	d405      	bmi.n	8016ac6 <_puts_r+0x9a>
 8016aba:	89a3      	ldrh	r3, [r4, #12]
 8016abc:	059b      	lsls	r3, r3, #22
 8016abe:	d402      	bmi.n	8016ac6 <_puts_r+0x9a>
 8016ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ac2:	f000 fab2 	bl	801702a <__retarget_lock_release_recursive>
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	bd70      	pop	{r4, r5, r6, pc}
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	da04      	bge.n	8016ad8 <_puts_r+0xac>
 8016ace:	69a2      	ldr	r2, [r4, #24]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	dc06      	bgt.n	8016ae2 <_puts_r+0xb6>
 8016ad4:	290a      	cmp	r1, #10
 8016ad6:	d004      	beq.n	8016ae2 <_puts_r+0xb6>
 8016ad8:	6823      	ldr	r3, [r4, #0]
 8016ada:	1c5a      	adds	r2, r3, #1
 8016adc:	6022      	str	r2, [r4, #0]
 8016ade:	7019      	strb	r1, [r3, #0]
 8016ae0:	e7c5      	b.n	8016a6e <_puts_r+0x42>
 8016ae2:	4622      	mov	r2, r4
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	f000 f827 	bl	8016b38 <__swbuf_r>
 8016aea:	3001      	adds	r0, #1
 8016aec:	d1bf      	bne.n	8016a6e <_puts_r+0x42>
 8016aee:	e7df      	b.n	8016ab0 <_puts_r+0x84>
 8016af0:	6823      	ldr	r3, [r4, #0]
 8016af2:	250a      	movs	r5, #10
 8016af4:	1c5a      	adds	r2, r3, #1
 8016af6:	6022      	str	r2, [r4, #0]
 8016af8:	701d      	strb	r5, [r3, #0]
 8016afa:	e7db      	b.n	8016ab4 <_puts_r+0x88>
 8016afc:	0801770c 	.word	0x0801770c
 8016b00:	0801772c 	.word	0x0801772c
 8016b04:	080176ec 	.word	0x080176ec

08016b08 <puts>:
 8016b08:	4b02      	ldr	r3, [pc, #8]	; (8016b14 <puts+0xc>)
 8016b0a:	4601      	mov	r1, r0
 8016b0c:	6818      	ldr	r0, [r3, #0]
 8016b0e:	f7ff bf8d 	b.w	8016a2c <_puts_r>
 8016b12:	bf00      	nop
 8016b14:	240000a0 	.word	0x240000a0

08016b18 <_sbrk_r>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4d06      	ldr	r5, [pc, #24]	; (8016b34 <_sbrk_r+0x1c>)
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	4604      	mov	r4, r0
 8016b20:	4608      	mov	r0, r1
 8016b22:	602b      	str	r3, [r5, #0]
 8016b24:	f7ec fb00 	bl	8003128 <_sbrk>
 8016b28:	1c43      	adds	r3, r0, #1
 8016b2a:	d102      	bne.n	8016b32 <_sbrk_r+0x1a>
 8016b2c:	682b      	ldr	r3, [r5, #0]
 8016b2e:	b103      	cbz	r3, 8016b32 <_sbrk_r+0x1a>
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	bd38      	pop	{r3, r4, r5, pc}
 8016b34:	2400560c 	.word	0x2400560c

08016b38 <__swbuf_r>:
 8016b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b3a:	460e      	mov	r6, r1
 8016b3c:	4614      	mov	r4, r2
 8016b3e:	4605      	mov	r5, r0
 8016b40:	b118      	cbz	r0, 8016b4a <__swbuf_r+0x12>
 8016b42:	6983      	ldr	r3, [r0, #24]
 8016b44:	b90b      	cbnz	r3, 8016b4a <__swbuf_r+0x12>
 8016b46:	f000 f9d1 	bl	8016eec <__sinit>
 8016b4a:	4b21      	ldr	r3, [pc, #132]	; (8016bd0 <__swbuf_r+0x98>)
 8016b4c:	429c      	cmp	r4, r3
 8016b4e:	d12b      	bne.n	8016ba8 <__swbuf_r+0x70>
 8016b50:	686c      	ldr	r4, [r5, #4]
 8016b52:	69a3      	ldr	r3, [r4, #24]
 8016b54:	60a3      	str	r3, [r4, #8]
 8016b56:	89a3      	ldrh	r3, [r4, #12]
 8016b58:	071a      	lsls	r2, r3, #28
 8016b5a:	d52f      	bpl.n	8016bbc <__swbuf_r+0x84>
 8016b5c:	6923      	ldr	r3, [r4, #16]
 8016b5e:	b36b      	cbz	r3, 8016bbc <__swbuf_r+0x84>
 8016b60:	6923      	ldr	r3, [r4, #16]
 8016b62:	6820      	ldr	r0, [r4, #0]
 8016b64:	1ac0      	subs	r0, r0, r3
 8016b66:	6963      	ldr	r3, [r4, #20]
 8016b68:	b2f6      	uxtb	r6, r6
 8016b6a:	4283      	cmp	r3, r0
 8016b6c:	4637      	mov	r7, r6
 8016b6e:	dc04      	bgt.n	8016b7a <__swbuf_r+0x42>
 8016b70:	4621      	mov	r1, r4
 8016b72:	4628      	mov	r0, r5
 8016b74:	f000 f926 	bl	8016dc4 <_fflush_r>
 8016b78:	bb30      	cbnz	r0, 8016bc8 <__swbuf_r+0x90>
 8016b7a:	68a3      	ldr	r3, [r4, #8]
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	60a3      	str	r3, [r4, #8]
 8016b80:	6823      	ldr	r3, [r4, #0]
 8016b82:	1c5a      	adds	r2, r3, #1
 8016b84:	6022      	str	r2, [r4, #0]
 8016b86:	701e      	strb	r6, [r3, #0]
 8016b88:	6963      	ldr	r3, [r4, #20]
 8016b8a:	3001      	adds	r0, #1
 8016b8c:	4283      	cmp	r3, r0
 8016b8e:	d004      	beq.n	8016b9a <__swbuf_r+0x62>
 8016b90:	89a3      	ldrh	r3, [r4, #12]
 8016b92:	07db      	lsls	r3, r3, #31
 8016b94:	d506      	bpl.n	8016ba4 <__swbuf_r+0x6c>
 8016b96:	2e0a      	cmp	r6, #10
 8016b98:	d104      	bne.n	8016ba4 <__swbuf_r+0x6c>
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	f000 f911 	bl	8016dc4 <_fflush_r>
 8016ba2:	b988      	cbnz	r0, 8016bc8 <__swbuf_r+0x90>
 8016ba4:	4638      	mov	r0, r7
 8016ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba8:	4b0a      	ldr	r3, [pc, #40]	; (8016bd4 <__swbuf_r+0x9c>)
 8016baa:	429c      	cmp	r4, r3
 8016bac:	d101      	bne.n	8016bb2 <__swbuf_r+0x7a>
 8016bae:	68ac      	ldr	r4, [r5, #8]
 8016bb0:	e7cf      	b.n	8016b52 <__swbuf_r+0x1a>
 8016bb2:	4b09      	ldr	r3, [pc, #36]	; (8016bd8 <__swbuf_r+0xa0>)
 8016bb4:	429c      	cmp	r4, r3
 8016bb6:	bf08      	it	eq
 8016bb8:	68ec      	ldreq	r4, [r5, #12]
 8016bba:	e7ca      	b.n	8016b52 <__swbuf_r+0x1a>
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	f000 f80c 	bl	8016bdc <__swsetup_r>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	d0cb      	beq.n	8016b60 <__swbuf_r+0x28>
 8016bc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016bcc:	e7ea      	b.n	8016ba4 <__swbuf_r+0x6c>
 8016bce:	bf00      	nop
 8016bd0:	0801770c 	.word	0x0801770c
 8016bd4:	0801772c 	.word	0x0801772c
 8016bd8:	080176ec 	.word	0x080176ec

08016bdc <__swsetup_r>:
 8016bdc:	4b32      	ldr	r3, [pc, #200]	; (8016ca8 <__swsetup_r+0xcc>)
 8016bde:	b570      	push	{r4, r5, r6, lr}
 8016be0:	681d      	ldr	r5, [r3, #0]
 8016be2:	4606      	mov	r6, r0
 8016be4:	460c      	mov	r4, r1
 8016be6:	b125      	cbz	r5, 8016bf2 <__swsetup_r+0x16>
 8016be8:	69ab      	ldr	r3, [r5, #24]
 8016bea:	b913      	cbnz	r3, 8016bf2 <__swsetup_r+0x16>
 8016bec:	4628      	mov	r0, r5
 8016bee:	f000 f97d 	bl	8016eec <__sinit>
 8016bf2:	4b2e      	ldr	r3, [pc, #184]	; (8016cac <__swsetup_r+0xd0>)
 8016bf4:	429c      	cmp	r4, r3
 8016bf6:	d10f      	bne.n	8016c18 <__swsetup_r+0x3c>
 8016bf8:	686c      	ldr	r4, [r5, #4]
 8016bfa:	89a3      	ldrh	r3, [r4, #12]
 8016bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c00:	0719      	lsls	r1, r3, #28
 8016c02:	d42c      	bmi.n	8016c5e <__swsetup_r+0x82>
 8016c04:	06dd      	lsls	r5, r3, #27
 8016c06:	d411      	bmi.n	8016c2c <__swsetup_r+0x50>
 8016c08:	2309      	movs	r3, #9
 8016c0a:	6033      	str	r3, [r6, #0]
 8016c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c10:	81a3      	strh	r3, [r4, #12]
 8016c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c16:	e03e      	b.n	8016c96 <__swsetup_r+0xba>
 8016c18:	4b25      	ldr	r3, [pc, #148]	; (8016cb0 <__swsetup_r+0xd4>)
 8016c1a:	429c      	cmp	r4, r3
 8016c1c:	d101      	bne.n	8016c22 <__swsetup_r+0x46>
 8016c1e:	68ac      	ldr	r4, [r5, #8]
 8016c20:	e7eb      	b.n	8016bfa <__swsetup_r+0x1e>
 8016c22:	4b24      	ldr	r3, [pc, #144]	; (8016cb4 <__swsetup_r+0xd8>)
 8016c24:	429c      	cmp	r4, r3
 8016c26:	bf08      	it	eq
 8016c28:	68ec      	ldreq	r4, [r5, #12]
 8016c2a:	e7e6      	b.n	8016bfa <__swsetup_r+0x1e>
 8016c2c:	0758      	lsls	r0, r3, #29
 8016c2e:	d512      	bpl.n	8016c56 <__swsetup_r+0x7a>
 8016c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c32:	b141      	cbz	r1, 8016c46 <__swsetup_r+0x6a>
 8016c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c38:	4299      	cmp	r1, r3
 8016c3a:	d002      	beq.n	8016c42 <__swsetup_r+0x66>
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	f7ff fe15 	bl	801686c <_free_r>
 8016c42:	2300      	movs	r3, #0
 8016c44:	6363      	str	r3, [r4, #52]	; 0x34
 8016c46:	89a3      	ldrh	r3, [r4, #12]
 8016c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c4c:	81a3      	strh	r3, [r4, #12]
 8016c4e:	2300      	movs	r3, #0
 8016c50:	6063      	str	r3, [r4, #4]
 8016c52:	6923      	ldr	r3, [r4, #16]
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	89a3      	ldrh	r3, [r4, #12]
 8016c58:	f043 0308 	orr.w	r3, r3, #8
 8016c5c:	81a3      	strh	r3, [r4, #12]
 8016c5e:	6923      	ldr	r3, [r4, #16]
 8016c60:	b94b      	cbnz	r3, 8016c76 <__swsetup_r+0x9a>
 8016c62:	89a3      	ldrh	r3, [r4, #12]
 8016c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c6c:	d003      	beq.n	8016c76 <__swsetup_r+0x9a>
 8016c6e:	4621      	mov	r1, r4
 8016c70:	4630      	mov	r0, r6
 8016c72:	f000 fa01 	bl	8017078 <__smakebuf_r>
 8016c76:	89a0      	ldrh	r0, [r4, #12]
 8016c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c7c:	f010 0301 	ands.w	r3, r0, #1
 8016c80:	d00a      	beq.n	8016c98 <__swsetup_r+0xbc>
 8016c82:	2300      	movs	r3, #0
 8016c84:	60a3      	str	r3, [r4, #8]
 8016c86:	6963      	ldr	r3, [r4, #20]
 8016c88:	425b      	negs	r3, r3
 8016c8a:	61a3      	str	r3, [r4, #24]
 8016c8c:	6923      	ldr	r3, [r4, #16]
 8016c8e:	b943      	cbnz	r3, 8016ca2 <__swsetup_r+0xc6>
 8016c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c94:	d1ba      	bne.n	8016c0c <__swsetup_r+0x30>
 8016c96:	bd70      	pop	{r4, r5, r6, pc}
 8016c98:	0781      	lsls	r1, r0, #30
 8016c9a:	bf58      	it	pl
 8016c9c:	6963      	ldrpl	r3, [r4, #20]
 8016c9e:	60a3      	str	r3, [r4, #8]
 8016ca0:	e7f4      	b.n	8016c8c <__swsetup_r+0xb0>
 8016ca2:	2000      	movs	r0, #0
 8016ca4:	e7f7      	b.n	8016c96 <__swsetup_r+0xba>
 8016ca6:	bf00      	nop
 8016ca8:	240000a0 	.word	0x240000a0
 8016cac:	0801770c 	.word	0x0801770c
 8016cb0:	0801772c 	.word	0x0801772c
 8016cb4:	080176ec 	.word	0x080176ec

08016cb8 <__sflush_r>:
 8016cb8:	898a      	ldrh	r2, [r1, #12]
 8016cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cbe:	4605      	mov	r5, r0
 8016cc0:	0710      	lsls	r0, r2, #28
 8016cc2:	460c      	mov	r4, r1
 8016cc4:	d458      	bmi.n	8016d78 <__sflush_r+0xc0>
 8016cc6:	684b      	ldr	r3, [r1, #4]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	dc05      	bgt.n	8016cd8 <__sflush_r+0x20>
 8016ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	dc02      	bgt.n	8016cd8 <__sflush_r+0x20>
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cda:	2e00      	cmp	r6, #0
 8016cdc:	d0f9      	beq.n	8016cd2 <__sflush_r+0x1a>
 8016cde:	2300      	movs	r3, #0
 8016ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ce4:	682f      	ldr	r7, [r5, #0]
 8016ce6:	602b      	str	r3, [r5, #0]
 8016ce8:	d032      	beq.n	8016d50 <__sflush_r+0x98>
 8016cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016cec:	89a3      	ldrh	r3, [r4, #12]
 8016cee:	075a      	lsls	r2, r3, #29
 8016cf0:	d505      	bpl.n	8016cfe <__sflush_r+0x46>
 8016cf2:	6863      	ldr	r3, [r4, #4]
 8016cf4:	1ac0      	subs	r0, r0, r3
 8016cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016cf8:	b10b      	cbz	r3, 8016cfe <__sflush_r+0x46>
 8016cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016cfc:	1ac0      	subs	r0, r0, r3
 8016cfe:	2300      	movs	r3, #0
 8016d00:	4602      	mov	r2, r0
 8016d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d04:	6a21      	ldr	r1, [r4, #32]
 8016d06:	4628      	mov	r0, r5
 8016d08:	47b0      	blx	r6
 8016d0a:	1c43      	adds	r3, r0, #1
 8016d0c:	89a3      	ldrh	r3, [r4, #12]
 8016d0e:	d106      	bne.n	8016d1e <__sflush_r+0x66>
 8016d10:	6829      	ldr	r1, [r5, #0]
 8016d12:	291d      	cmp	r1, #29
 8016d14:	d82c      	bhi.n	8016d70 <__sflush_r+0xb8>
 8016d16:	4a2a      	ldr	r2, [pc, #168]	; (8016dc0 <__sflush_r+0x108>)
 8016d18:	40ca      	lsrs	r2, r1
 8016d1a:	07d6      	lsls	r6, r2, #31
 8016d1c:	d528      	bpl.n	8016d70 <__sflush_r+0xb8>
 8016d1e:	2200      	movs	r2, #0
 8016d20:	6062      	str	r2, [r4, #4]
 8016d22:	04d9      	lsls	r1, r3, #19
 8016d24:	6922      	ldr	r2, [r4, #16]
 8016d26:	6022      	str	r2, [r4, #0]
 8016d28:	d504      	bpl.n	8016d34 <__sflush_r+0x7c>
 8016d2a:	1c42      	adds	r2, r0, #1
 8016d2c:	d101      	bne.n	8016d32 <__sflush_r+0x7a>
 8016d2e:	682b      	ldr	r3, [r5, #0]
 8016d30:	b903      	cbnz	r3, 8016d34 <__sflush_r+0x7c>
 8016d32:	6560      	str	r0, [r4, #84]	; 0x54
 8016d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d36:	602f      	str	r7, [r5, #0]
 8016d38:	2900      	cmp	r1, #0
 8016d3a:	d0ca      	beq.n	8016cd2 <__sflush_r+0x1a>
 8016d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d40:	4299      	cmp	r1, r3
 8016d42:	d002      	beq.n	8016d4a <__sflush_r+0x92>
 8016d44:	4628      	mov	r0, r5
 8016d46:	f7ff fd91 	bl	801686c <_free_r>
 8016d4a:	2000      	movs	r0, #0
 8016d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8016d4e:	e7c1      	b.n	8016cd4 <__sflush_r+0x1c>
 8016d50:	6a21      	ldr	r1, [r4, #32]
 8016d52:	2301      	movs	r3, #1
 8016d54:	4628      	mov	r0, r5
 8016d56:	47b0      	blx	r6
 8016d58:	1c41      	adds	r1, r0, #1
 8016d5a:	d1c7      	bne.n	8016cec <__sflush_r+0x34>
 8016d5c:	682b      	ldr	r3, [r5, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d0c4      	beq.n	8016cec <__sflush_r+0x34>
 8016d62:	2b1d      	cmp	r3, #29
 8016d64:	d001      	beq.n	8016d6a <__sflush_r+0xb2>
 8016d66:	2b16      	cmp	r3, #22
 8016d68:	d101      	bne.n	8016d6e <__sflush_r+0xb6>
 8016d6a:	602f      	str	r7, [r5, #0]
 8016d6c:	e7b1      	b.n	8016cd2 <__sflush_r+0x1a>
 8016d6e:	89a3      	ldrh	r3, [r4, #12]
 8016d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d74:	81a3      	strh	r3, [r4, #12]
 8016d76:	e7ad      	b.n	8016cd4 <__sflush_r+0x1c>
 8016d78:	690f      	ldr	r7, [r1, #16]
 8016d7a:	2f00      	cmp	r7, #0
 8016d7c:	d0a9      	beq.n	8016cd2 <__sflush_r+0x1a>
 8016d7e:	0793      	lsls	r3, r2, #30
 8016d80:	680e      	ldr	r6, [r1, #0]
 8016d82:	bf08      	it	eq
 8016d84:	694b      	ldreq	r3, [r1, #20]
 8016d86:	600f      	str	r7, [r1, #0]
 8016d88:	bf18      	it	ne
 8016d8a:	2300      	movne	r3, #0
 8016d8c:	eba6 0807 	sub.w	r8, r6, r7
 8016d90:	608b      	str	r3, [r1, #8]
 8016d92:	f1b8 0f00 	cmp.w	r8, #0
 8016d96:	dd9c      	ble.n	8016cd2 <__sflush_r+0x1a>
 8016d98:	6a21      	ldr	r1, [r4, #32]
 8016d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016d9c:	4643      	mov	r3, r8
 8016d9e:	463a      	mov	r2, r7
 8016da0:	4628      	mov	r0, r5
 8016da2:	47b0      	blx	r6
 8016da4:	2800      	cmp	r0, #0
 8016da6:	dc06      	bgt.n	8016db6 <__sflush_r+0xfe>
 8016da8:	89a3      	ldrh	r3, [r4, #12]
 8016daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dae:	81a3      	strh	r3, [r4, #12]
 8016db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db4:	e78e      	b.n	8016cd4 <__sflush_r+0x1c>
 8016db6:	4407      	add	r7, r0
 8016db8:	eba8 0800 	sub.w	r8, r8, r0
 8016dbc:	e7e9      	b.n	8016d92 <__sflush_r+0xda>
 8016dbe:	bf00      	nop
 8016dc0:	20400001 	.word	0x20400001

08016dc4 <_fflush_r>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	690b      	ldr	r3, [r1, #16]
 8016dc8:	4605      	mov	r5, r0
 8016dca:	460c      	mov	r4, r1
 8016dcc:	b913      	cbnz	r3, 8016dd4 <_fflush_r+0x10>
 8016dce:	2500      	movs	r5, #0
 8016dd0:	4628      	mov	r0, r5
 8016dd2:	bd38      	pop	{r3, r4, r5, pc}
 8016dd4:	b118      	cbz	r0, 8016dde <_fflush_r+0x1a>
 8016dd6:	6983      	ldr	r3, [r0, #24]
 8016dd8:	b90b      	cbnz	r3, 8016dde <_fflush_r+0x1a>
 8016dda:	f000 f887 	bl	8016eec <__sinit>
 8016dde:	4b14      	ldr	r3, [pc, #80]	; (8016e30 <_fflush_r+0x6c>)
 8016de0:	429c      	cmp	r4, r3
 8016de2:	d11b      	bne.n	8016e1c <_fflush_r+0x58>
 8016de4:	686c      	ldr	r4, [r5, #4]
 8016de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d0ef      	beq.n	8016dce <_fflush_r+0xa>
 8016dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016df0:	07d0      	lsls	r0, r2, #31
 8016df2:	d404      	bmi.n	8016dfe <_fflush_r+0x3a>
 8016df4:	0599      	lsls	r1, r3, #22
 8016df6:	d402      	bmi.n	8016dfe <_fflush_r+0x3a>
 8016df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dfa:	f000 f915 	bl	8017028 <__retarget_lock_acquire_recursive>
 8016dfe:	4628      	mov	r0, r5
 8016e00:	4621      	mov	r1, r4
 8016e02:	f7ff ff59 	bl	8016cb8 <__sflush_r>
 8016e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e08:	07da      	lsls	r2, r3, #31
 8016e0a:	4605      	mov	r5, r0
 8016e0c:	d4e0      	bmi.n	8016dd0 <_fflush_r+0xc>
 8016e0e:	89a3      	ldrh	r3, [r4, #12]
 8016e10:	059b      	lsls	r3, r3, #22
 8016e12:	d4dd      	bmi.n	8016dd0 <_fflush_r+0xc>
 8016e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e16:	f000 f908 	bl	801702a <__retarget_lock_release_recursive>
 8016e1a:	e7d9      	b.n	8016dd0 <_fflush_r+0xc>
 8016e1c:	4b05      	ldr	r3, [pc, #20]	; (8016e34 <_fflush_r+0x70>)
 8016e1e:	429c      	cmp	r4, r3
 8016e20:	d101      	bne.n	8016e26 <_fflush_r+0x62>
 8016e22:	68ac      	ldr	r4, [r5, #8]
 8016e24:	e7df      	b.n	8016de6 <_fflush_r+0x22>
 8016e26:	4b04      	ldr	r3, [pc, #16]	; (8016e38 <_fflush_r+0x74>)
 8016e28:	429c      	cmp	r4, r3
 8016e2a:	bf08      	it	eq
 8016e2c:	68ec      	ldreq	r4, [r5, #12]
 8016e2e:	e7da      	b.n	8016de6 <_fflush_r+0x22>
 8016e30:	0801770c 	.word	0x0801770c
 8016e34:	0801772c 	.word	0x0801772c
 8016e38:	080176ec 	.word	0x080176ec

08016e3c <std>:
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	b510      	push	{r4, lr}
 8016e40:	4604      	mov	r4, r0
 8016e42:	e9c0 3300 	strd	r3, r3, [r0]
 8016e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e4a:	6083      	str	r3, [r0, #8]
 8016e4c:	8181      	strh	r1, [r0, #12]
 8016e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8016e50:	81c2      	strh	r2, [r0, #14]
 8016e52:	6183      	str	r3, [r0, #24]
 8016e54:	4619      	mov	r1, r3
 8016e56:	2208      	movs	r2, #8
 8016e58:	305c      	adds	r0, #92	; 0x5c
 8016e5a:	f7ff fcff 	bl	801685c <memset>
 8016e5e:	4b05      	ldr	r3, [pc, #20]	; (8016e74 <std+0x38>)
 8016e60:	6263      	str	r3, [r4, #36]	; 0x24
 8016e62:	4b05      	ldr	r3, [pc, #20]	; (8016e78 <std+0x3c>)
 8016e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e66:	4b05      	ldr	r3, [pc, #20]	; (8016e7c <std+0x40>)
 8016e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e6a:	4b05      	ldr	r3, [pc, #20]	; (8016e80 <std+0x44>)
 8016e6c:	6224      	str	r4, [r4, #32]
 8016e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	bf00      	nop
 8016e74:	08017111 	.word	0x08017111
 8016e78:	08017133 	.word	0x08017133
 8016e7c:	0801716b 	.word	0x0801716b
 8016e80:	0801718f 	.word	0x0801718f

08016e84 <_cleanup_r>:
 8016e84:	4901      	ldr	r1, [pc, #4]	; (8016e8c <_cleanup_r+0x8>)
 8016e86:	f000 b8af 	b.w	8016fe8 <_fwalk_reent>
 8016e8a:	bf00      	nop
 8016e8c:	08016dc5 	.word	0x08016dc5

08016e90 <__sfmoreglue>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	2268      	movs	r2, #104	; 0x68
 8016e94:	1e4d      	subs	r5, r1, #1
 8016e96:	4355      	muls	r5, r2
 8016e98:	460e      	mov	r6, r1
 8016e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016e9e:	f7ff fd51 	bl	8016944 <_malloc_r>
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	b140      	cbz	r0, 8016eb8 <__sfmoreglue+0x28>
 8016ea6:	2100      	movs	r1, #0
 8016ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8016eac:	300c      	adds	r0, #12
 8016eae:	60a0      	str	r0, [r4, #8]
 8016eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016eb4:	f7ff fcd2 	bl	801685c <memset>
 8016eb8:	4620      	mov	r0, r4
 8016eba:	bd70      	pop	{r4, r5, r6, pc}

08016ebc <__sfp_lock_acquire>:
 8016ebc:	4801      	ldr	r0, [pc, #4]	; (8016ec4 <__sfp_lock_acquire+0x8>)
 8016ebe:	f000 b8b3 	b.w	8017028 <__retarget_lock_acquire_recursive>
 8016ec2:	bf00      	nop
 8016ec4:	24005609 	.word	0x24005609

08016ec8 <__sfp_lock_release>:
 8016ec8:	4801      	ldr	r0, [pc, #4]	; (8016ed0 <__sfp_lock_release+0x8>)
 8016eca:	f000 b8ae 	b.w	801702a <__retarget_lock_release_recursive>
 8016ece:	bf00      	nop
 8016ed0:	24005609 	.word	0x24005609

08016ed4 <__sinit_lock_acquire>:
 8016ed4:	4801      	ldr	r0, [pc, #4]	; (8016edc <__sinit_lock_acquire+0x8>)
 8016ed6:	f000 b8a7 	b.w	8017028 <__retarget_lock_acquire_recursive>
 8016eda:	bf00      	nop
 8016edc:	2400560a 	.word	0x2400560a

08016ee0 <__sinit_lock_release>:
 8016ee0:	4801      	ldr	r0, [pc, #4]	; (8016ee8 <__sinit_lock_release+0x8>)
 8016ee2:	f000 b8a2 	b.w	801702a <__retarget_lock_release_recursive>
 8016ee6:	bf00      	nop
 8016ee8:	2400560a 	.word	0x2400560a

08016eec <__sinit>:
 8016eec:	b510      	push	{r4, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	f7ff fff0 	bl	8016ed4 <__sinit_lock_acquire>
 8016ef4:	69a3      	ldr	r3, [r4, #24]
 8016ef6:	b11b      	cbz	r3, 8016f00 <__sinit+0x14>
 8016ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016efc:	f7ff bff0 	b.w	8016ee0 <__sinit_lock_release>
 8016f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016f04:	6523      	str	r3, [r4, #80]	; 0x50
 8016f06:	4b13      	ldr	r3, [pc, #76]	; (8016f54 <__sinit+0x68>)
 8016f08:	4a13      	ldr	r2, [pc, #76]	; (8016f58 <__sinit+0x6c>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016f0e:	42a3      	cmp	r3, r4
 8016f10:	bf04      	itt	eq
 8016f12:	2301      	moveq	r3, #1
 8016f14:	61a3      	streq	r3, [r4, #24]
 8016f16:	4620      	mov	r0, r4
 8016f18:	f000 f820 	bl	8016f5c <__sfp>
 8016f1c:	6060      	str	r0, [r4, #4]
 8016f1e:	4620      	mov	r0, r4
 8016f20:	f000 f81c 	bl	8016f5c <__sfp>
 8016f24:	60a0      	str	r0, [r4, #8]
 8016f26:	4620      	mov	r0, r4
 8016f28:	f000 f818 	bl	8016f5c <__sfp>
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	60e0      	str	r0, [r4, #12]
 8016f30:	2104      	movs	r1, #4
 8016f32:	6860      	ldr	r0, [r4, #4]
 8016f34:	f7ff ff82 	bl	8016e3c <std>
 8016f38:	68a0      	ldr	r0, [r4, #8]
 8016f3a:	2201      	movs	r2, #1
 8016f3c:	2109      	movs	r1, #9
 8016f3e:	f7ff ff7d 	bl	8016e3c <std>
 8016f42:	68e0      	ldr	r0, [r4, #12]
 8016f44:	2202      	movs	r2, #2
 8016f46:	2112      	movs	r1, #18
 8016f48:	f7ff ff78 	bl	8016e3c <std>
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	61a3      	str	r3, [r4, #24]
 8016f50:	e7d2      	b.n	8016ef8 <__sinit+0xc>
 8016f52:	bf00      	nop
 8016f54:	080176e8 	.word	0x080176e8
 8016f58:	08016e85 	.word	0x08016e85

08016f5c <__sfp>:
 8016f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f5e:	4607      	mov	r7, r0
 8016f60:	f7ff ffac 	bl	8016ebc <__sfp_lock_acquire>
 8016f64:	4b1e      	ldr	r3, [pc, #120]	; (8016fe0 <__sfp+0x84>)
 8016f66:	681e      	ldr	r6, [r3, #0]
 8016f68:	69b3      	ldr	r3, [r6, #24]
 8016f6a:	b913      	cbnz	r3, 8016f72 <__sfp+0x16>
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	f7ff ffbd 	bl	8016eec <__sinit>
 8016f72:	3648      	adds	r6, #72	; 0x48
 8016f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f78:	3b01      	subs	r3, #1
 8016f7a:	d503      	bpl.n	8016f84 <__sfp+0x28>
 8016f7c:	6833      	ldr	r3, [r6, #0]
 8016f7e:	b30b      	cbz	r3, 8016fc4 <__sfp+0x68>
 8016f80:	6836      	ldr	r6, [r6, #0]
 8016f82:	e7f7      	b.n	8016f74 <__sfp+0x18>
 8016f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016f88:	b9d5      	cbnz	r5, 8016fc0 <__sfp+0x64>
 8016f8a:	4b16      	ldr	r3, [pc, #88]	; (8016fe4 <__sfp+0x88>)
 8016f8c:	60e3      	str	r3, [r4, #12]
 8016f8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f92:	6665      	str	r5, [r4, #100]	; 0x64
 8016f94:	f000 f847 	bl	8017026 <__retarget_lock_init_recursive>
 8016f98:	f7ff ff96 	bl	8016ec8 <__sfp_lock_release>
 8016f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016fa4:	6025      	str	r5, [r4, #0]
 8016fa6:	61a5      	str	r5, [r4, #24]
 8016fa8:	2208      	movs	r2, #8
 8016faa:	4629      	mov	r1, r5
 8016fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016fb0:	f7ff fc54 	bl	801685c <memset>
 8016fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fc0:	3468      	adds	r4, #104	; 0x68
 8016fc2:	e7d9      	b.n	8016f78 <__sfp+0x1c>
 8016fc4:	2104      	movs	r1, #4
 8016fc6:	4638      	mov	r0, r7
 8016fc8:	f7ff ff62 	bl	8016e90 <__sfmoreglue>
 8016fcc:	4604      	mov	r4, r0
 8016fce:	6030      	str	r0, [r6, #0]
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d1d5      	bne.n	8016f80 <__sfp+0x24>
 8016fd4:	f7ff ff78 	bl	8016ec8 <__sfp_lock_release>
 8016fd8:	230c      	movs	r3, #12
 8016fda:	603b      	str	r3, [r7, #0]
 8016fdc:	e7ee      	b.n	8016fbc <__sfp+0x60>
 8016fde:	bf00      	nop
 8016fe0:	080176e8 	.word	0x080176e8
 8016fe4:	ffff0001 	.word	0xffff0001

08016fe8 <_fwalk_reent>:
 8016fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fec:	4606      	mov	r6, r0
 8016fee:	4688      	mov	r8, r1
 8016ff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ff4:	2700      	movs	r7, #0
 8016ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8016ffe:	d505      	bpl.n	801700c <_fwalk_reent+0x24>
 8017000:	6824      	ldr	r4, [r4, #0]
 8017002:	2c00      	cmp	r4, #0
 8017004:	d1f7      	bne.n	8016ff6 <_fwalk_reent+0xe>
 8017006:	4638      	mov	r0, r7
 8017008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801700c:	89ab      	ldrh	r3, [r5, #12]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d907      	bls.n	8017022 <_fwalk_reent+0x3a>
 8017012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017016:	3301      	adds	r3, #1
 8017018:	d003      	beq.n	8017022 <_fwalk_reent+0x3a>
 801701a:	4629      	mov	r1, r5
 801701c:	4630      	mov	r0, r6
 801701e:	47c0      	blx	r8
 8017020:	4307      	orrs	r7, r0
 8017022:	3568      	adds	r5, #104	; 0x68
 8017024:	e7e9      	b.n	8016ffa <_fwalk_reent+0x12>

08017026 <__retarget_lock_init_recursive>:
 8017026:	4770      	bx	lr

08017028 <__retarget_lock_acquire_recursive>:
 8017028:	4770      	bx	lr

0801702a <__retarget_lock_release_recursive>:
 801702a:	4770      	bx	lr

0801702c <__swhatbuf_r>:
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	460e      	mov	r6, r1
 8017030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017034:	2900      	cmp	r1, #0
 8017036:	b096      	sub	sp, #88	; 0x58
 8017038:	4614      	mov	r4, r2
 801703a:	461d      	mov	r5, r3
 801703c:	da08      	bge.n	8017050 <__swhatbuf_r+0x24>
 801703e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017042:	2200      	movs	r2, #0
 8017044:	602a      	str	r2, [r5, #0]
 8017046:	061a      	lsls	r2, r3, #24
 8017048:	d410      	bmi.n	801706c <__swhatbuf_r+0x40>
 801704a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801704e:	e00e      	b.n	801706e <__swhatbuf_r+0x42>
 8017050:	466a      	mov	r2, sp
 8017052:	f000 f8c3 	bl	80171dc <_fstat_r>
 8017056:	2800      	cmp	r0, #0
 8017058:	dbf1      	blt.n	801703e <__swhatbuf_r+0x12>
 801705a:	9a01      	ldr	r2, [sp, #4]
 801705c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017064:	425a      	negs	r2, r3
 8017066:	415a      	adcs	r2, r3
 8017068:	602a      	str	r2, [r5, #0]
 801706a:	e7ee      	b.n	801704a <__swhatbuf_r+0x1e>
 801706c:	2340      	movs	r3, #64	; 0x40
 801706e:	2000      	movs	r0, #0
 8017070:	6023      	str	r3, [r4, #0]
 8017072:	b016      	add	sp, #88	; 0x58
 8017074:	bd70      	pop	{r4, r5, r6, pc}
	...

08017078 <__smakebuf_r>:
 8017078:	898b      	ldrh	r3, [r1, #12]
 801707a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801707c:	079d      	lsls	r5, r3, #30
 801707e:	4606      	mov	r6, r0
 8017080:	460c      	mov	r4, r1
 8017082:	d507      	bpl.n	8017094 <__smakebuf_r+0x1c>
 8017084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017088:	6023      	str	r3, [r4, #0]
 801708a:	6123      	str	r3, [r4, #16]
 801708c:	2301      	movs	r3, #1
 801708e:	6163      	str	r3, [r4, #20]
 8017090:	b002      	add	sp, #8
 8017092:	bd70      	pop	{r4, r5, r6, pc}
 8017094:	ab01      	add	r3, sp, #4
 8017096:	466a      	mov	r2, sp
 8017098:	f7ff ffc8 	bl	801702c <__swhatbuf_r>
 801709c:	9900      	ldr	r1, [sp, #0]
 801709e:	4605      	mov	r5, r0
 80170a0:	4630      	mov	r0, r6
 80170a2:	f7ff fc4f 	bl	8016944 <_malloc_r>
 80170a6:	b948      	cbnz	r0, 80170bc <__smakebuf_r+0x44>
 80170a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ac:	059a      	lsls	r2, r3, #22
 80170ae:	d4ef      	bmi.n	8017090 <__smakebuf_r+0x18>
 80170b0:	f023 0303 	bic.w	r3, r3, #3
 80170b4:	f043 0302 	orr.w	r3, r3, #2
 80170b8:	81a3      	strh	r3, [r4, #12]
 80170ba:	e7e3      	b.n	8017084 <__smakebuf_r+0xc>
 80170bc:	4b0d      	ldr	r3, [pc, #52]	; (80170f4 <__smakebuf_r+0x7c>)
 80170be:	62b3      	str	r3, [r6, #40]	; 0x28
 80170c0:	89a3      	ldrh	r3, [r4, #12]
 80170c2:	6020      	str	r0, [r4, #0]
 80170c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170c8:	81a3      	strh	r3, [r4, #12]
 80170ca:	9b00      	ldr	r3, [sp, #0]
 80170cc:	6163      	str	r3, [r4, #20]
 80170ce:	9b01      	ldr	r3, [sp, #4]
 80170d0:	6120      	str	r0, [r4, #16]
 80170d2:	b15b      	cbz	r3, 80170ec <__smakebuf_r+0x74>
 80170d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170d8:	4630      	mov	r0, r6
 80170da:	f000 f891 	bl	8017200 <_isatty_r>
 80170de:	b128      	cbz	r0, 80170ec <__smakebuf_r+0x74>
 80170e0:	89a3      	ldrh	r3, [r4, #12]
 80170e2:	f023 0303 	bic.w	r3, r3, #3
 80170e6:	f043 0301 	orr.w	r3, r3, #1
 80170ea:	81a3      	strh	r3, [r4, #12]
 80170ec:	89a0      	ldrh	r0, [r4, #12]
 80170ee:	4305      	orrs	r5, r0
 80170f0:	81a5      	strh	r5, [r4, #12]
 80170f2:	e7cd      	b.n	8017090 <__smakebuf_r+0x18>
 80170f4:	08016e85 	.word	0x08016e85

080170f8 <__malloc_lock>:
 80170f8:	4801      	ldr	r0, [pc, #4]	; (8017100 <__malloc_lock+0x8>)
 80170fa:	f7ff bf95 	b.w	8017028 <__retarget_lock_acquire_recursive>
 80170fe:	bf00      	nop
 8017100:	24005608 	.word	0x24005608

08017104 <__malloc_unlock>:
 8017104:	4801      	ldr	r0, [pc, #4]	; (801710c <__malloc_unlock+0x8>)
 8017106:	f7ff bf90 	b.w	801702a <__retarget_lock_release_recursive>
 801710a:	bf00      	nop
 801710c:	24005608 	.word	0x24005608

08017110 <__sread>:
 8017110:	b510      	push	{r4, lr}
 8017112:	460c      	mov	r4, r1
 8017114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017118:	f000 f894 	bl	8017244 <_read_r>
 801711c:	2800      	cmp	r0, #0
 801711e:	bfab      	itete	ge
 8017120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017122:	89a3      	ldrhlt	r3, [r4, #12]
 8017124:	181b      	addge	r3, r3, r0
 8017126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801712a:	bfac      	ite	ge
 801712c:	6563      	strge	r3, [r4, #84]	; 0x54
 801712e:	81a3      	strhlt	r3, [r4, #12]
 8017130:	bd10      	pop	{r4, pc}

08017132 <__swrite>:
 8017132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017136:	461f      	mov	r7, r3
 8017138:	898b      	ldrh	r3, [r1, #12]
 801713a:	05db      	lsls	r3, r3, #23
 801713c:	4605      	mov	r5, r0
 801713e:	460c      	mov	r4, r1
 8017140:	4616      	mov	r6, r2
 8017142:	d505      	bpl.n	8017150 <__swrite+0x1e>
 8017144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017148:	2302      	movs	r3, #2
 801714a:	2200      	movs	r2, #0
 801714c:	f000 f868 	bl	8017220 <_lseek_r>
 8017150:	89a3      	ldrh	r3, [r4, #12]
 8017152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	4632      	mov	r2, r6
 801715e:	463b      	mov	r3, r7
 8017160:	4628      	mov	r0, r5
 8017162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017166:	f000 b817 	b.w	8017198 <_write_r>

0801716a <__sseek>:
 801716a:	b510      	push	{r4, lr}
 801716c:	460c      	mov	r4, r1
 801716e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017172:	f000 f855 	bl	8017220 <_lseek_r>
 8017176:	1c43      	adds	r3, r0, #1
 8017178:	89a3      	ldrh	r3, [r4, #12]
 801717a:	bf15      	itete	ne
 801717c:	6560      	strne	r0, [r4, #84]	; 0x54
 801717e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017186:	81a3      	strheq	r3, [r4, #12]
 8017188:	bf18      	it	ne
 801718a:	81a3      	strhne	r3, [r4, #12]
 801718c:	bd10      	pop	{r4, pc}

0801718e <__sclose>:
 801718e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017192:	f000 b813 	b.w	80171bc <_close_r>
	...

08017198 <_write_r>:
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	4d07      	ldr	r5, [pc, #28]	; (80171b8 <_write_r+0x20>)
 801719c:	4604      	mov	r4, r0
 801719e:	4608      	mov	r0, r1
 80171a0:	4611      	mov	r1, r2
 80171a2:	2200      	movs	r2, #0
 80171a4:	602a      	str	r2, [r5, #0]
 80171a6:	461a      	mov	r2, r3
 80171a8:	f7eb ff6d 	bl	8003086 <_write>
 80171ac:	1c43      	adds	r3, r0, #1
 80171ae:	d102      	bne.n	80171b6 <_write_r+0x1e>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	b103      	cbz	r3, 80171b6 <_write_r+0x1e>
 80171b4:	6023      	str	r3, [r4, #0]
 80171b6:	bd38      	pop	{r3, r4, r5, pc}
 80171b8:	2400560c 	.word	0x2400560c

080171bc <_close_r>:
 80171bc:	b538      	push	{r3, r4, r5, lr}
 80171be:	4d06      	ldr	r5, [pc, #24]	; (80171d8 <_close_r+0x1c>)
 80171c0:	2300      	movs	r3, #0
 80171c2:	4604      	mov	r4, r0
 80171c4:	4608      	mov	r0, r1
 80171c6:	602b      	str	r3, [r5, #0]
 80171c8:	f7eb ff79 	bl	80030be <_close>
 80171cc:	1c43      	adds	r3, r0, #1
 80171ce:	d102      	bne.n	80171d6 <_close_r+0x1a>
 80171d0:	682b      	ldr	r3, [r5, #0]
 80171d2:	b103      	cbz	r3, 80171d6 <_close_r+0x1a>
 80171d4:	6023      	str	r3, [r4, #0]
 80171d6:	bd38      	pop	{r3, r4, r5, pc}
 80171d8:	2400560c 	.word	0x2400560c

080171dc <_fstat_r>:
 80171dc:	b538      	push	{r3, r4, r5, lr}
 80171de:	4d07      	ldr	r5, [pc, #28]	; (80171fc <_fstat_r+0x20>)
 80171e0:	2300      	movs	r3, #0
 80171e2:	4604      	mov	r4, r0
 80171e4:	4608      	mov	r0, r1
 80171e6:	4611      	mov	r1, r2
 80171e8:	602b      	str	r3, [r5, #0]
 80171ea:	f7eb ff74 	bl	80030d6 <_fstat>
 80171ee:	1c43      	adds	r3, r0, #1
 80171f0:	d102      	bne.n	80171f8 <_fstat_r+0x1c>
 80171f2:	682b      	ldr	r3, [r5, #0]
 80171f4:	b103      	cbz	r3, 80171f8 <_fstat_r+0x1c>
 80171f6:	6023      	str	r3, [r4, #0]
 80171f8:	bd38      	pop	{r3, r4, r5, pc}
 80171fa:	bf00      	nop
 80171fc:	2400560c 	.word	0x2400560c

08017200 <_isatty_r>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	4d06      	ldr	r5, [pc, #24]	; (801721c <_isatty_r+0x1c>)
 8017204:	2300      	movs	r3, #0
 8017206:	4604      	mov	r4, r0
 8017208:	4608      	mov	r0, r1
 801720a:	602b      	str	r3, [r5, #0]
 801720c:	f7eb ff73 	bl	80030f6 <_isatty>
 8017210:	1c43      	adds	r3, r0, #1
 8017212:	d102      	bne.n	801721a <_isatty_r+0x1a>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	b103      	cbz	r3, 801721a <_isatty_r+0x1a>
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	bd38      	pop	{r3, r4, r5, pc}
 801721c:	2400560c 	.word	0x2400560c

08017220 <_lseek_r>:
 8017220:	b538      	push	{r3, r4, r5, lr}
 8017222:	4d07      	ldr	r5, [pc, #28]	; (8017240 <_lseek_r+0x20>)
 8017224:	4604      	mov	r4, r0
 8017226:	4608      	mov	r0, r1
 8017228:	4611      	mov	r1, r2
 801722a:	2200      	movs	r2, #0
 801722c:	602a      	str	r2, [r5, #0]
 801722e:	461a      	mov	r2, r3
 8017230:	f7eb ff6c 	bl	800310c <_lseek>
 8017234:	1c43      	adds	r3, r0, #1
 8017236:	d102      	bne.n	801723e <_lseek_r+0x1e>
 8017238:	682b      	ldr	r3, [r5, #0]
 801723a:	b103      	cbz	r3, 801723e <_lseek_r+0x1e>
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	bd38      	pop	{r3, r4, r5, pc}
 8017240:	2400560c 	.word	0x2400560c

08017244 <_read_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	4d07      	ldr	r5, [pc, #28]	; (8017264 <_read_r+0x20>)
 8017248:	4604      	mov	r4, r0
 801724a:	4608      	mov	r0, r1
 801724c:	4611      	mov	r1, r2
 801724e:	2200      	movs	r2, #0
 8017250:	602a      	str	r2, [r5, #0]
 8017252:	461a      	mov	r2, r3
 8017254:	f7eb fefa 	bl	800304c <_read>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_read_r+0x1e>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_read_r+0x1e>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	2400560c 	.word	0x2400560c

08017268 <_init>:
 8017268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726a:	bf00      	nop
 801726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726e:	bc08      	pop	{r3}
 8017270:	469e      	mov	lr, r3
 8017272:	4770      	bx	lr

08017274 <_fini>:
 8017274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017276:	bf00      	nop
 8017278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801727a:	bc08      	pop	{r3}
 801727c:	469e      	mov	lr, r3
 801727e:	4770      	bx	lr
